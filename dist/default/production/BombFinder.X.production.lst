

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 21:11:53 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     _ANSEL0bits	set	4024
    35  0000                     _BAUDCONbits	set	4010
    36  0000                     _CAP1BUFH	set	3945
    37  0000                     _CAP1BUFL	set	3944
    38  0000                     _CAP1CON	set	3939
    39  0000                     _CAP2BUFH	set	3943
    40  0000                     _CAP2BUFL	set	3942
    41  0000                     _CAP2CON	set	3938
    42  0000                     _INTCONbits	set	4082
    43  0000                     _IPR1bits	set	3999
    44  0000                     _LATAbits	set	3977
    45  0000                     _LATB	set	3978
    46  0000                     _LATCbits	set	3979
    47  0000                     _LATDbits	set	3980
    48  0000                     _LATEbits	set	3981
    49  0000                     _OSCCON	set	4051
    50  0000                     _OSCCONbits	set	4051
    51  0000                     _PIE1bits	set	3997
    52  0000                     _PIR1bits	set	3998
    53  0000                     _PTCON0	set	3967
    54  0000                     _PTCON1	set	3966
    55  0000                     _PTPERH	set	3962
    56  0000                     _PTPERL	set	3963
    57  0000                     _PWMCON0	set	3951
    58  0000                     _PWMCON1	set	3950
    59  0000                     _RCONbits	set	4048
    60  0000                     _RCREG	set	4014
    61  0000                     _RCSTAbits	set	4011
    62  0000                     _SPBRG	set	4015
    63  0000                     _SPBRGH	set	4016
    64  0000                     _T5CON	set	4023
    65  0000                     _TRISAbits	set	3986
    66  0000                     _TRISBbits	set	3987
    67  0000                     _TRISC	set	3988
    68  0000                     _TRISCbits	set	3988
    69  0000                     _TRISDbits	set	3989
    70  0000                     _TRISEbits	set	3990
    71  0000                     _TXREG	set	4013
    72  0000                     _TXSTAbits	set	4012
    73  0000                     _PDC0H	set	3960
    74  0000                     _PDC0L	set	3961
    75  0000                     _PDC1H	set	3958
    76  0000                     _PDC1L	set	3959
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  001078                     __pcinit:
    82                           	opt stack 0
    83  001078                     start_initialization:
    84                           	opt stack 0
    85  001078                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to BANK0 (17 bytes)
    89  001078  EE00  F082         	lfsr	0,__pbssBANK0
    90  00107C  0E11               	movlw	17
    91  00107E                     clear_0:
    92  00107E  6AEE               	clrf	postinc0,c
    93  001080  06E8               	decf	wreg,f,c
    94  001082  E1FD               	bnz	clear_0
    95                           
    96                           ; Clear objects allocated to COMRAM (1 bytes)
    97  001084  6A4D               	clrf	__pbssCOMRAM& (0+255),c
    98  001086                     end_of_initialization:
    99                           	opt stack 0
   100  001086                     __end_of__initialization:
   101                           	opt stack 0
   102  001086  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   103  001088  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   104  00108A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  00108C  6EF8               	movwf	tblptru,c
   106  00108E  0100               	movlb	0
   107  001090  EFBF  F002         	goto	_main	;jump to C main() function
   108                           tblptru	equ	0xFF8
   109                           postinc0	equ	0xFEE
   110                           wreg	equ	0xFE8
   111                           
   112                           	psect	bssCOMRAM
   113  00004D                     __pbssCOMRAM:
   114                           	opt stack 0
   115  00004D                     _i:
   116                           	opt stack 0
   117  00004D                     	ds	1
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	bssBANK0
   123  000082                     __pbssBANK0:
   124                           	opt stack 0
   125  000082                     _RFID_Read:
   126                           	opt stack 0
   127  000082                     	ds	1
   128  000083                     _ReceivedString:
   129                           	opt stack 0
   130  000083                     	ds	16
   131                           tblptru	equ	0xFF8
   132                           postinc0	equ	0xFEE
   133                           wreg	equ	0xFE8
   134                           
   135                           	psect	cstackBANK0
   136  000060                     __pcstackBANK0:
   137                           	opt stack 0
   138  000060                     main@Message:
   139                           	opt stack 0
   140                           
   141                           ; 10 bytes @ 0x0
   142  000060                     	ds	10
   143  00006A                     main@test:
   144                           	opt stack 0
   145                           
   146                           ; 2 bytes @ 0xA
   147  00006A                     	ds	2
   148  00006C                     main@ScanAngle:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0xC
   152  00006C                     	ds	1
   153  00006D                     main@mode:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0xD
   157  00006D                     	ds	1
   158  00006E                     main@DirectionFound:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0xE
   162  00006E                     	ds	1
   163  00006F                     main@i:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0xF
   167  00006F                     	ds	1
   168  000070                     main@mL:
   169                           	opt stack 0
   170                           
   171                           ; 9 bytes @ 0x10
   172  000070                     	ds	9
   173  000079                     main@mR:
   174                           	opt stack 0
   175                           
   176                           ; 9 bytes @ 0x19
   177  000079                     	ds	9
   178                           tblptru	equ	0xFF8
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	opt stack 0
   185  000001                     ??_InterruptHandlerHigh:
   186  000001                     
   187                           ; 0 bytes @ 0x0
   188  000001                     	ds	14
   189  00000F                     ??_delay_s:
   190  00000F                     ??_delay_tenth_s:
   191  00000F                     ?_grabLeftIR:
   192                           	opt stack 0
   193  00000F                     ?_grabRightIR:
   194                           	opt stack 0
   195  00000F                     ?___wmul:
   196                           	opt stack 0
   197  00000F                     _initRFID$1307:
   198                           	opt stack 0
   199  00000F                     enableSensor@status:
   200                           	opt stack 0
   201  00000F                     VerifySignal@Signal:
   202                           	opt stack 0
   203  00000F                     ___wmul@multiplier:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0xE
   207  00000F                     	ds	1
   208  000010                     delay_s@seconds:
   209                           	opt stack 0
   210  000010                     delay_tenth_s@tenth_seconds:
   211                           	opt stack 0
   212  000010                     enableSensor@sensor:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0xF
   216  000010                     	ds	1
   217  000011                     ??_VerifySignal:
   218  000011                     ??_grabLeftIR:
   219  000011                     ??_grabRightIR:
   220  000011                     delay_s@i:
   221                           	opt stack 0
   222  000011                     delay_tenth_s@i:
   223                           	opt stack 0
   224  000011                     ___wmul@multiplicand:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x10
   228  000011                     	ds	2
   229  000013                     ___wmul@product:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x12
   233  000013                     	ds	1
   234  000014                     grabRightIR@IR_signal:
   235                           	opt stack 0
   236  000014                     grabLeftIR@IR_signal:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x13
   240  000014                     	ds	1
   241  000015                     ?___awdiv:
   242                           	opt stack 0
   243  000015                     ___awdiv@dividend:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x14
   247  000015                     	ds	1
   248  000016                     grabRightIR@i:
   249                           	opt stack 0
   250  000016                     grabLeftIR@i:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x15
   254  000016                     	ds	1
   255  000017                     VerifySignal@checksum:
   256                           	opt stack 0
   257  000017                     ___awdiv@divisor:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x16
   261  000017                     	ds	1
   262  000018                     VerifySignal@hexByte:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x17
   266  000018                     	ds	1
   267  000019                     ___awdiv@counter:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x18
   271  000019                     	ds	1
   272  00001A                     VerifySignal@i:
   273                           	opt stack 0
   274  00001A                     ___awdiv@sign:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x19
   278  00001A                     	ds	1
   279  00001B                     ___awdiv@quotient:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x1A
   283  00001B                     	ds	2
   284  00001D                     setMotorPWM@m:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x1C
   288  00001D                     	ds	2
   289  00001F                     ??_setMotorPWM:
   290                           
   291                           ; 0 bytes @ 0x1E
   292  00001F                     	ds	5
   293  000024                     setMotorPWM@PWMduty:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x23
   297  000024                     	ds	2
   298  000026                     stop@mL:
   299                           	opt stack 0
   300  000026                     fullSpeedAhead@mL:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x25
   304  000026                     	ds	2
   305  000028                     stop@mR:
   306                           	opt stack 0
   307  000028                     fullSpeedAhead@mR:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x27
   311  000028                     	ds	2
   312  00002A                     
   313                           ; 0 bytes @ 0x29
   314  00002A                     	ds	1
   315  00002B                     turnLeft@mL:
   316                           	opt stack 0
   317  00002B                     turnRight@mL:
   318                           	opt stack 0
   319  00002B                     fullSpeedBack@mL:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2A
   323  00002B                     	ds	2
   324  00002D                     turnLeft@mR:
   325                           	opt stack 0
   326  00002D                     turnRight@mR:
   327                           	opt stack 0
   328  00002D                     fullSpeedBack@mR:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x2C
   332  00002D                     	ds	2
   333  00002F                     ScanIR@mL:
   334                           	opt stack 0
   335  00002F                     ScanWithRange@mL:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2E
   339  00002F                     	ds	2
   340  000031                     ScanIR@mR:
   341                           	opt stack 0
   342  000031                     ScanWithRange@mR:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x30
   346  000031                     	ds	2
   347  000033                     ??_ScanIR:
   348  000033                     ScanWithRange@tenth_seconds:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x32
   352  000033                     	ds	1
   353  000034                     ??_ScanWithRange:
   354                           
   355                           ; 0 bytes @ 0x33
   356  000034                     	ds	1
   357  000035                     ScanIR@ClearSignalTolerance:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x34
   361  000035                     	ds	1
   362  000036                     ScanWithRange@ResultFalseL:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x35
   366  000036                     	ds	1
   367  000037                     ScanWithRange@ResultFalseC:
   368                           	opt stack 0
   369  000037                     ScanIR@DirectionFoundLimit:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x36
   373  000037                     	ds	1
   374  000038                     ScanWithRange@ResultFalseR:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x37
   378  000038                     	ds	1
   379  000039                     ScanIR@DirectionFoundTolerance:
   380                           	opt stack 0
   381  000039                     ScanWithRange@ClearSignalTolerance:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x38
   385  000039                     	ds	2
   386  00003B                     ScanWithRange@DirectionFoundLimit:
   387                           	opt stack 0
   388  00003B                     ScanIR@SensorResult:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x3A
   392  00003B                     	ds	2
   393  00003D                     ScanWithRange@DirectionFoundTolerance:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x3C
   397  00003D                     	ds	2
   398  00003F                     ScanWithRange@SensorResultL:
   399                           	opt stack 0
   400                           
   401                           ; 4 bytes @ 0x3E
   402  00003F                     	ds	4
   403  000043                     ScanWithRange@SensorResultC:
   404                           	opt stack 0
   405                           
   406                           ; 4 bytes @ 0x42
   407  000043                     	ds	4
   408  000047                     ScanWithRange@SensorResultR:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0x46
   412  000047                     	ds	4
   413  00004B                     ??_main:
   414                           
   415                           ; 0 bytes @ 0x4A
   416  00004B                     	ds	2
   417                           tblptru	equ	0xFF8
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 31 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  PathTaken     100    0        unsigned char [100]
   431 ;;  Message        10    0[BANK0 ] unsigned char [10]
   432 ;;  mR              9   25[BANK0 ] struct DC_motor
   433 ;;  mL              9   16[BANK0 ] struct DC_motor
   434 ;;  SignalStreng    3    0        unsigned char [3]
   435 ;;  test            2   10[BANK0 ] unsigned int 
   436 ;;  i               1   15[BANK0 ] unsigned char 
   437 ;;  DirectionFou    1   14[BANK0 ] unsigned char 
   438 ;;  mode            1   13[BANK0 ] unsigned char 
   439 ;;  ScanAngle       1   12[BANK0 ] unsigned char 
   440 ;; Return value:  Size  Location     Type
   441 ;;		None               void
   442 ;; Registers used:
   443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   449 ;;      Params:         0       0       0       0
   450 ;;      Locals:         0      34       0       0
   451 ;;      Temps:          2       0       0       0
   452 ;;      Totals:         2      34       0       0
   453 ;;Total ram usage:       36 bytes
   454 ;; Hardware stack levels required when called:    6
   455 ;; This function calls:
   456 ;;		_ScanIR
   457 ;;		_ScanWithRange
   458 ;;		_VerifySignal
   459 ;;		_delay_s
   460 ;;		_delay_tenth_s
   461 ;;		_enableSensor
   462 ;;		_fullSpeedAhead
   463 ;;		_fullSpeedBack
   464 ;;		_initIR
   465 ;;		_initMotorPWM
   466 ;;		_initRFID
   467 ;;		_stop
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text0
   474  00057E                     __ptext0:
   475                           	opt stack 0
   476  00057E                     _main:
   477                           	opt stack 25
   478                           
   479                           ;main.c: 34: unsigned char Message[10];
   480                           ;main.c: 35: unsigned char i=0;
   481                           
   482                           ;incstack = 0
   483  00057E  0E00               	movlw	0
   484  000580  0100               	movlb	0	; () banked
   485  000582  6F6F               	movwf	main@i& (0+255),b
   486                           
   487                           ;main.c: 36: unsigned char mode=0;
   488  000584  0E00               	movlw	0
   489  000586  0100               	movlb	0	; () banked
   490  000588  6F6D               	movwf	main@mode& (0+255),b
   491                           
   492                           ;main.c: 37: char DirectionFound=0;
   493  00058A  0E00               	movlw	0
   494  00058C  0100               	movlb	0	; () banked
   495  00058E  6F6E               	movwf	main@DirectionFound& (0+255),b
   496                           
   497                           ;main.c: 38: unsigned char SignalStrength[3];
   498                           ;main.c: 39: char PathTaken[100];
   499                           ;main.c: 40: unsigned int test=0;
   500  000590  0E00               	movlw	0
   501  000592  0100               	movlb	0	; () banked
   502  000594  6F6B               	movwf	(main@test+1)& (0+255),b
   503  000596  0E00               	movlw	0
   504  000598  6F6A               	movwf	main@test& (0+255),b
   505                           
   506                           ;main.c: 42: unsigned char ScanAngle=6;
   507  00059A  0E06               	movlw	6
   508  00059C  0100               	movlb	0	; () banked
   509  00059E  6F6C               	movwf	main@ScanAngle& (0+255),b
   510                           
   511                           ; BSR set to: 0
   512                           ;main.c: 45: INTCONbits.GIEH = 1;
   513  0005A0  8EF2               	bsf	intcon,7,c	;volatile
   514                           
   515                           ; BSR set to: 0
   516                           ;main.c: 46: RCONbits.IPEN = 1;
   517  0005A2  8ED0               	bsf	4048,7,c	;volatile
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 47: INTCONbits.GIEL = 1;
   521  0005A4  8CF2               	bsf	intcon,6,c	;volatile
   522                           
   523                           ; BSR set to: 0
   524                           ;main.c: 48: INTCONbits.INT0IE = 1;
   525  0005A6  88F2               	bsf	intcon,4,c	;volatile
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 49: INTCONbits.PEIE = 1;
   529  0005A8  8CF2               	bsf	intcon,6,c	;volatile
   530                           
   531                           ; BSR set to: 0
   532                           ;main.c: 51: IPR1bits.RCIP=1;
   533  0005AA  8A9F               	bsf	3999,5,c	;volatile
   534                           
   535                           ; BSR set to: 0
   536                           ;main.c: 52: PIE1bits.RCIE=1;
   537  0005AC  8A9D               	bsf	3997,5,c	;volatile
   538                           
   539                           ; BSR set to: 0
   540                           ;main.c: 53: PIR1bits.RC1IF = 0;
   541  0005AE  9A9E               	bcf	3998,5,c	;volatile
   542                           
   543                           ;main.c: 56: struct DC_motor mL, mR;
   544                           ;main.c: 57: mL.power=0;
   545  0005B0  0E00               	movlw	0
   546  0005B2  0100               	movlb	0	; () banked
   547  0005B4  6F70               	movwf	main@mL& (0+255),b
   548                           
   549                           ;main.c: 58: mL.direction=1;
   550  0005B6  0E01               	movlw	1
   551  0005B8  0100               	movlb	0	; () banked
   552  0005BA  6F71               	movwf	(main@mL+1)& (0+255),b
   553                           
   554                           ; BSR set to: 0
   555                           ;main.c: 59: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   556  0005BC  0E79               	movlw	121
   557  0005BE  0100               	movlb	0	; () banked
   558  0005C0  6F72               	movwf	(main@mL+2)& (0+255),b
   559  0005C2  0E0F               	movlw	15
   560  0005C4  0100               	movlb	0	; () banked
   561  0005C6  6F73               	movwf	(main@mL+3)& (0+255),b
   562                           
   563                           ; BSR set to: 0
   564                           ;main.c: 60: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   565  0005C8  0E78               	movlw	120
   566  0005CA  0100               	movlb	0	; () banked
   567  0005CC  6F74               	movwf	(main@mL+4)& (0+255),b
   568  0005CE  0E0F               	movlw	15
   569  0005D0  0100               	movlb	0	; () banked
   570  0005D2  6F75               	movwf	(main@mL+5)& (0+255),b
   571                           
   572                           ;main.c: 61: mL.dir_pin=0;
   573  0005D4  0E00               	movlw	0
   574  0005D6  0100               	movlb	0	; () banked
   575  0005D8  6F76               	movwf	(main@mL+6)& (0+255),b
   576                           
   577                           ;main.c: 62: mL.PWMperiod=199;
   578  0005DA  0E00               	movlw	0
   579  0005DC  0100               	movlb	0	; () banked
   580  0005DE  6F78               	movwf	(main@mL+8)& (0+255),b
   581  0005E0  0EC7               	movlw	199
   582  0005E2  6F77               	movwf	(main@mL+7)& (0+255),b
   583                           
   584                           ;main.c: 64: mR.power=0;
   585  0005E4  0E00               	movlw	0
   586  0005E6  0100               	movlb	0	; () banked
   587  0005E8  6F79               	movwf	main@mR& (0+255),b
   588                           
   589                           ;main.c: 65: mR.direction=1;
   590  0005EA  0E01               	movlw	1
   591  0005EC  0100               	movlb	0	; () banked
   592  0005EE  6F7A               	movwf	(main@mR+1)& (0+255),b
   593                           
   594                           ; BSR set to: 0
   595                           ;main.c: 66: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   596  0005F0  0E77               	movlw	119
   597  0005F2  0100               	movlb	0	; () banked
   598  0005F4  6F7B               	movwf	(main@mR+2)& (0+255),b
   599  0005F6  0E0F               	movlw	15
   600  0005F8  0100               	movlb	0	; () banked
   601  0005FA  6F7C               	movwf	(main@mR+3)& (0+255),b
   602                           
   603                           ; BSR set to: 0
   604                           ;main.c: 67: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   605  0005FC  0E76               	movlw	118
   606  0005FE  0100               	movlb	0	; () banked
   607  000600  6F7D               	movwf	(main@mR+4)& (0+255),b
   608  000602  0E0F               	movlw	15
   609  000604  0100               	movlb	0	; () banked
   610  000606  6F7E               	movwf	(main@mR+5)& (0+255),b
   611                           
   612                           ;main.c: 68: mR.dir_pin=2;
   613  000608  0E02               	movlw	2
   614  00060A  0100               	movlb	0	; () banked
   615  00060C  6F7F               	movwf	(main@mR+6)& (0+255),b
   616                           
   617                           ;main.c: 69: mR.PWMperiod=199;
   618  00060E  0E00               	movlw	0
   619  000610  0100               	movlb	0	; () banked
   620  000612  6F81               	movwf	(main@mR+8)& (0+255),b
   621  000614  0EC7               	movlw	199
   622  000616  6F80               	movwf	(main@mR+7)& (0+255),b
   623                           
   624                           ;main.c: 71: OSCCON = 0x72;
   625  000618  0E72               	movlw	114
   626  00061A  6ED3               	movwf	4051,c	;volatile
   627  00061C                     l63:
   628  00061C  B4D3               	btfsc	4051,2,c	;volatile
   629  00061E  D104               	goto	l2332
   630  000620  D7FD               	goto	l63
   631  000622                     l2250:
   632                           
   633                           ;main.c: 79: initMotorPWM();
   634  000622  ECDC  F007         	call	_initMotorPWM	;wreg free
   635                           
   636                           ;main.c: 80: initRFID();
   637  000626  EC2C  F008         	call	_initRFID	;wreg free
   638                           
   639                           ;main.c: 81: initIR();
   640  00062A  EC1B  F008         	call	_initIR	;wreg free
   641                           
   642                           ;main.c: 85: fullSpeedAhead(&mL, &mR);
   643  00062E  0E70               	movlw	low main@mL
   644  000630  6E26               	movwf	fullSpeedAhead@mL,c
   645  000632  0E00               	movlw	high main@mL
   646  000634  6E27               	movwf	fullSpeedAhead@mL+1,c
   647  000636  0E79               	movlw	low main@mR
   648  000638  6E28               	movwf	fullSpeedAhead@mR,c
   649  00063A  0E00               	movlw	high main@mR
   650  00063C  6E29               	movwf	fullSpeedAhead@mR+1,c
   651  00063E  EC07  F007         	call	_fullSpeedAhead	;wreg free
   652                           
   653                           ;main.c: 86: delay_s(1);
   654  000642  0E01               	movlw	1
   655  000644  EC89  F007         	call	_delay_s
   656                           
   657                           ;main.c: 87: stop(&mL, &mR);
   658  000648  0E70               	movlw	low main@mL
   659  00064A  6E26               	movwf	stop@mL,c
   660  00064C  0E00               	movlw	high main@mL
   661  00064E  6E27               	movwf	stop@mL+1,c
   662  000650  0E79               	movlw	low main@mR
   663  000652  6E28               	movwf	stop@mR,c
   664  000654  0E00               	movlw	high main@mR
   665  000656  6E29               	movwf	stop@mR+1,c
   666  000658  EC07  F006         	call	_stop	;wreg free
   667                           
   668                           ;main.c: 88: fullSpeedBack(&mL, &mR);
   669  00065C  0E70               	movlw	low main@mL
   670  00065E  6E2B               	movwf	fullSpeedBack@mL,c
   671  000660  0E00               	movlw	high main@mL
   672  000662  6E2C               	movwf	fullSpeedBack@mL+1,c
   673  000664  0E79               	movlw	low main@mR
   674  000666  6E2D               	movwf	fullSpeedBack@mR,c
   675  000668  0E00               	movlw	high main@mR
   676  00066A  6E2E               	movwf	fullSpeedBack@mR+1,c
   677  00066C  ECC1  F007         	call	_fullSpeedBack	;wreg free
   678                           
   679                           ;main.c: 89: delay_s(1);
   680  000670  0E01               	movlw	1
   681  000672  EC89  F007         	call	_delay_s
   682                           
   683                           ;main.c: 90: stop(&mL, &mR);
   684  000676  0E70               	movlw	low main@mL
   685  000678  6E26               	movwf	stop@mL,c
   686  00067A  0E00               	movlw	high main@mL
   687  00067C  6E27               	movwf	stop@mL+1,c
   688  00067E  0E79               	movlw	low main@mR
   689  000680  6E28               	movwf	stop@mR,c
   690  000682  0E00               	movlw	high main@mR
   691  000684  6E29               	movwf	stop@mR+1,c
   692  000686  EC07  F006         	call	_stop	;wreg free
   693                           
   694                           ;main.c: 92: enableSensor(0, 1);
   695  00068A  0E01               	movlw	1
   696  00068C  6E0F               	movwf	enableSensor@status,c
   697  00068E  0E00               	movlw	0
   698  000690  ECF5  F007         	call	_enableSensor
   699                           
   700                           ;main.c: 93: enableSensor(1, 1);
   701  000694  0E01               	movlw	1
   702  000696  6E0F               	movwf	enableSensor@status,c
   703  000698  0E01               	movlw	1
   704  00069A  ECF5  F007         	call	_enableSensor
   705  00069E  D0C1               	goto	l2328
   706  0006A0                     l2270:
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 100: if (DirectionFound==0) {
   710  0006A0  0100               	movlb	0	; () banked
   711  0006A2  516E               	movf	main@DirectionFound& (0+255),w,b
   712  0006A4  0100               	movlb	0	; () banked
   713  0006A6  A4D8               	btfss	status,2,c
   714  0006A8  D00D               	goto	l2274
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 102: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   718  0006AA  0E70               	movlw	low main@mL
   719  0006AC  6E2F               	movwf	ScanWithRange@mL,c
   720  0006AE  0E00               	movlw	high main@mL
   721  0006B0  6E30               	movwf	ScanWithRange@mL+1,c
   722  0006B2  0E79               	movlw	low main@mR
   723  0006B4  6E31               	movwf	ScanWithRange@mR,c
   724  0006B6  0E00               	movlw	high main@mR
   725  0006B8  6E32               	movwf	ScanWithRange@mR+1,c
   726  0006BA  C06C  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   727  0006BE  EC59  F000         	call	_ScanWithRange	;wreg free
   728  0006C2  D00E               	goto	L2
   729  0006C4                     l2274:
   730                           
   731                           ; BSR set to: 0
   732  0006C4  0100               	movlb	0	; () banked
   733  0006C6  056E               	decf	main@DirectionFound& (0+255),w,b
   734  0006C8  A4D8               	btfss	status,2,c
   735  0006CA  D00D               	goto	l2278
   736                           
   737                           ; BSR set to: 0
   738                           ;main.c: 105: DirectionFound = ScanIR(&mL, &mR);
   739  0006CC  0E70               	movlw	low main@mL
   740  0006CE  6E2F               	movwf	ScanIR@mL,c
   741  0006D0  0E00               	movlw	high main@mL
   742  0006D2  6E30               	movwf	ScanIR@mL+1,c
   743  0006D4  0E79               	movlw	low main@mR
   744  0006D6  6E31               	movwf	ScanIR@mR,c
   745  0006D8  0E00               	movlw	high main@mR
   746  0006DA  6E32               	movwf	ScanIR@mR+1,c
   747  0006DC  EC21  F004         	call	_ScanIR	;wreg free
   748  0006E0                     L2:
   749  0006E0  0100               	movlb	0	; () banked
   750  0006E2  6F6E               	movwf	main@DirectionFound& (0+255),b
   751                           
   752                           ;main.c: 106: } else if (DirectionFound==2) {
   753  0006E4  D0A1               	goto	l2332
   754  0006E6                     l2278:
   755                           
   756                           ; BSR set to: 0
   757  0006E6  0E02               	movlw	2
   758  0006E8  0100               	movlb	0	; () banked
   759  0006EA  196E               	xorwf	main@DirectionFound& (0+255),w,b
   760  0006EC  A4D8               	btfss	status,2,c
   761  0006EE  D09C               	goto	l2332
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 107: mode=2;
   765  0006F0  0E02               	movlw	2
   766  0006F2  D098               	goto	L3
   767  0006F4                     l2282:
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 126: if (!RFID_Read) {
   771  0006F4  0100               	movlb	0	; () banked
   772  0006F6  5182               	movf	_RFID_Read& (0+255),w,b	;volatile
   773  0006F8  A4D8               	btfss	status,2,c
   774  0006FA  D00E               	goto	l2288
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 127: fullSpeedAhead(&mL, &mR);
   778  0006FC  0E70               	movlw	low main@mL
   779  0006FE  6E26               	movwf	fullSpeedAhead@mL,c
   780  000700  0E00               	movlw	high main@mL
   781  000702  6E27               	movwf	fullSpeedAhead@mL+1,c
   782  000704  0E79               	movlw	low main@mR
   783  000706  6E28               	movwf	fullSpeedAhead@mR,c
   784  000708  0E00               	movlw	high main@mR
   785  00070A  6E29               	movwf	fullSpeedAhead@mR+1,c
   786  00070C  EC07  F007         	call	_fullSpeedAhead	;wreg free
   787                           
   788                           ;main.c: 128: delay_tenth_s(5);
   789  000710  0E05               	movlw	5
   790  000712  ECA5  F007         	call	_delay_tenth_s
   791                           
   792                           ;main.c: 129: } else {
   793  000716  D082               	goto	l2326
   794  000718                     l2288:
   795                           
   796                           ;main.c: 130: stop(&mL, &mR);
   797  000718  0E70               	movlw	low main@mL
   798  00071A  6E26               	movwf	stop@mL,c
   799  00071C  0E00               	movlw	high main@mL
   800  00071E  6E27               	movwf	stop@mL+1,c
   801  000720  0E79               	movlw	low main@mR
   802  000722  6E28               	movwf	stop@mR,c
   803  000724  0E00               	movlw	high main@mR
   804  000726  6E29               	movwf	stop@mR+1,c
   805  000728  EC07  F006         	call	_stop	;wreg free
   806                           
   807                           ;main.c: 131: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   808  00072C  0E03               	movlw	3
   809  00072E  0100               	movlb	0	; () banked
   810  000730  1992               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   811  000732  A4D8               	btfss	status,2,c
   812  000734  D002               	goto	u1690
   813  000736  0E01               	movlw	1
   814  000738  D001               	goto	u1692
   815  00073A                     u1690:
   816  00073A  0E00               	movlw	0
   817  00073C                     u1692:
   818  00073C  6E4B               	movwf	??_main& (0+255),c
   819  00073E  0E02               	movlw	2
   820  000740  0100               	movlb	0	; () banked
   821  000742  1983               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   822  000744  A4D8               	btfss	status,2,c
   823  000746  D002               	goto	u1700
   824  000748  0E01               	movlw	1
   825  00074A  D001               	goto	u1702
   826  00074C                     u1700:
   827  00074C  0E00               	movlw	0
   828  00074E                     u1702:
   829  00074E  144B               	andwf	??_main,w,c
   830  000750  A0E8               	btfss	wreg,0,c
   831  000752  D064               	goto	l2326
   832                           
   833                           ; BSR set to: 0
   834                           ;main.c: 132: if (VerifySignal(ReceivedString)){
   835  000754  0E83               	movlw	low _ReceivedString
   836  000756  6E0F               	movwf	VerifySignal@Signal,c
   837  000758  0E00               	movlw	high _ReceivedString
   838  00075A  6E10               	movwf	VerifySignal@Signal+1,c
   839  00075C  ECAD  F005         	call	_VerifySignal	;wreg free
   840  000760  0900               	iorlw	0
   841  000762  B4D8               	btfsc	status,2,c
   842  000764  D03A               	goto	l2318
   843                           
   844                           ;main.c: 134: for (i=0; i<10; i++){
   845  000766  0E00               	movlw	0
   846  000768  0100               	movlb	0	; () banked
   847  00076A  6F6F               	movwf	main@i& (0+255),b
   848  00076C                     l2296:
   849                           
   850                           ; BSR set to: 0
   851  00076C  0E09               	movlw	9
   852  00076E  0100               	movlb	0	; () banked
   853  000770  656F               	cpfsgt	main@i& (0+255),b
   854  000772  D001               	goto	l2300
   855  000774  D01C               	goto	l2306
   856  000776                     l2300:
   857                           
   858                           ; BSR set to: 0
   859                           ;main.c: 135: Message[i] = ReceivedString[i+1];
   860  000776  0100               	movlb	0	; () banked
   861  000778  516F               	movf	main@i& (0+255),w,b
   862  00077A  6E4B               	movwf	??_main& (0+255),c
   863  00077C  6A4C               	clrf	(??_main+1)& (0+255),c
   864  00077E  0E01               	movlw	1
   865  000780  264B               	addwf	??_main,f,c
   866  000782  0E00               	movlw	0
   867  000784  224C               	addwfc	??_main+1,f,c
   868  000786  0E83               	movlw	low _ReceivedString
   869  000788  244B               	addwf	??_main,w,c
   870  00078A  6ED9               	movwf	fsr2l,c
   871  00078C  0E00               	movlw	high _ReceivedString
   872  00078E  204C               	addwfc	??_main+1,w,c
   873  000790  6EDA               	movwf	fsr2h,c
   874  000792  0100               	movlb	0	; () banked
   875  000794  516F               	movf	main@i& (0+255),w,b
   876  000796  0D01               	mullw	1
   877  000798  0E60               	movlw	low main@Message
   878  00079A  24F3               	addwf	prodl,w,c
   879  00079C  6EE1               	movwf	fsr1l,c
   880  00079E  0E00               	movlw	high main@Message
   881  0007A0  20F4               	addwfc	prodh,w,c
   882  0007A2  6EE2               	movwf	fsr1h,c
   883  0007A4  CFDF FFE7          	movff	indf2,indf1
   884                           
   885                           ; BSR set to: 0
   886  0007A8  0100               	movlb	0	; () banked
   887  0007AA  2B6F               	incf	main@i& (0+255),f,b
   888  0007AC  D7DF               	goto	l2296
   889  0007AE                     l2306:
   890                           
   891                           ; BSR set to: 0
   892                           ;main.c: 136: }
   893                           ;main.c: 138: for (i=0; i<16; i++) {
   894  0007AE  0E00               	movlw	0
   895  0007B0  0100               	movlb	0	; () banked
   896  0007B2  6F6F               	movwf	main@i& (0+255),b
   897  0007B4                     l2308:
   898                           
   899                           ; BSR set to: 0
   900  0007B4  0E0F               	movlw	15
   901  0007B6  0100               	movlb	0	; () banked
   902  0007B8  656F               	cpfsgt	main@i& (0+255),b
   903  0007BA  D001               	goto	l2312
   904  0007BC  D02F               	goto	l2326
   905  0007BE                     l2312:
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 139: ReceivedString[i]=0;
   909  0007BE  0100               	movlb	0	; () banked
   910  0007C0  516F               	movf	main@i& (0+255),w,b
   911  0007C2  0D01               	mullw	1
   912  0007C4  0E83               	movlw	low _ReceivedString
   913  0007C6  24F3               	addwf	prodl,w,c
   914  0007C8  6ED9               	movwf	fsr2l,c
   915  0007CA  0E00               	movlw	high _ReceivedString
   916  0007CC  20F4               	addwfc	prodh,w,c
   917  0007CE  6EDA               	movwf	fsr2h,c
   918  0007D0  0E00               	movlw	0
   919  0007D2  6EDF               	movwf	indf2,c
   920                           
   921                           ; BSR set to: 0
   922  0007D4  0100               	movlb	0	; () banked
   923  0007D6  2B6F               	incf	main@i& (0+255),f,b
   924  0007D8  D7ED               	goto	l2308
   925  0007DA                     l2318:
   926                           
   927                           ;main.c: 143: fullSpeedBack(&mL,&mR);
   928  0007DA  0E70               	movlw	low main@mL
   929  0007DC  6E2B               	movwf	fullSpeedBack@mL,c
   930  0007DE  0E00               	movlw	high main@mL
   931  0007E0  6E2C               	movwf	fullSpeedBack@mL+1,c
   932  0007E2  0E79               	movlw	low main@mR
   933  0007E4  6E2D               	movwf	fullSpeedBack@mR,c
   934  0007E6  0E00               	movlw	high main@mR
   935  0007E8  6E2E               	movwf	fullSpeedBack@mR+1,c
   936  0007EA  ECC1  F007         	call	_fullSpeedBack	;wreg free
   937                           
   938                           ;main.c: 144: delay_s(1);
   939  0007EE  0E01               	movlw	1
   940  0007F0  EC89  F007         	call	_delay_s
   941                           
   942                           ;main.c: 145: stop(&mL,&mR);
   943  0007F4  0E70               	movlw	low main@mL
   944  0007F6  6E26               	movwf	stop@mL,c
   945  0007F8  0E00               	movlw	high main@mL
   946  0007FA  6E27               	movwf	stop@mL+1,c
   947  0007FC  0E79               	movlw	low main@mR
   948  0007FE  6E28               	movwf	stop@mR,c
   949  000800  0E00               	movlw	high main@mR
   950  000802  6E29               	movwf	stop@mR+1,c
   951  000804  EC07  F006         	call	_stop	;wreg free
   952                           
   953                           ;main.c: 146: fullSpeedAhead(&mL,&mR);
   954  000808  0E70               	movlw	low main@mL
   955  00080A  6E26               	movwf	fullSpeedAhead@mL,c
   956  00080C  0E00               	movlw	high main@mL
   957  00080E  6E27               	movwf	fullSpeedAhead@mL+1,c
   958  000810  0E79               	movlw	low main@mR
   959  000812  6E28               	movwf	fullSpeedAhead@mR,c
   960  000814  0E00               	movlw	high main@mR
   961  000816  6E29               	movwf	fullSpeedAhead@mR+1,c
   962  000818  EC07  F007         	call	_fullSpeedAhead	;wreg free
   963  00081C                     l2326:
   964                           
   965                           ;main.c: 147: }
   966                           ;main.c: 148: }
   967                           ;main.c: 149: }
   968                           ;main.c: 150: DirectionFound=1;
   969  00081C  0E01               	movlw	1
   970  00081E  0100               	movlb	0	; () banked
   971  000820  6F6E               	movwf	main@DirectionFound& (0+255),b
   972  000822                     l2328:
   973                           
   974                           ; BSR set to: 0
   975                           ;main.c: 151: mode = 1;
   976  000822  0E01               	movlw	1
   977  000824                     L3:
   978  000824  0100               	movlb	0	; () banked
   979  000826  6F6D               	movwf	main@mode& (0+255),b
   980  000828                     l2332:
   981  000828  0100               	movlb	0	; () banked
   982  00082A  516D               	movf	main@mode& (0+255),w,b
   983                           
   984                           ; Switch size 1, requested type "space"
   985                           ; Number of cases is 4, Range of values is 0 to 3
   986                           ; switch strategies available:
   987                           ; Name         Instructions Cycles
   988                           ; simple_byte           13     7 (average)
   989                           ;	Chosen strategy is simple_byte
   990  00082C  0A00               	xorlw	0	; case 0
   991  00082E  B4D8               	btfsc	status,2,c
   992  000830  D6F8               	goto	l2250
   993  000832  0A01               	xorlw	1	; case 1
   994  000834  B4D8               	btfsc	status,2,c
   995  000836  D734               	goto	l2270
   996  000838  0A03               	xorlw	3	; case 2
   997  00083A  B4D8               	btfsc	status,2,c
   998  00083C  D75B               	goto	l2282
   999  00083E  0A01               	xorlw	1	; case 3
  1000                           
  1001                           ; BSR set to: 0
  1002                           
  1003                           ; BSR set to: 0
  1004  000840  D7F3               	goto	l2332
  1005  000842                     __end_of_main:
  1006                           	opt stack 0
  1007                           tblptru	equ	0xFF8
  1008                           prodh	equ	0xFF4
  1009                           prodl	equ	0xFF3
  1010                           intcon	equ	0xFF2
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           indf1	equ	0xFE7
  1014                           fsr1h	equ	0xFE2
  1015                           fsr1l	equ	0xFE1
  1016                           indf2	equ	0xFDF
  1017                           fsr2h	equ	0xFDA
  1018                           fsr2l	equ	0xFD9
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function _initRFID *****************
  1022 ;; Defined at:
  1023 ;;		line 5 in file "RFID_Reader.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;		None               void
  1030 ;; Registers used:
  1031 ;;		wreg, status,2
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1037 ;;      Params:         0       0       0       0
  1038 ;;      Locals:         1       0       0       0
  1039 ;;      Temps:          0       0       0       0
  1040 ;;      Totals:         1       0       0       0
  1041 ;;Total ram usage:        1 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text1
  1052  001058                     __ptext1:
  1053                           	opt stack 0
  1054  001058                     _initRFID:
  1055                           	opt stack 29
  1056                           
  1057                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;incstack = 0
  1061  001058  0E01               	movlw	1
  1062  00105A  6E0F               	movwf	_initRFID$1307,c
  1063  00105C  5094               	movf	3988,w,c	;volatile
  1064  00105E  C00F  FF94         	movff	_initRFID$1307,3988	;volatile
  1065                           
  1066                           ;RFID_Reader.c: 10: SPBRG=205;
  1067  001062  0ECD               	movlw	205
  1068  001064  6EAF               	movwf	4015,c	;volatile
  1069                           
  1070                           ;RFID_Reader.c: 11: SPBRGH=0;
  1071  001066  0E00               	movlw	0
  1072  001068  6EB0               	movwf	4016,c	;volatile
  1073                           
  1074                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1075  00106A  86AA               	bsf	4010,3,c	;volatile
  1076                           
  1077                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1078  00106C  84AC               	bsf	4012,2,c	;volatile
  1079                           
  1080                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1081  00106E  88AB               	bsf	4011,4,c	;volatile
  1082                           
  1083                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1084  001070  8EAB               	bsf	4011,7,c	;volatile
  1085                           
  1086                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1087  001072  98AC               	bcf	4012,4,c	;volatile
  1088                           
  1089                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1090  001074  9CAB               	bcf	4011,6,c	;volatile
  1091  001076  0012               	return		;funcret
  1092  001078                     __end_of_initRFID:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           prodh	equ	0xFF4
  1096                           prodl	equ	0xFF3
  1097                           intcon	equ	0xFF2
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           indf1	equ	0xFE7
  1101                           fsr1h	equ	0xFE2
  1102                           fsr1l	equ	0xFE1
  1103                           indf2	equ	0xFDF
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _initMotorPWM *****************
  1109 ;; Defined at:
  1110 ;;		line 4 in file "dc_motor.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;		None               void
  1117 ;; Registers used:
  1118 ;;		wreg, status,2
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1124 ;;      Params:         0       0       0       0
  1125 ;;      Locals:         0       0       0       0
  1126 ;;      Temps:          0       0       0       0
  1127 ;;      Totals:         0       0       0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    1
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text2
  1139  000FB8                     __ptext2:
  1140                           	opt stack 0
  1141  000FB8                     _initMotorPWM:
  1142                           	opt stack 29
  1143                           
  1144                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1145                           
  1146                           ;incstack = 0
  1147  000FB8  0E00               	movlw	0
  1148  000FBA  6E7F               	movwf	3967,c	;volatile
  1149                           
  1150                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1151  000FBC  0E80               	movlw	128
  1152  000FBE  6E7E               	movwf	3966,c	;volatile
  1153                           
  1154                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1155  000FC0  0E6F               	movlw	111
  1156  000FC2  6E6F               	movwf	3951,c	;volatile
  1157                           
  1158                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1159  000FC4  0E00               	movlw	0
  1160  000FC6  6E6E               	movwf	3950,c	;volatile
  1161                           
  1162                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1163  000FC8  0EC7               	movlw	199
  1164  000FCA  6E7B               	movwf	3963,c	;volatile
  1165                           
  1166                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1167  000FCC  0E00               	movlw	0
  1168  000FCE  6E7A               	movwf	3962,c	;volatile
  1169                           
  1170                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1171  000FD0  0E00               	movlw	0
  1172  000FD2  6E79               	movwf	3961,c	;volatile
  1173                           
  1174                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1175  000FD4  0E00               	movlw	0
  1176  000FD6  6E78               	movwf	3960,c	;volatile
  1177                           
  1178                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1179  000FD8  0E00               	movlw	0
  1180  000FDA  6E77               	movwf	3959,c	;volatile
  1181                           
  1182                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1183  000FDC  0E00               	movlw	0
  1184  000FDE  6E76               	movwf	3958,c	;volatile
  1185                           
  1186                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1187  000FE0  9093               	bcf	3987,0,c	;volatile
  1188                           
  1189                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1190  000FE2  9293               	bcf	3987,1,c	;volatile
  1191                           
  1192                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1193  000FE4  9493               	bcf	3987,2,c	;volatile
  1194                           
  1195                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1196  000FE6  9693               	bcf	3987,3,c	;volatile
  1197  000FE8  0012               	return		;funcret
  1198  000FEA                     __end_of_initMotorPWM:
  1199                           	opt stack 0
  1200                           tblptru	equ	0xFF8
  1201                           prodh	equ	0xFF4
  1202                           prodl	equ	0xFF3
  1203                           intcon	equ	0xFF2
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           indf1	equ	0xFE7
  1207                           fsr1h	equ	0xFE2
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8
  1213                           
  1214 ;; *************** function _initIR *****************
  1215 ;; Defined at:
  1216 ;;		line 30 in file "IR_Reading.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;		None               void
  1223 ;; Registers used:
  1224 ;;		wreg, status,2
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1230 ;;      Params:         0       0       0       0
  1231 ;;      Locals:         0       0       0       0
  1232 ;;      Temps:          0       0       0       0
  1233 ;;      Totals:         0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text3
  1245  001036                     __ptext3:
  1246                           	opt stack 0
  1247  001036                     _initIR:
  1248                           	opt stack 29
  1249                           
  1250                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  1251                           
  1252                           ;incstack = 0
  1253  001036  9489               	bcf	3977,2,c	;volatile
  1254                           
  1255                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  1256  001038  9689               	bcf	3977,3,c	;volatile
  1257                           
  1258                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  1259  00103A  8492               	bsf	3986,2,c	;volatile
  1260                           
  1261                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  1262  00103C  8692               	bsf	3986,3,c	;volatile
  1263                           
  1264                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  1265  00103E  94B8               	bcf	4024,2,c	;volatile
  1266                           
  1267                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  1268  001040  96B8               	bcf	4024,3,c	;volatile
  1269                           
  1270                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  1271  001042  9CB8               	bcf	4024,6,c	;volatile
  1272                           
  1273                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  1274  001044  9EB8               	bcf	4024,7,c	;volatile
  1275                           
  1276                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  1277  001046  0E06               	movlw	6
  1278  001048  6E63               	movwf	3939,c	;volatile
  1279                           
  1280                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  1281  00104A  0E06               	movlw	6
  1282  00104C  6E62               	movwf	3938,c	;volatile
  1283                           
  1284                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  1285  00104E  9096               	bcf	3990,0,c	;volatile
  1286                           
  1287                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  1288  001050  9296               	bcf	3990,1,c	;volatile
  1289                           
  1290                           ;IR_Reading.c: 69: T5CON=0b01011001;
  1291  001052  0E59               	movlw	89
  1292  001054  6EB7               	movwf	4023,c	;volatile
  1293  001056  0012               	return		;funcret
  1294  001058                     __end_of_initIR:
  1295                           	opt stack 0
  1296                           tblptru	equ	0xFF8
  1297                           prodh	equ	0xFF4
  1298                           prodl	equ	0xFF3
  1299                           intcon	equ	0xFF2
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           indf1	equ	0xFE7
  1303                           fsr1h	equ	0xFE2
  1304                           fsr1l	equ	0xFE1
  1305                           indf2	equ	0xFDF
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function _fullSpeedBack *****************
  1311 ;; Defined at:
  1312 ;;		line 125 in file "dc_motor.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1315 ;;		 -> main@mL(9), 
  1316 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1317 ;;		 -> main@mR(9), 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;		None               void
  1322 ;; Registers used:
  1323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1329 ;;      Params:         4       0       0       0
  1330 ;;      Locals:         0       0       0       0
  1331 ;;      Temps:          0       0       0       0
  1332 ;;      Totals:         4       0       0       0
  1333 ;;Total ram usage:        4 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    4
  1336 ;; This function calls:
  1337 ;;		_fullSpeedAhead
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text4
  1344  000F82                     __ptext4:
  1345                           	opt stack 0
  1346  000F82                     _fullSpeedBack:
  1347                           	opt stack 26
  1348                           
  1349                           ;dc_motor.c: 128: mL->direction=0;
  1350                           
  1351                           ;incstack = 0
  1352  000F82  EE20 F001          	lfsr	2,1
  1353  000F86  502B               	movf	fullSpeedBack@mL,w,c
  1354  000F88  26D9               	addwf	fsr2l,f,c
  1355  000F8A  502C               	movf	fullSpeedBack@mL+1,w,c
  1356  000F8C  22DA               	addwfc	fsr2h,f,c
  1357  000F8E  0E00               	movlw	0
  1358  000F90  6EDF               	movwf	indf2,c
  1359                           
  1360                           ;dc_motor.c: 129: mR->direction=0;
  1361  000F92  EE20 F001          	lfsr	2,1
  1362  000F96  502D               	movf	fullSpeedBack@mR,w,c
  1363  000F98  26D9               	addwf	fsr2l,f,c
  1364  000F9A  502E               	movf	fullSpeedBack@mR+1,w,c
  1365  000F9C  22DA               	addwfc	fsr2h,f,c
  1366  000F9E  0E00               	movlw	0
  1367  000FA0  6EDF               	movwf	indf2,c
  1368                           
  1369                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1370  000FA2  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1371  000FA6  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1372  000FAA  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1373  000FAE  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1374  000FB2  EC07  F007         	call	_fullSpeedAhead	;wreg free
  1375  000FB6  0012               	return		;funcret
  1376  000FB8                     __end_of_fullSpeedBack:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           prodh	equ	0xFF4
  1380                           prodl	equ	0xFF3
  1381                           intcon	equ	0xFF2
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           indf1	equ	0xFE7
  1385                           fsr1h	equ	0xFE2
  1386                           fsr1l	equ	0xFE1
  1387                           indf2	equ	0xFDF
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           status	equ	0xFD8
  1391                           
  1392 ;; *************** function _enableSensor *****************
  1393 ;; Defined at:
  1394 ;;		line 106 in file "IR_Reading.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  sensor          1    wreg     unsigned char 
  1397 ;;  status          1   14[COMRAM] unsigned char 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  sensor          1   15[COMRAM] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;		None               void
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1409 ;;      Params:         1       0       0       0
  1410 ;;      Locals:         1       0       0       0
  1411 ;;      Temps:          0       0       0       0
  1412 ;;      Totals:         2       0       0       0
  1413 ;;Total ram usage:        2 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_main
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text5
  1424  000FEA                     __ptext5:
  1425                           	opt stack 0
  1426  000FEA                     _enableSensor:
  1427                           	opt stack 29
  1428                           
  1429                           ;incstack = 0
  1430                           ;enableSensor@sensor stored from wreg
  1431  000FEA  6E10               	movwf	enableSensor@sensor,c
  1432                           
  1433                           ;IR_Reading.c: 108: if (sensor==0){
  1434  000FEC  5010               	movf	enableSensor@sensor,w,c
  1435  000FEE  A4D8               	btfss	status,2,c
  1436  000FF0  D006               	goto	l1928
  1437                           
  1438                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1439  000FF2  B00F               	btfsc	enableSensor@status,0,c
  1440  000FF4  D002               	bra	u1265
  1441  000FF6  908D               	bcf	3981,0,c	;volatile
  1442  000FF8  D001               	bra	u1266
  1443  000FFA                     u1265:
  1444  000FFA  808D               	bsf	3981,0,c	;volatile
  1445  000FFC                     u1266:
  1446                           
  1447                           ;IR_Reading.c: 110: } else if (sensor==1){
  1448  000FFC  0012               	return	
  1449  000FFE                     l1928:
  1450  000FFE  0410               	decf	enableSensor@sensor,w,c
  1451  001000  A4D8               	btfss	status,2,c
  1452  001002  0012               	return	
  1453                           
  1454                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1455  001004  B00F               	btfsc	enableSensor@status,0,c
  1456  001006  D002               	bra	u1285
  1457  001008  928D               	bcf	3981,1,c	;volatile
  1458  00100A  D001               	bra	u1286
  1459  00100C                     u1285:
  1460  00100C  828D               	bsf	3981,1,c	;volatile
  1461  00100E                     u1286:
  1462  00100E  0012               	return	
  1463  001010                     __end_of_enableSensor:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           intcon	equ	0xFF2
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           indf1	equ	0xFE7
  1472                           fsr1h	equ	0xFE2
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _delay_s *****************
  1480 ;; Defined at:
  1481 ;;		line 10 in file "Movement.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  seconds         1    wreg     unsigned char 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  seconds         1   15[COMRAM] unsigned char 
  1486 ;;  i               2   16[COMRAM] unsigned int 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;		None               void
  1489 ;; Registers used:
  1490 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1496 ;;      Params:         0       0       0       0
  1497 ;;      Locals:         3       0       0       0
  1498 ;;      Temps:          1       0       0       0
  1499 ;;      Totals:         4       0       0       0
  1500 ;;Total ram usage:        4 bytes
  1501 ;; Hardware stack levels used:    1
  1502 ;; Hardware stack levels required when called:    1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_main
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text6
  1511  000F12                     __ptext6:
  1512                           	opt stack 0
  1513  000F12                     _delay_s:
  1514                           	opt stack 29
  1515                           
  1516                           ;incstack = 0
  1517                           ;delay_s@seconds stored from wreg
  1518  000F12  6E10               	movwf	delay_s@seconds,c
  1519                           
  1520                           ;Movement.c: 11: unsigned int i=0;
  1521  000F14  0E00               	movlw	0
  1522  000F16  6E12               	movwf	delay_s@i+1,c
  1523  000F18  0E00               	movlw	0
  1524  000F1A  6E11               	movwf	delay_s@i,c
  1525                           
  1526                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1527  000F1C  0E00               	movlw	0
  1528  000F1E  6E12               	movwf	delay_s@i+1,c
  1529  000F20  0E01               	movlw	1
  1530  000F22  6E11               	movwf	delay_s@i,c
  1531  000F24  D009               	goto	l1918
  1532  000F26                     l1914:
  1533                           
  1534                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1535  000F26  0E82               	movlw	130
  1536  000F28  6E0F               	movwf	??_delay_s& (0+255),c
  1537  000F2A  0EDE               	movlw	222
  1538  000F2C                     u1797:
  1539  000F2C  2EE8               	decfsz	wreg,f,c
  1540  000F2E  D7FE               	goto	u1797
  1541  000F30  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1542  000F32  D7FC               	goto	u1797
  1543  000F34  4A11               	infsnz	delay_s@i,f,c
  1544  000F36  2A12               	incf	delay_s@i+1,f,c
  1545  000F38                     l1918:
  1546  000F38  5010               	movf	delay_s@seconds,w,c
  1547  000F3A  0D14               	mullw	20
  1548  000F3C  5011               	movf	delay_s@i,w,c
  1549  000F3E  5CF3               	subwf	prodl,w,c
  1550  000F40  5012               	movf	delay_s@i+1,w,c
  1551  000F42  58F4               	subwfb	prodh,w,c
  1552  000F44  A0D8               	btfss	status,0,c
  1553  000F46  0012               	return	
  1554  000F48  D7EE               	goto	l1914
  1555  000F4A                     __end_of_delay_s:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           intcon	equ	0xFF2
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           indf1	equ	0xFE7
  1564                           fsr1h	equ	0xFE2
  1565                           fsr1l	equ	0xFE1
  1566                           indf2	equ	0xFDF
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _VerifySignal *****************
  1572 ;; Defined at:
  1573 ;;		line 56 in file "RFID_Reader.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1576 ;;		 -> ReceivedString(16), 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  hexByte         2   23[COMRAM] unsigned int 
  1579 ;;  i               1   25[COMRAM] unsigned char 
  1580 ;;  checksum        1   22[COMRAM] unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      unsigned char 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1590 ;;      Params:         2       0       0       0
  1591 ;;      Locals:         4       0       0       0
  1592 ;;      Temps:          6       0       0       0
  1593 ;;      Totals:        12       0       0       0
  1594 ;;Total ram usage:       12 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    1
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text7
  1605  000B5A                     __ptext7:
  1606                           	opt stack 0
  1607  000B5A                     _VerifySignal:
  1608                           	opt stack 29
  1609                           
  1610                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1611                           
  1612                           ;incstack = 0
  1613  000B5A  0E00               	movlw	0
  1614  000B5C  6E17               	movwf	VerifySignal@checksum,c
  1615                           
  1616                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1617  000B5E  0E00               	movlw	0
  1618  000B60  6E19               	movwf	VerifySignal@hexByte+1,c
  1619  000B62  0E00               	movlw	0
  1620  000B64  6E18               	movwf	VerifySignal@hexByte,c
  1621                           
  1622                           ;RFID_Reader.c: 59: unsigned char i=0;
  1623  000B66  0E00               	movlw	0
  1624  000B68  6E1A               	movwf	VerifySignal@i,c
  1625                           
  1626                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1627  000B6A  EE20 F004          	lfsr	2,4
  1628  000B6E  500F               	movf	VerifySignal@Signal,w,c
  1629  000B70  26D9               	addwf	fsr2l,f,c
  1630  000B72  5010               	movf	VerifySignal@Signal+1,w,c
  1631  000B74  22DA               	addwfc	fsr2h,f,c
  1632  000B76  50DF               	movf	indf2,w,c
  1633  000B78  6E11               	movwf	??_VerifySignal& (0+255),c
  1634  000B7A  EE20 F003          	lfsr	2,3
  1635  000B7E  500F               	movf	VerifySignal@Signal,w,c
  1636  000B80  26D9               	addwf	fsr2l,f,c
  1637  000B82  5010               	movf	VerifySignal@Signal+1,w,c
  1638  000B84  22DA               	addwfc	fsr2h,f,c
  1639  000B86  50DF               	movf	indf2,w,c
  1640  000B88  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1641  000B8A  5012               	movf	??_VerifySignal+1,w,c
  1642  000B8C  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1643  000B8E  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1644  000B90  5011               	movf	??_VerifySignal,w,c
  1645  000B92  2413               	addwf	??_VerifySignal+2,w,c
  1646  000B94  6E18               	movwf	VerifySignal@hexByte,c
  1647  000B96  0E00               	movlw	0
  1648  000B98  2014               	addwfc	??_VerifySignal+3,w,c
  1649  000B9A  6E19               	movwf	VerifySignal@hexByte+1,c
  1650                           
  1651                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1652  000B9C  EE20 F002          	lfsr	2,2
  1653  000BA0  500F               	movf	VerifySignal@Signal,w,c
  1654  000BA2  26D9               	addwf	fsr2l,f,c
  1655  000BA4  5010               	movf	VerifySignal@Signal+1,w,c
  1656  000BA6  22DA               	addwfc	fsr2h,f,c
  1657  000BA8  50DF               	movf	indf2,w,c
  1658  000BAA  1818               	xorwf	VerifySignal@hexByte,w,c
  1659  000BAC  6E17               	movwf	VerifySignal@checksum,c
  1660                           
  1661                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1662  000BAE  0E05               	movlw	5
  1663  000BB0  6E1A               	movwf	VerifySignal@i,c
  1664  000BB2                     l2194:
  1665  000BB2  0E09               	movlw	9
  1666  000BB4  641A               	cpfsgt	VerifySignal@i,c
  1667  000BB6  D001               	goto	l2198
  1668  000BB8  D028               	goto	l2206
  1669  000BBA                     l2198:
  1670                           
  1671                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1672  000BBA  501A               	movf	VerifySignal@i,w,c
  1673  000BBC  6E11               	movwf	??_VerifySignal& (0+255),c
  1674  000BBE  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1675  000BC0  0E01               	movlw	1
  1676  000BC2  2611               	addwf	??_VerifySignal,f,c
  1677  000BC4  0E00               	movlw	0
  1678  000BC6  2212               	addwfc	??_VerifySignal+1,f,c
  1679  000BC8  5011               	movf	??_VerifySignal,w,c
  1680  000BCA  240F               	addwf	VerifySignal@Signal,w,c
  1681  000BCC  6ED9               	movwf	fsr2l,c
  1682  000BCE  5012               	movf	??_VerifySignal+1,w,c
  1683  000BD0  2010               	addwfc	VerifySignal@Signal+1,w,c
  1684  000BD2  6EDA               	movwf	fsr2h,c
  1685  000BD4  50DF               	movf	indf2,w,c
  1686  000BD6  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1687  000BD8  501A               	movf	VerifySignal@i,w,c
  1688  000BDA  0D01               	mullw	1
  1689  000BDC  50F3               	movf	prodl,w,c
  1690  000BDE  240F               	addwf	VerifySignal@Signal,w,c
  1691  000BE0  6ED9               	movwf	fsr2l,c
  1692  000BE2  50F4               	movf	prodh,w,c
  1693  000BE4  2010               	addwfc	VerifySignal@Signal+1,w,c
  1694  000BE6  6EDA               	movwf	fsr2h,c
  1695  000BE8  50DF               	movf	indf2,w,c
  1696  000BEA  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1697  000BEC  5014               	movf	??_VerifySignal+3,w,c
  1698  000BEE  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1699  000BF0  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1700  000BF2  5013               	movf	??_VerifySignal+2,w,c
  1701  000BF4  2415               	addwf	??_VerifySignal+4,w,c
  1702  000BF6  6E18               	movwf	VerifySignal@hexByte,c
  1703  000BF8  0E00               	movlw	0
  1704  000BFA  2016               	addwfc	??_VerifySignal+5,w,c
  1705  000BFC  6E19               	movwf	VerifySignal@hexByte+1,c
  1706                           
  1707                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1708  000BFE  5017               	movf	VerifySignal@checksum,w,c
  1709  000C00  1818               	xorwf	VerifySignal@hexByte,w,c
  1710  000C02  6E17               	movwf	VerifySignal@checksum,c
  1711  000C04  0E02               	movlw	2
  1712  000C06  261A               	addwf	VerifySignal@i,f,c
  1713  000C08  D7D4               	goto	l2194
  1714  000C0A                     l2206:
  1715                           
  1716                           ;RFID_Reader.c: 69: }
  1717                           ;RFID_Reader.c: 72: return 1;
  1718  000C0A  0E01               	movlw	1
  1719  000C0C  0012               	return	
  1720  000C0E                     __end_of_VerifySignal:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           prodh	equ	0xFF4
  1724                           prodl	equ	0xFF3
  1725                           intcon	equ	0xFF2
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           indf1	equ	0xFE7
  1729                           fsr1h	equ	0xFE2
  1730                           fsr1l	equ	0xFE1
  1731                           indf2	equ	0xFDF
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _ScanWithRange *****************
  1737 ;; Defined at:
  1738 ;;		line 93 in file "Movement.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1741 ;;		 -> main@mL(9), 
  1742 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1743 ;;		 -> main@mR(9), 
  1744 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  SensorResult    4   70[COMRAM] unsigned int [2]
  1747 ;;  SensorResult    4   66[COMRAM] unsigned int [2]
  1748 ;;  SensorResult    4   62[COMRAM] unsigned int [2]
  1749 ;;  DirectionFou    2   60[COMRAM] const unsigned int 
  1750 ;;  DirectionFou    2   58[COMRAM] const unsigned int 
  1751 ;;  ClearSignalT    2   56[COMRAM] const unsigned int 
  1752 ;;  ResultFalseR    1   55[COMRAM] unsigned char 
  1753 ;;  ResultFalseC    1   54[COMRAM] unsigned char 
  1754 ;;  ResultFalseL    1   53[COMRAM] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      unsigned char 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1764 ;;      Params:         5       0       0       0
  1765 ;;      Locals:        21       0       0       0
  1766 ;;      Temps:          2       0       0       0
  1767 ;;      Totals:        28       0       0       0
  1768 ;;Total ram usage:       28 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    5
  1771 ;; This function calls:
  1772 ;;		___awdiv
  1773 ;;		_delay_tenth_s
  1774 ;;		_fullSpeedAhead
  1775 ;;		_grabLeftIR
  1776 ;;		_grabRightIR
  1777 ;;		_stop
  1778 ;;		_turnLeft
  1779 ;;		_turnRight
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text8
  1786  0000B2                     __ptext8:
  1787                           	opt stack 0
  1788  0000B2                     _ScanWithRange:
  1789                           	opt stack 25
  1790                           
  1791                           ;Movement.c: 96: unsigned int SensorResultL[2];
  1792                           ;Movement.c: 97: unsigned int SensorResultC[2];
  1793                           ;Movement.c: 98: unsigned int SensorResultR[2];
  1794                           ;Movement.c: 99: unsigned char ResultFalseL=0;
  1795                           
  1796                           ;incstack = 0
  1797  0000B2  0E00               	movlw	0
  1798  0000B4  6E36               	movwf	ScanWithRange@ResultFalseL,c
  1799                           
  1800                           ;Movement.c: 100: unsigned char ResultFalseC=0;
  1801  0000B6  0E00               	movlw	0
  1802  0000B8  6E37               	movwf	ScanWithRange@ResultFalseC,c
  1803                           
  1804                           ;Movement.c: 101: unsigned char ResultFalseR=0;
  1805  0000BA  0E00               	movlw	0
  1806  0000BC  6E38               	movwf	ScanWithRange@ResultFalseR,c
  1807                           
  1808                           ;Movement.c: 104: const unsigned int ClearSignalTolerance=200;
  1809  0000BE  0E00               	movlw	0
  1810  0000C0  6E3A               	movwf	ScanWithRange@ClearSignalTolerance+1,c
  1811  0000C2  0EC8               	movlw	200
  1812  0000C4  6E39               	movwf	ScanWithRange@ClearSignalTolerance,c
  1813                           
  1814                           ;Movement.c: 105: const unsigned int DirectionFoundLimit=1500;
  1815  0000C6  0E05               	movlw	5
  1816  0000C8  6E3C               	movwf	ScanWithRange@DirectionFoundLimit+1,c
  1817  0000CA  0EDC               	movlw	220
  1818  0000CC  6E3B               	movwf	ScanWithRange@DirectionFoundLimit,c
  1819                           
  1820                           ;Movement.c: 106: const unsigned int DirectionFoundTolerance=500;
  1821  0000CE  0E01               	movlw	1
  1822  0000D0  6E3E               	movwf	ScanWithRange@DirectionFoundTolerance+1,c
  1823  0000D2  0EF4               	movlw	244
  1824  0000D4  6E3D               	movwf	ScanWithRange@DirectionFoundTolerance,c
  1825                           
  1826                           ;Movement.c: 113: stop(mL,mR);
  1827  0000D6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1828  0000DA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1829  0000DE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1830  0000E2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1831  0000E6  EC07  F006         	call	_stop	;wreg free
  1832                           
  1833                           ;Movement.c: 114: SensorResultC[0]=grabLeftIR();
  1834  0000EA  ECCC  F006         	call	_grabLeftIR	;wreg free
  1835  0000EE  C00F  F043         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1836  0000F2  C010  F044         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1837                           
  1838                           ;Movement.c: 115: SensorResultC[1]=grabRightIR();
  1839  0000F6  EC91  F006         	call	_grabRightIR	;wreg free
  1840  0000FA  C00F  F045         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1841  0000FE  C010  F046         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1842                           
  1843                           ;Movement.c: 118: turnLeft(mL,mR);
  1844  000102  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1845  000106  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1846  00010A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1847  00010E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1848  000112  EC64  F007         	call	_turnLeft	;wreg free
  1849                           
  1850                           ;Movement.c: 119: delay_tenth_s(tenth_seconds);
  1851  000116  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1852  000118  ECA5  F007         	call	_delay_tenth_s
  1853                           
  1854                           ;Movement.c: 121: stop(mL,mR);
  1855  00011C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1856  000120  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1857  000124  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1858  000128  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1859  00012C  EC07  F006         	call	_stop	;wreg free
  1860                           
  1861                           ;Movement.c: 122: SensorResultL[0]=grabLeftIR();
  1862  000130  ECCC  F006         	call	_grabLeftIR	;wreg free
  1863  000134  C00F  F03F         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1864  000138  C010  F040         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1865                           
  1866                           ;Movement.c: 123: SensorResultL[1]=grabRightIR();
  1867  00013C  EC91  F006         	call	_grabRightIR	;wreg free
  1868  000140  C00F  F041         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1869  000144  C010  F042         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1870                           
  1871                           ;Movement.c: 126: turnRight(mL,mR);
  1872  000148  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1873  00014C  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1874  000150  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1875  000154  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1876  000158  EC3F  F007         	call	_turnRight	;wreg free
  1877                           
  1878                           ;Movement.c: 127: delay_tenth_s(2*tenth_seconds);
  1879  00015C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1880  00015E  0D02               	mullw	2
  1881  000160  50F3               	movf	prodl,w,c
  1882  000162  ECA5  F007         	call	_delay_tenth_s
  1883                           
  1884                           ;Movement.c: 129: stop(mL,mR);
  1885  000166  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1886  00016A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1887  00016E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1888  000172  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1889  000176  EC07  F006         	call	_stop	;wreg free
  1890                           
  1891                           ;Movement.c: 130: SensorResultR[0]=grabLeftIR();
  1892  00017A  ECCC  F006         	call	_grabLeftIR	;wreg free
  1893  00017E  C00F  F047         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1894  000182  C010  F048         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1895                           
  1896                           ;Movement.c: 131: SensorResultR[1]=grabRightIR();
  1897  000186  EC91  F006         	call	_grabRightIR	;wreg free
  1898  00018A  C00F  F049         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1899  00018E  C010  F04A         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1900                           
  1901                           ;Movement.c: 142: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  1902  000192  503F               	movf	ScanWithRange@SensorResultL,w,c
  1903  000194  2441               	addwf	ScanWithRange@SensorResultL+2,w,c
  1904  000196  6E34               	movwf	??_ScanWithRange& (0+255),c
  1905  000198  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  1906  00019A  2042               	addwfc	ScanWithRange@SensorResultL+3,w,c
  1907  00019C  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1908  00019E  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  1909  0001A0  5C34               	subwf	??_ScanWithRange,w,c
  1910  0001A2  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  1911  0001A4  5835               	subwfb	??_ScanWithRange+1,w,c
  1912  0001A6  B0D8               	btfsc	status,0,c
  1913  0001A8  D00A               	goto	l1964
  1914                           
  1915                           ;Movement.c: 143: SensorResultL[0]=0;
  1916  0001AA  0E00               	movlw	0
  1917  0001AC  6E40               	movwf	ScanWithRange@SensorResultL+1,c
  1918  0001AE  0E00               	movlw	0
  1919  0001B0  6E3F               	movwf	ScanWithRange@SensorResultL,c
  1920                           
  1921                           ;Movement.c: 144: SensorResultL[1]=0;
  1922  0001B2  0E00               	movlw	0
  1923  0001B4  6E42               	movwf	ScanWithRange@SensorResultL+3,c
  1924  0001B6  0E00               	movlw	0
  1925  0001B8  6E41               	movwf	ScanWithRange@SensorResultL+2,c
  1926                           
  1927                           ;Movement.c: 145: ResultFalseL=1;
  1928  0001BA  0E01               	movlw	1
  1929  0001BC  6E36               	movwf	ScanWithRange@ResultFalseL,c
  1930  0001BE                     l1964:
  1931                           
  1932                           ;Movement.c: 146: }
  1933                           ;Movement.c: 147: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  1934  0001BE  5043               	movf	ScanWithRange@SensorResultC,w,c
  1935  0001C0  2445               	addwf	ScanWithRange@SensorResultC+2,w,c
  1936  0001C2  6E34               	movwf	??_ScanWithRange& (0+255),c
  1937  0001C4  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  1938  0001C6  2046               	addwfc	ScanWithRange@SensorResultC+3,w,c
  1939  0001C8  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1940  0001CA  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  1941  0001CC  5C34               	subwf	??_ScanWithRange,w,c
  1942  0001CE  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  1943  0001D0  5835               	subwfb	??_ScanWithRange+1,w,c
  1944  0001D2  B0D8               	btfsc	status,0,c
  1945  0001D4  D00A               	goto	l1968
  1946                           
  1947                           ;Movement.c: 148: SensorResultC[0]=0;
  1948  0001D6  0E00               	movlw	0
  1949  0001D8  6E44               	movwf	ScanWithRange@SensorResultC+1,c
  1950  0001DA  0E00               	movlw	0
  1951  0001DC  6E43               	movwf	ScanWithRange@SensorResultC,c
  1952                           
  1953                           ;Movement.c: 149: SensorResultC[1]=0;
  1954  0001DE  0E00               	movlw	0
  1955  0001E0  6E46               	movwf	ScanWithRange@SensorResultC+3,c
  1956  0001E2  0E00               	movlw	0
  1957  0001E4  6E45               	movwf	ScanWithRange@SensorResultC+2,c
  1958                           
  1959                           ;Movement.c: 150: ResultFalseC=1;
  1960  0001E6  0E01               	movlw	1
  1961  0001E8  6E37               	movwf	ScanWithRange@ResultFalseC,c
  1962  0001EA                     l1968:
  1963                           
  1964                           ;Movement.c: 151: }
  1965                           ;Movement.c: 152: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  1966  0001EA  5047               	movf	ScanWithRange@SensorResultR,w,c
  1967  0001EC  2449               	addwf	ScanWithRange@SensorResultR+2,w,c
  1968  0001EE  6E34               	movwf	??_ScanWithRange& (0+255),c
  1969  0001F0  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  1970  0001F2  204A               	addwfc	ScanWithRange@SensorResultR+3,w,c
  1971  0001F4  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1972  0001F6  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  1973  0001F8  5C34               	subwf	??_ScanWithRange,w,c
  1974  0001FA  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  1975  0001FC  5835               	subwfb	??_ScanWithRange+1,w,c
  1976  0001FE  B0D8               	btfsc	status,0,c
  1977  000200  D00A               	goto	l1972
  1978                           
  1979                           ;Movement.c: 153: SensorResultR[0]=0;
  1980  000202  0E00               	movlw	0
  1981  000204  6E48               	movwf	ScanWithRange@SensorResultR+1,c
  1982  000206  0E00               	movlw	0
  1983  000208  6E47               	movwf	ScanWithRange@SensorResultR,c
  1984                           
  1985                           ;Movement.c: 154: SensorResultR[1]=0;
  1986  00020A  0E00               	movlw	0
  1987  00020C  6E4A               	movwf	ScanWithRange@SensorResultR+3,c
  1988  00020E  0E00               	movlw	0
  1989  000210  6E49               	movwf	ScanWithRange@SensorResultR+2,c
  1990                           
  1991                           ;Movement.c: 155: ResultFalseR=1;
  1992  000212  0E01               	movlw	1
  1993  000214  6E38               	movwf	ScanWithRange@ResultFalseR,c
  1994  000216                     l1972:
  1995                           
  1996                           ;Movement.c: 156: }
  1997                           ;Movement.c: 158: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  1998  000216  5037               	movf	ScanWithRange@ResultFalseC,w,c
  1999  000218  C036  F034         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2000  00021C  6A35               	clrf	(??_ScanWithRange+1)& (0+255),c
  2001  00021E  2634               	addwf	??_ScanWithRange,f,c
  2002  000220  0E00               	movlw	0
  2003  000222  2235               	addwfc	??_ScanWithRange+1,f,c
  2004  000224  5038               	movf	ScanWithRange@ResultFalseR,w,c
  2005  000226  2634               	addwf	??_ScanWithRange,f,c
  2006  000228  0E00               	movlw	0
  2007  00022A  2235               	addwfc	??_ScanWithRange+1,f,c
  2008  00022C  0E03               	movlw	3
  2009  00022E  1834               	xorwf	??_ScanWithRange,w,c
  2010  000230  1035               	iorwf	??_ScanWithRange+1,w,c
  2011  000232  A4D8               	btfss	status,2,c
  2012  000234  D032               	goto	l1990
  2013                           
  2014                           ;Movement.c: 160: turnLeft(mL,mR);
  2015  000236  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2016  00023A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2017  00023E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2018  000242  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2019  000246  EC64  F007         	call	_turnLeft	;wreg free
  2020                           
  2021                           ;Movement.c: 161: delay_tenth_s(5*tenth_seconds);
  2022  00024A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2023  00024C  0D05               	mullw	5
  2024  00024E  50F3               	movf	prodl,w,c
  2025  000250  ECA5  F007         	call	_delay_tenth_s
  2026                           
  2027                           ;Movement.c: 162: stop(mL,mR);
  2028  000254  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2029  000258  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2030  00025C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2031  000260  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2032  000264  EC07  F006         	call	_stop	;wreg free
  2033                           
  2034                           ;Movement.c: 163: fullSpeedAhead(mL, mR);
  2035  000268  C02F  F026         	movff	ScanWithRange@mL,fullSpeedAhead@mL
  2036  00026C  C030  F027         	movff	ScanWithRange@mL+1,fullSpeedAhead@mL+1
  2037  000270  C031  F028         	movff	ScanWithRange@mR,fullSpeedAhead@mR
  2038  000274  C032  F029         	movff	ScanWithRange@mR+1,fullSpeedAhead@mR+1
  2039  000278  EC07  F007         	call	_fullSpeedAhead	;wreg free
  2040                           
  2041                           ;Movement.c: 164: delay_tenth_s(tenth_seconds);
  2042  00027C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2043  00027E  ECA5  F007         	call	_delay_tenth_s
  2044                           
  2045                           ;Movement.c: 165: stop(mL,mR);
  2046  000282  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2047  000286  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2048  00028A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2049  00028E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2050  000292  EC07  F006         	call	_stop	;wreg free
  2051  000296                     l1984:
  2052                           
  2053                           ;Movement.c: 166: return 0;
  2054  000296  0E00               	movlw	0
  2055  000298  0012               	return	
  2056  00029A                     l1990:
  2057                           
  2058                           ;Movement.c: 169: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  2059                           ;Movement.c: 170: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2060                           ;Movement.c: 171: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2061  00029A  503F               	movf	ScanWithRange@SensorResultL,w,c
  2062  00029C  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2063  00029E  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2064  0002A0  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2065  0002A2  B0D8               	btfsc	status,0,c
  2066  0002A4  D047               	goto	l2010
  2067  0002A6  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2068  0002A8  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2069  0002AA  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2070  0002AC  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2071  0002AE  B0D8               	btfsc	status,0,c
  2072  0002B0  D041               	goto	l2010
  2073  0002B2  EE20  F041         	lfsr	2,ScanWithRange@SensorResultL+2
  2074  0002B6  CFDE F034          	movff	postinc2,??_ScanWithRange
  2075  0002BA  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2076  0002BE  1E34               	comf	??_ScanWithRange,f,c
  2077  0002C0  1E35               	comf	??_ScanWithRange+1,f,c
  2078  0002C2  4A34               	infsnz	??_ScanWithRange,f,c
  2079  0002C4  2A35               	incf	??_ScanWithRange+1,f,c
  2080  0002C6  503F               	movf	ScanWithRange@SensorResultL,w,c
  2081  0002C8  2634               	addwf	??_ScanWithRange,f,c
  2082  0002CA  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2083  0002CC  2235               	addwfc	??_ScanWithRange+1,f,c
  2084  0002CE  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2085  0002D0  5C34               	subwf	??_ScanWithRange,w,c
  2086  0002D2  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2087  0002D4  5835               	subwfb	??_ScanWithRange+1,w,c
  2088  0002D6  A0D8               	btfss	status,0,c
  2089  0002D8  D012               	goto	l1998
  2090  0002DA  C03F  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2091  0002DE  C040  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2092  0002E2  1E34               	comf	??_ScanWithRange,f,c
  2093  0002E4  1E35               	comf	??_ScanWithRange+1,f,c
  2094  0002E6  4A34               	infsnz	??_ScanWithRange,f,c
  2095  0002E8  2A35               	incf	??_ScanWithRange+1,f,c
  2096  0002EA  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2097  0002EC  2634               	addwf	??_ScanWithRange,f,c
  2098  0002EE  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2099  0002F0  2235               	addwfc	??_ScanWithRange+1,f,c
  2100  0002F2  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2101  0002F4  5C34               	subwf	??_ScanWithRange,w,c
  2102  0002F6  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2103  0002F8  5835               	subwfb	??_ScanWithRange+1,w,c
  2104  0002FA  B0D8               	btfsc	status,0,c
  2105  0002FC  D01B               	goto	l2010
  2106  0002FE                     l1998:
  2107                           
  2108                           ;Movement.c: 173: turnLeft(mL,mR);
  2109  0002FE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2110  000302  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2111  000306  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2112  00030A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2113  00030E  EC64  F007         	call	_turnLeft	;wreg free
  2114                           
  2115                           ;Movement.c: 174: delay_tenth_s(2*(tenth_seconds));
  2116  000312  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2117  000314  0D02               	mullw	2
  2118  000316  50F3               	movf	prodl,w,c
  2119  000318  ECA5  F007         	call	_delay_tenth_s
  2120                           
  2121                           ;Movement.c: 175: stop(mL,mR);
  2122  00031C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2123  000320  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2124  000324  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2125  000328  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2126  00032C  EC07  F006         	call	_stop	;wreg free
  2127  000330                     l2004:
  2128                           
  2129                           ;Movement.c: 176: return 2;
  2130  000330  0E02               	movlw	2
  2131  000332  0012               	return	
  2132  000334                     l2010:
  2133                           
  2134                           ;Movement.c: 178: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  2135                           ;Movement.c: 179: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  2136  000334  5043               	movf	ScanWithRange@SensorResultC,w,c
  2137  000336  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2138  000338  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2139  00033A  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2140  00033C  B0D8               	btfsc	status,0,c
  2141  00033E  D044               	goto	l2030
  2142  000340  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2143  000342  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2144  000344  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2145  000346  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2146  000348  B0D8               	btfsc	status,0,c
  2147  00034A  D03E               	goto	l2030
  2148  00034C  EE20  F045         	lfsr	2,ScanWithRange@SensorResultC+2
  2149  000350  CFDE F034          	movff	postinc2,??_ScanWithRange
  2150  000354  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2151  000358  1E34               	comf	??_ScanWithRange,f,c
  2152  00035A  1E35               	comf	??_ScanWithRange+1,f,c
  2153  00035C  4A34               	infsnz	??_ScanWithRange,f,c
  2154  00035E  2A35               	incf	??_ScanWithRange+1,f,c
  2155  000360  5043               	movf	ScanWithRange@SensorResultC,w,c
  2156  000362  2634               	addwf	??_ScanWithRange,f,c
  2157  000364  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2158  000366  2235               	addwfc	??_ScanWithRange+1,f,c
  2159  000368  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2160  00036A  5C34               	subwf	??_ScanWithRange,w,c
  2161  00036C  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2162  00036E  5835               	subwfb	??_ScanWithRange+1,w,c
  2163  000370  A0D8               	btfss	status,0,c
  2164  000372  D012               	goto	l2018
  2165  000374  C043  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  2166  000378  C044  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  2167  00037C  1E34               	comf	??_ScanWithRange,f,c
  2168  00037E  1E35               	comf	??_ScanWithRange+1,f,c
  2169  000380  4A34               	infsnz	??_ScanWithRange,f,c
  2170  000382  2A35               	incf	??_ScanWithRange+1,f,c
  2171  000384  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2172  000386  2634               	addwf	??_ScanWithRange,f,c
  2173  000388  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2174  00038A  2235               	addwfc	??_ScanWithRange+1,f,c
  2175  00038C  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2176  00038E  5C34               	subwf	??_ScanWithRange,w,c
  2177  000390  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2178  000392  5835               	subwfb	??_ScanWithRange+1,w,c
  2179  000394  B0D8               	btfsc	status,0,c
  2180  000396  D018               	goto	l2030
  2181  000398                     l2018:
  2182                           
  2183                           ;Movement.c: 181: turnLeft(mL,mR);
  2184  000398  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2185  00039C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2186  0003A0  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2187  0003A4  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2188  0003A8  EC64  F007         	call	_turnLeft	;wreg free
  2189                           
  2190                           ;Movement.c: 182: delay_tenth_s(tenth_seconds);
  2191  0003AC  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2192  0003AE  ECA5  F007         	call	_delay_tenth_s
  2193                           
  2194                           ;Movement.c: 183: stop(mL,mR);
  2195  0003B2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2196  0003B6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2197  0003BA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2198  0003BE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2199  0003C2  EC07  F006         	call	_stop	;wreg free
  2200  0003C6  D7B4               	goto	l2004
  2201  0003C8                     l2030:
  2202                           
  2203                           ;Movement.c: 186: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  2204                           ;Movement.c: 187: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  2205  0003C8  5047               	movf	ScanWithRange@SensorResultR,w,c
  2206  0003CA  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2207  0003CC  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2208  0003CE  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2209  0003D0  B0D8               	btfsc	status,0,c
  2210  0003D2  D037               	goto	l2046
  2211  0003D4  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2212  0003D6  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2213  0003D8  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2214  0003DA  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2215  0003DC  B0D8               	btfsc	status,0,c
  2216  0003DE  D031               	goto	l2046
  2217  0003E0  EE20  F049         	lfsr	2,ScanWithRange@SensorResultR+2
  2218  0003E4  CFDE F034          	movff	postinc2,??_ScanWithRange
  2219  0003E8  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2220  0003EC  1E34               	comf	??_ScanWithRange,f,c
  2221  0003EE  1E35               	comf	??_ScanWithRange+1,f,c
  2222  0003F0  4A34               	infsnz	??_ScanWithRange,f,c
  2223  0003F2  2A35               	incf	??_ScanWithRange+1,f,c
  2224  0003F4  5047               	movf	ScanWithRange@SensorResultR,w,c
  2225  0003F6  2634               	addwf	??_ScanWithRange,f,c
  2226  0003F8  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2227  0003FA  2235               	addwfc	??_ScanWithRange+1,f,c
  2228  0003FC  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2229  0003FE  5C34               	subwf	??_ScanWithRange,w,c
  2230  000400  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2231  000402  5835               	subwfb	??_ScanWithRange+1,w,c
  2232  000404  A0D8               	btfss	status,0,c
  2233  000406  D012               	goto	l2038
  2234  000408  C047  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  2235  00040C  C048  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  2236  000410  1E34               	comf	??_ScanWithRange,f,c
  2237  000412  1E35               	comf	??_ScanWithRange+1,f,c
  2238  000414  4A34               	infsnz	??_ScanWithRange,f,c
  2239  000416  2A35               	incf	??_ScanWithRange+1,f,c
  2240  000418  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2241  00041A  2634               	addwf	??_ScanWithRange,f,c
  2242  00041C  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2243  00041E  2235               	addwfc	??_ScanWithRange+1,f,c
  2244  000420  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2245  000422  5C34               	subwf	??_ScanWithRange,w,c
  2246  000424  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2247  000426  5835               	subwfb	??_ScanWithRange+1,w,c
  2248  000428  B0D8               	btfsc	status,0,c
  2249  00042A  D00B               	goto	l2046
  2250  00042C                     l2038:
  2251                           
  2252                           ;Movement.c: 189: stop(mL,mR);
  2253  00042C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2254  000430  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2255  000434  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2256  000438  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2257  00043C  EC07  F006         	call	_stop	;wreg free
  2258  000440  D777               	goto	l2004
  2259  000442                     l2046:
  2260  000442  503F               	movf	ScanWithRange@SensorResultL,w,c
  2261  000444  5C41               	subwf	ScanWithRange@SensorResultL+2,w,c
  2262  000446  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2263  000448  5842               	subwfb	ScanWithRange@SensorResultL+3,w,c
  2264  00044A  B0D8               	btfsc	status,0,c
  2265  00044C  D01A               	goto	l2060
  2266                           
  2267                           ;Movement.c: 195: turnLeft(mL,mR);
  2268  00044E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2269  000452  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2270  000456  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2271  00045A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2272  00045E  EC64  F007         	call	_turnLeft	;wreg free
  2273                           
  2274                           ;Movement.c: 196: delay_tenth_s(3*tenth_seconds);
  2275  000462  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2276  000464  0D03               	mullw	3
  2277  000466  50F3               	movf	prodl,w,c
  2278  000468  ECA5  F007         	call	_delay_tenth_s
  2279                           
  2280                           ;Movement.c: 197: stop(mL,mR);
  2281  00046C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2282  000470  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2283  000474  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2284  000478  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2285  00047C  EC07  F006         	call	_stop	;wreg free
  2286  000480  D70A               	goto	l1984
  2287  000482                     l2060:
  2288  000482  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2289  000484  5C47               	subwf	ScanWithRange@SensorResultR,w,c
  2290  000486  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2291  000488  5848               	subwfb	ScanWithRange@SensorResultR+1,w,c
  2292  00048A  B0D8               	btfsc	status,0,c
  2293  00048C  D018               	goto	l2074
  2294                           
  2295                           ;Movement.c: 201: turnRight(mL,mR);
  2296  00048E  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2297  000492  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2298  000496  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2299  00049A  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2300  00049E  EC3F  F007         	call	_turnRight	;wreg free
  2301                           
  2302                           ;Movement.c: 202: delay_tenth_s(tenth_seconds);
  2303  0004A2  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2304  0004A4  ECA5  F007         	call	_delay_tenth_s
  2305                           
  2306                           ;Movement.c: 203: stop(mL,mR);
  2307  0004A8  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2308  0004AC  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2309  0004B0  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2310  0004B4  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2311  0004B8  EC07  F006         	call	_stop	;wreg free
  2312  0004BC  D6EC               	goto	l1984
  2313  0004BE                     l2074:
  2314  0004BE  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2315  0004C0  5C3F               	subwf	ScanWithRange@SensorResultL,w,c
  2316  0004C2  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2317  0004C4  5840               	subwfb	ScanWithRange@SensorResultL+1,w,c
  2318  0004C6  B0D8               	btfsc	status,0,c
  2319  0004C8  D02B               	goto	l2090
  2320  0004CA  5043               	movf	ScanWithRange@SensorResultC,w,c
  2321  0004CC  5C45               	subwf	ScanWithRange@SensorResultC+2,w,c
  2322  0004CE  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2323  0004D0  5846               	subwfb	ScanWithRange@SensorResultC+3,w,c
  2324  0004D2  B0D8               	btfsc	status,0,c
  2325  0004D4  D025               	goto	l2090
  2326                           
  2327                           ;Movement.c: 209: turnLeft(mL,mR);
  2328  0004D6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2329  0004DA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2330  0004DE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2331  0004E2  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2332  0004E6  EC64  F007         	call	_turnLeft	;wreg free
  2333                           
  2334                           ;Movement.c: 210: delay_tenth_s((3*tenth_seconds)/2);
  2335  0004EA  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2336  0004EC  0D03               	mullw	3
  2337  0004EE  CFF3 F015          	movff	prodl,___awdiv@dividend
  2338  0004F2  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  2339  0004F6  0E00               	movlw	0
  2340  0004F8  6E18               	movwf	___awdiv@divisor+1,c
  2341  0004FA  0E02               	movlw	2
  2342  0004FC  6E17               	movwf	___awdiv@divisor,c
  2343  0004FE  EC4F  F006         	call	___awdiv	;wreg free
  2344  000502  5015               	movf	?___awdiv,w,c
  2345  000504  ECA5  F007         	call	_delay_tenth_s
  2346                           
  2347                           ;Movement.c: 211: stop(mL,mR);
  2348  000508  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2349  00050C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2350  000510  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2351  000514  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2352  000518  EC07  F006         	call	_stop	;wreg free
  2353  00051C                     l2084:
  2354                           
  2355                           ;Movement.c: 212: return 1;
  2356  00051C  0E01               	movlw	1
  2357  00051E  0012               	return	
  2358  000520                     l2090:
  2359  000520  5047               	movf	ScanWithRange@SensorResultR,w,c
  2360  000522  5C49               	subwf	ScanWithRange@SensorResultR+2,w,c
  2361  000524  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2362  000526  584A               	subwfb	ScanWithRange@SensorResultR+3,w,c
  2363  000528  B0D8               	btfsc	status,0,c
  2364  00052A  D027               	goto	l2104
  2365  00052C  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2366  00052E  5C43               	subwf	ScanWithRange@SensorResultC,w,c
  2367  000530  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2368  000532  5844               	subwfb	ScanWithRange@SensorResultC+1,w,c
  2369  000534  B0D8               	btfsc	status,0,c
  2370  000536  D021               	goto	l2104
  2371                           
  2372                           ;Movement.c: 215: turnLeft(mL,mR);
  2373  000538  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2374  00053C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2375  000540  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2376  000544  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2377  000548  EC64  F007         	call	_turnLeft	;wreg free
  2378                           
  2379                           ;Movement.c: 216: delay_tenth_s((tenth_seconds)/2);
  2380  00054C  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  2381  000550  6A16               	clrf	___awdiv@dividend+1,c
  2382  000552  0E00               	movlw	0
  2383  000554  6E18               	movwf	___awdiv@divisor+1,c
  2384  000556  0E02               	movlw	2
  2385  000558  6E17               	movwf	___awdiv@divisor,c
  2386  00055A  EC4F  F006         	call	___awdiv	;wreg free
  2387  00055E  5015               	movf	?___awdiv,w,c
  2388  000560  ECA5  F007         	call	_delay_tenth_s
  2389                           
  2390                           ;Movement.c: 217: stop(mL,mR);
  2391  000564  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2392  000568  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2393  00056C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2394  000570  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2395  000574  EC07  F006         	call	_stop	;wreg free
  2396  000578  D7D1               	goto	l2084
  2397  00057A                     l2104:
  2398                           
  2399                           ;Movement.c: 219: }
  2400                           ;Movement.c: 220: }
  2401                           ;Movement.c: 221: return 0;
  2402  00057A  0E00               	movlw	0
  2403  00057C  0012               	return	
  2404  00057E                     __end_of_ScanWithRange:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon	equ	0xFF2
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           indf1	equ	0xFE7
  2413                           fsr1h	equ	0xFE2
  2414                           fsr1l	equ	0xFE1
  2415                           indf2	equ	0xFDF
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _ScanIR *****************
  2423 ;; Defined at:
  2424 ;;		line 32 in file "Movement.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2427 ;;		 -> main@mL(9), 
  2428 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2429 ;;		 -> main@mR(9), 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  2432 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  2433 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  2434 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  1    wreg      unsigned char 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2444 ;;      Params:         4       0       0       0
  2445 ;;      Locals:        10       0       0       0
  2446 ;;      Temps:          2       0       0       0
  2447 ;;      Totals:        16       0       0       0
  2448 ;;Total ram usage:       16 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    5
  2451 ;; This function calls:
  2452 ;;		_delay_tenth_s
  2453 ;;		_grabLeftIR
  2454 ;;		_grabRightIR
  2455 ;;		_stop
  2456 ;;		_turnLeft
  2457 ;;		_turnRight
  2458 ;; This function is called by:
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text9
  2464  000842                     __ptext9:
  2465                           	opt stack 0
  2466  000842                     _ScanIR:
  2467                           	opt stack 25
  2468                           
  2469                           ;Movement.c: 34: unsigned int SensorResult[2];
  2470                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  2471                           
  2472                           ;incstack = 0
  2473  000842  0E00               	movlw	0
  2474  000844  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  2475  000846  0EC8               	movlw	200
  2476  000848  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  2477                           
  2478                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  2479  00084A  0E05               	movlw	5
  2480  00084C  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  2481  00084E  0EDC               	movlw	220
  2482  000850  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  2483                           
  2484                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  2485  000852  0E01               	movlw	1
  2486  000854  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  2487  000856  0EF4               	movlw	244
  2488  000858  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  2489                           
  2490                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  2491  00085A  ECCC  F006         	call	_grabLeftIR	;wreg free
  2492  00085E  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  2493  000862  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  2494                           
  2495                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  2496  000866  EC91  F006         	call	_grabRightIR	;wreg free
  2497  00086A  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  2498  00086E  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  2499                           
  2500                           ;Movement.c: 46: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  2501  000872  503B               	movf	ScanIR@SensorResult,w,c
  2502  000874  243D               	addwf	ScanIR@SensorResult+2,w,c
  2503  000876  6E33               	movwf	??_ScanIR& (0+255),c
  2504  000878  503C               	movf	ScanIR@SensorResult+1,w,c
  2505  00087A  203E               	addwfc	ScanIR@SensorResult+3,w,c
  2506  00087C  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  2507  00087E  5033               	movf	??_ScanIR,w,c
  2508  000880  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  2509  000882  5034               	movf	??_ScanIR+1,w,c
  2510  000884  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  2511  000886  B0D8               	btfsc	status,0,c
  2512  000888  D085               	goto	l2156
  2513                           
  2514                           ;Movement.c: 49: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  2515                           ;Movement.c: 50: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  2516                           ;Movement.c: 51: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  2517  00088A  503B               	movf	ScanIR@SensorResult,w,c
  2518  00088C  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2519  00088E  503C               	movf	ScanIR@SensorResult+1,w,c
  2520  000890  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2521  000892  B0D8               	btfsc	status,0,c
  2522  000894  D02E               	goto	l2130
  2523  000896  503D               	movf	ScanIR@SensorResult+2,w,c
  2524  000898  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2525  00089A  503E               	movf	ScanIR@SensorResult+3,w,c
  2526  00089C  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2527  00089E  B0D8               	btfsc	status,0,c
  2528  0008A0  D028               	goto	l2130
  2529  0008A2  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  2530  0008A6  CFDE F033          	movff	postinc2,??_ScanIR
  2531  0008AA  CFDD F034          	movff	postdec2,??_ScanIR+1
  2532  0008AE  1E33               	comf	??_ScanIR,f,c
  2533  0008B0  1E34               	comf	??_ScanIR+1,f,c
  2534  0008B2  4A33               	infsnz	??_ScanIR,f,c
  2535  0008B4  2A34               	incf	??_ScanIR+1,f,c
  2536  0008B6  503B               	movf	ScanIR@SensorResult,w,c
  2537  0008B8  2633               	addwf	??_ScanIR,f,c
  2538  0008BA  503C               	movf	ScanIR@SensorResult+1,w,c
  2539  0008BC  2234               	addwfc	??_ScanIR+1,f,c
  2540  0008BE  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2541  0008C0  5C33               	subwf	??_ScanIR,w,c
  2542  0008C2  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2543  0008C4  5834               	subwfb	??_ScanIR+1,w,c
  2544  0008C6  A0D8               	btfss	status,0,c
  2545  0008C8  D012               	goto	l2124
  2546  0008CA  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  2547  0008CE  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  2548  0008D2  1E33               	comf	??_ScanIR,f,c
  2549  0008D4  1E34               	comf	??_ScanIR+1,f,c
  2550  0008D6  4A33               	infsnz	??_ScanIR,f,c
  2551  0008D8  2A34               	incf	??_ScanIR+1,f,c
  2552  0008DA  503D               	movf	ScanIR@SensorResult+2,w,c
  2553  0008DC  2633               	addwf	??_ScanIR,f,c
  2554  0008DE  503E               	movf	ScanIR@SensorResult+3,w,c
  2555  0008E0  2234               	addwfc	??_ScanIR+1,f,c
  2556  0008E2  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2557  0008E4  5C33               	subwf	??_ScanIR,w,c
  2558  0008E6  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2559  0008E8  5834               	subwfb	??_ScanIR+1,w,c
  2560  0008EA  B0D8               	btfsc	status,0,c
  2561  0008EC  D002               	goto	l2130
  2562  0008EE                     l2124:
  2563                           
  2564                           ;Movement.c: 52: return 2;
  2565  0008EE  0E02               	movlw	2
  2566  0008F0  0012               	return	
  2567  0008F2                     l2130:
  2568  0008F2  503B               	movf	ScanIR@SensorResult,w,c
  2569  0008F4  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2570  0008F6  503C               	movf	ScanIR@SensorResult+1,w,c
  2571  0008F8  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2572  0008FA  A0D8               	btfss	status,0,c
  2573  0008FC  D023               	goto	l2144
  2574                           
  2575                           ;Movement.c: 55: stop(mL,mR);
  2576  0008FE  C02F  F026         	movff	ScanIR@mL,stop@mL
  2577  000902  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2578  000906  C031  F028         	movff	ScanIR@mR,stop@mR
  2579  00090A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2580  00090E  EC07  F006         	call	_stop	;wreg free
  2581                           
  2582                           ;Movement.c: 56: turnLeft(mL,mR);
  2583  000912  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2584  000916  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2585  00091A  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2586  00091E  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2587  000922  EC64  F007         	call	_turnLeft	;wreg free
  2588                           
  2589                           ;Movement.c: 57: delay_tenth_s(3);
  2590  000926  0E03               	movlw	3
  2591  000928  ECA5  F007         	call	_delay_tenth_s
  2592                           
  2593                           ;Movement.c: 58: stop(mL,mR);
  2594  00092C  C02F  F026         	movff	ScanIR@mL,stop@mL
  2595  000930  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2596  000934  C031  F028         	movff	ScanIR@mR,stop@mR
  2597  000938  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2598  00093C  EC07  F006         	call	_stop	;wreg free
  2599  000940                     l2138:
  2600                           
  2601                           ;Movement.c: 59: return 1;
  2602  000940  0E01               	movlw	1
  2603  000942  0012               	return	
  2604  000944                     l2144:
  2605  000944  503B               	movf	ScanIR@SensorResult,w,c
  2606  000946  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2607  000948  503C               	movf	ScanIR@SensorResult+1,w,c
  2608  00094A  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2609  00094C  B0D8               	btfsc	status,0,c
  2610  00094E  D069               	goto	l2184
  2611                           
  2612                           ;Movement.c: 62: stop(mL,mR);
  2613  000950  C02F  F026         	movff	ScanIR@mL,stop@mL
  2614  000954  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2615  000958  C031  F028         	movff	ScanIR@mR,stop@mR
  2616  00095C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2617  000960  EC07  F006         	call	_stop	;wreg free
  2618                           
  2619                           ;Movement.c: 63: turnRight(mL,mR);
  2620  000964  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2621  000968  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2622  00096C  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2623  000970  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2624  000974  EC3F  F007         	call	_turnRight	;wreg free
  2625                           
  2626                           ;Movement.c: 64: delay_tenth_s(3);
  2627  000978  0E03               	movlw	3
  2628  00097A  ECA5  F007         	call	_delay_tenth_s
  2629                           
  2630                           ;Movement.c: 65: stop(mL,mR);
  2631  00097E  C02F  F026         	movff	ScanIR@mL,stop@mL
  2632  000982  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2633  000986  C031  F028         	movff	ScanIR@mR,stop@mR
  2634  00098A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2635  00098E  EC07  F006         	call	_stop	;wreg free
  2636  000992  D7D6               	goto	l2138
  2637  000994                     l2156:
  2638                           
  2639                           ;Movement.c: 70: stop(mL,mR);
  2640  000994  C02F  F026         	movff	ScanIR@mL,stop@mL
  2641  000998  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2642  00099C  C031  F028         	movff	ScanIR@mR,stop@mR
  2643  0009A0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2644  0009A4  EC07  F006         	call	_stop	;wreg free
  2645                           
  2646                           ;Movement.c: 73: if (SensorResult[0]<=SensorResult[1]) {
  2647  0009A8  503B               	movf	ScanIR@SensorResult,w,c
  2648  0009AA  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2649  0009AC  503C               	movf	ScanIR@SensorResult+1,w,c
  2650  0009AE  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2651  0009B0  A0D8               	btfss	status,0,c
  2652  0009B2  D019               	goto	l2172
  2653                           
  2654                           ;Movement.c: 74: turnLeft(mL,mR);
  2655  0009B4  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2656  0009B8  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2657  0009BC  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2658  0009C0  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2659  0009C4  EC64  F007         	call	_turnLeft	;wreg free
  2660                           
  2661                           ;Movement.c: 75: delay_tenth_s(5);
  2662  0009C8  0E05               	movlw	5
  2663  0009CA  ECA5  F007         	call	_delay_tenth_s
  2664                           
  2665                           ;Movement.c: 76: stop(mL,mR);
  2666  0009CE  C02F  F026         	movff	ScanIR@mL,stop@mL
  2667  0009D2  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2668  0009D6  C031  F028         	movff	ScanIR@mR,stop@mR
  2669  0009DA  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2670  0009DE  EC07  F006         	call	_stop	;wreg free
  2671  0009E2                     l2166:
  2672                           
  2673                           ;Movement.c: 77: return 0;
  2674  0009E2  0E00               	movlw	0
  2675  0009E4  0012               	return	
  2676  0009E6                     l2172:
  2677  0009E6  503B               	movf	ScanIR@SensorResult,w,c
  2678  0009E8  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2679  0009EA  503C               	movf	ScanIR@SensorResult+1,w,c
  2680  0009EC  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2681  0009EE  B0D8               	btfsc	status,0,c
  2682  0009F0  D018               	goto	l2184
  2683                           
  2684                           ;Movement.c: 80: turnRight(mL,mR);
  2685  0009F2  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2686  0009F6  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2687  0009FA  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2688  0009FE  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2689  000A02  EC3F  F007         	call	_turnRight	;wreg free
  2690                           
  2691                           ;Movement.c: 81: delay_tenth_s(5);
  2692  000A06  0E05               	movlw	5
  2693  000A08  ECA5  F007         	call	_delay_tenth_s
  2694                           
  2695                           ;Movement.c: 82: stop(mL,mR);
  2696  000A0C  C02F  F026         	movff	ScanIR@mL,stop@mL
  2697  000A10  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2698  000A14  C031  F028         	movff	ScanIR@mR,stop@mR
  2699  000A18  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2700  000A1C  EC07  F006         	call	_stop	;wreg free
  2701  000A20  D7E0               	goto	l2166
  2702  000A22                     l2184:
  2703                           
  2704                           ;Movement.c: 84: }
  2705                           ;Movement.c: 85: }
  2706                           ;Movement.c: 86: return 0;
  2707  000A22  0E00               	movlw	0
  2708  000A24  0012               	return	
  2709  000A26                     __end_of_ScanIR:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           prodh	equ	0xFF4
  2713                           prodl	equ	0xFF3
  2714                           intcon	equ	0xFF2
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           indf1	equ	0xFE7
  2718                           fsr1h	equ	0xFE2
  2719                           fsr1l	equ	0xFE1
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function _turnRight *****************
  2728 ;; Defined at:
  2729 ;;		line 98 in file "dc_motor.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2732 ;;		 -> main@mL(9), 
  2733 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2734 ;;		 -> main@mR(9), 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;		None               void
  2739 ;; Registers used:
  2740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2746 ;;      Params:         4       0       0       0
  2747 ;;      Locals:         0       0       0       0
  2748 ;;      Temps:          0       0       0       0
  2749 ;;      Totals:         4       0       0       0
  2750 ;;Total ram usage:        4 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    4
  2753 ;; This function calls:
  2754 ;;		_fullSpeedAhead
  2755 ;;		_stop
  2756 ;; This function is called by:
  2757 ;;		_ScanIR
  2758 ;;		_ScanWithRange
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text10
  2763  000E7E                     __ptext10:
  2764                           	opt stack 0
  2765  000E7E                     _turnRight:
  2766                           	opt stack 25
  2767                           
  2768                           ;dc_motor.c: 100: stop(mL, mR);
  2769                           
  2770                           ;incstack = 0
  2771  000E7E  C02B  F026         	movff	turnRight@mL,stop@mL
  2772  000E82  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2773  000E86  C02D  F028         	movff	turnRight@mR,stop@mR
  2774  000E8A  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2775  000E8E  EC07  F006         	call	_stop	;wreg free
  2776                           
  2777                           ;dc_motor.c: 102: mL->direction=1;
  2778  000E92  EE20 F001          	lfsr	2,1
  2779  000E96  502B               	movf	turnRight@mL,w,c
  2780  000E98  26D9               	addwf	fsr2l,f,c
  2781  000E9A  502C               	movf	turnRight@mL+1,w,c
  2782  000E9C  22DA               	addwfc	fsr2h,f,c
  2783  000E9E  0E01               	movlw	1
  2784  000EA0  6EDF               	movwf	indf2,c
  2785                           
  2786                           ;dc_motor.c: 103: mR->direction=0;
  2787  000EA2  EE20 F001          	lfsr	2,1
  2788  000EA6  502D               	movf	turnRight@mR,w,c
  2789  000EA8  26D9               	addwf	fsr2l,f,c
  2790  000EAA  502E               	movf	turnRight@mR+1,w,c
  2791  000EAC  22DA               	addwfc	fsr2h,f,c
  2792  000EAE  0E00               	movlw	0
  2793  000EB0  6EDF               	movwf	indf2,c
  2794                           
  2795                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2796  000EB2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2797  000EB6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2798  000EBA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2799  000EBE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2800  000EC2  EC07  F007         	call	_fullSpeedAhead	;wreg free
  2801  000EC6  0012               	return		;funcret
  2802  000EC8                     __end_of_turnRight:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           prodh	equ	0xFF4
  2806                           prodl	equ	0xFF3
  2807                           intcon	equ	0xFF2
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           indf1	equ	0xFE7
  2811                           fsr1h	equ	0xFE2
  2812                           fsr1l	equ	0xFE1
  2813                           indf2	equ	0xFDF
  2814                           postinc2	equ	0xFDE
  2815                           postdec2	equ	0xFDD
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _turnLeft *****************
  2821 ;; Defined at:
  2822 ;;		line 87 in file "dc_motor.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2825 ;;		 -> main@mL(9), 
  2826 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2827 ;;		 -> main@mR(9), 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;		None               void
  2832 ;; Registers used:
  2833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2839 ;;      Params:         4       0       0       0
  2840 ;;      Locals:         0       0       0       0
  2841 ;;      Temps:          0       0       0       0
  2842 ;;      Totals:         4       0       0       0
  2843 ;;Total ram usage:        4 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    4
  2846 ;; This function calls:
  2847 ;;		_fullSpeedAhead
  2848 ;;		_stop
  2849 ;; This function is called by:
  2850 ;;		_ScanIR
  2851 ;;		_ScanWithRange
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text11
  2856  000EC8                     __ptext11:
  2857                           	opt stack 0
  2858  000EC8                     _turnLeft:
  2859                           	opt stack 25
  2860                           
  2861                           ;dc_motor.c: 89: stop(mL, mR);
  2862                           
  2863                           ;incstack = 0
  2864  000EC8  C02B  F026         	movff	turnLeft@mL,stop@mL
  2865  000ECC  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2866  000ED0  C02D  F028         	movff	turnLeft@mR,stop@mR
  2867  000ED4  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2868  000ED8  EC07  F006         	call	_stop	;wreg free
  2869                           
  2870                           ;dc_motor.c: 91: mL->direction=0;
  2871  000EDC  EE20 F001          	lfsr	2,1
  2872  000EE0  502B               	movf	turnLeft@mL,w,c
  2873  000EE2  26D9               	addwf	fsr2l,f,c
  2874  000EE4  502C               	movf	turnLeft@mL+1,w,c
  2875  000EE6  22DA               	addwfc	fsr2h,f,c
  2876  000EE8  0E00               	movlw	0
  2877  000EEA  6EDF               	movwf	indf2,c
  2878                           
  2879                           ;dc_motor.c: 92: mR->direction=1;
  2880  000EEC  EE20 F001          	lfsr	2,1
  2881  000EF0  502D               	movf	turnLeft@mR,w,c
  2882  000EF2  26D9               	addwf	fsr2l,f,c
  2883  000EF4  502E               	movf	turnLeft@mR+1,w,c
  2884  000EF6  22DA               	addwfc	fsr2h,f,c
  2885  000EF8  0E01               	movlw	1
  2886  000EFA  6EDF               	movwf	indf2,c
  2887                           
  2888                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2889  000EFC  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2890  000F00  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2891  000F04  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2892  000F08  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2893  000F0C  EC07  F007         	call	_fullSpeedAhead	;wreg free
  2894  000F10  0012               	return		;funcret
  2895  000F12                     __end_of_turnLeft:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           indf1	equ	0xFE7
  2904                           fsr1h	equ	0xFE2
  2905                           fsr1l	equ	0xFE1
  2906                           indf2	equ	0xFDF
  2907                           postinc2	equ	0xFDE
  2908                           postdec2	equ	0xFDD
  2909                           fsr2h	equ	0xFDA
  2910                           fsr2l	equ	0xFD9
  2911                           status	equ	0xFD8
  2912                           
  2913 ;; *************** function _stop *****************
  2914 ;; Defined at:
  2915 ;;		line 67 in file "dc_motor.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2918 ;;		 -> main@mL(9), 
  2919 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2920 ;;		 -> main@mR(9), 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;		None               void
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2932 ;;      Params:         4       0       0       0
  2933 ;;      Locals:         0       0       0       0
  2934 ;;      Temps:          0       0       0       0
  2935 ;;      Totals:         4       0       0       0
  2936 ;;Total ram usage:        4 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    3
  2939 ;; This function calls:
  2940 ;;		_setMotorPWM
  2941 ;; This function is called by:
  2942 ;;		_main
  2943 ;;		_turnLeft
  2944 ;;		_turnRight
  2945 ;;		_ScanIR
  2946 ;;		_ScanWithRange
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text12
  2951  000C0E                     __ptext12:
  2952                           	opt stack 0
  2953  000C0E                     _stop:
  2954                           	opt stack 27
  2955                           
  2956                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2957                           
  2958                           ;incstack = 0
  2959  000C0E  D028               	goto	l1816
  2960  000C10                     l1802:
  2961                           
  2962                           ;dc_motor.c: 71: if(mL->power>0){
  2963  000C10  C026  FFD9         	movff	stop@mL,fsr2l
  2964  000C14  C027  FFDA         	movff	stop@mL+1,fsr2h
  2965  000C18  50DF               	movf	indf2,w,c
  2966  000C1A  B4D8               	btfsc	status,2,c
  2967  000C1C  D005               	goto	l1806
  2968                           
  2969                           ;dc_motor.c: 72: mL->power--;
  2970  000C1E  C026  FFD9         	movff	stop@mL,fsr2l
  2971  000C22  C027  FFDA         	movff	stop@mL+1,fsr2h
  2972  000C26  06DF               	decf	indf2,f,c
  2973  000C28                     l1806:
  2974                           
  2975                           ;dc_motor.c: 73: }
  2976                           ;dc_motor.c: 74: if(mR->power>0){
  2977  000C28  C028  FFD9         	movff	stop@mR,fsr2l
  2978  000C2C  C029  FFDA         	movff	stop@mR+1,fsr2h
  2979  000C30  50DF               	movf	indf2,w,c
  2980  000C32  B4D8               	btfsc	status,2,c
  2981  000C34  D005               	goto	l1810
  2982                           
  2983                           ;dc_motor.c: 75: mR->power--;
  2984  000C36  C028  FFD9         	movff	stop@mR,fsr2l
  2985  000C3A  C029  FFDA         	movff	stop@mR+1,fsr2h
  2986  000C3E  06DF               	decf	indf2,f,c
  2987  000C40                     l1810:
  2988                           
  2989                           ;dc_motor.c: 76: }
  2990                           ;dc_motor.c: 77: setMotorPWM(mL);
  2991  000C40  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2992  000C44  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2993  000C48  EC13  F005         	call	_setMotorPWM	;wreg free
  2994                           
  2995                           ;dc_motor.c: 78: setMotorPWM(mR);
  2996  000C4C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2997  000C50  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2998  000C54  EC13  F005         	call	_setMotorPWM	;wreg free
  2999                           
  3000                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3001  000C58  0E21               	movlw	33
  3002  000C5A                     u1807:
  3003  000C5A  2EE8               	decfsz	wreg,f,c
  3004  000C5C  D7FE               	goto	u1807
  3005  000C5E  F000               	nop	
  3006  000C60                     l1816:
  3007  000C60  C026  FFD9         	movff	stop@mL,fsr2l
  3008  000C64  C027  FFDA         	movff	stop@mL+1,fsr2h
  3009  000C68  50DF               	movf	indf2,w,c
  3010  000C6A  A4D8               	btfss	status,2,c
  3011  000C6C  D7D1               	goto	l1802
  3012  000C6E  C028  FFD9         	movff	stop@mR,fsr2l
  3013  000C72  C029  FFDA         	movff	stop@mR+1,fsr2h
  3014  000C76  50DF               	movf	indf2,w,c
  3015  000C78  A4D8               	btfss	status,2,c
  3016  000C7A  D7CA               	goto	l1802
  3017                           
  3018                           ;dc_motor.c: 80: }
  3019                           ;dc_motor.c: 81: mL->direction=1;
  3020  000C7C  EE20 F001          	lfsr	2,1
  3021  000C80  5026               	movf	stop@mL,w,c
  3022  000C82  26D9               	addwf	fsr2l,f,c
  3023  000C84  5027               	movf	stop@mL+1,w,c
  3024  000C86  22DA               	addwfc	fsr2h,f,c
  3025  000C88  0E01               	movlw	1
  3026  000C8A  6EDF               	movwf	indf2,c
  3027                           
  3028                           ;dc_motor.c: 82: mR->direction=1;
  3029  000C8C  EE20 F001          	lfsr	2,1
  3030  000C90  5028               	movf	stop@mR,w,c
  3031  000C92  26D9               	addwf	fsr2l,f,c
  3032  000C94  5029               	movf	stop@mR+1,w,c
  3033  000C96  22DA               	addwfc	fsr2h,f,c
  3034  000C98  0E01               	movlw	1
  3035  000C9A  6EDF               	movwf	indf2,c
  3036  000C9C  0012               	return		;funcret
  3037  000C9E                     __end_of_stop:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           intcon	equ	0xFF2
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           indf1	equ	0xFE7
  3046                           fsr1h	equ	0xFE2
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _fullSpeedAhead *****************
  3056 ;; Defined at:
  3057 ;;		line 108 in file "dc_motor.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3060 ;;		 -> main@mL(9), 
  3061 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3062 ;;		 -> main@mR(9), 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;		None
  3065 ;; Return value:  Size  Location     Type
  3066 ;;		None               void
  3067 ;; Registers used:
  3068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3074 ;;      Params:         4       0       0       0
  3075 ;;      Locals:         0       0       0       0
  3076 ;;      Temps:          1       0       0       0
  3077 ;;      Totals:         5       0       0       0
  3078 ;;Total ram usage:        5 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    3
  3081 ;; This function calls:
  3082 ;;		_setMotorPWM
  3083 ;; This function is called by:
  3084 ;;		_main
  3085 ;;		_turnLeft
  3086 ;;		_turnRight
  3087 ;;		_fullSpeedBack
  3088 ;;		_ScanWithRange
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text13
  3093  000E0E                     __ptext13:
  3094                           	opt stack 0
  3095  000E0E                     _fullSpeedAhead:
  3096                           	opt stack 26
  3097                           
  3098                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  3099                           
  3100                           ;incstack = 0
  3101  000E0E  D028               	goto	l154
  3102  000E10                     l1784:
  3103                           
  3104                           ;dc_motor.c: 112: if(mL->power<100){
  3105  000E10  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3106  000E14  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3107  000E18  0E64               	movlw	100
  3108  000E1A  60DF               	cpfslt	indf2,c
  3109  000E1C  D005               	goto	l1788
  3110                           
  3111                           ;dc_motor.c: 113: mL->power++;
  3112  000E1E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3113  000E22  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3114  000E26  2ADF               	incf	indf2,f,c
  3115  000E28                     l1788:
  3116                           
  3117                           ;dc_motor.c: 114: }
  3118                           ;dc_motor.c: 115: if(mR->power<100){
  3119  000E28  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3120  000E2C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3121  000E30  0E64               	movlw	100
  3122  000E32  60DF               	cpfslt	indf2,c
  3123  000E34  D005               	goto	l1792
  3124                           
  3125                           ;dc_motor.c: 116: mR->power++;
  3126  000E36  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3127  000E3A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3128  000E3E  2ADF               	incf	indf2,f,c
  3129  000E40                     l1792:
  3130                           
  3131                           ;dc_motor.c: 117: }
  3132                           ;dc_motor.c: 118: setMotorPWM(mL);
  3133  000E40  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3134  000E44  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3135  000E48  EC13  F005         	call	_setMotorPWM	;wreg free
  3136                           
  3137                           ;dc_motor.c: 119: setMotorPWM(mR);
  3138  000E4C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3139  000E50  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3140  000E54  EC13  F005         	call	_setMotorPWM	;wreg free
  3141                           
  3142                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3143  000E58  0E21               	movlw	33
  3144  000E5A                     u1817:
  3145  000E5A  2EE8               	decfsz	wreg,f,c
  3146  000E5C  D7FE               	goto	u1817
  3147  000E5E  F000               	nop	
  3148  000E60                     l154:
  3149  000E60  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3150  000E64  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3151  000E68  0E63               	movlw	99
  3152  000E6A  64DF               	cpfsgt	indf2,c
  3153  000E6C  D7D1               	goto	l1784
  3154  000E6E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3155  000E72  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3156  000E76  0E63               	movlw	99
  3157  000E78  64DF               	cpfsgt	indf2,c
  3158  000E7A  D7CA               	goto	l1784
  3159  000E7C  0012               	return	
  3160  000E7E                     __end_of_fullSpeedAhead:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           intcon	equ	0xFF2
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           indf1	equ	0xFE7
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           indf2	equ	0xFDF
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _setMotorPWM *****************
  3179 ;; Defined at:
  3180 ;;		line 26 in file "dc_motor.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  m               2   28[COMRAM] PTR struct DC_motor
  3183 ;;		 -> main@mR(9), main@mL(9), 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  PWMduty         2   35[COMRAM] int 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3195 ;;      Params:         2       0       0       0
  3196 ;;      Locals:         2       0       0       0
  3197 ;;      Temps:          5       0       0       0
  3198 ;;      Totals:         9       0       0       0
  3199 ;;Total ram usage:        9 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    2
  3202 ;; This function calls:
  3203 ;;		___awdiv
  3204 ;;		___wmul
  3205 ;; This function is called by:
  3206 ;;		_stop
  3207 ;;		_fullSpeedAhead
  3208 ;;		_setMotorFullSpeed
  3209 ;;		_stopMotor
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text14
  3214  000A26                     __ptext14:
  3215                           	opt stack 0
  3216  000A26                     _setMotorPWM:
  3217                           	opt stack 27
  3218                           
  3219                           ;dc_motor.c: 28: int PWMduty;
  3220                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3221                           
  3222                           ;incstack = 0
  3223  000A26  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  3224  000A2A  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3225  000A2E  50DF               	movf	indf2,w,c
  3226  000A30  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3227  000A32  501F               	movf	??_setMotorPWM,w,c
  3228  000A34  6E0F               	movwf	___wmul@multiplier,c
  3229  000A36  6A10               	clrf	___wmul@multiplier+1,c
  3230  000A38  EE20 F007          	lfsr	2,7
  3231  000A3C  501D               	movf	setMotorPWM@m,w,c
  3232  000A3E  26D9               	addwf	fsr2l,f,c
  3233  000A40  501E               	movf	setMotorPWM@m+1,w,c
  3234  000A42  22DA               	addwfc	fsr2h,f,c
  3235  000A44  CFDE F011          	movff	postinc2,___wmul@multiplicand
  3236  000A48  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  3237  000A4C  EC08  F008         	call	___wmul	;wreg free
  3238  000A50  C00F  F015         	movff	?___wmul,___awdiv@dividend
  3239  000A54  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  3240  000A58  0E00               	movlw	0
  3241  000A5A  6E18               	movwf	___awdiv@divisor+1,c
  3242  000A5C  0E64               	movlw	100
  3243  000A5E  6E17               	movwf	___awdiv@divisor,c
  3244  000A60  EC4F  F006         	call	___awdiv	;wreg free
  3245  000A64  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  3246  000A68  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3247                           
  3248                           ;dc_motor.c: 32: if (m->direction)
  3249  000A6C  EE20 F001          	lfsr	2,1
  3250  000A70  501D               	movf	setMotorPWM@m,w,c
  3251  000A72  26D9               	addwf	fsr2l,f,c
  3252  000A74  501E               	movf	setMotorPWM@m+1,w,c
  3253  000A76  22DA               	addwfc	fsr2h,f,c
  3254  000A78  50DF               	movf	indf2,w,c
  3255  000A7A  B4D8               	btfsc	status,2,c
  3256  000A7C  D02C               	goto	l1780
  3257                           
  3258                           ;dc_motor.c: 33: {
  3259                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3260  000A7E  EE20 F006          	lfsr	2,6
  3261  000A82  501D               	movf	setMotorPWM@m,w,c
  3262  000A84  26D9               	addwf	fsr2l,f,c
  3263  000A86  501E               	movf	setMotorPWM@m+1,w,c
  3264  000A88  22DA               	addwfc	fsr2h,f,c
  3265  000A8A  50DF               	movf	indf2,w,c
  3266  000A8C  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3267  000A8E  0E01               	movlw	1
  3268  000A90  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3269  000A92  2A1F               	incf	??_setMotorPWM,f,c
  3270  000A94  D002               	goto	u1064
  3271  000A96                     u1065:
  3272  000A96  90D8               	bcf	status,0,c
  3273  000A98  3620               	rlcf	??_setMotorPWM+1,f,c
  3274  000A9A                     u1064:
  3275  000A9A  2E1F               	decfsz	??_setMotorPWM,f,c
  3276  000A9C  D7FC               	goto	u1065
  3277  000A9E  5020               	movf	??_setMotorPWM+1,w,c
  3278  000AA0  108A               	iorwf	3978,w,c	;volatile
  3279  000AA2  6E8A               	movwf	3978,c	;volatile
  3280                           
  3281                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3282  000AA4  EE20 F007          	lfsr	2,7
  3283  000AA8  501D               	movf	setMotorPWM@m,w,c
  3284  000AAA  26D9               	addwf	fsr2l,f,c
  3285  000AAC  501E               	movf	setMotorPWM@m+1,w,c
  3286  000AAE  22DA               	addwfc	fsr2h,f,c
  3287  000AB0  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3288  000AB4  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3289  000AB8  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3290  000ABC  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3291  000AC0  1E21               	comf	??_setMotorPWM+2,f,c
  3292  000AC2  1E22               	comf	??_setMotorPWM+3,f,c
  3293  000AC4  4A21               	infsnz	??_setMotorPWM+2,f,c
  3294  000AC6  2A22               	incf	??_setMotorPWM+3,f,c
  3295  000AC8  501F               	movf	??_setMotorPWM,w,c
  3296  000ACA  2421               	addwf	??_setMotorPWM+2,w,c
  3297  000ACC  6E24               	movwf	setMotorPWM@PWMduty,c
  3298  000ACE  5020               	movf	??_setMotorPWM+1,w,c
  3299  000AD0  2022               	addwfc	??_setMotorPWM+3,w,c
  3300  000AD2  6E25               	movwf	setMotorPWM@PWMduty+1,c
  3301                           
  3302                           ;dc_motor.c: 36: }
  3303  000AD4  D014               	goto	l124
  3304  000AD6                     l1780:
  3305                           
  3306                           ;dc_motor.c: 37: else
  3307                           ;dc_motor.c: 38: {
  3308                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3309  000AD6  EE20 F006          	lfsr	2,6
  3310  000ADA  501D               	movf	setMotorPWM@m,w,c
  3311  000ADC  26D9               	addwf	fsr2l,f,c
  3312  000ADE  501E               	movf	setMotorPWM@m+1,w,c
  3313  000AE0  22DA               	addwfc	fsr2h,f,c
  3314  000AE2  50DF               	movf	indf2,w,c
  3315  000AE4  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3316  000AE6  0E01               	movlw	1
  3317  000AE8  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3318  000AEA  2A1F               	incf	??_setMotorPWM,f,c
  3319  000AEC  D002               	goto	u1074
  3320  000AEE                     u1075:
  3321  000AEE  90D8               	bcf	status,0,c
  3322  000AF0  3620               	rlcf	??_setMotorPWM+1,f,c
  3323  000AF2                     u1074:
  3324  000AF2  2E1F               	decfsz	??_setMotorPWM,f,c
  3325  000AF4  D7FC               	goto	u1075
  3326  000AF6  5020               	movf	??_setMotorPWM+1,w,c
  3327  000AF8  0AFF               	xorlw	255
  3328  000AFA  148A               	andwf	3978,w,c	;volatile
  3329  000AFC  6E8A               	movwf	3978,c	;volatile
  3330  000AFE                     l124:
  3331                           
  3332                           ;dc_motor.c: 40: }
  3333                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3334  000AFE  EE20 F002          	lfsr	2,2
  3335  000B02  501D               	movf	setMotorPWM@m,w,c
  3336  000B04  26D9               	addwf	fsr2l,f,c
  3337  000B06  501E               	movf	setMotorPWM@m+1,w,c
  3338  000B08  22DA               	addwfc	fsr2h,f,c
  3339  000B0A  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3340  000B0E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3341  000B12  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3342  000B16  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3343  000B1A  4424               	rlncf	setMotorPWM@PWMduty,w,c
  3344  000B1C  46E8               	rlncf	wreg,f,c
  3345  000B1E  0BFC               	andlw	252
  3346  000B20  6EDF               	movwf	indf2,c
  3347                           
  3348                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3349  000B22  EE20 F004          	lfsr	2,4
  3350  000B26  501D               	movf	setMotorPWM@m,w,c
  3351  000B28  26D9               	addwf	fsr2l,f,c
  3352  000B2A  501E               	movf	setMotorPWM@m+1,w,c
  3353  000B2C  22DA               	addwfc	fsr2h,f,c
  3354  000B2E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3355  000B32  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3356  000B36  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3357  000B3A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3358  000B3E  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3359  000B42  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3360  000B46  0E06               	movlw	6
  3361  000B48  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  3362  000B4A                     u1085:
  3363  000B4A  3422               	rlcf	??_setMotorPWM+3,w,c
  3364  000B4C  3222               	rrcf	??_setMotorPWM+3,f,c
  3365  000B4E  3221               	rrcf	??_setMotorPWM+2,f,c
  3366  000B50  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3367  000B52  D7FB               	goto	u1085
  3368  000B54  5021               	movf	??_setMotorPWM+2,w,c
  3369  000B56  6EDF               	movwf	indf2,c
  3370  000B58  0012               	return		;funcret
  3371  000B5A                     __end_of_setMotorPWM:
  3372                           	opt stack 0
  3373                           tblptru	equ	0xFF8
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           indf1	equ	0xFE7
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function ___wmul *****************
  3390 ;; Defined at:
  3391 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  multiplier      2   14[COMRAM] unsigned int 
  3394 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  product         2   18[COMRAM] unsigned int 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  2   14[COMRAM] unsigned int 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, prodl, prodh
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3406 ;;      Params:         4       0       0       0
  3407 ;;      Locals:         2       0       0       0
  3408 ;;      Temps:          0       0       0       0
  3409 ;;      Totals:         6       0       0       0
  3410 ;;Total ram usage:        6 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_setMotorPWM
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text15
  3421  001010                     __ptext15:
  3422                           	opt stack 0
  3423  001010                     ___wmul:
  3424                           	opt stack 27
  3425                           
  3426                           ;incstack = 0
  3427  001010  500F               	movf	___wmul@multiplier,w,c
  3428  001012  0211               	mulwf	___wmul@multiplicand,c
  3429  001014  CFF3 F013          	movff	prodl,___wmul@product
  3430  001018  CFF4 F014          	movff	prodh,___wmul@product+1
  3431  00101C  500F               	movf	___wmul@multiplier,w,c
  3432  00101E  0212               	mulwf	___wmul@multiplicand+1,c
  3433  001020  50F3               	movf	prodl,w,c
  3434  001022  2614               	addwf	___wmul@product+1,f,c
  3435  001024  5010               	movf	___wmul@multiplier+1,w,c
  3436  001026  0211               	mulwf	___wmul@multiplicand,c
  3437  001028  50F3               	movf	prodl,w,c
  3438  00102A  2614               	addwf	___wmul@product+1,f,c
  3439  00102C  C013  F00F         	movff	___wmul@product,?___wmul
  3440  001030  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3441  001034  0012               	return	
  3442  001036                     __end_of___wmul:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           indf1	equ	0xFE7
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function ___awdiv *****************
  3461 ;; Defined at:
  3462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  dividend        2   20[COMRAM] int 
  3465 ;;  divisor         2   22[COMRAM] int 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  quotient        2   26[COMRAM] int 
  3468 ;;  sign            1   25[COMRAM] unsigned char 
  3469 ;;  counter         1   24[COMRAM] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  2   20[COMRAM] int 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3479 ;;      Params:         4       0       0       0
  3480 ;;      Locals:         4       0       0       0
  3481 ;;      Temps:          0       0       0       0
  3482 ;;      Totals:         8       0       0       0
  3483 ;;Total ram usage:        8 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    1
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_setMotorPWM
  3490 ;;		_ScanWithRange
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text16
  3495  000C9E                     __ptext16:
  3496                           	opt stack 0
  3497  000C9E                     ___awdiv:
  3498                           	opt stack 27
  3499                           
  3500                           ;incstack = 0
  3501  000C9E  0E00               	movlw	0
  3502  000CA0  6E1A               	movwf	___awdiv@sign,c
  3503  000CA2  AE18               	btfss	___awdiv@divisor+1,7,c
  3504  000CA4  D006               	goto	l1738
  3505  000CA6  6C17               	negf	___awdiv@divisor,c
  3506  000CA8  1E18               	comf	___awdiv@divisor+1,f,c
  3507  000CAA  B0D8               	btfsc	status,0,c
  3508  000CAC  2A18               	incf	___awdiv@divisor+1,f,c
  3509  000CAE  0E01               	movlw	1
  3510  000CB0  6E1A               	movwf	___awdiv@sign,c
  3511  000CB2                     l1738:
  3512  000CB2  AE16               	btfss	___awdiv@dividend+1,7,c
  3513  000CB4  D006               	goto	l1744
  3514  000CB6  6C15               	negf	___awdiv@dividend,c
  3515  000CB8  1E16               	comf	___awdiv@dividend+1,f,c
  3516  000CBA  B0D8               	btfsc	status,0,c
  3517  000CBC  2A16               	incf	___awdiv@dividend+1,f,c
  3518  000CBE  0E01               	movlw	1
  3519  000CC0  1A1A               	xorwf	___awdiv@sign,f,c
  3520  000CC2                     l1744:
  3521  000CC2  0E00               	movlw	0
  3522  000CC4  6E1C               	movwf	___awdiv@quotient+1,c
  3523  000CC6  0E00               	movlw	0
  3524  000CC8  6E1B               	movwf	___awdiv@quotient,c
  3525  000CCA  5017               	movf	___awdiv@divisor,w,c
  3526  000CCC  1018               	iorwf	___awdiv@divisor+1,w,c
  3527  000CCE  B4D8               	btfsc	status,2,c
  3528  000CD0  D01C               	goto	l1766
  3529  000CD2  0E01               	movlw	1
  3530  000CD4  6E19               	movwf	___awdiv@counter,c
  3531  000CD6  D004               	goto	l1752
  3532  000CD8                     l1750:
  3533  000CD8  90D8               	bcf	status,0,c
  3534  000CDA  3617               	rlcf	___awdiv@divisor,f,c
  3535  000CDC  3618               	rlcf	___awdiv@divisor+1,f,c
  3536  000CDE  2A19               	incf	___awdiv@counter,f,c
  3537  000CE0                     l1752:
  3538  000CE0  AE18               	btfss	___awdiv@divisor+1,7,c
  3539  000CE2  D7FA               	goto	l1750
  3540  000CE4                     l1754:
  3541  000CE4  90D8               	bcf	status,0,c
  3542  000CE6  361B               	rlcf	___awdiv@quotient,f,c
  3543  000CE8  361C               	rlcf	___awdiv@quotient+1,f,c
  3544  000CEA  5017               	movf	___awdiv@divisor,w,c
  3545  000CEC  5C15               	subwf	___awdiv@dividend,w,c
  3546  000CEE  5018               	movf	___awdiv@divisor+1,w,c
  3547  000CF0  5816               	subwfb	___awdiv@dividend+1,w,c
  3548  000CF2  A0D8               	btfss	status,0,c
  3549  000CF4  D005               	goto	l1762
  3550  000CF6  5017               	movf	___awdiv@divisor,w,c
  3551  000CF8  5E15               	subwf	___awdiv@dividend,f,c
  3552  000CFA  5018               	movf	___awdiv@divisor+1,w,c
  3553  000CFC  5A16               	subwfb	___awdiv@dividend+1,f,c
  3554  000CFE  801B               	bsf	___awdiv@quotient,0,c
  3555  000D00                     l1762:
  3556  000D00  90D8               	bcf	status,0,c
  3557  000D02  3218               	rrcf	___awdiv@divisor+1,f,c
  3558  000D04  3217               	rrcf	___awdiv@divisor,f,c
  3559  000D06  2E19               	decfsz	___awdiv@counter,f,c
  3560  000D08  D7ED               	goto	l1754
  3561  000D0A                     l1766:
  3562  000D0A  501A               	movf	___awdiv@sign,w,c
  3563  000D0C  B4D8               	btfsc	status,2,c
  3564  000D0E  D004               	goto	l1770
  3565  000D10  6C1B               	negf	___awdiv@quotient,c
  3566  000D12  1E1C               	comf	___awdiv@quotient+1,f,c
  3567  000D14  B0D8               	btfsc	status,0,c
  3568  000D16  2A1C               	incf	___awdiv@quotient+1,f,c
  3569  000D18                     l1770:
  3570  000D18  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  3571  000D1C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  3572  000D20  0012               	return	
  3573  000D22                     __end_of___awdiv:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           prodh	equ	0xFF4
  3577                           prodl	equ	0xFF3
  3578                           intcon	equ	0xFF2
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           indf1	equ	0xFE7
  3582                           fsr1h	equ	0xFE2
  3583                           fsr1l	equ	0xFE1
  3584                           indf2	equ	0xFDF
  3585                           postinc2	equ	0xFDE
  3586                           postdec2	equ	0xFDD
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591 ;; *************** function _grabRightIR *****************
  3592 ;; Defined at:
  3593 ;;		line 74 in file "IR_Reading.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3598 ;;  i               1   21[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  2   14[COMRAM] unsigned int 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3608 ;;      Params:         2       0       0       0
  3609 ;;      Locals:         3       0       0       0
  3610 ;;      Temps:          3       0       0       0
  3611 ;;      Totals:         8       0       0       0
  3612 ;;Total ram usage:        8 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    1
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_ScanIR
  3619 ;;		_ScanWithRange
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text17
  3624  000D22                     __ptext17:
  3625                           	opt stack 0
  3626  000D22                     _grabRightIR:
  3627                           	opt stack 28
  3628                           
  3629                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  3630                           
  3631                           ;incstack = 0
  3632  000D22  0E00               	movlw	0
  3633  000D24  6E15               	movwf	grabRightIR@IR_signal+1,c
  3634  000D26  0E00               	movlw	0
  3635  000D28  6E14               	movwf	grabRightIR@IR_signal,c
  3636                           
  3637                           ;IR_Reading.c: 77: unsigned char i=0;
  3638  000D2A  0E00               	movlw	0
  3639  000D2C  6E16               	movwf	grabRightIR@i,c
  3640                           
  3641                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  3642  000D2E  0E00               	movlw	0
  3643  000D30  6E16               	movwf	grabRightIR@i,c
  3644  000D32                     l1860:
  3645  000D32  0E03               	movlw	3
  3646  000D34  6416               	cpfsgt	grabRightIR@i,c
  3647  000D36  D001               	goto	l1864
  3648  000D38  D020               	goto	l1870
  3649  000D3A                     l1864:
  3650                           
  3651                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  3652  000D3A  5069               	movf	3945,w,c	;volatile
  3653  000D3C  6E11               	movwf	??_grabRightIR& (0+255),c
  3654  000D3E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  3655  000D40  0E06               	movlw	6
  3656  000D42                     u1225:
  3657  000D42  90D8               	bcf	status,0,c
  3658  000D44  3611               	rlcf	??_grabRightIR,f,c
  3659  000D46  3612               	rlcf	??_grabRightIR+1,f,c
  3660  000D48  2EE8               	decfsz	wreg,f,c
  3661  000D4A  D7FB               	goto	u1225
  3662  000D4C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  3663  000D50  90D8               	bcf	status,0,c
  3664  000D52  3213               	rrcf	??_grabRightIR+2,f,c
  3665  000D54  90D8               	bcf	status,0,c
  3666  000D56  3213               	rrcf	??_grabRightIR+2,f,c
  3667  000D58  5013               	movf	??_grabRightIR+2,w,c
  3668  000D5A  1211               	iorwf	??_grabRightIR,f,c
  3669  000D5C  0E00               	movlw	0
  3670  000D5E  1212               	iorwf	??_grabRightIR+1,f,c
  3671  000D60  5011               	movf	??_grabRightIR,w,c
  3672  000D62  2614               	addwf	grabRightIR@IR_signal,f,c
  3673  000D64  5012               	movf	??_grabRightIR+1,w,c
  3674  000D66  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3675                           
  3676                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3677  000D68  0E82               	movlw	130
  3678  000D6A  6E11               	movwf	??_grabRightIR& (0+255),c
  3679  000D6C  0EDE               	movlw	222
  3680  000D6E                     u1827:
  3681  000D6E  2EE8               	decfsz	wreg,f,c
  3682  000D70  D7FE               	goto	u1827
  3683  000D72  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3684  000D74  D7FC               	goto	u1827
  3685  000D76  2A16               	incf	grabRightIR@i,f,c
  3686  000D78  D7DC               	goto	l1860
  3687  000D7A                     l1870:
  3688                           
  3689                           ;IR_Reading.c: 83: }
  3690                           ;IR_Reading.c: 85: return IR_signal>>2;
  3691  000D7A  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3692  000D7E  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3693  000D82  90D8               	bcf	status,0,c
  3694  000D84  3212               	rrcf	??_grabRightIR+1,f,c
  3695  000D86  3211               	rrcf	??_grabRightIR,f,c
  3696  000D88  90D8               	bcf	status,0,c
  3697  000D8A  3212               	rrcf	??_grabRightIR+1,f,c
  3698  000D8C  3211               	rrcf	??_grabRightIR,f,c
  3699  000D8E  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3700  000D92  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3701  000D96  0012               	return	
  3702  000D98                     __end_of_grabRightIR:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           prodh	equ	0xFF4
  3706                           prodl	equ	0xFF3
  3707                           intcon	equ	0xFF2
  3708                           postinc0	equ	0xFEE
  3709                           wreg	equ	0xFE8
  3710                           indf1	equ	0xFE7
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           postdec2	equ	0xFDD
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _grabLeftIR *****************
  3721 ;; Defined at:
  3722 ;;		line 90 in file "IR_Reading.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3727 ;;  i               1   21[COMRAM] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  2   14[COMRAM] unsigned int 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3737 ;;      Params:         2       0       0       0
  3738 ;;      Locals:         3       0       0       0
  3739 ;;      Temps:          3       0       0       0
  3740 ;;      Totals:         8       0       0       0
  3741 ;;Total ram usage:        8 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    1
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_ScanIR
  3748 ;;		_ScanWithRange
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text18
  3753  000D98                     __ptext18:
  3754                           	opt stack 0
  3755  000D98                     _grabLeftIR:
  3756                           	opt stack 28
  3757                           
  3758                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3759                           
  3760                           ;incstack = 0
  3761  000D98  0E00               	movlw	0
  3762  000D9A  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3763  000D9C  0E00               	movlw	0
  3764  000D9E  6E14               	movwf	grabLeftIR@IR_signal,c
  3765                           
  3766                           ;IR_Reading.c: 93: unsigned char i=0;
  3767  000DA0  0E00               	movlw	0
  3768  000DA2  6E16               	movwf	grabLeftIR@i,c
  3769                           
  3770                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3771  000DA4  0E00               	movlw	0
  3772  000DA6  6E16               	movwf	grabLeftIR@i,c
  3773  000DA8                     l1844:
  3774  000DA8  0E03               	movlw	3
  3775  000DAA  6416               	cpfsgt	grabLeftIR@i,c
  3776  000DAC  D001               	goto	l1848
  3777  000DAE  D020               	goto	l1854
  3778  000DB0                     l1848:
  3779                           
  3780                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3781  000DB0  5067               	movf	3943,w,c	;volatile
  3782  000DB2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3783  000DB4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3784  000DB6  0E06               	movlw	6
  3785  000DB8                     u1195:
  3786  000DB8  90D8               	bcf	status,0,c
  3787  000DBA  3611               	rlcf	??_grabLeftIR,f,c
  3788  000DBC  3612               	rlcf	??_grabLeftIR+1,f,c
  3789  000DBE  2EE8               	decfsz	wreg,f,c
  3790  000DC0  D7FB               	goto	u1195
  3791  000DC2  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3792  000DC6  90D8               	bcf	status,0,c
  3793  000DC8  3213               	rrcf	??_grabLeftIR+2,f,c
  3794  000DCA  90D8               	bcf	status,0,c
  3795  000DCC  3213               	rrcf	??_grabLeftIR+2,f,c
  3796  000DCE  5013               	movf	??_grabLeftIR+2,w,c
  3797  000DD0  1211               	iorwf	??_grabLeftIR,f,c
  3798  000DD2  0E00               	movlw	0
  3799  000DD4  1212               	iorwf	??_grabLeftIR+1,f,c
  3800  000DD6  5011               	movf	??_grabLeftIR,w,c
  3801  000DD8  2614               	addwf	grabLeftIR@IR_signal,f,c
  3802  000DDA  5012               	movf	??_grabLeftIR+1,w,c
  3803  000DDC  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3804                           
  3805                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3806  000DDE  0E82               	movlw	130
  3807  000DE0  6E11               	movwf	??_grabLeftIR& (0+255),c
  3808  000DE2  0EDE               	movlw	222
  3809  000DE4                     u1837:
  3810  000DE4  2EE8               	decfsz	wreg,f,c
  3811  000DE6  D7FE               	goto	u1837
  3812  000DE8  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3813  000DEA  D7FC               	goto	u1837
  3814  000DEC  2A16               	incf	grabLeftIR@i,f,c
  3815  000DEE  D7DC               	goto	l1844
  3816  000DF0                     l1854:
  3817                           
  3818                           ;IR_Reading.c: 99: }
  3819                           ;IR_Reading.c: 101: return IR_signal>>2;
  3820  000DF0  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3821  000DF4  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3822  000DF8  90D8               	bcf	status,0,c
  3823  000DFA  3212               	rrcf	??_grabLeftIR+1,f,c
  3824  000DFC  3211               	rrcf	??_grabLeftIR,f,c
  3825  000DFE  90D8               	bcf	status,0,c
  3826  000E00  3212               	rrcf	??_grabLeftIR+1,f,c
  3827  000E02  3211               	rrcf	??_grabLeftIR,f,c
  3828  000E04  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3829  000E08  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3830  000E0C  0012               	return	
  3831  000E0E                     __end_of_grabLeftIR:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           indf1	equ	0xFE7
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           postdec2	equ	0xFDD
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _delay_tenth_s *****************
  3850 ;; Defined at:
  3851 ;;		line 19 in file "Movement.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  tenth_second    1    wreg     unsigned char 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3856 ;;  i               2   16[COMRAM] unsigned int 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;		None               void
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3866 ;;      Params:         0       0       0       0
  3867 ;;      Locals:         3       0       0       0
  3868 ;;      Temps:          1       0       0       0
  3869 ;;      Totals:         4       0       0       0
  3870 ;;Total ram usage:        4 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;;		_ScanIR
  3878 ;;		_ScanWithRange
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text19
  3883  000F4A                     __ptext19:
  3884                           	opt stack 0
  3885  000F4A                     _delay_tenth_s:
  3886                           	opt stack 29
  3887                           
  3888                           ;incstack = 0
  3889                           ;delay_tenth_s@tenth_seconds stored from wreg
  3890  000F4A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3891                           
  3892                           ;Movement.c: 20: unsigned int i=0;
  3893  000F4C  0E00               	movlw	0
  3894  000F4E  6E12               	movwf	delay_tenth_s@i+1,c
  3895  000F50  0E00               	movlw	0
  3896  000F52  6E11               	movwf	delay_tenth_s@i,c
  3897                           
  3898                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3899  000F54  0E00               	movlw	0
  3900  000F56  6E12               	movwf	delay_tenth_s@i+1,c
  3901  000F58  0E01               	movlw	1
  3902  000F5A  6E11               	movwf	delay_tenth_s@i,c
  3903  000F5C  D009               	goto	l1828
  3904  000F5E                     l1824:
  3905                           
  3906                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3907  000F5E  0E82               	movlw	130
  3908  000F60  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3909  000F62  0EDE               	movlw	222
  3910  000F64                     u1847:
  3911  000F64  2EE8               	decfsz	wreg,f,c
  3912  000F66  D7FE               	goto	u1847
  3913  000F68  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3914  000F6A  D7FC               	goto	u1847
  3915  000F6C  4A11               	infsnz	delay_tenth_s@i,f,c
  3916  000F6E  2A12               	incf	delay_tenth_s@i+1,f,c
  3917  000F70                     l1828:
  3918  000F70  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3919  000F72  0D02               	mullw	2
  3920  000F74  5011               	movf	delay_tenth_s@i,w,c
  3921  000F76  5CF3               	subwf	prodl,w,c
  3922  000F78  5012               	movf	delay_tenth_s@i+1,w,c
  3923  000F7A  58F4               	subwfb	prodh,w,c
  3924  000F7C  A0D8               	btfss	status,0,c
  3925  000F7E  0012               	return	
  3926  000F80  D7EE               	goto	l1824
  3927  000F82                     __end_of_delay_tenth_s:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           intcon	equ	0xFF2
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           indf1	equ	0xFE7
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _InterruptHandlerHigh *****************
  3946 ;; Defined at:
  3947 ;;		line 17 in file "main.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;		None
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;		None               void
  3954 ;; Registers used:
  3955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3961 ;;      Params:         0       0       0       0
  3962 ;;      Locals:         0       0       0       0
  3963 ;;      Temps:         14       0       0       0
  3964 ;;      Totals:        14       0       0       0
  3965 ;;Total ram usage:       14 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		Interrupt level 2
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	intcode
  3975  000008                     __pintcode:
  3976                           	opt stack 0
  3977  000008                     _InterruptHandlerHigh:
  3978                           	opt stack 25
  3979                           
  3980                           ;incstack = 0
  3981  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3982  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3983  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3984  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3985  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3986  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3987  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3988  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3989  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3990  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3991  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3992  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3993  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3994  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3995  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3996                           
  3997                           ;main.c: 19: if (PIR1bits.RCIF) {
  3998  000042  AA9E               	btfss	3998,5,c	;volatile
  3999  000044  D016               	goto	i2l60
  4000                           
  4001                           ;main.c: 20: ReceivedString[i]=RCREG;
  4002  000046  504D               	movf	_i,w,c	;volatile
  4003  000048  0D01               	mullw	1
  4004  00004A  0E83               	movlw	low _ReceivedString
  4005  00004C  24F3               	addwf	prodl,w,c
  4006  00004E  6ED9               	movwf	fsr2l,c
  4007  000050  0E00               	movlw	high _ReceivedString
  4008  000052  20F4               	addwfc	prodh,w,c
  4009  000054  6EDA               	movwf	fsr2h,c
  4010  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  4011                           
  4012                           ;main.c: 21: RFID_Read=1;
  4013  00005A  0E01               	movlw	1
  4014  00005C  0100               	movlb	0	; () banked
  4015  00005E  6F82               	movwf	_RFID_Read& (0+255),b	;volatile
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;main.c: 22: if (i==15){
  4019  000060  0E0F               	movlw	15
  4020  000062  184D               	xorwf	_i,w,c	;volatile
  4021  000064  A4D8               	btfss	status,2,c
  4022  000066  D003               	goto	i2l2220
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;main.c: 23: i=0;
  4026  000068  0E00               	movlw	0
  4027  00006A  6E4D               	movwf	_i,c	;volatile
  4028                           
  4029                           ;main.c: 24: }else{
  4030  00006C  D001               	goto	i2l2222
  4031  00006E                     i2l2220:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;main.c: 25: i++;
  4035  00006E  2A4D               	incf	_i,f,c	;volatile
  4036  000070                     i2l2222:
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;main.c: 26: }
  4040                           ;main.c: 27: PIR1bits.RCIF=0;
  4041  000070  9A9E               	bcf	3998,5,c	;volatile
  4042  000072                     i2l60:
  4043  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  4044  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  4045  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  4046  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  4047  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  4048  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  4049  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  4050  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  4051  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  4052  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  4053  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  4054  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  4055  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  4056  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  4057  0000AA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4058  0000AC  0011               	retfie		f
  4059  0000AE                     __end_of_InterruptHandlerHigh:
  4060                           	opt stack 0
  4061  0000                     pclatu	equ	0xFFB
  4062                           pclath	equ	0xFFA
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           prodh	equ	0xFF4
  4068                           prodl	equ	0xFF3
  4069                           intcon	equ	0xFF2
  4070                           postinc0	equ	0xFEE
  4071                           fsr0h	equ	0xFEA
  4072                           fsr0l	equ	0xFE9
  4073                           wreg	equ	0xFE8
  4074                           indf1	equ	0xFE7
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           pclatu	equ	0xFFB
  4084                           pclath	equ	0xFFA
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           postinc0	equ	0xFEE
  4093                           fsr0h	equ	0xFEA
  4094                           fsr0l	equ	0xFE9
  4095                           wreg	equ	0xFE8
  4096                           indf1	equ	0xFE7
  4097                           fsr1h	equ	0xFE2
  4098                           fsr1l	equ	0xFE1
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           
  4106                           	psect	rparam
  4107  0000                     pclatu	equ	0xFFB
  4108                           pclath	equ	0xFFA
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           prodh	equ	0xFF4
  4114                           prodl	equ	0xFF3
  4115                           intcon	equ	0xFF2
  4116                           postinc0	equ	0xFEE
  4117                           fsr0h	equ	0xFEA
  4118                           fsr0l	equ	0xFE9
  4119                           wreg	equ	0xFE8
  4120                           indf1	equ	0xFE7
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130                           	psect	temp
  4131  00004E                     btemp:
  4132                           	opt stack 0
  4133  00004E                     	ds	1
  4134  0000                     int$flags	set	btemp
  4135                           pclatu	equ	0xFFB
  4136                           pclath	equ	0xFFA
  4137                           tblptru	equ	0xFF8
  4138                           tblptrh	equ	0xFF7
  4139                           tblptrl	equ	0xFF6
  4140                           tablat	equ	0xFF5
  4141                           prodh	equ	0xFF4
  4142                           prodl	equ	0xFF3
  4143                           intcon	equ	0xFF2
  4144                           postinc0	equ	0xFEE
  4145                           fsr0h	equ	0xFEA
  4146                           fsr0l	equ	0xFE9
  4147                           wreg	equ	0xFE8
  4148                           indf1	equ	0xFE7
  4149                           fsr1h	equ	0xFE2
  4150                           fsr1l	equ	0xFE1
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           postdec2	equ	0xFDD
  4154                           fsr2h	equ	0xFDA
  4155                           fsr2l	equ	0xFD9
  4156                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      77
    BANK0           160     34      51
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               139   139      0   63709
                                             74 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2947
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       28    23      5   28174
                                             46 COMRAM    28    23      5
                            ___awdiv
                      _delay_tenth_s
                     _fullSpeedAhead
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   23286
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8198
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    8838
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4951
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2603
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1531
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     650
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      33       5       31.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      4D       1       81.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      80       3        0.0%
DATA                 0      0      80      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 21:11:53 2018

                        ?_grabRightIR 000F                                     _i 004D  
                                  l63 061C                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 0060  
                                 l124 0AFE                                   l154 0E60  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                                  l2010 0334  
                                l2004 0330                                  l2030 03C8  
                                l2104 057A                                  l2130 08F2  
                                l2018 0398                                  l2124 08EE  
                                l2060 0482                                  l2300 0776  
                                l2038 042C                                  l2046 0442  
                                l2206 0C0A                                  l2144 0944  
                                l2312 07BE                                  l2138 0940  
                                l2090 0520                                  l2074 04BE  
                                l2306 07AE                                  l2250 0622  
                                l2172 09E6                                  l2156 0994  
                                l2084 051C                                  l2308 07B4  
                                l2332 0828                                  l2166 09E2  
                                l2318 07DA                                  l2326 081C  
                                l2270 06A0                                  l2184 0A22  
                                l2328 0822                                  l1810 0C40  
                                l1802 0C10                                  l2194 0BB2  
                                l2282 06F4                                  l2274 06C4  
                                l1750 0CD8                                  l1806 0C28  
                                l2198 0BBA                                  l2278 06E6  
                                l1824 0F5E                                  l1752 0CE0  
                                l1744 0CC2                                  l1816 0C60  
                                l2296 076C                                  l2288 0718  
                                l1770 0D18                                  l1762 0D00  
                                l1754 0CE4                                  l1738 0CB2  
                                l1914 0F26                                  l1828 0F70  
                                l1844 0DA8                                  l1860 0D32  
                                l1780 0AD6                                  l1854 0DF0  
                                l1870 0D7A                                  l1766 0D0A  
                                l1918 0F38                                  l1848 0DB0  
                                l1864 0D3A                                  l1792 0E40  
                                l1784 0E10                                  l1928 0FFE  
                                l1788 0E28                                  l1972 0216  
                                l1964 01BE                                  l1990 029A  
                                l1984 0296                                  l1968 01EA  
                                l1998 02FE                                  u1064 0A9A  
                                u1225 0D42                                  u1065 0A96  
                                u1074 0AF2                                  u1075 0AEE  
                                u1085 0B4A                                  _LATB 000F8A  
                                u1265 0FFA                                  u1266 0FFC  
                                u1195 0DB8                                  u1700 074C  
                                u1285 100C                                  u1286 100E  
                                u1702 074E                                  u1807 0C5A  
                                u1817 0E5A                                  u1690 073A  
                                u1827 0D6E                                  u1692 073C  
                                u1837 0DE4                                  u1847 0F64  
                                u1797 0F2C                                  i2l60 0072  
                                _main 057E                         main@ScanAngle 006C  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 004E                                  _stop 0C0E  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00AE  
                      delay_s@seconds 0010                          ___param_bank 000010  
                               ?_main 0001                       __end_of___awdiv 0D22  
                               ?_stop 0026                       ___awdiv@divisor 0017  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0016  
                       _initRFID$1307 000F                       ___awdiv@counter 0019  
                               _RCREG 000FAE                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 0F4A                                 main@i 006F  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 04CC                       __initialization 1078  
                        __end_of_main 0842                          __end_of_stop 0C9E  
                      delay_tenth_s@i 0011                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 1010                   VerifySignal@hexByte 0018  
                              ??_main 004B                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                        ?_setMotorPWM 001D                __size_of_fullSpeedBack 0036  
                    ___awdiv@dividend 0015                                i2l2220 006E  
                              i2l2222 0070                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 0F82                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B                                _ScanIR 0842  
                              ___wmul 1010                             ??___awdiv 0019  
                    __end_of_initRFID 1078                                _initIR 1036  
                __size_of_grabRightIR 0076                                clear_0 107E  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                              main@mL 0070                                main@mR 0079  
                      ??_initMotorPWM 000F                         _ScanWithRange 00B2  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0F12  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 1086  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 0F82                        ?_ScanWithRange 002F  
                VerifySignal@checksum 0017         __size_of_InterruptHandlerHigh 00A6  
          delay_tenth_s@tenth_seconds 0010                            __pbssBANK0 0082  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 0D98  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                        _enableSensor 0FEA                    __size_of_turnRight 004A  
                __end_of_initMotorPWM 0FEA                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 01E4  
                             ___awdiv 0C9E                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 1078  
                     ??_ScanWithRange 0034                               _delay_s 0F12  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 057E                               __ptext1 1058  
                             __ptext2 0FB8                               __ptext3 1036  
                             __ptext4 0F82                               __ptext5 0FEA  
                             __ptext6 0F12                               __ptext7 0B5A  
                             __ptext8 00B2                               __ptext9 0842  
                       ?_VerifySignal 000F                  end_of_initialization 1086  
                  setMotorPWM@PWMduty 0024                            ??_initRFID 000F  
                       __Lmediumconst 0000                    ScanIR@SensorResult 003B  
                     ??_fullSpeedBack 002F                             _RFID_Read 0082  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0EC8  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0011                      fullSpeedAhead@mL 0026  
                    fullSpeedAhead@mR 0028         ScanIR@DirectionFoundTolerance 0039  
                           _TXSTAbits 000FAC                         ??_grabRightIR 0011  
                      __end_of_ScanIR 0A26                        _fullSpeedAhead 0E0E  
                      _ReceivedString 0083                        __end_of___wmul 1036  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1058  
              __size_of_delay_tenth_s 0038                   start_initialization 1078  
                  VerifySignal@Signal 000F                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00AE                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 0E7E                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 0D98                          _initMotorPWM 0FB8  
                         __pbssCOMRAM 004D                         __pcstackBANK0 0060  
    ScanWithRange@DirectionFoundLimit 003B                         _delay_tenth_s 0F4A  
                   __size_of_initRFID 0020     ScanWithRange@ClearSignalTolerance 0039  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                __end_of_VerifySignal 0C0E                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 0043            ScanWithRange@SensorResultL 003F  
          ScanWithRange@SensorResultR 0047                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 0D22                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 057E  
                        setMotorPWM@m 001D                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 002F                              ScanIR@mR 0031  
                        ??_grabLeftIR 0011                             _turnRight 0E7E  
          ScanIR@ClearSignalTolerance 0035                   __end_of_setMotorPWM 0B5A  
                            __Hrparam 0000                              __Lrparam 0000  
               __end_of_fullSpeedBack 0FB8                    __end_of_grabLeftIR 0E0E  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                          ?_turnRight 002B                              __ptext10 0E7E  
                            __ptext11 0EC8                              __ptext12 0C0E  
                            __ptext13 0E0E                              __ptext14 0A26  
                            __ptext15 1010                              __ptext16 0C9E  
                            __ptext17 0D22                              __ptext18 0D98  
                            __ptext19 0F4A                       ??_delay_tenth_s 000F  
                            _initRFID 1058                         __size_of_main 02C4  
           ScanWithRange@ResultFalseC 0037                    main@DirectionFound 006E  
           ScanWithRange@ResultFalseL 0036             ScanWithRange@ResultFalseR 0038  
                       __size_of_stop 0090                            turnLeft@mL 002B  
                          turnLeft@mR 002D                 __size_of_VerifySignal 00B4  
                            delay_s@i 0011                              int$flags 004E  
                            main@mode 006D                              main@test 006A  
                            _turnLeft 0EC8                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                         VerifySignal@i 001A  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 0A26                          _VerifySignal 0B5A  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 003D                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
