

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 13 23:29:34 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24  0000                     _ANSEL0bits	set	4024
    25  0000                     _BAUDCONbits	set	4010
    26  0000                     _CAP1BUFH	set	3945
    27  0000                     _CAP1BUFL	set	3944
    28  0000                     _CAP1CON	set	3939
    29  0000                     _INTCONbits	set	4082
    30  0000                     _IPR1bits	set	3999
    31  0000                     _LATAbits	set	3977
    32  0000                     _LATB	set	3978
    33  0000                     _LATCbits	set	3979
    34  0000                     _LATDbits	set	3980
    35  0000                     _OSCCON	set	4051
    36  0000                     _OSCCONbits	set	4051
    37  0000                     _PIE1bits	set	3997
    38  0000                     _PIR1bits	set	3998
    39  0000                     _PTCON0	set	3967
    40  0000                     _PTCON1	set	3966
    41  0000                     _PTPERH	set	3962
    42  0000                     _PTPERL	set	3963
    43  0000                     _PWMCON0	set	3951
    44  0000                     _PWMCON1	set	3950
    45  0000                     _RCONbits	set	4048
    46  0000                     _RCREG	set	4014
    47  0000                     _RCSTAbits	set	4011
    48  0000                     _SPBRG	set	4015
    49  0000                     _SPBRGH	set	4016
    50  0000                     _T5CON	set	4023
    51  0000                     _TRISAbits	set	3986
    52  0000                     _TRISBbits	set	3987
    53  0000                     _TRISC	set	3988
    54  0000                     _TRISCbits	set	3988
    55  0000                     _TRISDbits	set	3989
    56  0000                     _TXREG	set	4013
    57  0000                     _TXSTAbits	set	4012
    58  0000                     _PDC0H	set	3960
    59  0000                     _PDC0L	set	3961
    60  0000                     _PDC1H	set	3958
    61  0000                     _PDC1L	set	3959
    62                           
    63                           ; #config settings
    64  0000                     
    65                           	psect	cinit
    66  0005E0                     __pcinit:
    67                           	opt stack 0
    68  0005E0                     start_initialization:
    69                           	opt stack 0
    70  0005E0                     __initialization:
    71                           	opt stack 0
    72                           
    73                           ; Clear objects allocated to BANK0 (16 bytes)
    74  0005E0  EE00  F080         	lfsr	0,__pbssBANK0
    75  0005E4  0E10               	movlw	16
    76  0005E6                     clear_0:
    77  0005E6  6AEE               	clrf	postinc0,c
    78  0005E8  06E8               	decf	wreg,f,c
    79  0005EA  E1FD               	bnz	clear_0
    80                           
    81                           ; Clear objects allocated to COMRAM (1 bytes)
    82  0005EC  6A31               	clrf	__pbssCOMRAM& (0+255),c
    83  0005EE                     end_of_initialization:
    84                           	opt stack 0
    85  0005EE                     __end_of__initialization:
    86                           	opt stack 0
    87  0005EE  9032               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    88  0005F0  9232               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    89  0005F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
    90  0005F4  6EF8               	movwf	tblptru,c
    91  0005F6  0100               	movlb	0
    92  0005F8  EF56  F000         	goto	_main	;jump to C main() function
    93                           tblptru	equ	0xFF8
    94                           postinc0	equ	0xFEE
    95                           wreg	equ	0xFE8
    96                           
    97                           	psect	bssCOMRAM
    98  000031                     __pbssCOMRAM:
    99                           	opt stack 0
   100  000031                     _i:
   101                           	opt stack 0
   102  000031                     	ds	1
   103                           tblptru	equ	0xFF8
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssBANK0
   108  000080                     __pbssBANK0:
   109                           	opt stack 0
   110  000080                     _ReceivedString:
   111                           	opt stack 0
   112  000080                     	ds	16
   113                           tblptru	equ	0xFF8
   114                           postinc0	equ	0xFEE
   115                           wreg	equ	0xFE8
   116                           
   117                           	psect	cstackBANK0
   118  000060                     __pcstackBANK0:
   119                           	opt stack 0
   120  000060                     main@Message:
   121                           	opt stack 0
   122                           
   123                           ; 10 bytes @ 0x0
   124  000060                     	ds	10
   125  00006A                     main@test:
   126                           	opt stack 0
   127                           
   128                           ; 2 bytes @ 0xA
   129  00006A                     	ds	2
   130  00006C                     main@mode:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0xC
   134  00006C                     	ds	1
   135  00006D                     main@i:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0xD
   139  00006D                     	ds	1
   140  00006E                     main@motorL:
   141                           	opt stack 0
   142                           
   143                           ; 9 bytes @ 0xE
   144  00006E                     	ds	9
   145  000077                     main@motorR:
   146                           	opt stack 0
   147                           
   148                           ; 9 bytes @ 0x17
   149  000077                     	ds	9
   150                           tblptru	equ	0xFF8
   151                           postinc0	equ	0xFEE
   152                           wreg	equ	0xFE8
   153                           
   154                           	psect	cstackCOMRAM
   155  000001                     __pcstackCOMRAM:
   156                           	opt stack 0
   157  000001                     ??_InterruptHandlerHigh:
   158  000001                     
   159                           ; 0 bytes @ 0x0
   160  000001                     	ds	14
   161  00000F                     ??_delay_tenth_s:
   162  00000F                     ?___wmul:
   163                           	opt stack 0
   164  00000F                     _initRFID$1264:
   165                           	opt stack 0
   166  00000F                     VerifySignal@Signal:
   167                           	opt stack 0
   168  00000F                     ___wmul@multiplier:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0xE
   172  00000F                     	ds	1
   173  000010                     delay_tenth_s@tenth_seconds:
   174                           	opt stack 0
   175                           
   176                           ; 1 bytes @ 0xF
   177  000010                     	ds	1
   178  000011                     ??_VerifySignal:
   179  000011                     delay_tenth_s@i:
   180                           	opt stack 0
   181  000011                     ___wmul@multiplicand:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x10
   185  000011                     	ds	2
   186  000013                     ___wmul@product:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x12
   190  000013                     	ds	2
   191  000015                     ?___awdiv:
   192                           	opt stack 0
   193  000015                     ___awdiv@dividend:
   194                           	opt stack 0
   195                           
   196                           ; 2 bytes @ 0x14
   197  000015                     	ds	2
   198  000017                     VerifySignal@checksum:
   199                           	opt stack 0
   200  000017                     ___awdiv@divisor:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x16
   204  000017                     	ds	1
   205  000018                     VerifySignal@hexByte:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x17
   209  000018                     	ds	1
   210  000019                     ___awdiv@counter:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x18
   214  000019                     	ds	1
   215  00001A                     VerifySignal@i:
   216                           	opt stack 0
   217  00001A                     ___awdiv@sign:
   218                           	opt stack 0
   219                           
   220                           ; 1 bytes @ 0x19
   221  00001A                     	ds	1
   222  00001B                     ___awdiv@quotient:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x1A
   226  00001B                     	ds	2
   227  00001D                     setMotorPWM@m:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x1C
   231  00001D                     	ds	2
   232  00001F                     ??_setMotorPWM:
   233                           
   234                           ; 0 bytes @ 0x1E
   235  00001F                     	ds	5
   236  000024                     setMotorPWM@PWMduty:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x23
   240  000024                     	ds	2
   241  000026                     stop@mL:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x25
   245  000026                     	ds	2
   246  000028                     stop@mR:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x27
   250  000028                     	ds	2
   251  00002A                     ScanWithRange@mL:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x29
   255  00002A                     	ds	2
   256  00002C                     ScanWithRange@mR:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2B
   260  00002C                     	ds	2
   261  00002E                     ScanWithRange@tenth_seconds:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x2D
   265  00002E                     	ds	1
   266  00002F                     ??_main:
   267                           
   268                           ; 0 bytes @ 0x2E
   269  00002F                     	ds	2
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   276 ;;
   277 ;; *************** function _main *****************
   278 ;; Defined at:
   279 ;;		line 29 in file "main.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;  PathTaken     100    0        unsigned char [100]
   284 ;;  Message        10    0[BANK0 ] unsigned char [10]
   285 ;;  motorR          9   23[BANK0 ] struct DC_motor
   286 ;;  motorL          9   14[BANK0 ] struct DC_motor
   287 ;;  SignalStreng    3    0        unsigned char [3]
   288 ;;  test            2   10[BANK0 ] unsigned int 
   289 ;;  i               1   13[BANK0 ] unsigned char 
   290 ;;  mode            1   12[BANK0 ] unsigned char 
   291 ;; Return value:  Size  Location     Type
   292 ;;		None               void
   293 ;; Registers used:
   294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   295 ;; Tracked objects:
   296 ;;		On entry : 0/0
   297 ;;		On exit  : 0/0
   298 ;;		Unchanged: 0/0
   299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   300 ;;      Params:         0       0       0       0
   301 ;;      Locals:         0      32       0       0
   302 ;;      Temps:          2       0       0       0
   303 ;;      Totals:         2      32       0       0
   304 ;;Total ram usage:       34 bytes
   305 ;; Hardware stack levels required when called:    5
   306 ;; This function calls:
   307 ;;		_ScanWithRange
   308 ;;		_VerifySignal
   309 ;;		_initMotorPWM
   310 ;;		_initRFID
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317  0000AC                     __ptext0:
   318                           	opt stack 0
   319  0000AC                     _main:
   320                           	opt stack 26
   321                           
   322                           ;main.c: 32: unsigned char Message[10];
   323                           ;main.c: 33: unsigned char i=0;
   324                           
   325                           ;incstack = 0
   326  0000AC  0E00               	movlw	0
   327  0000AE  0100               	movlb	0	; () banked
   328  0000B0  6F6D               	movwf	main@i& (0+255),b
   329                           
   330                           ;main.c: 34: unsigned char mode=0;
   331  0000B2  0E00               	movlw	0
   332  0000B4  0100               	movlb	0	; () banked
   333  0000B6  6F6C               	movwf	main@mode& (0+255),b
   334                           
   335                           ;main.c: 35: unsigned char SignalStrength[3];
   336                           ;main.c: 36: char PathTaken[100];
   337                           ;main.c: 37: unsigned int test=0;
   338  0000B8  0E00               	movlw	0
   339  0000BA  0100               	movlb	0	; () banked
   340  0000BC  6F6B               	movwf	(main@test+1)& (0+255),b
   341  0000BE  0E00               	movlw	0
   342  0000C0  6F6A               	movwf	main@test& (0+255),b
   343                           
   344                           ; BSR set to: 0
   345                           ;main.c: 40: INTCONbits.GIEH = 1;
   346  0000C2  8EF2               	bsf	intcon,7,c	;volatile
   347                           
   348                           ; BSR set to: 0
   349                           ;main.c: 41: RCONbits.IPEN = 1;
   350  0000C4  8ED0               	bsf	4048,7,c	;volatile
   351                           
   352                           ; BSR set to: 0
   353                           ;main.c: 42: INTCONbits.GIEL = 1;
   354  0000C6  8CF2               	bsf	intcon,6,c	;volatile
   355                           
   356                           ; BSR set to: 0
   357                           ;main.c: 43: INTCONbits.INT0IE = 1;
   358  0000C8  88F2               	bsf	intcon,4,c	;volatile
   359                           
   360                           ; BSR set to: 0
   361                           ;main.c: 44: INTCONbits.PEIE = 1;
   362  0000CA  8CF2               	bsf	intcon,6,c	;volatile
   363                           
   364                           ; BSR set to: 0
   365                           ;main.c: 46: IPR1bits.RCIP=1;
   366  0000CC  8A9F               	bsf	3999,5,c	;volatile
   367                           
   368                           ; BSR set to: 0
   369                           ;main.c: 47: PIE1bits.RCIE=1;
   370  0000CE  8A9D               	bsf	3997,5,c	;volatile
   371                           
   372                           ;main.c: 50: struct DC_motor motorL, motorR;
   373                           ;main.c: 51: motorL.power=0;
   374  0000D0  0E00               	movlw	0
   375  0000D2  0100               	movlb	0	; () banked
   376  0000D4  6F6E               	movwf	main@motorL& (0+255),b
   377                           
   378                           ;main.c: 52: motorL.direction=1;
   379  0000D6  0E01               	movlw	1
   380  0000D8  0100               	movlb	0	; () banked
   381  0000DA  6F6F               	movwf	(main@motorL+1)& (0+255),b
   382                           
   383                           ; BSR set to: 0
   384                           ;main.c: 53: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   385  0000DC  0E79               	movlw	121
   386  0000DE  0100               	movlb	0	; () banked
   387  0000E0  6F70               	movwf	(main@motorL+2)& (0+255),b
   388  0000E2  0E0F               	movlw	15
   389  0000E4  0100               	movlb	0	; () banked
   390  0000E6  6F71               	movwf	(main@motorL+3)& (0+255),b
   391                           
   392                           ; BSR set to: 0
   393                           ;main.c: 54: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   394  0000E8  0E78               	movlw	120
   395  0000EA  0100               	movlb	0	; () banked
   396  0000EC  6F72               	movwf	(main@motorL+4)& (0+255),b
   397  0000EE  0E0F               	movlw	15
   398  0000F0  0100               	movlb	0	; () banked
   399  0000F2  6F73               	movwf	(main@motorL+5)& (0+255),b
   400                           
   401                           ;main.c: 55: motorL.dir_pin=0;
   402  0000F4  0E00               	movlw	0
   403  0000F6  0100               	movlb	0	; () banked
   404  0000F8  6F74               	movwf	(main@motorL+6)& (0+255),b
   405                           
   406                           ;main.c: 56: motorL.PWMperiod=199;
   407  0000FA  0E00               	movlw	0
   408  0000FC  0100               	movlb	0	; () banked
   409  0000FE  6F76               	movwf	(main@motorL+8)& (0+255),b
   410  000100  0EC7               	movlw	199
   411  000102  6F75               	movwf	(main@motorL+7)& (0+255),b
   412                           
   413                           ;main.c: 58: motorR.power=0;
   414  000104  0E00               	movlw	0
   415  000106  0100               	movlb	0	; () banked
   416  000108  6F77               	movwf	main@motorR& (0+255),b
   417                           
   418                           ;main.c: 59: motorR.direction=1;
   419  00010A  0E01               	movlw	1
   420  00010C  0100               	movlb	0	; () banked
   421  00010E  6F78               	movwf	(main@motorR+1)& (0+255),b
   422                           
   423                           ; BSR set to: 0
   424                           ;main.c: 60: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   425  000110  0E77               	movlw	119
   426  000112  0100               	movlb	0	; () banked
   427  000114  6F79               	movwf	(main@motorR+2)& (0+255),b
   428  000116  0E0F               	movlw	15
   429  000118  0100               	movlb	0	; () banked
   430  00011A  6F7A               	movwf	(main@motorR+3)& (0+255),b
   431                           
   432                           ; BSR set to: 0
   433                           ;main.c: 61: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   434  00011C  0E76               	movlw	118
   435  00011E  0100               	movlb	0	; () banked
   436  000120  6F7B               	movwf	(main@motorR+4)& (0+255),b
   437  000122  0E0F               	movlw	15
   438  000124  0100               	movlb	0	; () banked
   439  000126  6F7C               	movwf	(main@motorR+5)& (0+255),b
   440                           
   441                           ;main.c: 62: motorR.dir_pin=2;
   442  000128  0E02               	movlw	2
   443  00012A  0100               	movlb	0	; () banked
   444  00012C  6F7D               	movwf	(main@motorR+6)& (0+255),b
   445                           
   446                           ;main.c: 63: motorR.PWMperiod=199;
   447  00012E  0E00               	movlw	0
   448  000130  0100               	movlb	0	; () banked
   449  000132  6F7F               	movwf	(main@motorR+8)& (0+255),b
   450  000134  0EC7               	movlw	199
   451  000136  6F7E               	movwf	(main@motorR+7)& (0+255),b
   452                           
   453                           ;main.c: 65: OSCCON = 0x72;
   454  000138  0E72               	movlw	114
   455  00013A  6ED3               	movwf	4051,c	;volatile
   456  00013C                     l45:
   457  00013C  B4D3               	btfsc	4051,2,c	;volatile
   458  00013E  D06D               	goto	l1790
   459  000140  D7FD               	goto	l45
   460  000142                     l1754:
   461                           
   462                           ;main.c: 73: initMotorPWM();
   463  000142  ECB4  F002         	call	_initMotorPWM	;wreg free
   464                           
   465                           ;main.c: 74: initRFID();
   466  000146  ECE0  F002         	call	_initRFID	;wreg free
   467                           
   468                           ;main.c: 76: mode = 1;
   469  00014A  0E01               	movlw	1
   470  00014C  0100               	movlb	0	; () banked
   471  00014E  6F6C               	movwf	main@mode& (0+255),b
   472                           
   473                           ;main.c: 77: break;
   474  000150  D064               	goto	l1790
   475  000152                     l1758:
   476                           
   477                           ; BSR set to: 0
   478                           ;main.c: 90: ScanWithRange(&motorL, &motorR, 3);
   479  000152  0E6E               	movlw	low main@motorL
   480  000154  6E2A               	movwf	ScanWithRange@mL,c
   481  000156  0E00               	movlw	high main@motorL
   482  000158  6E2B               	movwf	ScanWithRange@mL+1,c
   483  00015A  0E77               	movlw	low main@motorR
   484  00015C  6E2C               	movwf	ScanWithRange@mR,c
   485  00015E  0E00               	movlw	high main@motorR
   486  000160  6E2D               	movwf	ScanWithRange@mR+1,c
   487  000162  0E03               	movlw	3
   488  000164  6E2E               	movwf	ScanWithRange@tenth_seconds,c
   489  000166  ECFE  F002         	call	_ScanWithRange	;wreg free
   490                           
   491                           ;main.c: 91: break;
   492  00016A  D057               	goto	l1790
   493  00016C                     l1760:
   494                           
   495                           ;main.c: 96: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   496  00016C  0E03               	movlw	3
   497  00016E  0100               	movlb	0	; () banked
   498  000170  198F               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   499  000172  A4D8               	btfss	status,2,c
   500  000174  D002               	goto	u1020
   501  000176  0E01               	movlw	1
   502  000178  D001               	goto	u1022
   503  00017A                     u1020:
   504  00017A  0E00               	movlw	0
   505  00017C                     u1022:
   506  00017C  6E2F               	movwf	??_main& (0+255),c
   507  00017E  0E02               	movlw	2
   508  000180  0100               	movlb	0	; () banked
   509  000182  1980               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   510  000184  A4D8               	btfss	status,2,c
   511  000186  D002               	goto	u1030
   512  000188  0E01               	movlw	1
   513  00018A  D001               	goto	u1032
   514  00018C                     u1030:
   515  00018C  0E00               	movlw	0
   516  00018E                     u1032:
   517  00018E  142F               	andwf	??_main,w,c
   518  000190  A0E8               	btfss	wreg,0,c
   519  000192  D043               	goto	l1790
   520                           
   521                           ; BSR set to: 0
   522                           ;main.c: 97: if (VerifySignal(ReceivedString)){
   523  000194  0E80               	movlw	low _ReceivedString
   524  000196  6E0F               	movwf	VerifySignal@Signal,c
   525  000198  0E00               	movlw	high _ReceivedString
   526  00019A  6E10               	movwf	VerifySignal@Signal+1,c
   527  00019C  ECB4  F001         	call	_VerifySignal	;wreg free
   528  0001A0  0900               	iorlw	0
   529  0001A2  B4D8               	btfsc	status,2,c
   530  0001A4  D03A               	goto	l1790
   531                           
   532                           ;main.c: 99: for (i=0; i<10; i++){
   533  0001A6  0E00               	movlw	0
   534  0001A8  0100               	movlb	0	; () banked
   535  0001AA  6F6D               	movwf	main@i& (0+255),b
   536  0001AC                     l1766:
   537                           
   538                           ; BSR set to: 0
   539  0001AC  0E09               	movlw	9
   540  0001AE  0100               	movlb	0	; () banked
   541  0001B0  656D               	cpfsgt	main@i& (0+255),b
   542  0001B2  D001               	goto	l1770
   543  0001B4  D01C               	goto	l1776
   544  0001B6                     l1770:
   545                           
   546                           ; BSR set to: 0
   547                           ;main.c: 100: Message[i] = ReceivedString[i+1];
   548  0001B6  0100               	movlb	0	; () banked
   549  0001B8  516D               	movf	main@i& (0+255),w,b
   550  0001BA  6E2F               	movwf	??_main& (0+255),c
   551  0001BC  6A30               	clrf	(??_main+1)& (0+255),c
   552  0001BE  0E01               	movlw	1
   553  0001C0  262F               	addwf	??_main,f,c
   554  0001C2  0E00               	movlw	0
   555  0001C4  2230               	addwfc	??_main+1,f,c
   556  0001C6  0E80               	movlw	low _ReceivedString
   557  0001C8  242F               	addwf	??_main,w,c
   558  0001CA  6ED9               	movwf	fsr2l,c
   559  0001CC  0E00               	movlw	high _ReceivedString
   560  0001CE  2030               	addwfc	??_main+1,w,c
   561  0001D0  6EDA               	movwf	fsr2h,c
   562  0001D2  0100               	movlb	0	; () banked
   563  0001D4  516D               	movf	main@i& (0+255),w,b
   564  0001D6  0D01               	mullw	1
   565  0001D8  0E60               	movlw	low main@Message
   566  0001DA  24F3               	addwf	prodl,w,c
   567  0001DC  6EE1               	movwf	fsr1l,c
   568  0001DE  0E00               	movlw	high main@Message
   569  0001E0  20F4               	addwfc	prodh,w,c
   570  0001E2  6EE2               	movwf	fsr1h,c
   571  0001E4  CFDF FFE7          	movff	indf2,indf1
   572                           
   573                           ; BSR set to: 0
   574  0001E8  0100               	movlb	0	; () banked
   575  0001EA  2B6D               	incf	main@i& (0+255),f,b
   576  0001EC  D7DF               	goto	l1766
   577  0001EE                     l1776:
   578                           
   579                           ; BSR set to: 0
   580                           ;main.c: 101: }
   581                           ;main.c: 103: for (i=0; i<16; i++) {
   582  0001EE  0E00               	movlw	0
   583  0001F0  0100               	movlb	0	; () banked
   584  0001F2  6F6D               	movwf	main@i& (0+255),b
   585  0001F4                     l1778:
   586                           
   587                           ; BSR set to: 0
   588  0001F4  0E0F               	movlw	15
   589  0001F6  0100               	movlb	0	; () banked
   590  0001F8  656D               	cpfsgt	main@i& (0+255),b
   591  0001FA  D001               	goto	l1782
   592  0001FC  D00E               	goto	l1790
   593  0001FE                     l1782:
   594                           
   595                           ; BSR set to: 0
   596                           ;main.c: 104: ReceivedString[i]=0;
   597  0001FE  0100               	movlb	0	; () banked
   598  000200  516D               	movf	main@i& (0+255),w,b
   599  000202  0D01               	mullw	1
   600  000204  0E80               	movlw	low _ReceivedString
   601  000206  24F3               	addwf	prodl,w,c
   602  000208  6ED9               	movwf	fsr2l,c
   603  00020A  0E00               	movlw	high _ReceivedString
   604  00020C  20F4               	addwfc	prodh,w,c
   605  00020E  6EDA               	movwf	fsr2h,c
   606  000210  0E00               	movlw	0
   607  000212  6EDF               	movwf	indf2,c
   608                           
   609                           ; BSR set to: 0
   610  000214  0100               	movlb	0	; () banked
   611  000216  2B6D               	incf	main@i& (0+255),f,b
   612  000218  D7ED               	goto	l1778
   613  00021A                     l1790:
   614  00021A  0100               	movlb	0	; () banked
   615  00021C  516C               	movf	main@mode& (0+255),w,b
   616                           
   617                           ; Switch size 1, requested type "space"
   618                           ; Number of cases is 4, Range of values is 0 to 3
   619                           ; switch strategies available:
   620                           ; Name         Instructions Cycles
   621                           ; simple_byte           13     7 (average)
   622                           ;	Chosen strategy is simple_byte
   623  00021E  0A00               	xorlw	0	; case 0
   624  000220  B4D8               	btfsc	status,2,c
   625  000222  D78F               	goto	l1754
   626  000224  0A01               	xorlw	1	; case 1
   627  000226  B4D8               	btfsc	status,2,c
   628  000228  D794               	goto	l1758
   629  00022A  0A03               	xorlw	3	; case 2
   630  00022C  B4D8               	btfsc	status,2,c
   631  00022E  D79E               	goto	l1760
   632  000230  0A01               	xorlw	1	; case 3
   633                           
   634                           ; BSR set to: 0
   635                           
   636                           ; BSR set to: 0
   637  000232  D7F3               	goto	l1790
   638  000234                     __end_of_main:
   639                           	opt stack 0
   640                           tblptru	equ	0xFF8
   641                           prodh	equ	0xFF4
   642                           prodl	equ	0xFF3
   643                           intcon	equ	0xFF2
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           indf1	equ	0xFE7
   647                           fsr1h	equ	0xFE2
   648                           fsr1l	equ	0xFE1
   649                           indf2	equ	0xFDF
   650                           fsr2h	equ	0xFDA
   651                           fsr2l	equ	0xFD9
   652                           status	equ	0xFD8
   653                           
   654 ;; *************** function _initRFID *****************
   655 ;; Defined at:
   656 ;;		line 5 in file "RFID_Reader.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;		None               void
   663 ;; Registers used:
   664 ;;		wreg, status,2
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   670 ;;      Params:         0       0       0       0
   671 ;;      Locals:         1       0       0       0
   672 ;;      Temps:          0       0       0       0
   673 ;;      Totals:         1       0       0       0
   674 ;;Total ram usage:        1 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; Hardware stack levels required when called:    1
   677 ;; This function calls:
   678 ;;		Nothing
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text1
   685  0005C0                     __ptext1:
   686                           	opt stack 0
   687  0005C0                     _initRFID:
   688                           	opt stack 29
   689                           
   690                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   691                           
   692                           ; BSR set to: 0
   693                           ;incstack = 0
   694  0005C0  0E01               	movlw	1
   695  0005C2  6E0F               	movwf	_initRFID$1264,c
   696  0005C4  5094               	movf	3988,w,c	;volatile
   697  0005C6  C00F  FF94         	movff	_initRFID$1264,3988	;volatile
   698                           
   699                           ;RFID_Reader.c: 10: SPBRG=205;
   700  0005CA  0ECD               	movlw	205
   701  0005CC  6EAF               	movwf	4015,c	;volatile
   702                           
   703                           ;RFID_Reader.c: 11: SPBRGH=0;
   704  0005CE  0E00               	movlw	0
   705  0005D0  6EB0               	movwf	4016,c	;volatile
   706                           
   707                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   708  0005D2  86AA               	bsf	4010,3,c	;volatile
   709                           
   710                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   711  0005D4  84AC               	bsf	4012,2,c	;volatile
   712                           
   713                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   714  0005D6  88AB               	bsf	4011,4,c	;volatile
   715                           
   716                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   717  0005D8  8EAB               	bsf	4011,7,c	;volatile
   718                           
   719                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   720  0005DA  98AC               	bcf	4012,4,c	;volatile
   721                           
   722                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   723  0005DC  9CAB               	bcf	4011,6,c	;volatile
   724  0005DE  0012               	return		;funcret
   725  0005E0                     __end_of_initRFID:
   726                           	opt stack 0
   727                           tblptru	equ	0xFF8
   728                           prodh	equ	0xFF4
   729                           prodl	equ	0xFF3
   730                           intcon	equ	0xFF2
   731                           postinc0	equ	0xFEE
   732                           wreg	equ	0xFE8
   733                           indf1	equ	0xFE7
   734                           fsr1h	equ	0xFE2
   735                           fsr1l	equ	0xFE1
   736                           indf2	equ	0xFDF
   737                           fsr2h	equ	0xFDA
   738                           fsr2l	equ	0xFD9
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _initMotorPWM *****************
   742 ;; Defined at:
   743 ;;		line 4 in file "dc_motor.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;		None               void
   750 ;; Registers used:
   751 ;;		wreg, status,2
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   757 ;;      Params:         0       0       0       0
   758 ;;      Locals:         0       0       0       0
   759 ;;      Temps:          0       0       0       0
   760 ;;      Totals:         0       0       0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    1
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text2
   772  000568                     __ptext2:
   773                           	opt stack 0
   774  000568                     _initMotorPWM:
   775                           	opt stack 29
   776                           
   777                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   778                           
   779                           ;incstack = 0
   780  000568  0E00               	movlw	0
   781  00056A  6E7F               	movwf	3967,c	;volatile
   782                           
   783                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   784  00056C  0E80               	movlw	128
   785  00056E  6E7E               	movwf	3966,c	;volatile
   786                           
   787                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   788  000570  0E6F               	movlw	111
   789  000572  6E6F               	movwf	3951,c	;volatile
   790                           
   791                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   792  000574  0E00               	movlw	0
   793  000576  6E6E               	movwf	3950,c	;volatile
   794                           
   795                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   796  000578  0EC7               	movlw	199
   797  00057A  6E7B               	movwf	3963,c	;volatile
   798                           
   799                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   800  00057C  0E00               	movlw	0
   801  00057E  6E7A               	movwf	3962,c	;volatile
   802                           
   803                           ;dc_motor.c: 13: PDC0L = 0<<2;
   804  000580  0E00               	movlw	0
   805  000582  6E79               	movwf	3961,c	;volatile
   806                           
   807                           ;dc_motor.c: 14: PDC0H = 0>>6;
   808  000584  0E00               	movlw	0
   809  000586  6E78               	movwf	3960,c	;volatile
   810                           
   811                           ;dc_motor.c: 15: PDC1L = 0<<2;
   812  000588  0E00               	movlw	0
   813  00058A  6E77               	movwf	3959,c	;volatile
   814                           
   815                           ;dc_motor.c: 16: PDC1H = 0>>6;
   816  00058C  0E00               	movlw	0
   817  00058E  6E76               	movwf	3958,c	;volatile
   818                           
   819                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   820  000590  9093               	bcf	3987,0,c	;volatile
   821                           
   822                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   823  000592  9293               	bcf	3987,1,c	;volatile
   824                           
   825                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   826  000594  9493               	bcf	3987,2,c	;volatile
   827                           
   828                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   829  000596  9693               	bcf	3987,3,c	;volatile
   830  000598  0012               	return		;funcret
   831  00059A                     __end_of_initMotorPWM:
   832                           	opt stack 0
   833                           tblptru	equ	0xFF8
   834                           prodh	equ	0xFF4
   835                           prodl	equ	0xFF3
   836                           intcon	equ	0xFF2
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           indf1	equ	0xFE7
   840                           fsr1h	equ	0xFE2
   841                           fsr1l	equ	0xFE1
   842                           indf2	equ	0xFDF
   843                           fsr2h	equ	0xFDA
   844                           fsr2l	equ	0xFD9
   845                           status	equ	0xFD8
   846                           
   847 ;; *************** function _VerifySignal *****************
   848 ;; Defined at:
   849 ;;		line 56 in file "RFID_Reader.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;  Signal          2   14[COMRAM] PTR unsigned char 
   852 ;;		 -> ReceivedString(16), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  hexByte         2   23[COMRAM] unsigned int 
   855 ;;  i               1   25[COMRAM] unsigned char 
   856 ;;  checksum        1   22[COMRAM] unsigned char 
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      unsigned char 
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   866 ;;      Params:         2       0       0       0
   867 ;;      Locals:         4       0       0       0
   868 ;;      Temps:          6       0       0       0
   869 ;;      Totals:        12       0       0       0
   870 ;;Total ram usage:       12 bytes
   871 ;; Hardware stack levels used:    1
   872 ;; Hardware stack levels required when called:    1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text3
   881  000368                     __ptext3:
   882                           	opt stack 0
   883  000368                     _VerifySignal:
   884                           	opt stack 29
   885                           
   886                           ;RFID_Reader.c: 57: unsigned char checksum=0;
   887                           
   888                           ;incstack = 0
   889  000368  0E00               	movlw	0
   890  00036A  6E17               	movwf	VerifySignal@checksum,c
   891                           
   892                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
   893  00036C  0E00               	movlw	0
   894  00036E  6E19               	movwf	VerifySignal@hexByte+1,c
   895  000370  0E00               	movlw	0
   896  000372  6E18               	movwf	VerifySignal@hexByte,c
   897                           
   898                           ;RFID_Reader.c: 59: unsigned char i=0;
   899  000374  0E00               	movlw	0
   900  000376  6E1A               	movwf	VerifySignal@i,c
   901                           
   902                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
   903  000378  EE20 F004          	lfsr	2,4
   904  00037C  500F               	movf	VerifySignal@Signal,w,c
   905  00037E  26D9               	addwf	fsr2l,f,c
   906  000380  5010               	movf	VerifySignal@Signal+1,w,c
   907  000382  22DA               	addwfc	fsr2h,f,c
   908  000384  50DF               	movf	indf2,w,c
   909  000386  6E11               	movwf	??_VerifySignal& (0+255),c
   910  000388  EE20 F003          	lfsr	2,3
   911  00038C  500F               	movf	VerifySignal@Signal,w,c
   912  00038E  26D9               	addwf	fsr2l,f,c
   913  000390  5010               	movf	VerifySignal@Signal+1,w,c
   914  000392  22DA               	addwfc	fsr2h,f,c
   915  000394  50DF               	movf	indf2,w,c
   916  000396  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
   917  000398  5012               	movf	??_VerifySignal+1,w,c
   918  00039A  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
   919  00039C  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
   920  00039E  5011               	movf	??_VerifySignal,w,c
   921  0003A0  2413               	addwf	??_VerifySignal+2,w,c
   922  0003A2  6E18               	movwf	VerifySignal@hexByte,c
   923  0003A4  0E00               	movlw	0
   924  0003A6  2014               	addwfc	??_VerifySignal+3,w,c
   925  0003A8  6E19               	movwf	VerifySignal@hexByte+1,c
   926                           
   927                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
   928  0003AA  EE20 F002          	lfsr	2,2
   929  0003AE  500F               	movf	VerifySignal@Signal,w,c
   930  0003B0  26D9               	addwf	fsr2l,f,c
   931  0003B2  5010               	movf	VerifySignal@Signal+1,w,c
   932  0003B4  22DA               	addwfc	fsr2h,f,c
   933  0003B6  50DF               	movf	indf2,w,c
   934  0003B8  1818               	xorwf	VerifySignal@hexByte,w,c
   935  0003BA  6E17               	movwf	VerifySignal@checksum,c
   936                           
   937                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
   938  0003BC  0E05               	movlw	5
   939  0003BE  6E1A               	movwf	VerifySignal@i,c
   940  0003C0                     l1710:
   941  0003C0  0E09               	movlw	9
   942  0003C2  641A               	cpfsgt	VerifySignal@i,c
   943  0003C4  D001               	goto	l1714
   944  0003C6  D028               	goto	l1722
   945  0003C8                     l1714:
   946                           
   947                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
   948  0003C8  501A               	movf	VerifySignal@i,w,c
   949  0003CA  6E11               	movwf	??_VerifySignal& (0+255),c
   950  0003CC  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
   951  0003CE  0E01               	movlw	1
   952  0003D0  2611               	addwf	??_VerifySignal,f,c
   953  0003D2  0E00               	movlw	0
   954  0003D4  2212               	addwfc	??_VerifySignal+1,f,c
   955  0003D6  5011               	movf	??_VerifySignal,w,c
   956  0003D8  240F               	addwf	VerifySignal@Signal,w,c
   957  0003DA  6ED9               	movwf	fsr2l,c
   958  0003DC  5012               	movf	??_VerifySignal+1,w,c
   959  0003DE  2010               	addwfc	VerifySignal@Signal+1,w,c
   960  0003E0  6EDA               	movwf	fsr2h,c
   961  0003E2  50DF               	movf	indf2,w,c
   962  0003E4  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
   963  0003E6  501A               	movf	VerifySignal@i,w,c
   964  0003E8  0D01               	mullw	1
   965  0003EA  50F3               	movf	prodl,w,c
   966  0003EC  240F               	addwf	VerifySignal@Signal,w,c
   967  0003EE  6ED9               	movwf	fsr2l,c
   968  0003F0  50F4               	movf	prodh,w,c
   969  0003F2  2010               	addwfc	VerifySignal@Signal+1,w,c
   970  0003F4  6EDA               	movwf	fsr2h,c
   971  0003F6  50DF               	movf	indf2,w,c
   972  0003F8  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
   973  0003FA  5014               	movf	??_VerifySignal+3,w,c
   974  0003FC  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
   975  0003FE  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
   976  000400  5013               	movf	??_VerifySignal+2,w,c
   977  000402  2415               	addwf	??_VerifySignal+4,w,c
   978  000404  6E18               	movwf	VerifySignal@hexByte,c
   979  000406  0E00               	movlw	0
   980  000408  2016               	addwfc	??_VerifySignal+5,w,c
   981  00040A  6E19               	movwf	VerifySignal@hexByte+1,c
   982                           
   983                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
   984  00040C  5017               	movf	VerifySignal@checksum,w,c
   985  00040E  1818               	xorwf	VerifySignal@hexByte,w,c
   986  000410  6E17               	movwf	VerifySignal@checksum,c
   987  000412  0E02               	movlw	2
   988  000414  261A               	addwf	VerifySignal@i,f,c
   989  000416  D7D4               	goto	l1710
   990  000418                     l1722:
   991                           
   992                           ;RFID_Reader.c: 69: }
   993                           ;RFID_Reader.c: 72: return 1;
   994  000418  0E01               	movlw	1
   995  00041A  0012               	return	
   996  00041C                     __end_of_VerifySignal:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           prodh	equ	0xFF4
  1000                           prodl	equ	0xFF3
  1001                           intcon	equ	0xFF2
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           indf1	equ	0xFE7
  1005                           fsr1h	equ	0xFE2
  1006                           fsr1l	equ	0xFE1
  1007                           indf2	equ	0xFDF
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _ScanWithRange *****************
  1013 ;; Defined at:
  1014 ;;		line 75 in file "Movement.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  mL              2   41[COMRAM] PTR struct DC_motor
  1017 ;;		 -> main@motorL(9), 
  1018 ;;  mR              2   43[COMRAM] PTR struct DC_motor
  1019 ;;		 -> main@motorR(9), 
  1020 ;;  tenth_second    1   45[COMRAM] unsigned char 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;		None
  1023 ;; Return value:  Size  Location     Type
  1024 ;;		None               void
  1025 ;; Registers used:
  1026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1032 ;;      Params:         5       0       0       0
  1033 ;;      Locals:         0       0       0       0
  1034 ;;      Temps:          0       0       0       0
  1035 ;;      Totals:         5       0       0       0
  1036 ;;Total ram usage:        5 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    4
  1039 ;; This function calls:
  1040 ;;		_delay_tenth_s
  1041 ;;		_stop
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text4
  1048  0005FC                     __ptext4:
  1049                           	opt stack 0
  1050  0005FC                     _ScanWithRange:
  1051                           	opt stack 26
  1052                           
  1053                           ;Movement.c: 78: stop(mL,mR);
  1054                           
  1055                           ;incstack = 0
  1056  0005FC  C02A  F026         	movff	ScanWithRange@mL,stop@mL
  1057  000600  C02B  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1058  000604  C02C  F028         	movff	ScanWithRange@mR,stop@mR
  1059  000608  C02D  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1060  00060C  EC0E  F002         	call	_stop	;wreg free
  1061                           
  1062                           ;Movement.c: 79: delay_tenth_s(tenth_seconds);
  1063  000610  502E               	movf	ScanWithRange@tenth_seconds,w,c
  1064  000612  EC98  F002         	call	_delay_tenth_s
  1065  000616  0012               	return		;funcret
  1066  000618                     __end_of_ScanWithRange:
  1067                           	opt stack 0
  1068                           tblptru	equ	0xFF8
  1069                           prodh	equ	0xFF4
  1070                           prodl	equ	0xFF3
  1071                           intcon	equ	0xFF2
  1072                           postinc0	equ	0xFEE
  1073                           wreg	equ	0xFE8
  1074                           indf1	equ	0xFE7
  1075                           fsr1h	equ	0xFE2
  1076                           fsr1l	equ	0xFE1
  1077                           indf2	equ	0xFDF
  1078                           fsr2h	equ	0xFDA
  1079                           fsr2l	equ	0xFD9
  1080                           status	equ	0xFD8
  1081                           
  1082 ;; *************** function _stop *****************
  1083 ;; Defined at:
  1084 ;;		line 67 in file "dc_motor.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1087 ;;		 -> main@motorL(9), 
  1088 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1089 ;;		 -> main@motorR(9), 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;		None               void
  1094 ;; Registers used:
  1095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1101 ;;      Params:         4       0       0       0
  1102 ;;      Locals:         0       0       0       0
  1103 ;;      Temps:          0       0       0       0
  1104 ;;      Totals:         4       0       0       0
  1105 ;;Total ram usage:        4 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    3
  1108 ;; This function calls:
  1109 ;;		_setMotorPWM
  1110 ;; This function is called by:
  1111 ;;		_ScanWithRange
  1112 ;;		_turnLeft
  1113 ;;		_turnRight
  1114 ;;		_ScanIR
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text5
  1119  00041C                     __ptext5:
  1120                           	opt stack 0
  1121  00041C                     _stop:
  1122                           	opt stack 26
  1123                           
  1124                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1125                           
  1126                           ;incstack = 0
  1127  00041C  D028               	goto	l1642
  1128  00041E                     l1628:
  1129                           
  1130                           ;dc_motor.c: 71: if(mL->power>0){
  1131  00041E  C026  FFD9         	movff	stop@mL,fsr2l
  1132  000422  C027  FFDA         	movff	stop@mL+1,fsr2h
  1133  000426  50DF               	movf	indf2,w,c
  1134  000428  B4D8               	btfsc	status,2,c
  1135  00042A  D005               	goto	l1632
  1136                           
  1137                           ;dc_motor.c: 72: mL->power--;
  1138  00042C  C026  FFD9         	movff	stop@mL,fsr2l
  1139  000430  C027  FFDA         	movff	stop@mL+1,fsr2h
  1140  000434  06DF               	decf	indf2,f,c
  1141  000436                     l1632:
  1142                           
  1143                           ;dc_motor.c: 73: }
  1144                           ;dc_motor.c: 74: if(mR->power>0){
  1145  000436  C028  FFD9         	movff	stop@mR,fsr2l
  1146  00043A  C029  FFDA         	movff	stop@mR+1,fsr2h
  1147  00043E  50DF               	movf	indf2,w,c
  1148  000440  B4D8               	btfsc	status,2,c
  1149  000442  D005               	goto	l1636
  1150                           
  1151                           ;dc_motor.c: 75: mR->power--;
  1152  000444  C028  FFD9         	movff	stop@mR,fsr2l
  1153  000448  C029  FFDA         	movff	stop@mR+1,fsr2h
  1154  00044C  06DF               	decf	indf2,f,c
  1155  00044E                     l1636:
  1156                           
  1157                           ;dc_motor.c: 76: }
  1158                           ;dc_motor.c: 77: setMotorPWM(mL);
  1159  00044E  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1160  000452  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1161  000456  EC1A  F001         	call	_setMotorPWM	;wreg free
  1162                           
  1163                           ;dc_motor.c: 78: setMotorPWM(mR);
  1164  00045A  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1165  00045E  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1166  000462  EC1A  F001         	call	_setMotorPWM	;wreg free
  1167                           
  1168                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1169  000466  0E21               	movlw	33
  1170  000468                     u1127:
  1171  000468  2EE8               	decfsz	wreg,f,c
  1172  00046A  D7FE               	goto	u1127
  1173  00046C  F000               	nop	
  1174  00046E                     l1642:
  1175  00046E  C026  FFD9         	movff	stop@mL,fsr2l
  1176  000472  C027  FFDA         	movff	stop@mL+1,fsr2h
  1177  000476  50DF               	movf	indf2,w,c
  1178  000478  A4D8               	btfss	status,2,c
  1179  00047A  D7D1               	goto	l1628
  1180  00047C  C028  FFD9         	movff	stop@mR,fsr2l
  1181  000480  C029  FFDA         	movff	stop@mR+1,fsr2h
  1182  000484  50DF               	movf	indf2,w,c
  1183  000486  A4D8               	btfss	status,2,c
  1184  000488  D7CA               	goto	l1628
  1185                           
  1186                           ;dc_motor.c: 80: }
  1187                           ;dc_motor.c: 81: mL->direction=1;
  1188  00048A  EE20 F001          	lfsr	2,1
  1189  00048E  5026               	movf	stop@mL,w,c
  1190  000490  26D9               	addwf	fsr2l,f,c
  1191  000492  5027               	movf	stop@mL+1,w,c
  1192  000494  22DA               	addwfc	fsr2h,f,c
  1193  000496  0E01               	movlw	1
  1194  000498  6EDF               	movwf	indf2,c
  1195                           
  1196                           ;dc_motor.c: 82: mR->direction=1;
  1197  00049A  EE20 F001          	lfsr	2,1
  1198  00049E  5028               	movf	stop@mR,w,c
  1199  0004A0  26D9               	addwf	fsr2l,f,c
  1200  0004A2  5029               	movf	stop@mR+1,w,c
  1201  0004A4  22DA               	addwfc	fsr2h,f,c
  1202  0004A6  0E01               	movlw	1
  1203  0004A8  6EDF               	movwf	indf2,c
  1204  0004AA  0012               	return		;funcret
  1205  0004AC                     __end_of_stop:
  1206                           	opt stack 0
  1207                           tblptru	equ	0xFF8
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           intcon	equ	0xFF2
  1211                           postinc0	equ	0xFEE
  1212                           wreg	equ	0xFE8
  1213                           indf1	equ	0xFE7
  1214                           fsr1h	equ	0xFE2
  1215                           fsr1l	equ	0xFE1
  1216                           indf2	equ	0xFDF
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function _setMotorPWM *****************
  1222 ;; Defined at:
  1223 ;;		line 26 in file "dc_motor.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1226 ;;		 -> main@motorR(9), main@motorL(9), 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  PWMduty         2   35[COMRAM] int 
  1229 ;; Return value:  Size  Location     Type
  1230 ;;		None               void
  1231 ;; Registers used:
  1232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1238 ;;      Params:         2       0       0       0
  1239 ;;      Locals:         2       0       0       0
  1240 ;;      Temps:          5       0       0       0
  1241 ;;      Totals:         9       0       0       0
  1242 ;;Total ram usage:        9 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    2
  1245 ;; This function calls:
  1246 ;;		___awdiv
  1247 ;;		___wmul
  1248 ;; This function is called by:
  1249 ;;		_stop
  1250 ;;		_setMotorFullSpeed
  1251 ;;		_stopMotor
  1252 ;;		_fullSpeedAhead
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text6
  1257  000234                     __ptext6:
  1258                           	opt stack 0
  1259  000234                     _setMotorPWM:
  1260                           	opt stack 26
  1261                           
  1262                           ;dc_motor.c: 28: int PWMduty;
  1263                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1264                           
  1265                           ;incstack = 0
  1266  000234  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1267  000238  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1268  00023C  50DF               	movf	indf2,w,c
  1269  00023E  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1270  000240  501F               	movf	??_setMotorPWM,w,c
  1271  000242  6E0F               	movwf	___wmul@multiplier,c
  1272  000244  6A10               	clrf	___wmul@multiplier+1,c
  1273  000246  EE20 F007          	lfsr	2,7
  1274  00024A  501D               	movf	setMotorPWM@m,w,c
  1275  00024C  26D9               	addwf	fsr2l,f,c
  1276  00024E  501E               	movf	setMotorPWM@m+1,w,c
  1277  000250  22DA               	addwfc	fsr2h,f,c
  1278  000252  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1279  000256  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1280  00025A  ECCD  F002         	call	___wmul	;wreg free
  1281  00025E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1282  000262  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1283  000266  0E00               	movlw	0
  1284  000268  6E18               	movwf	___awdiv@divisor+1,c
  1285  00026A  0E64               	movlw	100
  1286  00026C  6E17               	movwf	___awdiv@divisor,c
  1287  00026E  EC56  F002         	call	___awdiv	;wreg free
  1288  000272  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1289  000276  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1290                           
  1291                           ;dc_motor.c: 32: if (m->direction)
  1292  00027A  EE20 F001          	lfsr	2,1
  1293  00027E  501D               	movf	setMotorPWM@m,w,c
  1294  000280  26D9               	addwf	fsr2l,f,c
  1295  000282  501E               	movf	setMotorPWM@m+1,w,c
  1296  000284  22DA               	addwfc	fsr2h,f,c
  1297  000286  50DF               	movf	indf2,w,c
  1298  000288  B4D8               	btfsc	status,2,c
  1299  00028A  D02C               	goto	l1624
  1300                           
  1301                           ;dc_motor.c: 33: {
  1302                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1303  00028C  EE20 F006          	lfsr	2,6
  1304  000290  501D               	movf	setMotorPWM@m,w,c
  1305  000292  26D9               	addwf	fsr2l,f,c
  1306  000294  501E               	movf	setMotorPWM@m+1,w,c
  1307  000296  22DA               	addwfc	fsr2h,f,c
  1308  000298  50DF               	movf	indf2,w,c
  1309  00029A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1310  00029C  0E01               	movlw	1
  1311  00029E  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1312  0002A0  2A1F               	incf	??_setMotorPWM,f,c
  1313  0002A2  D002               	goto	u894
  1314  0002A4                     u895:
  1315  0002A4  90D8               	bcf	status,0,c
  1316  0002A6  3620               	rlcf	??_setMotorPWM+1,f,c
  1317  0002A8                     u894:
  1318  0002A8  2E1F               	decfsz	??_setMotorPWM,f,c
  1319  0002AA  D7FC               	goto	u895
  1320  0002AC  5020               	movf	??_setMotorPWM+1,w,c
  1321  0002AE  108A               	iorwf	3978,w,c	;volatile
  1322  0002B0  6E8A               	movwf	3978,c	;volatile
  1323                           
  1324                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1325  0002B2  EE20 F007          	lfsr	2,7
  1326  0002B6  501D               	movf	setMotorPWM@m,w,c
  1327  0002B8  26D9               	addwf	fsr2l,f,c
  1328  0002BA  501E               	movf	setMotorPWM@m+1,w,c
  1329  0002BC  22DA               	addwfc	fsr2h,f,c
  1330  0002BE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1331  0002C2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1332  0002C6  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1333  0002CA  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1334  0002CE  1E21               	comf	??_setMotorPWM+2,f,c
  1335  0002D0  1E22               	comf	??_setMotorPWM+3,f,c
  1336  0002D2  4A21               	infsnz	??_setMotorPWM+2,f,c
  1337  0002D4  2A22               	incf	??_setMotorPWM+3,f,c
  1338  0002D6  501F               	movf	??_setMotorPWM,w,c
  1339  0002D8  2421               	addwf	??_setMotorPWM+2,w,c
  1340  0002DA  6E24               	movwf	setMotorPWM@PWMduty,c
  1341  0002DC  5020               	movf	??_setMotorPWM+1,w,c
  1342  0002DE  2022               	addwfc	??_setMotorPWM+3,w,c
  1343  0002E0  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1344                           
  1345                           ;dc_motor.c: 36: }
  1346  0002E2  D014               	goto	l98
  1347  0002E4                     l1624:
  1348                           
  1349                           ;dc_motor.c: 37: else
  1350                           ;dc_motor.c: 38: {
  1351                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  1352  0002E4  EE20 F006          	lfsr	2,6
  1353  0002E8  501D               	movf	setMotorPWM@m,w,c
  1354  0002EA  26D9               	addwf	fsr2l,f,c
  1355  0002EC  501E               	movf	setMotorPWM@m+1,w,c
  1356  0002EE  22DA               	addwfc	fsr2h,f,c
  1357  0002F0  50DF               	movf	indf2,w,c
  1358  0002F2  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1359  0002F4  0E01               	movlw	1
  1360  0002F6  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1361  0002F8  2A1F               	incf	??_setMotorPWM,f,c
  1362  0002FA  D002               	goto	u904
  1363  0002FC                     u905:
  1364  0002FC  90D8               	bcf	status,0,c
  1365  0002FE  3620               	rlcf	??_setMotorPWM+1,f,c
  1366  000300                     u904:
  1367  000300  2E1F               	decfsz	??_setMotorPWM,f,c
  1368  000302  D7FC               	goto	u905
  1369  000304  5020               	movf	??_setMotorPWM+1,w,c
  1370  000306  0AFF               	xorlw	255
  1371  000308  148A               	andwf	3978,w,c	;volatile
  1372  00030A  6E8A               	movwf	3978,c	;volatile
  1373  00030C                     l98:
  1374                           
  1375                           ;dc_motor.c: 40: }
  1376                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  1377  00030C  EE20 F002          	lfsr	2,2
  1378  000310  501D               	movf	setMotorPWM@m,w,c
  1379  000312  26D9               	addwf	fsr2l,f,c
  1380  000314  501E               	movf	setMotorPWM@m+1,w,c
  1381  000316  22DA               	addwfc	fsr2h,f,c
  1382  000318  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1383  00031C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1384  000320  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1385  000324  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1386  000328  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1387  00032A  46E8               	rlncf	wreg,f,c
  1388  00032C  0BFC               	andlw	252
  1389  00032E  6EDF               	movwf	indf2,c
  1390                           
  1391                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  1392  000330  EE20 F004          	lfsr	2,4
  1393  000334  501D               	movf	setMotorPWM@m,w,c
  1394  000336  26D9               	addwf	fsr2l,f,c
  1395  000338  501E               	movf	setMotorPWM@m+1,w,c
  1396  00033A  22DA               	addwfc	fsr2h,f,c
  1397  00033C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1398  000340  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1399  000344  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1400  000348  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1401  00034C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1402  000350  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1403  000354  0E06               	movlw	6
  1404  000356  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  1405  000358                     u915:
  1406  000358  3422               	rlcf	??_setMotorPWM+3,w,c
  1407  00035A  3222               	rrcf	??_setMotorPWM+3,f,c
  1408  00035C  3221               	rrcf	??_setMotorPWM+2,f,c
  1409  00035E  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1410  000360  D7FB               	goto	u915
  1411  000362  5021               	movf	??_setMotorPWM+2,w,c
  1412  000364  6EDF               	movwf	indf2,c
  1413  000366  0012               	return		;funcret
  1414  000368                     __end_of_setMotorPWM:
  1415                           	opt stack 0
  1416                           tblptru	equ	0xFF8
  1417                           prodh	equ	0xFF4
  1418                           prodl	equ	0xFF3
  1419                           intcon	equ	0xFF2
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           indf1	equ	0xFE7
  1423                           fsr1h	equ	0xFE2
  1424                           fsr1l	equ	0xFE1
  1425                           indf2	equ	0xFDF
  1426                           postinc2	equ	0xFDE
  1427                           postdec2	equ	0xFDD
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function ___wmul *****************
  1433 ;; Defined at:
  1434 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  multiplier      2   14[COMRAM] unsigned int 
  1437 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  product         2   18[COMRAM] unsigned int 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   14[COMRAM] unsigned int 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0, prodl, prodh
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1449 ;;      Params:         4       0       0       0
  1450 ;;      Locals:         2       0       0       0
  1451 ;;      Temps:          0       0       0       0
  1452 ;;      Totals:         6       0       0       0
  1453 ;;Total ram usage:        6 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    1
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_setMotorPWM
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text7
  1464  00059A                     __ptext7:
  1465                           	opt stack 0
  1466  00059A                     ___wmul:
  1467                           	opt stack 26
  1468                           
  1469                           ;incstack = 0
  1470  00059A  500F               	movf	___wmul@multiplier,w,c
  1471  00059C  0211               	mulwf	___wmul@multiplicand,c
  1472  00059E  CFF3 F013          	movff	prodl,___wmul@product
  1473  0005A2  CFF4 F014          	movff	prodh,___wmul@product+1
  1474  0005A6  500F               	movf	___wmul@multiplier,w,c
  1475  0005A8  0212               	mulwf	___wmul@multiplicand+1,c
  1476  0005AA  50F3               	movf	prodl,w,c
  1477  0005AC  2614               	addwf	___wmul@product+1,f,c
  1478  0005AE  5010               	movf	___wmul@multiplier+1,w,c
  1479  0005B0  0211               	mulwf	___wmul@multiplicand,c
  1480  0005B2  50F3               	movf	prodl,w,c
  1481  0005B4  2614               	addwf	___wmul@product+1,f,c
  1482  0005B6  C013  F00F         	movff	___wmul@product,?___wmul
  1483  0005BA  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1484  0005BE  0012               	return	
  1485  0005C0                     __end_of___wmul:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           prodh	equ	0xFF4
  1489                           prodl	equ	0xFF3
  1490                           intcon	equ	0xFF2
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           indf1	equ	0xFE7
  1494                           fsr1h	equ	0xFE2
  1495                           fsr1l	equ	0xFE1
  1496                           indf2	equ	0xFDF
  1497                           postinc2	equ	0xFDE
  1498                           postdec2	equ	0xFDD
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function ___awdiv *****************
  1504 ;; Defined at:
  1505 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  dividend        2   20[COMRAM] int 
  1508 ;;  divisor         2   22[COMRAM] int 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  quotient        2   26[COMRAM] int 
  1511 ;;  sign            1   25[COMRAM] unsigned char 
  1512 ;;  counter         1   24[COMRAM] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  2   20[COMRAM] int 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2, status,0
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1522 ;;      Params:         4       0       0       0
  1523 ;;      Locals:         4       0       0       0
  1524 ;;      Temps:          0       0       0       0
  1525 ;;      Totals:         8       0       0       0
  1526 ;;Total ram usage:        8 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    1
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_setMotorPWM
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text8
  1537  0004AC                     __ptext8:
  1538                           	opt stack 0
  1539  0004AC                     ___awdiv:
  1540                           	opt stack 26
  1541                           
  1542                           ;incstack = 0
  1543  0004AC  0E00               	movlw	0
  1544  0004AE  6E1A               	movwf	___awdiv@sign,c
  1545  0004B0  AE18               	btfss	___awdiv@divisor+1,7,c
  1546  0004B2  D006               	goto	l1582
  1547  0004B4  6C17               	negf	___awdiv@divisor,c
  1548  0004B6  1E18               	comf	___awdiv@divisor+1,f,c
  1549  0004B8  B0D8               	btfsc	status,0,c
  1550  0004BA  2A18               	incf	___awdiv@divisor+1,f,c
  1551  0004BC  0E01               	movlw	1
  1552  0004BE  6E1A               	movwf	___awdiv@sign,c
  1553  0004C0                     l1582:
  1554  0004C0  AE16               	btfss	___awdiv@dividend+1,7,c
  1555  0004C2  D006               	goto	l1588
  1556  0004C4  6C15               	negf	___awdiv@dividend,c
  1557  0004C6  1E16               	comf	___awdiv@dividend+1,f,c
  1558  0004C8  B0D8               	btfsc	status,0,c
  1559  0004CA  2A16               	incf	___awdiv@dividend+1,f,c
  1560  0004CC  0E01               	movlw	1
  1561  0004CE  1A1A               	xorwf	___awdiv@sign,f,c
  1562  0004D0                     l1588:
  1563  0004D0  0E00               	movlw	0
  1564  0004D2  6E1C               	movwf	___awdiv@quotient+1,c
  1565  0004D4  0E00               	movlw	0
  1566  0004D6  6E1B               	movwf	___awdiv@quotient,c
  1567  0004D8  5017               	movf	___awdiv@divisor,w,c
  1568  0004DA  1018               	iorwf	___awdiv@divisor+1,w,c
  1569  0004DC  B4D8               	btfsc	status,2,c
  1570  0004DE  D01C               	goto	l1610
  1571  0004E0  0E01               	movlw	1
  1572  0004E2  6E19               	movwf	___awdiv@counter,c
  1573  0004E4  D004               	goto	l1596
  1574  0004E6                     l1594:
  1575  0004E6  90D8               	bcf	status,0,c
  1576  0004E8  3617               	rlcf	___awdiv@divisor,f,c
  1577  0004EA  3618               	rlcf	___awdiv@divisor+1,f,c
  1578  0004EC  2A19               	incf	___awdiv@counter,f,c
  1579  0004EE                     l1596:
  1580  0004EE  AE18               	btfss	___awdiv@divisor+1,7,c
  1581  0004F0  D7FA               	goto	l1594
  1582  0004F2                     l1598:
  1583  0004F2  90D8               	bcf	status,0,c
  1584  0004F4  361B               	rlcf	___awdiv@quotient,f,c
  1585  0004F6  361C               	rlcf	___awdiv@quotient+1,f,c
  1586  0004F8  5017               	movf	___awdiv@divisor,w,c
  1587  0004FA  5C15               	subwf	___awdiv@dividend,w,c
  1588  0004FC  5018               	movf	___awdiv@divisor+1,w,c
  1589  0004FE  5816               	subwfb	___awdiv@dividend+1,w,c
  1590  000500  A0D8               	btfss	status,0,c
  1591  000502  D005               	goto	l1606
  1592  000504  5017               	movf	___awdiv@divisor,w,c
  1593  000506  5E15               	subwf	___awdiv@dividend,f,c
  1594  000508  5018               	movf	___awdiv@divisor+1,w,c
  1595  00050A  5A16               	subwfb	___awdiv@dividend+1,f,c
  1596  00050C  801B               	bsf	___awdiv@quotient,0,c
  1597  00050E                     l1606:
  1598  00050E  90D8               	bcf	status,0,c
  1599  000510  3218               	rrcf	___awdiv@divisor+1,f,c
  1600  000512  3217               	rrcf	___awdiv@divisor,f,c
  1601  000514  2E19               	decfsz	___awdiv@counter,f,c
  1602  000516  D7ED               	goto	l1598
  1603  000518                     l1610:
  1604  000518  501A               	movf	___awdiv@sign,w,c
  1605  00051A  B4D8               	btfsc	status,2,c
  1606  00051C  D004               	goto	l1614
  1607  00051E  6C1B               	negf	___awdiv@quotient,c
  1608  000520  1E1C               	comf	___awdiv@quotient+1,f,c
  1609  000522  B0D8               	btfsc	status,0,c
  1610  000524  2A1C               	incf	___awdiv@quotient+1,f,c
  1611  000526                     l1614:
  1612  000526  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  1613  00052A  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  1614  00052E  0012               	return	
  1615  000530                     __end_of___awdiv:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           indf1	equ	0xFE7
  1624                           fsr1h	equ	0xFE2
  1625                           fsr1l	equ	0xFE1
  1626                           indf2	equ	0xFDF
  1627                           postinc2	equ	0xFDE
  1628                           postdec2	equ	0xFDD
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _delay_tenth_s *****************
  1634 ;; Defined at:
  1635 ;;		line 19 in file "Movement.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  tenth_second    1    wreg     unsigned char 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;  tenth_second    1   15[COMRAM] unsigned char 
  1640 ;;  i               2   16[COMRAM] unsigned int 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;		None               void
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1650 ;;      Params:         0       0       0       0
  1651 ;;      Locals:         3       0       0       0
  1652 ;;      Temps:          1       0       0       0
  1653 ;;      Totals:         4       0       0       0
  1654 ;;Total ram usage:        4 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    1
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_ScanWithRange
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text9
  1665  000530                     __ptext9:
  1666                           	opt stack 0
  1667  000530                     _delay_tenth_s:
  1668                           	opt stack 28
  1669                           
  1670                           ;incstack = 0
  1671                           ;delay_tenth_s@tenth_seconds stored from wreg
  1672  000530  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  1673                           
  1674                           ;Movement.c: 20: unsigned int i=0;
  1675  000532  0E00               	movlw	0
  1676  000534  6E12               	movwf	delay_tenth_s@i+1,c
  1677  000536  0E00               	movlw	0
  1678  000538  6E11               	movwf	delay_tenth_s@i,c
  1679                           
  1680                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  1681  00053A  0E00               	movlw	0
  1682  00053C  6E12               	movwf	delay_tenth_s@i+1,c
  1683  00053E  0E01               	movlw	1
  1684  000540  6E11               	movwf	delay_tenth_s@i,c
  1685  000542  D009               	goto	l1668
  1686  000544                     l1664:
  1687                           
  1688                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  1689  000544  0E82               	movlw	130
  1690  000546  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  1691  000548  0EDE               	movlw	222
  1692  00054A                     u1137:
  1693  00054A  2EE8               	decfsz	wreg,f,c
  1694  00054C  D7FE               	goto	u1137
  1695  00054E  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  1696  000550  D7FC               	goto	u1137
  1697  000552  4A11               	infsnz	delay_tenth_s@i,f,c
  1698  000554  2A12               	incf	delay_tenth_s@i+1,f,c
  1699  000556                     l1668:
  1700  000556  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  1701  000558  0D02               	mullw	2
  1702  00055A  5011               	movf	delay_tenth_s@i,w,c
  1703  00055C  5CF3               	subwf	prodl,w,c
  1704  00055E  5012               	movf	delay_tenth_s@i+1,w,c
  1705  000560  58F4               	subwfb	prodh,w,c
  1706  000562  A0D8               	btfss	status,0,c
  1707  000564  0012               	return	
  1708  000566  D7EE               	goto	l1664
  1709  000568                     __end_of_delay_tenth_s:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           prodh	equ	0xFF4
  1713                           prodl	equ	0xFF3
  1714                           intcon	equ	0xFF2
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           indf1	equ	0xFE7
  1718                           fsr1h	equ	0xFE2
  1719                           fsr1l	equ	0xFE1
  1720                           indf2	equ	0xFDF
  1721                           postinc2	equ	0xFDE
  1722                           postdec2	equ	0xFDD
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _InterruptHandlerHigh *****************
  1728 ;; Defined at:
  1729 ;;		line 16 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1743 ;;      Params:         0       0       0       0
  1744 ;;      Locals:         0       0       0       0
  1745 ;;      Temps:         14       0       0       0
  1746 ;;      Totals:        14       0       0       0
  1747 ;;Total ram usage:       14 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; This function calls:
  1750 ;;		Nothing
  1751 ;; This function is called by:
  1752 ;;		Interrupt level 2
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	intcode
  1757  000008                     __pintcode:
  1758                           	opt stack 0
  1759  000008                     _InterruptHandlerHigh:
  1760                           	opt stack 26
  1761                           
  1762                           ;incstack = 0
  1763  000008  8232               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1764  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  1765  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  1766  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  1767  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  1768  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  1769  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  1770  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  1771  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  1772  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  1773  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  1774  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  1775  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  1776  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  1777  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  1778                           
  1779                           ;main.c: 18: if (PIR1bits.RCIF) {
  1780  000042  AA9E               	btfss	3998,5,c	;volatile
  1781  000044  D013               	goto	i2l42
  1782                           
  1783                           ;main.c: 19: ReceivedString[i]=RCREG;
  1784  000046  5031               	movf	_i,w,c	;volatile
  1785  000048  0D01               	mullw	1
  1786  00004A  0E80               	movlw	low _ReceivedString
  1787  00004C  24F3               	addwf	prodl,w,c
  1788  00004E  6ED9               	movwf	fsr2l,c
  1789  000050  0E00               	movlw	high _ReceivedString
  1790  000052  20F4               	addwfc	prodh,w,c
  1791  000054  6EDA               	movwf	fsr2h,c
  1792  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  1793                           
  1794                           ;main.c: 20: if (i==15){
  1795  00005A  0E0F               	movlw	15
  1796  00005C  1831               	xorwf	_i,w,c	;volatile
  1797  00005E  A4D8               	btfss	status,2,c
  1798  000060  D003               	goto	i2l1456
  1799                           
  1800                           ;main.c: 21: i=0;
  1801  000062  0E00               	movlw	0
  1802  000064  6E31               	movwf	_i,c	;volatile
  1803                           
  1804                           ;main.c: 22: }else{
  1805  000066  D001               	goto	i2l1458
  1806  000068                     i2l1456:
  1807                           
  1808                           ;main.c: 23: i++;
  1809  000068  2A31               	incf	_i,f,c	;volatile
  1810  00006A                     i2l1458:
  1811                           
  1812                           ;main.c: 24: }
  1813                           ;main.c: 25: PIR1bits.RCIF=0;
  1814  00006A  9A9E               	bcf	3998,5,c	;volatile
  1815  00006C                     i2l42:
  1816  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  1817  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  1818  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  1819  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  1820  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  1821  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  1822  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  1823  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  1824  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  1825  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  1826  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  1827  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  1828  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  1829  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  1830  0000A4  9232               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1831  0000A6  0011               	retfie		f
  1832  0000A8                     __end_of_InterruptHandlerHigh:
  1833                           	opt stack 0
  1834  0000                     pclatu	equ	0xFFB
  1835                           pclath	equ	0xFFA
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           intcon	equ	0xFF2
  1843                           postinc0	equ	0xFEE
  1844                           fsr0h	equ	0xFEA
  1845                           fsr0l	equ	0xFE9
  1846                           wreg	equ	0xFE8
  1847                           indf1	equ	0xFE7
  1848                           fsr1h	equ	0xFE2
  1849                           fsr1l	equ	0xFE1
  1850                           indf2	equ	0xFDF
  1851                           postinc2	equ	0xFDE
  1852                           postdec2	equ	0xFDD
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           pclatu	equ	0xFFB
  1857                           pclath	equ	0xFFA
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           intcon	equ	0xFF2
  1865                           postinc0	equ	0xFEE
  1866                           fsr0h	equ	0xFEA
  1867                           fsr0l	equ	0xFE9
  1868                           wreg	equ	0xFE8
  1869                           indf1	equ	0xFE7
  1870                           fsr1h	equ	0xFE2
  1871                           fsr1l	equ	0xFE1
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879                           	psect	rparam
  1880  0000                     pclatu	equ	0xFFB
  1881                           pclath	equ	0xFFA
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           fsr0h	equ	0xFEA
  1891                           fsr0l	equ	0xFE9
  1892                           wreg	equ	0xFE8
  1893                           indf1	equ	0xFE7
  1894                           fsr1h	equ	0xFE2
  1895                           fsr1l	equ	0xFE1
  1896                           indf2	equ	0xFDF
  1897                           postinc2	equ	0xFDE
  1898                           postdec2	equ	0xFDD
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903                           	psect	temp
  1904  000032                     btemp:
  1905                           	opt stack 0
  1906  000032                     	ds	1
  1907  0000                     int$flags	set	btemp
  1908                           pclatu	equ	0xFFB
  1909                           pclath	equ	0xFFA
  1910                           tblptru	equ	0xFF8
  1911                           tblptrh	equ	0xFF7
  1912                           tblptrl	equ	0xFF6
  1913                           tablat	equ	0xFF5
  1914                           prodh	equ	0xFF4
  1915                           prodl	equ	0xFF3
  1916                           intcon	equ	0xFF2
  1917                           postinc0	equ	0xFEE
  1918                           fsr0h	equ	0xFEA
  1919                           fsr0l	equ	0xFE9
  1920                           wreg	equ	0xFE8
  1921                           indf1	equ	0xFE7
  1922                           fsr1h	equ	0xFE2
  1923                           fsr1l	equ	0xFE1
  1924                           indf2	equ	0xFDF
  1925                           postinc2	equ	0xFDE
  1926                           postdec2	equ	0xFDD
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      49
    BANK0           160     32      48
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _ScanWithRange->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0    4845
                                             46 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                      _ScanWithRange
                       _VerifySignal
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      37
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     476
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                        5     0      5    3501
                                             41 COMRAM     5     0      5
                      _delay_tenth_s
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    3106
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1718
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanWithRange
     _delay_tenth_s
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _VerifySignal
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      30       5       30.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      31       1       52.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61       3        0.0%
DATA                 0      0      61      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 13 23:29:34 2018

                            _i 0031                             l45 013C                             l98 030C  
                 ___awdiv@sign 001A            ___wmul@multiplicand 0011                    main@Message 0060  
                          u904 0300                            u905 02FC                            u915 0358  
                          u894 02A8                            u895 02A4                            prod 000FF3  
                          wreg 000FE8                           l1610 0518                           l1614 0526  
                         l1606 050E                           l1710 03C0                           l1624 02E4  
                         l1632 0436                           l1642 046E                           l1722 0418  
                         l1714 03C8                           l1636 044E                           l1628 041E  
                         l1582 04C0                           l1664 0544                           l1760 016C  
                         l1594 04E6                           l1770 01B6                           l1754 0142  
                         l1668 0556                           l1596 04EE                           l1588 04D0  
                         l1598 04F2                           l1782 01FE                           l1766 01AC  
                         l1758 0152                           l1790 021A                           l1776 01EE  
                         l1778 01F4                           u1020 017A                           u1030 018C  
                         u1022 017C                           u1032 018E                           u1127 0468  
                         u1137 054A                           _LATB 000F8A                           i2l42 006C  
                         _main 00AC                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0032                           _stop 041C                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00A8  
                 ___param_bank 000010                          ?_main 0001                __end_of___awdiv 0530  
                        ?_stop 0026                ___awdiv@divisor 0017                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                  _initRFID$1264 000F                ___awdiv@counter 0019  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _TRISC 000F94  
                        _TXREG 000FAD                          main@i 006D                          tablat 000FF5  
                        status 000FD8         __size_of_ScanWithRange 001C                __initialization 05E0  
                 __end_of_main 0234                   __end_of_stop 04AC                 delay_tenth_s@i 0011  
               __CFG_OSC$IRCIO 000000            VerifySignal@hexByte 0018                         ??_main 002F  
                       ??_stop 002A                  __activetblptr 000002                  ?_initMotorPWM 0001  
                 ?_setMotorPWM 001D               ___awdiv@dividend 0015                         i2l1456 0068  
                       i2l1458 006A                 __CFG_WDTEN$OFF 000000          __end_of_delay_tenth_s 0568  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                       ___wmul 059A                      ??___awdiv 0019               __end_of_initRFID 05E0  
                       clear_0 05E6               ___awdiv@quotient 001B                 ??_initMotorPWM 000F  
                _ScanWithRange 05FC                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 0026                         stop@mR 0028  
                   __accesstop 0060        __end_of__initialization 05EE                  ___rparam_used 000001  
               __pcstackCOMRAM 0001                 ?_ScanWithRange 002A           VerifySignal@checksum 0017  
__size_of_InterruptHandlerHigh 00A0     delay_tenth_s@tenth_seconds 0010                     __pbssBANK0 0080  
                      ?___wmul 000F                        _CAP1CON 000F63                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                      ?_initRFID 0001           __size_of_setMotorPWM 0134  
         __end_of_initMotorPWM 059A                        __Hparam 0000                        __Lparam 0000  
                      ___awdiv 04AC                __size_of___wmul 0026                        __pcinit 05E0  
              ??_ScanWithRange 002F                        __ramtop 0300                        __ptext0 00AC  
                      __ptext1 05C0                        __ptext2 0568                        __ptext3 0368  
                      __ptext4 05FC                        __ptext5 041C                        __ptext6 0234  
                      __ptext7 059A                        __ptext8 04AC                        __ptext9 0530  
                ?_VerifySignal 000F           end_of_initialization 05EE             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                 ??_VerifySignal 0011                      _TXSTAbits 000FAC  
                   main@motorL 006E                     main@motorR 0077                 _ReceivedString 0080  
               __end_of___wmul 05C0                    _BAUDCONbits 000FAA         __size_of_delay_tenth_s 0038  
          start_initialization 05E0             VerifySignal@Signal 000F          __size_of_initMotorPWM 0032  
 __end_of_InterruptHandlerHigh 00A8                       ??___wmul 0013                   _initMotorPWM 0568  
                  __pbssCOMRAM 0031                  __pcstackBANK0 0060                  _delay_tenth_s 0530  
            __size_of_initRFID 0020                      __pintcode 0008           __end_of_VerifySignal 041C  
                     ?___awdiv 0015                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                ??_setMotorPWM 001F                 ?_delay_tenth_s 0001                 ___wmul@product 0013  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       _PIR1bits 000F9E  
                     _RCONbits 000FD0              ___wmul@multiplier 000F          __end_of_ScanWithRange 0618  
                 setMotorPWM@m 001D           _InterruptHandlerHigh 0008            __end_of_setMotorPWM 0368  
                     __Hrparam 0000                       __Lrparam 0000               __size_of___awdiv 0084  
                   _ANSEL0bits 000FB8          ?_InterruptHandlerHigh 0001                ??_delay_tenth_s 000F  
                     _initRFID 05C0                  __size_of_main 0188                  __size_of_stop 0090  
        __size_of_VerifySignal 00B4                       int$flags 0032                       main@mode 006C  
                     main@test 006A                ScanWithRange@mL 002A                ScanWithRange@mR 002C  
                VerifySignal@i 001A                     _INTCONbits 000FF2     ScanWithRange@tenth_seconds 002E  
                  _setMotorPWM 0234                   _VerifySignal 0368                       intlevel2 0000  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001  
