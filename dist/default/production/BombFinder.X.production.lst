

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 20:34:03 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           	psect	smallconst
    51  000300                     __psmallconst:
    52                           	opt stack 0
    53  000300  00                 	db	0
    54  000301                     _dpowers:
    55                           	opt stack 0
    56  000301  0001               	dw	1
    57  000303  000A               	dw	10
    58  000305  0064               	dw	100
    59  000307  03E8               	dw	1000
    60  000309  2710               	dw	10000
    61  00030B                     __end_of_dpowers:
    62                           	opt stack 0
    63  00030B                     _ClearSignalThreshold:
    64                           	opt stack 0
    65  00030B  01F4               	dw	500
    66  00030D                     __end_of_ClearSignalThreshold:
    67                           	opt stack 0
    68  00030D                     _DirectionFoundThreshold:
    69                           	opt stack 0
    70  00030D  07D0               	dw	2000
    71  00030F                     __end_of_DirectionFoundThreshold:
    72                           	opt stack 0
    73  00030F                     _DirectionFoundTolerance:
    74                           	opt stack 0
    75  00030F  03E8               	dw	1000
    76  000311                     __end_of_DirectionFoundTolerance:
    77                           	opt stack 0
    78  0000                     _ANSEL0bits	set	4024
    79  0000                     _BAUDCONbits	set	4010
    80  0000                     _CAP1BUFH	set	3945
    81  0000                     _CAP1BUFL	set	3944
    82  0000                     _CAP1CON	set	3939
    83  0000                     _CAP2BUFH	set	3943
    84  0000                     _CAP2BUFL	set	3942
    85  0000                     _CAP2CON	set	3938
    86  0000                     _INTCONbits	set	4082
    87  0000                     _IPR1bits	set	3999
    88  0000                     _LATAbits	set	3977
    89  0000                     _LATB	set	3978
    90  0000                     _LATCbits	set	3979
    91  0000                     _LATDbits	set	3980
    92  0000                     _LATEbits	set	3981
    93  0000                     _OSCCON	set	4051
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _PIE1bits	set	3997
    96  0000                     _PIR1bits	set	3998
    97  0000                     _PTCON0	set	3967
    98  0000                     _PTCON1	set	3966
    99  0000                     _PTPERH	set	3962
   100  0000                     _PTPERL	set	3963
   101  0000                     _PWMCON0	set	3951
   102  0000                     _PWMCON1	set	3950
   103  0000                     _RCONbits	set	4048
   104  0000                     _RCREG	set	4014
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _SPBRG	set	4015
   107  0000                     _SPBRGH	set	4016
   108  0000                     _T5CON	set	4023
   109  0000                     _TRISAbits	set	3986
   110  0000                     _TRISBbits	set	3987
   111  0000                     _TRISC	set	3988
   112  0000                     _TRISCbits	set	3988
   113  0000                     _TRISDbits	set	3989
   114  0000                     _TRISEbits	set	3990
   115  0000                     _TXREG	set	4013
   116  0000                     _TXSTAbits	set	4012
   117  0000                     _PDC0H	set	3960
   118  0000                     _PDC0L	set	3961
   119  0000                     _PDC1H	set	3958
   120  0000                     _PDC1L	set	3959
   121  000311                     STR_4:
   122  000311  20                 	db	32
   123  000312  20                 	db	32
   124  000313  20                 	db	32
   125  000314  20                 	db	32
   126  000315  20                 	db	32
   127  000316  20                 	db	32
   128  000317  46                 	db	70	;'F'
   129  000318  6F                 	db	111	;'o'
   130  000319  75                 	db	117	;'u'
   131  00031A  6E                 	db	110	;'n'
   132  00031B  64                 	db	100	;'d'
   133  00031C  20                 	db	32
   134  00031D  42                 	db	66	;'B'
   135  00031E  6F                 	db	111	;'o'
   136  00031F  6D                 	db	109	;'m'
   137  000320  62                 	db	98	;'b'
   138  000321  21                 	db	33
   139  000322  00                 	db	0
   140  000323                     STR_5:
   141  000323  20                 	db	32
   142  000324  20                 	db	32
   143  000325  20                 	db	32
   144  000326  20                 	db	32
   145  000327  20                 	db	32
   146  000328  20                 	db	32
   147  000329  47                 	db	71	;'G'
   148  00032A  6F                 	db	111	;'o'
   149  00032B  69                 	db	105	;'i'
   150  00032C  6E                 	db	110	;'n'
   151  00032D  67                 	db	103	;'g'
   152  00032E  20                 	db	32
   153  00032F  48                 	db	72	;'H'
   154  000330  6F                 	db	111	;'o'
   155  000331  6D                 	db	109	;'m'
   156  000332  65                 	db	101	;'e'
   157  000333  00                 	db	0
   158  000334                     STR_3:
   159  000334  20                 	db	32
   160  000335  20                 	db	32
   161  000336  20                 	db	32
   162  000337  20                 	db	32
   163  000338  20                 	db	32
   164  000339  20                 	db	32
   165  00033A  20                 	db	32
   166  00033B  53                 	db	83	;'S'
   167  00033C  65                 	db	101	;'e'
   168  00033D  61                 	db	97	;'a'
   169  00033E  72                 	db	114	;'r'
   170  00033F  63                 	db	99	;'c'
   171  000340  68                 	db	104	;'h'
   172  000341  69                 	db	105	;'i'
   173  000342  6E                 	db	110	;'n'
   174  000343  67                 	db	103	;'g'
   175  000344  00                 	db	0
   176  000345                     STR_2:
   177  000345  20                 	db	32
   178  000346  20                 	db	32
   179  000347  20                 	db	32
   180  000348  20                 	db	32
   181  000349  20                 	db	32
   182  00034A  20                 	db	32
   183  00034B  20                 	db	32
   184  00034C  20                 	db	32
   185  00034D  54                 	db	84	;'T'
   186  00034E  6F                 	db	111	;'o'
   187  00034F  20                 	db	32
   188  000350  47                 	db	71	;'G'
   189  000351  6F                 	db	111	;'o'
   190  000352  21                 	db	33
   191  000353  00                 	db	0
   192  000354                     STR_1:
   193  000354  20                 	db	32
   194  000355  20                 	db	32
   195  000356  20                 	db	32
   196  000357  20                 	db	32
   197  000358  20                 	db	32
   198  000359  20                 	db	32
   199  00035A  20                 	db	32
   200  00035B  20                 	db	32
   201  00035C  52                 	db	82	;'R'
   202  00035D  65                 	db	101	;'e'
   203  00035E  61                 	db	97	;'a'
   204  00035F  64                 	db	100	;'d'
   205  000360  79                 	db	121	;'y'
   206  000361  00                 	db	0
   207  000362                     STR_7:
   208  000362  20                 	db	32
   209  000363  20                 	db	32
   210  000364  20                 	db	32
   211  000365  20                 	db	32
   212  000366  20                 	db	32
   213  000367  25                 	db	37
   214  000368  64                 	db	100	;'d'
   215  000369  2C                 	db	44
   216  00036A  20                 	db	32
   217  00036B  25                 	db	37
   218  00036C  64                 	db	100	;'d'
   219  00036D  00                 	db	0
   220  0000                     
   221                           ; #config settings
   222  00036E  00                 	db	0	; dummy byte at the end
   223  0000                     
   224                           	psect	cinit
   225  001DA2                     __pcinit:
   226                           	opt stack 0
   227  001DA2                     start_initialization:
   228                           	opt stack 0
   229  001DA2                     __initialization:
   230                           	opt stack 0
   231                           
   232                           ; Clear objects allocated to BANK1 (17 bytes)
   233  001DA2  EE01  F0E8         	lfsr	0,__pbssBANK1
   234  001DA6  0E11               	movlw	17
   235  001DA8                     clear_0:
   236  001DA8  6AEE               	clrf	postinc0,c
   237  001DAA  06E8               	decf	wreg,f,c
   238  001DAC  E1FD               	bnz	clear_0
   239                           
   240                           ; Clear objects allocated to BANK0 (16 bytes)
   241  001DAE  EE00  F0A4         	lfsr	0,__pbssBANK0
   242  001DB2  0E10               	movlw	16
   243  001DB4                     clear_1:
   244  001DB4  6AEE               	clrf	postinc0,c
   245  001DB6  06E8               	decf	wreg,f,c
   246  001DB8  E1FD               	bnz	clear_1
   247                           
   248                           ; Clear objects allocated to COMRAM (2 bytes)
   249  001DBA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   250  001DBC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   251  001DBE                     end_of_initialization:
   252                           	opt stack 0
   253  001DBE                     __end_of__initialization:
   254                           	opt stack 0
   255  001DBE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   256  001DC0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   257  001DC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   258  001DC4  6EF8               	movwf	tblptru,c
   259  001DC6  0100               	movlb	0
   260  001DC8  EF62  F005         	goto	_main	;jump to C main() function
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssCOMRAM
   266  00003A                     __pbssCOMRAM:
   267                           	opt stack 0
   268  00003A                     _i:
   269                           	opt stack 0
   270  00003A                     	ds	1
   271  00003B                     _mode:
   272                           	opt stack 0
   273  00003B                     	ds	1
   274                           tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           	psect	bssBANK0
   279  0000A4                     __pbssBANK0:
   280                           	opt stack 0
   281  0000A4                     ScanIR@F3878:
   282                           	opt stack 0
   283  0000A4                     	ds	4
   284  0000A8                     ScanWithRange@F3887:
   285                           	opt stack 0
   286  0000A8                     	ds	4
   287  0000AC                     ScanWithRange@F3889:
   288                           	opt stack 0
   289  0000AC                     	ds	4
   290  0000B0                     ScanWithRange@F3891:
   291                           	opt stack 0
   292  0000B0                     	ds	4
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  0001E8                     __pbssBANK1:
   299                           	opt stack 0
   300  0001E8                     _RFID_Read:
   301                           	opt stack 0
   302  0001E8                     	ds	1
   303  0001E9                     _ReceivedString:
   304                           	opt stack 0
   305  0001E9                     	ds	16
   306                           tblptru	equ	0xFF8
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	cstackBANK1
   311  000100                     __pcstackBANK1:
   312                           	opt stack 0
   313  000100                     main@MoveType:
   314                           	opt stack 0
   315                           
   316                           ; 100 bytes @ 0x0
   317  000100                     	ds	100
   318  000164                     main@MoveTime:
   319                           	opt stack 0
   320                           
   321                           ; 100 bytes @ 0x64
   322  000164                     	ds	100
   323  0001C8                     main@Message:
   324                           	opt stack 0
   325                           
   326                           ; 10 bytes @ 0xC8
   327  0001C8                     	ds	10
   328  0001D2                     main@ScanAngle:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0xD2
   332  0001D2                     	ds	1
   333  0001D3                     main@DirectionFound:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0xD3
   337  0001D3                     	ds	1
   338  0001D4                     main@i:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0xD4
   342  0001D4                     	ds	1
   343  0001D5                     main@Move:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0xD5
   347  0001D5                     	ds	1
   348  0001D6                     main@mL:
   349                           	opt stack 0
   350                           
   351                           ; 9 bytes @ 0xD6
   352  0001D6                     	ds	9
   353  0001DF                     main@mR:
   354                           	opt stack 0
   355                           
   356                           ; 9 bytes @ 0xDF
   357  0001DF                     	ds	9
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     setMotorPWM@PWMduty:
   366                           	opt stack 0
   367  000060                     sprintf@ap:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x0
   371  000060                     	ds	2
   372  000062                     sprintf@flag:
   373                           	opt stack 0
   374  000062                     stop@mL:
   375                           	opt stack 0
   376  000062                     fullSpeedAhead@mL:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x2
   380  000062                     	ds	1
   381  000063                     sprintf@prec:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x3
   385  000063                     	ds	1
   386  000064                     stop@mR:
   387                           	opt stack 0
   388  000064                     fullSpeedAhead@mR:
   389                           	opt stack 0
   390  000064                     sprintf@val:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x4
   394  000064                     	ds	2
   395  000066                     sprintf@c:
   396                           	opt stack 0
   397  000066                     turnLeft@mL:
   398                           	opt stack 0
   399  000066                     turnRight@mL:
   400                           	opt stack 0
   401  000066                     fullSpeedBack@mL:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x6
   405  000066                     	ds	2
   406  000068                     turnLeft@mR:
   407                           	opt stack 0
   408  000068                     turnRight@mR:
   409                           	opt stack 0
   410  000068                     fullSpeedBack@mR:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x8
   414  000068                     	ds	2
   415  00006A                     ScanIR@mL:
   416                           	opt stack 0
   417  00006A                     ScanWithRange@mL:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0xA
   421  00006A                     	ds	2
   422  00006C                     ScanIR@mR:
   423                           	opt stack 0
   424  00006C                     ScanWithRange@mR:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xC
   428  00006C                     	ds	2
   429  00006E                     ScanWithRange@tenth_seconds:
   430                           	opt stack 0
   431  00006E                     ScanIR@Move:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xE
   435  00006E                     	ds	1
   436  00006F                     ScanWithRange@MoveTimeEntry:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xF
   440  00006F                     	ds	1
   441  000070                     ScanIR@MoveTime:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x10
   445  000070                     	ds	1
   446  000071                     ??_ScanWithRange:
   447                           
   448                           ; 0 bytes @ 0x11
   449  000071                     	ds	1
   450  000072                     ScanIR@MoveType:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x12
   454  000072                     	ds	1
   455  000073                     ScanWithRange@ResultFalseL:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x13
   459  000073                     	ds	1
   460  000074                     ??_ScanIR:
   461  000074                     ScanWithRange@ResultFalseC:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x14
   465  000074                     	ds	1
   466  000075                     ScanWithRange@ResultFalseR:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x15
   470  000075                     	ds	1
   471  000076                     ScanWithRange@SensorResultL:
   472                           	opt stack 0
   473  000076                     ScanIR@buf:
   474                           	opt stack 0
   475                           
   476                           ; 40 bytes @ 0x16
   477  000076                     	ds	4
   478  00007A                     ScanWithRange@SensorResultC:
   479                           	opt stack 0
   480                           
   481                           ; 4 bytes @ 0x1A
   482  00007A                     	ds	4
   483  00007E                     ScanWithRange@SensorResultR:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x1E
   487  00007E                     	ds	32
   488  00009E                     ScanIR@SensorResult:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x3E
   492  00009E                     	ds	4
   493  0000A2                     ??_main:
   494                           
   495                           ; 0 bytes @ 0x42
   496  0000A2                     	ds	2
   497                           tblptru	equ	0xFF8
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           
   501                           	psect	cstackCOMRAM
   502  000001                     __pcstackCOMRAM:
   503                           	opt stack 0
   504  000001                     ??i2_delay_tenth_s:
   505                           
   506                           ; 0 bytes @ 0x0
   507  000001                     	ds	1
   508  000002                     i2delay_tenth_s@tenth_seconds:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1
   512  000002                     	ds	1
   513  000003                     i2delay_tenth_s@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2
   517  000003                     	ds	2
   518  000005                     ??_InterruptHandlerHigh:
   519                           
   520                           ; 0 bytes @ 0x4
   521  000005                     	ds	14
   522  000013                     ??_InterruptHandlerLow:
   523                           
   524                           ; 0 bytes @ 0x12
   525  000013                     	ds	17
   526  000024                     ??_delay_tenth_s:
   527  000024                     ??_LCDout:
   528  000024                     ?_grabLeftIR:
   529                           	opt stack 0
   530  000024                     ?_grabRightIR:
   531                           	opt stack 0
   532  000024                     ?___wmul:
   533                           	opt stack 0
   534  000024                     ?___lwdiv:
   535                           	opt stack 0
   536  000024                     enableSensor@status:
   537                           	opt stack 0
   538  000024                     VerifySignal@Signal:
   539                           	opt stack 0
   540  000024                     ___wmul@multiplier:
   541                           	opt stack 0
   542  000024                     ___lwdiv@dividend:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x23
   546  000024                     	ds	1
   547  000025                     delay_tenth_s@tenth_seconds:
   548                           	opt stack 0
   549  000025                     enableSensor@sensor:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x24
   553  000025                     	ds	1
   554  000026                     ??_VerifySignal:
   555  000026                     ??_grabLeftIR:
   556  000026                     ??_grabRightIR:
   557  000026                     delay_tenth_s@i:
   558                           	opt stack 0
   559  000026                     ___wmul@multiplicand:
   560                           	opt stack 0
   561  000026                     ___lwdiv@divisor:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x25
   565  000026                     	ds	1
   566  000027                     LCDout@number:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x26
   570  000027                     	ds	1
   571  000028                     SendLCD@type:
   572                           	opt stack 0
   573  000028                     ___wmul@product:
   574                           	opt stack 0
   575  000028                     ___lwdiv@quotient:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x27
   579  000028                     	ds	1
   580  000029                     SendLCD@Byte:
   581                           	opt stack 0
   582  000029                     grabRightIR@IR_signal:
   583                           	opt stack 0
   584  000029                     grabLeftIR@IR_signal:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x28
   588  000029                     	ds	1
   589  00002A                     ??_initLCD:
   590  00002A                     ?___awdiv:
   591                           	opt stack 0
   592  00002A                     SetLine@line:
   593                           	opt stack 0
   594  00002A                     ___lwdiv@counter:
   595                           	opt stack 0
   596  00002A                     LCD_String@string:
   597                           	opt stack 0
   598  00002A                     ___awdiv@dividend:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x29
   602  00002A                     	ds	1
   603  00002B                     ?___lwmod:
   604                           	opt stack 0
   605  00002B                     grabRightIR@i:
   606                           	opt stack 0
   607  00002B                     grabLeftIR@i:
   608                           	opt stack 0
   609  00002B                     ___lwmod@dividend:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x2A
   613  00002B                     	ds	1
   614  00002C                     VerifySignal@checksum:
   615                           	opt stack 0
   616  00002C                     ___awdiv@divisor:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x2B
   620  00002C                     	ds	1
   621  00002D                     VerifySignal@hexByte:
   622                           	opt stack 0
   623  00002D                     ___lwmod@divisor:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x2C
   627  00002D                     	ds	1
   628  00002E                     ___awdiv@counter:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x2D
   632  00002E                     	ds	1
   633  00002F                     VerifySignal@i:
   634                           	opt stack 0
   635  00002F                     ___awdiv@sign:
   636                           	opt stack 0
   637  00002F                     ___lwmod@counter:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x2E
   641  00002F                     	ds	1
   642  000030                     ?_sprintf:
   643                           	opt stack 0
   644  000030                     sprintf@sp:
   645                           	opt stack 0
   646  000030                     ___awdiv@quotient:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x2F
   650  000030                     	ds	2
   651  000032                     setMotorPWM@m:
   652                           	opt stack 0
   653  000032                     sprintf@f:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x31
   657  000032                     	ds	2
   658  000034                     ??_setMotorPWM:
   659                           
   660                           ; 0 bytes @ 0x33
   661  000034                     	ds	4
   662  000038                     ??_sprintf:
   663                           
   664                           ; 0 bytes @ 0x37
   665  000038                     	ds	1
   666  000039                     
   667                           ; 0 bytes @ 0x38
   668  000039                     	ds	1
   669  00003A                     tblptru	equ	0xFF8
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           
   673                           ; 0 bytes @ 0x39
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 52 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   684 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   685 ;;  Message        10  200[BANK1 ] unsigned char [10]
   686 ;;  mR              9  223[BANK1 ] struct DC_motor
   687 ;;  mL              9  214[BANK1 ] struct DC_motor
   688 ;;  Move            1  213[BANK1 ] unsigned char 
   689 ;;  i               1  212[BANK1 ] unsigned char 
   690 ;;  DirectionFou    1  211[BANK1 ] char 
   691 ;;  ScanAngle       1  210[BANK1 ] unsigned char 
   692 ;; Return value:  Size  Location     Type
   693 ;;		None               void
   694 ;; Registers used:
   695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   701 ;;      Params:         0       0       0       0
   702 ;;      Locals:         0       0     232       0
   703 ;;      Temps:          0       2       0       0
   704 ;;      Totals:         0       2     232       0
   705 ;;Total ram usage:      234 bytes
   706 ;; Hardware stack levels required when called:    8
   707 ;; This function calls:
   708 ;;		_LCD_String
   709 ;;		_ScanIR
   710 ;;		_ScanWithRange
   711 ;;		_SetLine
   712 ;;		_VerifySignal
   713 ;;		_delay_tenth_s
   714 ;;		_enableSensor
   715 ;;		_fullSpeedAhead
   716 ;;		_fullSpeedBack
   717 ;;		_initIR
   718 ;;		_initInterrupts
   719 ;;		_initLCD
   720 ;;		_initMotorPWM
   721 ;;		_initRFID
   722 ;;		_stop
   723 ;; This function is called by:
   724 ;;		Startup code after reset
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text0
   729  000AC4                     __ptext0:
   730                           	opt stack 0
   731  000AC4                     _main:
   732                           	opt stack 23
   733                           
   734                           ;main.c: 55: unsigned char Message[10];
   735                           ;main.c: 56: unsigned char i=0;
   736                           
   737                           ;incstack = 0
   738  000AC4  0E00               	movlw	0
   739  000AC6  0101               	movlb	1	; () banked
   740  000AC8  6FD4               	movwf	main@i& (0+255),b
   741                           
   742                           ;main.c: 57: signed char DirectionFound=0;
   743  000ACA  0E00               	movlw	0
   744  000ACC  0101               	movlb	1	; () banked
   745  000ACE  6FD3               	movwf	main@DirectionFound& (0+255),b
   746                           
   747                           ;main.c: 58: char MoveTime[100];
   748                           ;main.c: 59: char MoveType[100];
   749                           ;main.c: 60: char Move=0;
   750  000AD0  0E00               	movlw	0
   751  000AD2  0101               	movlb	1	; () banked
   752  000AD4  6FD5               	movwf	main@Move& (0+255),b
   753                           
   754                           ;main.c: 62: unsigned char ScanAngle=6;
   755  000AD6  0E06               	movlw	6
   756  000AD8  0101               	movlb	1	; () banked
   757  000ADA  6FD2               	movwf	main@ScanAngle& (0+255),b
   758                           
   759                           ; BSR set to: 1
   760                           ;main.c: 65: initInterrupts();
   761  000ADC  EC2B  F00F         	call	_initInterrupts	;wreg free
   762                           
   763                           ;main.c: 68: struct DC_motor mL, mR;
   764                           ;main.c: 69: mL.power=0;
   765  000AE0  0E00               	movlw	0
   766  000AE2  0101               	movlb	1	; () banked
   767  000AE4  6FD6               	movwf	main@mL& (0+255),b
   768                           
   769                           ; BSR set to: 1
   770                           ;main.c: 70: mL.direction=1;
   771  000AE6  0E01               	movlw	1
   772  000AE8  0101               	movlb	1	; () banked
   773  000AEA  6FD7               	movwf	(main@mL+1)& (0+255),b
   774                           
   775                           ; BSR set to: 1
   776                           ;main.c: 71: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   777  000AEC  0E79               	movlw	121
   778  000AEE  0101               	movlb	1	; () banked
   779  000AF0  6FD8               	movwf	(main@mL+2)& (0+255),b
   780  000AF2  0E0F               	movlw	15
   781  000AF4  0101               	movlb	1	; () banked
   782  000AF6  6FD9               	movwf	(main@mL+3)& (0+255),b
   783                           
   784                           ; BSR set to: 1
   785                           ;main.c: 72: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   786  000AF8  0E78               	movlw	120
   787  000AFA  0101               	movlb	1	; () banked
   788  000AFC  6FDA               	movwf	(main@mL+4)& (0+255),b
   789  000AFE  0E0F               	movlw	15
   790  000B00  0101               	movlb	1	; () banked
   791  000B02  6FDB               	movwf	(main@mL+5)& (0+255),b
   792                           
   793                           ; BSR set to: 1
   794                           ;main.c: 73: mL.dir_pin=0;
   795  000B04  0E00               	movlw	0
   796  000B06  0101               	movlb	1	; () banked
   797  000B08  6FDC               	movwf	(main@mL+6)& (0+255),b
   798                           
   799                           ; BSR set to: 1
   800                           ;main.c: 74: mL.PWMperiod=199;
   801  000B0A  0E00               	movlw	0
   802  000B0C  0101               	movlb	1	; () banked
   803  000B0E  6FDE               	movwf	(main@mL+8)& (0+255),b
   804  000B10  0EC7               	movlw	199
   805  000B12  6FDD               	movwf	(main@mL+7)& (0+255),b
   806                           
   807                           ; BSR set to: 1
   808                           ;main.c: 76: mR.power=0;
   809  000B14  0E00               	movlw	0
   810  000B16  0101               	movlb	1	; () banked
   811  000B18  6FDF               	movwf	main@mR& (0+255),b
   812                           
   813                           ; BSR set to: 1
   814                           ;main.c: 77: mR.direction=1;
   815  000B1A  0E01               	movlw	1
   816  000B1C  0101               	movlb	1	; () banked
   817  000B1E  6FE0               	movwf	(main@mR+1)& (0+255),b
   818                           
   819                           ; BSR set to: 1
   820                           ;main.c: 78: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   821  000B20  0E77               	movlw	119
   822  000B22  0101               	movlb	1	; () banked
   823  000B24  6FE1               	movwf	(main@mR+2)& (0+255),b
   824  000B26  0E0F               	movlw	15
   825  000B28  0101               	movlb	1	; () banked
   826  000B2A  6FE2               	movwf	(main@mR+3)& (0+255),b
   827                           
   828                           ; BSR set to: 1
   829                           ;main.c: 79: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   830  000B2C  0E76               	movlw	118
   831  000B2E  0101               	movlb	1	; () banked
   832  000B30  6FE3               	movwf	(main@mR+4)& (0+255),b
   833  000B32  0E0F               	movlw	15
   834  000B34  0101               	movlb	1	; () banked
   835  000B36  6FE4               	movwf	(main@mR+5)& (0+255),b
   836                           
   837                           ; BSR set to: 1
   838                           ;main.c: 80: mR.dir_pin=2;
   839  000B38  0E02               	movlw	2
   840  000B3A  0101               	movlb	1	; () banked
   841  000B3C  6FE5               	movwf	(main@mR+6)& (0+255),b
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 81: mR.PWMperiod=199;
   845  000B3E  0E00               	movlw	0
   846  000B40  0101               	movlb	1	; () banked
   847  000B42  6FE7               	movwf	(main@mR+8)& (0+255),b
   848  000B44  0EC7               	movlw	199
   849  000B46  6FE6               	movwf	(main@mR+7)& (0+255),b
   850                           
   851                           ; BSR set to: 1
   852                           ;main.c: 83: OSCCON = 0x72;
   853  000B48  0E72               	movlw	114
   854  000B4A  6ED3               	movwf	4051,c	;volatile
   855  000B4C                     l73:
   856  000B4C  B4D3               	btfsc	4051,2,c	;volatile
   857  000B4E  D1CD               	goto	l3565
   858  000B50  D7FD               	goto	l73
   859  000B52                     l3441:
   860                           
   861                           ;main.c: 95: stop(&mL, &mR);
   862  000B52  0ED6               	movlw	low main@mL
   863  000B54  0100               	movlb	0	; () banked
   864  000B56  6F62               	movwf	stop@mL& (0+255),b
   865  000B58  0E01               	movlw	high main@mL
   866  000B5A  0100               	movlb	0	; () banked
   867  000B5C  6F63               	movwf	(stop@mL+1)& (0+255),b
   868  000B5E  0EDF               	movlw	low main@mR
   869  000B60  0100               	movlb	0	; () banked
   870  000B62  6F64               	movwf	stop@mR& (0+255),b
   871  000B64  0E01               	movlw	high main@mR
   872  000B66  0100               	movlb	0	; () banked
   873  000B68  6F65               	movwf	(stop@mR+1)& (0+255),b
   874  000B6A  ECF1  F00B         	call	_stop	;wreg free
   875                           
   876                           ;main.c: 97: SetLine(1);
   877  000B6E  0E01               	movlw	1
   878  000B70  ECA1  F00E         	call	_SetLine
   879                           
   880                           ;main.c: 98: LCD_String("        Ready");
   881  000B74  0E54               	movlw	low STR_1
   882  000B76  6E2A               	movwf	LCD_String@string,c
   883  000B78  0E03               	movlw	high STR_1
   884  000B7A  6E2B               	movwf	LCD_String@string+1,c
   885  000B7C  EC6C  F00D         	call	_LCD_String	;wreg free
   886                           
   887                           ;main.c: 99: SetLine(2);
   888  000B80  0E02               	movlw	2
   889  000B82  ECA1  F00E         	call	_SetLine
   890                           
   891                           ;main.c: 100: LCD_String("        To Go!");
   892  000B86  0E45               	movlw	low STR_2
   893  000B88  6E2A               	movwf	LCD_String@string,c
   894  000B8A  0E03               	movlw	high STR_2
   895  000B8C  6E2B               	movwf	LCD_String@string+1,c
   896  000B8E  EC6C  F00D         	call	_LCD_String	;wreg free
   897                           
   898                           ;main.c: 102: break;
   899  000B92  D1AB               	goto	l3565
   900  000B94                     l3451:
   901                           
   902                           ;main.c: 107: initMotorPWM();
   903  000B94  EC88  F00E         	call	_initMotorPWM	;wreg free
   904                           
   905                           ;main.c: 108: initRFID();
   906  000B98  EC1D  F00F         	call	_initRFID	;wreg free
   907                           
   908                           ;main.c: 109: initLCD();
   909  000B9C  EC39  F00B         	call	_initLCD	;wreg free
   910                           
   911                           ;main.c: 110: initIR();
   912  000BA0  EC0C  F00F         	call	_initIR	;wreg free
   913                           
   914                           ;main.c: 112: enableSensor(0, 1);
   915  000BA4  0E01               	movlw	1
   916  000BA6  6E24               	movwf	enableSensor@status,c
   917  000BA8  0E00               	movlw	0
   918  000BAA  ECE6  F00E         	call	_enableSensor
   919                           
   920                           ;main.c: 113: enableSensor(1, 1);
   921  000BAE  0E01               	movlw	1
   922  000BB0  6E24               	movwf	enableSensor@status,c
   923  000BB2  0E01               	movlw	1
   924  000BB4  ECE6  F00E         	call	_enableSensor
   925                           
   926                           ;main.c: 116: fullSpeedAhead(&mL, &mR);
   927  000BB8  0ED6               	movlw	low main@mL
   928  000BBA  0100               	movlb	0	; () banked
   929  000BBC  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
   930  000BBE  0E01               	movlw	high main@mL
   931  000BC0  0100               	movlb	0	; () banked
   932  000BC2  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
   933  000BC4  0EDF               	movlw	low main@mR
   934  000BC6  0100               	movlb	0	; () banked
   935  000BC8  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
   936  000BCA  0E01               	movlw	high main@mR
   937  000BCC  0100               	movlb	0	; () banked
   938  000BCE  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
   939  000BD0  EC34  F00D         	call	_fullSpeedAhead	;wreg free
   940                           
   941                           ;main.c: 117: delay_tenth_s(1);
   942  000BD4  0E01               	movlw	1
   943  000BD6  EC50  F00E         	call	_delay_tenth_s
   944                           
   945                           ;main.c: 119: mode=-1;
   946  000BDA  683B               	setf	_mode,c	;volatile
   947                           
   948                           ;main.c: 121: break;
   949  000BDC  D186               	goto	l3565
   950  000BDE                     l3467:
   951                           
   952                           ;main.c: 129: SetLine(1);
   953  000BDE  0E01               	movlw	1
   954  000BE0  ECA1  F00E         	call	_SetLine
   955                           
   956                           ;main.c: 130: LCD_String("       Searching");
   957  000BE4  0E34               	movlw	low STR_3
   958  000BE6  6E2A               	movwf	LCD_String@string,c
   959  000BE8  0E03               	movlw	high STR_3
   960  000BEA  6E2B               	movwf	LCD_String@string+1,c
   961  000BEC  EC6C  F00D         	call	_LCD_String	;wreg free
   962                           
   963                           ;main.c: 132: if (DirectionFound==-1) {
   964  000BF0  0101               	movlb	1	; () banked
   965  000BF2  29D3               	incf	main@DirectionFound& (0+255),w,b
   966  000BF4  A4D8               	btfss	status,2,c
   967  000BF6  D02E               	goto	l3483
   968                           
   969                           ; BSR set to: 1
   970                           ;main.c: 137: fullSpeedAhead(&mL, &mR);
   971  000BF8  0ED6               	movlw	low main@mL
   972  000BFA  0100               	movlb	0	; () banked
   973  000BFC  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
   974  000BFE  0E01               	movlw	high main@mL
   975  000C00  0100               	movlb	0	; () banked
   976  000C02  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
   977  000C04  0EDF               	movlw	low main@mR
   978  000C06  0100               	movlb	0	; () banked
   979  000C08  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
   980  000C0A  0E01               	movlw	high main@mR
   981  000C0C  0100               	movlb	0	; () banked
   982  000C0E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
   983  000C10  EC34  F00D         	call	_fullSpeedAhead	;wreg free
   984                           
   985                           ;main.c: 138: delay_tenth_s(ScanAngle);
   986  000C14  0101               	movlb	1	; () banked
   987  000C16  51D2               	movf	main@ScanAngle& (0+255),w,b
   988  000C18  EC50  F00E         	call	_delay_tenth_s
   989                           
   990                           ;main.c: 139: stop(&mL,&mR);
   991  000C1C  0ED6               	movlw	low main@mL
   992  000C1E  0100               	movlb	0	; () banked
   993  000C20  6F62               	movwf	stop@mL& (0+255),b
   994  000C22  0E01               	movlw	high main@mL
   995  000C24  0100               	movlb	0	; () banked
   996  000C26  6F63               	movwf	(stop@mL+1)& (0+255),b
   997  000C28  0EDF               	movlw	low main@mR
   998  000C2A  0100               	movlb	0	; () banked
   999  000C2C  6F64               	movwf	stop@mR& (0+255),b
  1000  000C2E  0E01               	movlw	high main@mR
  1001  000C30  0100               	movlb	0	; () banked
  1002  000C32  6F65               	movwf	(stop@mR+1)& (0+255),b
  1003  000C34  ECF1  F00B         	call	_stop	;wreg free
  1004                           
  1005                           ;main.c: 140: DirectionFound=0;
  1006  000C38  0E00               	movlw	0
  1007  000C3A  0101               	movlb	1	; () banked
  1008  000C3C  6FD3               	movwf	main@DirectionFound& (0+255),b
  1009                           
  1010                           ; BSR set to: 1
  1011                           ;main.c: 141: MoveType[Move]=0;
  1012  000C3E  0101               	movlb	1	; () banked
  1013  000C40  51D5               	movf	main@Move& (0+255),w,b
  1014  000C42  0D01               	mullw	1
  1015  000C44  0E00               	movlw	low main@MoveType
  1016  000C46  24F3               	addwf	prodl,w,c
  1017  000C48  6ED9               	movwf	fsr2l,c
  1018  000C4A  0E01               	movlw	high main@MoveType
  1019  000C4C  20F4               	addwfc	prodh,w,c
  1020  000C4E  6EDA               	movwf	fsr2h,c
  1021  000C50  0E00               	movlw	0
  1022  000C52  D127               	goto	L2
  1023  000C54                     l3483:
  1024                           
  1025                           ; BSR set to: 1
  1026  000C54  0101               	movlb	1	; () banked
  1027  000C56  51D3               	movf	main@DirectionFound& (0+255),w,b
  1028  000C58  0101               	movlb	1	; () banked
  1029  000C5A  A4D8               	btfss	status,2,c
  1030  000C5C  D01E               	goto	l3489
  1031                           
  1032                           ; BSR set to: 1
  1033                           ;main.c: 144: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1034  000C5E  0ED6               	movlw	low main@mL
  1035  000C60  0100               	movlb	0	; () banked
  1036  000C62  6F6A               	movwf	ScanWithRange@mL& (0+255),b
  1037  000C64  0E01               	movlw	high main@mL
  1038  000C66  0100               	movlb	0	; () banked
  1039  000C68  6F6B               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1040  000C6A  0EDF               	movlw	low main@mR
  1041  000C6C  0100               	movlb	0	; () banked
  1042  000C6E  6F6C               	movwf	ScanWithRange@mR& (0+255),b
  1043  000C70  0E01               	movlw	high main@mR
  1044  000C72  0100               	movlb	0	; () banked
  1045  000C74  6F6D               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1046  000C76  C1D2  F06E         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
  1047  000C7A  0101               	movlb	1	; () banked
  1048  000C7C  51D5               	movf	main@Move& (0+255),w,b
  1049  000C7E  0D01               	mullw	1
  1050  000C80  0E64               	movlw	low main@MoveTime
  1051  000C82  24F3               	addwf	prodl,w,c
  1052  000C84  0100               	movlb	0	; () banked
  1053  000C86  6F6F               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1054  000C88  0E01               	movlw	high main@MoveTime
  1055  000C8A  20F4               	addwfc	prodh,w,c
  1056  000C8C  0100               	movlb	0	; () banked
  1057  000C8E  6F70               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1058  000C90  ECB8  F001         	call	_ScanWithRange	;wreg free
  1059  000C94  0101               	movlb	1	; () banked
  1060  000C96  6FD3               	movwf	main@DirectionFound& (0+255),b
  1061  000C98  D02E               	goto	l3497
  1062  000C9A                     l3489:
  1063                           
  1064                           ; BSR set to: 1
  1065  000C9A  0101               	movlb	1	; () banked
  1066  000C9C  05D3               	decf	main@DirectionFound& (0+255),w,b
  1067  000C9E  A4D8               	btfss	status,2,c
  1068  000CA0  D023               	goto	l3493
  1069                           
  1070                           ; BSR set to: 1
  1071                           ;main.c: 148: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1072  000CA2  0ED6               	movlw	low main@mL
  1073  000CA4  0100               	movlb	0	; () banked
  1074  000CA6  6F6A               	movwf	ScanIR@mL& (0+255),b
  1075  000CA8  0E01               	movlw	high main@mL
  1076  000CAA  0100               	movlb	0	; () banked
  1077  000CAC  6F6B               	movwf	(ScanIR@mL+1)& (0+255),b
  1078  000CAE  0EDF               	movlw	low main@mR
  1079  000CB0  0100               	movlb	0	; () banked
  1080  000CB2  6F6C               	movwf	ScanIR@mR& (0+255),b
  1081  000CB4  0E01               	movlw	high main@mR
  1082  000CB6  0100               	movlb	0	; () banked
  1083  000CB8  6F6D               	movwf	(ScanIR@mR+1)& (0+255),b
  1084  000CBA  0ED5               	movlw	low main@Move
  1085  000CBC  0100               	movlb	0	; () banked
  1086  000CBE  6F6E               	movwf	ScanIR@Move& (0+255),b
  1087  000CC0  0E01               	movlw	high main@Move
  1088  000CC2  0100               	movlb	0	; () banked
  1089  000CC4  6F6F               	movwf	(ScanIR@Move+1)& (0+255),b
  1090  000CC6  0E64               	movlw	low main@MoveTime
  1091  000CC8  0100               	movlb	0	; () banked
  1092  000CCA  6F70               	movwf	ScanIR@MoveTime& (0+255),b
  1093  000CCC  0E01               	movlw	high main@MoveTime
  1094  000CCE  0100               	movlb	0	; () banked
  1095  000CD0  6F71               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1096  000CD2  0E00               	movlw	low main@MoveType
  1097  000CD4  0100               	movlb	0	; () banked
  1098  000CD6  6F72               	movwf	ScanIR@MoveType& (0+255),b
  1099  000CD8  0E01               	movlw	high main@MoveType
  1100  000CDA  0100               	movlb	0	; () banked
  1101  000CDC  6F73               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1102  000CDE  EC86  F007         	call	_ScanIR	;wreg free
  1103  000CE2  0101               	movlb	1	; () banked
  1104  000CE4  6FD3               	movwf	main@DirectionFound& (0+255),b
  1105                           
  1106                           ;main.c: 149: } else if (DirectionFound==2) {
  1107  000CE6  D0DE               	goto	l3553
  1108  000CE8                     l3493:
  1109                           
  1110                           ; BSR set to: 1
  1111  000CE8  0E02               	movlw	2
  1112  000CEA  0101               	movlb	1	; () banked
  1113  000CEC  19D3               	xorwf	main@DirectionFound& (0+255),w,b
  1114  000CEE  A4D8               	btfss	status,2,c
  1115  000CF0  D0D9               	goto	l3553
  1116                           
  1117                           ; BSR set to: 1
  1118                           ;main.c: 151: mode=2;
  1119  000CF2  0E02               	movlw	2
  1120  000CF4  6E3B               	movwf	_mode,c	;volatile
  1121  000CF6                     l3497:
  1122                           
  1123                           ; BSR set to: 1
  1124                           ;main.c: 152: MoveType[Move]=1;
  1125  000CF6  0101               	movlb	1	; () banked
  1126  000CF8  51D5               	movf	main@Move& (0+255),w,b
  1127  000CFA  0D01               	mullw	1
  1128  000CFC  0E00               	movlw	low main@MoveType
  1129  000CFE  24F3               	addwf	prodl,w,c
  1130  000D00  6ED9               	movwf	fsr2l,c
  1131  000D02  0E01               	movlw	high main@MoveType
  1132  000D04  20F4               	addwfc	prodh,w,c
  1133  000D06  6EDA               	movwf	fsr2h,c
  1134  000D08  0E01               	movlw	1
  1135  000D0A  D0CB               	goto	L2
  1136  000D0C                     l3501:
  1137                           
  1138                           ;main.c: 163: if (RFID_Read) {
  1139  000D0C  0101               	movlb	1	; () banked
  1140  000D0E  51E8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1141  000D10  B4D8               	btfsc	status,2,c
  1142  000D12  D09C               	goto	l3543
  1143                           
  1144                           ; BSR set to: 1
  1145                           ;main.c: 164: stop(&mL, &mR);
  1146  000D14  0ED6               	movlw	low main@mL
  1147  000D16  0100               	movlb	0	; () banked
  1148  000D18  6F62               	movwf	stop@mL& (0+255),b
  1149  000D1A  0E01               	movlw	high main@mL
  1150  000D1C  0100               	movlb	0	; () banked
  1151  000D1E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1152  000D20  0EDF               	movlw	low main@mR
  1153  000D22  0100               	movlb	0	; () banked
  1154  000D24  6F64               	movwf	stop@mR& (0+255),b
  1155  000D26  0E01               	movlw	high main@mR
  1156  000D28  0100               	movlb	0	; () banked
  1157  000D2A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1158  000D2C  ECF1  F00B         	call	_stop	;wreg free
  1159                           
  1160                           ;main.c: 165: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1161  000D30  0E03               	movlw	3
  1162  000D32  0101               	movlb	1	; () banked
  1163  000D34  19F8               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1164  000D36  A4D8               	btfss	status,2,c
  1165  000D38  D002               	goto	u2820
  1166  000D3A  0E01               	movlw	1
  1167  000D3C  D001               	goto	u2822
  1168  000D3E                     u2820:
  1169  000D3E  0E00               	movlw	0
  1170  000D40                     u2822:
  1171  000D40  0100               	movlb	0	; () banked
  1172  000D42  6FA2               	movwf	??_main& (0+255),b
  1173  000D44  0E02               	movlw	2
  1174  000D46  0101               	movlb	1	; () banked
  1175  000D48  19E9               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1176  000D4A  A4D8               	btfss	status,2,c
  1177  000D4C  D002               	goto	u2830
  1178  000D4E  0E01               	movlw	1
  1179  000D50  D001               	goto	u2832
  1180  000D52                     u2830:
  1181  000D52  0E00               	movlw	0
  1182  000D54                     u2832:
  1183  000D54  0100               	movlb	0	; () banked
  1184  000D56  15A2               	andwf	??_main& (0+255),w,b
  1185  000D58  A0E8               	btfss	wreg,0,c
  1186  000D5A  D0C7               	goto	l3565
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;main.c: 166: if (VerifySignal(ReceivedString)){
  1190  000D5C  0EE9               	movlw	low _ReceivedString
  1191  000D5E  6E24               	movwf	VerifySignal@Signal,c
  1192  000D60  0E01               	movlw	high _ReceivedString
  1193  000D62  6E25               	movwf	VerifySignal@Signal+1,c
  1194  000D64  EC97  F00B         	call	_VerifySignal	;wreg free
  1195  000D68  0900               	iorlw	0
  1196  000D6A  B4D8               	btfsc	status,2,c
  1197  000D6C  D041               	goto	l3535
  1198                           
  1199                           ;main.c: 168: for (i=0; i<10; i++){
  1200  000D6E  0E00               	movlw	0
  1201  000D70  0101               	movlb	1	; () banked
  1202  000D72  6FD4               	movwf	main@i& (0+255),b
  1203  000D74                     l3511:
  1204                           
  1205                           ; BSR set to: 1
  1206  000D74  0E09               	movlw	9
  1207  000D76  0101               	movlb	1	; () banked
  1208  000D78  65D4               	cpfsgt	main@i& (0+255),b
  1209  000D7A  D001               	goto	l3515
  1210  000D7C  D020               	goto	l3521
  1211  000D7E                     l3515:
  1212                           
  1213                           ; BSR set to: 1
  1214                           ;main.c: 169: Message[i] = ReceivedString[i+1];
  1215  000D7E  0101               	movlb	1	; () banked
  1216  000D80  51D4               	movf	main@i& (0+255),w,b
  1217  000D82  0100               	movlb	0	; () banked
  1218  000D84  6FA2               	movwf	??_main& (0+255),b
  1219  000D86  6BA3               	clrf	(??_main+1)& (0+255),b
  1220  000D88  0E01               	movlw	1
  1221  000D8A  0100               	movlb	0	; () banked
  1222  000D8C  27A2               	addwf	??_main& (0+255),f,b
  1223  000D8E  0E00               	movlw	0
  1224  000D90  23A3               	addwfc	(??_main+1)& (0+255),f,b
  1225  000D92  0EE9               	movlw	low _ReceivedString
  1226  000D94  0100               	movlb	0	; () banked
  1227  000D96  25A2               	addwf	??_main& (0+255),w,b
  1228  000D98  6ED9               	movwf	fsr2l,c
  1229  000D9A  0E01               	movlw	high _ReceivedString
  1230  000D9C  0100               	movlb	0	; () banked
  1231  000D9E  21A3               	addwfc	(??_main+1)& (0+255),w,b
  1232  000DA0  6EDA               	movwf	fsr2h,c
  1233  000DA2  0101               	movlb	1	; () banked
  1234  000DA4  51D4               	movf	main@i& (0+255),w,b
  1235  000DA6  0D01               	mullw	1
  1236  000DA8  0EC8               	movlw	low main@Message
  1237  000DAA  24F3               	addwf	prodl,w,c
  1238  000DAC  6EE1               	movwf	fsr1l,c
  1239  000DAE  0E01               	movlw	high main@Message
  1240  000DB0  20F4               	addwfc	prodh,w,c
  1241  000DB2  6EE2               	movwf	fsr1h,c
  1242  000DB4  CFDF FFE7          	movff	indf2,indf1
  1243                           
  1244                           ; BSR set to: 1
  1245  000DB8  0101               	movlb	1	; () banked
  1246  000DBA  2BD4               	incf	main@i& (0+255),f,b
  1247  000DBC  D7DB               	goto	l3511
  1248  000DBE                     l3521:
  1249                           
  1250                           ; BSR set to: 1
  1251                           ;main.c: 170: }
  1252                           ;main.c: 173: for (i=0; i<16; i++) {
  1253  000DBE  0E00               	movlw	0
  1254  000DC0  0101               	movlb	1	; () banked
  1255  000DC2  6FD4               	movwf	main@i& (0+255),b
  1256  000DC4                     l3523:
  1257                           
  1258                           ; BSR set to: 1
  1259  000DC4  0E0F               	movlw	15
  1260  000DC6  0101               	movlb	1	; () banked
  1261  000DC8  65D4               	cpfsgt	main@i& (0+255),b
  1262  000DCA  D001               	goto	l3527
  1263  000DCC  D00E               	goto	l3533
  1264  000DCE                     l3527:
  1265                           
  1266                           ; BSR set to: 1
  1267                           ;main.c: 174: ReceivedString[i]=0;
  1268  000DCE  0101               	movlb	1	; () banked
  1269  000DD0  51D4               	movf	main@i& (0+255),w,b
  1270  000DD2  0D01               	mullw	1
  1271  000DD4  0EE9               	movlw	low _ReceivedString
  1272  000DD6  24F3               	addwf	prodl,w,c
  1273  000DD8  6ED9               	movwf	fsr2l,c
  1274  000DDA  0E01               	movlw	high _ReceivedString
  1275  000DDC  20F4               	addwfc	prodh,w,c
  1276  000DDE  6EDA               	movwf	fsr2h,c
  1277  000DE0  0E00               	movlw	0
  1278  000DE2  6EDF               	movwf	indf2,c
  1279                           
  1280                           ; BSR set to: 1
  1281  000DE4  0101               	movlb	1	; () banked
  1282  000DE6  2BD4               	incf	main@i& (0+255),f,b
  1283  000DE8  D7ED               	goto	l3523
  1284  000DEA                     l3533:
  1285                           
  1286                           ; BSR set to: 1
  1287                           ;main.c: 175: }
  1288                           ;main.c: 176: mode=3;
  1289  000DEA  0E03               	movlw	3
  1290  000DEC  6E3B               	movwf	_mode,c	;volatile
  1291                           
  1292                           ;main.c: 178: } else {
  1293  000DEE  D07D               	goto	l3565
  1294  000DF0                     l3535:
  1295                           
  1296                           ;main.c: 179: fullSpeedBack(&mL,&mR);
  1297  000DF0  0ED6               	movlw	low main@mL
  1298  000DF2  0100               	movlb	0	; () banked
  1299  000DF4  6F66               	movwf	fullSpeedBack@mL& (0+255),b
  1300  000DF6  0E01               	movlw	high main@mL
  1301  000DF8  0100               	movlb	0	; () banked
  1302  000DFA  6F67               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1303  000DFC  0EDF               	movlw	low main@mR
  1304  000DFE  0100               	movlb	0	; () banked
  1305  000E00  6F68               	movwf	fullSpeedBack@mR& (0+255),b
  1306  000E02  0E01               	movlw	high main@mR
  1307  000E04  0100               	movlb	0	; () banked
  1308  000E06  6F69               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1309  000E08  EC33  F00E         	call	_fullSpeedBack	;wreg free
  1310                           
  1311                           ;main.c: 180: delay_tenth_s(5);
  1312  000E0C  0E05               	movlw	5
  1313  000E0E  EC50  F00E         	call	_delay_tenth_s
  1314                           
  1315                           ;main.c: 181: stop(&mL,&mR);
  1316  000E12  0ED6               	movlw	low main@mL
  1317  000E14  0100               	movlb	0	; () banked
  1318  000E16  6F62               	movwf	stop@mL& (0+255),b
  1319  000E18  0E01               	movlw	high main@mL
  1320  000E1A  0100               	movlb	0	; () banked
  1321  000E1C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1322  000E1E  0EDF               	movlw	low main@mR
  1323  000E20  0100               	movlb	0	; () banked
  1324  000E22  6F64               	movwf	stop@mR& (0+255),b
  1325  000E24  0E01               	movlw	high main@mR
  1326  000E26  0100               	movlb	0	; () banked
  1327  000E28  6F65               	movwf	(stop@mR+1)& (0+255),b
  1328  000E2A  ECF1  F00B         	call	_stop	;wreg free
  1329                           
  1330                           ;main.c: 182: fullSpeedAhead(&mL,&mR);
  1331  000E2E  0ED6               	movlw	low main@mL
  1332  000E30  0100               	movlb	0	; () banked
  1333  000E32  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1334  000E34  0E01               	movlw	high main@mL
  1335  000E36  0100               	movlb	0	; () banked
  1336  000E38  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1337  000E3A  0EDF               	movlw	low main@mR
  1338  000E3C  0100               	movlb	0	; () banked
  1339  000E3E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1340  000E40  0E01               	movlw	high main@mR
  1341  000E42  0100               	movlb	0	; () banked
  1342  000E44  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1343  000E46  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  1344                           
  1345                           ;main.c: 183: }
  1346                           ;main.c: 184: }
  1347                           ;main.c: 185: } else {
  1348  000E4A  D04F               	goto	l3565
  1349  000E4C                     l3543:
  1350                           
  1351                           ;main.c: 186: DirectionFound=1;
  1352  000E4C  0E01               	movlw	1
  1353  000E4E  0101               	movlb	1	; () banked
  1354  000E50  6FD3               	movwf	main@DirectionFound& (0+255),b
  1355                           
  1356                           ;main.c: 187: mode=1;
  1357  000E52  0E01               	movlw	1
  1358  000E54  6E3B               	movwf	_mode,c	;volatile
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main.c: 188: fullSpeedAhead(&mL,&mR);
  1362  000E56  0ED6               	movlw	low main@mL
  1363  000E58  0100               	movlb	0	; () banked
  1364  000E5A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1365  000E5C  0E01               	movlw	high main@mL
  1366  000E5E  0100               	movlb	0	; () banked
  1367  000E60  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1368  000E62  0EDF               	movlw	low main@mR
  1369  000E64  0100               	movlb	0	; () banked
  1370  000E66  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1371  000E68  0E01               	movlw	high main@mR
  1372  000E6A  0100               	movlb	0	; () banked
  1373  000E6C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1374  000E6E  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  1375                           
  1376                           ;main.c: 189: delay_tenth_s(5);
  1377  000E72  0E05               	movlw	5
  1378  000E74  EC50  F00E         	call	_delay_tenth_s
  1379                           
  1380                           ;main.c: 190: MoveType[Move] = 0;
  1381  000E78  0101               	movlb	1	; () banked
  1382  000E7A  51D5               	movf	main@Move& (0+255),w,b
  1383  000E7C  0D01               	mullw	1
  1384  000E7E  0E00               	movlw	low main@MoveType
  1385  000E80  24F3               	addwf	prodl,w,c
  1386  000E82  6ED9               	movwf	fsr2l,c
  1387  000E84  0E01               	movlw	high main@MoveType
  1388  000E86  20F4               	addwfc	prodh,w,c
  1389  000E88  6EDA               	movwf	fsr2h,c
  1390  000E8A  0E00               	movlw	0
  1391  000E8C  6EDF               	movwf	indf2,c
  1392                           
  1393                           ; BSR set to: 1
  1394                           ;main.c: 191: MoveTime[Move] = 5;
  1395  000E8E  0101               	movlb	1	; () banked
  1396  000E90  51D5               	movf	main@Move& (0+255),w,b
  1397  000E92  0D01               	mullw	1
  1398  000E94  0E64               	movlw	low main@MoveTime
  1399  000E96  24F3               	addwf	prodl,w,c
  1400  000E98  6ED9               	movwf	fsr2l,c
  1401  000E9A  0E01               	movlw	high main@MoveTime
  1402  000E9C  20F4               	addwfc	prodh,w,c
  1403  000E9E  6EDA               	movwf	fsr2h,c
  1404  000EA0  0E05               	movlw	5
  1405  000EA2                     L2:
  1406  000EA2  6EDF               	movwf	indf2,c
  1407  000EA4                     l3553:
  1408                           
  1409                           ; BSR set to: 1
  1410                           ;main.c: 192: Move++;
  1411  000EA4  0101               	movlb	1	; () banked
  1412  000EA6  2BD5               	incf	main@Move& (0+255),f,b
  1413                           
  1414                           ; BSR set to: 1
  1415                           ;main.c: 193: }
  1416                           ;main.c: 195: break;
  1417  000EA8  D020               	goto	l3565
  1418  000EAA                     l3555:
  1419                           
  1420                           ;main.c: 200: SetLine(1);
  1421  000EAA  0E01               	movlw	1
  1422  000EAC  ECA1  F00E         	call	_SetLine
  1423                           
  1424                           ;main.c: 201: LCD_String("      Found Bomb!");
  1425  000EB0  0E11               	movlw	low STR_4
  1426  000EB2  6E2A               	movwf	LCD_String@string,c
  1427  000EB4  0E03               	movlw	high STR_4
  1428  000EB6  6E2B               	movwf	LCD_String@string+1,c
  1429  000EB8  EC6C  F00D         	call	_LCD_String	;wreg free
  1430                           
  1431                           ;main.c: 202: SetLine(2);
  1432  000EBC  0E02               	movlw	2
  1433  000EBE  ECA1  F00E         	call	_SetLine
  1434                           
  1435                           ;main.c: 203: LCD_String("      Going Home");
  1436  000EC2  0E23               	movlw	low STR_5
  1437  000EC4  6E2A               	movwf	LCD_String@string,c
  1438  000EC6  0E03               	movlw	high STR_5
  1439  000EC8  6E2B               	movwf	LCD_String@string+1,c
  1440  000ECA  EC6C  F00D         	call	_LCD_String	;wreg free
  1441                           
  1442                           ;main.c: 204: stop(&mL,&mR);
  1443  000ECE  0ED6               	movlw	low main@mL
  1444  000ED0  0100               	movlb	0	; () banked
  1445  000ED2  6F62               	movwf	stop@mL& (0+255),b
  1446  000ED4  0E01               	movlw	high main@mL
  1447  000ED6  0100               	movlb	0	; () banked
  1448  000ED8  6F63               	movwf	(stop@mL+1)& (0+255),b
  1449  000EDA  0EDF               	movlw	low main@mR
  1450  000EDC  0100               	movlb	0	; () banked
  1451  000EDE  6F64               	movwf	stop@mR& (0+255),b
  1452  000EE0  0E01               	movlw	high main@mR
  1453  000EE2  0100               	movlb	0	; () banked
  1454  000EE4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1455  000EE6  ECF1  F00B         	call	_stop	;wreg free
  1456  000EEA                     l3565:
  1457  000EEA  503B               	movf	_mode,w,c	;volatile
  1458                           
  1459                           ; Switch size 1, requested type "space"
  1460                           ; Number of cases is 5, Range of values is 0 to 255
  1461                           ; switch strategies available:
  1462                           ; Name         Instructions Cycles
  1463                           ; simple_byte           16     9 (average)
  1464                           ;	Chosen strategy is simple_byte
  1465  000EEC  0A00               	xorlw	0	; case 0
  1466  000EEE  B4D8               	btfsc	status,2,c
  1467  000EF0  D651               	goto	l3451
  1468  000EF2  0A01               	xorlw	1	; case 1
  1469  000EF4  B4D8               	btfsc	status,2,c
  1470  000EF6  D673               	goto	l3467
  1471  000EF8  0A03               	xorlw	3	; case 2
  1472  000EFA  B4D8               	btfsc	status,2,c
  1473  000EFC  D707               	goto	l3501
  1474  000EFE  0A01               	xorlw	1	; case 3
  1475  000F00  B4D8               	btfsc	status,2,c
  1476  000F02  D7D3               	goto	l3555
  1477  000F04  0AFC               	xorlw	252	; case 255
  1478  000F06  B4D8               	btfsc	status,2,c
  1479  000F08  D624               	goto	l3441
  1480  000F0A  D7EF               	goto	l3565
  1481  000F0C                     __end_of_main:
  1482                           	opt stack 0
  1483                           tblptru	equ	0xFF8
  1484                           prodh	equ	0xFF4
  1485                           prodl	equ	0xFF3
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           indf1	equ	0xFE7
  1489                           fsr1h	equ	0xFE2
  1490                           fsr1l	equ	0xFE1
  1491                           indf2	equ	0xFDF
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8
  1495                           
  1496 ;; *************** function _initRFID *****************
  1497 ;; Defined at:
  1498 ;;		line 5 in file "RFID_Reader.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;		None               void
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1512 ;;      Params:         0       0       0       0
  1513 ;;      Locals:         0       0       0       0
  1514 ;;      Temps:          0       0       0       0
  1515 ;;      Totals:         0       0       0       0
  1516 ;;Total ram usage:        0 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    3
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text1
  1527  001E3A                     __ptext1:
  1528                           	opt stack 0
  1529  001E3A                     _initRFID:
  1530                           	opt stack 27
  1531                           
  1532                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1533                           
  1534                           ;incstack = 0
  1535  001E3A  5094               	movf	3988,w,c	;volatile
  1536  001E3C  09C0               	iorlw	192
  1537  001E3E  6E94               	movwf	3988,c	;volatile
  1538                           
  1539                           ;RFID_Reader.c: 10: SPBRG=205;
  1540  001E40  0ECD               	movlw	205
  1541  001E42  6EAF               	movwf	4015,c	;volatile
  1542                           
  1543                           ;RFID_Reader.c: 11: SPBRGH=0;
  1544  001E44  0E00               	movlw	0
  1545  001E46  6EB0               	movwf	4016,c	;volatile
  1546                           
  1547                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1548  001E48  86AA               	bsf	4010,3,c	;volatile
  1549                           
  1550                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1551  001E4A  84AC               	bsf	4012,2,c	;volatile
  1552                           
  1553                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1554  001E4C  88AB               	bsf	4011,4,c	;volatile
  1555                           
  1556                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1557  001E4E  8EAB               	bsf	4011,7,c	;volatile
  1558                           
  1559                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1560  001E50  98AC               	bcf	4012,4,c	;volatile
  1561                           
  1562                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1563  001E52  9CAB               	bcf	4011,6,c	;volatile
  1564  001E54  0012               	return		;funcret
  1565  001E56                     __end_of_initRFID:
  1566                           	opt stack 0
  1567                           tblptru	equ	0xFF8
  1568                           prodh	equ	0xFF4
  1569                           prodl	equ	0xFF3
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           indf1	equ	0xFE7
  1573                           fsr1h	equ	0xFE2
  1574                           fsr1l	equ	0xFE1
  1575                           indf2	equ	0xFDF
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _initMotorPWM *****************
  1581 ;; Defined at:
  1582 ;;		line 4 in file "dc_motor.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, status,2
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1596 ;;      Params:         0       0       0       0
  1597 ;;      Locals:         0       0       0       0
  1598 ;;      Temps:          0       0       0       0
  1599 ;;      Totals:         0       0       0       0
  1600 ;;Total ram usage:        0 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    3
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text2
  1611  001D10                     __ptext2:
  1612                           	opt stack 0
  1613  001D10                     _initMotorPWM:
  1614                           	opt stack 27
  1615                           
  1616                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1617                           
  1618                           ;incstack = 0
  1619  001D10  0E00               	movlw	0
  1620  001D12  6E7F               	movwf	3967,c	;volatile
  1621                           
  1622                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1623  001D14  0E80               	movlw	128
  1624  001D16  6E7E               	movwf	3966,c	;volatile
  1625                           
  1626                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1627  001D18  0E6F               	movlw	111
  1628  001D1A  6E6F               	movwf	3951,c	;volatile
  1629                           
  1630                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1631  001D1C  0E00               	movlw	0
  1632  001D1E  6E6E               	movwf	3950,c	;volatile
  1633                           
  1634                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1635  001D20  0EC7               	movlw	199
  1636  001D22  6E7B               	movwf	3963,c	;volatile
  1637                           
  1638                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1639  001D24  0E00               	movlw	0
  1640  001D26  6E7A               	movwf	3962,c	;volatile
  1641                           
  1642                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1643  001D28  0E00               	movlw	0
  1644  001D2A  6E79               	movwf	3961,c	;volatile
  1645                           
  1646                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1647  001D2C  0E00               	movlw	0
  1648  001D2E  6E78               	movwf	3960,c	;volatile
  1649                           
  1650                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1651  001D30  0E00               	movlw	0
  1652  001D32  6E77               	movwf	3959,c	;volatile
  1653                           
  1654                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1655  001D34  0E00               	movlw	0
  1656  001D36  6E76               	movwf	3958,c	;volatile
  1657                           
  1658                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1659  001D38  9093               	bcf	3987,0,c	;volatile
  1660                           
  1661                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1662  001D3A  9293               	bcf	3987,1,c	;volatile
  1663                           
  1664                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1665  001D3C  9493               	bcf	3987,2,c	;volatile
  1666                           
  1667                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1668  001D3E  9693               	bcf	3987,3,c	;volatile
  1669  001D40  0012               	return		;funcret
  1670  001D42                     __end_of_initMotorPWM:
  1671                           	opt stack 0
  1672                           tblptru	equ	0xFF8
  1673                           prodh	equ	0xFF4
  1674                           prodl	equ	0xFF3
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           indf1	equ	0xFE7
  1678                           fsr1h	equ	0xFE2
  1679                           fsr1l	equ	0xFE1
  1680                           indf2	equ	0xFDF
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _initLCD *****************
  1686 ;; Defined at:
  1687 ;;		line 38 in file "LCD.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;		None               void
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1701 ;;      Params:         0       0       0       0
  1702 ;;      Locals:         0       0       0       0
  1703 ;;      Temps:          1       0       0       0
  1704 ;;      Totals:         1       0       0       0
  1705 ;;Total ram usage:        1 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    6
  1708 ;; This function calls:
  1709 ;;		_LCDout
  1710 ;;		_SendLCD
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text3
  1717  001672                     __ptext3:
  1718                           	opt stack 0
  1719  001672                     _initLCD:
  1720                           	opt stack 24
  1721                           
  1722                           ;LCD.c: 44: TRISAbits.RA6=0;
  1723                           
  1724                           ;incstack = 0
  1725  001672  9C92               	bcf	3986,6,c	;volatile
  1726                           
  1727                           ;LCD.c: 45: TRISCbits.RC0=0;
  1728  001674  9094               	bcf	3988,0,c	;volatile
  1729                           
  1730                           ;LCD.c: 46: TRISCbits.RC1=0;
  1731  001676  9294               	bcf	3988,1,c	;volatile
  1732                           
  1733                           ;LCD.c: 47: TRISCbits.RC2=0;
  1734  001678  9494               	bcf	3988,2,c	;volatile
  1735                           
  1736                           ;LCD.c: 48: TRISDbits.RD0=0;
  1737  00167A  9095               	bcf	3989,0,c	;volatile
  1738                           
  1739                           ;LCD.c: 49: TRISDbits.RD1=0;
  1740  00167C  9295               	bcf	3989,1,c	;volatile
  1741                           
  1742                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1743  00167E  0E27               	movlw	39
  1744  001680  6E2A               	movwf	??_initLCD& (0+255),c
  1745  001682  0EF5               	movlw	245
  1746  001684                     u2927:
  1747  001684  2EE8               	decfsz	wreg,f,c
  1748  001686  D7FE               	goto	u2927
  1749  001688  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1750  00168A  D7FC               	goto	u2927
  1751  00168C  F000               	nop	
  1752                           
  1753                           ;LCD.c: 52: LCDout(0b0011);
  1754  00168E  0E03               	movlw	3
  1755  001690  ECD6  F00A         	call	_LCDout
  1756                           
  1757                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1758  001694  0E0D               	movlw	13
  1759  001696  6E2A               	movwf	??_initLCD& (0+255),c
  1760  001698  0EFC               	movlw	252
  1761  00169A                     u2937:
  1762  00169A  2EE8               	decfsz	wreg,f,c
  1763  00169C  D7FE               	goto	u2937
  1764  00169E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1765  0016A0  D7FC               	goto	u2937
  1766                           
  1767                           ;LCD.c: 54: LCDout(0b0011);
  1768  0016A2  0E03               	movlw	3
  1769  0016A4  ECD6  F00A         	call	_LCDout
  1770                           
  1771                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1772  0016A8  0E85               	movlw	133
  1773  0016AA                     u2947:
  1774  0016AA  2EE8               	decfsz	wreg,f,c
  1775  0016AC  D7FE               	goto	u2947
  1776  0016AE  F000               	nop	
  1777                           
  1778                           ;LCD.c: 56: LCDout(0b0011);
  1779  0016B0  0E03               	movlw	3
  1780  0016B2  ECD6  F00A         	call	_LCDout
  1781                           
  1782                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1783  0016B6  0E21               	movlw	33
  1784  0016B8                     u2957:
  1785  0016B8  2EE8               	decfsz	wreg,f,c
  1786  0016BA  D7FE               	goto	u2957
  1787  0016BC  F000               	nop	
  1788                           
  1789                           ;LCD.c: 58: LCDout(0b0010);
  1790  0016BE  0E02               	movlw	2
  1791  0016C0  ECD6  F00A         	call	_LCDout
  1792                           
  1793                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1794  0016C4  0E21               	movlw	33
  1795  0016C6                     u2967:
  1796  0016C6  2EE8               	decfsz	wreg,f,c
  1797  0016C8  D7FE               	goto	u2967
  1798  0016CA  F000               	nop	
  1799                           
  1800                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1801  0016CC  0E00               	movlw	0
  1802  0016CE  6E28               	movwf	SendLCD@type,c
  1803  0016D0  0E28               	movlw	40
  1804  0016D2  ECB9  F00E         	call	_SendLCD
  1805                           
  1806                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1807  0016D6  0E21               	movlw	33
  1808  0016D8                     u2977:
  1809  0016D8  2EE8               	decfsz	wreg,f,c
  1810  0016DA  D7FE               	goto	u2977
  1811  0016DC  F000               	nop	
  1812                           
  1813                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1814  0016DE  0E00               	movlw	0
  1815  0016E0  6E28               	movwf	SendLCD@type,c
  1816  0016E2  0E08               	movlw	8
  1817  0016E4  ECB9  F00E         	call	_SendLCD
  1818                           
  1819                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1820  0016E8  0E21               	movlw	33
  1821  0016EA                     u2987:
  1822  0016EA  2EE8               	decfsz	wreg,f,c
  1823  0016EC  D7FE               	goto	u2987
  1824  0016EE  F000               	nop	
  1825                           
  1826                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1827  0016F0  0E00               	movlw	0
  1828  0016F2  6E28               	movwf	SendLCD@type,c
  1829  0016F4  0E01               	movlw	1
  1830  0016F6  ECB9  F00E         	call	_SendLCD
  1831                           
  1832                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1833  0016FA  0E0D               	movlw	13
  1834  0016FC  6E2A               	movwf	??_initLCD& (0+255),c
  1835  0016FE  0EFC               	movlw	252
  1836  001700                     u2997:
  1837  001700  2EE8               	decfsz	wreg,f,c
  1838  001702  D7FE               	goto	u2997
  1839  001704  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1840  001706  D7FC               	goto	u2997
  1841                           
  1842                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1843  001708  0E00               	movlw	0
  1844  00170A  6E28               	movwf	SendLCD@type,c
  1845  00170C  0E06               	movlw	6
  1846  00170E  ECB9  F00E         	call	_SendLCD
  1847                           
  1848                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1849  001712  0E21               	movlw	33
  1850  001714                     u3007:
  1851  001714  2EE8               	decfsz	wreg,f,c
  1852  001716  D7FE               	goto	u3007
  1853  001718  F000               	nop	
  1854                           
  1855                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1856  00171A  0E00               	movlw	0
  1857  00171C  6E28               	movwf	SendLCD@type,c
  1858  00171E  0E0C               	movlw	12
  1859  001720  ECB9  F00E         	call	_SendLCD
  1860                           
  1861                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1862  001724  0E21               	movlw	33
  1863  001726                     u3017:
  1864  001726  2EE8               	decfsz	wreg,f,c
  1865  001728  D7FE               	goto	u3017
  1866  00172A  F000               	nop	
  1867  00172C  0012               	return		;funcret
  1868  00172E                     __end_of_initLCD:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           prodh	equ	0xFF4
  1872                           prodl	equ	0xFF3
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           indf1	equ	0xFE7
  1876                           fsr1h	equ	0xFE2
  1877                           fsr1l	equ	0xFE1
  1878                           indf2	equ	0xFDF
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _initInterrupts *****************
  1884 ;; Defined at:
  1885 ;;		line 4 in file "Interrupt.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		None
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1899 ;;      Params:         0       0       0       0
  1900 ;;      Locals:         0       0       0       0
  1901 ;;      Temps:          0       0       0       0
  1902 ;;      Totals:         0       0       0       0
  1903 ;;Total ram usage:        0 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    3
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text4
  1914  001E56                     __ptext4:
  1915                           	opt stack 0
  1916  001E56                     _initInterrupts:
  1917                           	opt stack 27
  1918                           
  1919                           ;Interrupt.c: 6: INTCONbits.GIEH=1;
  1920                           
  1921                           ;incstack = 0
  1922  001E56  8EF2               	bsf	intcon,7,c	;volatile
  1923                           
  1924                           ;Interrupt.c: 7: INTCONbits.GIEL=1;
  1925  001E58  8CF2               	bsf	intcon,6,c	;volatile
  1926                           
  1927                           ;Interrupt.c: 8: INTCONbits.PEIE=1;
  1928  001E5A  8CF2               	bsf	intcon,6,c	;volatile
  1929                           
  1930                           ;Interrupt.c: 9: RCONbits.IPEN=1;
  1931  001E5C  8ED0               	bsf	4048,7,c	;volatile
  1932                           
  1933                           ;Interrupt.c: 12: IPR1bits.RCIP=0;
  1934  001E5E  9A9F               	bcf	3999,5,c	;volatile
  1935                           
  1936                           ;Interrupt.c: 13: PIE1bits.RCIE=1;
  1937  001E60  8A9D               	bsf	3997,5,c	;volatile
  1938                           
  1939                           ;Interrupt.c: 16: TRISCbits.RC3=1;
  1940  001E62  8694               	bsf	3988,3,c	;volatile
  1941                           
  1942                           ;Interrupt.c: 17: INTCONbits.INT0IE=1;
  1943  001E64  88F2               	bsf	intcon,4,c	;volatile
  1944                           
  1945                           ;Interrupt.c: 20: PIR1bits.RC1IF=0;
  1946  001E66  9A9E               	bcf	3998,5,c	;volatile
  1947                           
  1948                           ;Interrupt.c: 21: INTCONbits.INT0IF=0;
  1949  001E68  92F2               	bcf	intcon,1,c	;volatile
  1950  001E6A  0012               	return		;funcret
  1951  001E6C                     __end_of_initInterrupts:
  1952                           	opt stack 0
  1953                           tblptru	equ	0xFF8
  1954                           prodh	equ	0xFF4
  1955                           prodl	equ	0xFF3
  1956                           intcon	equ	0xFF2
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           indf1	equ	0xFE7
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _initIR *****************
  1968 ;; Defined at:
  1969 ;;		line 30 in file "IR_Reading.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;		None               void
  1976 ;; Registers used:
  1977 ;;		wreg, status,2
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1983 ;;      Params:         0       0       0       0
  1984 ;;      Locals:         0       0       0       0
  1985 ;;      Temps:          0       0       0       0
  1986 ;;      Totals:         0       0       0       0
  1987 ;;Total ram usage:        0 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    3
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_main
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text5
  1998  001E18                     __ptext5:
  1999                           	opt stack 0
  2000  001E18                     _initIR:
  2001                           	opt stack 27
  2002                           
  2003                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2004                           
  2005                           ;incstack = 0
  2006  001E18  9489               	bcf	3977,2,c	;volatile
  2007                           
  2008                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2009  001E1A  9689               	bcf	3977,3,c	;volatile
  2010                           
  2011                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2012  001E1C  8492               	bsf	3986,2,c	;volatile
  2013                           
  2014                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2015  001E1E  8692               	bsf	3986,3,c	;volatile
  2016                           
  2017                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2018  001E20  94B8               	bcf	4024,2,c	;volatile
  2019                           
  2020                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2021  001E22  96B8               	bcf	4024,3,c	;volatile
  2022                           
  2023                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2024  001E24  9CB8               	bcf	4024,6,c	;volatile
  2025                           
  2026                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2027  001E26  9EB8               	bcf	4024,7,c	;volatile
  2028                           
  2029                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2030  001E28  0E06               	movlw	6
  2031  001E2A  6E63               	movwf	3939,c	;volatile
  2032                           
  2033                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2034  001E2C  0E06               	movlw	6
  2035  001E2E  6E62               	movwf	3938,c	;volatile
  2036                           
  2037                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2038  001E30  9096               	bcf	3990,0,c	;volatile
  2039                           
  2040                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2041  001E32  9296               	bcf	3990,1,c	;volatile
  2042                           
  2043                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2044  001E34  0E59               	movlw	89
  2045  001E36  6EB7               	movwf	4023,c	;volatile
  2046  001E38  0012               	return		;funcret
  2047  001E3A                     __end_of_initIR:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           indf1	equ	0xFE7
  2056                           fsr1h	equ	0xFE2
  2057                           fsr1l	equ	0xFE1
  2058                           indf2	equ	0xFDF
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _fullSpeedBack *****************
  2064 ;; Defined at:
  2065 ;;		line 125 in file "dc_motor.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  2068 ;;		 -> main@mL(9), 
  2069 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  2070 ;;		 -> main@mR(9), 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;		None
  2073 ;; Return value:  Size  Location     Type
  2074 ;;		None               void
  2075 ;; Registers used:
  2076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2082 ;;      Params:         0       4       0       0
  2083 ;;      Locals:         0       0       0       0
  2084 ;;      Temps:          0       0       0       0
  2085 ;;      Totals:         0       4       0       0
  2086 ;;Total ram usage:        4 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    6
  2089 ;; This function calls:
  2090 ;;		_fullSpeedAhead
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text6
  2097  001C66                     __ptext6:
  2098                           	opt stack 0
  2099  001C66                     _fullSpeedBack:
  2100                           	opt stack 24
  2101                           
  2102                           ;dc_motor.c: 128: mL->direction=0;
  2103                           
  2104                           ;incstack = 0
  2105  001C66  0100               	movlb	0	; () banked
  2106  001C68  EE20 F001          	lfsr	2,1
  2107  001C6C  5166               	movf	fullSpeedBack@mL& (0+255),w,b
  2108  001C6E  26D9               	addwf	fsr2l,f,c
  2109  001C70  5167               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2110  001C72  22DA               	addwfc	fsr2h,f,c
  2111  001C74  0E00               	movlw	0
  2112  001C76  6EDF               	movwf	indf2,c
  2113                           
  2114                           ;dc_motor.c: 129: mR->direction=0;
  2115  001C78  0100               	movlb	0	; () banked
  2116  001C7A  EE20 F001          	lfsr	2,1
  2117  001C7E  5168               	movf	fullSpeedBack@mR& (0+255),w,b
  2118  001C80  26D9               	addwf	fsr2l,f,c
  2119  001C82  5169               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2120  001C84  22DA               	addwfc	fsr2h,f,c
  2121  001C86  0E00               	movlw	0
  2122  001C88  6EDF               	movwf	indf2,c
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2126  001C8A  C066  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2127  001C8E  C067  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2128  001C92  C068  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2129  001C96  C069  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2130  001C9A  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  2131  001C9E  0012               	return		;funcret
  2132  001CA0                     __end_of_fullSpeedBack:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           intcon	equ	0xFF2
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           indf1	equ	0xFE7
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _enableSensor *****************
  2149 ;; Defined at:
  2150 ;;		line 106 in file "IR_Reading.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  sensor          1    wreg     unsigned char 
  2153 ;;  status          1   35[COMRAM] unsigned char 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  sensor          1   36[COMRAM] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;		None               void
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2165 ;;      Params:         1       0       0       0
  2166 ;;      Locals:         1       0       0       0
  2167 ;;      Temps:          0       0       0       0
  2168 ;;      Totals:         2       0       0       0
  2169 ;;Total ram usage:        2 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    3
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_main
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text7
  2180  001DCC                     __ptext7:
  2181                           	opt stack 0
  2182  001DCC                     _enableSensor:
  2183                           	opt stack 27
  2184                           
  2185                           ;incstack = 0
  2186                           ;enableSensor@sensor stored from wreg
  2187  001DCC  6E25               	movwf	enableSensor@sensor,c
  2188                           
  2189                           ;IR_Reading.c: 108: if (sensor==0){
  2190  001DCE  5025               	movf	enableSensor@sensor,w,c
  2191  001DD0  A4D8               	btfss	status,2,c
  2192  001DD2  D006               	goto	l2379
  2193                           
  2194                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2195  001DD4  B024               	btfsc	enableSensor@status,0,c
  2196  001DD6  D002               	bra	u1695
  2197  001DD8  908D               	bcf	3981,0,c	;volatile
  2198  001DDA  D001               	bra	u1696
  2199  001DDC                     u1695:
  2200  001DDC  808D               	bsf	3981,0,c	;volatile
  2201  001DDE                     u1696:
  2202                           
  2203                           ;IR_Reading.c: 110: } else if (sensor==1){
  2204  001DDE  0012               	return	
  2205  001DE0                     l2379:
  2206  001DE0  0425               	decf	enableSensor@sensor,w,c
  2207  001DE2  A4D8               	btfss	status,2,c
  2208  001DE4  0012               	return	
  2209                           
  2210                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2211  001DE6  B024               	btfsc	enableSensor@status,0,c
  2212  001DE8  D002               	bra	u1715
  2213  001DEA  928D               	bcf	3981,1,c	;volatile
  2214  001DEC  D001               	bra	u1716
  2215  001DEE                     u1715:
  2216  001DEE  828D               	bsf	3981,1,c	;volatile
  2217  001DF0                     u1716:
  2218  001DF0  0012               	return	
  2219  001DF2                     __end_of_enableSensor:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           prodh	equ	0xFF4
  2223                           prodl	equ	0xFF3
  2224                           intcon	equ	0xFF2
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           indf1	equ	0xFE7
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _VerifySignal *****************
  2236 ;; Defined at:
  2237 ;;		line 55 in file "RFID_Reader.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2240 ;;		 -> ReceivedString(16), 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  hexByte         2   44[COMRAM] unsigned int 
  2243 ;;  i               1   46[COMRAM] unsigned char 
  2244 ;;  checksum        1   43[COMRAM] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      unsigned char 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2254 ;;      Params:         2       0       0       0
  2255 ;;      Locals:         4       0       0       0
  2256 ;;      Temps:          6       0       0       0
  2257 ;;      Totals:        12       0       0       0
  2258 ;;Total ram usage:       12 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    3
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_main
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text8
  2269  00172E                     __ptext8:
  2270                           	opt stack 0
  2271  00172E                     _VerifySignal:
  2272                           	opt stack 27
  2273                           
  2274                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2275                           
  2276                           ;incstack = 0
  2277  00172E  0E00               	movlw	0
  2278  001730  6E2C               	movwf	VerifySignal@checksum,c
  2279                           
  2280                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2281  001732  0E00               	movlw	0
  2282  001734  6E2E               	movwf	VerifySignal@hexByte+1,c
  2283  001736  0E00               	movlw	0
  2284  001738  6E2D               	movwf	VerifySignal@hexByte,c
  2285                           
  2286                           ;RFID_Reader.c: 58: unsigned char i=0;
  2287  00173A  0E00               	movlw	0
  2288  00173C  6E2F               	movwf	VerifySignal@i,c
  2289                           
  2290                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2291  00173E  EE20 F004          	lfsr	2,4
  2292  001742  5024               	movf	VerifySignal@Signal,w,c
  2293  001744  26D9               	addwf	fsr2l,f,c
  2294  001746  5025               	movf	VerifySignal@Signal+1,w,c
  2295  001748  22DA               	addwfc	fsr2h,f,c
  2296  00174A  50DF               	movf	indf2,w,c
  2297  00174C  6E26               	movwf	??_VerifySignal& (0+255),c
  2298  00174E  EE20 F003          	lfsr	2,3
  2299  001752  5024               	movf	VerifySignal@Signal,w,c
  2300  001754  26D9               	addwf	fsr2l,f,c
  2301  001756  5025               	movf	VerifySignal@Signal+1,w,c
  2302  001758  22DA               	addwfc	fsr2h,f,c
  2303  00175A  50DF               	movf	indf2,w,c
  2304  00175C  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2305  00175E  5027               	movf	??_VerifySignal+1,w,c
  2306  001760  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2307  001762  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2308  001764  5026               	movf	??_VerifySignal,w,c
  2309  001766  2428               	addwf	??_VerifySignal+2,w,c
  2310  001768  6E2D               	movwf	VerifySignal@hexByte,c
  2311  00176A  0E00               	movlw	0
  2312  00176C  2029               	addwfc	??_VerifySignal+3,w,c
  2313  00176E  6E2E               	movwf	VerifySignal@hexByte+1,c
  2314                           
  2315                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2316  001770  EE20 F002          	lfsr	2,2
  2317  001774  5024               	movf	VerifySignal@Signal,w,c
  2318  001776  26D9               	addwf	fsr2l,f,c
  2319  001778  5025               	movf	VerifySignal@Signal+1,w,c
  2320  00177A  22DA               	addwfc	fsr2h,f,c
  2321  00177C  50DF               	movf	indf2,w,c
  2322  00177E  182D               	xorwf	VerifySignal@hexByte,w,c
  2323  001780  6E2C               	movwf	VerifySignal@checksum,c
  2324                           
  2325                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2326  001782  0E05               	movlw	5
  2327  001784  6E2F               	movwf	VerifySignal@i,c
  2328  001786                     l2729:
  2329  001786  0E09               	movlw	9
  2330  001788  642F               	cpfsgt	VerifySignal@i,c
  2331  00178A  D001               	goto	l2733
  2332  00178C  D028               	goto	l2741
  2333  00178E                     l2733:
  2334                           
  2335                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2336  00178E  502F               	movf	VerifySignal@i,w,c
  2337  001790  6E26               	movwf	??_VerifySignal& (0+255),c
  2338  001792  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2339  001794  0E01               	movlw	1
  2340  001796  2626               	addwf	??_VerifySignal,f,c
  2341  001798  0E00               	movlw	0
  2342  00179A  2227               	addwfc	??_VerifySignal+1,f,c
  2343  00179C  5026               	movf	??_VerifySignal,w,c
  2344  00179E  2424               	addwf	VerifySignal@Signal,w,c
  2345  0017A0  6ED9               	movwf	fsr2l,c
  2346  0017A2  5027               	movf	??_VerifySignal+1,w,c
  2347  0017A4  2025               	addwfc	VerifySignal@Signal+1,w,c
  2348  0017A6  6EDA               	movwf	fsr2h,c
  2349  0017A8  50DF               	movf	indf2,w,c
  2350  0017AA  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2351  0017AC  502F               	movf	VerifySignal@i,w,c
  2352  0017AE  0D01               	mullw	1
  2353  0017B0  50F3               	movf	prodl,w,c
  2354  0017B2  2424               	addwf	VerifySignal@Signal,w,c
  2355  0017B4  6ED9               	movwf	fsr2l,c
  2356  0017B6  50F4               	movf	prodh,w,c
  2357  0017B8  2025               	addwfc	VerifySignal@Signal+1,w,c
  2358  0017BA  6EDA               	movwf	fsr2h,c
  2359  0017BC  50DF               	movf	indf2,w,c
  2360  0017BE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2361  0017C0  5029               	movf	??_VerifySignal+3,w,c
  2362  0017C2  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2363  0017C4  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2364  0017C6  5028               	movf	??_VerifySignal+2,w,c
  2365  0017C8  242A               	addwf	??_VerifySignal+4,w,c
  2366  0017CA  6E2D               	movwf	VerifySignal@hexByte,c
  2367  0017CC  0E00               	movlw	0
  2368  0017CE  202B               	addwfc	??_VerifySignal+5,w,c
  2369  0017D0  6E2E               	movwf	VerifySignal@hexByte+1,c
  2370                           
  2371                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2372  0017D2  502C               	movf	VerifySignal@checksum,w,c
  2373  0017D4  182D               	xorwf	VerifySignal@hexByte,w,c
  2374  0017D6  6E2C               	movwf	VerifySignal@checksum,c
  2375  0017D8  0E02               	movlw	2
  2376  0017DA  262F               	addwf	VerifySignal@i,f,c
  2377  0017DC  D7D4               	goto	l2729
  2378  0017DE                     l2741:
  2379                           
  2380                           ;RFID_Reader.c: 68: }
  2381                           ;RFID_Reader.c: 71: return 1;
  2382  0017DE  0E01               	movlw	1
  2383  0017E0  0012               	return	
  2384  0017E2                     __end_of_VerifySignal:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           intcon	equ	0xFF2
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           indf1	equ	0xFE7
  2393                           fsr1h	equ	0xFE2
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _ScanWithRange *****************
  2401 ;; Defined at:
  2402 ;;		line 131 in file "Movement.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  2405 ;;		 -> main@mL(9), 
  2406 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  2407 ;;		 -> main@mR(9), 
  2408 ;;  tenth_second    1   14[BANK0 ] unsigned char 
  2409 ;;  MoveTimeEntr    2   15[BANK0 ] PTR unsigned char 
  2410 ;;		 -> main@MoveTime(100), 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  SensorResult    4   30[BANK0 ] unsigned int [2]
  2413 ;;  SensorResult    4   26[BANK0 ] unsigned int [2]
  2414 ;;  SensorResult    4   22[BANK0 ] unsigned int [2]
  2415 ;;  ResultFalseR    1   21[BANK0 ] unsigned char 
  2416 ;;  ResultFalseC    1   20[BANK0 ] unsigned char 
  2417 ;;  ResultFalseL    1   19[BANK0 ] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      unsigned char 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2427 ;;      Params:         0       7       0       0
  2428 ;;      Locals:         0      15       0       0
  2429 ;;      Temps:          0       2       0       0
  2430 ;;      Totals:         0      24       0       0
  2431 ;;Total ram usage:       24 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; Hardware stack levels required when called:    7
  2434 ;; This function calls:
  2435 ;;		___awdiv
  2436 ;;		_delay_tenth_s
  2437 ;;		_grabLeftIR
  2438 ;;		_grabRightIR
  2439 ;;		_stop
  2440 ;;		_turnLeft
  2441 ;;		_turnRight
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text9
  2448  000370                     __ptext9:
  2449                           	opt stack 0
  2450  000370                     _ScanWithRange:
  2451                           	opt stack 23
  2452                           
  2453                           ;Movement.c: 134: unsigned int SensorResultL[2]={0,0};
  2454                           
  2455                           ;incstack = 0
  2456  000370  C0A8  F076         	movff	ScanWithRange@F3887,ScanWithRange@SensorResultL
  2457  000374  C0A9  F077         	movff	ScanWithRange@F3887+1,ScanWithRange@SensorResultL+1
  2458  000378  C0AA  F078         	movff	ScanWithRange@F3887+2,ScanWithRange@SensorResultL+2
  2459  00037C  C0AB  F079         	movff	ScanWithRange@F3887+3,ScanWithRange@SensorResultL+3
  2460                           
  2461                           ;Movement.c: 135: unsigned int SensorResultC[2]={0,0};
  2462  000380  C0AC  F07A         	movff	ScanWithRange@F3889,ScanWithRange@SensorResultC
  2463  000384  C0AD  F07B         	movff	ScanWithRange@F3889+1,ScanWithRange@SensorResultC+1
  2464  000388  C0AE  F07C         	movff	ScanWithRange@F3889+2,ScanWithRange@SensorResultC+2
  2465  00038C  C0AF  F07D         	movff	ScanWithRange@F3889+3,ScanWithRange@SensorResultC+3
  2466                           
  2467                           ;Movement.c: 136: unsigned int SensorResultR[2]={0,0};
  2468  000390  C0B0  F07E         	movff	ScanWithRange@F3891,ScanWithRange@SensorResultR
  2469  000394  C0B1  F07F         	movff	ScanWithRange@F3891+1,ScanWithRange@SensorResultR+1
  2470  000398  C0B2  F080         	movff	ScanWithRange@F3891+2,ScanWithRange@SensorResultR+2
  2471  00039C  C0B3  F081         	movff	ScanWithRange@F3891+3,ScanWithRange@SensorResultR+3
  2472                           
  2473                           ;Movement.c: 137: unsigned char ResultFalseL=0;
  2474  0003A0  0E00               	movlw	0
  2475  0003A2  0100               	movlb	0	; () banked
  2476  0003A4  6F73               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2477                           
  2478                           ;Movement.c: 138: unsigned char ResultFalseC=0;
  2479  0003A6  0E00               	movlw	0
  2480  0003A8  0100               	movlb	0	; () banked
  2481  0003AA  6F74               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2482                           
  2483                           ;Movement.c: 139: unsigned char ResultFalseR=0;
  2484  0003AC  0E00               	movlw	0
  2485  0003AE  0100               	movlb	0	; () banked
  2486  0003B0  6F75               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;Movement.c: 146: stop(mL,mR);
  2490  0003B2  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2491  0003B6  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2492  0003BA  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2493  0003BE  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2494  0003C2  ECF1  F00B         	call	_stop	;wreg free
  2495                           
  2496                           ;Movement.c: 147: SensorResultC[0]=grabLeftIR();
  2497  0003C6  ECFB  F00C         	call	_grabLeftIR	;wreg free
  2498  0003CA  C024  F07A         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2499  0003CE  C025  F07B         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2500                           
  2501                           ;Movement.c: 148: SensorResultC[1]=grabRightIR();
  2502  0003D2  ECC2  F00C         	call	_grabRightIR	;wreg free
  2503  0003D6  C024  F07C         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2504  0003DA  C025  F07D         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2505                           
  2506                           ;Movement.c: 152: CAP1BUFH=0;
  2507  0003DE  0E00               	movlw	0
  2508  0003E0  6E69               	movwf	3945,c	;volatile
  2509                           
  2510                           ;Movement.c: 153: CAP1BUFL=0;
  2511  0003E2  0E00               	movlw	0
  2512  0003E4  6E68               	movwf	3944,c	;volatile
  2513                           
  2514                           ;Movement.c: 154: CAP2BUFH=0;
  2515  0003E6  0E00               	movlw	0
  2516  0003E8  6E67               	movwf	3943,c	;volatile
  2517                           
  2518                           ;Movement.c: 155: CAP2BUFL=0;
  2519  0003EA  0E00               	movlw	0
  2520  0003EC  6E66               	movwf	3942,c	;volatile
  2521                           
  2522                           ;Movement.c: 158: turnLeft(mL,mR);
  2523  0003EE  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2524  0003F2  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2525  0003F6  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2526  0003FA  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2527  0003FE  ECEB  F00D         	call	_turnLeft	;wreg free
  2528                           
  2529                           ;Movement.c: 159: delay_tenth_s(tenth_seconds);
  2530  000402  0100               	movlb	0	; () banked
  2531  000404  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2532  000406  EC50  F00E         	call	_delay_tenth_s
  2533                           
  2534                           ;Movement.c: 160: (*MoveTimeEntry) += tenth_seconds;
  2535  00040A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2536  00040E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2537  000412  0100               	movlb	0	; () banked
  2538  000414  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2539  000416  26DF               	addwf	indf2,f,c
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;Movement.c: 162: stop(mL,mR);
  2543  000418  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2544  00041C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2545  000420  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2546  000424  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2547  000428  ECF1  F00B         	call	_stop	;wreg free
  2548                           
  2549                           ;Movement.c: 163: SensorResultL[0]=grabLeftIR();
  2550  00042C  ECFB  F00C         	call	_grabLeftIR	;wreg free
  2551  000430  C024  F076         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2552  000434  C025  F077         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2553                           
  2554                           ;Movement.c: 164: SensorResultL[1]=grabRightIR();
  2555  000438  ECC2  F00C         	call	_grabRightIR	;wreg free
  2556  00043C  C024  F078         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2557  000440  C025  F079         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2558                           
  2559                           ;Movement.c: 168: CAP1BUFH=0;
  2560  000444  0E00               	movlw	0
  2561  000446  6E69               	movwf	3945,c	;volatile
  2562                           
  2563                           ;Movement.c: 169: CAP1BUFL=0;
  2564  000448  0E00               	movlw	0
  2565  00044A  6E68               	movwf	3944,c	;volatile
  2566                           
  2567                           ;Movement.c: 170: CAP2BUFH=0;
  2568  00044C  0E00               	movlw	0
  2569  00044E  6E67               	movwf	3943,c	;volatile
  2570                           
  2571                           ;Movement.c: 171: CAP2BUFL=0;
  2572  000450  0E00               	movlw	0
  2573  000452  6E66               	movwf	3942,c	;volatile
  2574                           
  2575                           ;Movement.c: 174: turnRight(mL,mR);
  2576  000454  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  2577  000458  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2578  00045C  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  2579  000460  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2580  000464  ECC4  F00D         	call	_turnRight	;wreg free
  2581                           
  2582                           ;Movement.c: 175: delay_tenth_s(2*tenth_seconds);
  2583  000468  0100               	movlb	0	; () banked
  2584  00046A  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2585  00046C  0D02               	mullw	2
  2586  00046E  50F3               	movf	prodl,w,c
  2587  000470  EC50  F00E         	call	_delay_tenth_s
  2588                           
  2589                           ;Movement.c: 176: (*MoveTimeEntry) -= 2*tenth_seconds;
  2590  000474  0100               	movlb	0	; () banked
  2591  000476  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2592  000478  0D02               	mullw	2
  2593  00047A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2594  00047E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2595  000482  50F3               	movf	prodl,w,c
  2596  000484  5EDF               	subwf	indf2,f,c
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;Movement.c: 178: stop(mL,mR);
  2600  000486  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2601  00048A  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2602  00048E  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2603  000492  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2604  000496  ECF1  F00B         	call	_stop	;wreg free
  2605                           
  2606                           ;Movement.c: 179: SensorResultR[0]=grabLeftIR();
  2607  00049A  ECFB  F00C         	call	_grabLeftIR	;wreg free
  2608  00049E  C024  F07E         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2609  0004A2  C025  F07F         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2610                           
  2611                           ;Movement.c: 180: SensorResultR[1]=grabRightIR();
  2612  0004A6  ECC2  F00C         	call	_grabRightIR	;wreg free
  2613  0004AA  C024  F080         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2614  0004AE  C025  F081         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2615                           
  2616                           ;Movement.c: 184: CAP1BUFH=0;
  2617  0004B2  0E00               	movlw	0
  2618  0004B4  6E69               	movwf	3945,c	;volatile
  2619                           
  2620                           ;Movement.c: 185: CAP1BUFL=0;
  2621  0004B6  0E00               	movlw	0
  2622  0004B8  6E68               	movwf	3944,c	;volatile
  2623                           
  2624                           ;Movement.c: 186: CAP2BUFH=0;
  2625  0004BA  0E00               	movlw	0
  2626  0004BC  6E67               	movwf	3943,c	;volatile
  2627                           
  2628                           ;Movement.c: 187: CAP2BUFL=0;
  2629  0004BE  0E00               	movlw	0
  2630  0004C0  6E66               	movwf	3942,c	;volatile
  2631                           
  2632                           ;Movement.c: 198: if((SensorResultL[0]+SensorResultL[1])<ClearSignalThreshold){
  2633  0004C2  0E0B               	movlw	low _ClearSignalThreshold
  2634  0004C4  6EF6               	movwf	tblptrl,c
  2635  0004C6                     	if	1	;There is more than 1 active tblptr byte
  2636  0004C6  0E03               	movlw	high _ClearSignalThreshold
  2637  0004C8  6EF7               	movwf	tblptrh,c
  2638  0004CA                     	endif
  2639  0004CA                     	if	0	;There are less than 3 active tblptr bytes
  2640  0004CA                     	endif
  2641  0004CA  0100               	movlb	0	; () banked
  2642  0004CC  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2643  0004CE  0100               	movlb	0	; () banked
  2644  0004D0  2578               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2645  0004D2  0100               	movlb	0	; () banked
  2646  0004D4  6F71               	movwf	??_ScanWithRange& (0+255),b
  2647  0004D6  0100               	movlb	0	; () banked
  2648  0004D8  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2649  0004DA  0100               	movlb	0	; () banked
  2650  0004DC  2179               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2651  0004DE  0100               	movlb	0	; () banked
  2652  0004E0  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2653  0004E2  0009               	tblrd		*+
  2654  0004E4  50F5               	movf	tablat,w,c
  2655  0004E6  0100               	movlb	0	; () banked
  2656  0004E8  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2657  0004EA  0009               	tblrd		*+
  2658  0004EC  50F5               	movf	tablat,w,c
  2659  0004EE  0100               	movlb	0	; () banked
  2660  0004F0  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2661  0004F2  B0D8               	btfsc	status,0,c
  2662  0004F4  D00D               	goto	l3129
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;Movement.c: 199: SensorResultL[0]=0;
  2666  0004F6  0E00               	movlw	0
  2667  0004F8  0100               	movlb	0	; () banked
  2668  0004FA  6F77               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2669  0004FC  0E00               	movlw	0
  2670  0004FE  6F76               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2671                           
  2672                           ;Movement.c: 200: SensorResultL[1]=0;
  2673  000500  0E00               	movlw	0
  2674  000502  0100               	movlb	0	; () banked
  2675  000504  6F79               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2676  000506  0E00               	movlw	0
  2677  000508  6F78               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2678                           
  2679                           ;Movement.c: 201: ResultFalseL=1;
  2680  00050A  0E01               	movlw	1
  2681  00050C  0100               	movlb	0	; () banked
  2682  00050E  6F73               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2683  000510                     l3129:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;Movement.c: 202: }
  2687                           ;Movement.c: 203: if((SensorResultC[0]+SensorResultC[1])<ClearSignalThreshold){
  2688  000510  0E0B               	movlw	low _ClearSignalThreshold
  2689  000512  6EF6               	movwf	tblptrl,c
  2690  000514                     	if	1	;There is more than 1 active tblptr byte
  2691  000514  0E03               	movlw	high _ClearSignalThreshold
  2692  000516  6EF7               	movwf	tblptrh,c
  2693  000518                     	endif
  2694  000518                     	if	0	;There are less than 3 active tblptr bytes
  2695  000518                     	endif
  2696  000518  0100               	movlb	0	; () banked
  2697  00051A  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2698  00051C  0100               	movlb	0	; () banked
  2699  00051E  257C               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2700  000520  0100               	movlb	0	; () banked
  2701  000522  6F71               	movwf	??_ScanWithRange& (0+255),b
  2702  000524  0100               	movlb	0	; () banked
  2703  000526  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2704  000528  0100               	movlb	0	; () banked
  2705  00052A  217D               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2706  00052C  0100               	movlb	0	; () banked
  2707  00052E  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2708  000530  0009               	tblrd		*+
  2709  000532  50F5               	movf	tablat,w,c
  2710  000534  0100               	movlb	0	; () banked
  2711  000536  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2712  000538  0009               	tblrd		*+
  2713  00053A  50F5               	movf	tablat,w,c
  2714  00053C  0100               	movlb	0	; () banked
  2715  00053E  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2716  000540  B0D8               	btfsc	status,0,c
  2717  000542  D00D               	goto	l3133
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;Movement.c: 204: SensorResultC[0]=0;
  2721  000544  0E00               	movlw	0
  2722  000546  0100               	movlb	0	; () banked
  2723  000548  6F7B               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2724  00054A  0E00               	movlw	0
  2725  00054C  6F7A               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2726                           
  2727                           ;Movement.c: 205: SensorResultC[1]=0;
  2728  00054E  0E00               	movlw	0
  2729  000550  0100               	movlb	0	; () banked
  2730  000552  6F7D               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2731  000554  0E00               	movlw	0
  2732  000556  6F7C               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2733                           
  2734                           ;Movement.c: 206: ResultFalseC=1;
  2735  000558  0E01               	movlw	1
  2736  00055A  0100               	movlb	0	; () banked
  2737  00055C  6F74               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2738  00055E                     l3133:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;Movement.c: 207: }
  2742                           ;Movement.c: 208: if((SensorResultR[0]+SensorResultR[1])<ClearSignalThreshold){
  2743  00055E  0E0B               	movlw	low _ClearSignalThreshold
  2744  000560  6EF6               	movwf	tblptrl,c
  2745  000562                     	if	1	;There is more than 1 active tblptr byte
  2746  000562  0E03               	movlw	high _ClearSignalThreshold
  2747  000564  6EF7               	movwf	tblptrh,c
  2748  000566                     	endif
  2749  000566                     	if	0	;There are less than 3 active tblptr bytes
  2750  000566                     	endif
  2751  000566  0100               	movlb	0	; () banked
  2752  000568  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2753  00056A  0100               	movlb	0	; () banked
  2754  00056C  2580               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2755  00056E  0100               	movlb	0	; () banked
  2756  000570  6F71               	movwf	??_ScanWithRange& (0+255),b
  2757  000572  0100               	movlb	0	; () banked
  2758  000574  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2759  000576  0100               	movlb	0	; () banked
  2760  000578  2181               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2761  00057A  0100               	movlb	0	; () banked
  2762  00057C  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2763  00057E  0009               	tblrd		*+
  2764  000580  50F5               	movf	tablat,w,c
  2765  000582  0100               	movlb	0	; () banked
  2766  000584  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2767  000586  0009               	tblrd		*+
  2768  000588  50F5               	movf	tablat,w,c
  2769  00058A  0100               	movlb	0	; () banked
  2770  00058C  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2771  00058E  B0D8               	btfsc	status,0,c
  2772  000590  D00D               	goto	l3137
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;Movement.c: 209: SensorResultR[0]=0;
  2776  000592  0E00               	movlw	0
  2777  000594  0100               	movlb	0	; () banked
  2778  000596  6F7F               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2779  000598  0E00               	movlw	0
  2780  00059A  6F7E               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2781                           
  2782                           ;Movement.c: 210: SensorResultR[1]=0;
  2783  00059C  0E00               	movlw	0
  2784  00059E  0100               	movlb	0	; () banked
  2785  0005A0  6F81               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2786  0005A2  0E00               	movlw	0
  2787  0005A4  6F80               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2788                           
  2789                           ;Movement.c: 211: ResultFalseR=1;
  2790  0005A6  0E01               	movlw	1
  2791  0005A8  0100               	movlb	0	; () banked
  2792  0005AA  6F75               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2793  0005AC                     l3137:
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Movement.c: 212: }
  2797                           ;Movement.c: 214: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2798  0005AC  0100               	movlb	0	; () banked
  2799  0005AE  5174               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2800  0005B0  C073  F071         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2801  0005B4  0100               	movlb	0	; () banked
  2802  0005B6  6B72               	clrf	(??_ScanWithRange+1)& (0+255),b
  2803  0005B8  0100               	movlb	0	; () banked
  2804  0005BA  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2805  0005BC  0E00               	movlw	0
  2806  0005BE  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2807  0005C0  0100               	movlb	0	; () banked
  2808  0005C2  5175               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2809  0005C4  0100               	movlb	0	; () banked
  2810  0005C6  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2811  0005C8  0E00               	movlw	0
  2812  0005CA  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2813  0005CC  0E03               	movlw	3
  2814  0005CE  0100               	movlb	0	; () banked
  2815  0005D0  1971               	xorwf	??_ScanWithRange& (0+255),w,b
  2816  0005D2  0100               	movlb	0	; () banked
  2817  0005D4  1172               	iorwf	(??_ScanWithRange+1)& (0+255),w,b
  2818  0005D6  A4D8               	btfss	status,2,c
  2819  0005D8  D025               	goto	l3153
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;Movement.c: 216: turnLeft(mL,mR);
  2823  0005DA  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2824  0005DE  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2825  0005E2  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2826  0005E6  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2827  0005EA  ECEB  F00D         	call	_turnLeft	;wreg free
  2828                           
  2829                           ;Movement.c: 217: delay_tenth_s(5*tenth_seconds);
  2830  0005EE  0100               	movlb	0	; () banked
  2831  0005F0  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2832  0005F2  0D05               	mullw	5
  2833  0005F4  50F3               	movf	prodl,w,c
  2834  0005F6  EC50  F00E         	call	_delay_tenth_s
  2835                           
  2836                           ;Movement.c: 218: (*MoveTimeEntry) += 5*tenth_seconds;
  2837  0005FA  0100               	movlb	0	; () banked
  2838  0005FC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2839  0005FE  0D05               	mullw	5
  2840  000600  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2841  000604  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2842  000608  50F3               	movf	prodl,w,c
  2843  00060A  26DF               	addwf	indf2,f,c
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;Movement.c: 219: stop(mL,mR);
  2847  00060C  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2848  000610  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2849  000614  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2850  000618  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2851  00061C  ECF1  F00B         	call	_stop	;wreg free
  2852                           
  2853                           ;Movement.c: 221: return -1;
  2854  000620  0EFF               	movlw	255
  2855  000622  0012               	return	
  2856  000624                     l3153:
  2857                           
  2858                           ;Movement.c: 224: if (((SensorResultL[0]>DirectionFoundThreshold)&&(SensorResultL[1]>Dir
      +                          ectionFoundThreshold)
  2859                           ;Movement.c: 225: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2860                           ;Movement.c: 226: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2861  000624  0E0D               	movlw	low _DirectionFoundThreshold
  2862  000626  6EF6               	movwf	tblptrl,c
  2863  000628                     	if	1	;There is more than 1 active tblptr byte
  2864  000628  0E03               	movlw	high _DirectionFoundThreshold
  2865  00062A  6EF7               	movwf	tblptrh,c
  2866  00062C                     	endif
  2867  00062C                     	if	0	;There are less than 3 active tblptr bytes
  2868  00062C                     	endif
  2869  00062C  0100               	movlb	0	; () banked
  2870  00062E  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2871  000630  0009               	tblrd		*+
  2872  000632  5CF5               	subwf	tablat,w,c
  2873  000634  0100               	movlb	0	; () banked
  2874  000636  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2875  000638  0009               	tblrd		*+
  2876  00063A  58F5               	subwfb	tablat,w,c
  2877  00063C  B0D8               	btfsc	status,0,c
  2878  00063E  D073               	goto	l3175
  2879                           
  2880                           ; BSR set to: 0
  2881  000640  0E0D               	movlw	low _DirectionFoundThreshold
  2882  000642  6EF6               	movwf	tblptrl,c
  2883  000644                     	if	1	;There is more than 1 active tblptr byte
  2884  000644  0E03               	movlw	high _DirectionFoundThreshold
  2885  000646  6EF7               	movwf	tblptrh,c
  2886  000648                     	endif
  2887  000648                     	if	0	;There are less than 3 active tblptr bytes
  2888  000648                     	endif
  2889  000648  0100               	movlb	0	; () banked
  2890  00064A  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2891  00064C  0009               	tblrd		*+
  2892  00064E  5CF5               	subwf	tablat,w,c
  2893  000650  0100               	movlb	0	; () banked
  2894  000652  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2895  000654  0009               	tblrd		*+
  2896  000656  58F5               	subwfb	tablat,w,c
  2897  000658  B0D8               	btfsc	status,0,c
  2898  00065A  D065               	goto	l3175
  2899                           
  2900                           ; BSR set to: 0
  2901  00065C  0E0F               	movlw	low _DirectionFoundTolerance
  2902  00065E  6EF6               	movwf	tblptrl,c
  2903  000660                     	if	1	;There is more than 1 active tblptr byte
  2904  000660  0E03               	movlw	high _DirectionFoundTolerance
  2905  000662  6EF7               	movwf	tblptrh,c
  2906  000664                     	endif
  2907  000664                     	if	0	;There are less than 3 active tblptr bytes
  2908  000664                     	endif
  2909  000664  EE20  F078         	lfsr	2,ScanWithRange@SensorResultL+2
  2910  000668  CFDE F071          	movff	postinc2,??_ScanWithRange
  2911  00066C  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  2912  000670  0100               	movlb	0	; () banked
  2913  000672  1F71               	comf	??_ScanWithRange& (0+255),f,b
  2914  000674  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  2915  000676  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  2916  000678  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  2917  00067A  0100               	movlb	0	; () banked
  2918  00067C  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2919  00067E  0100               	movlb	0	; () banked
  2920  000680  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2921  000682  0100               	movlb	0	; () banked
  2922  000684  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2923  000686  0100               	movlb	0	; () banked
  2924  000688  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2925  00068A  0009               	tblrd		*+
  2926  00068C  50F5               	movf	tablat,w,c
  2927  00068E  0100               	movlb	0	; () banked
  2928  000690  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2929  000692  0009               	tblrd		*+
  2930  000694  50F5               	movf	tablat,w,c
  2931  000696  0100               	movlb	0	; () banked
  2932  000698  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2933  00069A  A0D8               	btfss	status,0,c
  2934  00069C  D01F               	goto	l3161
  2935                           
  2936                           ; BSR set to: 0
  2937  00069E  0E0F               	movlw	low _DirectionFoundTolerance
  2938  0006A0  6EF6               	movwf	tblptrl,c
  2939  0006A2                     	if	1	;There is more than 1 active tblptr byte
  2940  0006A2  0E03               	movlw	high _DirectionFoundTolerance
  2941  0006A4  6EF7               	movwf	tblptrh,c
  2942  0006A6                     	endif
  2943  0006A6                     	if	0	;There are less than 3 active tblptr bytes
  2944  0006A6                     	endif
  2945  0006A6  C076  F071         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2946  0006AA  C077  F072         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2947  0006AE  0100               	movlb	0	; () banked
  2948  0006B0  1F71               	comf	??_ScanWithRange& (0+255),f,b
  2949  0006B2  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  2950  0006B4  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  2951  0006B6  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  2952  0006B8  0100               	movlb	0	; () banked
  2953  0006BA  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2954  0006BC  0100               	movlb	0	; () banked
  2955  0006BE  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2956  0006C0  0100               	movlb	0	; () banked
  2957  0006C2  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2958  0006C4  0100               	movlb	0	; () banked
  2959  0006C6  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2960  0006C8  0009               	tblrd		*+
  2961  0006CA  50F5               	movf	tablat,w,c
  2962  0006CC  0100               	movlb	0	; () banked
  2963  0006CE  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2964  0006D0  0009               	tblrd		*+
  2965  0006D2  50F5               	movf	tablat,w,c
  2966  0006D4  0100               	movlb	0	; () banked
  2967  0006D6  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2968  0006D8  B0D8               	btfsc	status,0,c
  2969  0006DA  D025               	goto	l3175
  2970  0006DC                     l3161:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;Movement.c: 228: turnLeft(mL,mR);
  2974  0006DC  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2975  0006E0  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2976  0006E4  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2977  0006E8  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2978  0006EC  ECEB  F00D         	call	_turnLeft	;wreg free
  2979                           
  2980                           ;Movement.c: 229: delay_tenth_s(2*(tenth_seconds));
  2981  0006F0  0100               	movlb	0	; () banked
  2982  0006F2  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2983  0006F4  0D02               	mullw	2
  2984  0006F6  50F3               	movf	prodl,w,c
  2985  0006F8  EC50  F00E         	call	_delay_tenth_s
  2986                           
  2987                           ;Movement.c: 230: (*MoveTimeEntry) += 2*tenth_seconds;
  2988  0006FC  0100               	movlb	0	; () banked
  2989  0006FE  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2990  000700  0D02               	mullw	2
  2991  000702  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2992  000706  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2993  00070A  50F3               	movf	prodl,w,c
  2994  00070C  26DF               	addwf	indf2,f,c
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;Movement.c: 231: stop(mL,mR);
  2998  00070E  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2999  000712  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3000  000716  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3001  00071A  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3002  00071E  ECF1  F00B         	call	_stop	;wreg free
  3003  000722                     l3169:
  3004                           
  3005                           ;Movement.c: 232: return 2;
  3006  000722  0E02               	movlw	2
  3007  000724  0012               	return	
  3008  000726                     l3175:
  3009                           
  3010                           ;Movement.c: 234: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3011                           ;Movement.c: 235: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3012  000726  0E0D               	movlw	low _DirectionFoundThreshold
  3013  000728  6EF6               	movwf	tblptrl,c
  3014  00072A                     	if	1	;There is more than 1 active tblptr byte
  3015  00072A  0E03               	movlw	high _DirectionFoundThreshold
  3016  00072C  6EF7               	movwf	tblptrh,c
  3017  00072E                     	endif
  3018  00072E                     	if	0	;There are less than 3 active tblptr bytes
  3019  00072E                     	endif
  3020  00072E  0100               	movlb	0	; () banked
  3021  000730  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3022  000732  0009               	tblrd		*+
  3023  000734  5CF5               	subwf	tablat,w,c
  3024  000736  0100               	movlb	0	; () banked
  3025  000738  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3026  00073A  0009               	tblrd		*+
  3027  00073C  58F5               	subwfb	tablat,w,c
  3028  00073E  B0D8               	btfsc	status,0,c
  3029  000740  D06E               	goto	l3197
  3030                           
  3031                           ; BSR set to: 0
  3032  000742  0E0D               	movlw	low _DirectionFoundThreshold
  3033  000744  6EF6               	movwf	tblptrl,c
  3034  000746                     	if	1	;There is more than 1 active tblptr byte
  3035  000746  0E03               	movlw	high _DirectionFoundThreshold
  3036  000748  6EF7               	movwf	tblptrh,c
  3037  00074A                     	endif
  3038  00074A                     	if	0	;There are less than 3 active tblptr bytes
  3039  00074A                     	endif
  3040  00074A  0100               	movlb	0	; () banked
  3041  00074C  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3042  00074E  0009               	tblrd		*+
  3043  000750  5CF5               	subwf	tablat,w,c
  3044  000752  0100               	movlb	0	; () banked
  3045  000754  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3046  000756  0009               	tblrd		*+
  3047  000758  58F5               	subwfb	tablat,w,c
  3048  00075A  B0D8               	btfsc	status,0,c
  3049  00075C  D060               	goto	l3197
  3050                           
  3051                           ; BSR set to: 0
  3052  00075E  0E0F               	movlw	low _DirectionFoundTolerance
  3053  000760  6EF6               	movwf	tblptrl,c
  3054  000762                     	if	1	;There is more than 1 active tblptr byte
  3055  000762  0E03               	movlw	high _DirectionFoundTolerance
  3056  000764  6EF7               	movwf	tblptrh,c
  3057  000766                     	endif
  3058  000766                     	if	0	;There are less than 3 active tblptr bytes
  3059  000766                     	endif
  3060  000766  EE20  F07C         	lfsr	2,ScanWithRange@SensorResultC+2
  3061  00076A  CFDE F071          	movff	postinc2,??_ScanWithRange
  3062  00076E  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3063  000772  0100               	movlb	0	; () banked
  3064  000774  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3065  000776  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3066  000778  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3067  00077A  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3068  00077C  0100               	movlb	0	; () banked
  3069  00077E  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3070  000780  0100               	movlb	0	; () banked
  3071  000782  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3072  000784  0100               	movlb	0	; () banked
  3073  000786  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3074  000788  0100               	movlb	0	; () banked
  3075  00078A  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3076  00078C  0009               	tblrd		*+
  3077  00078E  50F5               	movf	tablat,w,c
  3078  000790  0100               	movlb	0	; () banked
  3079  000792  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3080  000794  0009               	tblrd		*+
  3081  000796  50F5               	movf	tablat,w,c
  3082  000798  0100               	movlb	0	; () banked
  3083  00079A  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3084  00079C  A0D8               	btfss	status,0,c
  3085  00079E  D01F               	goto	l3183
  3086                           
  3087                           ; BSR set to: 0
  3088  0007A0  0E0F               	movlw	low _DirectionFoundTolerance
  3089  0007A2  6EF6               	movwf	tblptrl,c
  3090  0007A4                     	if	1	;There is more than 1 active tblptr byte
  3091  0007A4  0E03               	movlw	high _DirectionFoundTolerance
  3092  0007A6  6EF7               	movwf	tblptrh,c
  3093  0007A8                     	endif
  3094  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  3095  0007A8                     	endif
  3096  0007A8  C07A  F071         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3097  0007AC  C07B  F072         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3098  0007B0  0100               	movlb	0	; () banked
  3099  0007B2  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3100  0007B4  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3101  0007B6  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3102  0007B8  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3103  0007BA  0100               	movlb	0	; () banked
  3104  0007BC  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3105  0007BE  0100               	movlb	0	; () banked
  3106  0007C0  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3107  0007C2  0100               	movlb	0	; () banked
  3108  0007C4  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3109  0007C6  0100               	movlb	0	; () banked
  3110  0007C8  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3111  0007CA  0009               	tblrd		*+
  3112  0007CC  50F5               	movf	tablat,w,c
  3113  0007CE  0100               	movlb	0	; () banked
  3114  0007D0  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3115  0007D2  0009               	tblrd		*+
  3116  0007D4  50F5               	movf	tablat,w,c
  3117  0007D6  0100               	movlb	0	; () banked
  3118  0007D8  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3119  0007DA  B0D8               	btfsc	status,0,c
  3120  0007DC  D020               	goto	l3197
  3121  0007DE                     l3183:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;Movement.c: 237: turnLeft(mL,mR);
  3125  0007DE  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3126  0007E2  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3127  0007E6  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3128  0007EA  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3129  0007EE  ECEB  F00D         	call	_turnLeft	;wreg free
  3130                           
  3131                           ;Movement.c: 238: delay_tenth_s(tenth_seconds);
  3132  0007F2  0100               	movlb	0	; () banked
  3133  0007F4  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3134  0007F6  EC50  F00E         	call	_delay_tenth_s
  3135                           
  3136                           ;Movement.c: 239: (*MoveTimeEntry) += tenth_seconds;
  3137  0007FA  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3138  0007FE  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3139  000802  0100               	movlb	0	; () banked
  3140  000804  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3141  000806  26DF               	addwf	indf2,f,c
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;Movement.c: 240: stop(mL,mR);
  3145  000808  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3146  00080C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3147  000810  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3148  000814  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3149  000818  ECF1  F00B         	call	_stop	;wreg free
  3150  00081C  D782               	goto	l3169
  3151  00081E                     l3197:
  3152                           
  3153                           ;Movement.c: 243: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3154                           ;Movement.c: 244: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3155  00081E  0E0D               	movlw	low _DirectionFoundThreshold
  3156  000820  6EF6               	movwf	tblptrl,c
  3157  000822                     	if	1	;There is more than 1 active tblptr byte
  3158  000822  0E03               	movlw	high _DirectionFoundThreshold
  3159  000824  6EF7               	movwf	tblptrh,c
  3160  000826                     	endif
  3161  000826                     	if	0	;There are less than 3 active tblptr bytes
  3162  000826                     	endif
  3163  000826  0100               	movlb	0	; () banked
  3164  000828  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3165  00082A  0009               	tblrd		*+
  3166  00082C  5CF5               	subwf	tablat,w,c
  3167  00082E  0100               	movlb	0	; () banked
  3168  000830  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3169  000832  0009               	tblrd		*+
  3170  000834  58F5               	subwfb	tablat,w,c
  3171  000836  B0D8               	btfsc	status,0,c
  3172  000838  D059               	goto	l3213
  3173                           
  3174                           ; BSR set to: 0
  3175  00083A  0E0D               	movlw	low _DirectionFoundThreshold
  3176  00083C  6EF6               	movwf	tblptrl,c
  3177  00083E                     	if	1	;There is more than 1 active tblptr byte
  3178  00083E  0E03               	movlw	high _DirectionFoundThreshold
  3179  000840  6EF7               	movwf	tblptrh,c
  3180  000842                     	endif
  3181  000842                     	if	0	;There are less than 3 active tblptr bytes
  3182  000842                     	endif
  3183  000842  0100               	movlb	0	; () banked
  3184  000844  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3185  000846  0009               	tblrd		*+
  3186  000848  5CF5               	subwf	tablat,w,c
  3187  00084A  0100               	movlb	0	; () banked
  3188  00084C  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3189  00084E  0009               	tblrd		*+
  3190  000850  58F5               	subwfb	tablat,w,c
  3191  000852  B0D8               	btfsc	status,0,c
  3192  000854  D04B               	goto	l3213
  3193                           
  3194                           ; BSR set to: 0
  3195  000856  0E0F               	movlw	low _DirectionFoundTolerance
  3196  000858  6EF6               	movwf	tblptrl,c
  3197  00085A                     	if	1	;There is more than 1 active tblptr byte
  3198  00085A  0E03               	movlw	high _DirectionFoundTolerance
  3199  00085C  6EF7               	movwf	tblptrh,c
  3200  00085E                     	endif
  3201  00085E                     	if	0	;There are less than 3 active tblptr bytes
  3202  00085E                     	endif
  3203  00085E  EE20  F080         	lfsr	2,ScanWithRange@SensorResultR+2
  3204  000862  CFDE F071          	movff	postinc2,??_ScanWithRange
  3205  000866  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3206  00086A  0100               	movlb	0	; () banked
  3207  00086C  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3208  00086E  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3209  000870  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3210  000872  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3211  000874  0100               	movlb	0	; () banked
  3212  000876  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3213  000878  0100               	movlb	0	; () banked
  3214  00087A  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3215  00087C  0100               	movlb	0	; () banked
  3216  00087E  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3217  000880  0100               	movlb	0	; () banked
  3218  000882  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3219  000884  0009               	tblrd		*+
  3220  000886  50F5               	movf	tablat,w,c
  3221  000888  0100               	movlb	0	; () banked
  3222  00088A  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3223  00088C  0009               	tblrd		*+
  3224  00088E  50F5               	movf	tablat,w,c
  3225  000890  0100               	movlb	0	; () banked
  3226  000892  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3227  000894  A0D8               	btfss	status,0,c
  3228  000896  D01F               	goto	l3205
  3229                           
  3230                           ; BSR set to: 0
  3231  000898  0E0F               	movlw	low _DirectionFoundTolerance
  3232  00089A  6EF6               	movwf	tblptrl,c
  3233  00089C                     	if	1	;There is more than 1 active tblptr byte
  3234  00089C  0E03               	movlw	high _DirectionFoundTolerance
  3235  00089E  6EF7               	movwf	tblptrh,c
  3236  0008A0                     	endif
  3237  0008A0                     	if	0	;There are less than 3 active tblptr bytes
  3238  0008A0                     	endif
  3239  0008A0  C07E  F071         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3240  0008A4  C07F  F072         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3241  0008A8  0100               	movlb	0	; () banked
  3242  0008AA  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3243  0008AC  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3244  0008AE  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3245  0008B0  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3246  0008B2  0100               	movlb	0	; () banked
  3247  0008B4  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3248  0008B6  0100               	movlb	0	; () banked
  3249  0008B8  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3250  0008BA  0100               	movlb	0	; () banked
  3251  0008BC  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3252  0008BE  0100               	movlb	0	; () banked
  3253  0008C0  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3254  0008C2  0009               	tblrd		*+
  3255  0008C4  50F5               	movf	tablat,w,c
  3256  0008C6  0100               	movlb	0	; () banked
  3257  0008C8  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3258  0008CA  0009               	tblrd		*+
  3259  0008CC  50F5               	movf	tablat,w,c
  3260  0008CE  0100               	movlb	0	; () banked
  3261  0008D0  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3262  0008D2  B0D8               	btfsc	status,0,c
  3263  0008D4  D00B               	goto	l3213
  3264  0008D6                     l3205:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Movement.c: 246: stop(mL,mR);
  3268  0008D6  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3269  0008DA  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3270  0008DE  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3271  0008E2  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3272  0008E6  ECF1  F00B         	call	_stop	;wreg free
  3273  0008EA  D71B               	goto	l3169
  3274  0008EC                     l3213:
  3275  0008EC  0100               	movlb	0	; () banked
  3276  0008EE  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3277  0008F0  0100               	movlb	0	; () banked
  3278  0008F2  5D78               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3279  0008F4  0100               	movlb	0	; () banked
  3280  0008F6  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3281  0008F8  0100               	movlb	0	; () banked
  3282  0008FA  5979               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3283  0008FC  B0D8               	btfsc	status,0,c
  3284  0008FE  D025               	goto	l3229
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;Movement.c: 252: turnLeft(mL,mR);
  3288  000900  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3289  000904  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3290  000908  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3291  00090C  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3292  000910  ECEB  F00D         	call	_turnLeft	;wreg free
  3293                           
  3294                           ;Movement.c: 253: delay_tenth_s(3*tenth_seconds);
  3295  000914  0100               	movlb	0	; () banked
  3296  000916  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3297  000918  0D03               	mullw	3
  3298  00091A  50F3               	movf	prodl,w,c
  3299  00091C  EC50  F00E         	call	_delay_tenth_s
  3300                           
  3301                           ;Movement.c: 254: (*MoveTimeEntry) += 3*tenth_seconds;
  3302  000920  0100               	movlb	0	; () banked
  3303  000922  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3304  000924  0D03               	mullw	3
  3305  000926  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3306  00092A  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3307  00092E  50F3               	movf	prodl,w,c
  3308  000930  26DF               	addwf	indf2,f,c
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;Movement.c: 255: stop(mL,mR);
  3312  000932  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3313  000936  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3314  00093A  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3315  00093E  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3316  000942  ECF1  F00B         	call	_stop	;wreg free
  3317  000946                     l3223:
  3318                           
  3319                           ;Movement.c: 256: return 0;
  3320  000946  0E00               	movlw	0
  3321  000948  0012               	return	
  3322  00094A                     l3229:
  3323  00094A  0100               	movlb	0	; () banked
  3324  00094C  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3325  00094E  0100               	movlb	0	; () banked
  3326  000950  5D7E               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3327  000952  0100               	movlb	0	; () banked
  3328  000954  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3329  000956  0100               	movlb	0	; () banked
  3330  000958  597F               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3331  00095A  B0D8               	btfsc	status,0,c
  3332  00095C  D020               	goto	l3245
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;Movement.c: 259: turnRight(mL,mR);
  3336  00095E  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  3337  000962  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3338  000966  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  3339  00096A  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3340  00096E  ECC4  F00D         	call	_turnRight	;wreg free
  3341                           
  3342                           ;Movement.c: 260: delay_tenth_s(tenth_seconds);
  3343  000972  0100               	movlb	0	; () banked
  3344  000974  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3345  000976  EC50  F00E         	call	_delay_tenth_s
  3346                           
  3347                           ;Movement.c: 261: (*MoveTimeEntry) -= tenth_seconds;
  3348  00097A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3349  00097E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3350  000982  0100               	movlb	0	; () banked
  3351  000984  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3352  000986  5EDF               	subwf	indf2,f,c
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Movement.c: 262: stop(mL,mR);
  3356  000988  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3357  00098C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3358  000990  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3359  000994  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3360  000998  ECF1  F00B         	call	_stop	;wreg free
  3361  00099C  D7D4               	goto	l3223
  3362  00099E                     l3245:
  3363  00099E  0100               	movlb	0	; () banked
  3364  0009A0  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3365  0009A2  0100               	movlb	0	; () banked
  3366  0009A4  5D76               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3367  0009A6  0100               	movlb	0	; () banked
  3368  0009A8  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3369  0009AA  0100               	movlb	0	; () banked
  3370  0009AC  5977               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3371  0009AE  B0D8               	btfsc	status,0,c
  3372  0009B0  D043               	goto	l3263
  3373                           
  3374                           ; BSR set to: 0
  3375  0009B2  0100               	movlb	0	; () banked
  3376  0009B4  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3377  0009B6  0100               	movlb	0	; () banked
  3378  0009B8  5D7C               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3379  0009BA  0100               	movlb	0	; () banked
  3380  0009BC  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3381  0009BE  0100               	movlb	0	; () banked
  3382  0009C0  597D               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3383  0009C2  B0D8               	btfsc	status,0,c
  3384  0009C4  D039               	goto	l3263
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;Movement.c: 268: turnLeft(mL,mR);
  3388  0009C6  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3389  0009CA  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3390  0009CE  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3391  0009D2  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3392  0009D6  ECEB  F00D         	call	_turnLeft	;wreg free
  3393                           
  3394                           ;Movement.c: 269: delay_tenth_s((3*tenth_seconds)/2);
  3395  0009DA  0100               	movlb	0	; () banked
  3396  0009DC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3397  0009DE  0D03               	mullw	3
  3398  0009E0  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3399  0009E4  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3400  0009E8  0E00               	movlw	0
  3401  0009EA  6E2D               	movwf	___awdiv@divisor+1,c
  3402  0009EC  0E02               	movlw	2
  3403  0009EE  6E2C               	movwf	___awdiv@divisor,c
  3404  0009F0  EC80  F00C         	call	___awdiv	;wreg free
  3405  0009F4  502A               	movf	?___awdiv,w,c
  3406  0009F6  EC50  F00E         	call	_delay_tenth_s
  3407                           
  3408                           ;Movement.c: 270: (*MoveTimeEntry) += 3*tenth_seconds/2;
  3409  0009FA  0100               	movlb	0	; () banked
  3410  0009FC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3411  0009FE  0D03               	mullw	3
  3412  000A00  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3413  000A04  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3414  000A08  0E00               	movlw	0
  3415  000A0A  6E2D               	movwf	___awdiv@divisor+1,c
  3416  000A0C  0E02               	movlw	2
  3417  000A0E  6E2C               	movwf	___awdiv@divisor,c
  3418  000A10  EC80  F00C         	call	___awdiv	;wreg free
  3419  000A14  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3420  000A18  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3421  000A1C  502A               	movf	?___awdiv,w,c
  3422  000A1E  26DF               	addwf	indf2,f,c
  3423                           
  3424                           ;Movement.c: 271: stop(mL,mR);
  3425  000A20  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3426  000A24  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3427  000A28  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3428  000A2C  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3429  000A30  ECF1  F00B         	call	_stop	;wreg free
  3430  000A34                     l3257:
  3431                           
  3432                           ;Movement.c: 272: return 1;
  3433  000A34  0E01               	movlw	1
  3434  000A36  0012               	return	
  3435  000A38                     l3263:
  3436  000A38  0100               	movlb	0	; () banked
  3437  000A3A  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3438  000A3C  0100               	movlb	0	; () banked
  3439  000A3E  5D80               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3440  000A40  0100               	movlb	0	; () banked
  3441  000A42  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3442  000A44  0100               	movlb	0	; () banked
  3443  000A46  5981               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3444  000A48  B0D8               	btfsc	status,0,c
  3445  000A4A  D03A               	goto	l3279
  3446                           
  3447                           ; BSR set to: 0
  3448  000A4C  0100               	movlb	0	; () banked
  3449  000A4E  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3450  000A50  0100               	movlb	0	; () banked
  3451  000A52  5D7A               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3452  000A54  0100               	movlb	0	; () banked
  3453  000A56  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3454  000A58  0100               	movlb	0	; () banked
  3455  000A5A  597B               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3456  000A5C  B0D8               	btfsc	status,0,c
  3457  000A5E  D030               	goto	l3279
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;Movement.c: 275: turnLeft(mL,mR);
  3461  000A60  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3462  000A64  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3463  000A68  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3464  000A6C  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3465  000A70  ECEB  F00D         	call	_turnLeft	;wreg free
  3466                           
  3467                           ;Movement.c: 276: delay_tenth_s((tenth_seconds)/2);
  3468  000A74  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3469  000A78  6A2B               	clrf	___awdiv@dividend+1,c
  3470  000A7A  0E00               	movlw	0
  3471  000A7C  6E2D               	movwf	___awdiv@divisor+1,c
  3472  000A7E  0E02               	movlw	2
  3473  000A80  6E2C               	movwf	___awdiv@divisor,c
  3474  000A82  EC80  F00C         	call	___awdiv	;wreg free
  3475  000A86  502A               	movf	?___awdiv,w,c
  3476  000A88  EC50  F00E         	call	_delay_tenth_s
  3477                           
  3478                           ;Movement.c: 277: (*MoveTimeEntry) += tenth_seconds/2;
  3479  000A8C  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3480  000A90  6A2B               	clrf	___awdiv@dividend+1,c
  3481  000A92  0E00               	movlw	0
  3482  000A94  6E2D               	movwf	___awdiv@divisor+1,c
  3483  000A96  0E02               	movlw	2
  3484  000A98  6E2C               	movwf	___awdiv@divisor,c
  3485  000A9A  EC80  F00C         	call	___awdiv	;wreg free
  3486  000A9E  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3487  000AA2  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3488  000AA6  502A               	movf	?___awdiv,w,c
  3489  000AA8  26DF               	addwf	indf2,f,c
  3490                           
  3491                           ;Movement.c: 278: stop(mL,mR);
  3492  000AAA  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3493  000AAE  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3494  000AB2  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3495  000AB6  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3496  000ABA  ECF1  F00B         	call	_stop	;wreg free
  3497  000ABE  D7BA               	goto	l3257
  3498  000AC0                     l3279:
  3499                           
  3500                           ;Movement.c: 280: }
  3501                           ;Movement.c: 281: }
  3502                           ;Movement.c: 282: return 0;
  3503  000AC0  0E00               	movlw	0
  3504  000AC2  0012               	return	
  3505  000AC4                     __end_of_ScanWithRange:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           intcon	equ	0xFF2
  3514                           postinc0	equ	0xFEE
  3515                           wreg	equ	0xFE8
  3516                           indf1	equ	0xFE7
  3517                           fsr1h	equ	0xFE2
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _ScanIR *****************
  3527 ;; Defined at:
  3528 ;;		line 42 in file "Movement.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  3531 ;;		 -> main@mL(9), 
  3532 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  3533 ;;		 -> main@mR(9), 
  3534 ;;  Move            2   14[BANK0 ] PTR unsigned char 
  3535 ;;		 -> main@Move(1), 
  3536 ;;  MoveTime        2   16[BANK0 ] PTR unsigned char 
  3537 ;;		 -> main@MoveTime(100), 
  3538 ;;  MoveType        2   18[BANK0 ] PTR unsigned char 
  3539 ;;		 -> main@MoveType(100), 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  buf            40   22[BANK0 ] unsigned char [40]
  3542 ;;  SensorResult    4   62[BANK0 ] unsigned int [2]
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      unsigned char 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3552 ;;      Params:         0      10       0       0
  3553 ;;      Locals:         0      44       0       0
  3554 ;;      Temps:          0       2       0       0
  3555 ;;      Totals:         0      56       0       0
  3556 ;;Total ram usage:       56 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    7
  3559 ;; This function calls:
  3560 ;;		_LCD_String
  3561 ;;		_SendLCD
  3562 ;;		_SetLine
  3563 ;;		_delay_tenth_s
  3564 ;;		_grabLeftIR
  3565 ;;		_grabRightIR
  3566 ;;		_sprintf
  3567 ;;		_stop
  3568 ;;		_turnLeft
  3569 ;;		_turnRight
  3570 ;; This function is called by:
  3571 ;;		_main
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text10
  3576  000F0C                     __ptext10:
  3577                           	opt stack 0
  3578  000F0C                     _ScanIR:
  3579                           	opt stack 23
  3580                           
  3581                           ;Movement.c: 44: unsigned int SensorResult[2]={0,0};
  3582                           
  3583                           ;incstack = 0
  3584  000F0C  C0A4  F09E         	movff	ScanIR@F3878,ScanIR@SensorResult
  3585  000F10  C0A5  F09F         	movff	ScanIR@F3878+1,ScanIR@SensorResult+1
  3586  000F14  C0A6  F0A0         	movff	ScanIR@F3878+2,ScanIR@SensorResult+2
  3587  000F18  C0A7  F0A1         	movff	ScanIR@F3878+3,ScanIR@SensorResult+3
  3588                           
  3589                           ;Movement.c: 45: char buf[40];
  3590                           ;Movement.c: 49: SensorResult[0]=grabLeftIR();
  3591  000F1C  ECFB  F00C         	call	_grabLeftIR	;wreg free
  3592  000F20  C024  F09E         	movff	?_grabLeftIR,ScanIR@SensorResult
  3593  000F24  C025  F09F         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3594                           
  3595                           ;Movement.c: 50: SensorResult[1]=grabRightIR();
  3596  000F28  ECC2  F00C         	call	_grabRightIR	;wreg free
  3597  000F2C  C024  F0A0         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3598  000F30  C025  F0A1         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3599                           
  3600                           ;Movement.c: 54: CAP1BUFH=0;
  3601  000F34  0E00               	movlw	0
  3602  000F36  6E69               	movwf	3945,c	;volatile
  3603                           
  3604                           ;Movement.c: 55: CAP1BUFL=0;
  3605  000F38  0E00               	movlw	0
  3606  000F3A  6E68               	movwf	3944,c	;volatile
  3607                           
  3608                           ;Movement.c: 56: CAP2BUFH=0;
  3609  000F3C  0E00               	movlw	0
  3610  000F3E  6E67               	movwf	3943,c	;volatile
  3611                           
  3612                           ;Movement.c: 57: CAP2BUFL=0;
  3613  000F40  0E00               	movlw	0
  3614  000F42  6E66               	movwf	3942,c	;volatile
  3615                           
  3616                           ;Movement.c: 61: SendLCD(0b00000001,0);
  3617  000F44  0E00               	movlw	0
  3618  000F46  6E28               	movwf	SendLCD@type,c
  3619  000F48  0E01               	movlw	1
  3620  000F4A  ECB9  F00E         	call	_SendLCD
  3621                           
  3622                           ;Movement.c: 62: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3623  000F4E  0E21               	movlw	33
  3624  000F50                     u3027:
  3625  000F50  2EE8               	decfsz	wreg,f,c
  3626  000F52  D7FE               	goto	u3027
  3627  000F54  F000               	nop	
  3628                           
  3629                           ;Movement.c: 63: SendLCD(0b00000010,0);
  3630  000F56  0E00               	movlw	0
  3631  000F58  6E28               	movwf	SendLCD@type,c
  3632  000F5A  0E02               	movlw	2
  3633  000F5C  ECB9  F00E         	call	_SendLCD
  3634                           
  3635                           ;Movement.c: 64: _delay((unsigned long)((2)*(8000000/4000.0)));
  3636  000F60  0E06               	movlw	6
  3637  000F62  0100               	movlb	0	; () banked
  3638  000F64  6F74               	movwf	??_ScanIR& (0+255),b
  3639  000F66  0E30               	movlw	48
  3640  000F68                     u3037:
  3641  000F68  2EE8               	decfsz	wreg,f,c
  3642  000F6A  D7FE               	goto	u3037
  3643  000F6C  2F74               	decfsz	??_ScanIR& (0+255),f,b
  3644  000F6E  D7FC               	goto	u3037
  3645  000F70  D000               	nop2	
  3646                           
  3647                           ;Movement.c: 65: SetLine(1);
  3648  000F72  0E01               	movlw	1
  3649  000F74  ECA1  F00E         	call	_SetLine
  3650                           
  3651                           ;Movement.c: 66: LCD_String("       Searching");
  3652  000F78  0E34               	movlw	low STR_3
  3653  000F7A  6E2A               	movwf	LCD_String@string,c
  3654  000F7C  0E03               	movlw	high STR_3
  3655  000F7E  6E2B               	movwf	LCD_String@string+1,c
  3656  000F80  EC6C  F00D         	call	_LCD_String	;wreg free
  3657                           
  3658                           ;Movement.c: 67: SetLine(2);
  3659  000F84  0E02               	movlw	2
  3660  000F86  ECA1  F00E         	call	_SetLine
  3661                           
  3662                           ;Movement.c: 68: sprintf(buf,"     %d, %d",SensorResult[0],SensorResult[1]);
  3663  000F8A  0E76               	movlw	low ScanIR@buf
  3664  000F8C  6E30               	movwf	sprintf@sp,c
  3665  000F8E  0E00               	movlw	high ScanIR@buf
  3666  000F90  6E31               	movwf	sprintf@sp+1,c
  3667  000F92  0E62               	movlw	low STR_7
  3668  000F94  6E32               	movwf	sprintf@f,c
  3669  000F96  0E03               	movlw	high STR_7
  3670  000F98  6E33               	movwf	sprintf@f+1,c
  3671  000F9A  C09E  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3672  000F9E  C09F  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3673  000FA2  C0A0  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3674  000FA6  C0A1  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3675  000FAA  EC81  F009         	call	_sprintf	;wreg free
  3676                           
  3677                           ;Movement.c: 69: LCD_String(buf);
  3678  000FAE  0E76               	movlw	low ScanIR@buf
  3679  000FB0  6E2A               	movwf	LCD_String@string,c
  3680  000FB2  0E00               	movlw	high ScanIR@buf
  3681  000FB4  6E2B               	movwf	LCD_String@string+1,c
  3682  000FB6  EC6C  F00D         	call	_LCD_String	;wreg free
  3683                           
  3684                           ;Movement.c: 72: if ((SensorResult[0]+SensorResult[1])>ClearSignalThreshold) {
  3685  000FBA  0100               	movlb	0	; () banked
  3686  000FBC  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3687  000FBE  0100               	movlb	0	; () banked
  3688  000FC0  25A0               	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3689  000FC2  0100               	movlb	0	; () banked
  3690  000FC4  6F74               	movwf	??_ScanIR& (0+255),b
  3691  000FC6  0100               	movlb	0	; () banked
  3692  000FC8  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3693  000FCA  0100               	movlb	0	; () banked
  3694  000FCC  21A1               	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  3695  000FCE  0100               	movlb	0	; () banked
  3696  000FD0  6F75               	movwf	(??_ScanIR+1)& (0+255),b
  3697  000FD2  0E0B               	movlw	low _ClearSignalThreshold
  3698  000FD4  6EF6               	movwf	tblptrl,c
  3699  000FD6                     	if	1	;There is more than 1 active tblptr byte
  3700  000FD6  0E03               	movlw	high _ClearSignalThreshold
  3701  000FD8  6EF7               	movwf	tblptrh,c
  3702  000FDA                     	endif
  3703  000FDA                     	if	0	;There are less than 3 active tblptr bytes
  3704  000FDA                     	endif
  3705  000FDA  0100               	movlb	0	; () banked
  3706  000FDC  5174               	movf	??_ScanIR& (0+255),w,b
  3707  000FDE  0009               	tblrd		*+
  3708  000FE0  5CF5               	subwf	tablat,w,c
  3709  000FE2  0100               	movlb	0	; () banked
  3710  000FE4  5175               	movf	(??_ScanIR+1)& (0+255),w,b
  3711  000FE6  0009               	tblrd		*+
  3712  000FE8  58F5               	subwfb	tablat,w,c
  3713  000FEA  B0D8               	btfsc	status,0,c
  3714  000FEC  D0F8               	goto	l3363
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;Movement.c: 75: if (((SensorResult[0]>DirectionFoundThreshold)&&(SensorResult[1]>Direct
      +                          ionFoundThreshold)
  3718                           ;Movement.c: 76: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3719                           ;Movement.c: 77: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3720  000FEE  0E0D               	movlw	low _DirectionFoundThreshold
  3721  000FF0  6EF6               	movwf	tblptrl,c
  3722  000FF2                     	if	1	;There is more than 1 active tblptr byte
  3723  000FF2  0E03               	movlw	high _DirectionFoundThreshold
  3724  000FF4  6EF7               	movwf	tblptrh,c
  3725  000FF6                     	endif
  3726  000FF6                     	if	0	;There are less than 3 active tblptr bytes
  3727  000FF6                     	endif
  3728  000FF6  0100               	movlb	0	; () banked
  3729  000FF8  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3730  000FFA  0009               	tblrd		*+
  3731  000FFC  5CF5               	subwf	tablat,w,c
  3732  000FFE  0100               	movlb	0	; () banked
  3733  001000  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3734  001002  0009               	tblrd		*+
  3735  001004  58F5               	subwfb	tablat,w,c
  3736  001006  B0D8               	btfsc	status,0,c
  3737  001008  D050               	goto	l3325
  3738                           
  3739                           ; BSR set to: 0
  3740  00100A  0E0D               	movlw	low _DirectionFoundThreshold
  3741  00100C  6EF6               	movwf	tblptrl,c
  3742  00100E                     	if	1	;There is more than 1 active tblptr byte
  3743  00100E  0E03               	movlw	high _DirectionFoundThreshold
  3744  001010  6EF7               	movwf	tblptrh,c
  3745  001012                     	endif
  3746  001012                     	if	0	;There are less than 3 active tblptr bytes
  3747  001012                     	endif
  3748  001012  0100               	movlb	0	; () banked
  3749  001014  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3750  001016  0009               	tblrd		*+
  3751  001018  5CF5               	subwf	tablat,w,c
  3752  00101A  0100               	movlb	0	; () banked
  3753  00101C  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3754  00101E  0009               	tblrd		*+
  3755  001020  58F5               	subwfb	tablat,w,c
  3756  001022  B0D8               	btfsc	status,0,c
  3757  001024  D042               	goto	l3325
  3758                           
  3759                           ; BSR set to: 0
  3760  001026  0E0F               	movlw	low _DirectionFoundTolerance
  3761  001028  6EF6               	movwf	tblptrl,c
  3762  00102A                     	if	1	;There is more than 1 active tblptr byte
  3763  00102A  0E03               	movlw	high _DirectionFoundTolerance
  3764  00102C  6EF7               	movwf	tblptrh,c
  3765  00102E                     	endif
  3766  00102E                     	if	0	;There are less than 3 active tblptr bytes
  3767  00102E                     	endif
  3768  00102E  EE20  F0A0         	lfsr	2,ScanIR@SensorResult+2
  3769  001032  CFDE F074          	movff	postinc2,??_ScanIR
  3770  001036  CFDD F075          	movff	postdec2,??_ScanIR+1
  3771  00103A  0100               	movlb	0	; () banked
  3772  00103C  1F74               	comf	??_ScanIR& (0+255),f,b
  3773  00103E  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  3774  001040  4B74               	infsnz	??_ScanIR& (0+255),f,b
  3775  001042  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  3776  001044  0100               	movlb	0	; () banked
  3777  001046  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3778  001048  0100               	movlb	0	; () banked
  3779  00104A  2774               	addwf	??_ScanIR& (0+255),f,b
  3780  00104C  0100               	movlb	0	; () banked
  3781  00104E  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3782  001050  0100               	movlb	0	; () banked
  3783  001052  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  3784  001054  0009               	tblrd		*+
  3785  001056  50F5               	movf	tablat,w,c
  3786  001058  0100               	movlb	0	; () banked
  3787  00105A  5D74               	subwf	??_ScanIR& (0+255),w,b
  3788  00105C  0009               	tblrd		*+
  3789  00105E  50F5               	movf	tablat,w,c
  3790  001060  0100               	movlb	0	; () banked
  3791  001062  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  3792  001064  A0D8               	btfss	status,0,c
  3793  001066  D01F               	goto	l3319
  3794                           
  3795                           ; BSR set to: 0
  3796  001068  0E0F               	movlw	low _DirectionFoundTolerance
  3797  00106A  6EF6               	movwf	tblptrl,c
  3798  00106C                     	if	1	;There is more than 1 active tblptr byte
  3799  00106C  0E03               	movlw	high _DirectionFoundTolerance
  3800  00106E  6EF7               	movwf	tblptrh,c
  3801  001070                     	endif
  3802  001070                     	if	0	;There are less than 3 active tblptr bytes
  3803  001070                     	endif
  3804  001070  C09E  F074         	movff	ScanIR@SensorResult,??_ScanIR
  3805  001074  C09F  F075         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3806  001078  0100               	movlb	0	; () banked
  3807  00107A  1F74               	comf	??_ScanIR& (0+255),f,b
  3808  00107C  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  3809  00107E  4B74               	infsnz	??_ScanIR& (0+255),f,b
  3810  001080  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  3811  001082  0100               	movlb	0	; () banked
  3812  001084  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3813  001086  0100               	movlb	0	; () banked
  3814  001088  2774               	addwf	??_ScanIR& (0+255),f,b
  3815  00108A  0100               	movlb	0	; () banked
  3816  00108C  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3817  00108E  0100               	movlb	0	; () banked
  3818  001090  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  3819  001092  0009               	tblrd		*+
  3820  001094  50F5               	movf	tablat,w,c
  3821  001096  0100               	movlb	0	; () banked
  3822  001098  5D74               	subwf	??_ScanIR& (0+255),w,b
  3823  00109A  0009               	tblrd		*+
  3824  00109C  50F5               	movf	tablat,w,c
  3825  00109E  0100               	movlb	0	; () banked
  3826  0010A0  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  3827  0010A2  B0D8               	btfsc	status,0,c
  3828  0010A4  D002               	goto	l3325
  3829  0010A6                     l3319:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;Movement.c: 78: return 2;
  3833  0010A6  0E02               	movlw	2
  3834                           
  3835                           ; BSR set to: 0
  3836  0010A8  0012               	return	
  3837  0010AA                     l3325:
  3838                           
  3839                           ; BSR set to: 0
  3840  0010AA  0100               	movlb	0	; () banked
  3841  0010AC  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3842  0010AE  0100               	movlb	0	; () banked
  3843  0010B0  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3844  0010B2  0100               	movlb	0	; () banked
  3845  0010B4  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3846  0010B6  0100               	movlb	0	; () banked
  3847  0010B8  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3848  0010BA  A0D8               	btfss	status,0,c
  3849  0010BC  D03A               	goto	l3345
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Movement.c: 81: stop(mL,mR);
  3853  0010BE  C06A  F062         	movff	ScanIR@mL,stop@mL
  3854  0010C2  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3855  0010C6  C06C  F064         	movff	ScanIR@mR,stop@mR
  3856  0010CA  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3857  0010CE  ECF1  F00B         	call	_stop	;wreg free
  3858                           
  3859                           ;Movement.c: 82: turnLeft(mL,mR);
  3860  0010D2  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  3861  0010D6  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  3862  0010DA  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  3863  0010DE  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  3864  0010E2  ECEB  F00D         	call	_turnLeft	;wreg free
  3865                           
  3866                           ;Movement.c: 83: delay_tenth_s(3);
  3867  0010E6  0E03               	movlw	3
  3868  0010E8  EC50  F00E         	call	_delay_tenth_s
  3869                           
  3870                           ;Movement.c: 84: stop(mL,mR);
  3871  0010EC  C06A  F062         	movff	ScanIR@mL,stop@mL
  3872  0010F0  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3873  0010F4  C06C  F064         	movff	ScanIR@mR,stop@mR
  3874  0010F8  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3875  0010FC  ECF1  F00B         	call	_stop	;wreg free
  3876                           
  3877                           ;Movement.c: 85: MoveTime[*Move]=3;
  3878  001100  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3879  001104  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3880  001108  50DF               	movf	indf2,w,c
  3881  00110A  0100               	movlb	0	; () banked
  3882  00110C  6F74               	movwf	??_ScanIR& (0+255),b
  3883  00110E  0100               	movlb	0	; () banked
  3884  001110  5174               	movf	??_ScanIR& (0+255),w,b
  3885  001112  0D01               	mullw	1
  3886  001114  50F3               	movf	prodl,w,c
  3887  001116  0100               	movlb	0	; () banked
  3888  001118  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  3889  00111A  6ED9               	movwf	fsr2l,c
  3890  00111C  50F4               	movf	prodh,w,c
  3891  00111E  0100               	movlb	0	; () banked
  3892  001120  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  3893  001122  6EDA               	movwf	fsr2h,c
  3894  001124  0E03               	movlw	3
  3895  001126  6EDF               	movwf	indf2,c
  3896  001128  D043               	goto	l3355
  3897  00112A                     l3337:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;Movement.c: 87: Move++;
  3901  00112A  0100               	movlb	0	; () banked
  3902  00112C  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  3903  00112E  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  3904  001130  D054               	goto	l3359
  3905  001132                     l3345:
  3906                           
  3907                           ; BSR set to: 0
  3908  001132  0100               	movlb	0	; () banked
  3909  001134  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3910  001136  0100               	movlb	0	; () banked
  3911  001138  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3912  00113A  0100               	movlb	0	; () banked
  3913  00113C  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3914  00113E  0100               	movlb	0	; () banked
  3915  001140  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3916  001142  B0D8               	btfsc	status,0,c
  3917  001144  D0DC               	goto	l3403
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;Movement.c: 91: stop(mL,mR);
  3921  001146  C06A  F062         	movff	ScanIR@mL,stop@mL
  3922  00114A  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3923  00114E  C06C  F064         	movff	ScanIR@mR,stop@mR
  3924  001152  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3925  001156  ECF1  F00B         	call	_stop	;wreg free
  3926                           
  3927                           ;Movement.c: 92: turnRight(mL,mR);
  3928  00115A  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  3929  00115E  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  3930  001162  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  3931  001166  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  3932  00116A  ECC4  F00D         	call	_turnRight	;wreg free
  3933                           
  3934                           ;Movement.c: 93: delay_tenth_s(3);
  3935  00116E  0E03               	movlw	3
  3936  001170  EC50  F00E         	call	_delay_tenth_s
  3937                           
  3938                           ;Movement.c: 94: stop(mL,mR);
  3939  001174  C06A  F062         	movff	ScanIR@mL,stop@mL
  3940  001178  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3941  00117C  C06C  F064         	movff	ScanIR@mR,stop@mR
  3942  001180  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3943  001184  ECF1  F00B         	call	_stop	;wreg free
  3944                           
  3945                           ;Movement.c: 95: MoveTime[*Move]=-3;
  3946  001188  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3947  00118C  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3948  001190  50DF               	movf	indf2,w,c
  3949  001192  0100               	movlb	0	; () banked
  3950  001194  6F74               	movwf	??_ScanIR& (0+255),b
  3951  001196  0100               	movlb	0	; () banked
  3952  001198  5174               	movf	??_ScanIR& (0+255),w,b
  3953  00119A  0D01               	mullw	1
  3954  00119C  50F3               	movf	prodl,w,c
  3955  00119E  0100               	movlb	0	; () banked
  3956  0011A0  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  3957  0011A2  6ED9               	movwf	fsr2l,c
  3958  0011A4  50F4               	movf	prodh,w,c
  3959  0011A6  0100               	movlb	0	; () banked
  3960  0011A8  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  3961  0011AA  6EDA               	movwf	fsr2h,c
  3962  0011AC  0EFD               	movlw	253
  3963  0011AE  D7BB               	goto	L3
  3964  0011B0                     l3355:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;Movement.c: 96: MoveType[*Move]=1;
  3968  0011B0  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3969  0011B4  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3970  0011B8  50DF               	movf	indf2,w,c
  3971  0011BA  0100               	movlb	0	; () banked
  3972  0011BC  6F74               	movwf	??_ScanIR& (0+255),b
  3973  0011BE  0100               	movlb	0	; () banked
  3974  0011C0  5174               	movf	??_ScanIR& (0+255),w,b
  3975  0011C2  0D01               	mullw	1
  3976  0011C4  50F3               	movf	prodl,w,c
  3977  0011C6  0100               	movlb	0	; () banked
  3978  0011C8  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  3979  0011CA  6ED9               	movwf	fsr2l,c
  3980  0011CC  50F4               	movf	prodh,w,c
  3981  0011CE  0100               	movlb	0	; () banked
  3982  0011D0  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  3983  0011D2  6EDA               	movwf	fsr2h,c
  3984  0011D4  0E01               	movlw	1
  3985  0011D6  6EDF               	movwf	indf2,c
  3986  0011D8  D7A8               	goto	l3337
  3987  0011DA                     l3359:
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;Movement.c: 98: return 1;
  3991  0011DA  0E01               	movlw	1
  3992                           
  3993                           ; BSR set to: 0
  3994  0011DC  0012               	return	
  3995  0011DE                     l3363:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;Movement.c: 102: stop(mL,mR);
  3999  0011DE  C06A  F062         	movff	ScanIR@mL,stop@mL
  4000  0011E2  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4001  0011E6  C06C  F064         	movff	ScanIR@mR,stop@mR
  4002  0011EA  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4003  0011EE  ECF1  F00B         	call	_stop	;wreg free
  4004                           
  4005                           ;Movement.c: 105: if (SensorResult[0]<=SensorResult[1]) {
  4006  0011F2  0100               	movlb	0	; () banked
  4007  0011F4  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4008  0011F6  0100               	movlb	0	; () banked
  4009  0011F8  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4010  0011FA  0100               	movlb	0	; () banked
  4011  0011FC  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4012  0011FE  0100               	movlb	0	; () banked
  4013  001200  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4014  001202  A0D8               	btfss	status,0,c
  4015  001204  D030               	goto	l3385
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;Movement.c: 106: turnLeft(mL,mR);
  4019  001206  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  4020  00120A  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  4021  00120E  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  4022  001212  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  4023  001216  ECEB  F00D         	call	_turnLeft	;wreg free
  4024                           
  4025                           ;Movement.c: 107: delay_tenth_s(5);
  4026  00121A  0E05               	movlw	5
  4027  00121C  EC50  F00E         	call	_delay_tenth_s
  4028                           
  4029                           ;Movement.c: 108: stop(mL,mR);
  4030  001220  C06A  F062         	movff	ScanIR@mL,stop@mL
  4031  001224  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4032  001228  C06C  F064         	movff	ScanIR@mR,stop@mR
  4033  00122C  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4034  001230  ECF1  F00B         	call	_stop	;wreg free
  4035                           
  4036                           ;Movement.c: 109: MoveTime[*Move]=5;
  4037  001234  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4038  001238  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4039  00123C  50DF               	movf	indf2,w,c
  4040  00123E  0100               	movlb	0	; () banked
  4041  001240  6F74               	movwf	??_ScanIR& (0+255),b
  4042  001242  0100               	movlb	0	; () banked
  4043  001244  5174               	movf	??_ScanIR& (0+255),w,b
  4044  001246  0D01               	mullw	1
  4045  001248  50F3               	movf	prodl,w,c
  4046  00124A  0100               	movlb	0	; () banked
  4047  00124C  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4048  00124E  6ED9               	movwf	fsr2l,c
  4049  001250  50F4               	movf	prodh,w,c
  4050  001252  0100               	movlb	0	; () banked
  4051  001254  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4052  001256  6EDA               	movwf	fsr2h,c
  4053  001258  0E05               	movlw	5
  4054  00125A  6EDF               	movwf	indf2,c
  4055  00125C  D039               	goto	l3395
  4056  00125E                     l3377:
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;Movement.c: 111: Move++;
  4060  00125E  0100               	movlb	0	; () banked
  4061  001260  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  4062  001262  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  4063  001264  D04A               	goto	l3399
  4064  001266                     l3385:
  4065                           
  4066                           ; BSR set to: 0
  4067  001266  0100               	movlb	0	; () banked
  4068  001268  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4069  00126A  0100               	movlb	0	; () banked
  4070  00126C  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4071  00126E  0100               	movlb	0	; () banked
  4072  001270  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4073  001272  0100               	movlb	0	; () banked
  4074  001274  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4075  001276  B0D8               	btfsc	status,0,c
  4076  001278  D042               	goto	l3403
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;Movement.c: 115: turnRight(mL,mR);
  4080  00127A  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  4081  00127E  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  4082  001282  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  4083  001286  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  4084  00128A  ECC4  F00D         	call	_turnRight	;wreg free
  4085                           
  4086                           ;Movement.c: 116: delay_tenth_s(5);
  4087  00128E  0E05               	movlw	5
  4088  001290  EC50  F00E         	call	_delay_tenth_s
  4089                           
  4090                           ;Movement.c: 117: stop(mL,mR);
  4091  001294  C06A  F062         	movff	ScanIR@mL,stop@mL
  4092  001298  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4093  00129C  C06C  F064         	movff	ScanIR@mR,stop@mR
  4094  0012A0  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4095  0012A4  ECF1  F00B         	call	_stop	;wreg free
  4096                           
  4097                           ;Movement.c: 118: MoveTime[*Move]=-5;
  4098  0012A8  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4099  0012AC  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4100  0012B0  50DF               	movf	indf2,w,c
  4101  0012B2  0100               	movlb	0	; () banked
  4102  0012B4  6F74               	movwf	??_ScanIR& (0+255),b
  4103  0012B6  0100               	movlb	0	; () banked
  4104  0012B8  5174               	movf	??_ScanIR& (0+255),w,b
  4105  0012BA  0D01               	mullw	1
  4106  0012BC  50F3               	movf	prodl,w,c
  4107  0012BE  0100               	movlb	0	; () banked
  4108  0012C0  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4109  0012C2  6ED9               	movwf	fsr2l,c
  4110  0012C4  50F4               	movf	prodh,w,c
  4111  0012C6  0100               	movlb	0	; () banked
  4112  0012C8  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4113  0012CA  6EDA               	movwf	fsr2h,c
  4114  0012CC  0EFB               	movlw	251
  4115  0012CE  D7C5               	goto	L4
  4116  0012D0                     l3395:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;Movement.c: 119: MoveType[*Move]=1;
  4120  0012D0  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4121  0012D4  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4122  0012D8  50DF               	movf	indf2,w,c
  4123  0012DA  0100               	movlb	0	; () banked
  4124  0012DC  6F74               	movwf	??_ScanIR& (0+255),b
  4125  0012DE  0100               	movlb	0	; () banked
  4126  0012E0  5174               	movf	??_ScanIR& (0+255),w,b
  4127  0012E2  0D01               	mullw	1
  4128  0012E4  50F3               	movf	prodl,w,c
  4129  0012E6  0100               	movlb	0	; () banked
  4130  0012E8  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  4131  0012EA  6ED9               	movwf	fsr2l,c
  4132  0012EC  50F4               	movf	prodh,w,c
  4133  0012EE  0100               	movlb	0	; () banked
  4134  0012F0  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4135  0012F2  6EDA               	movwf	fsr2h,c
  4136  0012F4  0E01               	movlw	1
  4137  0012F6  6EDF               	movwf	indf2,c
  4138  0012F8  D7B2               	goto	l3377
  4139  0012FA                     l3399:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;Movement.c: 121: return 0;
  4143  0012FA  0E00               	movlw	0
  4144                           
  4145                           ; BSR set to: 0
  4146  0012FC  0012               	return	
  4147  0012FE                     l3403:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;Movement.c: 122: }
  4151                           ;Movement.c: 123: }
  4152                           ;Movement.c: 124: return 0;
  4153  0012FE  0E00               	movlw	0
  4154  001300  0012               	return	
  4155  001302                     __end_of_ScanIR:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           indf1	equ	0xFE7
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function _turnRight *****************
  4177 ;; Defined at:
  4178 ;;		line 98 in file "dc_motor.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4181 ;;		 -> main@mL(9), 
  4182 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4183 ;;		 -> main@mR(9), 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;		None               void
  4188 ;; Registers used:
  4189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4195 ;;      Params:         0       4       0       0
  4196 ;;      Locals:         0       0       0       0
  4197 ;;      Temps:          0       0       0       0
  4198 ;;      Totals:         0       4       0       0
  4199 ;;Total ram usage:        4 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    6
  4202 ;; This function calls:
  4203 ;;		_fullSpeedAhead
  4204 ;;		_stop
  4205 ;; This function is called by:
  4206 ;;		_ScanIR
  4207 ;;		_ScanWithRange
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text11
  4212  001B88                     __ptext11:
  4213                           	opt stack 0
  4214  001B88                     _turnRight:
  4215                           	opt stack 23
  4216                           
  4217                           ;dc_motor.c: 100: stop(mL, mR);
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;incstack = 0
  4221  001B88  C066  F062         	movff	turnRight@mL,stop@mL
  4222  001B8C  C067  F063         	movff	turnRight@mL+1,stop@mL+1
  4223  001B90  C068  F064         	movff	turnRight@mR,stop@mR
  4224  001B94  C069  F065         	movff	turnRight@mR+1,stop@mR+1
  4225  001B98  ECF1  F00B         	call	_stop	;wreg free
  4226                           
  4227                           ;dc_motor.c: 102: mL->direction=1;
  4228  001B9C  0100               	movlb	0	; () banked
  4229  001B9E  EE20 F001          	lfsr	2,1
  4230  001BA2  5166               	movf	turnRight@mL& (0+255),w,b
  4231  001BA4  26D9               	addwf	fsr2l,f,c
  4232  001BA6  5167               	movf	(turnRight@mL+1)& (0+255),w,b
  4233  001BA8  22DA               	addwfc	fsr2h,f,c
  4234  001BAA  0E01               	movlw	1
  4235  001BAC  6EDF               	movwf	indf2,c
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;dc_motor.c: 103: mR->direction=0;
  4239  001BAE  0100               	movlb	0	; () banked
  4240  001BB0  EE20 F001          	lfsr	2,1
  4241  001BB4  5168               	movf	turnRight@mR& (0+255),w,b
  4242  001BB6  26D9               	addwf	fsr2l,f,c
  4243  001BB8  5169               	movf	(turnRight@mR+1)& (0+255),w,b
  4244  001BBA  22DA               	addwfc	fsr2h,f,c
  4245  001BBC  0E00               	movlw	0
  4246  001BBE  6EDF               	movwf	indf2,c
  4247                           
  4248                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  4249  001BC0  C066  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  4250  001BC4  C067  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  4251  001BC8  C068  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  4252  001BCC  C069  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  4253  001BD0  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  4254  001BD4  0012               	return		;funcret
  4255  001BD6                     __end_of_turnRight:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           postinc0	equ	0xFEE
  4265                           wreg	equ	0xFE8
  4266                           indf1	equ	0xFE7
  4267                           fsr1h	equ	0xFE2
  4268                           fsr1l	equ	0xFE1
  4269                           indf2	equ	0xFDF
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _turnLeft *****************
  4277 ;; Defined at:
  4278 ;;		line 87 in file "dc_motor.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4281 ;;		 -> main@mL(9), 
  4282 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4283 ;;		 -> main@mR(9), 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;		None               void
  4288 ;; Registers used:
  4289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4295 ;;      Params:         0       4       0       0
  4296 ;;      Locals:         0       0       0       0
  4297 ;;      Temps:          0       0       0       0
  4298 ;;      Totals:         0       4       0       0
  4299 ;;Total ram usage:        4 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    6
  4302 ;; This function calls:
  4303 ;;		_fullSpeedAhead
  4304 ;;		_stop
  4305 ;; This function is called by:
  4306 ;;		_ScanIR
  4307 ;;		_ScanWithRange
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text12
  4312  001BD6                     __ptext12:
  4313                           	opt stack 0
  4314  001BD6                     _turnLeft:
  4315                           	opt stack 23
  4316                           
  4317                           ;dc_motor.c: 89: stop(mL, mR);
  4318                           
  4319                           ;incstack = 0
  4320  001BD6  C066  F062         	movff	turnLeft@mL,stop@mL
  4321  001BDA  C067  F063         	movff	turnLeft@mL+1,stop@mL+1
  4322  001BDE  C068  F064         	movff	turnLeft@mR,stop@mR
  4323  001BE2  C069  F065         	movff	turnLeft@mR+1,stop@mR+1
  4324  001BE6  ECF1  F00B         	call	_stop	;wreg free
  4325                           
  4326                           ;dc_motor.c: 91: mL->direction=0;
  4327  001BEA  0100               	movlb	0	; () banked
  4328  001BEC  EE20 F001          	lfsr	2,1
  4329  001BF0  5166               	movf	turnLeft@mL& (0+255),w,b
  4330  001BF2  26D9               	addwf	fsr2l,f,c
  4331  001BF4  5167               	movf	(turnLeft@mL+1)& (0+255),w,b
  4332  001BF6  22DA               	addwfc	fsr2h,f,c
  4333  001BF8  0E00               	movlw	0
  4334  001BFA  6EDF               	movwf	indf2,c
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;dc_motor.c: 92: mR->direction=1;
  4338  001BFC  0100               	movlb	0	; () banked
  4339  001BFE  EE20 F001          	lfsr	2,1
  4340  001C02  5168               	movf	turnLeft@mR& (0+255),w,b
  4341  001C04  26D9               	addwf	fsr2l,f,c
  4342  001C06  5169               	movf	(turnLeft@mR+1)& (0+255),w,b
  4343  001C08  22DA               	addwfc	fsr2h,f,c
  4344  001C0A  0E01               	movlw	1
  4345  001C0C  6EDF               	movwf	indf2,c
  4346                           
  4347                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4348  001C0E  C066  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  4349  001C12  C067  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4350  001C16  C068  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  4351  001C1A  C069  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4352  001C1E  EC34  F00D         	call	_fullSpeedAhead	;wreg free
  4353  001C22  0012               	return		;funcret
  4354  001C24                     __end_of_turnLeft:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           prodh	equ	0xFF4
  4361                           prodl	equ	0xFF3
  4362                           intcon	equ	0xFF2
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           indf1	equ	0xFE7
  4366                           fsr1h	equ	0xFE2
  4367                           fsr1l	equ	0xFE1
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _stop *****************
  4376 ;; Defined at:
  4377 ;;		line 67 in file "dc_motor.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4380 ;;		 -> main@mL(9), 
  4381 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4382 ;;		 -> main@mR(9), 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4394 ;;      Params:         0       4       0       0
  4395 ;;      Locals:         0       0       0       0
  4396 ;;      Temps:          0       0       0       0
  4397 ;;      Totals:         0       4       0       0
  4398 ;;Total ram usage:        4 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    5
  4401 ;; This function calls:
  4402 ;;		_setMotorPWM
  4403 ;; This function is called by:
  4404 ;;		_main
  4405 ;;		_turnLeft
  4406 ;;		_turnRight
  4407 ;;		_ScanIR
  4408 ;;		_ScanWithRange
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text13
  4413  0017E2                     __ptext13:
  4414                           	opt stack 0
  4415  0017E2                     _stop:
  4416                           	opt stack 25
  4417                           
  4418                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4419                           
  4420                           ;incstack = 0
  4421  0017E2  D028               	goto	l3031
  4422  0017E4                     l3017:
  4423                           
  4424                           ;dc_motor.c: 71: if(mL->power>0){
  4425  0017E4  C062  FFD9         	movff	stop@mL,fsr2l
  4426  0017E8  C063  FFDA         	movff	stop@mL+1,fsr2h
  4427  0017EC  50DF               	movf	indf2,w,c
  4428  0017EE  B4D8               	btfsc	status,2,c
  4429  0017F0  D005               	goto	l3021
  4430                           
  4431                           ;dc_motor.c: 72: mL->power--;
  4432  0017F2  C062  FFD9         	movff	stop@mL,fsr2l
  4433  0017F6  C063  FFDA         	movff	stop@mL+1,fsr2h
  4434  0017FA  06DF               	decf	indf2,f,c
  4435  0017FC                     l3021:
  4436                           
  4437                           ;dc_motor.c: 73: }
  4438                           ;dc_motor.c: 74: if(mR->power>0){
  4439  0017FC  C064  FFD9         	movff	stop@mR,fsr2l
  4440  001800  C065  FFDA         	movff	stop@mR+1,fsr2h
  4441  001804  50DF               	movf	indf2,w,c
  4442  001806  B4D8               	btfsc	status,2,c
  4443  001808  D005               	goto	l3025
  4444                           
  4445                           ;dc_motor.c: 75: mR->power--;
  4446  00180A  C064  FFD9         	movff	stop@mR,fsr2l
  4447  00180E  C065  FFDA         	movff	stop@mR+1,fsr2h
  4448  001812  06DF               	decf	indf2,f,c
  4449  001814                     l3025:
  4450                           
  4451                           ;dc_motor.c: 76: }
  4452                           ;dc_motor.c: 77: setMotorPWM(mL);
  4453  001814  C062  F032         	movff	stop@mL,setMotorPWM@m
  4454  001818  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4455  00181C  EC39  F00A         	call	_setMotorPWM	;wreg free
  4456                           
  4457                           ;dc_motor.c: 78: setMotorPWM(mR);
  4458  001820  C064  F032         	movff	stop@mR,setMotorPWM@m
  4459  001824  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4460  001828  EC39  F00A         	call	_setMotorPWM	;wreg free
  4461                           
  4462                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4463  00182C  0E21               	movlw	33
  4464  00182E                     u3047:
  4465  00182E  2EE8               	decfsz	wreg,f,c
  4466  001830  D7FE               	goto	u3047
  4467  001832  F000               	nop	
  4468  001834                     l3031:
  4469  001834  C062  FFD9         	movff	stop@mL,fsr2l
  4470  001838  C063  FFDA         	movff	stop@mL+1,fsr2h
  4471  00183C  50DF               	movf	indf2,w,c
  4472  00183E  A4D8               	btfss	status,2,c
  4473  001840  D7D1               	goto	l3017
  4474  001842  C064  FFD9         	movff	stop@mR,fsr2l
  4475  001846  C065  FFDA         	movff	stop@mR+1,fsr2h
  4476  00184A  50DF               	movf	indf2,w,c
  4477  00184C  A4D8               	btfss	status,2,c
  4478  00184E  D7CA               	goto	l3017
  4479                           
  4480                           ;dc_motor.c: 80: }
  4481                           ;dc_motor.c: 81: mL->direction=1;
  4482  001850  0100               	movlb	0	; () banked
  4483  001852  EE20 F001          	lfsr	2,1
  4484  001856  5162               	movf	stop@mL& (0+255),w,b
  4485  001858  26D9               	addwf	fsr2l,f,c
  4486  00185A  5163               	movf	(stop@mL+1)& (0+255),w,b
  4487  00185C  22DA               	addwfc	fsr2h,f,c
  4488  00185E  0E01               	movlw	1
  4489  001860  6EDF               	movwf	indf2,c
  4490                           
  4491                           ;dc_motor.c: 82: mR->direction=1;
  4492  001862  0100               	movlb	0	; () banked
  4493  001864  EE20 F001          	lfsr	2,1
  4494  001868  5164               	movf	stop@mR& (0+255),w,b
  4495  00186A  26D9               	addwf	fsr2l,f,c
  4496  00186C  5165               	movf	(stop@mR+1)& (0+255),w,b
  4497  00186E  22DA               	addwfc	fsr2h,f,c
  4498  001870  0E01               	movlw	1
  4499  001872  6EDF               	movwf	indf2,c
  4500                           
  4501                           ; BSR set to: 0
  4502  001874  0012               	return		;funcret
  4503  001876                     __end_of_stop:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           indf1	equ	0xFE7
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _fullSpeedAhead *****************
  4525 ;; Defined at:
  4526 ;;		line 108 in file "dc_motor.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4529 ;;		 -> main@mL(9), 
  4530 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4531 ;;		 -> main@mR(9), 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;		None
  4534 ;; Return value:  Size  Location     Type
  4535 ;;		None               void
  4536 ;; Registers used:
  4537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4543 ;;      Params:         0       4       0       0
  4544 ;;      Locals:         0       0       0       0
  4545 ;;      Temps:          1       0       0       0
  4546 ;;      Totals:         1       4       0       0
  4547 ;;Total ram usage:        5 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    5
  4550 ;; This function calls:
  4551 ;;		_setMotorPWM
  4552 ;; This function is called by:
  4553 ;;		_main
  4554 ;;		_turnLeft
  4555 ;;		_turnRight
  4556 ;;		_fullSpeedBack
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text14
  4561  001A68                     __ptext14:
  4562                           	opt stack 0
  4563  001A68                     _fullSpeedAhead:
  4564                           	opt stack 24
  4565                           
  4566                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;incstack = 0
  4570  001A68  D028               	goto	l167
  4571  001A6A                     l3039:
  4572                           
  4573                           ;dc_motor.c: 112: if(mL->power<100){
  4574  001A6A  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4575  001A6E  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4576  001A72  0E64               	movlw	100
  4577  001A74  60DF               	cpfslt	indf2,c
  4578  001A76  D005               	goto	l3043
  4579                           
  4580                           ;dc_motor.c: 113: mL->power++;
  4581  001A78  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4582  001A7C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4583  001A80  2ADF               	incf	indf2,f,c
  4584  001A82                     l3043:
  4585                           
  4586                           ;dc_motor.c: 114: }
  4587                           ;dc_motor.c: 115: if(mR->power<100){
  4588  001A82  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4589  001A86  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4590  001A8A  0E64               	movlw	100
  4591  001A8C  60DF               	cpfslt	indf2,c
  4592  001A8E  D005               	goto	l3047
  4593                           
  4594                           ;dc_motor.c: 116: mR->power++;
  4595  001A90  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4596  001A94  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4597  001A98  2ADF               	incf	indf2,f,c
  4598  001A9A                     l3047:
  4599                           
  4600                           ;dc_motor.c: 117: }
  4601                           ;dc_motor.c: 118: setMotorPWM(mL);
  4602  001A9A  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4603  001A9E  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4604  001AA2  EC39  F00A         	call	_setMotorPWM	;wreg free
  4605                           
  4606                           ;dc_motor.c: 119: setMotorPWM(mR);
  4607  001AA6  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4608  001AAA  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4609  001AAE  EC39  F00A         	call	_setMotorPWM	;wreg free
  4610                           
  4611                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4612  001AB2  0E21               	movlw	33
  4613  001AB4                     u3057:
  4614  001AB4  2EE8               	decfsz	wreg,f,c
  4615  001AB6  D7FE               	goto	u3057
  4616  001AB8  F000               	nop	
  4617  001ABA                     l167:
  4618  001ABA  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4619  001ABE  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4620  001AC2  0E63               	movlw	99
  4621  001AC4  64DF               	cpfsgt	indf2,c
  4622  001AC6  D7D1               	goto	l3039
  4623  001AC8  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4624  001ACC  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4625  001AD0  0E63               	movlw	99
  4626  001AD2  64DF               	cpfsgt	indf2,c
  4627  001AD4  D7CA               	goto	l3039
  4628  001AD6  0012               	return	
  4629  001AD8                     __end_of_fullSpeedAhead:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           indf1	equ	0xFE7
  4641                           fsr1h	equ	0xFE2
  4642                           fsr1l	equ	0xFE1
  4643                           indf2	equ	0xFDF
  4644                           postinc2	equ	0xFDE
  4645                           postdec2	equ	0xFDD
  4646                           fsr2h	equ	0xFDA
  4647                           fsr2l	equ	0xFD9
  4648                           status	equ	0xFD8
  4649                           
  4650 ;; *************** function _setMotorPWM *****************
  4651 ;; Defined at:
  4652 ;;		line 26 in file "dc_motor.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4655 ;;		 -> main@mR(9), main@mL(9), 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  PWMduty         2    0[BANK0 ] int 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;		None               void
  4660 ;; Registers used:
  4661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4667 ;;      Params:         2       0       0       0
  4668 ;;      Locals:         0       2       0       0
  4669 ;;      Temps:          5       0       0       0
  4670 ;;      Totals:         7       2       0       0
  4671 ;;Total ram usage:        9 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    4
  4674 ;; This function calls:
  4675 ;;		___awdiv
  4676 ;;		___wmul
  4677 ;; This function is called by:
  4678 ;;		_stop
  4679 ;;		_fullSpeedAhead
  4680 ;;		_setMotorFullSpeed
  4681 ;;		_stopMotor
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text15
  4686  001472                     __ptext15:
  4687                           	opt stack 0
  4688  001472                     _setMotorPWM:
  4689                           	opt stack 25
  4690                           
  4691                           ;dc_motor.c: 28: int PWMduty;
  4692                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4693                           
  4694                           ;incstack = 0
  4695  001472  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4696  001476  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4697  00147A  50DF               	movf	indf2,w,c
  4698  00147C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4699  00147E  5034               	movf	??_setMotorPWM,w,c
  4700  001480  6E24               	movwf	___wmul@multiplier,c
  4701  001482  6A25               	clrf	___wmul@multiplier+1,c
  4702  001484  EE20 F007          	lfsr	2,7
  4703  001488  5032               	movf	setMotorPWM@m,w,c
  4704  00148A  26D9               	addwf	fsr2l,f,c
  4705  00148C  5033               	movf	setMotorPWM@m+1,w,c
  4706  00148E  22DA               	addwfc	fsr2h,f,c
  4707  001490  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4708  001494  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4709  001498  ECF9  F00E         	call	___wmul	;wreg free
  4710  00149C  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4711  0014A0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4712  0014A4  0E00               	movlw	0
  4713  0014A6  6E2D               	movwf	___awdiv@divisor+1,c
  4714  0014A8  0E64               	movlw	100
  4715  0014AA  6E2C               	movwf	___awdiv@divisor,c
  4716  0014AC  EC80  F00C         	call	___awdiv	;wreg free
  4717  0014B0  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4718  0014B4  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4719                           
  4720                           ;dc_motor.c: 32: if (m->direction)
  4721  0014B8  EE20 F001          	lfsr	2,1
  4722  0014BC  5032               	movf	setMotorPWM@m,w,c
  4723  0014BE  26D9               	addwf	fsr2l,f,c
  4724  0014C0  5033               	movf	setMotorPWM@m+1,w,c
  4725  0014C2  22DA               	addwfc	fsr2h,f,c
  4726  0014C4  50DF               	movf	indf2,w,c
  4727  0014C6  B4D8               	btfsc	status,2,c
  4728  0014C8  D02E               	goto	l3013
  4729                           
  4730                           ;dc_motor.c: 33: {
  4731                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4732  0014CA  EE20 F006          	lfsr	2,6
  4733  0014CE  5032               	movf	setMotorPWM@m,w,c
  4734  0014D0  26D9               	addwf	fsr2l,f,c
  4735  0014D2  5033               	movf	setMotorPWM@m+1,w,c
  4736  0014D4  22DA               	addwfc	fsr2h,f,c
  4737  0014D6  50DF               	movf	indf2,w,c
  4738  0014D8  6E34               	movwf	??_setMotorPWM& (0+255),c
  4739  0014DA  0E01               	movlw	1
  4740  0014DC  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4741  0014DE  2A34               	incf	??_setMotorPWM,f,c
  4742  0014E0  D002               	goto	u2344
  4743  0014E2                     u2345:
  4744  0014E2  90D8               	bcf	status,0,c
  4745  0014E4  3635               	rlcf	??_setMotorPWM+1,f,c
  4746  0014E6                     u2344:
  4747  0014E6  2E34               	decfsz	??_setMotorPWM,f,c
  4748  0014E8  D7FC               	goto	u2345
  4749  0014EA  5035               	movf	??_setMotorPWM+1,w,c
  4750  0014EC  108A               	iorwf	3978,w,c	;volatile
  4751  0014EE  6E8A               	movwf	3978,c	;volatile
  4752                           
  4753                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4754  0014F0  EE20 F007          	lfsr	2,7
  4755  0014F4  5032               	movf	setMotorPWM@m,w,c
  4756  0014F6  26D9               	addwf	fsr2l,f,c
  4757  0014F8  5033               	movf	setMotorPWM@m+1,w,c
  4758  0014FA  22DA               	addwfc	fsr2h,f,c
  4759  0014FC  CFDE F034          	movff	postinc2,??_setMotorPWM
  4760  001500  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4761  001504  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4762  001508  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4763  00150C  1E36               	comf	??_setMotorPWM+2,f,c
  4764  00150E  1E37               	comf	??_setMotorPWM+3,f,c
  4765  001510  4A36               	infsnz	??_setMotorPWM+2,f,c
  4766  001512  2A37               	incf	??_setMotorPWM+3,f,c
  4767  001514  5034               	movf	??_setMotorPWM,w,c
  4768  001516  2436               	addwf	??_setMotorPWM+2,w,c
  4769  001518  0100               	movlb	0	; () banked
  4770  00151A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4771  00151C  5035               	movf	??_setMotorPWM+1,w,c
  4772  00151E  2037               	addwfc	??_setMotorPWM+3,w,c
  4773  001520  0100               	movlb	0	; () banked
  4774  001522  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4775                           
  4776                           ;dc_motor.c: 36: }
  4777  001524  D014               	goto	l137
  4778  001526                     l3013:
  4779                           
  4780                           ;dc_motor.c: 37: else
  4781                           ;dc_motor.c: 38: {
  4782                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4783  001526  EE20 F006          	lfsr	2,6
  4784  00152A  5032               	movf	setMotorPWM@m,w,c
  4785  00152C  26D9               	addwf	fsr2l,f,c
  4786  00152E  5033               	movf	setMotorPWM@m+1,w,c
  4787  001530  22DA               	addwfc	fsr2h,f,c
  4788  001532  50DF               	movf	indf2,w,c
  4789  001534  6E34               	movwf	??_setMotorPWM& (0+255),c
  4790  001536  0E01               	movlw	1
  4791  001538  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4792  00153A  2A34               	incf	??_setMotorPWM,f,c
  4793  00153C  D002               	goto	u2354
  4794  00153E                     u2355:
  4795  00153E  90D8               	bcf	status,0,c
  4796  001540  3635               	rlcf	??_setMotorPWM+1,f,c
  4797  001542                     u2354:
  4798  001542  2E34               	decfsz	??_setMotorPWM,f,c
  4799  001544  D7FC               	goto	u2355
  4800  001546  5035               	movf	??_setMotorPWM+1,w,c
  4801  001548  0AFF               	xorlw	255
  4802  00154A  148A               	andwf	3978,w,c	;volatile
  4803  00154C  6E8A               	movwf	3978,c	;volatile
  4804  00154E                     l137:
  4805                           
  4806                           ;dc_motor.c: 40: }
  4807                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4808  00154E  EE20 F002          	lfsr	2,2
  4809  001552  5032               	movf	setMotorPWM@m,w,c
  4810  001554  26D9               	addwf	fsr2l,f,c
  4811  001556  5033               	movf	setMotorPWM@m+1,w,c
  4812  001558  22DA               	addwfc	fsr2h,f,c
  4813  00155A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4814  00155E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4815  001562  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4816  001566  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4817  00156A  0100               	movlb	0	; () banked
  4818  00156C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4819  00156E  46E8               	rlncf	wreg,f,c
  4820  001570  0BFC               	andlw	252
  4821  001572  6EDF               	movwf	indf2,c
  4822                           
  4823                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4824  001574  EE20 F004          	lfsr	2,4
  4825  001578  5032               	movf	setMotorPWM@m,w,c
  4826  00157A  26D9               	addwf	fsr2l,f,c
  4827  00157C  5033               	movf	setMotorPWM@m+1,w,c
  4828  00157E  22DA               	addwfc	fsr2h,f,c
  4829  001580  CFDE F034          	movff	postinc2,??_setMotorPWM
  4830  001584  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4831  001588  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4832  00158C  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4833  001590  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4834  001594  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4835  001598  0E06               	movlw	6
  4836  00159A  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4837  00159C                     u2365:
  4838  00159C  3437               	rlcf	??_setMotorPWM+3,w,c
  4839  00159E  3237               	rrcf	??_setMotorPWM+3,f,c
  4840  0015A0  3236               	rrcf	??_setMotorPWM+2,f,c
  4841  0015A2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4842  0015A4  D7FB               	goto	u2365
  4843  0015A6  5036               	movf	??_setMotorPWM+2,w,c
  4844  0015A8  6EDF               	movwf	indf2,c
  4845                           
  4846                           ; BSR set to: 0
  4847  0015AA  0012               	return		;funcret
  4848  0015AC                     __end_of_setMotorPWM:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           prodh	equ	0xFF4
  4855                           prodl	equ	0xFF3
  4856                           intcon	equ	0xFF2
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function ___wmul *****************
  4870 ;; Defined at:
  4871 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  multiplier      2   35[COMRAM] unsigned int 
  4874 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  product         2   39[COMRAM] unsigned int 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2   35[COMRAM] unsigned int 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0, prodl, prodh
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4886 ;;      Params:         4       0       0       0
  4887 ;;      Locals:         2       0       0       0
  4888 ;;      Temps:          0       0       0       0
  4889 ;;      Totals:         6       0       0       0
  4890 ;;Total ram usage:        6 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    3
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_setMotorPWM
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text16
  4901  001DF2                     __ptext16:
  4902                           	opt stack 0
  4903  001DF2                     ___wmul:
  4904                           	opt stack 25
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;incstack = 0
  4908  001DF2  5024               	movf	___wmul@multiplier,w,c
  4909  001DF4  0226               	mulwf	___wmul@multiplicand,c
  4910  001DF6  CFF3 F028          	movff	prodl,___wmul@product
  4911  001DFA  CFF4 F029          	movff	prodh,___wmul@product+1
  4912  001DFE  5024               	movf	___wmul@multiplier,w,c
  4913  001E00  0227               	mulwf	___wmul@multiplicand+1,c
  4914  001E02  50F3               	movf	prodl,w,c
  4915  001E04  2629               	addwf	___wmul@product+1,f,c
  4916  001E06  5025               	movf	___wmul@multiplier+1,w,c
  4917  001E08  0226               	mulwf	___wmul@multiplicand,c
  4918  001E0A  50F3               	movf	prodl,w,c
  4919  001E0C  2629               	addwf	___wmul@product+1,f,c
  4920  001E0E  C028  F024         	movff	___wmul@product,?___wmul
  4921  001E12  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4922  001E16  0012               	return	
  4923  001E18                     __end_of___wmul:
  4924                           	opt stack 0
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodh	equ	0xFF4
  4930                           prodl	equ	0xFF3
  4931                           intcon	equ	0xFF2
  4932                           postinc0	equ	0xFEE
  4933                           wreg	equ	0xFE8
  4934                           indf1	equ	0xFE7
  4935                           fsr1h	equ	0xFE2
  4936                           fsr1l	equ	0xFE1
  4937                           indf2	equ	0xFDF
  4938                           postinc2	equ	0xFDE
  4939                           postdec2	equ	0xFDD
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function ___awdiv *****************
  4945 ;; Defined at:
  4946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  dividend        2   41[COMRAM] int 
  4949 ;;  divisor         2   43[COMRAM] int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  quotient        2   47[COMRAM] int 
  4952 ;;  sign            1   46[COMRAM] unsigned char 
  4953 ;;  counter         1   45[COMRAM] unsigned char 
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  2   41[COMRAM] int 
  4956 ;; Registers used:
  4957 ;;		wreg, status,2, status,0
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4963 ;;      Params:         4       0       0       0
  4964 ;;      Locals:         4       0       0       0
  4965 ;;      Temps:          0       0       0       0
  4966 ;;      Totals:         8       0       0       0
  4967 ;;Total ram usage:        8 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    3
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_setMotorPWM
  4974 ;;		_ScanWithRange
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text17
  4979  001900                     __ptext17:
  4980                           	opt stack 0
  4981  001900                     ___awdiv:
  4982                           	opt stack 25
  4983                           
  4984                           ;incstack = 0
  4985  001900  0E00               	movlw	0
  4986  001902  6E2F               	movwf	___awdiv@sign,c
  4987  001904  AE2D               	btfss	___awdiv@divisor+1,7,c
  4988  001906  D006               	goto	l2971
  4989  001908  6C2C               	negf	___awdiv@divisor,c
  4990  00190A  1E2D               	comf	___awdiv@divisor+1,f,c
  4991  00190C  B0D8               	btfsc	status,0,c
  4992  00190E  2A2D               	incf	___awdiv@divisor+1,f,c
  4993  001910  0E01               	movlw	1
  4994  001912  6E2F               	movwf	___awdiv@sign,c
  4995  001914                     l2971:
  4996  001914  AE2B               	btfss	___awdiv@dividend+1,7,c
  4997  001916  D006               	goto	l2977
  4998  001918  6C2A               	negf	___awdiv@dividend,c
  4999  00191A  1E2B               	comf	___awdiv@dividend+1,f,c
  5000  00191C  B0D8               	btfsc	status,0,c
  5001  00191E  2A2B               	incf	___awdiv@dividend+1,f,c
  5002  001920  0E01               	movlw	1
  5003  001922  1A2F               	xorwf	___awdiv@sign,f,c
  5004  001924                     l2977:
  5005  001924  0E00               	movlw	0
  5006  001926  6E31               	movwf	___awdiv@quotient+1,c
  5007  001928  0E00               	movlw	0
  5008  00192A  6E30               	movwf	___awdiv@quotient,c
  5009  00192C  502C               	movf	___awdiv@divisor,w,c
  5010  00192E  102D               	iorwf	___awdiv@divisor+1,w,c
  5011  001930  B4D8               	btfsc	status,2,c
  5012  001932  D01C               	goto	l2999
  5013  001934  0E01               	movlw	1
  5014  001936  6E2E               	movwf	___awdiv@counter,c
  5015  001938  D004               	goto	l2985
  5016  00193A                     l2983:
  5017  00193A  90D8               	bcf	status,0,c
  5018  00193C  362C               	rlcf	___awdiv@divisor,f,c
  5019  00193E  362D               	rlcf	___awdiv@divisor+1,f,c
  5020  001940  2A2E               	incf	___awdiv@counter,f,c
  5021  001942                     l2985:
  5022  001942  AE2D               	btfss	___awdiv@divisor+1,7,c
  5023  001944  D7FA               	goto	l2983
  5024  001946                     l2987:
  5025  001946  90D8               	bcf	status,0,c
  5026  001948  3630               	rlcf	___awdiv@quotient,f,c
  5027  00194A  3631               	rlcf	___awdiv@quotient+1,f,c
  5028  00194C  502C               	movf	___awdiv@divisor,w,c
  5029  00194E  5C2A               	subwf	___awdiv@dividend,w,c
  5030  001950  502D               	movf	___awdiv@divisor+1,w,c
  5031  001952  582B               	subwfb	___awdiv@dividend+1,w,c
  5032  001954  A0D8               	btfss	status,0,c
  5033  001956  D005               	goto	l2995
  5034  001958  502C               	movf	___awdiv@divisor,w,c
  5035  00195A  5E2A               	subwf	___awdiv@dividend,f,c
  5036  00195C  502D               	movf	___awdiv@divisor+1,w,c
  5037  00195E  5A2B               	subwfb	___awdiv@dividend+1,f,c
  5038  001960  8030               	bsf	___awdiv@quotient,0,c
  5039  001962                     l2995:
  5040  001962  90D8               	bcf	status,0,c
  5041  001964  322D               	rrcf	___awdiv@divisor+1,f,c
  5042  001966  322C               	rrcf	___awdiv@divisor,f,c
  5043  001968  2E2E               	decfsz	___awdiv@counter,f,c
  5044  00196A  D7ED               	goto	l2987
  5045  00196C                     l2999:
  5046  00196C  502F               	movf	___awdiv@sign,w,c
  5047  00196E  B4D8               	btfsc	status,2,c
  5048  001970  D004               	goto	l3003
  5049  001972  6C30               	negf	___awdiv@quotient,c
  5050  001974  1E31               	comf	___awdiv@quotient+1,f,c
  5051  001976  B0D8               	btfsc	status,0,c
  5052  001978  2A31               	incf	___awdiv@quotient+1,f,c
  5053  00197A                     l3003:
  5054  00197A  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5055  00197E  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5056  001982  0012               	return	
  5057  001984                     __end_of___awdiv:
  5058                           	opt stack 0
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           prodh	equ	0xFF4
  5064                           prodl	equ	0xFF3
  5065                           intcon	equ	0xFF2
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           indf1	equ	0xFE7
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _sprintf *****************
  5079 ;; Defined at:
  5080 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5083 ;;		 -> ScanIR@buf(40), 
  5084 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5085 ;;		 -> STR_7(12), 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  tmpval          4    0        struct .
  5088 ;;  cp              3    0        PTR const unsigned char 
  5089 ;;  val             2    4[BANK0 ] unsigned int 
  5090 ;;  ap              2    0[BANK0 ] PTR void [1]
  5091 ;;		 -> ?_sprintf(2), 
  5092 ;;  len             2    0        unsigned int 
  5093 ;;  c               1    6[BANK0 ] char 
  5094 ;;  prec            1    3[BANK0 ] char 
  5095 ;;  flag            1    2[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  2   47[COMRAM] int 
  5098 ;; Registers used:
  5099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5105 ;;      Params:         8       0       0       0
  5106 ;;      Locals:         0       7       0       0
  5107 ;;      Temps:          1       0       0       0
  5108 ;;      Totals:         9       7       0       0
  5109 ;;Total ram usage:       16 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    4
  5112 ;; This function calls:
  5113 ;;		___lwdiv
  5114 ;;		___lwmod
  5115 ;; This function is called by:
  5116 ;;		_ScanIR
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text18
  5121  001302                     __ptext18:
  5122                           	opt stack 0
  5123  001302                     _sprintf:
  5124                           	opt stack 25
  5125                           
  5126                           ;doprnt.c: 494: va_list ap;
  5127                           ;doprnt.c: 499: signed char c;
  5128                           ;doprnt.c: 506: signed char prec;
  5129                           ;doprnt.c: 508: unsigned char flag;
  5130                           ;doprnt.c: 523: union {
  5131                           ;doprnt.c: 524: unsigned long vd;
  5132                           ;doprnt.c: 525: double integ;
  5133                           ;doprnt.c: 526: } tmpval;
  5134                           ;doprnt.c: 528: unsigned int val;
  5135                           ;doprnt.c: 529: unsigned len;
  5136                           ;doprnt.c: 530: const char * cp;
  5137                           ;doprnt.c: 533: *ap = __va_start();
  5138                           
  5139                           ;incstack = 0
  5140  001302  0E34               	movlw	low (?_sprintf+4)
  5141  001304  0100               	movlb	0	; () banked
  5142  001306  6F60               	movwf	sprintf@ap& (0+255),b
  5143  001308  0E00               	movlw	high (?_sprintf+4)
  5144  00130A  0100               	movlb	0	; () banked
  5145  00130C  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  5146                           
  5147                           ;doprnt.c: 536: while(c = *f++) {
  5148  00130E  D09D               	goto	l2303
  5149  001310                     l2251:
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;doprnt.c: 538: if(c != '%')
  5153  001310  0E25               	movlw	37
  5154  001312  0100               	movlb	0	; () banked
  5155  001314  1966               	xorwf	sprintf@c& (0+255),w,b
  5156  001316  B4D8               	btfsc	status,2,c
  5157  001318  D009               	goto	l2257
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;doprnt.c: 540: {
  5161                           ;doprnt.c: 541: ((*sp++ = (c)));
  5162  00131A  C030  FFD9         	movff	sprintf@sp,fsr2l
  5163  00131E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5164  001322  C066  FFDF         	movff	sprintf@c,indf2
  5165                           
  5166                           ; BSR set to: 0
  5167  001326  4A30               	infsnz	sprintf@sp,f,c
  5168  001328  2A31               	incf	sprintf@sp+1,f,c
  5169                           
  5170                           ;doprnt.c: 542: continue;
  5171  00132A  D08F               	goto	l2303
  5172  00132C                     l2257:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;doprnt.c: 543: }
  5176                           ;doprnt.c: 548: flag = 0;
  5177  00132C  0E00               	movlw	0
  5178  00132E  0100               	movlb	0	; () banked
  5179  001330  6F62               	movwf	sprintf@flag& (0+255),b
  5180                           
  5181                           ; BSR set to: 0
  5182                           
  5183                           ; BSR set to: 0
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;doprnt.c: 822: }
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;doprnt.c: 813: continue;
  5190                           
  5191                           ;doprnt.c: 802: default:
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;doprnt.c: 698: case 'i':
  5195                           ;doprnt.c: 699: break;
  5196                           
  5197                           ; BSR set to: 0
  5198                           
  5199                           ;doprnt.c: 697: case 'd':
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;doprnt.c: 638: goto alldone;
  5203                           
  5204                           ;doprnt.c: 637: case 0:
  5205                           
  5206                           ;doprnt.c: 635: switch(c = *f++) {
  5207  001332  C032  FFF6         	movff	sprintf@f,tblptrl
  5208  001336  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5209  00133A  4A32               	infsnz	sprintf@f,f,c
  5210  00133C  2A33               	incf	sprintf@f+1,f,c
  5211  00133E                     	if	0	;tblptru may be non-zero
  5212  00133E                     	endif
  5213  00133E                     	if	0	;tblptru may be non-zero
  5214  00133E                     	endif
  5215  00133E  0008               	tblrd		*
  5216  001340  CFF5 F066          	movff	tablat,sprintf@c
  5217  001344  0100               	movlb	0	; () banked
  5218  001346  5166               	movf	sprintf@c& (0+255),w,b
  5219                           
  5220                           ; Switch size 1, requested type "space"
  5221                           ; Number of cases is 3, Range of values is 0 to 105
  5222                           ; switch strategies available:
  5223                           ; Name         Instructions Cycles
  5224                           ; simple_byte           10     6 (average)
  5225                           ;	Chosen strategy is simple_byte
  5226  001348  0A00               	xorlw	0	; case 0
  5227  00134A  B4D8               	btfsc	status,2,c
  5228  00134C  D08B               	goto	l2305
  5229  00134E  0A64               	xorlw	100	; case 100
  5230  001350  B4D8               	btfsc	status,2,c
  5231  001352  D003               	goto	l2263
  5232  001354  0A0D               	xorlw	13	; case 105
  5233  001356  A4D8               	btfss	status,2,c
  5234  001358  D078               	goto	l2303
  5235  00135A                     l2263:
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;doprnt.c: 1253: {
  5239                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5240  00135A  C060  FFD9         	movff	sprintf@ap,fsr2l
  5241  00135E  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  5242  001362  CFDE F064          	movff	postinc2,sprintf@val
  5243  001366  CFDD F065          	movff	postdec2,sprintf@val+1
  5244                           
  5245                           ; BSR set to: 0
  5246  00136A  0E02               	movlw	2
  5247  00136C  0100               	movlb	0	; () banked
  5248  00136E  2760               	addwf	sprintf@ap& (0+255),f,b
  5249  001370  0E00               	movlw	0
  5250  001372  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;doprnt.c: 1261: if((int)val < 0) {
  5254  001374  0100               	movlb	0	; () banked
  5255  001376  AF65               	btfss	(sprintf@val+1)& (0+255),7,b
  5256  001378  D008               	goto	l2273
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;doprnt.c: 1262: flag |= 0x03;
  5260  00137A  0E03               	movlw	3
  5261  00137C  0100               	movlb	0	; () banked
  5262  00137E  1362               	iorwf	sprintf@flag& (0+255),f,b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 1263: val = -val;
  5266  001380  0100               	movlb	0	; () banked
  5267  001382  6D64               	negf	sprintf@val& (0+255),b
  5268  001384  1F65               	comf	(sprintf@val+1)& (0+255),f,b
  5269  001386  B0D8               	btfsc	status,0,c
  5270  001388  2B65               	incf	(sprintf@val+1)& (0+255),f,b
  5271  00138A                     l2273:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;doprnt.c: 1264: }
  5275                           ;doprnt.c: 1266: }
  5276                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5277  00138A  0E01               	movlw	1
  5278  00138C  0100               	movlb	0	; () banked
  5279  00138E  6F66               	movwf	sprintf@c& (0+255),b
  5280  001390                     l2275:
  5281                           
  5282                           ; BSR set to: 0
  5283  001390  0E05               	movlw	5
  5284  001392  0100               	movlb	0	; () banked
  5285  001394  1966               	xorwf	sprintf@c& (0+255),w,b
  5286  001396  B4D8               	btfsc	status,2,c
  5287  001398  D016               	goto	l2287
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 1306: if(val < dpowers[c])
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  00139A  0100               	movlb	0	; () banked
  5296  00139C  5166               	movf	sprintf@c& (0+255),w,b
  5297  00139E  0D02               	mullw	2
  5298  0013A0  0E01               	movlw	low _dpowers
  5299  0013A2  24F3               	addwf	prodl,w,c
  5300  0013A4  6EF6               	movwf	tblptrl,c
  5301  0013A6  0E03               	movlw	high _dpowers
  5302  0013A8  20F4               	addwfc	prodh,w,c
  5303  0013AA  6EF7               	movwf	tblptrh,c
  5304  0013AC                     	if	0	;There are less than 3 active tblptr bytes
  5305  0013AC                     	endif
  5306  0013AC  0009               	tblrd		*+
  5307  0013AE  50F5               	movf	tablat,w,c
  5308  0013B0  0100               	movlb	0	; () banked
  5309  0013B2  5D64               	subwf	sprintf@val& (0+255),w,b
  5310  0013B4  0009               	tblrd		*+
  5311  0013B6  50F5               	movf	tablat,w,c
  5312  0013B8  0100               	movlb	0	; () banked
  5313  0013BA  5965               	subwfb	(sprintf@val+1)& (0+255),w,b
  5314  0013BC  A0D8               	btfss	status,0,c
  5315  0013BE  D003               	goto	l2287
  5316                           
  5317                           ; BSR set to: 0
  5318                           
  5319                           ; BSR set to: 0
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;doprnt.c: 1307: break;
  5323  0013C0  0100               	movlb	0	; () banked
  5324  0013C2  2B66               	incf	sprintf@c& (0+255),f,b
  5325  0013C4  D7E5               	goto	l2275
  5326  0013C6                     l2287:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 1422: {
  5330                           ;doprnt.c: 1438: if(flag & 0x03)
  5331  0013C6  C062  F038         	movff	sprintf@flag,??_sprintf
  5332  0013CA  0E03               	movlw	3
  5333  0013CC  1638               	andwf	??_sprintf,f,c
  5334  0013CE  B4D8               	btfsc	status,2,c
  5335  0013D0  D008               	goto	l2293
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5339  0013D2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5340  0013D6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5341  0013DA  0E2D               	movlw	45
  5342  0013DC  6EDF               	movwf	indf2,c
  5343                           
  5344                           ; BSR set to: 0
  5345  0013DE  4A30               	infsnz	sprintf@sp,f,c
  5346  0013E0  2A31               	incf	sprintf@sp+1,f,c
  5347  0013E2                     l2293:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;doprnt.c: 1469: }
  5351                           ;doprnt.c: 1472: prec = c;
  5352  0013E2  C066  F063         	movff	sprintf@c,sprintf@prec
  5353                           
  5354                           ;doprnt.c: 1474: while(prec--) {
  5355  0013E6  D02B               	goto	l2301
  5356  0013E8                     l2295:
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;doprnt.c: 1478: {
  5360                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5361  0013E8  0100               	movlb	0	; () banked
  5362  0013EA  5163               	movf	sprintf@prec& (0+255),w,b
  5363  0013EC  0D02               	mullw	2
  5364  0013EE  0E01               	movlw	low _dpowers
  5365  0013F0  24F3               	addwf	prodl,w,c
  5366  0013F2  6EF6               	movwf	tblptrl,c
  5367  0013F4  0E03               	movlw	high _dpowers
  5368  0013F6  20F4               	addwfc	prodh,w,c
  5369  0013F8  6EF7               	movwf	tblptrh,c
  5370  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  5371  0013FA                     	endif
  5372  0013FA  0009               	tblrd		*+
  5373  0013FC  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5374  001400  000A               	tblrd		*-
  5375  001402  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5376  001406  C064  F024         	movff	sprintf@val,___lwdiv@dividend
  5377  00140A  C065  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5378  00140E  EC9B  F00D         	call	___lwdiv	;wreg free
  5379  001412  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5380  001416  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5381  00141A  0E00               	movlw	0
  5382  00141C  6E2E               	movwf	___lwmod@divisor+1,c
  5383  00141E  0E0A               	movlw	10
  5384  001420  6E2D               	movwf	___lwmod@divisor,c
  5385  001422  EC12  F00E         	call	___lwmod	;wreg free
  5386  001426  502B               	movf	?___lwmod,w,c
  5387  001428  0F30               	addlw	48
  5388  00142A  0100               	movlb	0	; () banked
  5389  00142C  6F66               	movwf	sprintf@c& (0+255),b
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;doprnt.c: 1523: }
  5393                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5394  00142E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5395  001432  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5396  001436  C066  FFDF         	movff	sprintf@c,indf2
  5397                           
  5398                           ; BSR set to: 0
  5399  00143A  4A30               	infsnz	sprintf@sp,f,c
  5400  00143C  2A31               	incf	sprintf@sp+1,f,c
  5401  00143E                     l2301:
  5402                           
  5403                           ; BSR set to: 0
  5404  00143E  0100               	movlb	0	; () banked
  5405  001440  0763               	decf	sprintf@prec& (0+255),f,b
  5406  001442  0100               	movlb	0	; () banked
  5407  001444  2963               	incf	sprintf@prec& (0+255),w,b
  5408  001446  A4D8               	btfss	status,2,c
  5409  001448  D7CF               	goto	l2295
  5410  00144A                     l2303:
  5411                           
  5412                           ; BSR set to: 0
  5413  00144A  C032  FFF6         	movff	sprintf@f,tblptrl
  5414  00144E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5415  001452  4A32               	infsnz	sprintf@f,f,c
  5416  001454  2A33               	incf	sprintf@f+1,f,c
  5417  001456                     	if	0	;tblptru may be non-zero
  5418  001456                     	endif
  5419  001456                     	if	0	;tblptru may be non-zero
  5420  001456                     	endif
  5421  001456  0008               	tblrd		*
  5422  001458  CFF5 F066          	movff	tablat,sprintf@c
  5423  00145C  0100               	movlb	0	; () banked
  5424  00145E  5166               	movf	sprintf@c& (0+255),w,b
  5425  001460  A4D8               	btfss	status,2,c
  5426  001462  D756               	goto	l2251
  5427  001464                     l2305:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;doprnt.c: 1538: *sp = 0;
  5431  001464  C030  FFD9         	movff	sprintf@sp,fsr2l
  5432  001468  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5433  00146C  0E00               	movlw	0
  5434  00146E  6EDF               	movwf	indf2,c
  5435  001470  0012               	return	
  5436  001472                     __end_of_sprintf:
  5437                           	opt stack 0
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           prodh	equ	0xFF4
  5443                           prodl	equ	0xFF3
  5444                           intcon	equ	0xFF2
  5445                           postinc0	equ	0xFEE
  5446                           wreg	equ	0xFE8
  5447                           indf1	equ	0xFE7
  5448                           fsr1h	equ	0xFE2
  5449                           fsr1l	equ	0xFE1
  5450                           indf2	equ	0xFDF
  5451                           postinc2	equ	0xFDE
  5452                           postdec2	equ	0xFDD
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function ___lwmod *****************
  5458 ;; Defined at:
  5459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  dividend        2   42[COMRAM] unsigned int 
  5462 ;;  divisor         2   44[COMRAM] unsigned int 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  counter         1   46[COMRAM] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  2   42[COMRAM] unsigned int 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5474 ;;      Params:         4       0       0       0
  5475 ;;      Locals:         1       0       0       0
  5476 ;;      Temps:          0       0       0       0
  5477 ;;      Totals:         5       0       0       0
  5478 ;;Total ram usage:        5 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    3
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_sprintf
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text19
  5489  001C24                     __ptext19:
  5490                           	opt stack 0
  5491  001C24                     ___lwmod:
  5492                           	opt stack 25
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;incstack = 0
  5496  001C24  502D               	movf	___lwmod@divisor,w,c
  5497  001C26  102E               	iorwf	___lwmod@divisor+1,w,c
  5498  001C28  B4D8               	btfsc	status,2,c
  5499  001C2A  D018               	goto	l856
  5500  001C2C  0E01               	movlw	1
  5501  001C2E  6E2F               	movwf	___lwmod@counter,c
  5502  001C30  D004               	goto	l2167
  5503  001C32                     l2165:
  5504  001C32  90D8               	bcf	status,0,c
  5505  001C34  362D               	rlcf	___lwmod@divisor,f,c
  5506  001C36  362E               	rlcf	___lwmod@divisor+1,f,c
  5507  001C38  2A2F               	incf	___lwmod@counter,f,c
  5508  001C3A                     l2167:
  5509  001C3A  AE2E               	btfss	___lwmod@divisor+1,7,c
  5510  001C3C  D7FA               	goto	l2165
  5511  001C3E                     l2169:
  5512  001C3E  502D               	movf	___lwmod@divisor,w,c
  5513  001C40  5C2B               	subwf	___lwmod@dividend,w,c
  5514  001C42  502E               	movf	___lwmod@divisor+1,w,c
  5515  001C44  582C               	subwfb	___lwmod@dividend+1,w,c
  5516  001C46  A0D8               	btfss	status,0,c
  5517  001C48  D004               	goto	l2173
  5518  001C4A  502D               	movf	___lwmod@divisor,w,c
  5519  001C4C  5E2B               	subwf	___lwmod@dividend,f,c
  5520  001C4E  502E               	movf	___lwmod@divisor+1,w,c
  5521  001C50  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5522  001C52                     l2173:
  5523  001C52  90D8               	bcf	status,0,c
  5524  001C54  322E               	rrcf	___lwmod@divisor+1,f,c
  5525  001C56  322D               	rrcf	___lwmod@divisor,f,c
  5526  001C58  2E2F               	decfsz	___lwmod@counter,f,c
  5527  001C5A  D7F1               	goto	l2169
  5528  001C5C                     l856:
  5529  001C5C  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5530  001C60  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5531  001C64  0012               	return		;funcret
  5532  001C66                     __end_of___lwmod:
  5533                           	opt stack 0
  5534                           tblptru	equ	0xFF8
  5535                           tblptrh	equ	0xFF7
  5536                           tblptrl	equ	0xFF6
  5537                           tablat	equ	0xFF5
  5538                           prodh	equ	0xFF4
  5539                           prodl	equ	0xFF3
  5540                           intcon	equ	0xFF2
  5541                           postinc0	equ	0xFEE
  5542                           wreg	equ	0xFE8
  5543                           indf1	equ	0xFE7
  5544                           fsr1h	equ	0xFE2
  5545                           fsr1l	equ	0xFE1
  5546                           indf2	equ	0xFDF
  5547                           postinc2	equ	0xFDE
  5548                           postdec2	equ	0xFDD
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function ___lwdiv *****************
  5554 ;; Defined at:
  5555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  dividend        2   35[COMRAM] unsigned int 
  5558 ;;  divisor         2   37[COMRAM] unsigned int 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  quotient        2   39[COMRAM] unsigned int 
  5561 ;;  counter         1   41[COMRAM] unsigned char 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  2   35[COMRAM] unsigned int 
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5571 ;;      Params:         4       0       0       0
  5572 ;;      Locals:         3       0       0       0
  5573 ;;      Temps:          0       0       0       0
  5574 ;;      Totals:         7       0       0       0
  5575 ;;Total ram usage:        7 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    3
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_sprintf
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text20
  5586  001B36                     __ptext20:
  5587                           	opt stack 0
  5588  001B36                     ___lwdiv:
  5589                           	opt stack 25
  5590                           
  5591                           ;incstack = 0
  5592  001B36  0E00               	movlw	0
  5593  001B38  6E29               	movwf	___lwdiv@quotient+1,c
  5594  001B3A  0E00               	movlw	0
  5595  001B3C  6E28               	movwf	___lwdiv@quotient,c
  5596  001B3E  5026               	movf	___lwdiv@divisor,w,c
  5597  001B40  1027               	iorwf	___lwdiv@divisor+1,w,c
  5598  001B42  B4D8               	btfsc	status,2,c
  5599  001B44  D01C               	goto	l846
  5600  001B46  0E01               	movlw	1
  5601  001B48  6E2A               	movwf	___lwdiv@counter,c
  5602  001B4A  D004               	goto	l2147
  5603  001B4C                     l2145:
  5604  001B4C  90D8               	bcf	status,0,c
  5605  001B4E  3626               	rlcf	___lwdiv@divisor,f,c
  5606  001B50  3627               	rlcf	___lwdiv@divisor+1,f,c
  5607  001B52  2A2A               	incf	___lwdiv@counter,f,c
  5608  001B54                     l2147:
  5609  001B54  AE27               	btfss	___lwdiv@divisor+1,7,c
  5610  001B56  D7FA               	goto	l2145
  5611  001B58                     l2149:
  5612  001B58  90D8               	bcf	status,0,c
  5613  001B5A  3628               	rlcf	___lwdiv@quotient,f,c
  5614  001B5C  3629               	rlcf	___lwdiv@quotient+1,f,c
  5615  001B5E  5026               	movf	___lwdiv@divisor,w,c
  5616  001B60  5C24               	subwf	___lwdiv@dividend,w,c
  5617  001B62  5027               	movf	___lwdiv@divisor+1,w,c
  5618  001B64  5825               	subwfb	___lwdiv@dividend+1,w,c
  5619  001B66  A0D8               	btfss	status,0,c
  5620  001B68  D005               	goto	l2157
  5621  001B6A  5026               	movf	___lwdiv@divisor,w,c
  5622  001B6C  5E24               	subwf	___lwdiv@dividend,f,c
  5623  001B6E  5027               	movf	___lwdiv@divisor+1,w,c
  5624  001B70  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5625  001B72  8028               	bsf	___lwdiv@quotient,0,c
  5626  001B74                     l2157:
  5627  001B74  90D8               	bcf	status,0,c
  5628  001B76  3227               	rrcf	___lwdiv@divisor+1,f,c
  5629  001B78  3226               	rrcf	___lwdiv@divisor,f,c
  5630  001B7A  2E2A               	decfsz	___lwdiv@counter,f,c
  5631  001B7C  D7ED               	goto	l2149
  5632  001B7E                     l846:
  5633  001B7E  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5634  001B82  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5635  001B86  0012               	return		;funcret
  5636  001B88                     __end_of___lwdiv:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           prodh	equ	0xFF4
  5643                           prodl	equ	0xFF3
  5644                           intcon	equ	0xFF2
  5645                           postinc0	equ	0xFEE
  5646                           wreg	equ	0xFE8
  5647                           indf1	equ	0xFE7
  5648                           fsr1h	equ	0xFE2
  5649                           fsr1l	equ	0xFE1
  5650                           indf2	equ	0xFDF
  5651                           postinc2	equ	0xFDE
  5652                           postdec2	equ	0xFDD
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657 ;; *************** function _grabRightIR *****************
  5658 ;; Defined at:
  5659 ;;		line 74 in file "IR_Reading.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;		None
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5664 ;;  i               1   42[COMRAM] unsigned char 
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  2   35[COMRAM] unsigned int 
  5667 ;; Registers used:
  5668 ;;		wreg, status,2, status,0
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5674 ;;      Params:         2       0       0       0
  5675 ;;      Locals:         3       0       0       0
  5676 ;;      Temps:          3       0       0       0
  5677 ;;      Totals:         8       0       0       0
  5678 ;;Total ram usage:        8 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    3
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_ScanIR
  5685 ;;		_ScanWithRange
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text21
  5690  001984                     __ptext21:
  5691                           	opt stack 0
  5692  001984                     _grabRightIR:
  5693                           	opt stack 26
  5694                           
  5695                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5696                           
  5697                           ;incstack = 0
  5698  001984  0E00               	movlw	0
  5699  001986  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5700  001988  0E00               	movlw	0
  5701  00198A  6E29               	movwf	grabRightIR@IR_signal,c
  5702                           
  5703                           ;IR_Reading.c: 77: unsigned char i=0;
  5704  00198C  0E00               	movlw	0
  5705  00198E  6E2B               	movwf	grabRightIR@i,c
  5706                           
  5707                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5708  001990  0E00               	movlw	0
  5709  001992  6E2B               	movwf	grabRightIR@i,c
  5710  001994                     l2235:
  5711  001994  0E03               	movlw	3
  5712  001996  642B               	cpfsgt	grabRightIR@i,c
  5713  001998  D001               	goto	l2239
  5714  00199A  D01E               	goto	l2245
  5715  00199C                     l2239:
  5716                           
  5717                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5718  00199C  5069               	movf	3945,w,c	;volatile
  5719  00199E  6E26               	movwf	??_grabRightIR& (0+255),c
  5720  0019A0  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5721  0019A2  0E07               	movlw	7
  5722  0019A4                     u1585:
  5723  0019A4  90D8               	bcf	status,0,c
  5724  0019A6  3626               	rlcf	??_grabRightIR,f,c
  5725  0019A8  3627               	rlcf	??_grabRightIR+1,f,c
  5726  0019AA  2EE8               	decfsz	wreg,f,c
  5727  0019AC  D7FB               	goto	u1585
  5728  0019AE  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5729  0019B2  90D8               	bcf	status,0,c
  5730  0019B4  3228               	rrcf	??_grabRightIR+2,f,c
  5731  0019B6  5028               	movf	??_grabRightIR+2,w,c
  5732  0019B8  1226               	iorwf	??_grabRightIR,f,c
  5733  0019BA  0E00               	movlw	0
  5734  0019BC  1227               	iorwf	??_grabRightIR+1,f,c
  5735  0019BE  5026               	movf	??_grabRightIR,w,c
  5736  0019C0  2629               	addwf	grabRightIR@IR_signal,f,c
  5737  0019C2  5027               	movf	??_grabRightIR+1,w,c
  5738  0019C4  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5739                           
  5740                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5741  0019C6  0E82               	movlw	130
  5742  0019C8  6E26               	movwf	??_grabRightIR& (0+255),c
  5743  0019CA  0EDE               	movlw	222
  5744  0019CC                     u3067:
  5745  0019CC  2EE8               	decfsz	wreg,f,c
  5746  0019CE  D7FE               	goto	u3067
  5747  0019D0  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5748  0019D2  D7FC               	goto	u3067
  5749  0019D4  2A2B               	incf	grabRightIR@i,f,c
  5750  0019D6  D7DE               	goto	l2235
  5751  0019D8                     l2245:
  5752                           
  5753                           ;IR_Reading.c: 83: }
  5754                           ;IR_Reading.c: 85: return IR_signal>>2;
  5755  0019D8  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5756  0019DC  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5757  0019E0  90D8               	bcf	status,0,c
  5758  0019E2  3227               	rrcf	??_grabRightIR+1,f,c
  5759  0019E4  3226               	rrcf	??_grabRightIR,f,c
  5760  0019E6  90D8               	bcf	status,0,c
  5761  0019E8  3227               	rrcf	??_grabRightIR+1,f,c
  5762  0019EA  3226               	rrcf	??_grabRightIR,f,c
  5763  0019EC  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5764  0019F0  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5765  0019F4  0012               	return	
  5766  0019F6                     __end_of_grabRightIR:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon	equ	0xFF2
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           fsr1h	equ	0xFE2
  5779                           fsr1l	equ	0xFE1
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function _grabLeftIR *****************
  5788 ;; Defined at:
  5789 ;;		line 90 in file "IR_Reading.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5794 ;;  i               1   42[COMRAM] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  2   35[COMRAM] unsigned int 
  5797 ;; Registers used:
  5798 ;;		wreg, status,2, status,0
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5804 ;;      Params:         2       0       0       0
  5805 ;;      Locals:         3       0       0       0
  5806 ;;      Temps:          3       0       0       0
  5807 ;;      Totals:         8       0       0       0
  5808 ;;Total ram usage:        8 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    3
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_ScanIR
  5815 ;;		_ScanWithRange
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text22
  5820  0019F6                     __ptext22:
  5821                           	opt stack 0
  5822  0019F6                     _grabLeftIR:
  5823                           	opt stack 26
  5824                           
  5825                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5826                           
  5827                           ;incstack = 0
  5828  0019F6  0E00               	movlw	0
  5829  0019F8  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5830  0019FA  0E00               	movlw	0
  5831  0019FC  6E29               	movwf	grabLeftIR@IR_signal,c
  5832                           
  5833                           ;IR_Reading.c: 93: unsigned char i=0;
  5834  0019FE  0E00               	movlw	0
  5835  001A00  6E2B               	movwf	grabLeftIR@i,c
  5836                           
  5837                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5838  001A02  0E00               	movlw	0
  5839  001A04  6E2B               	movwf	grabLeftIR@i,c
  5840  001A06                     l2219:
  5841  001A06  0E03               	movlw	3
  5842  001A08  642B               	cpfsgt	grabLeftIR@i,c
  5843  001A0A  D001               	goto	l2223
  5844  001A0C  D01E               	goto	l2229
  5845  001A0E                     l2223:
  5846                           
  5847                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5848  001A0E  5067               	movf	3943,w,c	;volatile
  5849  001A10  6E26               	movwf	??_grabLeftIR& (0+255),c
  5850  001A12  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5851  001A14  0E07               	movlw	7
  5852  001A16                     u1555:
  5853  001A16  90D8               	bcf	status,0,c
  5854  001A18  3626               	rlcf	??_grabLeftIR,f,c
  5855  001A1A  3627               	rlcf	??_grabLeftIR+1,f,c
  5856  001A1C  2EE8               	decfsz	wreg,f,c
  5857  001A1E  D7FB               	goto	u1555
  5858  001A20  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5859  001A24  90D8               	bcf	status,0,c
  5860  001A26  3228               	rrcf	??_grabLeftIR+2,f,c
  5861  001A28  5028               	movf	??_grabLeftIR+2,w,c
  5862  001A2A  1226               	iorwf	??_grabLeftIR,f,c
  5863  001A2C  0E00               	movlw	0
  5864  001A2E  1227               	iorwf	??_grabLeftIR+1,f,c
  5865  001A30  5026               	movf	??_grabLeftIR,w,c
  5866  001A32  2629               	addwf	grabLeftIR@IR_signal,f,c
  5867  001A34  5027               	movf	??_grabLeftIR+1,w,c
  5868  001A36  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5869                           
  5870                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5871  001A38  0E82               	movlw	130
  5872  001A3A  6E26               	movwf	??_grabLeftIR& (0+255),c
  5873  001A3C  0EDE               	movlw	222
  5874  001A3E                     u3077:
  5875  001A3E  2EE8               	decfsz	wreg,f,c
  5876  001A40  D7FE               	goto	u3077
  5877  001A42  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5878  001A44  D7FC               	goto	u3077
  5879  001A46  2A2B               	incf	grabLeftIR@i,f,c
  5880  001A48  D7DE               	goto	l2219
  5881  001A4A                     l2229:
  5882                           
  5883                           ;IR_Reading.c: 99: }
  5884                           ;IR_Reading.c: 101: return IR_signal>>2;
  5885  001A4A  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5886  001A4E  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5887  001A52  90D8               	bcf	status,0,c
  5888  001A54  3227               	rrcf	??_grabLeftIR+1,f,c
  5889  001A56  3226               	rrcf	??_grabLeftIR,f,c
  5890  001A58  90D8               	bcf	status,0,c
  5891  001A5A  3227               	rrcf	??_grabLeftIR+1,f,c
  5892  001A5C  3226               	rrcf	??_grabLeftIR,f,c
  5893  001A5E  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5894  001A62  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5895  001A66  0012               	return	
  5896  001A68                     __end_of_grabLeftIR:
  5897                           	opt stack 0
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodh	equ	0xFF4
  5903                           prodl	equ	0xFF3
  5904                           intcon	equ	0xFF2
  5905                           postinc0	equ	0xFEE
  5906                           wreg	equ	0xFE8
  5907                           indf1	equ	0xFE7
  5908                           fsr1h	equ	0xFE2
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _delay_tenth_s *****************
  5918 ;; Defined at:
  5919 ;;		line 29 in file "Movement.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  tenth_second    1    wreg     unsigned char 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  tenth_second    1   36[COMRAM] unsigned char 
  5924 ;;  i               2   37[COMRAM] unsigned int 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;		None               void
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5934 ;;      Params:         0       0       0       0
  5935 ;;      Locals:         3       0       0       0
  5936 ;;      Temps:          1       0       0       0
  5937 ;;      Totals:         4       0       0       0
  5938 ;;Total ram usage:        4 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    3
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_main
  5945 ;;		_ScanIR
  5946 ;;		_ScanWithRange
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text23
  5951  001CA0                     __ptext23:
  5952                           	opt stack 0
  5953  001CA0                     _delay_tenth_s:
  5954                           	opt stack 27
  5955                           
  5956                           ;incstack = 0
  5957                           ;delay_tenth_s@tenth_seconds stored from wreg
  5958  001CA0  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  5959                           
  5960                           ;Movement.c: 30: unsigned int i=0;
  5961  001CA2  0E00               	movlw	0
  5962  001CA4  6E27               	movwf	delay_tenth_s@i+1,c
  5963  001CA6  0E00               	movlw	0
  5964  001CA8  6E26               	movwf	delay_tenth_s@i,c
  5965                           
  5966                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  5967  001CAA  0E00               	movlw	0
  5968  001CAC  6E27               	movwf	delay_tenth_s@i+1,c
  5969  001CAE  0E01               	movlw	1
  5970  001CB0  6E26               	movwf	delay_tenth_s@i,c
  5971  001CB2  D009               	goto	l2183
  5972  001CB4                     l2179:
  5973                           
  5974                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  5975  001CB4  0E82               	movlw	130
  5976  001CB6  6E24               	movwf	??_delay_tenth_s& (0+255),c
  5977  001CB8  0EDE               	movlw	222
  5978  001CBA                     u3087:
  5979  001CBA  2EE8               	decfsz	wreg,f,c
  5980  001CBC  D7FE               	goto	u3087
  5981  001CBE  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  5982  001CC0  D7FC               	goto	u3087
  5983  001CC2  4A26               	infsnz	delay_tenth_s@i,f,c
  5984  001CC4  2A27               	incf	delay_tenth_s@i+1,f,c
  5985  001CC6                     l2183:
  5986  001CC6  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  5987  001CC8  0D02               	mullw	2
  5988  001CCA  5026               	movf	delay_tenth_s@i,w,c
  5989  001CCC  5CF3               	subwf	prodl,w,c
  5990  001CCE  5027               	movf	delay_tenth_s@i+1,w,c
  5991  001CD0  58F4               	subwfb	prodh,w,c
  5992  001CD2  A0D8               	btfss	status,0,c
  5993  001CD4  0012               	return	
  5994  001CD6  D7EE               	goto	l2179
  5995  001CD8                     __end_of_delay_tenth_s:
  5996                           	opt stack 0
  5997                           tblptru	equ	0xFF8
  5998                           tblptrh	equ	0xFF7
  5999                           tblptrl	equ	0xFF6
  6000                           tablat	equ	0xFF5
  6001                           prodh	equ	0xFF4
  6002                           prodl	equ	0xFF3
  6003                           intcon	equ	0xFF2
  6004                           postinc0	equ	0xFEE
  6005                           wreg	equ	0xFE8
  6006                           indf1	equ	0xFE7
  6007                           fsr1h	equ	0xFE2
  6008                           fsr1l	equ	0xFE1
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _SetLine *****************
  6017 ;; Defined at:
  6018 ;;		line 74 in file "LCD.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  line            1    wreg     unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  line            1   41[COMRAM] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;		None               void
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6032 ;;      Params:         0       0       0       0
  6033 ;;      Locals:         1       0       0       0
  6034 ;;      Temps:          0       0       0       0
  6035 ;;      Totals:         1       0       0       0
  6036 ;;Total ram usage:        1 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    6
  6039 ;; This function calls:
  6040 ;;		_SendLCD
  6041 ;; This function is called by:
  6042 ;;		_main
  6043 ;;		_ScanIR
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text24
  6048  001D42                     __ptext24:
  6049                           	opt stack 0
  6050  001D42                     _SetLine:
  6051                           	opt stack 24
  6052                           
  6053                           ;incstack = 0
  6054                           ;SetLine@line stored from wreg
  6055  001D42  6E2A               	movwf	SetLine@line,c
  6056                           
  6057                           ;LCD.c: 75: if (line==1) {
  6058  001D44  042A               	decf	SetLine@line,w,c
  6059  001D46  A4D8               	btfss	status,2,c
  6060  001D48  D006               	goto	l2189
  6061                           
  6062                           ;LCD.c: 76: SendLCD(0x80,0);
  6063  001D4A  0E00               	movlw	0
  6064  001D4C  6E28               	movwf	SendLCD@type,c
  6065  001D4E  0E80               	movlw	128
  6066  001D50  ECB9  F00E         	call	_SendLCD
  6067                           
  6068                           ;LCD.c: 77: } else if (line==2) {
  6069  001D54  D009               	goto	l2193
  6070  001D56                     l2189:
  6071  001D56  0E02               	movlw	2
  6072  001D58  182A               	xorwf	SetLine@line,w,c
  6073  001D5A  A4D8               	btfss	status,2,c
  6074  001D5C  D005               	goto	l2193
  6075                           
  6076                           ;LCD.c: 78: SendLCD(0xC0,0);
  6077  001D5E  0E00               	movlw	0
  6078  001D60  6E28               	movwf	SendLCD@type,c
  6079  001D62  0EC0               	movlw	192
  6080  001D64  ECB9  F00E         	call	_SendLCD
  6081  001D68                     l2193:
  6082                           
  6083                           ;LCD.c: 79: }
  6084                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6085  001D68  0E21               	movlw	33
  6086  001D6A                     u3097:
  6087  001D6A  2EE8               	decfsz	wreg,f,c
  6088  001D6C  D7FE               	goto	u3097
  6089  001D6E  F000               	nop	
  6090  001D70  0012               	return		;funcret
  6091  001D72                     __end_of_SetLine:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           postinc0	equ	0xFEE
  6101                           wreg	equ	0xFE8
  6102                           indf1	equ	0xFE7
  6103                           fsr1h	equ	0xFE2
  6104                           fsr1l	equ	0xFE1
  6105                           indf2	equ	0xFDF
  6106                           postinc2	equ	0xFDE
  6107                           postdec2	equ	0xFDD
  6108                           fsr2h	equ	0xFDA
  6109                           fsr2l	equ	0xFD9
  6110                           status	equ	0xFD8
  6111                           
  6112 ;; *************** function _LCD_String *****************
  6113 ;; Defined at:
  6114 ;;		line 83 in file "LCD.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;  string          2   41[COMRAM] PTR unsigned char 
  6117 ;;		 -> ScanIR@buf(40), STR_6(17), STR_5(17), STR_4(18), 
  6118 ;;		 -> STR_3(17), STR_2(15), STR_1(14), 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6130 ;;      Params:         2       0       0       0
  6131 ;;      Locals:         0       0       0       0
  6132 ;;      Temps:          0       0       0       0
  6133 ;;      Totals:         2       0       0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    6
  6137 ;; This function calls:
  6138 ;;		_SendLCD
  6139 ;; This function is called by:
  6140 ;;		_main
  6141 ;;		_ScanIR
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text25
  6146  001AD8                     __ptext25:
  6147                           	opt stack 0
  6148  001AD8                     _LCD_String:
  6149                           	opt stack 23
  6150                           
  6151                           ;LCD.c: 85: while(*string != 0){
  6152                           
  6153                           ;incstack = 0
  6154  001AD8  D01A               	goto	l2203
  6155  001ADA                     l2197:
  6156                           
  6157                           ;LCD.c: 88: SendLCD(*string++,1);
  6158  001ADA  0E01               	movlw	1
  6159  001ADC  6E28               	movwf	SendLCD@type,c
  6160  001ADE  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6161  001AE2  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6162  001AE6  6AF8               	clrf	tblptru,c
  6163  001AE8  0E02               	movlw	(high __ramtop+-1)
  6164  001AEA  64F7               	cpfsgt	tblptrh,c
  6165  001AEC  D003               	bra	u1517
  6166  001AEE  0008               	tblrd		*
  6167  001AF0  50F5               	movf	tablat,w,c
  6168  001AF2  D005               	bra	u1510
  6169  001AF4                     u1517:
  6170  001AF4  CFF6 FFE1          	movff	tblptrl,fsr1l
  6171  001AF8  CFF7 FFE2          	movff	tblptrh,fsr1h
  6172  001AFC  50E7               	movf	indf1,w,c
  6173  001AFE                     u1510:
  6174  001AFE  ECB9  F00E         	call	_SendLCD
  6175  001B02  4A2A               	infsnz	LCD_String@string,f,c
  6176  001B04  2A2B               	incf	LCD_String@string+1,f,c
  6177                           
  6178                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6179  001B06  0E21               	movlw	33
  6180  001B08                     u3107:
  6181  001B08  2EE8               	decfsz	wreg,f,c
  6182  001B0A  D7FE               	goto	u3107
  6183  001B0C  F000               	nop	
  6184  001B0E                     l2203:
  6185  001B0E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6186  001B12  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6187  001B16  6AF8               	clrf	tblptru,c
  6188  001B18  0E02               	movlw	(high __ramtop+-1)
  6189  001B1A  64F7               	cpfsgt	tblptrh,c
  6190  001B1C  D003               	bra	u1527
  6191  001B1E  0008               	tblrd		*
  6192  001B20  50F5               	movf	tablat,w,c
  6193  001B22  D005               	bra	u1520
  6194  001B24                     u1527:
  6195  001B24  CFF6 FFE1          	movff	tblptrl,fsr1l
  6196  001B28  CFF7 FFE2          	movff	tblptrh,fsr1h
  6197  001B2C  50E7               	movf	indf1,w,c
  6198  001B2E                     u1520:
  6199  001B2E  0900               	iorlw	0
  6200  001B30  B4D8               	btfsc	status,2,c
  6201  001B32  0012               	return	
  6202  001B34  D7D2               	goto	l2197
  6203  001B36                     __end_of_LCD_String:
  6204                           	opt stack 0
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           intcon	equ	0xFF2
  6212                           postinc0	equ	0xFEE
  6213                           wreg	equ	0xFE8
  6214                           indf1	equ	0xFE7
  6215                           fsr1h	equ	0xFE2
  6216                           fsr1l	equ	0xFE1
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _SendLCD *****************
  6225 ;; Defined at:
  6226 ;;		line 27 in file "LCD.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;  Byte            1    wreg     unsigned char 
  6229 ;;  type            1   39[COMRAM] unsigned char 
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  Byte            1   40[COMRAM] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;		None               void
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6241 ;;      Params:         1       0       0       0
  6242 ;;      Locals:         1       0       0       0
  6243 ;;      Temps:          0       0       0       0
  6244 ;;      Totals:         2       0       0       0
  6245 ;;Total ram usage:        2 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    5
  6248 ;; This function calls:
  6249 ;;		_LCDout
  6250 ;; This function is called by:
  6251 ;;		_initLCD
  6252 ;;		_SetLine
  6253 ;;		_LCD_String
  6254 ;;		_ScanIR
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text26
  6259  001D72                     __ptext26:
  6260                           	opt stack 0
  6261  001D72                     _SendLCD:
  6262                           	opt stack 24
  6263                           
  6264                           ;incstack = 0
  6265                           ;SendLCD@Byte stored from wreg
  6266  001D72  6E29               	movwf	SendLCD@Byte,c
  6267                           
  6268                           ;LCD.c: 30: LATAbits.LATA6=type;
  6269  001D74  B028               	btfsc	SendLCD@type,0,c
  6270  001D76  D002               	bra	u1415
  6271  001D78  9C89               	bcf	3977,6,c	;volatile
  6272  001D7A  D001               	bra	u1416
  6273  001D7C                     u1415:
  6274  001D7C  8C89               	bsf	3977,6,c	;volatile
  6275  001D7E                     u1416:
  6276                           
  6277                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6278  001D7E  3829               	swapf	SendLCD@Byte,w,c
  6279  001D80  0B0F               	andlw	15
  6280  001D82  0B0F               	andlw	15
  6281  001D84  ECD6  F00A         	call	_LCDout
  6282                           
  6283                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6284  001D88  0E06               	movlw	6
  6285  001D8A                     u3117:
  6286  001D8A  2EE8               	decfsz	wreg,f,c
  6287  001D8C  D7FE               	goto	u3117
  6288  001D8E  D000               	nop2		;nop
  6289                           
  6290                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6291  001D90  5029               	movf	SendLCD@Byte,w,c
  6292  001D92  0B0F               	andlw	15
  6293  001D94  ECD6  F00A         	call	_LCDout
  6294                           
  6295                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6296  001D98  0E21               	movlw	33
  6297  001D9A                     u3127:
  6298  001D9A  2EE8               	decfsz	wreg,f,c
  6299  001D9C  D7FE               	goto	u3127
  6300  001D9E  F000               	nop	
  6301  001DA0  0012               	return		;funcret
  6302  001DA2                     __end_of_SendLCD:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           indf1	equ	0xFE7
  6314                           fsr1h	equ	0xFE2
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function _LCDout *****************
  6324 ;; Defined at:
  6325 ;;		line 14 in file "LCD.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  number          1    wreg     unsigned char 
  6328 ;; Auto vars:     Size  Location     Type
  6329 ;;  number          1   38[COMRAM] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6339 ;;      Params:         0       0       0       0
  6340 ;;      Locals:         1       0       0       0
  6341 ;;      Temps:          3       0       0       0
  6342 ;;      Totals:         4       0       0       0
  6343 ;;Total ram usage:        4 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    4
  6346 ;; This function calls:
  6347 ;;		_E_TOG
  6348 ;; This function is called by:
  6349 ;;		_SendLCD
  6350 ;;		_initLCD
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text27
  6355  0015AC                     __ptext27:
  6356                           	opt stack 0
  6357  0015AC                     _LCDout:
  6358                           	opt stack 24
  6359                           
  6360                           ;incstack = 0
  6361                           ;LCDout@number stored from wreg
  6362  0015AC  6E27               	movwf	LCDout@number,c
  6363                           
  6364                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6365  0015AE  5027               	movf	LCDout@number,w,c
  6366  0015B0  6E24               	movwf	??_LCDout& (0+255),c
  6367  0015B2  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6368  0015B4  0E07               	movlw	7
  6369  0015B6                     u1265:
  6370  0015B6  90D8               	bcf	status,0,c
  6371  0015B8  3624               	rlcf	??_LCDout,f,c
  6372  0015BA  3625               	rlcf	??_LCDout+1,f,c
  6373  0015BC  2EE8               	decfsz	wreg,f,c
  6374  0015BE  D7FB               	goto	u1265
  6375  0015C0  0E07               	movlw	7
  6376  0015C2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6377  0015C4                     u1275:
  6378  0015C4  3425               	rlcf	??_LCDout+1,w,c
  6379  0015C6  3225               	rrcf	??_LCDout+1,f,c
  6380  0015C8  3224               	rrcf	??_LCDout,f,c
  6381  0015CA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6382  0015CC  D7FB               	goto	u1275
  6383  0015CE  4624               	rlncf	??_LCDout,f,c
  6384  0015D0  508B               	movf	3979,w,c	;volatile
  6385  0015D2  1824               	xorwf	??_LCDout,w,c
  6386  0015D4  0BFD               	andlw	-3
  6387  0015D6  1824               	xorwf	??_LCDout,w,c
  6388  0015D8  6E8B               	movwf	3979,c	;volatile
  6389                           
  6390                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6391  0015DA  5027               	movf	LCDout@number,w,c
  6392  0015DC  6E24               	movwf	??_LCDout& (0+255),c
  6393  0015DE  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6394  0015E0  0E06               	movlw	6
  6395  0015E2                     u1285:
  6396  0015E2  90D8               	bcf	status,0,c
  6397  0015E4  3624               	rlcf	??_LCDout,f,c
  6398  0015E6  3625               	rlcf	??_LCDout+1,f,c
  6399  0015E8  2EE8               	decfsz	wreg,f,c
  6400  0015EA  D7FB               	goto	u1285
  6401  0015EC  0E07               	movlw	7
  6402  0015EE  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6403  0015F0                     u1295:
  6404  0015F0  3425               	rlcf	??_LCDout+1,w,c
  6405  0015F2  3225               	rrcf	??_LCDout+1,f,c
  6406  0015F4  3224               	rrcf	??_LCDout,f,c
  6407  0015F6  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6408  0015F8  D7FB               	goto	u1295
  6409  0015FA  4624               	rlncf	??_LCDout,f,c
  6410  0015FC  4624               	rlncf	??_LCDout,f,c
  6411  0015FE  508B               	movf	3979,w,c	;volatile
  6412  001600  1824               	xorwf	??_LCDout,w,c
  6413  001602  0BFB               	andlw	-5
  6414  001604  1824               	xorwf	??_LCDout,w,c
  6415  001606  6E8B               	movwf	3979,c	;volatile
  6416                           
  6417                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6418  001608  5027               	movf	LCDout@number,w,c
  6419  00160A  6E24               	movwf	??_LCDout& (0+255),c
  6420  00160C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6421  00160E  0E05               	movlw	5
  6422  001610                     u1305:
  6423  001610  90D8               	bcf	status,0,c
  6424  001612  3624               	rlcf	??_LCDout,f,c
  6425  001614  3625               	rlcf	??_LCDout+1,f,c
  6426  001616  2EE8               	decfsz	wreg,f,c
  6427  001618  D7FB               	goto	u1305
  6428  00161A  0E07               	movlw	7
  6429  00161C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6430  00161E                     u1315:
  6431  00161E  3425               	rlcf	??_LCDout+1,w,c
  6432  001620  3225               	rrcf	??_LCDout+1,f,c
  6433  001622  3224               	rrcf	??_LCDout,f,c
  6434  001624  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6435  001626  D7FB               	goto	u1315
  6436  001628  508C               	movf	3980,w,c	;volatile
  6437  00162A  1824               	xorwf	??_LCDout,w,c
  6438  00162C  0BFE               	andlw	-2
  6439  00162E  1824               	xorwf	??_LCDout,w,c
  6440  001630  6E8C               	movwf	3980,c	;volatile
  6441                           
  6442                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6443  001632  5027               	movf	LCDout@number,w,c
  6444  001634  6E24               	movwf	??_LCDout& (0+255),c
  6445  001636  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6446  001638  3A24               	swapf	??_LCDout,f,c
  6447  00163A  3A25               	swapf	??_LCDout+1,f,c
  6448  00163C  0EF0               	movlw	240
  6449  00163E  1625               	andwf	??_LCDout+1,f,c
  6450  001640  5024               	movf	??_LCDout,w,c
  6451  001642  0B0F               	andlw	15
  6452  001644  1225               	iorwf	??_LCDout+1,f,c
  6453  001646  0EF0               	movlw	240
  6454  001648  1624               	andwf	??_LCDout,f,c
  6455  00164A  0E07               	movlw	7
  6456  00164C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6457  00164E                     u1325:
  6458  00164E  3425               	rlcf	??_LCDout+1,w,c
  6459  001650  3225               	rrcf	??_LCDout+1,f,c
  6460  001652  3224               	rrcf	??_LCDout,f,c
  6461  001654  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6462  001656  D7FB               	goto	u1325
  6463  001658  4624               	rlncf	??_LCDout,f,c
  6464  00165A  508C               	movf	3980,w,c	;volatile
  6465  00165C  1824               	xorwf	??_LCDout,w,c
  6466  00165E  0BFD               	andlw	-3
  6467  001660  1824               	xorwf	??_LCDout,w,c
  6468  001662  6E8C               	movwf	3980,c	;volatile
  6469                           
  6470                           ;LCD.c: 21: E_TOG();
  6471  001664  EC36  F00F         	call	_E_TOG	;wreg free
  6472                           
  6473                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6474  001668  0E03               	movlw	3
  6475  00166A                     u3137:
  6476  00166A  2EE8               	decfsz	wreg,f,c
  6477  00166C  D7FE               	goto	u3137
  6478  00166E  F000               	nop	
  6479  001670  0012               	return		;funcret
  6480  001672                     __end_of_LCDout:
  6481                           	opt stack 0
  6482                           tblptru	equ	0xFF8
  6483                           tblptrh	equ	0xFF7
  6484                           tblptrl	equ	0xFF6
  6485                           tablat	equ	0xFF5
  6486                           prodh	equ	0xFF4
  6487                           prodl	equ	0xFF3
  6488                           intcon	equ	0xFF2
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _E_TOG *****************
  6502 ;; Defined at:
  6503 ;;		line 5 in file "LCD.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;		None
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;		None
  6508 ;; Return value:  Size  Location     Type
  6509 ;;		None               void
  6510 ;; Registers used:
  6511 ;;		wreg
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6517 ;;      Params:         0       0       0       0
  6518 ;;      Locals:         0       0       0       0
  6519 ;;      Temps:          0       0       0       0
  6520 ;;      Totals:         0       0       0       0
  6521 ;;Total ram usage:        0 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    3
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_LCDout
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text28
  6532  001E6C                     __ptext28:
  6533                           	opt stack 0
  6534  001E6C                     _E_TOG:
  6535                           	opt stack 24
  6536                           
  6537                           ;LCD.c: 8: LATCbits.LATC0=1;
  6538                           
  6539                           ;incstack = 0
  6540  001E6C  808B               	bsf	3979,0,c	;volatile
  6541                           
  6542                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6543  001E6E  0E03               	movlw	3
  6544  001E70                     u3147:
  6545  001E70  2EE8               	decfsz	wreg,f,c
  6546  001E72  D7FE               	goto	u3147
  6547  001E74  F000               	nop	
  6548                           
  6549                           ;LCD.c: 10: LATCbits.LATC0=0;
  6550  001E76  908B               	bcf	3979,0,c	;volatile
  6551  001E78  0012               	return		;funcret
  6552  001E7A                     __end_of_E_TOG:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon	equ	0xFF2
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           fsr1h	equ	0xFE2
  6565                           fsr1l	equ	0xFE1
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _InterruptHandlerLow *****************
  6574 ;; Defined at:
  6575 ;;		line 19 in file "main.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;		None
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;		None               void
  6582 ;; Registers used:
  6583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6589 ;;      Params:         0       0       0       0
  6590 ;;      Locals:         0       0       0       0
  6591 ;;      Temps:         17       0       0       0
  6592 ;;      Totals:        17       0       0       0
  6593 ;;Total ram usage:       17 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    2
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		Interrupt level 1
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	intcodelo
  6604  000018                     __pintcodelo:
  6605                           	opt stack 0
  6606  000018                     _InterruptHandlerLow:
  6607                           	opt stack 23
  6608                           
  6609                           ;incstack = 0
  6610  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6611  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6612  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6613  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6614  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6615  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6616  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6617  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6618  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6619  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6620  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6621  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6622  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6623  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6624  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6625  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6626  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6627  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6628                           
  6629                           ;main.c: 21: if (PIR1bits.RCIF) {
  6630  00005E  AA9E               	btfss	3998,5,c	;volatile
  6631  000060  D016               	goto	i1l62
  6632                           
  6633                           ;main.c: 22: ReceivedString[i]=RCREG;
  6634  000062  503A               	movf	_i,w,c	;volatile
  6635  000064  0D01               	mullw	1
  6636  000066  0EE9               	movlw	low _ReceivedString
  6637  000068  24F3               	addwf	prodl,w,c
  6638  00006A  6ED9               	movwf	fsr2l,c
  6639  00006C  0E01               	movlw	high _ReceivedString
  6640  00006E  20F4               	addwfc	prodh,w,c
  6641  000070  6EDA               	movwf	fsr2h,c
  6642  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6643                           
  6644                           ;main.c: 23: RFID_Read=1;
  6645  000076  0E01               	movlw	1
  6646  000078  0101               	movlb	1	; () banked
  6647  00007A  6FE8               	movwf	_RFID_Read& (0+255),b	;volatile
  6648                           
  6649                           ; BSR set to: 1
  6650                           ;main.c: 24: if (i==15){
  6651  00007C  0E0F               	movlw	15
  6652  00007E  183A               	xorwf	_i,w,c	;volatile
  6653  000080  A4D8               	btfss	status,2,c
  6654  000082  D003               	goto	i1l2767
  6655                           
  6656                           ; BSR set to: 1
  6657                           ;main.c: 25: i=0;
  6658  000084  0E00               	movlw	0
  6659  000086  6E3A               	movwf	_i,c	;volatile
  6660                           
  6661                           ;main.c: 26: }else{
  6662  000088  D001               	goto	i1l2769
  6663  00008A                     i1l2767:
  6664                           
  6665                           ; BSR set to: 1
  6666                           ;main.c: 27: i++;
  6667  00008A  2A3A               	incf	_i,f,c	;volatile
  6668  00008C                     i1l2769:
  6669                           
  6670                           ; BSR set to: 1
  6671                           ;main.c: 28: }
  6672                           ;main.c: 29: PIR1bits.RCIF=0;
  6673  00008C  9A9E               	bcf	3998,5,c	;volatile
  6674  00008E                     i1l62:
  6675  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6676  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6677  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6678  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6679  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6680  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6681  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6682  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6683  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6684  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6685  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6686  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6687  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6688  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6689  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6690  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6691  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6692  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6693  0000D4  0010               	retfie	
  6694  0000D6                     __end_of_InterruptHandlerLow:
  6695                           	opt stack 0
  6696                           pclatu	equ	0xFFB
  6697                           pclath	equ	0xFFA
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           postinc0	equ	0xFEE
  6706                           fsr0h	equ	0xFEA
  6707                           fsr0l	equ	0xFE9
  6708                           wreg	equ	0xFE8
  6709                           indf1	equ	0xFE7
  6710                           fsr1h	equ	0xFE2
  6711                           fsr1l	equ	0xFE1
  6712                           bsr	equ	0xFE0
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _InterruptHandlerHigh *****************
  6721 ;; Defined at:
  6722 ;;		line 35 in file "main.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6736 ;;      Params:         0       0       0       0
  6737 ;;      Locals:         0       0       0       0
  6738 ;;      Temps:         14       0       0       0
  6739 ;;      Totals:        14       0       0       0
  6740 ;;Total ram usage:       14 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    1
  6743 ;; This function calls:
  6744 ;;		i2_delay_tenth_s
  6745 ;; This function is called by:
  6746 ;;		Interrupt level 2
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	intcode
  6751  000008                     __pintcode:
  6752                           	opt stack 0
  6753  000008                     _InterruptHandlerHigh:
  6754                           	opt stack 23
  6755                           
  6756                           ;incstack = 0
  6757  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6758  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6759  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6760  000012  EF3B  F00C         	goto	int_func
  6761                           pclatu	equ	0xFFB
  6762                           pclath	equ	0xFFA
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           intcon	equ	0xFF2
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           fsr1h	equ	0xFE2
  6776                           fsr1l	equ	0xFE1
  6777                           bsr	equ	0xFE0
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785                           	psect	intcode_body
  6786  001876                     __pintcode_body:
  6787                           	opt stack 23
  6788  001876                     int_func:
  6789                           	opt stack 23
  6790  001876  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6791  00187A  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6792  00187E  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6793  001882  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6794  001886  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6795  00188A  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6796  00188E  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6797  001892  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6798  001896  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6799  00189A  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6800  00189E  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6801  0018A2  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6802                           
  6803                           ;main.c: 36: if (INTCONbits.INT0IF) {
  6804  0018A6  A2F2               	btfss	intcon,1,c	;volatile
  6805  0018A8  D00D               	goto	i2l70
  6806                           
  6807                           ;main.c: 37: if (mode==-1) {
  6808  0018AA  283B               	incf	_mode,w,c	;volatile
  6809  0018AC  A4D8               	btfss	status,2,c
  6810  0018AE  D003               	goto	i2l2777
  6811                           
  6812                           ;main.c: 39: mode=1;
  6813  0018B0  0E01               	movlw	1
  6814  0018B2  6E3B               	movwf	_mode,c	;volatile
  6815                           
  6816                           ;main.c: 40: } else if (mode==0) {
  6817  0018B4  D003               	goto	i2l2781
  6818  0018B6                     i2l2777:
  6819  0018B6  503B               	movf	_mode,w,c	;volatile
  6820  0018B8  A4D8               	btfss	status,2,c
  6821                           
  6822                           ;main.c: 44: mode=-1;
  6823                           
  6824                           ;main.c: 42: } else {
  6825  0018BA  683B               	setf	_mode,c	;volatile
  6826  0018BC                     i2l2781:
  6827                           
  6828                           ;main.c: 45: }
  6829                           ;main.c: 47: delay_tenth_s(2);
  6830  0018BC  0E02               	movlw	2
  6831  0018BE  EC6C  F00E         	call	i2_delay_tenth_s
  6832                           
  6833                           ;main.c: 48: INTCONbits.INT0IF=0;
  6834  0018C2  92F2               	bcf	intcon,1,c	;volatile
  6835  0018C4                     i2l70:
  6836  0018C4  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6837  0018C8  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6838  0018CC  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6839  0018D0  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6840  0018D4  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6841  0018D8  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6842  0018DC  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6843  0018E0  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6844  0018E4  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6845  0018E8  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6846  0018EC  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6847  0018F0  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6848  0018F4  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6849  0018F8  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6850  0018FC  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6851  0018FE  0011               	retfie		f
  6852  001900                     __end_of_InterruptHandlerHigh:
  6853                           	opt stack 0
  6854                           pclatu	equ	0xFFB
  6855                           pclath	equ	0xFFA
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           postinc0	equ	0xFEE
  6864                           fsr0h	equ	0xFEA
  6865                           fsr0l	equ	0xFE9
  6866                           wreg	equ	0xFE8
  6867                           indf1	equ	0xFE7
  6868                           fsr1h	equ	0xFE2
  6869                           fsr1l	equ	0xFE1
  6870                           bsr	equ	0xFE0
  6871                           indf2	equ	0xFDF
  6872                           postinc2	equ	0xFDE
  6873                           postdec2	equ	0xFDD
  6874                           fsr2h	equ	0xFDA
  6875                           fsr2l	equ	0xFD9
  6876                           status	equ	0xFD8
  6877                           
  6878 ;; *************** function i2_delay_tenth_s *****************
  6879 ;; Defined at:
  6880 ;;		line 29 in file "Movement.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  tenth_second    1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6885 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6895 ;;      Params:         0       0       0       0
  6896 ;;      Locals:         3       0       0       0
  6897 ;;      Temps:          1       0       0       0
  6898 ;;      Totals:         4       0       0       0
  6899 ;;Total ram usage:        4 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_InterruptHandlerHigh
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text31
  6909  001CD8                     __ptext31:
  6910                           	opt stack 0
  6911  001CD8                     i2_delay_tenth_s:
  6912                           	opt stack 23
  6913                           
  6914                           ;incstack = 0
  6915                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6916  001CD8  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6917                           
  6918                           ;Movement.c: 30: unsigned int i=0;
  6919  001CDA  0E00               	movlw	0
  6920  001CDC  6E04               	movwf	i2delay_tenth_s@i+1,c
  6921  001CDE  0E00               	movlw	0
  6922  001CE0  6E03               	movwf	i2delay_tenth_s@i,c
  6923                           
  6924                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  6925  001CE2  0E00               	movlw	0
  6926  001CE4  6E04               	movwf	i2delay_tenth_s@i+1,c
  6927  001CE6  0E01               	movlw	1
  6928  001CE8  6E03               	movwf	i2delay_tenth_s@i,c
  6929  001CEA  D009               	goto	i2l2755
  6930  001CEC                     i2l2751:
  6931                           
  6932                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  6933  001CEC  0E82               	movlw	130
  6934  001CEE  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6935  001CF0  0EDE               	movlw	222
  6936  001CF2                     i2u315_47:
  6937  001CF2  2EE8               	decfsz	wreg,f,c
  6938  001CF4  D7FE               	goto	i2u315_47
  6939  001CF6  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6940  001CF8  D7FC               	goto	i2u315_47
  6941  001CFA  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6942  001CFC  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6943  001CFE                     i2l2755:
  6944  001CFE  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6945  001D00  0D02               	mullw	2
  6946  001D02  5003               	movf	i2delay_tenth_s@i,w,c
  6947  001D04  5CF3               	subwf	prodl,w,c
  6948  001D06  5004               	movf	i2delay_tenth_s@i+1,w,c
  6949  001D08  58F4               	subwfb	prodh,w,c
  6950  001D0A  A0D8               	btfss	status,0,c
  6951  001D0C  0012               	return	
  6952  001D0E  D7EE               	goto	i2l2751
  6953  001D10                     __end_ofi2_delay_tenth_s:
  6954                           	opt stack 0
  6955                           pclatu	equ	0xFFB
  6956                           pclath	equ	0xFFA
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           intcon	equ	0xFF2
  6964                           postinc0	equ	0xFEE
  6965                           fsr0h	equ	0xFEA
  6966                           fsr0l	equ	0xFE9
  6967                           wreg	equ	0xFE8
  6968                           indf1	equ	0xFE7
  6969                           fsr1h	equ	0xFE2
  6970                           fsr1l	equ	0xFE1
  6971                           bsr	equ	0xFE0
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           pclatu	equ	0xFFB
  6979                           pclath	equ	0xFFA
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           postinc0	equ	0xFEE
  6988                           fsr0h	equ	0xFEA
  6989                           fsr0l	equ	0xFE9
  6990                           wreg	equ	0xFE8
  6991                           indf1	equ	0xFE7
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           bsr	equ	0xFE0
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002                           	psect	rparam
  7003  0000                     pclatu	equ	0xFFB
  7004                           pclath	equ	0xFFA
  7005                           tblptru	equ	0xFF8
  7006                           tblptrh	equ	0xFF7
  7007                           tblptrl	equ	0xFF6
  7008                           tablat	equ	0xFF5
  7009                           prodh	equ	0xFF4
  7010                           prodl	equ	0xFF3
  7011                           intcon	equ	0xFF2
  7012                           postinc0	equ	0xFEE
  7013                           fsr0h	equ	0xFEA
  7014                           fsr0l	equ	0xFE9
  7015                           wreg	equ	0xFE8
  7016                           indf1	equ	0xFE7
  7017                           fsr1h	equ	0xFE2
  7018                           fsr1l	equ	0xFE1
  7019                           bsr	equ	0xFE0
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           fsr2h	equ	0xFDA
  7024                           fsr2l	equ	0xFD9
  7025                           status	equ	0xFD8
  7026                           
  7027                           	psect	temp
  7028  00003C                     btemp:
  7029                           	opt stack 0
  7030  00003C                     	ds	1
  7031  0000                     int$flags	set	btemp
  7032                           pclatu	equ	0xFFB
  7033                           pclath	equ	0xFFA
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           postinc0	equ	0xFEE
  7042                           fsr0h	equ	0xFEA
  7043                           fsr0l	equ	0xFE9
  7044                           wreg	equ	0xFE8
  7045                           indf1	equ	0xFE7
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           bsr	equ	0xFE0
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8


Data Sizes:
    Strings     93
    Constant    16
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     68      84
    BANK1           256    232     249
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_7(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> ScanIR@buf(BANK0[40]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[18]), 
		 -> STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[14]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S158DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S158DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnRight->_stop
    _turnLeft->_fullSpeedAhead
    _turnLeft->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               234   234      0   90284
                                             66 BANK0      2     2      0
                                              0 BANK1    232   232      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                     _initInterrupts
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     882
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3938
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       24    17      7   34457
                                             10 BANK0     24    17      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              56    46     10   35761
                                             10 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4   10956
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   11726
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6494
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3660
                                             56 COMRAM     1     1      0
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2334
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1177
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    17      8    1182
                                             47 COMRAM     9     1      8
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0     838
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1287
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     794
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initInterrupts
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E8      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      54       5       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     188       3        0.0%
DATA                 0      0     188      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 20:34:03 2018

                   ?_grabRightIR 0024                                _i 003A  
                             l73 0B4C                     ___awdiv@sign 002F  
                             bsr 000FE0              ___wmul@multiplicand 0026  
                    main@Message 01C8                      ?_LCD_String 002A  
                            l137 154E                              l167 1ABA  
                            l846 1B7E                              l856 1C5C  
                    grabLeftIR@i 002B                              prod 000FF3  
                            wreg 000FE8                     main@MoveTime 0164  
                   main@MoveType 0100                             l2203 1B0E  
                           l3003 197A                             l2301 143E  
                           l3013 1526                             l3021 17FC  
                           l2223 1A0E                             l2303 144A  
                           l3031 1834                             l2145 1B4C  
                           l2305 1464                             l3025 1814  
                           l3017 17E4                             l2219 1A06  
                           l2235 1994                             l2147 1B54  
                           l2251 1310                             l3043 1A82  
                           l2229 1A4A                             l2245 19D8  
                           l2157 1B74                             l2149 1B58  
                           l2173 1C52                             l2165 1C32  
                           l3205 08D6                             l3213 08EC  
                           l3133 055E                             l2183 1CC6  
                           l2239 199C                             l2167 1C3A  
                           l2263 135A                             l3047 1A9A  
                           l3039 1A6A                             l3223 0946  
                           l2193 1D68                             l2169 1C3E  
                           l2273 138A                             l2257 132C  
                           l3161 06DC                             l3153 0624  
                           l3137 05AC                             l3129 0510  
                           l2179 1CB4                             l2275 1390  
                           l3403 12FE                             l2197 1ADA  
                           l2189 1D56                             l2293 13E2  
                           l3325 10AA                             l3245 099E  
                           l3229 094A                             l3501 0D0C  
                           l2295 13E8                             l2287 13C6  
                           l3319 10A6                             l3263 0A38  
                           l3183 07DE                             l3175 0726  
                           l3511 0D74                             l3337 112A  
                           l3345 1132                             l3257 0A34  
                           l3169 0722                             l3521 0DBE  
                           l3441 0B52                             l3355 11B0  
                           l3363 11DE                             l2379 1DE0  
                           l3523 0DC4                             l3515 0D7E  
                           l3451 0B94                             l3197 081E  
                           l2741 17DE                             l2733 178E  
                           l3533 0DEA                             l3359 11DA  
                           l3279 0AC0                             l3527 0DCE  
                           l3535 0DF0                             l3543 0E4C  
                           l3377 125E                             l3385 1266  
                           l2729 1786                             l3553 0EA4  
                           l3395 12D0                             l3555 0EAA  
                           l3483 0C54                             l3467 0BDE  
                           l3493 0CE8                             l3565 0EEA  
                           l3399 12FA                             l3497 0CF6  
                           l3489 0C9A                             l2971 1914  
                           l2983 193A                             l2985 1942  
                           l2977 1924                             l2995 1962  
                           l2987 1946                             l2999 196C  
                           STR_1 0354                             STR_2 0345  
                           STR_3 0334                             STR_4 0311  
                           STR_5 0323                             STR_6 0334  
                           STR_7 0362                             u1305 1610  
                           u1315 161E                             u1325 164E  
                           u1510 1AFE                             _LATB 000F8A  
                           u1415 1D7C                             u3007 1714  
                           u1416 1D7E                             u1520 1B2E  
                           u1265 15B6                             u3017 1726  
                           u1275 15C4                             u3107 1B08  
                           u3027 0F50                             u1285 15E2  
                           u3117 1D8A                             u1517 1AF4  
                           u3037 0F68                             u1295 15F0  
                           u3127 1D9A                             u1527 1B24  
                           u3047 182E                             u2344 14E6  
                           u3137 166A                             u2345 14E2  
                           u3057 1AB4                             u2354 1542  
                           u3147 1E70                             u1555 1A16  
                           u3067 19CC                             u2355 153E  
                           u1715 1DEE                             u1716 1DF0  
                           u3077 1A3E                             u2365 159C  
                           u3087 1CBA                             u3097 1D6A  
                           u1585 19A4                             u2820 0D3E  
                           u2830 0D52                             u2822 0D40  
                           u1695 1DDC                             u1696 1DDE  
                           u2832 0D54                             u2927 1684  
                           u2937 169A                             u2947 16AA  
                           u2957 16B8                             i1l62 008E  
                           u2967 16C6                             u2977 16D8  
                           u2987 16EA                             u2997 1700  
                           i2l70 18C4                       ScanIR@Move 006E  
                           _main 0AC4                             _mode 003B  
                  main@ScanAngle 01D2                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 003C  
                           _stop 17E2                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 00D6                     ___param_bank 000010  
                i2_delay_tenth_s 1CD8                  __end_of_SendLCD 1DA2  
                __end_of_SetLine 1D72               ScanWithRange@F3891 00B0  
             ScanWithRange@F3887 00A8               ScanWithRange@F3889 00AC  
                    ScanIR@F3878 00A4                            ?_main 0001  
                __end_of___awdiv 1984                            ?_stop 0062  
                ___awdiv@divisor 002C                            _PDC0H 000F78  
                          _PDC1H 000F76                            _PDC0L 000F79  
                          _PDC1L 000F77                            _T5CON 000FB7  
                   grabRightIR@i 002B                  __end_of___lwdiv 1B88  
                __end_of___lwmod 1C66                  ___awdiv@counter 002E  
                          _RCREG 000FAE                            _E_TOG 1E6C  
                          _SPBRG 000FAF                            _TRISC 000F94  
                          _TXREG 000FAD                  __end_of_initLCD 172E  
                __end_of_dpowers 030B                            main@i 01D4  
                          tablat 000FF5                            status 000FD8  
            __size_of_LCD_String 005E                  __end_of_sprintf 1472  
         __size_of_ScanWithRange 0754                  __initialization 1DA2  
                   __end_of_main 0F0C                     __end_of_stop 1876  
                 delay_tenth_s@i 0026                   __CFG_OSC$IRCIO 000000  
               LCD_String@string 002A             __end_of_enableSensor 1DF2  
            VerifySignal@hexByte 002D                           ??_main 00A2  
                         ??_stop 0039                    __activetblptr 000002  
                  ?_initMotorPWM 0001                           ?_E_TOG 0001  
                   ?_setMotorPWM 0032           __size_of_fullSpeedBack 003A  
               ___awdiv@dividend 002A  __end_of_DirectionFoundThreshold 030F  
                         i1l2767 008A                           i1l2769 008C  
                 __CFG_WDTEN$OFF 000000                           i2l2751 1CEC  
                         i2l2755 1CFE                           i2l2781 18BC  
                         i2l2777 18B6            __end_of_delay_tenth_s 1CD8  
                         _LCDout 15AC                      SendLCD@Byte 0029  
__end_of_DirectionFoundTolerance 0311                           _OSCCON 000FD3  
                         _PTCON0 000F7F                           _PTCON1 000F7E  
                         _SPBRGH 000FB0                           _PTPERH 000F7A  
                         _PTPERL 000F7B          __end_ofi2_delay_tenth_s 1D10  
                    SendLCD@type 0028                        ??_SendLCD 0029  
                         _ScanIR 0F0C                        ??_SetLine 002A  
                         ___wmul 1DF2                        ??___awdiv 002E  
               __end_of_initRFID 1E56                        ??___lwdiv 0028  
                      ??___lwmod 002F                           _initIR 1E18  
           __size_of_grabRightIR 0072                           clear_0 1DA8  
                         clear_1 1DB4                 ___awdiv@quotient 0030  
                         main@mL 01D6                           main@mR 01DF  
                 ??_initMotorPWM 0024                        ??_initLCD 002A  
                  _ScanWithRange 0370     i2delay_tenth_s@tenth_seconds 0002  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         stop@mL 0062                           stop@mR 0064  
                      ??_sprintf 0038                 __end_of_turnLeft 1C24  
                fullSpeedBack@mL 0066                  fullSpeedBack@mR 0068  
                     __accesstop 0060          __end_of__initialization 1DBE  
                  ___rparam_used 000001                      SetLine@line 002A  
                  __end_of_E_TOG 1E7A                   __pcstackCOMRAM 0001  
                  _fullSpeedBack 1C66          __size_of_initInterrupts 0016  
                   ??_LCD_String 002C                   ?_ScanWithRange 006A  
           VerifySignal@checksum 002C                          ??_E_TOG 0024  
  __size_of_InterruptHandlerHigh 18F8      __end_of_InterruptHandlerLow 00D6  
     delay_tenth_s@tenth_seconds 0025                       __pbssBANK0 00A4  
                     __pbssBANK1 01E8                          ?_LCDout 0001  
               ?i2_delay_tenth_s 0001               __end_of_LCD_String 1B36  
                        ?_ScanIR 006A                   ?_fullSpeedBack 0066  
          __size_of_enableSensor 0026                          ?___wmul 0024  
            grabLeftIR@IR_signal 0029                          _CAP1CON 000F63  
                        _CAP2CON 000F62                          ?_initIR 0001  
        __size_of_fullSpeedAhead 0070                       _grabLeftIR 19F6  
                        _PWMCON0 000F6F                          _PWMCON1 000F6E  
                      ?_initRFID 0001             __size_of_setMotorPWM 013A  
                __size_of_LCDout 00C6                     _enableSensor 1DCC  
             __size_of_turnRight 004E             __end_of_initMotorPWM 1D42  
                        _SendLCD 1D72                          __Hparam 0000  
                        _SetLine 1D42                          __Lparam 0000  
                __size_of_ScanIR 03F6                          ___awdiv 1900  
                __size_of___wmul 0026                          ___lwdiv 1B36  
                        ___lwmod 1C24                     __psmallconst 0300  
                __size_of_initIR 0022                          __pcinit 1DA2  
                ??_ScanWithRange 0071                          __ramtop 0300  
                      ?_turnLeft 0066                          __ptext0 0AC4  
                        __ptext1 1E3A                          __ptext2 1D10  
                        __ptext3 1672                          __ptext4 1E56  
                        __ptext5 1E18                          __ptext6 1C66  
                        __ptext7 1DCC                          __ptext8 172E  
                        __ptext9 0370                          _initLCD 1672  
                        _dpowers 0301                     LCDout@number 0027  
                  ?_VerifySignal 0024                          _sprintf 1302  
                 __pintcode_body 1876             end_of_initialization 1DBE  
             setMotorPWM@PWMduty 0060                       ??_initRFID 0024  
                  __Lmediumconst 0000                          int_func 1876  
             ScanIR@SensorResult 009E                  ??_fullSpeedBack 003A  
                      _RFID_Read 01E8                        _RCSTAbits 000FAB  
                        postdec2 000FDD                   _initInterrupts 1E56  
                        postinc0 000FEE                          postinc2 000FDE  
                     ??_turnLeft 003A                __end_of_turnRight 1BD6  
                    ?_grabLeftIR 0024                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
                 ??_VerifySignal 0026                 fullSpeedAhead@mL 0062  
               fullSpeedAhead@mR 0064                   __end_of_LCDout 1672  
                      _TXSTAbits 000FAC                        ScanIR@buf 0076  
         __end_of_initInterrupts 1E6C       ScanWithRange@MoveTimeEntry 006F  
                  ??_grabRightIR 0026                   __end_of_ScanIR 1302  
                 _fullSpeedAhead 1A68          _DirectionFoundThreshold 030D  
                 _ReceivedString 01E9                   __end_of___wmul 1E18  
                    _BAUDCONbits 000FAA          _DirectionFoundTolerance 030F  
                 __end_of_initIR 1E3A           __size_of_delay_tenth_s 0038  
            start_initialization 1DA2               VerifySignal@Signal 0024  
          __size_of_initMotorPWM 0032                         ??_LCDout 0024  
   __end_of_InterruptHandlerHigh 1900                         ??_ScanIR 0074  
                ?_initInterrupts 0001           __end_of_fullSpeedAhead 1AD8  
            __size_of_grabLeftIR 0072                         ??___wmul 0028  
                       ??_initIR 0024              __end_of_grabRightIR 19F6  
                   _initMotorPWM 1D10                      __pbssCOMRAM 003A  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
   __size_of_InterruptHandlerLow 00BE                    _delay_tenth_s 1CA0  
                    sprintf@flag 0062                      sprintf@prec 0063  
              __size_of_initRFID 001C                         ?_SendLCD 0028  
                       ?_SetLine 0001                 ___lwdiv@dividend 0024  
                ?_fullSpeedAhead 0062                        __pintcode 0008  
           __end_of_VerifySignal 17E2                         ?___awdiv 002A  
       __size_ofi2_delay_tenth_s 0038                         ?___lwdiv 0024  
                       ?___lwmod 002B     __end_of_ClearSignalThreshold 030D  
                    __pintcodelo 0018                         _CAP1BUFH 000F69  
                       _CAP1BUFL 000F68                         _CAP2BUFH 000F67  
                       _CAP2BUFL 000F66                         ?_initLCD 0001  
                    __smallconst 0300                   __size_of_E_TOG 000E  
              __size_of_turnLeft 004E       ScanWithRange@SensorResultC 007A  
     ScanWithRange@SensorResultL 0076       ScanWithRange@SensorResultR 007E  
                  ??_setMotorPWM 0034                 ___lwdiv@quotient 0028  
                       ?_sprintf 0030                   ?_delay_tenth_s 0001  
                 ___wmul@product 0028                         _LATAbits 000F89  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                       _LATEbits 000F8D                         _IPR1bits 000F9F  
                       _PIE1bits 000F9D                      turnRight@mL 0066  
                    turnRight@mR 0068                         i2u315_47 1CF2  
                       _PIR1bits 000F9E                         _RCONbits 000FD0  
                    _grabRightIR 1984             grabRightIR@IR_signal 0029  
              ___wmul@multiplier 0024            __end_of_ScanWithRange 0AC4  
                   setMotorPWM@m 0032             _InterruptHandlerHigh 0008  
                       ScanIR@mL 006A                         ScanIR@mR 006C  
                   ??_grabLeftIR 0026                        _turnRight 1B88  
                 ScanIR@MoveTime 0070                   ScanIR@MoveType 0072  
            __end_of_setMotorPWM 15AC                         __Hrparam 0000  
               __size_of_SendLCD 0030                         __Lrparam 0000  
          __end_of_fullSpeedBack 1CA0                 __size_of_SetLine 0030  
             __end_of_grabLeftIR 1A68                 __size_of___awdiv 0084  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                     _ANSEL0bits 000FB8            ?_InterruptHandlerHigh 0001  
              ??i2_delay_tenth_s 0001                       sprintf@val 0064  
               __size_of_initLCD 00BC                  ___lwdiv@divisor 0026  
                ___lwdiv@counter 002A                       ?_turnRight 0066  
                       __ptext10 0F0C                         __ptext11 1B88  
                       __ptext20 1B36                         __ptext12 1BD6  
                       __ptext21 1984                         __ptext13 17E2  
                       __ptext22 19F6                         __ptext14 1A68  
                       __ptext31 1CD8                         __ptext23 1CA0  
                       __ptext15 1472                         __ptext24 1D42  
                       __ptext16 1DF2                         __ptext25 1AD8  
                       __ptext17 1900                         __ptext26 1D72  
                       __ptext18 1302                         __ptext27 15AC  
                       __ptext19 1C24                         __ptext28 1E6C  
                ??_delay_tenth_s 0024                 __size_of_sprintf 0170  
                       _initRFID 1E3A                 ??_initInterrupts 0024  
           _ClearSignalThreshold 030B                    __size_of_main 0448  
      ScanWithRange@ResultFalseC 0074               main@DirectionFound 01D3  
      ScanWithRange@ResultFalseL 0073        ScanWithRange@ResultFalseR 0075  
                  __size_of_stop 0094                       turnLeft@mL 0066  
                     turnLeft@mR 0068            __size_of_VerifySignal 00B4  
                       int$flags 003C                         main@Move 01D5  
            _InterruptHandlerLow 0018                       _LCD_String 1AD8  
                       _turnLeft 1BD6                  ScanWithRange@mL 006A  
                ScanWithRange@mR 006C               enableSensor@sensor 0025  
             enableSensor@status 0024                    VerifySignal@i 002F  
                     _INTCONbits 000FF2       ScanWithRange@tenth_seconds 006E  
                    _setMotorPWM 1472                     _VerifySignal 172E  
                       intlevel1 0000                         intlevel2 0000  
                      sprintf@ap 0060                        sprintf@sp 0030  
           ?_InterruptHandlerLow 0001                    ?_enableSensor 0024  
               ___lwmod@dividend 002B                 ??_fullSpeedAhead 0039  
                     _OSCCONbits 000FD3           ??_InterruptHandlerHigh 0005  
                       sprintf@c 0066                         sprintf@f 0032  
                ___lwmod@divisor 002D                  ___lwmod@counter 002F  
                    ??_turnRight 003A            ??_InterruptHandlerLow 0013  
                 ??_enableSensor 0025                 i2delay_tenth_s@i 0003  
