

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Mar 14 19:03:45 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     _ANSEL0bits	set	4024
    31  0000                     _BAUDCONbits	set	4010
    32  0000                     _CAP1BUFH	set	3945
    33  0000                     _CAP1BUFL	set	3944
    34  0000                     _CAP1CON	set	3939
    35  0000                     _INTCONbits	set	4082
    36  0000                     _IPR1bits	set	3999
    37  0000                     _LATAbits	set	3977
    38  0000                     _LATB	set	3978
    39  0000                     _LATCbits	set	3979
    40  0000                     _LATDbits	set	3980
    41  0000                     _LATEbits	set	3981
    42  0000                     _OSCCON	set	4051
    43  0000                     _OSCCONbits	set	4051
    44  0000                     _PIE1bits	set	3997
    45  0000                     _PIR1bits	set	3998
    46  0000                     _PTCON0	set	3967
    47  0000                     _PTCON1	set	3966
    48  0000                     _PTPERH	set	3962
    49  0000                     _PTPERL	set	3963
    50  0000                     _PWMCON0	set	3951
    51  0000                     _PWMCON1	set	3950
    52  0000                     _RCONbits	set	4048
    53  0000                     _RCREG	set	4014
    54  0000                     _RCSTAbits	set	4011
    55  0000                     _SPBRG	set	4015
    56  0000                     _SPBRGH	set	4016
    57  0000                     _T5CON	set	4023
    58  0000                     _TRISAbits	set	3986
    59  0000                     _TRISBbits	set	3987
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISCbits	set	3988
    62  0000                     _TRISDbits	set	3989
    63  0000                     _TRISEbits	set	3990
    64  0000                     _TXREG	set	4013
    65  0000                     _TXSTAbits	set	4012
    66  0000                     _PDC0H	set	3960
    67  0000                     _PDC0L	set	3961
    68  0000                     _PDC1H	set	3958
    69  0000                     _PDC1L	set	3959
    70                           
    71                           ; #config settings
    72  0000                     
    73                           	psect	cinit
    74  00082A                     __pcinit:
    75                           	opt stack 0
    76  00082A                     start_initialization:
    77                           	opt stack 0
    78  00082A                     __initialization:
    79                           	opt stack 0
    80                           
    81                           ; Clear objects allocated to BANK0 (16 bytes)
    82  00082A  EE00  F080         	lfsr	0,__pbssBANK0
    83  00082E  0E10               	movlw	16
    84  000830                     clear_0:
    85  000830  6AEE               	clrf	postinc0,c
    86  000832  06E8               	decf	wreg,f,c
    87  000834  E1FD               	bnz	clear_0
    88                           
    89                           ; Clear objects allocated to COMRAM (1 bytes)
    90  000836  6A36               	clrf	__pbssCOMRAM& (0+255),c
    91  000838                     end_of_initialization:
    92                           	opt stack 0
    93  000838                     __end_of__initialization:
    94                           	opt stack 0
    95  000838  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    96  00083A  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    97  00083C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    98  00083E  6EF8               	movwf	tblptru,c
    99  000840  0100               	movlb	0
   100  000842  EF56  F000         	goto	_main	;jump to C main() function
   101                           tblptru	equ	0xFF8
   102                           postinc0	equ	0xFEE
   103                           wreg	equ	0xFE8
   104                           
   105                           	psect	bssCOMRAM
   106  000036                     __pbssCOMRAM:
   107                           	opt stack 0
   108  000036                     _i:
   109                           	opt stack 0
   110  000036                     	ds	1
   111                           tblptru	equ	0xFF8
   112                           postinc0	equ	0xFEE
   113                           wreg	equ	0xFE8
   114                           
   115                           	psect	bssBANK0
   116  000080                     __pbssBANK0:
   117                           	opt stack 0
   118  000080                     _ReceivedString:
   119                           	opt stack 0
   120  000080                     	ds	16
   121                           tblptru	equ	0xFF8
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	cstackBANK0
   126  000060                     __pcstackBANK0:
   127                           	opt stack 0
   128  000060                     main@Message:
   129                           	opt stack 0
   130                           
   131                           ; 10 bytes @ 0x0
   132  000060                     	ds	10
   133  00006A                     main@test:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0xA
   137  00006A                     	ds	2
   138  00006C                     main@mode:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0xC
   142  00006C                     	ds	1
   143  00006D                     main@i:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0xD
   147  00006D                     	ds	1
   148  00006E                     main@motorL:
   149                           	opt stack 0
   150                           
   151                           ; 9 bytes @ 0xE
   152  00006E                     	ds	9
   153  000077                     main@motorR:
   154                           	opt stack 0
   155                           
   156                           ; 9 bytes @ 0x17
   157  000077                     	ds	9
   158                           tblptru	equ	0xFF8
   159                           postinc0	equ	0xFEE
   160                           wreg	equ	0xFE8
   161                           
   162                           	psect	cstackCOMRAM
   163  000001                     __pcstackCOMRAM:
   164                           	opt stack 0
   165  000001                     ??_InterruptHandlerHigh:
   166  000001                     
   167                           ; 0 bytes @ 0x0
   168  000001                     	ds	14
   169  00000F                     ??_delay_s:
   170  00000F                     ??_delay_tenth_s:
   171  00000F                     ?___wmul:
   172                           	opt stack 0
   173  00000F                     _initRFID$1273:
   174                           	opt stack 0
   175  00000F                     enableSensor@status:
   176                           	opt stack 0
   177  00000F                     VerifySignal@Signal:
   178                           	opt stack 0
   179  00000F                     ___wmul@multiplier:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0xE
   183  00000F                     	ds	1
   184  000010                     delay_s@seconds:
   185                           	opt stack 0
   186  000010                     delay_tenth_s@tenth_seconds:
   187                           	opt stack 0
   188  000010                     enableSensor@sensor:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0xF
   192  000010                     	ds	1
   193  000011                     ??_VerifySignal:
   194  000011                     delay_s@i:
   195                           	opt stack 0
   196  000011                     delay_tenth_s@i:
   197                           	opt stack 0
   198  000011                     ___wmul@multiplicand:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x10
   202  000011                     	ds	2
   203  000013                     ___wmul@product:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x12
   207  000013                     	ds	2
   208  000015                     ?___awdiv:
   209                           	opt stack 0
   210  000015                     ___awdiv@dividend:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x14
   214  000015                     	ds	2
   215  000017                     VerifySignal@checksum:
   216                           	opt stack 0
   217  000017                     ___awdiv@divisor:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x16
   221  000017                     	ds	1
   222  000018                     VerifySignal@hexByte:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x17
   226  000018                     	ds	1
   227  000019                     ___awdiv@counter:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0x18
   231  000019                     	ds	1
   232  00001A                     VerifySignal@i:
   233                           	opt stack 0
   234  00001A                     ___awdiv@sign:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x19
   238  00001A                     	ds	1
   239  00001B                     ___awdiv@quotient:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x1A
   243  00001B                     	ds	2
   244  00001D                     setMotorPWM@m:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x1C
   248  00001D                     	ds	2
   249  00001F                     ??_setMotorPWM:
   250                           
   251                           ; 0 bytes @ 0x1E
   252  00001F                     	ds	5
   253  000024                     setMotorPWM@PWMduty:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x23
   257  000024                     	ds	2
   258  000026                     stop@mL:
   259                           	opt stack 0
   260  000026                     fullSpeedAhead@mL:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x25
   264  000026                     	ds	2
   265  000028                     stop@mR:
   266                           	opt stack 0
   267  000028                     fullSpeedAhead@mR:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x27
   271  000028                     	ds	2
   272  00002A                     
   273                           ; 0 bytes @ 0x29
   274  00002A                     	ds	1
   275  00002B                     turnLeft@mL:
   276                           	opt stack 0
   277  00002B                     turnRight@mL:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x2A
   281  00002B                     	ds	2
   282  00002D                     turnLeft@mR:
   283                           	opt stack 0
   284  00002D                     turnRight@mR:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x2C
   288  00002D                     	ds	2
   289  00002F                     ScanWithRange@mL:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x2E
   293  00002F                     	ds	2
   294  000031                     ScanWithRange@mR:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x30
   298  000031                     	ds	2
   299  000033                     ScanWithRange@tenth_seconds:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x32
   303  000033                     	ds	1
   304  000034                     ??_main:
   305                           
   306                           ; 0 bytes @ 0x33
   307  000034                     	ds	2
   308                           tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312 ;;
   313 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   314 ;;
   315 ;; *************** function _main *****************
   316 ;; Defined at:
   317 ;;		line 29 in file "main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;  PathTaken     100    0        unsigned char [100]
   322 ;;  Message        10    0[BANK0 ] unsigned char [10]
   323 ;;  motorR          9   23[BANK0 ] struct DC_motor
   324 ;;  motorL          9   14[BANK0 ] struct DC_motor
   325 ;;  SignalStreng    3    0        unsigned char [3]
   326 ;;  test            2   10[BANK0 ] unsigned int 
   327 ;;  i               1   13[BANK0 ] unsigned char 
   328 ;;  mode            1   12[BANK0 ] unsigned char 
   329 ;; Return value:  Size  Location     Type
   330 ;;		None               void
   331 ;; Registers used:
   332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : 0/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   338 ;;      Params:         0       0       0       0
   339 ;;      Locals:         0      32       0       0
   340 ;;      Temps:          2       0       0       0
   341 ;;      Totals:         2      32       0       0
   342 ;;Total ram usage:       34 bytes
   343 ;; Hardware stack levels required when called:    6
   344 ;; This function calls:
   345 ;;		_ScanWithRange
   346 ;;		_VerifySignal
   347 ;;		_delay_s
   348 ;;		_initIR
   349 ;;		_initMotorPWM
   350 ;;		_initRFID
   351 ;; This function is called by:
   352 ;;		Startup code after reset
   353 ;; This function uses a non-reentrant model
   354 ;;
   355                           
   356                           	psect	text0
   357  0000AC                     __ptext0:
   358                           	opt stack 0
   359  0000AC                     _main:
   360                           	opt stack 25
   361                           
   362                           ;main.c: 32: unsigned char Message[10];
   363                           ;main.c: 33: unsigned char i=0;
   364                           
   365                           ;incstack = 0
   366  0000AC  0E00               	movlw	0
   367  0000AE  0100               	movlb	0	; () banked
   368  0000B0  6F6D               	movwf	main@i& (0+255),b
   369                           
   370                           ;main.c: 34: unsigned char mode=0;
   371  0000B2  0E00               	movlw	0
   372  0000B4  0100               	movlb	0	; () banked
   373  0000B6  6F6C               	movwf	main@mode& (0+255),b
   374                           
   375                           ;main.c: 35: unsigned char SignalStrength[3];
   376                           ;main.c: 36: char PathTaken[100];
   377                           ;main.c: 37: unsigned int test=0;
   378  0000B8  0E00               	movlw	0
   379  0000BA  0100               	movlb	0	; () banked
   380  0000BC  6F6B               	movwf	(main@test+1)& (0+255),b
   381  0000BE  0E00               	movlw	0
   382  0000C0  6F6A               	movwf	main@test& (0+255),b
   383                           
   384                           ; BSR set to: 0
   385                           ;main.c: 40: INTCONbits.GIEH = 1;
   386  0000C2  8EF2               	bsf	intcon,7,c	;volatile
   387                           
   388                           ; BSR set to: 0
   389                           ;main.c: 41: RCONbits.IPEN = 1;
   390  0000C4  8ED0               	bsf	4048,7,c	;volatile
   391                           
   392                           ; BSR set to: 0
   393                           ;main.c: 42: INTCONbits.GIEL = 1;
   394  0000C6  8CF2               	bsf	intcon,6,c	;volatile
   395                           
   396                           ; BSR set to: 0
   397                           ;main.c: 43: INTCONbits.INT0IE = 1;
   398  0000C8  88F2               	bsf	intcon,4,c	;volatile
   399                           
   400                           ; BSR set to: 0
   401                           ;main.c: 44: INTCONbits.PEIE = 1;
   402  0000CA  8CF2               	bsf	intcon,6,c	;volatile
   403                           
   404                           ; BSR set to: 0
   405                           ;main.c: 46: IPR1bits.RCIP=1;
   406  0000CC  8A9F               	bsf	3999,5,c	;volatile
   407                           
   408                           ; BSR set to: 0
   409                           ;main.c: 47: PIE1bits.RCIE=1;
   410  0000CE  8A9D               	bsf	3997,5,c	;volatile
   411                           
   412                           ;main.c: 50: struct DC_motor motorL, motorR;
   413                           ;main.c: 51: motorL.power=0;
   414  0000D0  0E00               	movlw	0
   415  0000D2  0100               	movlb	0	; () banked
   416  0000D4  6F6E               	movwf	main@motorL& (0+255),b
   417                           
   418                           ;main.c: 52: motorL.direction=1;
   419  0000D6  0E01               	movlw	1
   420  0000D8  0100               	movlb	0	; () banked
   421  0000DA  6F6F               	movwf	(main@motorL+1)& (0+255),b
   422                           
   423                           ; BSR set to: 0
   424                           ;main.c: 53: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   425  0000DC  0E79               	movlw	121
   426  0000DE  0100               	movlb	0	; () banked
   427  0000E0  6F70               	movwf	(main@motorL+2)& (0+255),b
   428  0000E2  0E0F               	movlw	15
   429  0000E4  0100               	movlb	0	; () banked
   430  0000E6  6F71               	movwf	(main@motorL+3)& (0+255),b
   431                           
   432                           ; BSR set to: 0
   433                           ;main.c: 54: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   434  0000E8  0E78               	movlw	120
   435  0000EA  0100               	movlb	0	; () banked
   436  0000EC  6F72               	movwf	(main@motorL+4)& (0+255),b
   437  0000EE  0E0F               	movlw	15
   438  0000F0  0100               	movlb	0	; () banked
   439  0000F2  6F73               	movwf	(main@motorL+5)& (0+255),b
   440                           
   441                           ;main.c: 55: motorL.dir_pin=0;
   442  0000F4  0E00               	movlw	0
   443  0000F6  0100               	movlb	0	; () banked
   444  0000F8  6F74               	movwf	(main@motorL+6)& (0+255),b
   445                           
   446                           ;main.c: 56: motorL.PWMperiod=199;
   447  0000FA  0E00               	movlw	0
   448  0000FC  0100               	movlb	0	; () banked
   449  0000FE  6F76               	movwf	(main@motorL+8)& (0+255),b
   450  000100  0EC7               	movlw	199
   451  000102  6F75               	movwf	(main@motorL+7)& (0+255),b
   452                           
   453                           ;main.c: 58: motorR.power=0;
   454  000104  0E00               	movlw	0
   455  000106  0100               	movlb	0	; () banked
   456  000108  6F77               	movwf	main@motorR& (0+255),b
   457                           
   458                           ;main.c: 59: motorR.direction=1;
   459  00010A  0E01               	movlw	1
   460  00010C  0100               	movlb	0	; () banked
   461  00010E  6F78               	movwf	(main@motorR+1)& (0+255),b
   462                           
   463                           ; BSR set to: 0
   464                           ;main.c: 60: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   465  000110  0E77               	movlw	119
   466  000112  0100               	movlb	0	; () banked
   467  000114  6F79               	movwf	(main@motorR+2)& (0+255),b
   468  000116  0E0F               	movlw	15
   469  000118  0100               	movlb	0	; () banked
   470  00011A  6F7A               	movwf	(main@motorR+3)& (0+255),b
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 61: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   474  00011C  0E76               	movlw	118
   475  00011E  0100               	movlb	0	; () banked
   476  000120  6F7B               	movwf	(main@motorR+4)& (0+255),b
   477  000122  0E0F               	movlw	15
   478  000124  0100               	movlb	0	; () banked
   479  000126  6F7C               	movwf	(main@motorR+5)& (0+255),b
   480                           
   481                           ;main.c: 62: motorR.dir_pin=2;
   482  000128  0E02               	movlw	2
   483  00012A  0100               	movlb	0	; () banked
   484  00012C  6F7D               	movwf	(main@motorR+6)& (0+255),b
   485                           
   486                           ;main.c: 63: motorR.PWMperiod=199;
   487  00012E  0E00               	movlw	0
   488  000130  0100               	movlb	0	; () banked
   489  000132  6F7F               	movwf	(main@motorR+8)& (0+255),b
   490  000134  0EC7               	movlw	199
   491  000136  6F7E               	movwf	(main@motorR+7)& (0+255),b
   492                           
   493                           ;main.c: 65: OSCCON = 0x72;
   494  000138  0E72               	movlw	114
   495  00013A  6ED3               	movwf	4051,c	;volatile
   496  00013C                     l49:
   497  00013C  B4D3               	btfsc	4051,2,c	;volatile
   498  00013E  D072               	goto	l1656
   499  000140  D7FD               	goto	l49
   500  000142                     l1618:
   501                           
   502                           ;main.c: 73: initMotorPWM();
   503  000142  ECC6  F003         	call	_initMotorPWM	;wreg free
   504                           
   505                           ;main.c: 74: initRFID();
   506  000146  EC05  F004         	call	_initRFID	;wreg free
   507                           
   508                           ;main.c: 75: initIR();
   509  00014A  EC23  F004         	call	_initIR	;wreg free
   510                           
   511                           ;main.c: 77: mode = 1;
   512  00014E  0E01               	movlw	1
   513  000150  0100               	movlb	0	; () banked
   514  000152  6F6C               	movwf	main@mode& (0+255),b
   515                           
   516                           ;main.c: 78: break;
   517  000154  D067               	goto	l1656
   518  000156                     l1622:
   519                           
   520                           ; BSR set to: 0
   521                           ;main.c: 95: ScanWithRange(&motorL, &motorR, 3);
   522  000156  0E6E               	movlw	low main@motorL
   523  000158  6E2F               	movwf	ScanWithRange@mL,c
   524  00015A  0E00               	movlw	high main@motorL
   525  00015C  6E30               	movwf	ScanWithRange@mL+1,c
   526  00015E  0E77               	movlw	low main@motorR
   527  000160  6E31               	movwf	ScanWithRange@mR,c
   528  000162  0E00               	movlw	high main@motorR
   529  000164  6E32               	movwf	ScanWithRange@mR+1,c
   530  000166  0E03               	movlw	3
   531  000168  6E33               	movwf	ScanWithRange@tenth_seconds,c
   532  00016A  ECB9  F001         	call	_ScanWithRange	;wreg free
   533                           
   534                           ;main.c: 97: delay_s(4);
   535  00016E  0E04               	movlw	4
   536  000170  EC8E  F003         	call	_delay_s
   537                           
   538                           ;main.c: 108: break;
   539  000174  D057               	goto	l1656
   540  000176                     l1626:
   541                           
   542                           ;main.c: 113: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   543  000176  0E03               	movlw	3
   544  000178  0100               	movlb	0	; () banked
   545  00017A  198F               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   546  00017C  A4D8               	btfss	status,2,c
   547  00017E  D002               	goto	u850
   548  000180  0E01               	movlw	1
   549  000182  D001               	goto	u852
   550  000184                     u850:
   551  000184  0E00               	movlw	0
   552  000186                     u852:
   553  000186  6E34               	movwf	??_main& (0+255),c
   554  000188  0E02               	movlw	2
   555  00018A  0100               	movlb	0	; () banked
   556  00018C  1980               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   557  00018E  A4D8               	btfss	status,2,c
   558  000190  D002               	goto	u860
   559  000192  0E01               	movlw	1
   560  000194  D001               	goto	u862
   561  000196                     u860:
   562  000196  0E00               	movlw	0
   563  000198                     u862:
   564  000198  1434               	andwf	??_main,w,c
   565  00019A  A0E8               	btfss	wreg,0,c
   566  00019C  D043               	goto	l1656
   567                           
   568                           ; BSR set to: 0
   569                           ;main.c: 114: if (VerifySignal(ReceivedString)){
   570  00019E  0E80               	movlw	low _ReceivedString
   571  0001A0  6E0F               	movwf	VerifySignal@Signal,c
   572  0001A2  0E00               	movlw	high _ReceivedString
   573  0001A4  6E10               	movwf	VerifySignal@Signal+1,c
   574  0001A6  EC28  F002         	call	_VerifySignal	;wreg free
   575  0001AA  0900               	iorlw	0
   576  0001AC  B4D8               	btfsc	status,2,c
   577  0001AE  D03A               	goto	l1656
   578                           
   579                           ;main.c: 116: for (i=0; i<10; i++){
   580  0001B0  0E00               	movlw	0
   581  0001B2  0100               	movlb	0	; () banked
   582  0001B4  6F6D               	movwf	main@i& (0+255),b
   583  0001B6                     l1632:
   584                           
   585                           ; BSR set to: 0
   586  0001B6  0E09               	movlw	9
   587  0001B8  0100               	movlb	0	; () banked
   588  0001BA  656D               	cpfsgt	main@i& (0+255),b
   589  0001BC  D001               	goto	l1636
   590  0001BE  D01C               	goto	l1642
   591  0001C0                     l1636:
   592                           
   593                           ; BSR set to: 0
   594                           ;main.c: 117: Message[i] = ReceivedString[i+1];
   595  0001C0  0100               	movlb	0	; () banked
   596  0001C2  516D               	movf	main@i& (0+255),w,b
   597  0001C4  6E34               	movwf	??_main& (0+255),c
   598  0001C6  6A35               	clrf	(??_main+1)& (0+255),c
   599  0001C8  0E01               	movlw	1
   600  0001CA  2634               	addwf	??_main,f,c
   601  0001CC  0E00               	movlw	0
   602  0001CE  2235               	addwfc	??_main+1,f,c
   603  0001D0  0E80               	movlw	low _ReceivedString
   604  0001D2  2434               	addwf	??_main,w,c
   605  0001D4  6ED9               	movwf	fsr2l,c
   606  0001D6  0E00               	movlw	high _ReceivedString
   607  0001D8  2035               	addwfc	??_main+1,w,c
   608  0001DA  6EDA               	movwf	fsr2h,c
   609  0001DC  0100               	movlb	0	; () banked
   610  0001DE  516D               	movf	main@i& (0+255),w,b
   611  0001E0  0D01               	mullw	1
   612  0001E2  0E60               	movlw	low main@Message
   613  0001E4  24F3               	addwf	prodl,w,c
   614  0001E6  6EE1               	movwf	fsr1l,c
   615  0001E8  0E00               	movlw	high main@Message
   616  0001EA  20F4               	addwfc	prodh,w,c
   617  0001EC  6EE2               	movwf	fsr1h,c
   618  0001EE  CFDF FFE7          	movff	indf2,indf1
   619                           
   620                           ; BSR set to: 0
   621  0001F2  0100               	movlb	0	; () banked
   622  0001F4  2B6D               	incf	main@i& (0+255),f,b
   623  0001F6  D7DF               	goto	l1632
   624  0001F8                     l1642:
   625                           
   626                           ; BSR set to: 0
   627                           ;main.c: 118: }
   628                           ;main.c: 120: for (i=0; i<16; i++) {
   629  0001F8  0E00               	movlw	0
   630  0001FA  0100               	movlb	0	; () banked
   631  0001FC  6F6D               	movwf	main@i& (0+255),b
   632  0001FE                     l1644:
   633                           
   634                           ; BSR set to: 0
   635  0001FE  0E0F               	movlw	15
   636  000200  0100               	movlb	0	; () banked
   637  000202  656D               	cpfsgt	main@i& (0+255),b
   638  000204  D001               	goto	l1648
   639  000206  D00E               	goto	l1656
   640  000208                     l1648:
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 121: ReceivedString[i]=0;
   644  000208  0100               	movlb	0	; () banked
   645  00020A  516D               	movf	main@i& (0+255),w,b
   646  00020C  0D01               	mullw	1
   647  00020E  0E80               	movlw	low _ReceivedString
   648  000210  24F3               	addwf	prodl,w,c
   649  000212  6ED9               	movwf	fsr2l,c
   650  000214  0E00               	movlw	high _ReceivedString
   651  000216  20F4               	addwfc	prodh,w,c
   652  000218  6EDA               	movwf	fsr2h,c
   653  00021A  0E00               	movlw	0
   654  00021C  6EDF               	movwf	indf2,c
   655                           
   656                           ; BSR set to: 0
   657  00021E  0100               	movlb	0	; () banked
   658  000220  2B6D               	incf	main@i& (0+255),f,b
   659  000222  D7ED               	goto	l1644
   660  000224                     l1656:
   661  000224  0100               	movlb	0	; () banked
   662  000226  516C               	movf	main@mode& (0+255),w,b
   663                           
   664                           ; Switch size 1, requested type "space"
   665                           ; Number of cases is 4, Range of values is 0 to 3
   666                           ; switch strategies available:
   667                           ; Name         Instructions Cycles
   668                           ; simple_byte           13     7 (average)
   669                           ;	Chosen strategy is simple_byte
   670  000228  0A00               	xorlw	0	; case 0
   671  00022A  B4D8               	btfsc	status,2,c
   672  00022C  D78A               	goto	l1618
   673  00022E  0A01               	xorlw	1	; case 1
   674  000230  B4D8               	btfsc	status,2,c
   675  000232  D791               	goto	l1622
   676  000234  0A03               	xorlw	3	; case 2
   677  000236  B4D8               	btfsc	status,2,c
   678  000238  D79E               	goto	l1626
   679  00023A  0A01               	xorlw	1	; case 3
   680                           
   681                           ; BSR set to: 0
   682                           
   683                           ; BSR set to: 0
   684  00023C  D7F3               	goto	l1656
   685  00023E                     __end_of_main:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           prodh	equ	0xFF4
   689                           prodl	equ	0xFF3
   690                           intcon	equ	0xFF2
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           indf1	equ	0xFE7
   694                           fsr1h	equ	0xFE2
   695                           fsr1l	equ	0xFE1
   696                           indf2	equ	0xFDF
   697                           fsr2h	equ	0xFDA
   698                           fsr2l	equ	0xFD9
   699                           status	equ	0xFD8
   700                           
   701 ;; *************** function _initRFID *****************
   702 ;; Defined at:
   703 ;;		line 5 in file "RFID_Reader.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;		None               void
   710 ;; Registers used:
   711 ;;		wreg, status,2
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   717 ;;      Params:         0       0       0       0
   718 ;;      Locals:         1       0       0       0
   719 ;;      Temps:          0       0       0       0
   720 ;;      Totals:         1       0       0       0
   721 ;;Total ram usage:        1 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732  00080A                     __ptext1:
   733                           	opt stack 0
   734  00080A                     _initRFID:
   735                           	opt stack 29
   736                           
   737                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   738                           
   739                           ; BSR set to: 0
   740                           ;incstack = 0
   741  00080A  0E01               	movlw	1
   742  00080C  6E0F               	movwf	_initRFID$1273,c
   743  00080E  5094               	movf	3988,w,c	;volatile
   744  000810  C00F  FF94         	movff	_initRFID$1273,3988	;volatile
   745                           
   746                           ;RFID_Reader.c: 10: SPBRG=205;
   747  000814  0ECD               	movlw	205
   748  000816  6EAF               	movwf	4015,c	;volatile
   749                           
   750                           ;RFID_Reader.c: 11: SPBRGH=0;
   751  000818  0E00               	movlw	0
   752  00081A  6EB0               	movwf	4016,c	;volatile
   753                           
   754                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   755  00081C  86AA               	bsf	4010,3,c	;volatile
   756                           
   757                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   758  00081E  84AC               	bsf	4012,2,c	;volatile
   759                           
   760                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   761  000820  88AB               	bsf	4011,4,c	;volatile
   762                           
   763                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   764  000822  8EAB               	bsf	4011,7,c	;volatile
   765                           
   766                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   767  000824  98AC               	bcf	4012,4,c	;volatile
   768                           
   769                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   770  000826  9CAB               	bcf	4011,6,c	;volatile
   771  000828  0012               	return		;funcret
   772  00082A                     __end_of_initRFID:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           prodh	equ	0xFF4
   776                           prodl	equ	0xFF3
   777                           intcon	equ	0xFF2
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           indf1	equ	0xFE7
   781                           fsr1h	equ	0xFE2
   782                           fsr1l	equ	0xFE1
   783                           indf2	equ	0xFDF
   784                           fsr2h	equ	0xFDA
   785                           fsr2l	equ	0xFD9
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _initMotorPWM *****************
   789 ;; Defined at:
   790 ;;		line 4 in file "dc_motor.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;		None               void
   797 ;; Registers used:
   798 ;;		wreg, status,2
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   804 ;;      Params:         0       0       0       0
   805 ;;      Locals:         0       0       0       0
   806 ;;      Temps:          0       0       0       0
   807 ;;      Totals:         0       0       0       0
   808 ;;Total ram usage:        0 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    1
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text2
   819  00078C                     __ptext2:
   820                           	opt stack 0
   821  00078C                     _initMotorPWM:
   822                           	opt stack 29
   823                           
   824                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   825                           
   826                           ;incstack = 0
   827  00078C  0E00               	movlw	0
   828  00078E  6E7F               	movwf	3967,c	;volatile
   829                           
   830                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   831  000790  0E80               	movlw	128
   832  000792  6E7E               	movwf	3966,c	;volatile
   833                           
   834                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   835  000794  0E6F               	movlw	111
   836  000796  6E6F               	movwf	3951,c	;volatile
   837                           
   838                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   839  000798  0E00               	movlw	0
   840  00079A  6E6E               	movwf	3950,c	;volatile
   841                           
   842                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   843  00079C  0EC7               	movlw	199
   844  00079E  6E7B               	movwf	3963,c	;volatile
   845                           
   846                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   847  0007A0  0E00               	movlw	0
   848  0007A2  6E7A               	movwf	3962,c	;volatile
   849                           
   850                           ;dc_motor.c: 13: PDC0L = 0<<2;
   851  0007A4  0E00               	movlw	0
   852  0007A6  6E79               	movwf	3961,c	;volatile
   853                           
   854                           ;dc_motor.c: 14: PDC0H = 0>>6;
   855  0007A8  0E00               	movlw	0
   856  0007AA  6E78               	movwf	3960,c	;volatile
   857                           
   858                           ;dc_motor.c: 15: PDC1L = 0<<2;
   859  0007AC  0E00               	movlw	0
   860  0007AE  6E77               	movwf	3959,c	;volatile
   861                           
   862                           ;dc_motor.c: 16: PDC1H = 0>>6;
   863  0007B0  0E00               	movlw	0
   864  0007B2  6E76               	movwf	3958,c	;volatile
   865                           
   866                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   867  0007B4  9093               	bcf	3987,0,c	;volatile
   868                           
   869                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   870  0007B6  9293               	bcf	3987,1,c	;volatile
   871                           
   872                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   873  0007B8  9493               	bcf	3987,2,c	;volatile
   874                           
   875                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   876  0007BA  9693               	bcf	3987,3,c	;volatile
   877  0007BC  0012               	return		;funcret
   878  0007BE                     __end_of_initMotorPWM:
   879                           	opt stack 0
   880                           tblptru	equ	0xFF8
   881                           prodh	equ	0xFF4
   882                           prodl	equ	0xFF3
   883                           intcon	equ	0xFF2
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           indf1	equ	0xFE7
   887                           fsr1h	equ	0xFE2
   888                           fsr1l	equ	0xFE1
   889                           indf2	equ	0xFDF
   890                           fsr2h	equ	0xFDA
   891                           fsr2l	equ	0xFD9
   892                           status	equ	0xFD8
   893                           
   894 ;; *************** function _initIR *****************
   895 ;; Defined at:
   896 ;;		line 30 in file "IR_Reading.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;		None               void
   903 ;; Registers used:
   904 ;;		wreg, status,2
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   910 ;;      Params:         0       0       0       0
   911 ;;      Locals:         0       0       0       0
   912 ;;      Temps:          0       0       0       0
   913 ;;      Totals:         0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    1
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text3
   925  000846                     __ptext3:
   926                           	opt stack 0
   927  000846                     _initIR:
   928                           	opt stack 29
   929                           
   930                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   931                           
   932                           ;incstack = 0
   933  000846  9489               	bcf	3977,2,c	;volatile
   934                           
   935                           ;IR_Reading.c: 38: TRISAbits.RA2=1;
   936  000848  8492               	bsf	3986,2,c	;volatile
   937                           
   938                           ;IR_Reading.c: 40: ANSEL0bits.ANS2=0;
   939  00084A  94B8               	bcf	4024,2,c	;volatile
   940                           
   941                           ;IR_Reading.c: 45: CAP1CON=0b00000110;
   942  00084C  0E06               	movlw	6
   943  00084E  6E63               	movwf	3939,c	;volatile
   944                           
   945                           ;IR_Reading.c: 48: TRISEbits.RE0=0;
   946  000850  9096               	bcf	3990,0,c	;volatile
   947                           
   948                           ;IR_Reading.c: 51: TRISEbits.RE1=0;
   949  000852  9296               	bcf	3990,1,c	;volatile
   950                           
   951                           ;IR_Reading.c: 61: T5CON=0b01011001;
   952  000854  0E59               	movlw	89
   953  000856  6EB7               	movwf	4023,c	;volatile
   954  000858  0012               	return		;funcret
   955  00085A                     __end_of_initIR:
   956                           	opt stack 0
   957                           tblptru	equ	0xFF8
   958                           prodh	equ	0xFF4
   959                           prodl	equ	0xFF3
   960                           intcon	equ	0xFF2
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           indf1	equ	0xFE7
   964                           fsr1h	equ	0xFE2
   965                           fsr1l	equ	0xFE1
   966                           indf2	equ	0xFDF
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _delay_s *****************
   972 ;; Defined at:
   973 ;;		line 10 in file "Movement.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  seconds         1    wreg     unsigned char 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  seconds         1   15[COMRAM] unsigned char 
   978 ;;  i               2   16[COMRAM] unsigned int 
   979 ;; Return value:  Size  Location     Type
   980 ;;		None               void
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   988 ;;      Params:         0       0       0       0
   989 ;;      Locals:         3       0       0       0
   990 ;;      Temps:          1       0       0       0
   991 ;;      Totals:         4       0       0       0
   992 ;;Total ram usage:        4 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;;		_ScanIR
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text4
  1004  00071C                     __ptext4:
  1005                           	opt stack 0
  1006  00071C                     _delay_s:
  1007                           	opt stack 29
  1008                           
  1009                           ;incstack = 0
  1010                           ;delay_s@seconds stored from wreg
  1011  00071C  6E10               	movwf	delay_s@seconds,c
  1012                           
  1013                           ;Movement.c: 11: unsigned int i=0;
  1014  00071E  0E00               	movlw	0
  1015  000720  6E12               	movwf	delay_s@i+1,c
  1016  000722  0E00               	movlw	0
  1017  000724  6E11               	movwf	delay_s@i,c
  1018                           
  1019                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1020  000726  0E00               	movlw	0
  1021  000728  6E12               	movwf	delay_s@i+1,c
  1022  00072A  0E01               	movlw	1
  1023  00072C  6E11               	movwf	delay_s@i,c
  1024  00072E  D009               	goto	l1558
  1025  000730                     l1554:
  1026                           
  1027                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1028  000730  0E82               	movlw	130
  1029  000732  6E0F               	movwf	??_delay_s& (0+255),c
  1030  000734  0EDE               	movlw	222
  1031  000736                     u957:
  1032  000736  2EE8               	decfsz	wreg,f,c
  1033  000738  D7FE               	goto	u957
  1034  00073A  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1035  00073C  D7FC               	goto	u957
  1036  00073E  4A11               	infsnz	delay_s@i,f,c
  1037  000740  2A12               	incf	delay_s@i+1,f,c
  1038  000742                     l1558:
  1039  000742  5010               	movf	delay_s@seconds,w,c
  1040  000744  0D14               	mullw	20
  1041  000746  5011               	movf	delay_s@i,w,c
  1042  000748  5CF3               	subwf	prodl,w,c
  1043  00074A  5012               	movf	delay_s@i+1,w,c
  1044  00074C  58F4               	subwfb	prodh,w,c
  1045  00074E  A0D8               	btfss	status,0,c
  1046  000750  0012               	return	
  1047  000752  D7EE               	goto	l1554
  1048  000754                     __end_of_delay_s:
  1049                           	opt stack 0
  1050                           tblptru	equ	0xFF8
  1051                           prodh	equ	0xFF4
  1052                           prodl	equ	0xFF3
  1053                           intcon	equ	0xFF2
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           indf1	equ	0xFE7
  1057                           fsr1h	equ	0xFE2
  1058                           fsr1l	equ	0xFE1
  1059                           indf2	equ	0xFDF
  1060                           fsr2h	equ	0xFDA
  1061                           fsr2l	equ	0xFD9
  1062                           status	equ	0xFD8
  1063                           
  1064 ;; *************** function _VerifySignal *****************
  1065 ;; Defined at:
  1066 ;;		line 56 in file "RFID_Reader.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1069 ;;		 -> ReceivedString(16), 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  hexByte         2   23[COMRAM] unsigned int 
  1072 ;;  i               1   25[COMRAM] unsigned char 
  1073 ;;  checksum        1   22[COMRAM] unsigned char 
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      unsigned char 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1083 ;;      Params:         2       0       0       0
  1084 ;;      Locals:         4       0       0       0
  1085 ;;      Temps:          6       0       0       0
  1086 ;;      Totals:        12       0       0       0
  1087 ;;Total ram usage:       12 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    1
  1090 ;; This function calls:
  1091 ;;		Nothing
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text5
  1098  000450                     __ptext5:
  1099                           	opt stack 0
  1100  000450                     _VerifySignal:
  1101                           	opt stack 29
  1102                           
  1103                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1104                           
  1105                           ;incstack = 0
  1106  000450  0E00               	movlw	0
  1107  000452  6E17               	movwf	VerifySignal@checksum,c
  1108                           
  1109                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1110  000454  0E00               	movlw	0
  1111  000456  6E19               	movwf	VerifySignal@hexByte+1,c
  1112  000458  0E00               	movlw	0
  1113  00045A  6E18               	movwf	VerifySignal@hexByte,c
  1114                           
  1115                           ;RFID_Reader.c: 59: unsigned char i=0;
  1116  00045C  0E00               	movlw	0
  1117  00045E  6E1A               	movwf	VerifySignal@i,c
  1118                           
  1119                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1120  000460  EE20 F004          	lfsr	2,4
  1121  000464  500F               	movf	VerifySignal@Signal,w,c
  1122  000466  26D9               	addwf	fsr2l,f,c
  1123  000468  5010               	movf	VerifySignal@Signal+1,w,c
  1124  00046A  22DA               	addwfc	fsr2h,f,c
  1125  00046C  50DF               	movf	indf2,w,c
  1126  00046E  6E11               	movwf	??_VerifySignal& (0+255),c
  1127  000470  EE20 F003          	lfsr	2,3
  1128  000474  500F               	movf	VerifySignal@Signal,w,c
  1129  000476  26D9               	addwf	fsr2l,f,c
  1130  000478  5010               	movf	VerifySignal@Signal+1,w,c
  1131  00047A  22DA               	addwfc	fsr2h,f,c
  1132  00047C  50DF               	movf	indf2,w,c
  1133  00047E  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1134  000480  5012               	movf	??_VerifySignal+1,w,c
  1135  000482  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1136  000484  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1137  000486  5011               	movf	??_VerifySignal,w,c
  1138  000488  2413               	addwf	??_VerifySignal+2,w,c
  1139  00048A  6E18               	movwf	VerifySignal@hexByte,c
  1140  00048C  0E00               	movlw	0
  1141  00048E  2014               	addwfc	??_VerifySignal+3,w,c
  1142  000490  6E19               	movwf	VerifySignal@hexByte+1,c
  1143                           
  1144                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1145  000492  EE20 F002          	lfsr	2,2
  1146  000496  500F               	movf	VerifySignal@Signal,w,c
  1147  000498  26D9               	addwf	fsr2l,f,c
  1148  00049A  5010               	movf	VerifySignal@Signal+1,w,c
  1149  00049C  22DA               	addwfc	fsr2h,f,c
  1150  00049E  50DF               	movf	indf2,w,c
  1151  0004A0  1818               	xorwf	VerifySignal@hexByte,w,c
  1152  0004A2  6E17               	movwf	VerifySignal@checksum,c
  1153                           
  1154                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1155  0004A4  0E05               	movlw	5
  1156  0004A6  6E1A               	movwf	VerifySignal@i,c
  1157  0004A8                     l1566:
  1158  0004A8  0E09               	movlw	9
  1159  0004AA  641A               	cpfsgt	VerifySignal@i,c
  1160  0004AC  D001               	goto	l1570
  1161  0004AE  D028               	goto	l1578
  1162  0004B0                     l1570:
  1163                           
  1164                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1165  0004B0  501A               	movf	VerifySignal@i,w,c
  1166  0004B2  6E11               	movwf	??_VerifySignal& (0+255),c
  1167  0004B4  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1168  0004B6  0E01               	movlw	1
  1169  0004B8  2611               	addwf	??_VerifySignal,f,c
  1170  0004BA  0E00               	movlw	0
  1171  0004BC  2212               	addwfc	??_VerifySignal+1,f,c
  1172  0004BE  5011               	movf	??_VerifySignal,w,c
  1173  0004C0  240F               	addwf	VerifySignal@Signal,w,c
  1174  0004C2  6ED9               	movwf	fsr2l,c
  1175  0004C4  5012               	movf	??_VerifySignal+1,w,c
  1176  0004C6  2010               	addwfc	VerifySignal@Signal+1,w,c
  1177  0004C8  6EDA               	movwf	fsr2h,c
  1178  0004CA  50DF               	movf	indf2,w,c
  1179  0004CC  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1180  0004CE  501A               	movf	VerifySignal@i,w,c
  1181  0004D0  0D01               	mullw	1
  1182  0004D2  50F3               	movf	prodl,w,c
  1183  0004D4  240F               	addwf	VerifySignal@Signal,w,c
  1184  0004D6  6ED9               	movwf	fsr2l,c
  1185  0004D8  50F4               	movf	prodh,w,c
  1186  0004DA  2010               	addwfc	VerifySignal@Signal+1,w,c
  1187  0004DC  6EDA               	movwf	fsr2h,c
  1188  0004DE  50DF               	movf	indf2,w,c
  1189  0004E0  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1190  0004E2  5014               	movf	??_VerifySignal+3,w,c
  1191  0004E4  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1192  0004E6  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1193  0004E8  5013               	movf	??_VerifySignal+2,w,c
  1194  0004EA  2415               	addwf	??_VerifySignal+4,w,c
  1195  0004EC  6E18               	movwf	VerifySignal@hexByte,c
  1196  0004EE  0E00               	movlw	0
  1197  0004F0  2016               	addwfc	??_VerifySignal+5,w,c
  1198  0004F2  6E19               	movwf	VerifySignal@hexByte+1,c
  1199                           
  1200                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1201  0004F4  5017               	movf	VerifySignal@checksum,w,c
  1202  0004F6  1818               	xorwf	VerifySignal@hexByte,w,c
  1203  0004F8  6E17               	movwf	VerifySignal@checksum,c
  1204  0004FA  0E02               	movlw	2
  1205  0004FC  261A               	addwf	VerifySignal@i,f,c
  1206  0004FE  D7D4               	goto	l1566
  1207  000500                     l1578:
  1208                           
  1209                           ;RFID_Reader.c: 69: }
  1210                           ;RFID_Reader.c: 72: return 1;
  1211  000500  0E01               	movlw	1
  1212  000502  0012               	return	
  1213  000504                     __end_of_VerifySignal:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf1	equ	0xFE7
  1222                           fsr1h	equ	0xFE2
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           fsr2h	equ	0xFDA
  1226                           fsr2l	equ	0xFD9
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _ScanWithRange *****************
  1230 ;; Defined at:
  1231 ;;		line 75 in file "Movement.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1234 ;;		 -> main@motorL(9), 
  1235 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1236 ;;		 -> main@motorR(9), 
  1237 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;		None               void
  1242 ;; Registers used:
  1243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1249 ;;      Params:         5       0       0       0
  1250 ;;      Locals:         0       0       0       0
  1251 ;;      Temps:          0       0       0       0
  1252 ;;      Totals:         5       0       0       0
  1253 ;;Total ram usage:        5 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    5
  1256 ;; This function calls:
  1257 ;;		_delay_tenth_s
  1258 ;;		_enableSensor
  1259 ;;		_stop
  1260 ;;		_turnLeft
  1261 ;;		_turnRight
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text6
  1268  000372                     __ptext6:
  1269                           	opt stack 0
  1270  000372                     _ScanWithRange:
  1271                           	opt stack 25
  1272                           
  1273                           ;Movement.c: 78: enableSensor(0, 1);
  1274                           
  1275                           ;incstack = 0
  1276  000372  0E01               	movlw	1
  1277  000374  6E0F               	movwf	enableSensor@status,c
  1278  000376  0E00               	movlw	0
  1279  000378  ECF2  F003         	call	_enableSensor
  1280                           
  1281                           ;Movement.c: 79: enableSensor(1, 1);
  1282  00037C  0E01               	movlw	1
  1283  00037E  6E0F               	movwf	enableSensor@status,c
  1284  000380  0E01               	movlw	1
  1285  000382  ECF2  F003         	call	_enableSensor
  1286                           
  1287                           ;Movement.c: 82: stop(mL,mR);
  1288  000386  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1289  00038A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1290  00038E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1291  000392  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1292  000396  EC82  F002         	call	_stop	;wreg free
  1293                           
  1294                           ;Movement.c: 83: delay_tenth_s(tenth_seconds);
  1295  00039A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1296  00039C  ECAA  F003         	call	_delay_tenth_s
  1297                           
  1298                           ;Movement.c: 86: turnLeft(mL,mR);
  1299  0003A0  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1300  0003A4  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1301  0003A8  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1302  0003AC  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1303  0003B0  EC69  F003         	call	_turnLeft	;wreg free
  1304                           
  1305                           ;Movement.c: 87: delay_tenth_s(tenth_seconds);
  1306  0003B4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1307  0003B6  ECAA  F003         	call	_delay_tenth_s
  1308                           
  1309                           ;Movement.c: 90: stop(mL,mR);
  1310  0003BA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1311  0003BE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1312  0003C2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1313  0003C6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1314  0003CA  EC82  F002         	call	_stop	;wreg free
  1315                           
  1316                           ;Movement.c: 91: delay_tenth_s(tenth_seconds);
  1317  0003CE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1318  0003D0  ECAA  F003         	call	_delay_tenth_s
  1319                           
  1320                           ;Movement.c: 94: turnRight(mL,mR);
  1321  0003D4  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1322  0003D8  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1323  0003DC  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1324  0003E0  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1325  0003E4  EC44  F003         	call	_turnRight	;wreg free
  1326                           
  1327                           ;Movement.c: 96: delay_tenth_s(2*tenth_seconds);
  1328  0003E8  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1329  0003EA  0D02               	mullw	2
  1330  0003EC  50F3               	movf	prodl,w,c
  1331  0003EE  ECAA  F003         	call	_delay_tenth_s
  1332                           
  1333                           ;Movement.c: 99: stop(mL,mR);
  1334  0003F2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1335  0003F6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1336  0003FA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1337  0003FE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1338  000402  EC82  F002         	call	_stop	;wreg free
  1339                           
  1340                           ;Movement.c: 100: delay_tenth_s(tenth_seconds);
  1341  000406  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1342  000408  ECAA  F003         	call	_delay_tenth_s
  1343                           
  1344                           ;Movement.c: 103: turnLeft(mL,mR);
  1345  00040C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1346  000410  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1347  000414  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1348  000418  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1349  00041C  EC69  F003         	call	_turnLeft	;wreg free
  1350                           
  1351                           ;Movement.c: 104: delay_tenth_s(tenth_seconds);
  1352  000420  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1353  000422  ECAA  F003         	call	_delay_tenth_s
  1354                           
  1355                           ;Movement.c: 106: stop(mL,mR);
  1356  000426  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1357  00042A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1358  00042E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1359  000432  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1360  000436  EC82  F002         	call	_stop	;wreg free
  1361                           
  1362                           ;Movement.c: 109: enableSensor(0, 0);
  1363  00043A  0E00               	movlw	0
  1364  00043C  6E0F               	movwf	enableSensor@status,c
  1365  00043E  0E00               	movlw	0
  1366  000440  ECF2  F003         	call	_enableSensor
  1367                           
  1368                           ;Movement.c: 110: enableSensor(1, 0);
  1369  000444  0E00               	movlw	0
  1370  000446  6E0F               	movwf	enableSensor@status,c
  1371  000448  0E01               	movlw	1
  1372  00044A  ECF2  F003         	call	_enableSensor
  1373  00044E  0012               	return		;funcret
  1374  000450                     __end_of_ScanWithRange:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           prodh	equ	0xFF4
  1378                           prodl	equ	0xFF3
  1379                           intcon	equ	0xFF2
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           indf1	equ	0xFE7
  1383                           fsr1h	equ	0xFE2
  1384                           fsr1l	equ	0xFE1
  1385                           indf2	equ	0xFDF
  1386                           fsr2h	equ	0xFDA
  1387                           fsr2l	equ	0xFD9
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _turnRight *****************
  1391 ;; Defined at:
  1392 ;;		line 98 in file "dc_motor.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1395 ;;		 -> main@motorL(9), 
  1396 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1397 ;;		 -> main@motorR(9), 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;		None               void
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1409 ;;      Params:         4       0       0       0
  1410 ;;      Locals:         0       0       0       0
  1411 ;;      Temps:          0       0       0       0
  1412 ;;      Totals:         4       0       0       0
  1413 ;;Total ram usage:        4 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    4
  1416 ;; This function calls:
  1417 ;;		_fullSpeedAhead
  1418 ;;		_stop
  1419 ;; This function is called by:
  1420 ;;		_ScanWithRange
  1421 ;;		_ScanIR
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text7
  1426  000688                     __ptext7:
  1427                           	opt stack 0
  1428  000688                     _turnRight:
  1429                           	opt stack 25
  1430                           
  1431                           ;dc_motor.c: 100: stop(mL, mR);
  1432                           
  1433                           ;incstack = 0
  1434  000688  C02B  F026         	movff	turnRight@mL,stop@mL
  1435  00068C  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1436  000690  C02D  F028         	movff	turnRight@mR,stop@mR
  1437  000694  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1438  000698  EC82  F002         	call	_stop	;wreg free
  1439                           
  1440                           ;dc_motor.c: 102: mL->direction=1;
  1441  00069C  EE20 F001          	lfsr	2,1
  1442  0006A0  502B               	movf	turnRight@mL,w,c
  1443  0006A2  26D9               	addwf	fsr2l,f,c
  1444  0006A4  502C               	movf	turnRight@mL+1,w,c
  1445  0006A6  22DA               	addwfc	fsr2h,f,c
  1446  0006A8  0E01               	movlw	1
  1447  0006AA  6EDF               	movwf	indf2,c
  1448                           
  1449                           ;dc_motor.c: 103: mR->direction=0;
  1450  0006AC  EE20 F001          	lfsr	2,1
  1451  0006B0  502D               	movf	turnRight@mR,w,c
  1452  0006B2  26D9               	addwf	fsr2l,f,c
  1453  0006B4  502E               	movf	turnRight@mR+1,w,c
  1454  0006B6  22DA               	addwfc	fsr2h,f,c
  1455  0006B8  0E00               	movlw	0
  1456  0006BA  6EDF               	movwf	indf2,c
  1457                           
  1458                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1459  0006BC  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1460  0006C0  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1461  0006C4  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1462  0006C8  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1463  0006CC  EC0C  F003         	call	_fullSpeedAhead	;wreg free
  1464  0006D0  0012               	return		;funcret
  1465  0006D2                     __end_of_turnRight:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           prodh	equ	0xFF4
  1469                           prodl	equ	0xFF3
  1470                           intcon	equ	0xFF2
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           indf1	equ	0xFE7
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _turnLeft *****************
  1482 ;; Defined at:
  1483 ;;		line 87 in file "dc_motor.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1486 ;;		 -> main@motorL(9), 
  1487 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1488 ;;		 -> main@motorR(9), 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;		None               void
  1493 ;; Registers used:
  1494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1500 ;;      Params:         4       0       0       0
  1501 ;;      Locals:         0       0       0       0
  1502 ;;      Temps:          0       0       0       0
  1503 ;;      Totals:         4       0       0       0
  1504 ;;Total ram usage:        4 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    4
  1507 ;; This function calls:
  1508 ;;		_fullSpeedAhead
  1509 ;;		_stop
  1510 ;; This function is called by:
  1511 ;;		_ScanWithRange
  1512 ;;		_ScanIR
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text8
  1517  0006D2                     __ptext8:
  1518                           	opt stack 0
  1519  0006D2                     _turnLeft:
  1520                           	opt stack 25
  1521                           
  1522                           ;dc_motor.c: 89: stop(mL, mR);
  1523                           
  1524                           ;incstack = 0
  1525  0006D2  C02B  F026         	movff	turnLeft@mL,stop@mL
  1526  0006D6  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1527  0006DA  C02D  F028         	movff	turnLeft@mR,stop@mR
  1528  0006DE  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1529  0006E2  EC82  F002         	call	_stop	;wreg free
  1530                           
  1531                           ;dc_motor.c: 91: mL->direction=0;
  1532  0006E6  EE20 F001          	lfsr	2,1
  1533  0006EA  502B               	movf	turnLeft@mL,w,c
  1534  0006EC  26D9               	addwf	fsr2l,f,c
  1535  0006EE  502C               	movf	turnLeft@mL+1,w,c
  1536  0006F0  22DA               	addwfc	fsr2h,f,c
  1537  0006F2  0E00               	movlw	0
  1538  0006F4  6EDF               	movwf	indf2,c
  1539                           
  1540                           ;dc_motor.c: 92: mR->direction=1;
  1541  0006F6  EE20 F001          	lfsr	2,1
  1542  0006FA  502D               	movf	turnLeft@mR,w,c
  1543  0006FC  26D9               	addwf	fsr2l,f,c
  1544  0006FE  502E               	movf	turnLeft@mR+1,w,c
  1545  000700  22DA               	addwfc	fsr2h,f,c
  1546  000702  0E01               	movlw	1
  1547  000704  6EDF               	movwf	indf2,c
  1548                           
  1549                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1550  000706  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1551  00070A  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1552  00070E  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1553  000712  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1554  000716  EC0C  F003         	call	_fullSpeedAhead	;wreg free
  1555  00071A  0012               	return		;funcret
  1556  00071C                     __end_of_turnLeft:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           intcon	equ	0xFF2
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           indf1	equ	0xFE7
  1565                           fsr1h	equ	0xFE2
  1566                           fsr1l	equ	0xFE1
  1567                           indf2	equ	0xFDF
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _stop *****************
  1573 ;; Defined at:
  1574 ;;		line 67 in file "dc_motor.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1577 ;;		 -> main@motorL(9), 
  1578 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1579 ;;		 -> main@motorR(9), 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;		None
  1582 ;; Return value:  Size  Location     Type
  1583 ;;		None               void
  1584 ;; Registers used:
  1585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1591 ;;      Params:         4       0       0       0
  1592 ;;      Locals:         0       0       0       0
  1593 ;;      Temps:          0       0       0       0
  1594 ;;      Totals:         4       0       0       0
  1595 ;;Total ram usage:        4 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    3
  1598 ;; This function calls:
  1599 ;;		_setMotorPWM
  1600 ;; This function is called by:
  1601 ;;		_turnLeft
  1602 ;;		_turnRight
  1603 ;;		_ScanWithRange
  1604 ;;		_ScanIR
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text9
  1609  000504                     __ptext9:
  1610                           	opt stack 0
  1611  000504                     _stop:
  1612                           	opt stack 25
  1613                           
  1614                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1615                           
  1616                           ;incstack = 0
  1617  000504  D028               	goto	l1430
  1618  000506                     l1416:
  1619                           
  1620                           ;dc_motor.c: 71: if(mL->power>0){
  1621  000506  C026  FFD9         	movff	stop@mL,fsr2l
  1622  00050A  C027  FFDA         	movff	stop@mL+1,fsr2h
  1623  00050E  50DF               	movf	indf2,w,c
  1624  000510  B4D8               	btfsc	status,2,c
  1625  000512  D005               	goto	l1420
  1626                           
  1627                           ;dc_motor.c: 72: mL->power--;
  1628  000514  C026  FFD9         	movff	stop@mL,fsr2l
  1629  000518  C027  FFDA         	movff	stop@mL+1,fsr2h
  1630  00051C  06DF               	decf	indf2,f,c
  1631  00051E                     l1420:
  1632                           
  1633                           ;dc_motor.c: 73: }
  1634                           ;dc_motor.c: 74: if(mR->power>0){
  1635  00051E  C028  FFD9         	movff	stop@mR,fsr2l
  1636  000522  C029  FFDA         	movff	stop@mR+1,fsr2h
  1637  000526  50DF               	movf	indf2,w,c
  1638  000528  B4D8               	btfsc	status,2,c
  1639  00052A  D005               	goto	l1424
  1640                           
  1641                           ;dc_motor.c: 75: mR->power--;
  1642  00052C  C028  FFD9         	movff	stop@mR,fsr2l
  1643  000530  C029  FFDA         	movff	stop@mR+1,fsr2h
  1644  000534  06DF               	decf	indf2,f,c
  1645  000536                     l1424:
  1646                           
  1647                           ;dc_motor.c: 76: }
  1648                           ;dc_motor.c: 77: setMotorPWM(mL);
  1649  000536  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1650  00053A  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1651  00053E  EC1F  F001         	call	_setMotorPWM	;wreg free
  1652                           
  1653                           ;dc_motor.c: 78: setMotorPWM(mR);
  1654  000542  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1655  000546  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1656  00054A  EC1F  F001         	call	_setMotorPWM	;wreg free
  1657                           
  1658                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1659  00054E  0E21               	movlw	33
  1660  000550                     u967:
  1661  000550  2EE8               	decfsz	wreg,f,c
  1662  000552  D7FE               	goto	u967
  1663  000554  F000               	nop	
  1664  000556                     l1430:
  1665  000556  C026  FFD9         	movff	stop@mL,fsr2l
  1666  00055A  C027  FFDA         	movff	stop@mL+1,fsr2h
  1667  00055E  50DF               	movf	indf2,w,c
  1668  000560  A4D8               	btfss	status,2,c
  1669  000562  D7D1               	goto	l1416
  1670  000564  C028  FFD9         	movff	stop@mR,fsr2l
  1671  000568  C029  FFDA         	movff	stop@mR+1,fsr2h
  1672  00056C  50DF               	movf	indf2,w,c
  1673  00056E  A4D8               	btfss	status,2,c
  1674  000570  D7CA               	goto	l1416
  1675                           
  1676                           ;dc_motor.c: 80: }
  1677                           ;dc_motor.c: 81: mL->direction=1;
  1678  000572  EE20 F001          	lfsr	2,1
  1679  000576  5026               	movf	stop@mL,w,c
  1680  000578  26D9               	addwf	fsr2l,f,c
  1681  00057A  5027               	movf	stop@mL+1,w,c
  1682  00057C  22DA               	addwfc	fsr2h,f,c
  1683  00057E  0E01               	movlw	1
  1684  000580  6EDF               	movwf	indf2,c
  1685                           
  1686                           ;dc_motor.c: 82: mR->direction=1;
  1687  000582  EE20 F001          	lfsr	2,1
  1688  000586  5028               	movf	stop@mR,w,c
  1689  000588  26D9               	addwf	fsr2l,f,c
  1690  00058A  5029               	movf	stop@mR+1,w,c
  1691  00058C  22DA               	addwfc	fsr2h,f,c
  1692  00058E  0E01               	movlw	1
  1693  000590  6EDF               	movwf	indf2,c
  1694  000592  0012               	return		;funcret
  1695  000594                     __end_of_stop:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           prodh	equ	0xFF4
  1699                           prodl	equ	0xFF3
  1700                           intcon	equ	0xFF2
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           indf1	equ	0xFE7
  1704                           fsr1h	equ	0xFE2
  1705                           fsr1l	equ	0xFE1
  1706                           indf2	equ	0xFDF
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _fullSpeedAhead *****************
  1712 ;; Defined at:
  1713 ;;		line 108 in file "dc_motor.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1716 ;;		 -> main@motorL(9), 
  1717 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1718 ;;		 -> main@motorR(9), 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;		None               void
  1723 ;; Registers used:
  1724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1730 ;;      Params:         4       0       0       0
  1731 ;;      Locals:         0       0       0       0
  1732 ;;      Temps:          1       0       0       0
  1733 ;;      Totals:         5       0       0       0
  1734 ;;Total ram usage:        5 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    3
  1737 ;; This function calls:
  1738 ;;		_setMotorPWM
  1739 ;; This function is called by:
  1740 ;;		_turnLeft
  1741 ;;		_turnRight
  1742 ;;		_fullSpeedBack
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text10
  1747  000618                     __ptext10:
  1748                           	opt stack 0
  1749  000618                     _fullSpeedAhead:
  1750                           	opt stack 25
  1751                           
  1752                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  1753                           
  1754                           ;incstack = 0
  1755  000618  D028               	goto	l132
  1756  00061A                     l1438:
  1757                           
  1758                           ;dc_motor.c: 112: if(mL->power<100){
  1759  00061A  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1760  00061E  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1761  000622  0E64               	movlw	100
  1762  000624  60DF               	cpfslt	indf2,c
  1763  000626  D005               	goto	l1442
  1764                           
  1765                           ;dc_motor.c: 113: mL->power++;
  1766  000628  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1767  00062C  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1768  000630  2ADF               	incf	indf2,f,c
  1769  000632                     l1442:
  1770                           
  1771                           ;dc_motor.c: 114: }
  1772                           ;dc_motor.c: 115: if(mR->power<100){
  1773  000632  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1774  000636  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1775  00063A  0E64               	movlw	100
  1776  00063C  60DF               	cpfslt	indf2,c
  1777  00063E  D005               	goto	l1446
  1778                           
  1779                           ;dc_motor.c: 116: mR->power++;
  1780  000640  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1781  000644  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1782  000648  2ADF               	incf	indf2,f,c
  1783  00064A                     l1446:
  1784                           
  1785                           ;dc_motor.c: 117: }
  1786                           ;dc_motor.c: 118: setMotorPWM(mL);
  1787  00064A  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1788  00064E  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1789  000652  EC1F  F001         	call	_setMotorPWM	;wreg free
  1790                           
  1791                           ;dc_motor.c: 119: setMotorPWM(mR);
  1792  000656  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1793  00065A  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1794  00065E  EC1F  F001         	call	_setMotorPWM	;wreg free
  1795                           
  1796                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1797  000662  0E21               	movlw	33
  1798  000664                     u977:
  1799  000664  2EE8               	decfsz	wreg,f,c
  1800  000666  D7FE               	goto	u977
  1801  000668  F000               	nop	
  1802  00066A                     l132:
  1803  00066A  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1804  00066E  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1805  000672  0E63               	movlw	99
  1806  000674  64DF               	cpfsgt	indf2,c
  1807  000676  D7D1               	goto	l1438
  1808  000678  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1809  00067C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1810  000680  0E63               	movlw	99
  1811  000682  64DF               	cpfsgt	indf2,c
  1812  000684  D7CA               	goto	l1438
  1813  000686  0012               	return	
  1814  000688                     __end_of_fullSpeedAhead:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           indf1	equ	0xFE7
  1823                           fsr1h	equ	0xFE2
  1824                           fsr1l	equ	0xFE1
  1825                           indf2	equ	0xFDF
  1826                           fsr2h	equ	0xFDA
  1827                           fsr2l	equ	0xFD9
  1828                           status	equ	0xFD8
  1829                           
  1830 ;; *************** function _setMotorPWM *****************
  1831 ;; Defined at:
  1832 ;;		line 26 in file "dc_motor.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1835 ;;		 -> main@motorR(9), main@motorL(9), 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  PWMduty         2   35[COMRAM] int 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;		None               void
  1840 ;; Registers used:
  1841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1847 ;;      Params:         2       0       0       0
  1848 ;;      Locals:         2       0       0       0
  1849 ;;      Temps:          5       0       0       0
  1850 ;;      Totals:         9       0       0       0
  1851 ;;Total ram usage:        9 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    2
  1854 ;; This function calls:
  1855 ;;		___awdiv
  1856 ;;		___wmul
  1857 ;; This function is called by:
  1858 ;;		_stop
  1859 ;;		_fullSpeedAhead
  1860 ;;		_setMotorFullSpeed
  1861 ;;		_stopMotor
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text11
  1866  00023E                     __ptext11:
  1867                           	opt stack 0
  1868  00023E                     _setMotorPWM:
  1869                           	opt stack 25
  1870                           
  1871                           ;dc_motor.c: 28: int PWMduty;
  1872                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1873                           
  1874                           ;incstack = 0
  1875  00023E  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1876  000242  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1877  000246  50DF               	movf	indf2,w,c
  1878  000248  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1879  00024A  501F               	movf	??_setMotorPWM,w,c
  1880  00024C  6E0F               	movwf	___wmul@multiplier,c
  1881  00024E  6A10               	clrf	___wmul@multiplier+1,c
  1882  000250  EE20 F007          	lfsr	2,7
  1883  000254  501D               	movf	setMotorPWM@m,w,c
  1884  000256  26D9               	addwf	fsr2l,f,c
  1885  000258  501E               	movf	setMotorPWM@m+1,w,c
  1886  00025A  22DA               	addwfc	fsr2h,f,c
  1887  00025C  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1888  000260  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1889  000264  ECDF  F003         	call	___wmul	;wreg free
  1890  000268  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1891  00026C  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1892  000270  0E00               	movlw	0
  1893  000272  6E18               	movwf	___awdiv@divisor+1,c
  1894  000274  0E64               	movlw	100
  1895  000276  6E17               	movwf	___awdiv@divisor,c
  1896  000278  ECCA  F002         	call	___awdiv	;wreg free
  1897  00027C  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1898  000280  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1899                           
  1900                           ;dc_motor.c: 32: if (m->direction)
  1901  000284  EE20 F001          	lfsr	2,1
  1902  000288  501D               	movf	setMotorPWM@m,w,c
  1903  00028A  26D9               	addwf	fsr2l,f,c
  1904  00028C  501E               	movf	setMotorPWM@m+1,w,c
  1905  00028E  22DA               	addwfc	fsr2h,f,c
  1906  000290  50DF               	movf	indf2,w,c
  1907  000292  B4D8               	btfsc	status,2,c
  1908  000294  D02C               	goto	l1412
  1909                           
  1910                           ;dc_motor.c: 33: {
  1911                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1912  000296  EE20 F006          	lfsr	2,6
  1913  00029A  501D               	movf	setMotorPWM@m,w,c
  1914  00029C  26D9               	addwf	fsr2l,f,c
  1915  00029E  501E               	movf	setMotorPWM@m+1,w,c
  1916  0002A0  22DA               	addwfc	fsr2h,f,c
  1917  0002A2  50DF               	movf	indf2,w,c
  1918  0002A4  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1919  0002A6  0E01               	movlw	1
  1920  0002A8  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1921  0002AA  2A1F               	incf	??_setMotorPWM,f,c
  1922  0002AC  D002               	goto	u634
  1923  0002AE                     u635:
  1924  0002AE  90D8               	bcf	status,0,c
  1925  0002B0  3620               	rlcf	??_setMotorPWM+1,f,c
  1926  0002B2                     u634:
  1927  0002B2  2E1F               	decfsz	??_setMotorPWM,f,c
  1928  0002B4  D7FC               	goto	u635
  1929  0002B6  5020               	movf	??_setMotorPWM+1,w,c
  1930  0002B8  108A               	iorwf	3978,w,c	;volatile
  1931  0002BA  6E8A               	movwf	3978,c	;volatile
  1932                           
  1933                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1934  0002BC  EE20 F007          	lfsr	2,7
  1935  0002C0  501D               	movf	setMotorPWM@m,w,c
  1936  0002C2  26D9               	addwf	fsr2l,f,c
  1937  0002C4  501E               	movf	setMotorPWM@m+1,w,c
  1938  0002C6  22DA               	addwfc	fsr2h,f,c
  1939  0002C8  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1940  0002CC  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1941  0002D0  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1942  0002D4  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1943  0002D8  1E21               	comf	??_setMotorPWM+2,f,c
  1944  0002DA  1E22               	comf	??_setMotorPWM+3,f,c
  1945  0002DC  4A21               	infsnz	??_setMotorPWM+2,f,c
  1946  0002DE  2A22               	incf	??_setMotorPWM+3,f,c
  1947  0002E0  501F               	movf	??_setMotorPWM,w,c
  1948  0002E2  2421               	addwf	??_setMotorPWM+2,w,c
  1949  0002E4  6E24               	movwf	setMotorPWM@PWMduty,c
  1950  0002E6  5020               	movf	??_setMotorPWM+1,w,c
  1951  0002E8  2022               	addwfc	??_setMotorPWM+3,w,c
  1952  0002EA  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1953                           
  1954                           ;dc_motor.c: 36: }
  1955  0002EC  D014               	goto	l102
  1956  0002EE                     l1412:
  1957                           
  1958                           ;dc_motor.c: 37: else
  1959                           ;dc_motor.c: 38: {
  1960                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  1961  0002EE  EE20 F006          	lfsr	2,6
  1962  0002F2  501D               	movf	setMotorPWM@m,w,c
  1963  0002F4  26D9               	addwf	fsr2l,f,c
  1964  0002F6  501E               	movf	setMotorPWM@m+1,w,c
  1965  0002F8  22DA               	addwfc	fsr2h,f,c
  1966  0002FA  50DF               	movf	indf2,w,c
  1967  0002FC  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1968  0002FE  0E01               	movlw	1
  1969  000300  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1970  000302  2A1F               	incf	??_setMotorPWM,f,c
  1971  000304  D002               	goto	u644
  1972  000306                     u645:
  1973  000306  90D8               	bcf	status,0,c
  1974  000308  3620               	rlcf	??_setMotorPWM+1,f,c
  1975  00030A                     u644:
  1976  00030A  2E1F               	decfsz	??_setMotorPWM,f,c
  1977  00030C  D7FC               	goto	u645
  1978  00030E  5020               	movf	??_setMotorPWM+1,w,c
  1979  000310  0AFF               	xorlw	255
  1980  000312  148A               	andwf	3978,w,c	;volatile
  1981  000314  6E8A               	movwf	3978,c	;volatile
  1982  000316                     l102:
  1983                           
  1984                           ;dc_motor.c: 40: }
  1985                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  1986  000316  EE20 F002          	lfsr	2,2
  1987  00031A  501D               	movf	setMotorPWM@m,w,c
  1988  00031C  26D9               	addwf	fsr2l,f,c
  1989  00031E  501E               	movf	setMotorPWM@m+1,w,c
  1990  000320  22DA               	addwfc	fsr2h,f,c
  1991  000322  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1992  000326  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1993  00032A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1994  00032E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1995  000332  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1996  000334  46E8               	rlncf	wreg,f,c
  1997  000336  0BFC               	andlw	252
  1998  000338  6EDF               	movwf	indf2,c
  1999                           
  2000                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2001  00033A  EE20 F004          	lfsr	2,4
  2002  00033E  501D               	movf	setMotorPWM@m,w,c
  2003  000340  26D9               	addwf	fsr2l,f,c
  2004  000342  501E               	movf	setMotorPWM@m+1,w,c
  2005  000344  22DA               	addwfc	fsr2h,f,c
  2006  000346  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2007  00034A  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2008  00034E  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2009  000352  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2010  000356  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2011  00035A  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2012  00035E  0E06               	movlw	6
  2013  000360  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2014  000362                     u655:
  2015  000362  3422               	rlcf	??_setMotorPWM+3,w,c
  2016  000364  3222               	rrcf	??_setMotorPWM+3,f,c
  2017  000366  3221               	rrcf	??_setMotorPWM+2,f,c
  2018  000368  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2019  00036A  D7FB               	goto	u655
  2020  00036C  5021               	movf	??_setMotorPWM+2,w,c
  2021  00036E  6EDF               	movwf	indf2,c
  2022  000370  0012               	return		;funcret
  2023  000372                     __end_of_setMotorPWM:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           indf1	equ	0xFE7
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function ___wmul *****************
  2042 ;; Defined at:
  2043 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  multiplier      2   14[COMRAM] unsigned int 
  2046 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  product         2   18[COMRAM] unsigned int 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  2   14[COMRAM] unsigned int 
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0, prodl, prodh
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2058 ;;      Params:         4       0       0       0
  2059 ;;      Locals:         2       0       0       0
  2060 ;;      Temps:          0       0       0       0
  2061 ;;      Totals:         6       0       0       0
  2062 ;;Total ram usage:        6 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    1
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_setMotorPWM
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text12
  2073  0007BE                     __ptext12:
  2074                           	opt stack 0
  2075  0007BE                     ___wmul:
  2076                           	opt stack 25
  2077                           
  2078                           ;incstack = 0
  2079  0007BE  500F               	movf	___wmul@multiplier,w,c
  2080  0007C0  0211               	mulwf	___wmul@multiplicand,c
  2081  0007C2  CFF3 F013          	movff	prodl,___wmul@product
  2082  0007C6  CFF4 F014          	movff	prodh,___wmul@product+1
  2083  0007CA  500F               	movf	___wmul@multiplier,w,c
  2084  0007CC  0212               	mulwf	___wmul@multiplicand+1,c
  2085  0007CE  50F3               	movf	prodl,w,c
  2086  0007D0  2614               	addwf	___wmul@product+1,f,c
  2087  0007D2  5010               	movf	___wmul@multiplier+1,w,c
  2088  0007D4  0211               	mulwf	___wmul@multiplicand,c
  2089  0007D6  50F3               	movf	prodl,w,c
  2090  0007D8  2614               	addwf	___wmul@product+1,f,c
  2091  0007DA  C013  F00F         	movff	___wmul@product,?___wmul
  2092  0007DE  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2093  0007E2  0012               	return	
  2094  0007E4                     __end_of___wmul:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           intcon	equ	0xFF2
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           indf1	equ	0xFE7
  2103                           fsr1h	equ	0xFE2
  2104                           fsr1l	equ	0xFE1
  2105                           indf2	equ	0xFDF
  2106                           postinc2	equ	0xFDE
  2107                           postdec2	equ	0xFDD
  2108                           fsr2h	equ	0xFDA
  2109                           fsr2l	equ	0xFD9
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function ___awdiv *****************
  2113 ;; Defined at:
  2114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  dividend        2   20[COMRAM] int 
  2117 ;;  divisor         2   22[COMRAM] int 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  quotient        2   26[COMRAM] int 
  2120 ;;  sign            1   25[COMRAM] unsigned char 
  2121 ;;  counter         1   24[COMRAM] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  2   20[COMRAM] int 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2131 ;;      Params:         4       0       0       0
  2132 ;;      Locals:         4       0       0       0
  2133 ;;      Temps:          0       0       0       0
  2134 ;;      Totals:         8       0       0       0
  2135 ;;Total ram usage:        8 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    1
  2138 ;; This function calls:
  2139 ;;		Nothing
  2140 ;; This function is called by:
  2141 ;;		_setMotorPWM
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text13
  2146  000594                     __ptext13:
  2147                           	opt stack 0
  2148  000594                     ___awdiv:
  2149                           	opt stack 25
  2150                           
  2151                           ;incstack = 0
  2152  000594  0E00               	movlw	0
  2153  000596  6E1A               	movwf	___awdiv@sign,c
  2154  000598  AE18               	btfss	___awdiv@divisor+1,7,c
  2155  00059A  D006               	goto	l1370
  2156  00059C  6C17               	negf	___awdiv@divisor,c
  2157  00059E  1E18               	comf	___awdiv@divisor+1,f,c
  2158  0005A0  B0D8               	btfsc	status,0,c
  2159  0005A2  2A18               	incf	___awdiv@divisor+1,f,c
  2160  0005A4  0E01               	movlw	1
  2161  0005A6  6E1A               	movwf	___awdiv@sign,c
  2162  0005A8                     l1370:
  2163  0005A8  AE16               	btfss	___awdiv@dividend+1,7,c
  2164  0005AA  D006               	goto	l1376
  2165  0005AC  6C15               	negf	___awdiv@dividend,c
  2166  0005AE  1E16               	comf	___awdiv@dividend+1,f,c
  2167  0005B0  B0D8               	btfsc	status,0,c
  2168  0005B2  2A16               	incf	___awdiv@dividend+1,f,c
  2169  0005B4  0E01               	movlw	1
  2170  0005B6  1A1A               	xorwf	___awdiv@sign,f,c
  2171  0005B8                     l1376:
  2172  0005B8  0E00               	movlw	0
  2173  0005BA  6E1C               	movwf	___awdiv@quotient+1,c
  2174  0005BC  0E00               	movlw	0
  2175  0005BE  6E1B               	movwf	___awdiv@quotient,c
  2176  0005C0  5017               	movf	___awdiv@divisor,w,c
  2177  0005C2  1018               	iorwf	___awdiv@divisor+1,w,c
  2178  0005C4  B4D8               	btfsc	status,2,c
  2179  0005C6  D01C               	goto	l1398
  2180  0005C8  0E01               	movlw	1
  2181  0005CA  6E19               	movwf	___awdiv@counter,c
  2182  0005CC  D004               	goto	l1384
  2183  0005CE                     l1382:
  2184  0005CE  90D8               	bcf	status,0,c
  2185  0005D0  3617               	rlcf	___awdiv@divisor,f,c
  2186  0005D2  3618               	rlcf	___awdiv@divisor+1,f,c
  2187  0005D4  2A19               	incf	___awdiv@counter,f,c
  2188  0005D6                     l1384:
  2189  0005D6  AE18               	btfss	___awdiv@divisor+1,7,c
  2190  0005D8  D7FA               	goto	l1382
  2191  0005DA                     l1386:
  2192  0005DA  90D8               	bcf	status,0,c
  2193  0005DC  361B               	rlcf	___awdiv@quotient,f,c
  2194  0005DE  361C               	rlcf	___awdiv@quotient+1,f,c
  2195  0005E0  5017               	movf	___awdiv@divisor,w,c
  2196  0005E2  5C15               	subwf	___awdiv@dividend,w,c
  2197  0005E4  5018               	movf	___awdiv@divisor+1,w,c
  2198  0005E6  5816               	subwfb	___awdiv@dividend+1,w,c
  2199  0005E8  A0D8               	btfss	status,0,c
  2200  0005EA  D005               	goto	l1394
  2201  0005EC  5017               	movf	___awdiv@divisor,w,c
  2202  0005EE  5E15               	subwf	___awdiv@dividend,f,c
  2203  0005F0  5018               	movf	___awdiv@divisor+1,w,c
  2204  0005F2  5A16               	subwfb	___awdiv@dividend+1,f,c
  2205  0005F4  801B               	bsf	___awdiv@quotient,0,c
  2206  0005F6                     l1394:
  2207  0005F6  90D8               	bcf	status,0,c
  2208  0005F8  3218               	rrcf	___awdiv@divisor+1,f,c
  2209  0005FA  3217               	rrcf	___awdiv@divisor,f,c
  2210  0005FC  2E19               	decfsz	___awdiv@counter,f,c
  2211  0005FE  D7ED               	goto	l1386
  2212  000600                     l1398:
  2213  000600  501A               	movf	___awdiv@sign,w,c
  2214  000602  B4D8               	btfsc	status,2,c
  2215  000604  D004               	goto	l1402
  2216  000606  6C1B               	negf	___awdiv@quotient,c
  2217  000608  1E1C               	comf	___awdiv@quotient+1,f,c
  2218  00060A  B0D8               	btfsc	status,0,c
  2219  00060C  2A1C               	incf	___awdiv@quotient+1,f,c
  2220  00060E                     l1402:
  2221  00060E  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2222  000612  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2223  000616  0012               	return	
  2224  000618                     __end_of___awdiv:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           indf1	equ	0xFE7
  2233                           fsr1h	equ	0xFE2
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _enableSensor *****************
  2243 ;; Defined at:
  2244 ;;		line 82 in file "IR_Reading.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  sensor          1    wreg     unsigned char 
  2247 ;;  status          1   14[COMRAM] unsigned char 
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  sensor          1   15[COMRAM] unsigned char 
  2250 ;; Return value:  Size  Location     Type
  2251 ;;		None               void
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, status,0
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2259 ;;      Params:         1       0       0       0
  2260 ;;      Locals:         1       0       0       0
  2261 ;;      Temps:          0       0       0       0
  2262 ;;      Totals:         2       0       0       0
  2263 ;;Total ram usage:        2 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    1
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_ScanWithRange
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text14
  2274  0007E4                     __ptext14:
  2275                           	opt stack 0
  2276  0007E4                     _enableSensor:
  2277                           	opt stack 28
  2278                           
  2279                           ;incstack = 0
  2280                           ;enableSensor@sensor stored from wreg
  2281  0007E4  6E10               	movwf	enableSensor@sensor,c
  2282                           
  2283                           ;IR_Reading.c: 84: if (sensor==0){
  2284  0007E6  5010               	movf	enableSensor@sensor,w,c
  2285  0007E8  A4D8               	btfss	status,2,c
  2286  0007EA  D006               	goto	l1478
  2287                           
  2288                           ;IR_Reading.c: 85: LATEbits.LATE0 = status;
  2289  0007EC  B00F               	btfsc	enableSensor@status,0,c
  2290  0007EE  D002               	bra	u765
  2291  0007F0  908D               	bcf	3981,0,c	;volatile
  2292  0007F2  D001               	bra	u766
  2293  0007F4                     u765:
  2294  0007F4  808D               	bsf	3981,0,c	;volatile
  2295  0007F6                     u766:
  2296                           
  2297                           ;IR_Reading.c: 86: } else if (sensor==1){
  2298  0007F6  0012               	return	
  2299  0007F8                     l1478:
  2300  0007F8  0410               	decf	enableSensor@sensor,w,c
  2301  0007FA  A4D8               	btfss	status,2,c
  2302  0007FC  0012               	return	
  2303                           
  2304                           ;IR_Reading.c: 87: LATEbits.LATE1 = status;
  2305  0007FE  B00F               	btfsc	enableSensor@status,0,c
  2306  000800  D002               	bra	u785
  2307  000802  928D               	bcf	3981,1,c	;volatile
  2308  000804  D001               	bra	u786
  2309  000806                     u785:
  2310  000806  828D               	bsf	3981,1,c	;volatile
  2311  000808                     u786:
  2312  000808  0012               	return	
  2313  00080A                     __end_of_enableSensor:
  2314                           	opt stack 0
  2315                           tblptru	equ	0xFF8
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           intcon	equ	0xFF2
  2319                           postinc0	equ	0xFEE
  2320                           wreg	equ	0xFE8
  2321                           indf1	equ	0xFE7
  2322                           fsr1h	equ	0xFE2
  2323                           fsr1l	equ	0xFE1
  2324                           indf2	equ	0xFDF
  2325                           postinc2	equ	0xFDE
  2326                           postdec2	equ	0xFDD
  2327                           fsr2h	equ	0xFDA
  2328                           fsr2l	equ	0xFD9
  2329                           status	equ	0xFD8
  2330                           
  2331 ;; *************** function _delay_tenth_s *****************
  2332 ;; Defined at:
  2333 ;;		line 19 in file "Movement.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  tenth_second    1    wreg     unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2338 ;;  i               2   16[COMRAM] unsigned int 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;		None               void
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2348 ;;      Params:         0       0       0       0
  2349 ;;      Locals:         3       0       0       0
  2350 ;;      Temps:          1       0       0       0
  2351 ;;      Totals:         4       0       0       0
  2352 ;;Total ram usage:        4 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    1
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_ScanWithRange
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text15
  2363  000754                     __ptext15:
  2364                           	opt stack 0
  2365  000754                     _delay_tenth_s:
  2366                           	opt stack 28
  2367                           
  2368                           ;incstack = 0
  2369                           ;delay_tenth_s@tenth_seconds stored from wreg
  2370  000754  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2371                           
  2372                           ;Movement.c: 20: unsigned int i=0;
  2373  000756  0E00               	movlw	0
  2374  000758  6E12               	movwf	delay_tenth_s@i+1,c
  2375  00075A  0E00               	movlw	0
  2376  00075C  6E11               	movwf	delay_tenth_s@i,c
  2377                           
  2378                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2379  00075E  0E00               	movlw	0
  2380  000760  6E12               	movwf	delay_tenth_s@i+1,c
  2381  000762  0E01               	movlw	1
  2382  000764  6E11               	movwf	delay_tenth_s@i,c
  2383  000766  D009               	goto	l1472
  2384  000768                     l1468:
  2385                           
  2386                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2387  000768  0E82               	movlw	130
  2388  00076A  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2389  00076C  0EDE               	movlw	222
  2390  00076E                     u987:
  2391  00076E  2EE8               	decfsz	wreg,f,c
  2392  000770  D7FE               	goto	u987
  2393  000772  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2394  000774  D7FC               	goto	u987
  2395  000776  4A11               	infsnz	delay_tenth_s@i,f,c
  2396  000778  2A12               	incf	delay_tenth_s@i+1,f,c
  2397  00077A                     l1472:
  2398  00077A  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2399  00077C  0D02               	mullw	2
  2400  00077E  5011               	movf	delay_tenth_s@i,w,c
  2401  000780  5CF3               	subwf	prodl,w,c
  2402  000782  5012               	movf	delay_tenth_s@i+1,w,c
  2403  000784  58F4               	subwfb	prodh,w,c
  2404  000786  A0D8               	btfss	status,0,c
  2405  000788  0012               	return	
  2406  00078A  D7EE               	goto	l1468
  2407  00078C                     __end_of_delay_tenth_s:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           indf1	equ	0xFE7
  2416                           fsr1h	equ	0xFE2
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           postinc2	equ	0xFDE
  2420                           postdec2	equ	0xFDD
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _InterruptHandlerHigh *****************
  2426 ;; Defined at:
  2427 ;;		line 16 in file "main.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2441 ;;      Params:         0       0       0       0
  2442 ;;      Locals:         0       0       0       0
  2443 ;;      Temps:         14       0       0       0
  2444 ;;      Totals:        14       0       0       0
  2445 ;;Total ram usage:       14 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		Interrupt level 2
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	intcode
  2455  000008                     __pintcode:
  2456                           	opt stack 0
  2457  000008                     _InterruptHandlerHigh:
  2458                           	opt stack 25
  2459                           
  2460                           ;incstack = 0
  2461  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2462  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2463  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2464  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2465  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2466  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2467  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2468  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2469  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2470  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2471  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2472  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2473  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2474  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2475  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2476                           
  2477                           ;main.c: 18: if (PIR1bits.RCIF) {
  2478  000042  AA9E               	btfss	3998,5,c	;volatile
  2479  000044  D013               	goto	i2l46
  2480                           
  2481                           ;main.c: 19: ReceivedString[i]=RCREG;
  2482  000046  5036               	movf	_i,w,c	;volatile
  2483  000048  0D01               	mullw	1
  2484  00004A  0E80               	movlw	low _ReceivedString
  2485  00004C  24F3               	addwf	prodl,w,c
  2486  00004E  6ED9               	movwf	fsr2l,c
  2487  000050  0E00               	movlw	high _ReceivedString
  2488  000052  20F4               	addwfc	prodh,w,c
  2489  000054  6EDA               	movwf	fsr2h,c
  2490  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2491                           
  2492                           ;main.c: 20: if (i==15){
  2493  00005A  0E0F               	movlw	15
  2494  00005C  1836               	xorwf	_i,w,c	;volatile
  2495  00005E  A4D8               	btfss	status,2,c
  2496  000060  D003               	goto	i2l1590
  2497                           
  2498                           ;main.c: 21: i=0;
  2499  000062  0E00               	movlw	0
  2500  000064  6E36               	movwf	_i,c	;volatile
  2501                           
  2502                           ;main.c: 22: }else{
  2503  000066  D001               	goto	i2l1592
  2504  000068                     i2l1590:
  2505                           
  2506                           ;main.c: 23: i++;
  2507  000068  2A36               	incf	_i,f,c	;volatile
  2508  00006A                     i2l1592:
  2509                           
  2510                           ;main.c: 24: }
  2511                           ;main.c: 25: PIR1bits.RCIF=0;
  2512  00006A  9A9E               	bcf	3998,5,c	;volatile
  2513  00006C                     i2l46:
  2514  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2515  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2516  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2517  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2518  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2519  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2520  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2521  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2522  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2523  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2524  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2525  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2526  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2527  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2528  0000A4  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2529  0000A6  0011               	retfie		f
  2530  0000A8                     __end_of_InterruptHandlerHigh:
  2531                           	opt stack 0
  2532  0000                     pclatu	equ	0xFFB
  2533                           pclath	equ	0xFFA
  2534                           tblptru	equ	0xFF8
  2535                           tblptrh	equ	0xFF7
  2536                           tblptrl	equ	0xFF6
  2537                           tablat	equ	0xFF5
  2538                           prodh	equ	0xFF4
  2539                           prodl	equ	0xFF3
  2540                           intcon	equ	0xFF2
  2541                           postinc0	equ	0xFEE
  2542                           fsr0h	equ	0xFEA
  2543                           fsr0l	equ	0xFE9
  2544                           wreg	equ	0xFE8
  2545                           indf1	equ	0xFE7
  2546                           fsr1h	equ	0xFE2
  2547                           fsr1l	equ	0xFE1
  2548                           indf2	equ	0xFDF
  2549                           postinc2	equ	0xFDE
  2550                           postdec2	equ	0xFDD
  2551                           fsr2h	equ	0xFDA
  2552                           fsr2l	equ	0xFD9
  2553                           status	equ	0xFD8
  2554                           pclatu	equ	0xFFB
  2555                           pclath	equ	0xFFA
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           fsr0h	equ	0xFEA
  2565                           fsr0l	equ	0xFE9
  2566                           wreg	equ	0xFE8
  2567                           indf1	equ	0xFE7
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577                           	psect	rparam
  2578  0000                     pclatu	equ	0xFFB
  2579                           pclath	equ	0xFFA
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           prodh	equ	0xFF4
  2585                           prodl	equ	0xFF3
  2586                           intcon	equ	0xFF2
  2587                           postinc0	equ	0xFEE
  2588                           fsr0h	equ	0xFEA
  2589                           fsr0l	equ	0xFE9
  2590                           wreg	equ	0xFE8
  2591                           indf1	equ	0xFE7
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601                           	psect	temp
  2602  000037                     btemp:
  2603                           	opt stack 0
  2604  000037                     	ds	1
  2605  0000                     int$flags	set	btemp
  2606                           pclatu	equ	0xFFB
  2607                           pclath	equ	0xFFA
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           postinc0	equ	0xFEE
  2616                           fsr0h	equ	0xFEA
  2617                           fsr0l	equ	0xFE9
  2618                           wreg	equ	0xFE8
  2619                           indf1	equ	0xFE7
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      54
    BANK0           160     32      48
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   14996
                                             51 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                        5     0      5   14050
                                             46 COMRAM     5     0      5
                      _delay_tenth_s
                       _enableSensor
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    4998
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    5254
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 4     0      4    2775
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     1      4    1835
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          9     7      2    1275
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     394
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _enableSensor                                         2     1      1     344
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanWithRange
     _delay_tenth_s
     _enableSensor
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      30       5       30.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      36       1       57.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      66       3        0.0%
DATA                 0      0      66      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Mar 14 19:03:45 2018

                            _i 0036                             l49 013C                   ___awdiv@sign 001A  
          ___wmul@multiplicand 0011                    main@Message 0060                            l102 0316  
                          l132 066A                            u634 02B2                            u635 02AE  
                          u644 030A                            u645 0306                            u655 0362  
                          u850 0184                            u860 0196                            u852 0186  
                          u765 07F4                            u766 07F6                            u862 0198  
                          u785 0806                            u786 0808                            u957 0736  
                          u967 0550                            u977 0664                            u987 076E  
                          prod 000FF3                            wreg 000FE8                           l1402 060E  
                         l1412 02EE                           l1420 051E                           l1430 0556  
                         l1424 0536                           l1416 0506                           l1370 05A8  
                         l1442 0632                           l1382 05CE                           l1446 064A  
                         l1438 061A                           l1622 0156                           l1472 077A  
                         l1384 05D6                           l1376 05B8                           l1632 01B6  
                         l1394 05F6                           l1386 05DA                           l1570 04B0  
                         l1554 0730                           l1642 01F8                           l1626 0176  
                         l1618 0142                           l1468 0768                           l1644 01FE  
                         l1636 01C0                           l1478 07F8                           l1398 0600  
                         l1566 04A8                           l1558 0742                           l1648 0208  
                         l1656 0224                           l1578 0500                           _LATB 000F8A  
                         i2l46 006C                           _main 00AC                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         indf1 000FE7                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           btemp 0037                           _stop 0504  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 00A8                 delay_s@seconds 0010                   ___param_bank 000010  
                        ?_main 0001                __end_of___awdiv 0618                          ?_stop 0026  
              ___awdiv@divisor 0017                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
                _initRFID$1273 000F                ___awdiv@counter 0019                          _RCREG 000FAE  
                        _SPBRG 000FAF                          _TRISC 000F94                          _TXREG 000FAD  
              __end_of_delay_s 0754                          main@i 006D                          tablat 000FF5  
                        status 000FD8         __size_of_ScanWithRange 00DE                __initialization 082A  
                 __end_of_main 023E                   __end_of_stop 0594                 delay_tenth_s@i 0011  
               __CFG_OSC$IRCIO 000000           __end_of_enableSensor 080A            VerifySignal@hexByte 0018  
                       ??_main 0034                         ??_stop 002A                  __activetblptr 000002  
                ?_initMotorPWM 0001                   ?_setMotorPWM 001D               ___awdiv@dividend 0015  
                       i2l1590 0068                 __CFG_WDTEN$OFF 000000                         i2l1592 006A  
        __end_of_delay_tenth_s 078C                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                         ___wmul 07BE                      ??___awdiv 0019  
             __end_of_initRFID 082A                         _initIR 0846                         clear_0 0830  
             ___awdiv@quotient 001B                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                _ScanWithRange 0372                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 0026                         stop@mR 0028  
             __end_of_turnLeft 071C                     __accesstop 0060        __end_of__initialization 0838  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                 ?_ScanWithRange 002F  
         VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0     delay_tenth_s@tenth_seconds 0010  
                   __pbssBANK0 0080          __size_of_enableSensor 0026                        ?___wmul 000F  
                      _CAP1CON 000F63                        ?_initIR 0001        __size_of_fullSpeedAhead 0070  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                      ?_initRFID 0001  
         __size_of_setMotorPWM 0134                   _enableSensor 07E4             __size_of_turnRight 004A  
         __end_of_initMotorPWM 07BE                        __Hparam 0000                        __Lparam 0000  
                      ___awdiv 0594                __size_of___wmul 0026                __size_of_initIR 0014  
                      __pcinit 082A                ??_ScanWithRange 0034                        _delay_s 071C  
                      __ramtop 0300                      ?_turnLeft 002B                        __ptext0 00AC  
                      __ptext1 080A                        __ptext2 078C                        __ptext3 0846  
                      __ptext4 071C                        __ptext5 0450                        __ptext6 0372  
                      __ptext7 0688                        __ptext8 06D2                        __ptext9 0504  
                ?_VerifySignal 000F           end_of_initialization 0838             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   ??_turnLeft 002F              __end_of_turnRight 06D2                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
                    _TRISEbits 000F96                 ??_VerifySignal 0011               fullSpeedAhead@mL 0026  
             fullSpeedAhead@mR 0028                      _TXSTAbits 000FAC                     main@motorL 006E  
                   main@motorR 0077                 _fullSpeedAhead 0618                 _ReceivedString 0080  
               __end_of___wmul 07E4                    _BAUDCONbits 000FAA                 __end_of_initIR 085A  
       __size_of_delay_tenth_s 0038            start_initialization 082A             VerifySignal@Signal 000F  
        __size_of_initMotorPWM 0032   __end_of_InterruptHandlerHigh 00A8         __end_of_fullSpeedAhead 0688  
                     ??___wmul 0013                       ??_initIR 000F                   _initMotorPWM 078C  
                  __pbssCOMRAM 0036                  __pcstackBANK0 0060                  _delay_tenth_s 0754  
            __size_of_initRFID 0020                ?_fullSpeedAhead 0026                      __pintcode 0008  
         __end_of_VerifySignal 0504                       ?___awdiv 0015                       ?_delay_s 0001  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68              __size_of_turnLeft 004A  
                ??_setMotorPWM 001F                 ?_delay_tenth_s 0001                 ___wmul@product 0013  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _LATEbits 000F8D                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                  turnRight@mL 002B                    turnRight@mR 002D                       _PIR1bits 000F9E  
                     _RCONbits 000FD0              ___wmul@multiplier 000F          __end_of_ScanWithRange 0450  
                 setMotorPWM@m 001D           _InterruptHandlerHigh 0008                      _turnRight 0688  
          __end_of_setMotorPWM 0372                       __Hrparam 0000                       __Lrparam 0000  
             __size_of___awdiv 0084                     _ANSEL0bits 000FB8               __size_of_delay_s 0038  
        ?_InterruptHandlerHigh 0001                     ?_turnRight 002B                       __ptext10 0618  
                     __ptext11 023E                       __ptext12 07BE                       __ptext13 0594  
                     __ptext14 07E4                       __ptext15 0754                ??_delay_tenth_s 000F  
                     _initRFID 080A                  __size_of_main 0192                  __size_of_stop 0090  
                   turnLeft@mL 002B                     turnLeft@mR 002D          __size_of_VerifySignal 00B4  
                     delay_s@i 0011                       int$flags 0037                       main@mode 006C  
                     main@test 006A                       _turnLeft 06D2                ScanWithRange@mL 002F  
              ScanWithRange@mR 0031             enableSensor@sensor 0010             enableSensor@status 000F  
                VerifySignal@i 001A                     _INTCONbits 000FF2     ScanWithRange@tenth_seconds 0033  
                  _setMotorPWM 023E                   _VerifySignal 0450                       intlevel2 0000  
                ?_enableSensor 000F               ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001                    ??_turnRight 002F                 ??_enableSensor 0010  
