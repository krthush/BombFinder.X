

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 12:45:20 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  0000'                    __psmallconst:
    54                           	opt stack 0
    55  0000' 00                 	db	0
    56  0001'                    _dpowers:
    57                           	opt stack 0
    58  0001' 0001               	dw	1
    59  0003' 000A               	dw	10
    60  0005' 0064               	dw	100
    61  0007' 03E8               	dw	1000
    62  0009' 2710               	dw	10000
    63  000B'                    __end_of_dpowers:
    64                           	opt stack 0
    65  000B'                    _ClearSignalThreshold:
    66                           	opt stack 0
    67  000B' 00C8               	dw	200
    68  000D'                    __end_of_ClearSignalThreshold:
    69                           	opt stack 0
    70  000D'                    _DirectionFoundThreshold:
    71                           	opt stack 0
    72  000D' 09C4               	dw	2500
    73  000F'                    __end_of_DirectionFoundThreshold:
    74                           	opt stack 0
    75  000F'                    _DirectionFoundTolerance:
    76                           	opt stack 0
    77  000F' 03E8               	dw	1000
    78  0011'                    __end_of_DirectionFoundTolerance:
    79                           	opt stack 0
    80  0000                     _ANSEL0bits	set	4024
    81  0000                     _BAUDCONbits	set	4010
    82  0000                     _CAP1BUFH	set	3945
    83  0000                     _CAP1BUFL	set	3944
    84  0000                     _CAP1CON	set	3939
    85  0000                     _CAP2BUFH	set	3943
    86  0000                     _CAP2BUFL	set	3942
    87  0000                     _CAP2CON	set	3938
    88  0000                     _INTCONbits	set	4082
    89  0000                     _IPR1bits	set	3999
    90  0000                     _LATAbits	set	3977
    91  0000                     _LATB	set	3978
    92  0000                     _LATCbits	set	3979
    93  0000                     _LATDbits	set	3980
    94  0000                     _LATEbits	set	3981
    95  0000                     _OSCCON	set	4051
    96  0000                     _OSCCONbits	set	4051
    97  0000                     _PIE1bits	set	3997
    98  0000                     _PIR1bits	set	3998
    99  0000                     _PTCON0	set	3967
   100  0000                     _PTCON1	set	3966
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON0	set	3951
   104  0000                     _PWMCON1	set	3950
   105  0000                     _RCONbits	set	4048
   106  0000                     _RCREG	set	4014
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _SPBRG	set	4015
   109  0000                     _SPBRGH	set	4016
   110  0000                     _T5CON	set	4023
   111  0000                     _TRISAbits	set	3986
   112  0000                     _TRISBbits	set	3987
   113  0000                     _TRISC	set	3988
   114  0000                     _TRISCbits	set	3988
   115  0000                     _TRISDbits	set	3989
   116  0000                     _TRISEbits	set	3990
   117  0000                     _TXREG	set	4013
   118  0000                     _TXSTAbits	set	4012
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121  0000                     _PDC1H	set	3958
   122  0000                     _PDC1L	set	3959
   123  0011'                    STR_12:
   124  0011' 20                 	db	32
   125  0012' 20                 	db	32
   126  0013' 20                 	db	32
   127  0014' 20                 	db	32
   128  0015' 20                 	db	32
   129  0016' 20                 	db	32
   130  0017' 53                 	db	83	;'S'
   131  0018' 63                 	db	99	;'c'
   132  0019' 61                 	db	97	;'a'
   133  001A' 6E                 	db	110	;'n'
   134  001B' 57                 	db	87	;'W'
   135  001C' 69                 	db	105	;'i'
   136  001D' 74                 	db	116	;'t'
   137  001E' 68                 	db	104	;'h'
   138  001F' 52                 	db	82	;'R'
   139  0020' 61                 	db	97	;'a'
   140  0021' 6E                 	db	110	;'n'
   141  0022' 67                 	db	103	;'g'
   142  0023' 65                 	db	101	;'e'
   143  0024' 00                 	db	0
   144  0025'                    STR_4:
   145  0025' 20                 	db	32
   146  0026' 20                 	db	32
   147  0027' 20                 	db	32
   148  0028' 20                 	db	32
   149  0029' 20                 	db	32
   150  002A' 20                 	db	32
   151  002B' 46                 	db	70	;'F'
   152  002C' 6F                 	db	111	;'o'
   153  002D' 75                 	db	117	;'u'
   154  002E' 6E                 	db	110	;'n'
   155  002F' 64                 	db	100	;'d'
   156  0030' 20                 	db	32
   157  0031' 42                 	db	66	;'B'
   158  0032' 6F                 	db	111	;'o'
   159  0033' 6D                 	db	109	;'m'
   160  0034' 62                 	db	98	;'b'
   161  0035' 21                 	db	33
   162  0036' 00                 	db	0
   163  0037'                    STR_5:
   164  0037' 20                 	db	32
   165  0038' 20                 	db	32
   166  0039' 20                 	db	32
   167  003A' 20                 	db	32
   168  003B' 20                 	db	32
   169  003C' 20                 	db	32
   170  003D' 47                 	db	71	;'G'
   171  003E' 6F                 	db	111	;'o'
   172  003F' 69                 	db	105	;'i'
   173  0040' 6E                 	db	110	;'n'
   174  0041' 67                 	db	103	;'g'
   175  0042' 20                 	db	32
   176  0043' 48                 	db	72	;'H'
   177  0044' 6F                 	db	111	;'o'
   178  0045' 6D                 	db	109	;'m'
   179  0046' 65                 	db	101	;'e'
   180  0047' 00                 	db	0
   181  0048'                    STR_3:
   182  0048' 20                 	db	32
   183  0049' 20                 	db	32
   184  004A' 20                 	db	32
   185  004B' 20                 	db	32
   186  004C' 20                 	db	32
   187  004D' 20                 	db	32
   188  004E' 20                 	db	32
   189  004F' 53                 	db	83	;'S'
   190  0050' 65                 	db	101	;'e'
   191  0051' 61                 	db	97	;'a'
   192  0052' 72                 	db	114	;'r'
   193  0053' 63                 	db	99	;'c'
   194  0054' 68                 	db	104	;'h'
   195  0055' 69                 	db	105	;'i'
   196  0056' 6E                 	db	110	;'n'
   197  0057' 67                 	db	103	;'g'
   198  0058' 00                 	db	0
   199  0059'                    STR_2:
   200  0059' 20                 	db	32
   201  005A' 20                 	db	32
   202  005B' 20                 	db	32
   203  005C' 20                 	db	32
   204  005D' 20                 	db	32
   205  005E' 25                 	db	37
   206  005F' 30                 	db	48	;'0'
   207  0060' 34                 	db	52	;'4'
   208  0061' 64                 	db	100	;'d'
   209  0062' 2C                 	db	44
   210  0063' 20                 	db	32
   211  0064' 25                 	db	37
   212  0065' 30                 	db	48	;'0'
   213  0066' 34                 	db	52	;'4'
   214  0067' 64                 	db	100	;'d'
   215  0068' 00                 	db	0
   216  0069'                    STR_1:
   217  0069' 20                 	db	32
   218  006A' 20                 	db	32
   219  006B' 20                 	db	32
   220  006C' 20                 	db	32
   221  006D' 20                 	db	32
   222  006E' 49                 	db	73	;'I'
   223  006F' 6E                 	db	110	;'n'
   224  0070' 65                 	db	101	;'e'
   225  0071' 72                 	db	114	;'r'
   226  0072' 74                 	db	116	;'t'
   227  0073' 20                 	db	32
   228  0074' 4D                 	db	77	;'M'
   229  0075' 6F                 	db	111	;'o'
   230  0076' 64                 	db	100	;'d'
   231  0077' 65                 	db	101	;'e'
   232  0078' 00                 	db	0
   233  0079'                    STR_6:
   234  0079' 20                 	db	32
   235  007A' 20                 	db	32
   236  007B' 20                 	db	32
   237  007C' 20                 	db	32
   238  007D' 20                 	db	32
   239  007E' 20                 	db	32
   240  007F' 20                 	db	32
   241  0080' 20                 	db	32
   242  0081' 53                 	db	83	;'S'
   243  0082' 63                 	db	99	;'c'
   244  0083' 61                 	db	97	;'a'
   245  0084' 6E                 	db	110	;'n'
   246  0085' 49                 	db	73	;'I'
   247  0086' 52                 	db	82	;'R'
   248  0087' 00                 	db	0
   249  0088'                    STR_9:
   250  0088' 20                 	db	32
   251  0089' 20                 	db	32
   252  008A' 20                 	db	32
   253  008B' 20                 	db	32
   254  008C' 20                 	db	32
   255  008D' 25                 	db	37
   256  008E' 64                 	db	100	;'d'
   257  008F' 2C                 	db	44
   258  0090' 20                 	db	32
   259  0091' 25                 	db	37
   260  0092' 64                 	db	100	;'d'
   261  0093' 00                 	db	0
   262  0000                     
   263                           ; #config settings
   264  0094' 00                 	db	0	; dummy byte at the end
   265  0000                     
   266                           	psect	cinit
   267  0000'                    __pcinit:
   268                           	opt stack 0
   269  0000'                    start_initialization:
   270                           	opt stack 0
   271  0000'                    __initialization:
   272                           	opt stack 0
   273                           
   274                           ; Clear objects allocated to BANK1 (5 bytes)
   275  0000' 0101               	movlb	1
   276  0002' 6B00'              	clrf	(__pbssBANK1+4)& (0+255),b
   277  0004' 6B00'              	clrf	(__pbssBANK1+3)& (0+255),b
   278  0006' 6B00'              	clrf	(__pbssBANK1+2)& (0+255),b
   279  0008' 6B00'              	clrf	(__pbssBANK1+1)& (0+255),b
   280  000A' 6B00'              	clrf	__pbssBANK1& (0+255),b
   281                           
   282                           ; Clear objects allocated to BANK0 (32 bytes)
   283  000C' EE00' F000'        	lfsr	0,__pbssBANK0
   284  0010' 0E20               	movlw	32
   285  0012'                    clear_0:
   286  0012' 6AEE               	clrf	postinc0,c
   287  0014' 06E8               	decf	wreg,f,c
   288  0016' E1FD               	bnz	clear_0
   289                           
   290                           ; Clear objects allocated to COMRAM (2 bytes)
   291  0018' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   292  001A' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   293  001C'                    end_of_initialization:
   294                           	opt stack 0
   295  001C'                    __end_of__initialization:
   296                           	opt stack 0
   297  001C' 9000'              	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   298  001E' 9200'              	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   299  0020' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   300  0022' 6EF8               	movwf	tblptru,c
   301  0024' 0100               	movlb	0
   302  0026' EF00' F000'        	goto	_main	;jump to C main() function
   303                           tblptru	equ	0xFF8
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	bssCOMRAM
   308  0000'                    __pbssCOMRAM:
   309                           	opt stack 0
   310  0000'                    _i:
   311                           	opt stack 0
   312  0000'                    	ds	1
   313  0001'                    _mode:
   314                           	opt stack 0
   315  0001'                    	ds	1
   316                           tblptru	equ	0xFF8
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           
   320                           	psect	bssBANK0
   321  0000'                    __pbssBANK0:
   322                           	opt stack 0
   323  0000'                    ScanIR@F3878:
   324                           	opt stack 0
   325  0000'                    	ds	4
   326  0004'                    ScanWithRange@F3887:
   327                           	opt stack 0
   328  0004'                    	ds	4
   329  0008'                    ScanWithRange@F3889:
   330                           	opt stack 0
   331  0008'                    	ds	4
   332  000C'                    ScanWithRange@F3891:
   333                           	opt stack 0
   334  000C'                    	ds	4
   335  0010'                    _ReceivedString:
   336                           	opt stack 0
   337  0010'                    	ds	16
   338                           tblptru	equ	0xFF8
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	bssBANK1
   343  0000'                    __pbssBANK1:
   344                           	opt stack 0
   345  0000'                    main@F3890:
   346                           	opt stack 0
   347  0000'                    	ds	4
   348  0004'                    _RFID_Read:
   349                           	opt stack 0
   350  0004'                    	ds	1
   351                           tblptru	equ	0xFF8
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	cstackBANK2
   356  0000'                    __pcstackBANK2:
   357                           	opt stack 0
   358  0000'                    main@mL:
   359                           	opt stack 0
   360                           
   361                           ; 9 bytes @ 0x0
   362  0000'                    	ds	9
   363  0009'                    main@mR:
   364                           	opt stack 0
   365                           
   366                           ; 9 bytes @ 0x9
   367  0009'                    	ds	9
   368                           tblptru	equ	0xFF8
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           	psect	cstackBANK1
   373  0000'                    __pcstackBANK1:
   374                           	opt stack 0
   375  0000'                    main@MoveType:
   376                           	opt stack 0
   377                           
   378                           ; 100 bytes @ 0x0
   379  0000'                    	ds	100
   380  0064'                    main@MoveTime:
   381                           	opt stack 0
   382                           
   383                           ; 100 bytes @ 0x64
   384  0064'                    	ds	100
   385  00C8'                    main@buf:
   386                           	opt stack 0
   387                           
   388                           ; 40 bytes @ 0xC8
   389  00C8'                    	ds	40
   390  00F0'                    main@Message:
   391                           	opt stack 0
   392                           
   393                           ; 10 bytes @ 0xF0
   394  00F0'                    	ds	10
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackBANK0
   400  0000'                    __pcstackBANK0:
   401                           	opt stack 0
   402  0000'                    ??_sprintf:
   403  0000'                    setMotorPWM@PWMduty:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x0
   407  0000'                    	ds	2
   408  0002'                    stop@mL:
   409                           	opt stack 0
   410  0002'                    fullSpeedAhead@mL:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x2
   414  0002'                    	ds	2
   415  0004'                    stop@mR:
   416                           	opt stack 0
   417  0004'                    fullSpeedAhead@mR:
   418                           	opt stack 0
   419  0004'                    sprintf@ap:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x4
   423  0004'                    	ds	2
   424  0006'                    sprintf@prec:
   425                           	opt stack 0
   426  0006'                    turnLeft@mL:
   427                           	opt stack 0
   428  0006'                    turnRight@mL:
   429                           	opt stack 0
   430  0006'                    fullSpeedBack@mL:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x6
   434  0006'                    	ds	1
   435  0007'                    sprintf@val:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x7
   439  0007'                    	ds	1
   440  0008'                    turnLeft@mR:
   441                           	opt stack 0
   442  0008'                    turnRight@mR:
   443                           	opt stack 0
   444  0008'                    fullSpeedBack@mR:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x8
   448  0008'                    	ds	1
   449  0009'                    sprintf@flag:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x9
   453  0009'                    	ds	1
   454  000A'                    sprintf@width:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0xA
   458  000A'                    	ds	2
   459  000C'                    sprintf@c:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xC
   463  000C'                    	ds	1
   464  000D'                    ScanIR@mL:
   465                           	opt stack 0
   466  000D'                    ScanWithRange@mL:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0xD
   470  000D'                    	ds	2
   471  000F'                    ScanIR@mR:
   472                           	opt stack 0
   473  000F'                    ScanWithRange@mR:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0xF
   477  000F'                    	ds	2
   478  0011'                    ScanWithRange@tenth_seconds:
   479                           	opt stack 0
   480  0011'                    ScanIR@Move:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x11
   484  0011'                    	ds	1
   485  0012'                    ScanWithRange@MoveTimeEntry:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x12
   489  0012'                    	ds	1
   490  0013'                    ScanIR@MoveTime:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x13
   494  0013'                    	ds	1
   495  0014'                    ??_ScanWithRange:
   496                           
   497                           ; 0 bytes @ 0x14
   498  0014'                    	ds	1
   499  0015'                    ScanIR@MoveType:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x15
   503  0015'                    	ds	1
   504  0016'                    ScanWithRange@buf:
   505                           	opt stack 0
   506                           
   507                           ; 40 bytes @ 0x16
   508  0016'                    	ds	1
   509  0017'                    ??_ScanIR:
   510                           
   511                           ; 0 bytes @ 0x17
   512  0017'                    	ds	2
   513  0019'                    ScanIR@buf:
   514                           	opt stack 0
   515                           
   516                           ; 40 bytes @ 0x19
   517  0019'                    	ds	37
   518  003E'                    ScanWithRange@ResultFalseL:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x3E
   522  003E'                    	ds	1
   523  003F'                    ScanWithRange@ResultFalseC:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x3F
   527  003F'                    	ds	1
   528  0040'                    ScanWithRange@ResultFalseR:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x40
   532  0040'                    	ds	1
   533  0041'                    ScanIR@SensorResult:
   534                           	opt stack 0
   535  0041'                    ScanWithRange@SensorResultL:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x41
   539  0041'                    	ds	4
   540  0045'                    ScanWithRange@SensorResultC:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x45
   544  0045'                    	ds	4
   545  0049'                    ScanWithRange@SensorResultR:
   546                           	opt stack 0
   547                           
   548                           ; 4 bytes @ 0x49
   549  0049'                    	ds	4
   550  004D'                    ??_main:
   551                           
   552                           ; 0 bytes @ 0x4D
   553  004D'                    	ds	2
   554  004F'                    main@SensorResult:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x4F
   558  004F'                    	ds	4
   559  0053'                    main@ScanAngle:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x53
   563  0053'                    	ds	1
   564  0054'                    main@DirectionFound:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x54
   568  0054'                    	ds	1
   569  0055'                    main@i:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x55
   573  0055'                    	ds	1
   574  0056'                    main@Move:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x56
   578  0056'                    	ds	1
   579                           tblptru	equ	0xFF8
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           
   583                           	psect	cstackCOMRAM
   584  0000'                    __pcstackCOMRAM:
   585                           	opt stack 0
   586  0000'                    ??i2_delay_tenth_s:
   587                           
   588                           ; 0 bytes @ 0x0
   589  0000'                    	ds	1
   590  0001'                    i2delay_tenth_s@tenth_seconds:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x1
   594  0001'                    	ds	1
   595  0002'                    i2delay_tenth_s@i:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x2
   599  0002'                    	ds	2
   600  0004'                    ??_InterruptHandlerHigh:
   601                           
   602                           ; 0 bytes @ 0x4
   603  0004'                    	ds	14
   604  0012'                    ??_InterruptHandlerLow:
   605                           
   606                           ; 0 bytes @ 0x12
   607  0012'                    	ds	17
   608  0023'                    ??_delay_tenth_s:
   609  0023'                    ??_isdigit:
   610  0023'                    ??_LCDout:
   611  0023'                    ??_delay_s:
   612  0023'                    ?_grabLeftIR:
   613                           	opt stack 0
   614  0023'                    ?_grabRightIR:
   615                           	opt stack 0
   616  0023'                    ?___wmul:
   617                           	opt stack 0
   618  0023'                    ?___lwdiv:
   619                           	opt stack 0
   620  0023'                    enableSensor@status:
   621                           	opt stack 0
   622  0023'                    VerifySignal@Signal:
   623                           	opt stack 0
   624  0023'                    ___wmul@multiplier:
   625                           	opt stack 0
   626  0023'                    ___lwdiv@dividend:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x23
   630  0023'                    	ds	1
   631  0024'                    delay_s@seconds:
   632                           	opt stack 0
   633  0024'                    delay_tenth_s@tenth_seconds:
   634                           	opt stack 0
   635  0024'                    enableSensor@sensor:
   636                           	opt stack 0
   637  0024'                    _isdigit$1931:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x24
   641  0024'                    	ds	1
   642  0025'                    ??_grabLeftIR:
   643  0025'                    ??_grabRightIR:
   644  0025'                    ??_VerifySignal:
   645  0025'                    isdigit@c:
   646                           	opt stack 0
   647  0025'                    delay_s@i:
   648                           	opt stack 0
   649  0025'                    delay_tenth_s@i:
   650                           	opt stack 0
   651  0025'                    ___wmul@multiplicand:
   652                           	opt stack 0
   653  0025'                    ___lwdiv@divisor:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x25
   657  0025'                    	ds	1
   658  0026'                    LCDout@number:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x26
   662  0026'                    	ds	1
   663  0027'                    SendLCD@type:
   664                           	opt stack 0
   665  0027'                    ___wmul@product:
   666                           	opt stack 0
   667  0027'                    ___lwdiv@quotient:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x27
   671  0027'                    	ds	1
   672  0028'                    SendLCD@Byte:
   673                           	opt stack 0
   674  0028'                    grabRightIR@IR_signal:
   675                           	opt stack 0
   676  0028'                    grabLeftIR@IR_signal:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x28
   680  0028'                    	ds	1
   681  0029'                    ??_initLCD:
   682  0029'                    ?___awdiv:
   683                           	opt stack 0
   684  0029'                    SetLine@line:
   685                           	opt stack 0
   686  0029'                    ___lwdiv@counter:
   687                           	opt stack 0
   688  0029'                    LCD_String@string:
   689                           	opt stack 0
   690  0029'                    ___awdiv@dividend:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x29
   694  0029'                    	ds	1
   695  002A'                    ?___lwmod:
   696                           	opt stack 0
   697  002A'                    grabRightIR@i:
   698                           	opt stack 0
   699  002A'                    grabLeftIR@i:
   700                           	opt stack 0
   701  002A'                    ___lwmod@dividend:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x2A
   705  002A'                    	ds	1
   706  002B'                    VerifySignal@checksum:
   707                           	opt stack 0
   708  002B'                    ___awdiv@divisor:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2B
   712  002B'                    	ds	1
   713  002C'                    VerifySignal@hexByte:
   714                           	opt stack 0
   715  002C'                    ___lwmod@divisor:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2C
   719  002C'                    	ds	1
   720  002D'                    ___awdiv@counter:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2D
   724  002D'                    	ds	1
   725  002E'                    VerifySignal@i:
   726                           	opt stack 0
   727  002E'                    ___awdiv@sign:
   728                           	opt stack 0
   729  002E'                    ___lwmod@counter:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x2E
   733  002E'                    	ds	1
   734  002F'                    ?_sprintf:
   735                           	opt stack 0
   736  002F'                    sprintf@sp:
   737                           	opt stack 0
   738  002F'                    ___awdiv@quotient:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x2F
   742  002F'                    	ds	2
   743  0031'                    setMotorPWM@m:
   744                           	opt stack 0
   745  0031'                    sprintf@f:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x31
   749  0031'                    	ds	2
   750  0033'                    ??_setMotorPWM:
   751                           
   752                           ; 0 bytes @ 0x33
   753  0033'                    	ds	5
   754  0038'                    
   755                           ; 0 bytes @ 0x38
   756  0038'                    	ds	1
   757  0039'                    tblptru	equ	0xFF8
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           
   761                           ; 0 bytes @ 0x39
   762 ;;
   763 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   764 ;;
   765 ;; *************** function _main *****************
   766 ;; Defined at:
   767 ;;		line 51 in file "main.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   772 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   773 ;;  buf            40  200[BANK1 ] unsigned char [40]
   774 ;;  Message        10  240[BANK1 ] unsigned char [10]
   775 ;;  mR              9    9[BANK2 ] struct DC_motor
   776 ;;  mL              9    0[BANK2 ] struct DC_motor
   777 ;;  SensorResult    4   79[BANK0 ] unsigned int [2]
   778 ;;  Move            1   86[BANK0 ] unsigned char 
   779 ;;  i               1   85[BANK0 ] unsigned char 
   780 ;;  DirectionFou    1   84[BANK0 ] char 
   781 ;;  ScanAngle       1   83[BANK0 ] unsigned char 
   782 ;; Return value:  Size  Location     Type
   783 ;;		None               void
   784 ;; Registers used:
   785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   791 ;;      Params:         0       0       0       0
   792 ;;      Locals:         0       8     250      18
   793 ;;      Temps:          0       2       0       0
   794 ;;      Totals:         0      10     250      18
   795 ;;Total ram usage:      278 bytes
   796 ;; Hardware stack levels required when called:    8
   797 ;; This function calls:
   798 ;;		_LCD_String
   799 ;;		_ScanIR
   800 ;;		_ScanWithRange
   801 ;;		_SendLCD
   802 ;;		_SetLine
   803 ;;		_VerifySignal
   804 ;;		_delay_tenth_s
   805 ;;		_enableSensor
   806 ;;		_fullSpeedAhead
   807 ;;		_fullSpeedBack
   808 ;;		_grabLeftIR
   809 ;;		_grabRightIR
   810 ;;		_initIR
   811 ;;		_initLCD
   812 ;;		_initMotorPWM
   813 ;;		_initRFID
   814 ;;		_sprintf
   815 ;;		_stop
   816 ;; This function is called by:
   817 ;;		Startup code after reset
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text0
   822  0000'                    __ptext0:
   823                           	opt stack 0
   824  0000'                    _main:
   825                           	opt stack 23
   826                           
   827                           ;main.c: 54: unsigned char Message[10];
   828                           ;main.c: 55: unsigned char i=0;
   829                           
   830                           ;incstack = 0
   831  0000' 0E00               	movlw	0
   832  0002' 0100               	movlb	0	; () banked
   833  0004' 6F00'              	movwf	main@i& (0+255),b
   834                           
   835                           ;main.c: 56: signed char DirectionFound=0;
   836  0006' 0E00               	movlw	0
   837  0008' 0100               	movlb	0	; () banked
   838  000A' 6F00'              	movwf	main@DirectionFound& (0+255),b
   839                           
   840                           ;main.c: 57: char MoveTime[100];
   841                           ;main.c: 58: char MoveType[100];
   842                           ;main.c: 59: char Move=0;
   843  000C' 0E00               	movlw	0
   844  000E' 0100               	movlb	0	; () banked
   845  0010' 6F00'              	movwf	main@Move& (0+255),b
   846                           
   847                           ; BSR set to: 0
   848                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   849  0012' C000' F04F'        	movff	main@F3890,main@SensorResult
   850  0016' C001' F050'        	movff	main@F3890+1,main@SensorResult+1
   851  001A' C002' F051'        	movff	main@F3890+2,main@SensorResult+2
   852  001E' C003' F052'        	movff	main@F3890+3,main@SensorResult+3
   853                           
   854                           ;main.c: 61: char buf[40];
   855                           ;main.c: 63: unsigned char ScanAngle=6;
   856  0022' 0E06               	movlw	6
   857  0024' 0100               	movlb	0	; () banked
   858  0026' 6F00'              	movwf	main@ScanAngle& (0+255),b
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 66: INTCONbits.GIEH=1;
   862  0028' 8EF2               	bsf	intcon,7,c	;volatile
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 67: INTCONbits.GIEL=1;
   866  002A' 8CF2               	bsf	intcon,6,c	;volatile
   867                           
   868                           ; BSR set to: 0
   869                           ;main.c: 68: INTCONbits.PEIE=1;
   870  002C' 8CF2               	bsf	intcon,6,c	;volatile
   871                           
   872                           ; BSR set to: 0
   873                           ;main.c: 69: RCONbits.IPEN=1;
   874  002E' 8ED0               	bsf	4048,7,c	;volatile
   875                           
   876                           ; BSR set to: 0
   877                           ;main.c: 72: IPR1bits.RCIP=0;
   878  0030' 9A9F               	bcf	3999,5,c	;volatile
   879                           
   880                           ; BSR set to: 0
   881                           ;main.c: 73: PIE1bits.RCIE=1;
   882  0032' 8A9D               	bsf	3997,5,c	;volatile
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 76: TRISCbits.RC3=1;
   886  0034' 8694               	bsf	3988,3,c	;volatile
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 77: INTCONbits.INT0IE=1;
   890  0036' 88F2               	bsf	intcon,4,c	;volatile
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 80: PIR1bits.RC1IF=0;
   894  0038' 9A9E               	bcf	3998,5,c	;volatile
   895                           
   896                           ; BSR set to: 0
   897                           ;main.c: 81: INTCONbits.INT0IF=0;
   898  003A' 92F2               	bcf	intcon,1,c	;volatile
   899                           
   900                           ;main.c: 84: struct DC_motor mL, mR;
   901                           ;main.c: 85: mL.power=0;
   902  003C' 0E00               	movlw	0
   903  003E' 0102               	movlb	2	; () banked
   904  0040' 6F00'              	movwf	main@mL& (0+255),b
   905                           
   906                           ;main.c: 86: mL.direction=1;
   907  0042' 0E01               	movlw	1
   908  0044' 0102               	movlb	2	; () banked
   909  0046' 6F00'              	movwf	(main@mL+1)& (0+255),b
   910                           
   911                           ; BSR set to: 2
   912                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   913  0048' 0E79               	movlw	121
   914  004A' 0102               	movlb	2	; () banked
   915  004C' 6F00'              	movwf	(main@mL+2)& (0+255),b
   916  004E' 0E0F               	movlw	15
   917  0050' 0102               	movlb	2	; () banked
   918  0052' 6F00'              	movwf	(main@mL+3)& (0+255),b
   919                           
   920                           ; BSR set to: 2
   921                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   922  0054' 0E78               	movlw	120
   923  0056' 0102               	movlb	2	; () banked
   924  0058' 6F00'              	movwf	(main@mL+4)& (0+255),b
   925  005A' 0E0F               	movlw	15
   926  005C' 0102               	movlb	2	; () banked
   927  005E' 6F00'              	movwf	(main@mL+5)& (0+255),b
   928                           
   929                           ;main.c: 89: mL.dir_pin=0;
   930  0060' 0E00               	movlw	0
   931  0062' 0102               	movlb	2	; () banked
   932  0064' 6F00'              	movwf	(main@mL+6)& (0+255),b
   933                           
   934                           ;main.c: 90: mL.PWMperiod=199;
   935  0066' 0E00               	movlw	0
   936  0068' 0102               	movlb	2	; () banked
   937  006A' 6F00'              	movwf	(main@mL+8)& (0+255),b
   938  006C' 0EC7               	movlw	199
   939  006E' 6F00'              	movwf	(main@mL+7)& (0+255),b
   940                           
   941                           ;main.c: 92: mR.power=0;
   942  0070' 0E00               	movlw	0
   943  0072' 0102               	movlb	2	; () banked
   944  0074' 6F00'              	movwf	main@mR& (0+255),b
   945                           
   946                           ;main.c: 93: mR.direction=1;
   947  0076' 0E01               	movlw	1
   948  0078' 0102               	movlb	2	; () banked
   949  007A' 6F00'              	movwf	(main@mR+1)& (0+255),b
   950                           
   951                           ; BSR set to: 2
   952                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   953  007C' 0E77               	movlw	119
   954  007E' 0102               	movlb	2	; () banked
   955  0080' 6F00'              	movwf	(main@mR+2)& (0+255),b
   956  0082' 0E0F               	movlw	15
   957  0084' 0102               	movlb	2	; () banked
   958  0086' 6F00'              	movwf	(main@mR+3)& (0+255),b
   959                           
   960                           ; BSR set to: 2
   961                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   962  0088' 0E76               	movlw	118
   963  008A' 0102               	movlb	2	; () banked
   964  008C' 6F00'              	movwf	(main@mR+4)& (0+255),b
   965  008E' 0E0F               	movlw	15
   966  0090' 0102               	movlb	2	; () banked
   967  0092' 6F00'              	movwf	(main@mR+5)& (0+255),b
   968                           
   969                           ;main.c: 96: mR.dir_pin=2;
   970  0094' 0E02               	movlw	2
   971  0096' 0102               	movlb	2	; () banked
   972  0098' 6F00'              	movwf	(main@mR+6)& (0+255),b
   973                           
   974                           ;main.c: 97: mR.PWMperiod=199;
   975  009A' 0E00               	movlw	0
   976  009C' 0102               	movlb	2	; () banked
   977  009E' 6F00'              	movwf	(main@mR+8)& (0+255),b
   978  00A0' 0EC7               	movlw	199
   979  00A2' 6F00'              	movwf	(main@mR+7)& (0+255),b
   980                           
   981                           ;main.c: 99: OSCCON = 0x72;
   982  00A4' 0E72               	movlw	114
   983  00A6' 6ED3               	movwf	4051,c	;volatile
   984  00A8'                    l99:
   985  00A8' B4D3               	btfsc	4051,2,c	;volatile
   986  00AA' D20D               	goto	l4100
   987  00AC' D7FD               	goto	l99
   988  00AE'                    l3950:
   989                           
   990                           ;main.c: 111: stop(&mL, &mR);
   991  00AE' 0E00'              	movlw	low main@mL
   992  00B0' 0100               	movlb	0	; () banked
   993  00B2' 6F00'              	movwf	stop@mL& (0+255),b
   994  00B4' 0E00'              	movlw	high main@mL
   995  00B6' 0100               	movlb	0	; () banked
   996  00B8' 6F00'              	movwf	(stop@mL+1)& (0+255),b
   997  00BA' 0E00'              	movlw	low main@mR
   998  00BC' 0100               	movlb	0	; () banked
   999  00BE' 6F00'              	movwf	stop@mR& (0+255),b
  1000  00C0' 0E00'              	movlw	high main@mR
  1001  00C2' 0100               	movlb	0	; () banked
  1002  00C4' 6F00'              	movwf	(stop@mR+1)& (0+255),b
  1003  00C6' EC00' F000'        	call	_stop	;wreg free
  1004                           
  1005                           ;main.c: 112: RFID_Read=0;
  1006  00CA' 0E00               	movlw	0
  1007  00CC' 0101               	movlb	1	; () banked
  1008  00CE' 6F00'              	movwf	_RFID_Read& (0+255),b	;volatile
  1009                           
  1010                           ; BSR set to: 1
  1011                           ;main.c: 115: SensorResult[0]=grabLeftIR();
  1012  00D0' EC00' F000'        	call	_grabLeftIR	;wreg free
  1013  00D4' C023' F04F'        	movff	?_grabLeftIR,main@SensorResult
  1014  00D8' C024' F050'        	movff	?_grabLeftIR+1,main@SensorResult+1
  1015                           
  1016                           ;main.c: 116: SensorResult[1]=grabRightIR();
  1017  00DC' EC00' F000'        	call	_grabRightIR	;wreg free
  1018  00E0' C023' F051'        	movff	?_grabRightIR,main@SensorResult+2
  1019  00E4' C024' F052'        	movff	?_grabRightIR+1,main@SensorResult+3
  1020                           
  1021                           ;main.c: 120: CAP1BUFH=0;
  1022  00E8' 0E00               	movlw	0
  1023  00EA' 6E69               	movwf	3945,c	;volatile
  1024                           
  1025                           ;main.c: 121: CAP1BUFL=0;
  1026  00EC' 0E00               	movlw	0
  1027  00EE' 6E68               	movwf	3944,c	;volatile
  1028                           
  1029                           ;main.c: 122: CAP2BUFH=0;
  1030  00F0' 0E00               	movlw	0
  1031  00F2' 6E67               	movwf	3943,c	;volatile
  1032                           
  1033                           ;main.c: 123: CAP2BUFL=0;
  1034  00F4' 0E00               	movlw	0
  1035  00F6' 6E66               	movwf	3942,c	;volatile
  1036                           
  1037                           ;main.c: 126: SendLCD(0b00000001,0);
  1038  00F8' 0E00               	movlw	0
  1039  00FA' 6E27'              	movwf	SendLCD@type,c
  1040  00FC' 0E01               	movlw	1
  1041  00FE' EC00' F000'        	call	_SendLCD
  1042                           
  1043                           ;main.c: 127: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1044  0102' 0E21               	movlw	33
  1045  0104'                    u3387:
  1046  0104' 2EE8               	decfsz	wreg,f,c
  1047  0106' D7FE               	goto	u3387
  1048  0108' F000               	nop	
  1049                           
  1050                           ;main.c: 128: SendLCD(0b00000010,0);
  1051  010A' 0E00               	movlw	0
  1052  010C' 6E27'              	movwf	SendLCD@type,c
  1053  010E' 0E02               	movlw	2
  1054  0110' EC00' F000'        	call	_SendLCD
  1055                           
  1056                           ;main.c: 129: _delay((unsigned long)((2)*(8000000/4000.0)));
  1057  0114' 0E06               	movlw	6
  1058  0116' 0100               	movlb	0	; () banked
  1059  0118' 6F00'              	movwf	??_main& (0+255),b
  1060  011A' 0E30               	movlw	48
  1061  011C'                    u3397:
  1062  011C' 2EE8               	decfsz	wreg,f,c
  1063  011E' D7FE               	goto	u3397
  1064  0120' 2F00'              	decfsz	??_main& (0+255),f,b
  1065  0122' D7FC               	goto	u3397
  1066  0124' D000               	nop2	
  1067                           
  1068                           ;main.c: 130: SetLine(1);
  1069  0126' 0E01               	movlw	1
  1070  0128' EC00' F000'        	call	_SetLine
  1071                           
  1072                           ;main.c: 131: LCD_String("     Inert Mode");
  1073  012C' 0E00'              	movlw	low STR_1
  1074  012E' 6E29'              	movwf	LCD_String@string,c
  1075  0130' 0E00'              	movlw	high STR_1
  1076  0132' 6E2A'              	movwf	LCD_String@string+1,c
  1077  0134' EC00' F000'        	call	_LCD_String	;wreg free
  1078                           
  1079                           ;main.c: 132: SetLine(2);
  1080  0138' 0E02               	movlw	2
  1081  013A' EC00' F000'        	call	_SetLine
  1082                           
  1083                           ;main.c: 133: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  1084  013E' 0E00'              	movlw	low main@buf
  1085  0140' 6E2F'              	movwf	sprintf@sp,c
  1086  0142' 0E00'              	movlw	high main@buf
  1087  0144' 6E30'              	movwf	sprintf@sp+1,c
  1088  0146' 0E00'              	movlw	low STR_2
  1089  0148' 6E31'              	movwf	sprintf@f,c
  1090  014A' 0E00'              	movlw	high STR_2
  1091  014C' 6E32'              	movwf	sprintf@f+1,c
  1092  014E' C04F' F033'        	movff	main@SensorResult,?_sprintf+4
  1093  0152' C050' F034'        	movff	main@SensorResult+1,?_sprintf+5
  1094  0156' C051' F035'        	movff	main@SensorResult+2,?_sprintf+6
  1095  015A' C052' F036'        	movff	main@SensorResult+3,?_sprintf+7
  1096  015E' EC00' F000'        	call	_sprintf	;wreg free
  1097                           
  1098                           ;main.c: 134: LCD_String(buf);
  1099  0162' 0E00'              	movlw	low main@buf
  1100  0164' 6E29'              	movwf	LCD_String@string,c
  1101  0166' 0E00'              	movlw	high main@buf
  1102  0168' 6E2A'              	movwf	LCD_String@string+1,c
  1103  016A' EC00' F000'        	call	_LCD_String	;wreg free
  1104                           
  1105                           ;main.c: 136: break;
  1106  016E' D1AB               	goto	l4100
  1107  0170'                    l3984:
  1108                           
  1109                           ;main.c: 141: initMotorPWM();
  1110  0170' EC00' F000'        	call	_initMotorPWM	;wreg free
  1111                           
  1112                           ;main.c: 142: initRFID();
  1113  0174' EC00' F000'        	call	_initRFID	;wreg free
  1114                           
  1115                           ;main.c: 143: initLCD();
  1116  0178' EC00' F000'        	call	_initLCD	;wreg free
  1117                           
  1118                           ;main.c: 144: initIR();
  1119  017C' EC00' F000'        	call	_initIR	;wreg free
  1120                           
  1121                           ;main.c: 146: enableSensor(0, 1);
  1122  0180' 0E01               	movlw	1
  1123  0182' 6E23'              	movwf	enableSensor@status,c
  1124  0184' 0E00               	movlw	0
  1125  0186' EC00' F000'        	call	_enableSensor
  1126                           
  1127                           ;main.c: 147: enableSensor(1, 1);
  1128  018A' 0E01               	movlw	1
  1129  018C' 6E23'              	movwf	enableSensor@status,c
  1130  018E' 0E01               	movlw	1
  1131  0190' EC00' F000'        	call	_enableSensor
  1132                           
  1133                           ;main.c: 150: fullSpeedAhead(&mL, &mR);
  1134  0194' 0E00'              	movlw	low main@mL
  1135  0196' 0100               	movlb	0	; () banked
  1136  0198' 6F00'              	movwf	fullSpeedAhead@mL& (0+255),b
  1137  019A' 0E00'              	movlw	high main@mL
  1138  019C' 0100               	movlb	0	; () banked
  1139  019E' 6F00'              	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1140  01A0' 0E00'              	movlw	low main@mR
  1141  01A2' 0100               	movlb	0	; () banked
  1142  01A4' 6F00'              	movwf	fullSpeedAhead@mR& (0+255),b
  1143  01A6' 0E00'              	movlw	high main@mR
  1144  01A8' 0100               	movlb	0	; () banked
  1145  01AA' 6F00'              	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1146  01AC' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  1147                           
  1148                           ;main.c: 151: delay_tenth_s(1);
  1149  01B0' 0E01               	movlw	1
  1150  01B2' EC00' F000'        	call	_delay_tenth_s
  1151  01B6' D186               	goto	l4096
  1152  01B8'                    l4000:
  1153                           
  1154                           ;main.c: 163: SetLine(1);
  1155  01B8' 0E01               	movlw	1
  1156  01BA' EC00' F000'        	call	_SetLine
  1157                           
  1158                           ;main.c: 164: LCD_String("       Searching");
  1159  01BE' 0E00'              	movlw	low STR_3
  1160  01C0' 6E29'              	movwf	LCD_String@string,c
  1161  01C2' 0E00'              	movlw	high STR_3
  1162  01C4' 6E2A'              	movwf	LCD_String@string+1,c
  1163  01C6' EC00' F000'        	call	_LCD_String	;wreg free
  1164                           
  1165                           ;main.c: 166: if (DirectionFound==-1) {
  1166  01CA' 0100               	movlb	0	; () banked
  1167  01CC' 2900'              	incf	main@DirectionFound& (0+255),w,b
  1168  01CE' A4D8               	btfss	status,2,c
  1169  01D0' D02E               	goto	l4016
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 171: fullSpeedAhead(&mL, &mR);
  1173  01D2' 0E00'              	movlw	low main@mL
  1174  01D4' 0100               	movlb	0	; () banked
  1175  01D6' 6F00'              	movwf	fullSpeedAhead@mL& (0+255),b
  1176  01D8' 0E00'              	movlw	high main@mL
  1177  01DA' 0100               	movlb	0	; () banked
  1178  01DC' 6F00'              	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1179  01DE' 0E00'              	movlw	low main@mR
  1180  01E0' 0100               	movlb	0	; () banked
  1181  01E2' 6F00'              	movwf	fullSpeedAhead@mR& (0+255),b
  1182  01E4' 0E00'              	movlw	high main@mR
  1183  01E6' 0100               	movlb	0	; () banked
  1184  01E8' 6F00'              	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1185  01EA' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  1186                           
  1187                           ;main.c: 172: delay_tenth_s(ScanAngle);
  1188  01EE' 0100               	movlb	0	; () banked
  1189  01F0' 5100'              	movf	main@ScanAngle& (0+255),w,b
  1190  01F2' EC00' F000'        	call	_delay_tenth_s
  1191                           
  1192                           ;main.c: 173: stop(&mL,&mR);
  1193  01F6' 0E00'              	movlw	low main@mL
  1194  01F8' 0100               	movlb	0	; () banked
  1195  01FA' 6F00'              	movwf	stop@mL& (0+255),b
  1196  01FC' 0E00'              	movlw	high main@mL
  1197  01FE' 0100               	movlb	0	; () banked
  1198  0200' 6F00'              	movwf	(stop@mL+1)& (0+255),b
  1199  0202' 0E00'              	movlw	low main@mR
  1200  0204' 0100               	movlb	0	; () banked
  1201  0206' 6F00'              	movwf	stop@mR& (0+255),b
  1202  0208' 0E00'              	movlw	high main@mR
  1203  020A' 0100               	movlb	0	; () banked
  1204  020C' 6F00'              	movwf	(stop@mR+1)& (0+255),b
  1205  020E' EC00' F000'        	call	_stop	;wreg free
  1206                           
  1207                           ;main.c: 174: DirectionFound=0;
  1208  0212' 0E00               	movlw	0
  1209  0214' 0100               	movlb	0	; () banked
  1210  0216' 6F00'              	movwf	main@DirectionFound& (0+255),b
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;main.c: 175: MoveType[Move]=0;
  1214  0218' 0100               	movlb	0	; () banked
  1215  021A' 5100'              	movf	main@Move& (0+255),w,b
  1216  021C' 0D01               	mullw	1
  1217  021E' 0E00'              	movlw	low main@MoveType
  1218  0220' 24F3               	addwf	prodl,w,c
  1219  0222' 6ED9               	movwf	fsr2l,c
  1220  0224' 0E00'              	movlw	high main@MoveType
  1221  0226' 20F4               	addwfc	prodh,w,c
  1222  0228' 6EDA               	movwf	fsr2h,c
  1223  022A' 0E00               	movlw	0
  1224  022C' D127               	goto	L2
  1225  022E'                    l4016:
  1226                           
  1227                           ; BSR set to: 0
  1228  022E' 0100               	movlb	0	; () banked
  1229  0230' 5100'              	movf	main@DirectionFound& (0+255),w,b
  1230  0232' 0100               	movlb	0	; () banked
  1231  0234' A4D8               	btfss	status,2,c
  1232  0236' D01E               	goto	l4022
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 178: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1236  0238' 0E00'              	movlw	low main@mL
  1237  023A' 0100               	movlb	0	; () banked
  1238  023C' 6F00'              	movwf	ScanWithRange@mL& (0+255),b
  1239  023E' 0E00'              	movlw	high main@mL
  1240  0240' 0100               	movlb	0	; () banked
  1241  0242' 6F00'              	movwf	(ScanWithRange@mL+1)& (0+255),b
  1242  0244' 0E00'              	movlw	low main@mR
  1243  0246' 0100               	movlb	0	; () banked
  1244  0248' 6F00'              	movwf	ScanWithRange@mR& (0+255),b
  1245  024A' 0E00'              	movlw	high main@mR
  1246  024C' 0100               	movlb	0	; () banked
  1247  024E' 6F00'              	movwf	(ScanWithRange@mR+1)& (0+255),b
  1248  0250' C053' F011'        	movff	main@ScanAngle,ScanWithRange@tenth_seconds
  1249  0254' 0100               	movlb	0	; () banked
  1250  0256' 5100'              	movf	main@Move& (0+255),w,b
  1251  0258' 0D01               	mullw	1
  1252  025A' 0E00'              	movlw	low main@MoveTime
  1253  025C' 24F3               	addwf	prodl,w,c
  1254  025E' 0100               	movlb	0	; () banked
  1255  0260' 6F00'              	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1256  0262' 0E00'              	movlw	high main@MoveTime
  1257  0264' 20F4               	addwfc	prodh,w,c
  1258  0266' 0100               	movlb	0	; () banked
  1259  0268' 6F00'              	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1260  026A' EC00' F000'        	call	_ScanWithRange	;wreg free
  1261  026E' 0100               	movlb	0	; () banked
  1262  0270' 6F00'              	movwf	main@DirectionFound& (0+255),b
  1263  0272' D02E               	goto	l4030
  1264  0274'                    l4022:
  1265                           
  1266                           ; BSR set to: 0
  1267  0274' 0100               	movlb	0	; () banked
  1268  0276' 0500'              	decf	main@DirectionFound& (0+255),w,b
  1269  0278' A4D8               	btfss	status,2,c
  1270  027A' D023               	goto	l4026
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 182: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1274  027C' 0E00'              	movlw	low main@mL
  1275  027E' 0100               	movlb	0	; () banked
  1276  0280' 6F00'              	movwf	ScanIR@mL& (0+255),b
  1277  0282' 0E00'              	movlw	high main@mL
  1278  0284' 0100               	movlb	0	; () banked
  1279  0286' 6F00'              	movwf	(ScanIR@mL+1)& (0+255),b
  1280  0288' 0E00'              	movlw	low main@mR
  1281  028A' 0100               	movlb	0	; () banked
  1282  028C' 6F00'              	movwf	ScanIR@mR& (0+255),b
  1283  028E' 0E00'              	movlw	high main@mR
  1284  0290' 0100               	movlb	0	; () banked
  1285  0292' 6F00'              	movwf	(ScanIR@mR+1)& (0+255),b
  1286  0294' 0E00'              	movlw	low main@Move
  1287  0296' 0100               	movlb	0	; () banked
  1288  0298' 6F00'              	movwf	ScanIR@Move& (0+255),b
  1289  029A' 0E00'              	movlw	high main@Move
  1290  029C' 0100               	movlb	0	; () banked
  1291  029E' 6F00'              	movwf	(ScanIR@Move+1)& (0+255),b
  1292  02A0' 0E00'              	movlw	low main@MoveTime
  1293  02A2' 0100               	movlb	0	; () banked
  1294  02A4' 6F00'              	movwf	ScanIR@MoveTime& (0+255),b
  1295  02A6' 0E00'              	movlw	high main@MoveTime
  1296  02A8' 0100               	movlb	0	; () banked
  1297  02AA' 6F00'              	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1298  02AC' 0E00'              	movlw	low main@MoveType
  1299  02AE' 0100               	movlb	0	; () banked
  1300  02B0' 6F00'              	movwf	ScanIR@MoveType& (0+255),b
  1301  02B2' 0E00'              	movlw	high main@MoveType
  1302  02B4' 0100               	movlb	0	; () banked
  1303  02B6' 6F00'              	movwf	(ScanIR@MoveType+1)& (0+255),b
  1304  02B8' EC00' F000'        	call	_ScanIR	;wreg free
  1305  02BC' 0100               	movlb	0	; () banked
  1306  02BE' 6F00'              	movwf	main@DirectionFound& (0+255),b
  1307                           
  1308                           ;main.c: 183: } else if (DirectionFound==2) {
  1309  02C0' D0DE               	goto	l4086
  1310  02C2'                    l4026:
  1311                           
  1312                           ; BSR set to: 0
  1313  02C2' 0E02               	movlw	2
  1314  02C4' 0100               	movlb	0	; () banked
  1315  02C6' 1900'              	xorwf	main@DirectionFound& (0+255),w,b
  1316  02C8' A4D8               	btfss	status,2,c
  1317  02CA' D0D9               	goto	l4086
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 185: mode=2;
  1321  02CC' 0E02               	movlw	2
  1322  02CE' 6E01'              	movwf	_mode,c	;volatile
  1323  02D0'                    l4030:
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;main.c: 186: MoveType[Move]=1;
  1327  02D0' 0100               	movlb	0	; () banked
  1328  02D2' 5100'              	movf	main@Move& (0+255),w,b
  1329  02D4' 0D01               	mullw	1
  1330  02D6' 0E00'              	movlw	low main@MoveType
  1331  02D8' 24F3               	addwf	prodl,w,c
  1332  02DA' 6ED9               	movwf	fsr2l,c
  1333  02DC' 0E00'              	movlw	high main@MoveType
  1334  02DE' 20F4               	addwfc	prodh,w,c
  1335  02E0' 6EDA               	movwf	fsr2h,c
  1336  02E2' 0E01               	movlw	1
  1337  02E4' D0CB               	goto	L2
  1338  02E6'                    l4034:
  1339                           
  1340                           ;main.c: 197: if (RFID_Read) {
  1341  02E6' 0101               	movlb	1	; () banked
  1342  02E8' 5100'              	movf	_RFID_Read& (0+255),w,b	;volatile
  1343  02EA' B4D8               	btfsc	status,2,c
  1344  02EC' D09C               	goto	l4076
  1345                           
  1346                           ; BSR set to: 1
  1347                           ;main.c: 198: stop(&mL, &mR);
  1348  02EE' 0E00'              	movlw	low main@mL
  1349  02F0' 0100               	movlb	0	; () banked
  1350  02F2' 6F00'              	movwf	stop@mL& (0+255),b
  1351  02F4' 0E00'              	movlw	high main@mL
  1352  02F6' 0100               	movlb	0	; () banked
  1353  02F8' 6F00'              	movwf	(stop@mL+1)& (0+255),b
  1354  02FA' 0E00'              	movlw	low main@mR
  1355  02FC' 0100               	movlb	0	; () banked
  1356  02FE' 6F00'              	movwf	stop@mR& (0+255),b
  1357  0300' 0E00'              	movlw	high main@mR
  1358  0302' 0100               	movlb	0	; () banked
  1359  0304' 6F00'              	movwf	(stop@mR+1)& (0+255),b
  1360  0306' EC00' F000'        	call	_stop	;wreg free
  1361                           
  1362                           ;main.c: 199: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1363  030A' 0E03               	movlw	3
  1364  030C' 0100               	movlb	0	; () banked
  1365  030E' 1900'              	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1366  0310' A4D8               	btfss	status,2,c
  1367  0312' D002               	goto	u3280
  1368  0314' 0E01               	movlw	1
  1369  0316' D001               	goto	u3282
  1370  0318'                    u3280:
  1371  0318' 0E00               	movlw	0
  1372  031A'                    u3282:
  1373  031A' 0100               	movlb	0	; () banked
  1374  031C' 6F00'              	movwf	??_main& (0+255),b
  1375  031E' 0E02               	movlw	2
  1376  0320' 0100               	movlb	0	; () banked
  1377  0322' 1900'              	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1378  0324' A4D8               	btfss	status,2,c
  1379  0326' D002               	goto	u3290
  1380  0328' 0E01               	movlw	1
  1381  032A' D001               	goto	u3292
  1382  032C'                    u3290:
  1383  032C' 0E00               	movlw	0
  1384  032E'                    u3292:
  1385  032E' 0100               	movlb	0	; () banked
  1386  0330' 1500'              	andwf	??_main& (0+255),w,b
  1387  0332' A0E8               	btfss	wreg,0,c
  1388  0334' D0C8               	goto	l4100
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 200: if (VerifySignal(ReceivedString)){
  1392  0336' 0E00'              	movlw	low _ReceivedString
  1393  0338' 6E23'              	movwf	VerifySignal@Signal,c
  1394  033A' 0E00'              	movlw	high _ReceivedString
  1395  033C' 6E24'              	movwf	VerifySignal@Signal+1,c
  1396  033E' EC00' F000'        	call	_VerifySignal	;wreg free
  1397  0342' 0900               	iorlw	0
  1398  0344' B4D8               	btfsc	status,2,c
  1399  0346' D041               	goto	l4068
  1400                           
  1401                           ;main.c: 202: for (i=0; i<10; i++){
  1402  0348' 0E00               	movlw	0
  1403  034A' 0100               	movlb	0	; () banked
  1404  034C' 6F00'              	movwf	main@i& (0+255),b
  1405  034E'                    l4044:
  1406                           
  1407                           ; BSR set to: 0
  1408  034E' 0E09               	movlw	9
  1409  0350' 0100               	movlb	0	; () banked
  1410  0352' 6500'              	cpfsgt	main@i& (0+255),b
  1411  0354' D001               	goto	l4048
  1412  0356' D020               	goto	l4054
  1413  0358'                    l4048:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 203: Message[i] = ReceivedString[i+1];
  1417  0358' 0100               	movlb	0	; () banked
  1418  035A' 5100'              	movf	main@i& (0+255),w,b
  1419  035C' 0100               	movlb	0	; () banked
  1420  035E' 6F00'              	movwf	??_main& (0+255),b
  1421  0360' 6B00'              	clrf	(??_main+1)& (0+255),b
  1422  0362' 0E01               	movlw	1
  1423  0364' 0100               	movlb	0	; () banked
  1424  0366' 2700'              	addwf	??_main& (0+255),f,b
  1425  0368' 0E00               	movlw	0
  1426  036A' 2300'              	addwfc	(??_main+1)& (0+255),f,b
  1427  036C' 0E00'              	movlw	low _ReceivedString
  1428  036E' 0100               	movlb	0	; () banked
  1429  0370' 2500'              	addwf	??_main& (0+255),w,b
  1430  0372' 6ED9               	movwf	fsr2l,c
  1431  0374' 0E00'              	movlw	high _ReceivedString
  1432  0376' 0100               	movlb	0	; () banked
  1433  0378' 2100'              	addwfc	(??_main+1)& (0+255),w,b
  1434  037A' 6EDA               	movwf	fsr2h,c
  1435  037C' 0100               	movlb	0	; () banked
  1436  037E' 5100'              	movf	main@i& (0+255),w,b
  1437  0380' 0D01               	mullw	1
  1438  0382' 0E00'              	movlw	low main@Message
  1439  0384' 24F3               	addwf	prodl,w,c
  1440  0386' 6EE1               	movwf	fsr1l,c
  1441  0388' 0E00'              	movlw	high main@Message
  1442  038A' 20F4               	addwfc	prodh,w,c
  1443  038C' 6EE2               	movwf	fsr1h,c
  1444  038E' CFDF FFE7          	movff	indf2,indf1
  1445                           
  1446                           ; BSR set to: 0
  1447  0392' 0100               	movlb	0	; () banked
  1448  0394' 2B00'              	incf	main@i& (0+255),f,b
  1449  0396' D7DB               	goto	l4044
  1450  0398'                    l4054:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;main.c: 204: }
  1454                           ;main.c: 207: for (i=0; i<16; i++) {
  1455  0398' 0E00               	movlw	0
  1456  039A' 0100               	movlb	0	; () banked
  1457  039C' 6F00'              	movwf	main@i& (0+255),b
  1458  039E'                    l4056:
  1459                           
  1460                           ; BSR set to: 0
  1461  039E' 0E0F               	movlw	15
  1462  03A0' 0100               	movlb	0	; () banked
  1463  03A2' 6500'              	cpfsgt	main@i& (0+255),b
  1464  03A4' D001               	goto	l4060
  1465  03A6' D00E               	goto	l4066
  1466  03A8'                    l4060:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;main.c: 208: ReceivedString[i]=0;
  1470  03A8' 0100               	movlb	0	; () banked
  1471  03AA' 5100'              	movf	main@i& (0+255),w,b
  1472  03AC' 0D01               	mullw	1
  1473  03AE' 0E00'              	movlw	low _ReceivedString
  1474  03B0' 24F3               	addwf	prodl,w,c
  1475  03B2' 6ED9               	movwf	fsr2l,c
  1476  03B4' 0E00'              	movlw	high _ReceivedString
  1477  03B6' 20F4               	addwfc	prodh,w,c
  1478  03B8' 6EDA               	movwf	fsr2h,c
  1479  03BA' 0E00               	movlw	0
  1480  03BC' 6EDF               	movwf	indf2,c
  1481                           
  1482                           ; BSR set to: 0
  1483  03BE' 0100               	movlb	0	; () banked
  1484  03C0' 2B00'              	incf	main@i& (0+255),f,b
  1485  03C2' D7ED               	goto	l4056
  1486  03C4'                    l4066:
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 209: }
  1490                           ;main.c: 210: mode=3;
  1491  03C4' 0E03               	movlw	3
  1492  03C6' 6E01'              	movwf	_mode,c	;volatile
  1493                           
  1494                           ;main.c: 212: } else {
  1495  03C8' D07E               	goto	l4100
  1496  03CA'                    l4068:
  1497                           
  1498                           ;main.c: 213: fullSpeedBack(&mL,&mR);
  1499  03CA' 0E00'              	movlw	low main@mL
  1500  03CC' 0100               	movlb	0	; () banked
  1501  03CE' 6F00'              	movwf	fullSpeedBack@mL& (0+255),b
  1502  03D0' 0E00'              	movlw	high main@mL
  1503  03D2' 0100               	movlb	0	; () banked
  1504  03D4' 6F00'              	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1505  03D6' 0E00'              	movlw	low main@mR
  1506  03D8' 0100               	movlb	0	; () banked
  1507  03DA' 6F00'              	movwf	fullSpeedBack@mR& (0+255),b
  1508  03DC' 0E00'              	movlw	high main@mR
  1509  03DE' 0100               	movlb	0	; () banked
  1510  03E0' 6F00'              	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1511  03E2' EC00' F000'        	call	_fullSpeedBack	;wreg free
  1512                           
  1513                           ;main.c: 214: delay_tenth_s(5);
  1514  03E6' 0E05               	movlw	5
  1515  03E8' EC00' F000'        	call	_delay_tenth_s
  1516                           
  1517                           ;main.c: 215: stop(&mL,&mR);
  1518  03EC' 0E00'              	movlw	low main@mL
  1519  03EE' 0100               	movlb	0	; () banked
  1520  03F0' 6F00'              	movwf	stop@mL& (0+255),b
  1521  03F2' 0E00'              	movlw	high main@mL
  1522  03F4' 0100               	movlb	0	; () banked
  1523  03F6' 6F00'              	movwf	(stop@mL+1)& (0+255),b
  1524  03F8' 0E00'              	movlw	low main@mR
  1525  03FA' 0100               	movlb	0	; () banked
  1526  03FC' 6F00'              	movwf	stop@mR& (0+255),b
  1527  03FE' 0E00'              	movlw	high main@mR
  1528  0400' 0100               	movlb	0	; () banked
  1529  0402' 6F00'              	movwf	(stop@mR+1)& (0+255),b
  1530  0404' EC00' F000'        	call	_stop	;wreg free
  1531                           
  1532                           ;main.c: 216: fullSpeedAhead(&mL,&mR);
  1533  0408' 0E00'              	movlw	low main@mL
  1534  040A' 0100               	movlb	0	; () banked
  1535  040C' 6F00'              	movwf	fullSpeedAhead@mL& (0+255),b
  1536  040E' 0E00'              	movlw	high main@mL
  1537  0410' 0100               	movlb	0	; () banked
  1538  0412' 6F00'              	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1539  0414' 0E00'              	movlw	low main@mR
  1540  0416' 0100               	movlb	0	; () banked
  1541  0418' 6F00'              	movwf	fullSpeedAhead@mR& (0+255),b
  1542  041A' 0E00'              	movlw	high main@mR
  1543  041C' 0100               	movlb	0	; () banked
  1544  041E' 6F00'              	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1545  0420' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  1546                           
  1547                           ;main.c: 217: }
  1548                           ;main.c: 218: }
  1549                           ;main.c: 219: } else {
  1550  0424' D050               	goto	l4100
  1551  0426'                    l4076:
  1552                           
  1553                           ;main.c: 220: DirectionFound=1;
  1554  0426' 0E01               	movlw	1
  1555  0428' 0100               	movlb	0	; () banked
  1556  042A' 6F00'              	movwf	main@DirectionFound& (0+255),b
  1557                           
  1558                           ;main.c: 221: mode=1;
  1559  042C' 0E01               	movlw	1
  1560  042E' 6E01'              	movwf	_mode,c	;volatile
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 222: fullSpeedAhead(&mL,&mR);
  1564  0430' 0E00'              	movlw	low main@mL
  1565  0432' 0100               	movlb	0	; () banked
  1566  0434' 6F00'              	movwf	fullSpeedAhead@mL& (0+255),b
  1567  0436' 0E00'              	movlw	high main@mL
  1568  0438' 0100               	movlb	0	; () banked
  1569  043A' 6F00'              	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1570  043C' 0E00'              	movlw	low main@mR
  1571  043E' 0100               	movlb	0	; () banked
  1572  0440' 6F00'              	movwf	fullSpeedAhead@mR& (0+255),b
  1573  0442' 0E00'              	movlw	high main@mR
  1574  0444' 0100               	movlb	0	; () banked
  1575  0446' 6F00'              	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1576  0448' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  1577                           
  1578                           ;main.c: 223: delay_tenth_s(5);
  1579  044C' 0E05               	movlw	5
  1580  044E' EC00' F000'        	call	_delay_tenth_s
  1581                           
  1582                           ;main.c: 225: MoveType[Move] = 0;
  1583  0452' 0100               	movlb	0	; () banked
  1584  0454' 5100'              	movf	main@Move& (0+255),w,b
  1585  0456' 0D01               	mullw	1
  1586  0458' 0E00'              	movlw	low main@MoveType
  1587  045A' 24F3               	addwf	prodl,w,c
  1588  045C' 6ED9               	movwf	fsr2l,c
  1589  045E' 0E00'              	movlw	high main@MoveType
  1590  0460' 20F4               	addwfc	prodh,w,c
  1591  0462' 6EDA               	movwf	fsr2h,c
  1592  0464' 0E00               	movlw	0
  1593  0466' 6EDF               	movwf	indf2,c
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 226: MoveTime[Move] = 5;
  1597  0468' 0100               	movlb	0	; () banked
  1598  046A' 5100'              	movf	main@Move& (0+255),w,b
  1599  046C' 0D01               	mullw	1
  1600  046E' 0E00'              	movlw	low main@MoveTime
  1601  0470' 24F3               	addwf	prodl,w,c
  1602  0472' 6ED9               	movwf	fsr2l,c
  1603  0474' 0E00'              	movlw	high main@MoveTime
  1604  0476' 20F4               	addwfc	prodh,w,c
  1605  0478' 6EDA               	movwf	fsr2h,c
  1606  047A' 0E05               	movlw	5
  1607  047C'                    L2:
  1608  047C' 6EDF               	movwf	indf2,c
  1609  047E'                    l4086:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 227: Move++;
  1613  047E' 0100               	movlb	0	; () banked
  1614  0480' 2B00'              	incf	main@Move& (0+255),f,b
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;main.c: 228: }
  1618                           ;main.c: 230: break;
  1619  0482' D021               	goto	l4100
  1620  0484'                    l4088:
  1621                           
  1622                           ;main.c: 235: SetLine(1);
  1623  0484' 0E01               	movlw	1
  1624  0486' EC00' F000'        	call	_SetLine
  1625                           
  1626                           ;main.c: 236: LCD_String("      Found Bomb!");
  1627  048A' 0E00'              	movlw	low STR_4
  1628  048C' 6E29'              	movwf	LCD_String@string,c
  1629  048E' 0E00'              	movlw	high STR_4
  1630  0490' 6E2A'              	movwf	LCD_String@string+1,c
  1631  0492' EC00' F000'        	call	_LCD_String	;wreg free
  1632                           
  1633                           ;main.c: 237: SetLine(2);
  1634  0496' 0E02               	movlw	2
  1635  0498' EC00' F000'        	call	_SetLine
  1636                           
  1637                           ;main.c: 238: LCD_String("      Going Home");
  1638  049C' 0E00'              	movlw	low STR_5
  1639  049E' 6E29'              	movwf	LCD_String@string,c
  1640  04A0' 0E00'              	movlw	high STR_5
  1641  04A2' 6E2A'              	movwf	LCD_String@string+1,c
  1642  04A4' EC00' F000'        	call	_LCD_String	;wreg free
  1643                           
  1644                           ;main.c: 239: stop(&mL,&mR);
  1645  04A8' 0E00'              	movlw	low main@mL
  1646  04AA' 0100               	movlb	0	; () banked
  1647  04AC' 6F00'              	movwf	stop@mL& (0+255),b
  1648  04AE' 0E00'              	movlw	high main@mL
  1649  04B0' 0100               	movlb	0	; () banked
  1650  04B2' 6F00'              	movwf	(stop@mL+1)& (0+255),b
  1651  04B4' 0E00'              	movlw	low main@mR
  1652  04B6' 0100               	movlb	0	; () banked
  1653  04B8' 6F00'              	movwf	stop@mR& (0+255),b
  1654  04BA' 0E00'              	movlw	high main@mR
  1655  04BC' 0100               	movlb	0	; () banked
  1656  04BE' 6F00'              	movwf	(stop@mR+1)& (0+255),b
  1657  04C0' EC00' F000'        	call	_stop	;wreg free
  1658  04C4'                    l4096:
  1659                           
  1660                           ;main.c: 258: mode=-1;
  1661  04C4' 6801'              	setf	_mode,c	;volatile
  1662  04C6'                    l4100:
  1663  04C6' 5001'              	movf	_mode,w,c	;volatile
  1664                           
  1665                           ; Switch size 1, requested type "space"
  1666                           ; Number of cases is 5, Range of values is 0 to 255
  1667                           ; switch strategies available:
  1668                           ; Name         Instructions Cycles
  1669                           ; simple_byte           16     9 (average)
  1670                           ;	Chosen strategy is simple_byte
  1671  04C8' 0A00               	xorlw	0	; case 0
  1672  04CA' B4D8               	btfsc	status,2,c
  1673  04CC' D651               	goto	l3984
  1674  04CE' 0A01               	xorlw	1	; case 1
  1675  04D0' B4D8               	btfsc	status,2,c
  1676  04D2' D672               	goto	l4000
  1677  04D4' 0A03               	xorlw	3	; case 2
  1678  04D6' B4D8               	btfsc	status,2,c
  1679  04D8' D706               	goto	l4034
  1680  04DA' 0A01               	xorlw	1	; case 3
  1681  04DC' B4D8               	btfsc	status,2,c
  1682  04DE' D7D2               	goto	l4088
  1683  04E0' 0AFC               	xorlw	252	; case 255
  1684  04E2' B4D8               	btfsc	status,2,c
  1685  04E4' D5E4               	goto	l3950
  1686  04E6' D7EF               	goto	l4100
  1687  04E8'                    __end_of_main:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           prodh	equ	0xFF4
  1691                           prodl	equ	0xFF3
  1692                           intcon	equ	0xFF2
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           indf1	equ	0xFE7
  1696                           fsr1h	equ	0xFE2
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _initRFID *****************
  1704 ;; Defined at:
  1705 ;;		line 5 in file "RFID_Reader.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, status,0
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1719 ;;      Params:         0       0       0       0
  1720 ;;      Locals:         0       0       0       0
  1721 ;;      Temps:          0       0       0       0
  1722 ;;      Totals:         0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text1
  1734  0000'                    __ptext1:
  1735                           	opt stack 0
  1736  0000'                    _initRFID:
  1737                           	opt stack 27
  1738                           
  1739                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1740                           
  1741                           ;incstack = 0
  1742  0000' 5094               	movf	3988,w,c	;volatile
  1743  0002' 09C0               	iorlw	192
  1744  0004' 6E94               	movwf	3988,c	;volatile
  1745                           
  1746                           ;RFID_Reader.c: 10: SPBRG=205;
  1747  0006' 0ECD               	movlw	205
  1748  0008' 6EAF               	movwf	4015,c	;volatile
  1749                           
  1750                           ;RFID_Reader.c: 11: SPBRGH=0;
  1751  000A' 0E00               	movlw	0
  1752  000C' 6EB0               	movwf	4016,c	;volatile
  1753                           
  1754                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1755  000E' 86AA               	bsf	4010,3,c	;volatile
  1756                           
  1757                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1758  0010' 84AC               	bsf	4012,2,c	;volatile
  1759                           
  1760                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1761  0012' 88AB               	bsf	4011,4,c	;volatile
  1762                           
  1763                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1764  0014' 8EAB               	bsf	4011,7,c	;volatile
  1765                           
  1766                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1767  0016' 98AC               	bcf	4012,4,c	;volatile
  1768                           
  1769                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1770  0018' 9CAB               	bcf	4011,6,c	;volatile
  1771  001A' 0012               	return		;funcret
  1772  001C'                    __end_of_initRFID:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           prodh	equ	0xFF4
  1776                           prodl	equ	0xFF3
  1777                           intcon	equ	0xFF2
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           indf1	equ	0xFE7
  1781                           fsr1h	equ	0xFE2
  1782                           fsr1l	equ	0xFE1
  1783                           indf2	equ	0xFDF
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _initMotorPWM *****************
  1789 ;; Defined at:
  1790 ;;		line 4 in file "dc_motor.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;		None               void
  1797 ;; Registers used:
  1798 ;;		wreg, status,2
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1804 ;;      Params:         0       0       0       0
  1805 ;;      Locals:         0       0       0       0
  1806 ;;      Temps:          0       0       0       0
  1807 ;;      Totals:         0       0       0       0
  1808 ;;Total ram usage:        0 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    3
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text2
  1819  0000'                    __ptext2:
  1820                           	opt stack 0
  1821  0000'                    _initMotorPWM:
  1822                           	opt stack 27
  1823                           
  1824                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1825                           
  1826                           ;incstack = 0
  1827  0000' 0E00               	movlw	0
  1828  0002' 6E7F               	movwf	3967,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1831  0004' 0E80               	movlw	128
  1832  0006' 6E7E               	movwf	3966,c	;volatile
  1833                           
  1834                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1835  0008' 0E6F               	movlw	111
  1836  000A' 6E6F               	movwf	3951,c	;volatile
  1837                           
  1838                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1839  000C' 0E00               	movlw	0
  1840  000E' 6E6E               	movwf	3950,c	;volatile
  1841                           
  1842                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1843  0010' 0EC7               	movlw	199
  1844  0012' 6E7B               	movwf	3963,c	;volatile
  1845                           
  1846                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1847  0014' 0E00               	movlw	0
  1848  0016' 6E7A               	movwf	3962,c	;volatile
  1849                           
  1850                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1851  0018' 0E00               	movlw	0
  1852  001A' 6E79               	movwf	3961,c	;volatile
  1853                           
  1854                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1855  001C' 0E00               	movlw	0
  1856  001E' 6E78               	movwf	3960,c	;volatile
  1857                           
  1858                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1859  0020' 0E00               	movlw	0
  1860  0022' 6E77               	movwf	3959,c	;volatile
  1861                           
  1862                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1863  0024' 0E00               	movlw	0
  1864  0026' 6E76               	movwf	3958,c	;volatile
  1865                           
  1866                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1867  0028' 9093               	bcf	3987,0,c	;volatile
  1868                           
  1869                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1870  002A' 9293               	bcf	3987,1,c	;volatile
  1871                           
  1872                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1873  002C' 9493               	bcf	3987,2,c	;volatile
  1874                           
  1875                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1876  002E' 9693               	bcf	3987,3,c	;volatile
  1877  0030' 0012               	return		;funcret
  1878  0032'                    __end_of_initMotorPWM:
  1879                           	opt stack 0
  1880                           tblptru	equ	0xFF8
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           intcon	equ	0xFF2
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           indf1	equ	0xFE7
  1887                           fsr1h	equ	0xFE2
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _initLCD *****************
  1895 ;; Defined at:
  1896 ;;		line 38 in file "LCD.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;		None               void
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1910 ;;      Params:         0       0       0       0
  1911 ;;      Locals:         0       0       0       0
  1912 ;;      Temps:          1       0       0       0
  1913 ;;      Totals:         1       0       0       0
  1914 ;;Total ram usage:        1 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    6
  1917 ;; This function calls:
  1918 ;;		_LCDout
  1919 ;;		_SendLCD
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text3
  1926  0000'                    __ptext3:
  1927                           	opt stack 0
  1928  0000'                    _initLCD:
  1929                           	opt stack 24
  1930                           
  1931                           ;LCD.c: 44: TRISAbits.RA6=0;
  1932                           
  1933                           ;incstack = 0
  1934  0000' 9C92               	bcf	3986,6,c	;volatile
  1935                           
  1936                           ;LCD.c: 45: TRISCbits.RC0=0;
  1937  0002' 9094               	bcf	3988,0,c	;volatile
  1938                           
  1939                           ;LCD.c: 46: TRISCbits.RC1=0;
  1940  0004' 9294               	bcf	3988,1,c	;volatile
  1941                           
  1942                           ;LCD.c: 47: TRISCbits.RC2=0;
  1943  0006' 9494               	bcf	3988,2,c	;volatile
  1944                           
  1945                           ;LCD.c: 48: TRISDbits.RD0=0;
  1946  0008' 9095               	bcf	3989,0,c	;volatile
  1947                           
  1948                           ;LCD.c: 49: TRISDbits.RD1=0;
  1949  000A' 9295               	bcf	3989,1,c	;volatile
  1950                           
  1951                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1952  000C' 0E27               	movlw	39
  1953  000E' 6E00'              	movwf	??_initLCD& (0+255),c
  1954  0010' 0EF5               	movlw	245
  1955  0012'                    u3407:
  1956  0012' 2EE8               	decfsz	wreg,f,c
  1957  0014' D7FE               	goto	u3407
  1958  0016' 2E00'              	decfsz	??_initLCD& (0+255),f,c
  1959  0018' D7FC               	goto	u3407
  1960  001A' F000               	nop	
  1961                           
  1962                           ;LCD.c: 52: LCDout(0b0011);
  1963  001C' 0E03               	movlw	3
  1964  001E' EC00' F000'        	call	_LCDout
  1965                           
  1966                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1967  0022' 0E0D               	movlw	13
  1968  0024' 6E00'              	movwf	??_initLCD& (0+255),c
  1969  0026' 0EFC               	movlw	252
  1970  0028'                    u3417:
  1971  0028' 2EE8               	decfsz	wreg,f,c
  1972  002A' D7FE               	goto	u3417
  1973  002C' 2E00'              	decfsz	??_initLCD& (0+255),f,c
  1974  002E' D7FC               	goto	u3417
  1975                           
  1976                           ;LCD.c: 54: LCDout(0b0011);
  1977  0030' 0E03               	movlw	3
  1978  0032' EC00' F000'        	call	_LCDout
  1979                           
  1980                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1981  0036' 0E85               	movlw	133
  1982  0038'                    u3427:
  1983  0038' 2EE8               	decfsz	wreg,f,c
  1984  003A' D7FE               	goto	u3427
  1985  003C' F000               	nop	
  1986                           
  1987                           ;LCD.c: 56: LCDout(0b0011);
  1988  003E' 0E03               	movlw	3
  1989  0040' EC00' F000'        	call	_LCDout
  1990                           
  1991                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1992  0044' 0E21               	movlw	33
  1993  0046'                    u3437:
  1994  0046' 2EE8               	decfsz	wreg,f,c
  1995  0048' D7FE               	goto	u3437
  1996  004A' F000               	nop	
  1997                           
  1998                           ;LCD.c: 58: LCDout(0b0010);
  1999  004C' 0E02               	movlw	2
  2000  004E' EC00' F000'        	call	_LCDout
  2001                           
  2002                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2003  0052' 0E21               	movlw	33
  2004  0054'                    u3447:
  2005  0054' 2EE8               	decfsz	wreg,f,c
  2006  0056' D7FE               	goto	u3447
  2007  0058' F000               	nop	
  2008                           
  2009                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2010  005A' 0E00               	movlw	0
  2011  005C' 6E27'              	movwf	SendLCD@type,c
  2012  005E' 0E28               	movlw	40
  2013  0060' EC00' F000'        	call	_SendLCD
  2014                           
  2015                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2016  0064' 0E21               	movlw	33
  2017  0066'                    u3457:
  2018  0066' 2EE8               	decfsz	wreg,f,c
  2019  0068' D7FE               	goto	u3457
  2020  006A' F000               	nop	
  2021                           
  2022                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2023  006C' 0E00               	movlw	0
  2024  006E' 6E27'              	movwf	SendLCD@type,c
  2025  0070' 0E08               	movlw	8
  2026  0072' EC00' F000'        	call	_SendLCD
  2027                           
  2028                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2029  0076' 0E21               	movlw	33
  2030  0078'                    u3467:
  2031  0078' 2EE8               	decfsz	wreg,f,c
  2032  007A' D7FE               	goto	u3467
  2033  007C' F000               	nop	
  2034                           
  2035                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2036  007E' 0E00               	movlw	0
  2037  0080' 6E27'              	movwf	SendLCD@type,c
  2038  0082' 0E01               	movlw	1
  2039  0084' EC00' F000'        	call	_SendLCD
  2040                           
  2041                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2042  0088' 0E0D               	movlw	13
  2043  008A' 6E00'              	movwf	??_initLCD& (0+255),c
  2044  008C' 0EFC               	movlw	252
  2045  008E'                    u3477:
  2046  008E' 2EE8               	decfsz	wreg,f,c
  2047  0090' D7FE               	goto	u3477
  2048  0092' 2E00'              	decfsz	??_initLCD& (0+255),f,c
  2049  0094' D7FC               	goto	u3477
  2050                           
  2051                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2052  0096' 0E00               	movlw	0
  2053  0098' 6E27'              	movwf	SendLCD@type,c
  2054  009A' 0E06               	movlw	6
  2055  009C' EC00' F000'        	call	_SendLCD
  2056                           
  2057                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2058  00A0' 0E21               	movlw	33
  2059  00A2'                    u3487:
  2060  00A2' 2EE8               	decfsz	wreg,f,c
  2061  00A4' D7FE               	goto	u3487
  2062  00A6' F000               	nop	
  2063                           
  2064                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2065  00A8' 0E00               	movlw	0
  2066  00AA' 6E27'              	movwf	SendLCD@type,c
  2067  00AC' 0E0C               	movlw	12
  2068  00AE' EC00' F000'        	call	_SendLCD
  2069                           
  2070                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2071  00B2' 0E21               	movlw	33
  2072  00B4'                    u3497:
  2073  00B4' 2EE8               	decfsz	wreg,f,c
  2074  00B6' D7FE               	goto	u3497
  2075  00B8' F000               	nop	
  2076  00BA' 0012               	return		;funcret
  2077  00BC'                    __end_of_initLCD:
  2078                           	opt stack 0
  2079                           tblptru	equ	0xFF8
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           intcon	equ	0xFF2
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           indf1	equ	0xFE7
  2086                           fsr1h	equ	0xFE2
  2087                           fsr1l	equ	0xFE1
  2088                           indf2	equ	0xFDF
  2089                           fsr2h	equ	0xFDA
  2090                           fsr2l	equ	0xFD9
  2091                           status	equ	0xFD8
  2092                           
  2093 ;; *************** function _initIR *****************
  2094 ;; Defined at:
  2095 ;;		line 30 in file "IR_Reading.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;		None               void
  2102 ;; Registers used:
  2103 ;;		wreg, status,2
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2109 ;;      Params:         0       0       0       0
  2110 ;;      Locals:         0       0       0       0
  2111 ;;      Temps:          0       0       0       0
  2112 ;;      Totals:         0       0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    3
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text4
  2124  0000'                    __ptext4:
  2125                           	opt stack 0
  2126  0000'                    _initIR:
  2127                           	opt stack 27
  2128                           
  2129                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2130                           
  2131                           ;incstack = 0
  2132  0000' 9489               	bcf	3977,2,c	;volatile
  2133                           
  2134                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2135  0002' 9689               	bcf	3977,3,c	;volatile
  2136                           
  2137                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2138  0004' 8492               	bsf	3986,2,c	;volatile
  2139                           
  2140                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2141  0006' 8692               	bsf	3986,3,c	;volatile
  2142                           
  2143                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2144  0008' 94B8               	bcf	4024,2,c	;volatile
  2145                           
  2146                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2147  000A' 96B8               	bcf	4024,3,c	;volatile
  2148                           
  2149                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2150  000C' 9CB8               	bcf	4024,6,c	;volatile
  2151                           
  2152                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2153  000E' 9EB8               	bcf	4024,7,c	;volatile
  2154                           
  2155                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2156  0010' 0E06               	movlw	6
  2157  0012' 6E63               	movwf	3939,c	;volatile
  2158                           
  2159                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2160  0014' 0E06               	movlw	6
  2161  0016' 6E62               	movwf	3938,c	;volatile
  2162                           
  2163                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2164  0018' 9096               	bcf	3990,0,c	;volatile
  2165                           
  2166                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2167  001A' 9296               	bcf	3990,1,c	;volatile
  2168                           
  2169                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2170  001C' 0E59               	movlw	89
  2171  001E' 6EB7               	movwf	4023,c	;volatile
  2172  0020' 0012               	return		;funcret
  2173  0022'                    __end_of_initIR:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           indf1	equ	0xFE7
  2182                           fsr1h	equ	0xFE2
  2183                           fsr1l	equ	0xFE1
  2184                           indf2	equ	0xFDF
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _fullSpeedBack *****************
  2190 ;; Defined at:
  2191 ;;		line 125 in file "dc_motor.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  2194 ;;		 -> main@mL(9), 
  2195 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  2196 ;;		 -> main@mR(9), 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;		None               void
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2208 ;;      Params:         0       4       0       0
  2209 ;;      Locals:         0       0       0       0
  2210 ;;      Temps:          0       0       0       0
  2211 ;;      Totals:         0       4       0       0
  2212 ;;Total ram usage:        4 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    6
  2215 ;; This function calls:
  2216 ;;		_fullSpeedAhead
  2217 ;; This function is called by:
  2218 ;;		_main
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text5
  2223  0000'                    __ptext5:
  2224                           	opt stack 0
  2225  0000'                    _fullSpeedBack:
  2226                           	opt stack 24
  2227                           
  2228                           ;dc_motor.c: 128: mL->direction=0;
  2229                           
  2230                           ;incstack = 0
  2231  0000' 0100               	movlb	0	; () banked
  2232  0002' EE20 F001          	lfsr	2,1
  2233  0006' 5100'              	movf	fullSpeedBack@mL& (0+255),w,b
  2234  0008' 26D9               	addwf	fsr2l,f,c
  2235  000A' 5100'              	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2236  000C' 22DA               	addwfc	fsr2h,f,c
  2237  000E' 0E00               	movlw	0
  2238  0010' 6EDF               	movwf	indf2,c
  2239                           
  2240                           ;dc_motor.c: 129: mR->direction=0;
  2241  0012' 0100               	movlb	0	; () banked
  2242  0014' EE20 F001          	lfsr	2,1
  2243  0018' 5100'              	movf	fullSpeedBack@mR& (0+255),w,b
  2244  001A' 26D9               	addwf	fsr2l,f,c
  2245  001C' 5100'              	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2246  001E' 22DA               	addwfc	fsr2h,f,c
  2247  0020' 0E00               	movlw	0
  2248  0022' 6EDF               	movwf	indf2,c
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2252  0024' C006' F002'        	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2253  0028' C007' F003'        	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2254  002C' C008' F004'        	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2255  0030' C009' F005'        	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2256  0034' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  2257  0038' 0012               	return		;funcret
  2258  003A'                    __end_of_fullSpeedBack:
  2259                           	opt stack 0
  2260                           tblptru	equ	0xFF8
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           intcon	equ	0xFF2
  2264                           postinc0	equ	0xFEE
  2265                           wreg	equ	0xFE8
  2266                           indf1	equ	0xFE7
  2267                           fsr1h	equ	0xFE2
  2268                           fsr1l	equ	0xFE1
  2269                           indf2	equ	0xFDF
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _enableSensor *****************
  2275 ;; Defined at:
  2276 ;;		line 106 in file "IR_Reading.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  sensor          1    wreg     unsigned char 
  2279 ;;  status          1   35[COMRAM] unsigned char 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  sensor          1   36[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;		None               void
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2291 ;;      Params:         1       0       0       0
  2292 ;;      Locals:         1       0       0       0
  2293 ;;      Temps:          0       0       0       0
  2294 ;;      Totals:         2       0       0       0
  2295 ;;Total ram usage:        2 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    3
  2298 ;; This function calls:
  2299 ;;		Nothing
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text6
  2306  0000'                    __ptext6:
  2307                           	opt stack 0
  2308  0000'                    _enableSensor:
  2309                           	opt stack 27
  2310                           
  2311                           ;incstack = 0
  2312                           ;enableSensor@sensor stored from wreg
  2313  0000' 6E24'              	movwf	enableSensor@sensor,c
  2314                           
  2315                           ;IR_Reading.c: 108: if (sensor==0){
  2316  0002' 5024'              	movf	enableSensor@sensor,w,c
  2317  0004' A4D8               	btfss	status,2,c
  2318  0006' D006               	goto	l2636
  2319                           
  2320                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2321  0008' B023'              	btfsc	enableSensor@status,0,c
  2322  000A' D002               	bra	u1965
  2323  000C' 908D               	bcf	3981,0,c	;volatile
  2324  000E' D001               	bra	u1966
  2325  0010'                    u1965:
  2326  0010' 808D               	bsf	3981,0,c	;volatile
  2327  0012'                    u1966:
  2328                           
  2329                           ;IR_Reading.c: 110: } else if (sensor==1){
  2330  0012' 0012               	return	
  2331  0014'                    l2636:
  2332  0014' 0424'              	decf	enableSensor@sensor,w,c
  2333  0016' A4D8               	btfss	status,2,c
  2334  0018' 0012               	return	
  2335                           
  2336                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2337  001A' B023'              	btfsc	enableSensor@status,0,c
  2338  001C' D002               	bra	u1985
  2339  001E' 928D               	bcf	3981,1,c	;volatile
  2340  0020' D001               	bra	u1986
  2341  0022'                    u1985:
  2342  0022' 828D               	bsf	3981,1,c	;volatile
  2343  0024'                    u1986:
  2344  0024' 0012               	return	
  2345  0026'                    __end_of_enableSensor:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           intcon	equ	0xFF2
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           indf1	equ	0xFE7
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           indf2	equ	0xFDF
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function _VerifySignal *****************
  2362 ;; Defined at:
  2363 ;;		line 55 in file "RFID_Reader.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2366 ;;		 -> ReceivedString(16), 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  hexByte         2   44[COMRAM] unsigned int 
  2369 ;;  i               1   46[COMRAM] unsigned char 
  2370 ;;  checksum        1   43[COMRAM] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      unsigned char 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2380 ;;      Params:         2       0       0       0
  2381 ;;      Locals:         4       0       0       0
  2382 ;;      Temps:          6       0       0       0
  2383 ;;      Totals:        12       0       0       0
  2384 ;;Total ram usage:       12 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    3
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_main
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text7
  2395  0000'                    __ptext7:
  2396                           	opt stack 0
  2397  0000'                    _VerifySignal:
  2398                           	opt stack 27
  2399                           
  2400                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2401                           
  2402                           ;incstack = 0
  2403  0000' 0E00               	movlw	0
  2404  0002' 6E2B'              	movwf	VerifySignal@checksum,c
  2405                           
  2406                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2407  0004' 0E00               	movlw	0
  2408  0006' 6E2D'              	movwf	VerifySignal@hexByte+1,c
  2409  0008' 0E00               	movlw	0
  2410  000A' 6E2C'              	movwf	VerifySignal@hexByte,c
  2411                           
  2412                           ;RFID_Reader.c: 58: unsigned char i=0;
  2413  000C' 0E00               	movlw	0
  2414  000E' 6E2E'              	movwf	VerifySignal@i,c
  2415                           
  2416                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2417  0010' EE20 F004          	lfsr	2,4
  2418  0014' 5023'              	movf	VerifySignal@Signal,w,c
  2419  0016' 26D9               	addwf	fsr2l,f,c
  2420  0018' 5024'              	movf	VerifySignal@Signal+1,w,c
  2421  001A' 22DA               	addwfc	fsr2h,f,c
  2422  001C' 50DF               	movf	indf2,w,c
  2423  001E' 6E00'              	movwf	??_VerifySignal& (0+255),c
  2424  0020' EE20 F003          	lfsr	2,3
  2425  0024' 5023'              	movf	VerifySignal@Signal,w,c
  2426  0026' 26D9               	addwf	fsr2l,f,c
  2427  0028' 5024'              	movf	VerifySignal@Signal+1,w,c
  2428  002A' 22DA               	addwfc	fsr2h,f,c
  2429  002C' 50DF               	movf	indf2,w,c
  2430  002E' 6E00'              	movwf	(??_VerifySignal+1)& (0+255),c
  2431  0030' 5026'              	movf	??_VerifySignal+1,w,c
  2432  0032' 6E00'              	movwf	(??_VerifySignal+3)& (0+255),c
  2433  0034' 6A00'              	clrf	(??_VerifySignal+2)& (0+255),c
  2434  0036' 5025'              	movf	??_VerifySignal,w,c
  2435  0038' 2427'              	addwf	??_VerifySignal+2,w,c
  2436  003A' 6E2C'              	movwf	VerifySignal@hexByte,c
  2437  003C' 0E00               	movlw	0
  2438  003E' 2028'              	addwfc	??_VerifySignal+3,w,c
  2439  0040' 6E2D'              	movwf	VerifySignal@hexByte+1,c
  2440                           
  2441                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2442  0042' EE20 F002          	lfsr	2,2
  2443  0046' 5023'              	movf	VerifySignal@Signal,w,c
  2444  0048' 26D9               	addwf	fsr2l,f,c
  2445  004A' 5024'              	movf	VerifySignal@Signal+1,w,c
  2446  004C' 22DA               	addwfc	fsr2h,f,c
  2447  004E' 50DF               	movf	indf2,w,c
  2448  0050' 182C'              	xorwf	VerifySignal@hexByte,w,c
  2449  0052' 6E2B'              	movwf	VerifySignal@checksum,c
  2450                           
  2451                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2452  0054' 0E05               	movlw	5
  2453  0056' 6E2E'              	movwf	VerifySignal@i,c
  2454  0058'                    l3040:
  2455  0058' 0E09               	movlw	9
  2456  005A' 642E'              	cpfsgt	VerifySignal@i,c
  2457  005C' D001               	goto	l3044
  2458  005E' D028               	goto	l3052
  2459  0060'                    l3044:
  2460                           
  2461                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2462  0060' 502E'              	movf	VerifySignal@i,w,c
  2463  0062' 6E00'              	movwf	??_VerifySignal& (0+255),c
  2464  0064' 6A00'              	clrf	(??_VerifySignal+1)& (0+255),c
  2465  0066' 0E01               	movlw	1
  2466  0068' 2625'              	addwf	??_VerifySignal,f,c
  2467  006A' 0E00               	movlw	0
  2468  006C' 2226'              	addwfc	??_VerifySignal+1,f,c
  2469  006E' 5025'              	movf	??_VerifySignal,w,c
  2470  0070' 2423'              	addwf	VerifySignal@Signal,w,c
  2471  0072' 6ED9               	movwf	fsr2l,c
  2472  0074' 5026'              	movf	??_VerifySignal+1,w,c
  2473  0076' 2024'              	addwfc	VerifySignal@Signal+1,w,c
  2474  0078' 6EDA               	movwf	fsr2h,c
  2475  007A' 50DF               	movf	indf2,w,c
  2476  007C' 6E00'              	movwf	(??_VerifySignal+2)& (0+255),c
  2477  007E' 502E'              	movf	VerifySignal@i,w,c
  2478  0080' 0D01               	mullw	1
  2479  0082' 50F3               	movf	prodl,w,c
  2480  0084' 2423'              	addwf	VerifySignal@Signal,w,c
  2481  0086' 6ED9               	movwf	fsr2l,c
  2482  0088' 50F4               	movf	prodh,w,c
  2483  008A' 2024'              	addwfc	VerifySignal@Signal+1,w,c
  2484  008C' 6EDA               	movwf	fsr2h,c
  2485  008E' 50DF               	movf	indf2,w,c
  2486  0090' 6E00'              	movwf	(??_VerifySignal+3)& (0+255),c
  2487  0092' 5028'              	movf	??_VerifySignal+3,w,c
  2488  0094' 6E00'              	movwf	(??_VerifySignal+5)& (0+255),c
  2489  0096' 6A00'              	clrf	(??_VerifySignal+4)& (0+255),c
  2490  0098' 5027'              	movf	??_VerifySignal+2,w,c
  2491  009A' 2429'              	addwf	??_VerifySignal+4,w,c
  2492  009C' 6E2C'              	movwf	VerifySignal@hexByte,c
  2493  009E' 0E00               	movlw	0
  2494  00A0' 202A'              	addwfc	??_VerifySignal+5,w,c
  2495  00A2' 6E2D'              	movwf	VerifySignal@hexByte+1,c
  2496                           
  2497                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2498  00A4' 502B'              	movf	VerifySignal@checksum,w,c
  2499  00A6' 182C'              	xorwf	VerifySignal@hexByte,w,c
  2500  00A8' 6E2B'              	movwf	VerifySignal@checksum,c
  2501  00AA' 0E02               	movlw	2
  2502  00AC' 262E'              	addwf	VerifySignal@i,f,c
  2503  00AE' D7D4               	goto	l3040
  2504  00B0'                    l3052:
  2505                           
  2506                           ;RFID_Reader.c: 68: }
  2507                           ;RFID_Reader.c: 71: return 1;
  2508  00B0' 0E01               	movlw	1
  2509  00B2' 0012               	return	
  2510  00B4'                    __end_of_VerifySignal:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           postinc0	equ	0xFEE
  2517                           wreg	equ	0xFE8
  2518                           indf1	equ	0xFE7
  2519                           fsr1h	equ	0xFE2
  2520                           fsr1l	equ	0xFE1
  2521                           indf2	equ	0xFDF
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _ScanWithRange *****************
  2527 ;; Defined at:
  2528 ;;		line 132 in file "Movement.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2531 ;;		 -> main@mL(9), 
  2532 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2533 ;;		 -> main@mR(9), 
  2534 ;;  tenth_second    1   17[BANK0 ] unsigned char 
  2535 ;;  MoveTimeEntr    2   18[BANK0 ] PTR unsigned char 
  2536 ;;		 -> main@MoveTime(100), 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  buf            40   22[BANK0 ] unsigned char [40]
  2539 ;;  SensorResult    4   73[BANK0 ] unsigned int [2]
  2540 ;;  SensorResult    4   69[BANK0 ] unsigned int [2]
  2541 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  2542 ;;  ResultFalseR    1   64[BANK0 ] unsigned char 
  2543 ;;  ResultFalseC    1   63[BANK0 ] unsigned char 
  2544 ;;  ResultFalseL    1   62[BANK0 ] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      unsigned char 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2554 ;;      Params:         0       7       0       0
  2555 ;;      Locals:         0      55       0       0
  2556 ;;      Temps:          0       2       0       0
  2557 ;;      Totals:         0      64       0       0
  2558 ;;Total ram usage:       64 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    7
  2561 ;; This function calls:
  2562 ;;		_LCD_String
  2563 ;;		_SendLCD
  2564 ;;		_SetLine
  2565 ;;		___awdiv
  2566 ;;		_delay_s
  2567 ;;		_delay_tenth_s
  2568 ;;		_grabLeftIR
  2569 ;;		_grabRightIR
  2570 ;;		_sprintf
  2571 ;;		_stop
  2572 ;;		_turnLeft
  2573 ;;		_turnRight
  2574 ;; This function is called by:
  2575 ;;		_main
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text8
  2580  0000'                    __ptext8:
  2581                           	opt stack 0
  2582  0000'                    _ScanWithRange:
  2583                           	opt stack 23
  2584                           
  2585                           ;Movement.c: 135: unsigned int SensorResultL[2]={0,0};
  2586                           
  2587                           ;incstack = 0
  2588  0000' C004' F041'        	movff	ScanWithRange@F3887,ScanWithRange@SensorResultL
  2589  0004' C005' F042'        	movff	ScanWithRange@F3887+1,ScanWithRange@SensorResultL+1
  2590  0008' C006' F043'        	movff	ScanWithRange@F3887+2,ScanWithRange@SensorResultL+2
  2591  000C' C007' F044'        	movff	ScanWithRange@F3887+3,ScanWithRange@SensorResultL+3
  2592                           
  2593                           ;Movement.c: 136: unsigned int SensorResultC[2]={0,0};
  2594  0010' C008' F045'        	movff	ScanWithRange@F3889,ScanWithRange@SensorResultC
  2595  0014' C009' F046'        	movff	ScanWithRange@F3889+1,ScanWithRange@SensorResultC+1
  2596  0018' C00A' F047'        	movff	ScanWithRange@F3889+2,ScanWithRange@SensorResultC+2
  2597  001C' C00B' F048'        	movff	ScanWithRange@F3889+3,ScanWithRange@SensorResultC+3
  2598                           
  2599                           ;Movement.c: 137: unsigned int SensorResultR[2]={0,0};
  2600  0020' C00C' F049'        	movff	ScanWithRange@F3891,ScanWithRange@SensorResultR
  2601  0024' C00D' F04A'        	movff	ScanWithRange@F3891+1,ScanWithRange@SensorResultR+1
  2602  0028' C00E' F04B'        	movff	ScanWithRange@F3891+2,ScanWithRange@SensorResultR+2
  2603  002C' C00F' F04C'        	movff	ScanWithRange@F3891+3,ScanWithRange@SensorResultR+3
  2604                           
  2605                           ;Movement.c: 138: unsigned char ResultFalseL=0;
  2606  0030' 0E00               	movlw	0
  2607  0032' 0100               	movlb	0	; () banked
  2608  0034' 6F00'              	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2609                           
  2610                           ;Movement.c: 139: unsigned char ResultFalseC=0;
  2611  0036' 0E00               	movlw	0
  2612  0038' 0100               	movlb	0	; () banked
  2613  003A' 6F00'              	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2614                           
  2615                           ;Movement.c: 140: unsigned char ResultFalseR=0;
  2616  003C' 0E00               	movlw	0
  2617  003E' 0100               	movlb	0	; () banked
  2618  0040' 6F00'              	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;Movement.c: 141: char buf[40];
  2622                           ;Movement.c: 148: stop(mL,mR);
  2623  0042' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  2624  0046' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  2625  004A' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  2626  004E' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  2627  0052' EC00' F000'        	call	_stop	;wreg free
  2628                           
  2629                           ;Movement.c: 149: SensorResultC[0]=grabLeftIR();
  2630  0056' EC00' F000'        	call	_grabLeftIR	;wreg free
  2631  005A' C023' F045'        	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2632  005E' C024' F046'        	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2633                           
  2634                           ;Movement.c: 150: SensorResultC[1]=grabRightIR();
  2635  0062' EC00' F000'        	call	_grabRightIR	;wreg free
  2636  0066' C023' F047'        	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2637  006A' C024' F048'        	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2638                           
  2639                           ;Movement.c: 153: SendLCD(0b00000001,0);
  2640  006E' 0E00               	movlw	0
  2641  0070' 6E27'              	movwf	SendLCD@type,c
  2642  0072' 0E01               	movlw	1
  2643  0074' EC00' F000'        	call	_SendLCD
  2644                           
  2645                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2646  0078' 0E21               	movlw	33
  2647  007A'                    u3507:
  2648  007A' 2EE8               	decfsz	wreg,f,c
  2649  007C' D7FE               	goto	u3507
  2650  007E' F000               	nop	
  2651                           
  2652                           ;Movement.c: 155: SendLCD(0b00000010,0);
  2653  0080' 0E00               	movlw	0
  2654  0082' 6E27'              	movwf	SendLCD@type,c
  2655  0084' 0E02               	movlw	2
  2656  0086' EC00' F000'        	call	_SendLCD
  2657                           
  2658                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  2659  008A' 0E06               	movlw	6
  2660  008C' 0100               	movlb	0	; () banked
  2661  008E' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  2662  0090' 0E30               	movlw	48
  2663  0092'                    u3517:
  2664  0092' 2EE8               	decfsz	wreg,f,c
  2665  0094' D7FE               	goto	u3517
  2666  0096' 2F00'              	decfsz	??_ScanWithRange& (0+255),f,b
  2667  0098' D7FC               	goto	u3517
  2668  009A' D000               	nop2	
  2669                           
  2670                           ;Movement.c: 157: SetLine(1);
  2671  009C' 0E01               	movlw	1
  2672  009E' EC00' F000'        	call	_SetLine
  2673                           
  2674                           ;Movement.c: 158: LCD_String("    ScanWithRange");
  2675  00A2' 0E00'              	movlw	low (STR_12+2)
  2676  00A4' 6E29'              	movwf	LCD_String@string,c
  2677  00A6' 0E00'              	movlw	high (STR_12+2)
  2678  00A8' 6E2A'              	movwf	LCD_String@string+1,c
  2679  00AA' EC00' F000'        	call	_LCD_String	;wreg free
  2680                           
  2681                           ;Movement.c: 159: SetLine(2);
  2682  00AE' 0E02               	movlw	2
  2683  00B0' EC00' F000'        	call	_SetLine
  2684                           
  2685                           ;Movement.c: 160: sprintf(buf,"     %d, %d",SensorResultC[0],SensorResultC[1]);
  2686  00B4' 0E00'              	movlw	low ScanWithRange@buf
  2687  00B6' 6E2F'              	movwf	sprintf@sp,c
  2688  00B8' 0E00'              	movlw	high ScanWithRange@buf
  2689  00BA' 6E30'              	movwf	sprintf@sp+1,c
  2690  00BC' 0E00'              	movlw	low STR_9
  2691  00BE' 6E31'              	movwf	sprintf@f,c
  2692  00C0' 0E00'              	movlw	high STR_9
  2693  00C2' 6E32'              	movwf	sprintf@f+1,c
  2694  00C4' C045' F033'        	movff	ScanWithRange@SensorResultC,?_sprintf+4
  2695  00C8' C046' F034'        	movff	ScanWithRange@SensorResultC+1,?_sprintf+5
  2696  00CC' C047' F035'        	movff	ScanWithRange@SensorResultC+2,?_sprintf+6
  2697  00D0' C048' F036'        	movff	ScanWithRange@SensorResultC+3,?_sprintf+7
  2698  00D4' EC00' F000'        	call	_sprintf	;wreg free
  2699                           
  2700                           ;Movement.c: 161: LCD_String(buf);
  2701  00D8' 0E00'              	movlw	low ScanWithRange@buf
  2702  00DA' 6E29'              	movwf	LCD_String@string,c
  2703  00DC' 0E00'              	movlw	high ScanWithRange@buf
  2704  00DE' 6E2A'              	movwf	LCD_String@string+1,c
  2705  00E0' EC00' F000'        	call	_LCD_String	;wreg free
  2706                           
  2707                           ;Movement.c: 165: CAP1BUFH=0;
  2708  00E4' 0E00               	movlw	0
  2709  00E6' 6E69               	movwf	3945,c	;volatile
  2710                           
  2711                           ;Movement.c: 166: CAP1BUFL=0;
  2712  00E8' 0E00               	movlw	0
  2713  00EA' 6E68               	movwf	3944,c	;volatile
  2714                           
  2715                           ;Movement.c: 167: CAP2BUFH=0;
  2716  00EC' 0E00               	movlw	0
  2717  00EE' 6E67               	movwf	3943,c	;volatile
  2718                           
  2719                           ;Movement.c: 168: CAP2BUFL=0;
  2720  00F0' 0E00               	movlw	0
  2721  00F2' 6E66               	movwf	3942,c	;volatile
  2722                           
  2723                           ;Movement.c: 171: turnLeft(mL,mR);
  2724  00F4' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  2725  00F8' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2726  00FC' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  2727  0100' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2728  0104' EC00' F000'        	call	_turnLeft	;wreg free
  2729                           
  2730                           ;Movement.c: 172: delay_tenth_s(tenth_seconds);
  2731  0108' 0100               	movlb	0	; () banked
  2732  010A' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2733  010C' EC00' F000'        	call	_delay_tenth_s
  2734                           
  2735                           ;Movement.c: 173: (*MoveTimeEntry) += tenth_seconds;
  2736  0110' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2737  0114' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2738  0118' 0100               	movlb	0	; () banked
  2739  011A' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2740  011C' 26DF               	addwf	indf2,f,c
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;Movement.c: 175: stop(mL,mR);
  2744  011E' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  2745  0122' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  2746  0126' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  2747  012A' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  2748  012E' EC00' F000'        	call	_stop	;wreg free
  2749                           
  2750                           ;Movement.c: 176: SensorResultL[0]=grabLeftIR();
  2751  0132' EC00' F000'        	call	_grabLeftIR	;wreg free
  2752  0136' C023' F041'        	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2753  013A' C024' F042'        	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2754                           
  2755                           ;Movement.c: 177: SensorResultL[1]=grabRightIR();
  2756  013E' EC00' F000'        	call	_grabRightIR	;wreg free
  2757  0142' C023' F043'        	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2758  0146' C024' F044'        	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2759                           
  2760                           ;Movement.c: 180: SendLCD(0b00000001,0);
  2761  014A' 0E00               	movlw	0
  2762  014C' 6E27'              	movwf	SendLCD@type,c
  2763  014E' 0E01               	movlw	1
  2764  0150' EC00' F000'        	call	_SendLCD
  2765                           
  2766                           ;Movement.c: 181: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2767  0154' 0E21               	movlw	33
  2768  0156'                    u3527:
  2769  0156' 2EE8               	decfsz	wreg,f,c
  2770  0158' D7FE               	goto	u3527
  2771  015A' F000               	nop	
  2772                           
  2773                           ;Movement.c: 182: SendLCD(0b00000010,0);
  2774  015C' 0E00               	movlw	0
  2775  015E' 6E27'              	movwf	SendLCD@type,c
  2776  0160' 0E02               	movlw	2
  2777  0162' EC00' F000'        	call	_SendLCD
  2778                           
  2779                           ;Movement.c: 183: _delay((unsigned long)((2)*(8000000/4000.0)));
  2780  0166' 0E06               	movlw	6
  2781  0168' 0100               	movlb	0	; () banked
  2782  016A' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  2783  016C' 0E30               	movlw	48
  2784  016E'                    u3537:
  2785  016E' 2EE8               	decfsz	wreg,f,c
  2786  0170' D7FE               	goto	u3537
  2787  0172' 2F00'              	decfsz	??_ScanWithRange& (0+255),f,b
  2788  0174' D7FC               	goto	u3537
  2789  0176' D000               	nop2	
  2790                           
  2791                           ;Movement.c: 184: SetLine(1);
  2792  0178' 0E01               	movlw	1
  2793  017A' EC00' F000'        	call	_SetLine
  2794                           
  2795                           ;Movement.c: 185: LCD_String("    ScanWithRange");
  2796  017E' 0E00'              	movlw	low (STR_12+2)
  2797  0180' 6E29'              	movwf	LCD_String@string,c
  2798  0182' 0E00'              	movlw	high (STR_12+2)
  2799  0184' 6E2A'              	movwf	LCD_String@string+1,c
  2800  0186' EC00' F000'        	call	_LCD_String	;wreg free
  2801                           
  2802                           ;Movement.c: 186: SetLine(2);
  2803  018A' 0E02               	movlw	2
  2804  018C' EC00' F000'        	call	_SetLine
  2805                           
  2806                           ;Movement.c: 187: sprintf(buf,"     %04d, %04d",SensorResultL[0],SensorResultL[1]);
  2807  0190' 0E00'              	movlw	low ScanWithRange@buf
  2808  0192' 6E2F'              	movwf	sprintf@sp,c
  2809  0194' 0E00'              	movlw	high ScanWithRange@buf
  2810  0196' 6E30'              	movwf	sprintf@sp+1,c
  2811  0198' 0E00'              	movlw	low STR_2
  2812  019A' 6E31'              	movwf	sprintf@f,c
  2813  019C' 0E00'              	movlw	high STR_2
  2814  019E' 6E32'              	movwf	sprintf@f+1,c
  2815  01A0' C041' F033'        	movff	ScanWithRange@SensorResultL,?_sprintf+4
  2816  01A4' C042' F034'        	movff	ScanWithRange@SensorResultL+1,?_sprintf+5
  2817  01A8' C043' F035'        	movff	ScanWithRange@SensorResultL+2,?_sprintf+6
  2818  01AC' C044' F036'        	movff	ScanWithRange@SensorResultL+3,?_sprintf+7
  2819  01B0' EC00' F000'        	call	_sprintf	;wreg free
  2820                           
  2821                           ;Movement.c: 188: LCD_String(buf);
  2822  01B4' 0E00'              	movlw	low ScanWithRange@buf
  2823  01B6' 6E29'              	movwf	LCD_String@string,c
  2824  01B8' 0E00'              	movlw	high ScanWithRange@buf
  2825  01BA' 6E2A'              	movwf	LCD_String@string+1,c
  2826  01BC' EC00' F000'        	call	_LCD_String	;wreg free
  2827                           
  2828                           ;Movement.c: 192: CAP1BUFH=0;
  2829  01C0' 0E00               	movlw	0
  2830  01C2' 6E69               	movwf	3945,c	;volatile
  2831                           
  2832                           ;Movement.c: 193: CAP1BUFL=0;
  2833  01C4' 0E00               	movlw	0
  2834  01C6' 6E68               	movwf	3944,c	;volatile
  2835                           
  2836                           ;Movement.c: 194: CAP2BUFH=0;
  2837  01C8' 0E00               	movlw	0
  2838  01CA' 6E67               	movwf	3943,c	;volatile
  2839                           
  2840                           ;Movement.c: 195: CAP2BUFL=0;
  2841  01CC' 0E00               	movlw	0
  2842  01CE' 6E66               	movwf	3942,c	;volatile
  2843                           
  2844                           ;Movement.c: 198: turnRight(mL,mR);
  2845  01D0' C00D' F006'        	movff	ScanWithRange@mL,turnRight@mL
  2846  01D4' C00E' F007'        	movff	ScanWithRange@mL+1,turnRight@mL+1
  2847  01D8' C00F' F008'        	movff	ScanWithRange@mR,turnRight@mR
  2848  01DC' C010' F009'        	movff	ScanWithRange@mR+1,turnRight@mR+1
  2849  01E0' EC00' F000'        	call	_turnRight	;wreg free
  2850                           
  2851                           ;Movement.c: 199: delay_tenth_s(2*tenth_seconds);
  2852  01E4' 0100               	movlb	0	; () banked
  2853  01E6' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2854  01E8' 0D02               	mullw	2
  2855  01EA' 50F3               	movf	prodl,w,c
  2856  01EC' EC00' F000'        	call	_delay_tenth_s
  2857                           
  2858                           ;Movement.c: 200: (*MoveTimeEntry) -= 2*tenth_seconds;
  2859  01F0' 0100               	movlb	0	; () banked
  2860  01F2' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2861  01F4' 0D02               	mullw	2
  2862  01F6' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2863  01FA' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2864  01FE' 50F3               	movf	prodl,w,c
  2865  0200' 5EDF               	subwf	indf2,f,c
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;Movement.c: 202: stop(mL,mR);
  2869  0202' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  2870  0206' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  2871  020A' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  2872  020E' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  2873  0212' EC00' F000'        	call	_stop	;wreg free
  2874                           
  2875                           ;Movement.c: 203: SensorResultR[0]=grabLeftIR();
  2876  0216' EC00' F000'        	call	_grabLeftIR	;wreg free
  2877  021A' C023' F049'        	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2878  021E' C024' F04A'        	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2879                           
  2880                           ;Movement.c: 204: SensorResultR[1]=grabRightIR();
  2881  0222' EC00' F000'        	call	_grabRightIR	;wreg free
  2882  0226' C023' F04B'        	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2883  022A' C024' F04C'        	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2884                           
  2885                           ;Movement.c: 207: SendLCD(0b00000001,0);
  2886  022E' 0E00               	movlw	0
  2887  0230' 6E27'              	movwf	SendLCD@type,c
  2888  0232' 0E01               	movlw	1
  2889  0234' EC00' F000'        	call	_SendLCD
  2890                           
  2891                           ;Movement.c: 208: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2892  0238' 0E21               	movlw	33
  2893  023A'                    u3547:
  2894  023A' 2EE8               	decfsz	wreg,f,c
  2895  023C' D7FE               	goto	u3547
  2896  023E' F000               	nop	
  2897                           
  2898                           ;Movement.c: 209: SendLCD(0b00000010,0);
  2899  0240' 0E00               	movlw	0
  2900  0242' 6E27'              	movwf	SendLCD@type,c
  2901  0244' 0E02               	movlw	2
  2902  0246' EC00' F000'        	call	_SendLCD
  2903                           
  2904                           ;Movement.c: 210: _delay((unsigned long)((2)*(8000000/4000.0)));
  2905  024A' 0E06               	movlw	6
  2906  024C' 0100               	movlb	0	; () banked
  2907  024E' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  2908  0250' 0E30               	movlw	48
  2909  0252'                    u3557:
  2910  0252' 2EE8               	decfsz	wreg,f,c
  2911  0254' D7FE               	goto	u3557
  2912  0256' 2F00'              	decfsz	??_ScanWithRange& (0+255),f,b
  2913  0258' D7FC               	goto	u3557
  2914  025A' D000               	nop2	
  2915                           
  2916                           ;Movement.c: 211: SetLine(1);
  2917  025C' 0E01               	movlw	1
  2918  025E' EC00' F000'        	call	_SetLine
  2919                           
  2920                           ;Movement.c: 212: LCD_String("      ScanWithRange");
  2921  0262' 0E00'              	movlw	low STR_12
  2922  0264' 6E29'              	movwf	LCD_String@string,c
  2923  0266' 0E00'              	movlw	high STR_12
  2924  0268' 6E2A'              	movwf	LCD_String@string+1,c
  2925  026A' EC00' F000'        	call	_LCD_String	;wreg free
  2926                           
  2927                           ;Movement.c: 213: SetLine(2);
  2928  026E' 0E02               	movlw	2
  2929  0270' EC00' F000'        	call	_SetLine
  2930                           
  2931                           ;Movement.c: 214: sprintf(buf,"     %d, %d",SensorResultR[0],SensorResultR[1]);
  2932  0274' 0E00'              	movlw	low ScanWithRange@buf
  2933  0276' 6E2F'              	movwf	sprintf@sp,c
  2934  0278' 0E00'              	movlw	high ScanWithRange@buf
  2935  027A' 6E30'              	movwf	sprintf@sp+1,c
  2936  027C' 0E00'              	movlw	low STR_9
  2937  027E' 6E31'              	movwf	sprintf@f,c
  2938  0280' 0E00'              	movlw	high STR_9
  2939  0282' 6E32'              	movwf	sprintf@f+1,c
  2940  0284' C049' F033'        	movff	ScanWithRange@SensorResultR,?_sprintf+4
  2941  0288' C04A' F034'        	movff	ScanWithRange@SensorResultR+1,?_sprintf+5
  2942  028C' C04B' F035'        	movff	ScanWithRange@SensorResultR+2,?_sprintf+6
  2943  0290' C04C' F036'        	movff	ScanWithRange@SensorResultR+3,?_sprintf+7
  2944  0294' EC00' F000'        	call	_sprintf	;wreg free
  2945                           
  2946                           ;Movement.c: 215: LCD_String(buf);
  2947  0298' 0E00'              	movlw	low ScanWithRange@buf
  2948  029A' 6E29'              	movwf	LCD_String@string,c
  2949  029C' 0E00'              	movlw	high ScanWithRange@buf
  2950  029E' 6E2A'              	movwf	LCD_String@string+1,c
  2951  02A0' EC00' F000'        	call	_LCD_String	;wreg free
  2952                           
  2953                           ;Movement.c: 219: CAP1BUFH=0;
  2954  02A4' 0E00               	movlw	0
  2955  02A6' 6E69               	movwf	3945,c	;volatile
  2956                           
  2957                           ;Movement.c: 220: CAP1BUFL=0;
  2958  02A8' 0E00               	movlw	0
  2959  02AA' 6E68               	movwf	3944,c	;volatile
  2960                           
  2961                           ;Movement.c: 221: CAP2BUFH=0;
  2962  02AC' 0E00               	movlw	0
  2963  02AE' 6E67               	movwf	3943,c	;volatile
  2964                           
  2965                           ;Movement.c: 222: CAP2BUFL=0;
  2966  02B0' 0E00               	movlw	0
  2967  02B2' 6E66               	movwf	3942,c	;volatile
  2968                           
  2969                           ;Movement.c: 233: if((SensorResultL[0]+SensorResultL[1])<ClearSignalThreshold){
  2970  02B4' 0E00'              	movlw	low _ClearSignalThreshold
  2971  02B6' 6EF6               	movwf	tblptrl,c
  2972  02B8'                    	if	1	;There is more than 1 active tblptr byte
  2973  02B8' 0E00'              	movlw	high _ClearSignalThreshold
  2974  02BA' 6EF7               	movwf	tblptrh,c
  2975  02BC'                    	endif
  2976  02BC'                    	if	0	;There are less than 3 active tblptr bytes
  2977  02BC'                    	endif
  2978  02BC' 0100               	movlb	0	; () banked
  2979  02BE' 5100'              	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2980  02C0' 0100               	movlb	0	; () banked
  2981  02C2' 2500'              	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2982  02C4' 0100               	movlb	0	; () banked
  2983  02C6' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  2984  02C8' 0100               	movlb	0	; () banked
  2985  02CA' 5100'              	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2986  02CC' 0100               	movlb	0	; () banked
  2987  02CE' 2100'              	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2988  02D0' 0100               	movlb	0	; () banked
  2989  02D2' 6F00'              	movwf	(??_ScanWithRange+1)& (0+255),b
  2990  02D4' 0009               	tblrd		*+
  2991  02D6' 50F5               	movf	tablat,w,c
  2992  02D8' 0100               	movlb	0	; () banked
  2993  02DA' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  2994  02DC' 0009               	tblrd		*+
  2995  02DE' 50F5               	movf	tablat,w,c
  2996  02E0' 0100               	movlb	0	; () banked
  2997  02E2' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2998  02E4' B0D8               	btfsc	status,0,c
  2999  02E6' D00D               	goto	l3636
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;Movement.c: 234: SensorResultL[0]=0;
  3003  02E8' 0E00               	movlw	0
  3004  02EA' 0100               	movlb	0	; () banked
  3005  02EC' 6F00'              	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  3006  02EE' 0E00               	movlw	0
  3007  02F0' 6F00'              	movwf	ScanWithRange@SensorResultL& (0+255),b
  3008                           
  3009                           ;Movement.c: 235: SensorResultL[1]=0;
  3010  02F2' 0E00               	movlw	0
  3011  02F4' 0100               	movlb	0	; () banked
  3012  02F6' 6F00'              	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  3013  02F8' 0E00               	movlw	0
  3014  02FA' 6F00'              	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  3015                           
  3016                           ;Movement.c: 236: ResultFalseL=1;
  3017  02FC' 0E01               	movlw	1
  3018  02FE' 0100               	movlb	0	; () banked
  3019  0300' 6F00'              	movwf	ScanWithRange@ResultFalseL& (0+255),b
  3020  0302'                    l3636:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;Movement.c: 237: }
  3024                           ;Movement.c: 238: if((SensorResultC[0]+SensorResultC[1])<ClearSignalThreshold){
  3025  0302' 0E00'              	movlw	low _ClearSignalThreshold
  3026  0304' 6EF6               	movwf	tblptrl,c
  3027  0306'                    	if	1	;There is more than 1 active tblptr byte
  3028  0306' 0E00'              	movlw	high _ClearSignalThreshold
  3029  0308' 6EF7               	movwf	tblptrh,c
  3030  030A'                    	endif
  3031  030A'                    	if	0	;There are less than 3 active tblptr bytes
  3032  030A'                    	endif
  3033  030A' 0100               	movlb	0	; () banked
  3034  030C' 5100'              	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3035  030E' 0100               	movlb	0	; () banked
  3036  0310' 2500'              	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3037  0312' 0100               	movlb	0	; () banked
  3038  0314' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  3039  0316' 0100               	movlb	0	; () banked
  3040  0318' 5100'              	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3041  031A' 0100               	movlb	0	; () banked
  3042  031C' 2100'              	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3043  031E' 0100               	movlb	0	; () banked
  3044  0320' 6F00'              	movwf	(??_ScanWithRange+1)& (0+255),b
  3045  0322' 0009               	tblrd		*+
  3046  0324' 50F5               	movf	tablat,w,c
  3047  0326' 0100               	movlb	0	; () banked
  3048  0328' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3049  032A' 0009               	tblrd		*+
  3050  032C' 50F5               	movf	tablat,w,c
  3051  032E' 0100               	movlb	0	; () banked
  3052  0330' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3053  0332' B0D8               	btfsc	status,0,c
  3054  0334' D00D               	goto	l3640
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Movement.c: 239: SensorResultC[0]=0;
  3058  0336' 0E00               	movlw	0
  3059  0338' 0100               	movlb	0	; () banked
  3060  033A' 6F00'              	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  3061  033C' 0E00               	movlw	0
  3062  033E' 6F00'              	movwf	ScanWithRange@SensorResultC& (0+255),b
  3063                           
  3064                           ;Movement.c: 240: SensorResultC[1]=0;
  3065  0340' 0E00               	movlw	0
  3066  0342' 0100               	movlb	0	; () banked
  3067  0344' 6F00'              	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  3068  0346' 0E00               	movlw	0
  3069  0348' 6F00'              	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  3070                           
  3071                           ;Movement.c: 241: ResultFalseC=1;
  3072  034A' 0E01               	movlw	1
  3073  034C' 0100               	movlb	0	; () banked
  3074  034E' 6F00'              	movwf	ScanWithRange@ResultFalseC& (0+255),b
  3075  0350'                    l3640:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Movement.c: 242: }
  3079                           ;Movement.c: 243: if((SensorResultR[0]+SensorResultR[1])<ClearSignalThreshold){
  3080  0350' 0E00'              	movlw	low _ClearSignalThreshold
  3081  0352' 6EF6               	movwf	tblptrl,c
  3082  0354'                    	if	1	;There is more than 1 active tblptr byte
  3083  0354' 0E00'              	movlw	high _ClearSignalThreshold
  3084  0356' 6EF7               	movwf	tblptrh,c
  3085  0358'                    	endif
  3086  0358'                    	if	0	;There are less than 3 active tblptr bytes
  3087  0358'                    	endif
  3088  0358' 0100               	movlb	0	; () banked
  3089  035A' 5100'              	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3090  035C' 0100               	movlb	0	; () banked
  3091  035E' 2500'              	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3092  0360' 0100               	movlb	0	; () banked
  3093  0362' 6F00'              	movwf	??_ScanWithRange& (0+255),b
  3094  0364' 0100               	movlb	0	; () banked
  3095  0366' 5100'              	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3096  0368' 0100               	movlb	0	; () banked
  3097  036A' 2100'              	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3098  036C' 0100               	movlb	0	; () banked
  3099  036E' 6F00'              	movwf	(??_ScanWithRange+1)& (0+255),b
  3100  0370' 0009               	tblrd		*+
  3101  0372' 50F5               	movf	tablat,w,c
  3102  0374' 0100               	movlb	0	; () banked
  3103  0376' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3104  0378' 0009               	tblrd		*+
  3105  037A' 50F5               	movf	tablat,w,c
  3106  037C' 0100               	movlb	0	; () banked
  3107  037E' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3108  0380' B0D8               	btfsc	status,0,c
  3109  0382' D00D               	goto	l3644
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;Movement.c: 244: SensorResultR[0]=0;
  3113  0384' 0E00               	movlw	0
  3114  0386' 0100               	movlb	0	; () banked
  3115  0388' 6F00'              	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  3116  038A' 0E00               	movlw	0
  3117  038C' 6F00'              	movwf	ScanWithRange@SensorResultR& (0+255),b
  3118                           
  3119                           ;Movement.c: 245: SensorResultR[1]=0;
  3120  038E' 0E00               	movlw	0
  3121  0390' 0100               	movlb	0	; () banked
  3122  0392' 6F00'              	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  3123  0394' 0E00               	movlw	0
  3124  0396' 6F00'              	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  3125                           
  3126                           ;Movement.c: 246: ResultFalseR=1;
  3127  0398' 0E01               	movlw	1
  3128  039A' 0100               	movlb	0	; () banked
  3129  039C' 6F00'              	movwf	ScanWithRange@ResultFalseR& (0+255),b
  3130  039E'                    l3644:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;Movement.c: 247: }
  3134                           ;Movement.c: 249: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  3135  039E' 0100               	movlb	0	; () banked
  3136  03A0' 5100'              	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  3137  03A2' C03E' F014'        	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  3138  03A6' 0100               	movlb	0	; () banked
  3139  03A8' 6B00'              	clrf	(??_ScanWithRange+1)& (0+255),b
  3140  03AA' 0100               	movlb	0	; () banked
  3141  03AC' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3142  03AE' 0E00               	movlw	0
  3143  03B0' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3144  03B2' 0100               	movlb	0	; () banked
  3145  03B4' 5100'              	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  3146  03B6' 0100               	movlb	0	; () banked
  3147  03B8' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3148  03BA' 0E00               	movlw	0
  3149  03BC' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3150  03BE' 0E03               	movlw	3
  3151  03C0' 0100               	movlb	0	; () banked
  3152  03C2' 1900'              	xorwf	??_ScanWithRange& (0+255),w,b
  3153  03C4' 0100               	movlb	0	; () banked
  3154  03C6' 1100'              	iorwf	(??_ScanWithRange+1)& (0+255),w,b
  3155  03C8' A4D8               	btfss	status,2,c
  3156  03CA' D025               	goto	l3660
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;Movement.c: 251: turnLeft(mL,mR);
  3160  03CC' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3161  03D0' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3162  03D4' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3163  03D8' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3164  03DC' EC00' F000'        	call	_turnLeft	;wreg free
  3165                           
  3166                           ;Movement.c: 252: delay_tenth_s(5*tenth_seconds);
  3167  03E0' 0100               	movlb	0	; () banked
  3168  03E2' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3169  03E4' 0D05               	mullw	5
  3170  03E6' 50F3               	movf	prodl,w,c
  3171  03E8' EC00' F000'        	call	_delay_tenth_s
  3172                           
  3173                           ;Movement.c: 253: (*MoveTimeEntry) += 5*tenth_seconds;
  3174  03EC' 0100               	movlb	0	; () banked
  3175  03EE' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3176  03F0' 0D05               	mullw	5
  3177  03F2' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3178  03F6' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3179  03FA' 50F3               	movf	prodl,w,c
  3180  03FC' 26DF               	addwf	indf2,f,c
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;Movement.c: 254: stop(mL,mR);
  3184  03FE' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3185  0402' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3186  0406' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3187  040A' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3188  040E' EC00' F000'        	call	_stop	;wreg free
  3189                           
  3190                           ;Movement.c: 256: return -1;
  3191  0412' 0EFF               	movlw	255
  3192  0414' 0012               	return	
  3193  0416'                    l3660:
  3194                           
  3195                           ;Movement.c: 259: if (((SensorResultL[0]>DirectionFoundThreshold)&&(SensorResultL[1]>Dir
      +                          ectionFoundThreshold)
  3196                           ;Movement.c: 260: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  3197                           ;Movement.c: 261: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  3198  0416' 0E00'              	movlw	low _DirectionFoundThreshold
  3199  0418' 6EF6               	movwf	tblptrl,c
  3200  041A'                    	if	1	;There is more than 1 active tblptr byte
  3201  041A' 0E00'              	movlw	high _DirectionFoundThreshold
  3202  041C' 6EF7               	movwf	tblptrh,c
  3203  041E'                    	endif
  3204  041E'                    	if	0	;There are less than 3 active tblptr bytes
  3205  041E'                    	endif
  3206  041E' 0100               	movlb	0	; () banked
  3207  0420' 5100'              	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3208  0422' 0009               	tblrd		*+
  3209  0424' 5CF5               	subwf	tablat,w,c
  3210  0426' 0100               	movlb	0	; () banked
  3211  0428' 5100'              	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3212  042A' 0009               	tblrd		*+
  3213  042C' 58F5               	subwfb	tablat,w,c
  3214  042E' B0D8               	btfsc	status,0,c
  3215  0430' D073               	goto	l3682
  3216                           
  3217                           ; BSR set to: 0
  3218  0432' 0E00'              	movlw	low _DirectionFoundThreshold
  3219  0434' 6EF6               	movwf	tblptrl,c
  3220  0436'                    	if	1	;There is more than 1 active tblptr byte
  3221  0436' 0E00'              	movlw	high _DirectionFoundThreshold
  3222  0438' 6EF7               	movwf	tblptrh,c
  3223  043A'                    	endif
  3224  043A'                    	if	0	;There are less than 3 active tblptr bytes
  3225  043A'                    	endif
  3226  043A' 0100               	movlb	0	; () banked
  3227  043C' 5100'              	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3228  043E' 0009               	tblrd		*+
  3229  0440' 5CF5               	subwf	tablat,w,c
  3230  0442' 0100               	movlb	0	; () banked
  3231  0444' 5100'              	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3232  0446' 0009               	tblrd		*+
  3233  0448' 58F5               	subwfb	tablat,w,c
  3234  044A' B0D8               	btfsc	status,0,c
  3235  044C' D065               	goto	l3682
  3236                           
  3237                           ; BSR set to: 0
  3238  044E' 0E00'              	movlw	low _DirectionFoundTolerance
  3239  0450' 6EF6               	movwf	tblptrl,c
  3240  0452'                    	if	1	;There is more than 1 active tblptr byte
  3241  0452' 0E00'              	movlw	high _DirectionFoundTolerance
  3242  0454' 6EF7               	movwf	tblptrh,c
  3243  0456'                    	endif
  3244  0456'                    	if	0	;There are less than 3 active tblptr bytes
  3245  0456'                    	endif
  3246  0456' EE20' F000'        	lfsr	2,ScanWithRange@SensorResultL+2
  3247  045A' CFDE F014'         	movff	postinc2,??_ScanWithRange
  3248  045E' CFDD F015'         	movff	postdec2,??_ScanWithRange+1
  3249  0462' 0100               	movlb	0	; () banked
  3250  0464' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3251  0466' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3252  0468' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3253  046A' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3254  046C' 0100               	movlb	0	; () banked
  3255  046E' 5100'              	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3256  0470' 0100               	movlb	0	; () banked
  3257  0472' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3258  0474' 0100               	movlb	0	; () banked
  3259  0476' 5100'              	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3260  0478' 0100               	movlb	0	; () banked
  3261  047A' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3262  047C' 0009               	tblrd		*+
  3263  047E' 50F5               	movf	tablat,w,c
  3264  0480' 0100               	movlb	0	; () banked
  3265  0482' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3266  0484' 0009               	tblrd		*+
  3267  0486' 50F5               	movf	tablat,w,c
  3268  0488' 0100               	movlb	0	; () banked
  3269  048A' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3270  048C' A0D8               	btfss	status,0,c
  3271  048E' D01F               	goto	l3668
  3272                           
  3273                           ; BSR set to: 0
  3274  0490' 0E00'              	movlw	low _DirectionFoundTolerance
  3275  0492' 6EF6               	movwf	tblptrl,c
  3276  0494'                    	if	1	;There is more than 1 active tblptr byte
  3277  0494' 0E00'              	movlw	high _DirectionFoundTolerance
  3278  0496' 6EF7               	movwf	tblptrh,c
  3279  0498'                    	endif
  3280  0498'                    	if	0	;There are less than 3 active tblptr bytes
  3281  0498'                    	endif
  3282  0498' C041' F014'        	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  3283  049C' C042' F015'        	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  3284  04A0' 0100               	movlb	0	; () banked
  3285  04A2' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3286  04A4' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3287  04A6' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3288  04A8' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3289  04AA' 0100               	movlb	0	; () banked
  3290  04AC' 5100'              	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3291  04AE' 0100               	movlb	0	; () banked
  3292  04B0' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3293  04B2' 0100               	movlb	0	; () banked
  3294  04B4' 5100'              	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3295  04B6' 0100               	movlb	0	; () banked
  3296  04B8' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3297  04BA' 0009               	tblrd		*+
  3298  04BC' 50F5               	movf	tablat,w,c
  3299  04BE' 0100               	movlb	0	; () banked
  3300  04C0' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3301  04C2' 0009               	tblrd		*+
  3302  04C4' 50F5               	movf	tablat,w,c
  3303  04C6' 0100               	movlb	0	; () banked
  3304  04C8' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3305  04CA' B0D8               	btfsc	status,0,c
  3306  04CC' D025               	goto	l3682
  3307  04CE'                    l3668:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Movement.c: 263: turnLeft(mL,mR);
  3311  04CE' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3312  04D2' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3313  04D6' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3314  04DA' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3315  04DE' EC00' F000'        	call	_turnLeft	;wreg free
  3316                           
  3317                           ;Movement.c: 264: delay_tenth_s(2*(tenth_seconds));
  3318  04E2' 0100               	movlb	0	; () banked
  3319  04E4' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3320  04E6' 0D02               	mullw	2
  3321  04E8' 50F3               	movf	prodl,w,c
  3322  04EA' EC00' F000'        	call	_delay_tenth_s
  3323                           
  3324                           ;Movement.c: 265: (*MoveTimeEntry) += 2*tenth_seconds;
  3325  04EE' 0100               	movlb	0	; () banked
  3326  04F0' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3327  04F2' 0D02               	mullw	2
  3328  04F4' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3329  04F8' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3330  04FC' 50F3               	movf	prodl,w,c
  3331  04FE' 26DF               	addwf	indf2,f,c
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Movement.c: 266: stop(mL,mR);
  3335  0500' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3336  0504' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3337  0508' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3338  050C' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3339  0510' EC00' F000'        	call	_stop	;wreg free
  3340  0514'                    l3676:
  3341                           
  3342                           ;Movement.c: 267: return 2;
  3343  0514' 0E02               	movlw	2
  3344  0516' 0012               	return	
  3345  0518'                    l3682:
  3346                           
  3347                           ;Movement.c: 269: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3348                           ;Movement.c: 270: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3349  0518' 0E00'              	movlw	low _DirectionFoundThreshold
  3350  051A' 6EF6               	movwf	tblptrl,c
  3351  051C'                    	if	1	;There is more than 1 active tblptr byte
  3352  051C' 0E00'              	movlw	high _DirectionFoundThreshold
  3353  051E' 6EF7               	movwf	tblptrh,c
  3354  0520'                    	endif
  3355  0520'                    	if	0	;There are less than 3 active tblptr bytes
  3356  0520'                    	endif
  3357  0520' 0100               	movlb	0	; () banked
  3358  0522' 5100'              	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3359  0524' 0009               	tblrd		*+
  3360  0526' 5CF5               	subwf	tablat,w,c
  3361  0528' 0100               	movlb	0	; () banked
  3362  052A' 5100'              	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3363  052C' 0009               	tblrd		*+
  3364  052E' 58F5               	subwfb	tablat,w,c
  3365  0530' B0D8               	btfsc	status,0,c
  3366  0532' D06D               	goto	l3704
  3367                           
  3368                           ; BSR set to: 0
  3369  0534' 0E00'              	movlw	low _DirectionFoundThreshold
  3370  0536' 6EF6               	movwf	tblptrl,c
  3371  0538'                    	if	1	;There is more than 1 active tblptr byte
  3372  0538' 0E00'              	movlw	high _DirectionFoundThreshold
  3373  053A' 6EF7               	movwf	tblptrh,c
  3374  053C'                    	endif
  3375  053C'                    	if	0	;There are less than 3 active tblptr bytes
  3376  053C'                    	endif
  3377  053C' 0100               	movlb	0	; () banked
  3378  053E' 5100'              	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3379  0540' 0009               	tblrd		*+
  3380  0542' 5CF5               	subwf	tablat,w,c
  3381  0544' 0100               	movlb	0	; () banked
  3382  0546' 5100'              	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3383  0548' 0009               	tblrd		*+
  3384  054A' 58F5               	subwfb	tablat,w,c
  3385  054C' B0D8               	btfsc	status,0,c
  3386  054E' D05F               	goto	l3704
  3387                           
  3388                           ; BSR set to: 0
  3389  0550' 0E00'              	movlw	low _DirectionFoundTolerance
  3390  0552' 6EF6               	movwf	tblptrl,c
  3391  0554'                    	if	1	;There is more than 1 active tblptr byte
  3392  0554' 0E00'              	movlw	high _DirectionFoundTolerance
  3393  0556' 6EF7               	movwf	tblptrh,c
  3394  0558'                    	endif
  3395  0558'                    	if	0	;There are less than 3 active tblptr bytes
  3396  0558'                    	endif
  3397  0558' EE20' F000'        	lfsr	2,ScanWithRange@SensorResultC+2
  3398  055C' CFDE F014'         	movff	postinc2,??_ScanWithRange
  3399  0560' CFDD F015'         	movff	postdec2,??_ScanWithRange+1
  3400  0564' 0100               	movlb	0	; () banked
  3401  0566' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3402  0568' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3403  056A' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3404  056C' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3405  056E' 0100               	movlb	0	; () banked
  3406  0570' 5100'              	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3407  0572' 0100               	movlb	0	; () banked
  3408  0574' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3409  0576' 0100               	movlb	0	; () banked
  3410  0578' 5100'              	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3411  057A' 0100               	movlb	0	; () banked
  3412  057C' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3413  057E' 0009               	tblrd		*+
  3414  0580' 50F5               	movf	tablat,w,c
  3415  0582' 0100               	movlb	0	; () banked
  3416  0584' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3417  0586' 0009               	tblrd		*+
  3418  0588' 50F5               	movf	tablat,w,c
  3419  058A' 0100               	movlb	0	; () banked
  3420  058C' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3421  058E' A0D8               	btfss	status,0,c
  3422  0590' D01F               	goto	l3690
  3423                           
  3424                           ; BSR set to: 0
  3425  0592' 0E00'              	movlw	low _DirectionFoundTolerance
  3426  0594' 6EF6               	movwf	tblptrl,c
  3427  0596'                    	if	1	;There is more than 1 active tblptr byte
  3428  0596' 0E00'              	movlw	high _DirectionFoundTolerance
  3429  0598' 6EF7               	movwf	tblptrh,c
  3430  059A'                    	endif
  3431  059A'                    	if	0	;There are less than 3 active tblptr bytes
  3432  059A'                    	endif
  3433  059A' C045' F014'        	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3434  059E' C046' F015'        	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3435  05A2' 0100               	movlb	0	; () banked
  3436  05A4' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3437  05A6' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3438  05A8' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3439  05AA' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3440  05AC' 0100               	movlb	0	; () banked
  3441  05AE' 5100'              	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3442  05B0' 0100               	movlb	0	; () banked
  3443  05B2' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3444  05B4' 0100               	movlb	0	; () banked
  3445  05B6' 5100'              	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3446  05B8' 0100               	movlb	0	; () banked
  3447  05BA' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3448  05BC' 0009               	tblrd		*+
  3449  05BE' 50F5               	movf	tablat,w,c
  3450  05C0' 0100               	movlb	0	; () banked
  3451  05C2' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3452  05C4' 0009               	tblrd		*+
  3453  05C6' 50F5               	movf	tablat,w,c
  3454  05C8' 0100               	movlb	0	; () banked
  3455  05CA' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3456  05CC' B0D8               	btfsc	status,0,c
  3457  05CE' D01F               	goto	l3704
  3458  05D0'                    l3690:
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;Movement.c: 272: turnLeft(mL,mR);
  3462  05D0' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3463  05D4' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3464  05D8' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3465  05DC' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3466  05E0' EC00' F000'        	call	_turnLeft	;wreg free
  3467                           
  3468                           ;Movement.c: 273: delay_s(3);
  3469  05E4' 0E03               	movlw	3
  3470  05E6' EC00' F000'        	call	_delay_s
  3471                           
  3472                           ;Movement.c: 274: (*MoveTimeEntry) += tenth_seconds;
  3473  05EA' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3474  05EE' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3475  05F2' 0100               	movlb	0	; () banked
  3476  05F4' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3477  05F6' 26DF               	addwf	indf2,f,c
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Movement.c: 275: stop(mL,mR);
  3481  05F8' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3482  05FC' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3483  0600' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3484  0604' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3485  0608' EC00' F000'        	call	_stop	;wreg free
  3486  060C' D783               	goto	l3676
  3487  060E'                    l3704:
  3488                           
  3489                           ;Movement.c: 278: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3490                           ;Movement.c: 279: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3491  060E' 0E00'              	movlw	low _DirectionFoundThreshold
  3492  0610' 6EF6               	movwf	tblptrl,c
  3493  0612'                    	if	1	;There is more than 1 active tblptr byte
  3494  0612' 0E00'              	movlw	high _DirectionFoundThreshold
  3495  0614' 6EF7               	movwf	tblptrh,c
  3496  0616'                    	endif
  3497  0616'                    	if	0	;There are less than 3 active tblptr bytes
  3498  0616'                    	endif
  3499  0616' 0100               	movlb	0	; () banked
  3500  0618' 5100'              	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3501  061A' 0009               	tblrd		*+
  3502  061C' 5CF5               	subwf	tablat,w,c
  3503  061E' 0100               	movlb	0	; () banked
  3504  0620' 5100'              	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3505  0622' 0009               	tblrd		*+
  3506  0624' 58F5               	subwfb	tablat,w,c
  3507  0626' B0D8               	btfsc	status,0,c
  3508  0628' D059               	goto	l3720
  3509                           
  3510                           ; BSR set to: 0
  3511  062A' 0E00'              	movlw	low _DirectionFoundThreshold
  3512  062C' 6EF6               	movwf	tblptrl,c
  3513  062E'                    	if	1	;There is more than 1 active tblptr byte
  3514  062E' 0E00'              	movlw	high _DirectionFoundThreshold
  3515  0630' 6EF7               	movwf	tblptrh,c
  3516  0632'                    	endif
  3517  0632'                    	if	0	;There are less than 3 active tblptr bytes
  3518  0632'                    	endif
  3519  0632' 0100               	movlb	0	; () banked
  3520  0634' 5100'              	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3521  0636' 0009               	tblrd		*+
  3522  0638' 5CF5               	subwf	tablat,w,c
  3523  063A' 0100               	movlb	0	; () banked
  3524  063C' 5100'              	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3525  063E' 0009               	tblrd		*+
  3526  0640' 58F5               	subwfb	tablat,w,c
  3527  0642' B0D8               	btfsc	status,0,c
  3528  0644' D04B               	goto	l3720
  3529                           
  3530                           ; BSR set to: 0
  3531  0646' 0E00'              	movlw	low _DirectionFoundTolerance
  3532  0648' 6EF6               	movwf	tblptrl,c
  3533  064A'                    	if	1	;There is more than 1 active tblptr byte
  3534  064A' 0E00'              	movlw	high _DirectionFoundTolerance
  3535  064C' 6EF7               	movwf	tblptrh,c
  3536  064E'                    	endif
  3537  064E'                    	if	0	;There are less than 3 active tblptr bytes
  3538  064E'                    	endif
  3539  064E' EE20' F000'        	lfsr	2,ScanWithRange@SensorResultR+2
  3540  0652' CFDE F014'         	movff	postinc2,??_ScanWithRange
  3541  0656' CFDD F015'         	movff	postdec2,??_ScanWithRange+1
  3542  065A' 0100               	movlb	0	; () banked
  3543  065C' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3544  065E' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3545  0660' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3546  0662' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3547  0664' 0100               	movlb	0	; () banked
  3548  0666' 5100'              	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3549  0668' 0100               	movlb	0	; () banked
  3550  066A' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3551  066C' 0100               	movlb	0	; () banked
  3552  066E' 5100'              	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3553  0670' 0100               	movlb	0	; () banked
  3554  0672' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3555  0674' 0009               	tblrd		*+
  3556  0676' 50F5               	movf	tablat,w,c
  3557  0678' 0100               	movlb	0	; () banked
  3558  067A' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3559  067C' 0009               	tblrd		*+
  3560  067E' 50F5               	movf	tablat,w,c
  3561  0680' 0100               	movlb	0	; () banked
  3562  0682' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3563  0684' A0D8               	btfss	status,0,c
  3564  0686' D01F               	goto	l3712
  3565                           
  3566                           ; BSR set to: 0
  3567  0688' 0E00'              	movlw	low _DirectionFoundTolerance
  3568  068A' 6EF6               	movwf	tblptrl,c
  3569  068C'                    	if	1	;There is more than 1 active tblptr byte
  3570  068C' 0E00'              	movlw	high _DirectionFoundTolerance
  3571  068E' 6EF7               	movwf	tblptrh,c
  3572  0690'                    	endif
  3573  0690'                    	if	0	;There are less than 3 active tblptr bytes
  3574  0690'                    	endif
  3575  0690' C049' F014'        	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3576  0694' C04A' F015'        	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3577  0698' 0100               	movlb	0	; () banked
  3578  069A' 1F00'              	comf	??_ScanWithRange& (0+255),f,b
  3579  069C' 1F00'              	comf	(??_ScanWithRange+1)& (0+255),f,b
  3580  069E' 4B00'              	infsnz	??_ScanWithRange& (0+255),f,b
  3581  06A0' 2B00'              	incf	(??_ScanWithRange+1)& (0+255),f,b
  3582  06A2' 0100               	movlb	0	; () banked
  3583  06A4' 5100'              	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3584  06A6' 0100               	movlb	0	; () banked
  3585  06A8' 2700'              	addwf	??_ScanWithRange& (0+255),f,b
  3586  06AA' 0100               	movlb	0	; () banked
  3587  06AC' 5100'              	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3588  06AE' 0100               	movlb	0	; () banked
  3589  06B0' 2300'              	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3590  06B2' 0009               	tblrd		*+
  3591  06B4' 50F5               	movf	tablat,w,c
  3592  06B6' 0100               	movlb	0	; () banked
  3593  06B8' 5D00'              	subwf	??_ScanWithRange& (0+255),w,b
  3594  06BA' 0009               	tblrd		*+
  3595  06BC' 50F5               	movf	tablat,w,c
  3596  06BE' 0100               	movlb	0	; () banked
  3597  06C0' 5900'              	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3598  06C2' B0D8               	btfsc	status,0,c
  3599  06C4' D00B               	goto	l3720
  3600  06C6'                    l3712:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;Movement.c: 281: stop(mL,mR);
  3604  06C6' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3605  06CA' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3606  06CE' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3607  06D2' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3608  06D6' EC00' F000'        	call	_stop	;wreg free
  3609  06DA' D71C               	goto	l3676
  3610  06DC'                    l3720:
  3611  06DC' 0100               	movlb	0	; () banked
  3612  06DE' 5100'              	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3613  06E0' 0100               	movlb	0	; () banked
  3614  06E2' 5D00'              	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3615  06E4' 0100               	movlb	0	; () banked
  3616  06E6' 5100'              	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3617  06E8' 0100               	movlb	0	; () banked
  3618  06EA' 5900'              	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3619  06EC' B0D8               	btfsc	status,0,c
  3620  06EE' D024               	goto	l3736
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;Movement.c: 287: turnLeft(mL,mR);
  3624  06F0' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3625  06F4' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3626  06F8' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3627  06FC' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3628  0700' EC00' F000'        	call	_turnLeft	;wreg free
  3629                           
  3630                           ;Movement.c: 288: delay_tenth_s(3*tenth_seconds);
  3631  0704' 0100               	movlb	0	; () banked
  3632  0706' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3633  0708' 0D03               	mullw	3
  3634  070A' 50F3               	movf	prodl,w,c
  3635  070C' EC00' F000'        	call	_delay_tenth_s
  3636                           
  3637                           ;Movement.c: 289: (*MoveTimeEntry) += 3*tenth_seconds;
  3638  0710' 0100               	movlb	0	; () banked
  3639  0712' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3640  0714' 0D03               	mullw	3
  3641  0716' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3642  071A' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3643  071E' 50F3               	movf	prodl,w,c
  3644  0720' 26DF               	addwf	indf2,f,c
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;Movement.c: 290: stop(mL,mR);
  3648  0722' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3649  0726' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3650  072A' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3651  072E' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3652  0732' EC00' F000'        	call	_stop	;wreg free
  3653  0736' D6EE               	goto	l3676
  3654  0738'                    l3736:
  3655  0738' 0100               	movlb	0	; () banked
  3656  073A' 5100'              	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3657  073C' 0100               	movlb	0	; () banked
  3658  073E' 5D00'              	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3659  0740' 0100               	movlb	0	; () banked
  3660  0742' 5100'              	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3661  0744' 0100               	movlb	0	; () banked
  3662  0746' 5900'              	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3663  0748' B0D8               	btfsc	status,0,c
  3664  074A' D020               	goto	l3752
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;Movement.c: 294: turnRight(mL,mR);
  3668  074C' C00D' F006'        	movff	ScanWithRange@mL,turnRight@mL
  3669  0750' C00E' F007'        	movff	ScanWithRange@mL+1,turnRight@mL+1
  3670  0754' C00F' F008'        	movff	ScanWithRange@mR,turnRight@mR
  3671  0758' C010' F009'        	movff	ScanWithRange@mR+1,turnRight@mR+1
  3672  075C' EC00' F000'        	call	_turnRight	;wreg free
  3673                           
  3674                           ;Movement.c: 295: delay_tenth_s(tenth_seconds);
  3675  0760' 0100               	movlb	0	; () banked
  3676  0762' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3677  0764' EC00' F000'        	call	_delay_tenth_s
  3678                           
  3679                           ;Movement.c: 296: (*MoveTimeEntry) -= tenth_seconds;
  3680  0768' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3681  076C' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3682  0770' 0100               	movlb	0	; () banked
  3683  0772' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3684  0774' 5EDF               	subwf	indf2,f,c
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;Movement.c: 297: stop(mL,mR);
  3688  0776' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3689  077A' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3690  077E' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3691  0782' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3692  0786' EC00' F000'        	call	_stop	;wreg free
  3693  078A' D6C4               	goto	l3676
  3694  078C'                    l3752:
  3695  078C' 0100               	movlb	0	; () banked
  3696  078E' 5100'              	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3697  0790' 0100               	movlb	0	; () banked
  3698  0792' 5D00'              	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3699  0794' 0100               	movlb	0	; () banked
  3700  0796' 5100'              	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3701  0798' 0100               	movlb	0	; () banked
  3702  079A' 5900'              	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3703  079C' B0D8               	btfsc	status,0,c
  3704  079E' D042               	goto	l3770
  3705                           
  3706                           ; BSR set to: 0
  3707  07A0' 0100               	movlb	0	; () banked
  3708  07A2' 5100'              	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3709  07A4' 0100               	movlb	0	; () banked
  3710  07A6' 5D00'              	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3711  07A8' 0100               	movlb	0	; () banked
  3712  07AA' 5100'              	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3713  07AC' 0100               	movlb	0	; () banked
  3714  07AE' 5900'              	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3715  07B0' B0D8               	btfsc	status,0,c
  3716  07B2' D038               	goto	l3770
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;Movement.c: 303: turnLeft(mL,mR);
  3720  07B4' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3721  07B8' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3722  07BC' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3723  07C0' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3724  07C4' EC00' F000'        	call	_turnLeft	;wreg free
  3725                           
  3726                           ;Movement.c: 304: delay_tenth_s((3*tenth_seconds)/2);
  3727  07C8' 0100               	movlb	0	; () banked
  3728  07CA' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3729  07CC' 0D03               	mullw	3
  3730  07CE' CFF3 F029'         	movff	prodl,___awdiv@dividend
  3731  07D2' CFF4 F02A'         	movff	prodh,___awdiv@dividend+1
  3732  07D6' 0E00               	movlw	0
  3733  07D8' 6E2C'              	movwf	___awdiv@divisor+1,c
  3734  07DA' 0E02               	movlw	2
  3735  07DC' 6E2B'              	movwf	___awdiv@divisor,c
  3736  07DE' EC00' F000'        	call	___awdiv	;wreg free
  3737  07E2' 5029'              	movf	?___awdiv,w,c
  3738  07E4' EC00' F000'        	call	_delay_tenth_s
  3739                           
  3740                           ;Movement.c: 305: (*MoveTimeEntry) += 3*tenth_seconds/2;
  3741  07E8' 0100               	movlb	0	; () banked
  3742  07EA' 5100'              	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3743  07EC' 0D03               	mullw	3
  3744  07EE' CFF3 F029'         	movff	prodl,___awdiv@dividend
  3745  07F2' CFF4 F02A'         	movff	prodh,___awdiv@dividend+1
  3746  07F6' 0E00               	movlw	0
  3747  07F8' 6E2C'              	movwf	___awdiv@divisor+1,c
  3748  07FA' 0E02               	movlw	2
  3749  07FC' 6E2B'              	movwf	___awdiv@divisor,c
  3750  07FE' EC00' F000'        	call	___awdiv	;wreg free
  3751  0802' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3752  0806' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3753  080A' 5029'              	movf	?___awdiv,w,c
  3754  080C' 26DF               	addwf	indf2,f,c
  3755                           
  3756                           ;Movement.c: 306: stop(mL,mR);
  3757  080E' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3758  0812' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3759  0816' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3760  081A' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3761  081E' EC00' F000'        	call	_stop	;wreg free
  3762  0822' D678               	goto	l3676
  3763  0824'                    l3770:
  3764  0824' 0100               	movlb	0	; () banked
  3765  0826' 5100'              	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3766  0828' 0100               	movlb	0	; () banked
  3767  082A' 5D00'              	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3768  082C' 0100               	movlb	0	; () banked
  3769  082E' 5100'              	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3770  0830' 0100               	movlb	0	; () banked
  3771  0832' 5900'              	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3772  0834' B0D8               	btfsc	status,0,c
  3773  0836' D03A               	goto	l3786
  3774                           
  3775                           ; BSR set to: 0
  3776  0838' 0100               	movlb	0	; () banked
  3777  083A' 5100'              	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3778  083C' 0100               	movlb	0	; () banked
  3779  083E' 5D00'              	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3780  0840' 0100               	movlb	0	; () banked
  3781  0842' 5100'              	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3782  0844' 0100               	movlb	0	; () banked
  3783  0846' 5900'              	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3784  0848' B0D8               	btfsc	status,0,c
  3785  084A' D030               	goto	l3786
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;Movement.c: 310: turnLeft(mL,mR);
  3789  084C' C00D' F006'        	movff	ScanWithRange@mL,turnLeft@mL
  3790  0850' C00E' F007'        	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3791  0854' C00F' F008'        	movff	ScanWithRange@mR,turnLeft@mR
  3792  0858' C010' F009'        	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3793  085C' EC00' F000'        	call	_turnLeft	;wreg free
  3794                           
  3795                           ;Movement.c: 311: delay_tenth_s((tenth_seconds)/2);
  3796  0860' C011' F029'        	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3797  0864' 6A2A'              	clrf	___awdiv@dividend+1,c
  3798  0866' 0E00               	movlw	0
  3799  0868' 6E2C'              	movwf	___awdiv@divisor+1,c
  3800  086A' 0E02               	movlw	2
  3801  086C' 6E2B'              	movwf	___awdiv@divisor,c
  3802  086E' EC00' F000'        	call	___awdiv	;wreg free
  3803  0872' 5029'              	movf	?___awdiv,w,c
  3804  0874' EC00' F000'        	call	_delay_tenth_s
  3805                           
  3806                           ;Movement.c: 312: (*MoveTimeEntry) += tenth_seconds/2;
  3807  0878' C011' F029'        	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3808  087C' 6A2A'              	clrf	___awdiv@dividend+1,c
  3809  087E' 0E00               	movlw	0
  3810  0880' 6E2C'              	movwf	___awdiv@divisor+1,c
  3811  0882' 0E02               	movlw	2
  3812  0884' 6E2B'              	movwf	___awdiv@divisor,c
  3813  0886' EC00' F000'        	call	___awdiv	;wreg free
  3814  088A' C012' FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3815  088E' C013' FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3816  0892' 5029'              	movf	?___awdiv,w,c
  3817  0894' 26DF               	addwf	indf2,f,c
  3818                           
  3819                           ;Movement.c: 313: stop(mL,mR);
  3820  0896' C00D' F002'        	movff	ScanWithRange@mL,stop@mL
  3821  089A' C00E' F003'        	movff	ScanWithRange@mL+1,stop@mL+1
  3822  089E' C00F' F004'        	movff	ScanWithRange@mR,stop@mR
  3823  08A2' C010' F005'        	movff	ScanWithRange@mR+1,stop@mR+1
  3824  08A6' EC00' F000'        	call	_stop	;wreg free
  3825  08AA' D634               	goto	l3676
  3826  08AC'                    l3786:
  3827                           
  3828                           ;Movement.c: 315: }
  3829                           ;Movement.c: 316: }
  3830                           ;Movement.c: 317: return 0;
  3831  08AC' 0E00               	movlw	0
  3832  08AE' 0012               	return	
  3833  08B0'                    __end_of_ScanWithRange:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon	equ	0xFF2
  3842                           postinc0	equ	0xFEE
  3843                           wreg	equ	0xFE8
  3844                           indf1	equ	0xFE7
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           indf2	equ	0xFDF
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _delay_s *****************
  3855 ;; Defined at:
  3856 ;;		line 20 in file "Movement.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  seconds         1    wreg     unsigned char 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  seconds         1   36[COMRAM] unsigned char 
  3861 ;;  i               2   37[COMRAM] unsigned int 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;		None               void
  3864 ;; Registers used:
  3865 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3871 ;;      Params:         0       0       0       0
  3872 ;;      Locals:         3       0       0       0
  3873 ;;      Temps:          1       0       0       0
  3874 ;;      Totals:         4       0       0       0
  3875 ;;Total ram usage:        4 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    3
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_ScanWithRange
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text9
  3886  0000'                    __ptext9:
  3887                           	opt stack 0
  3888  0000'                    _delay_s:
  3889                           	opt stack 26
  3890                           
  3891                           ;incstack = 0
  3892                           ;delay_s@seconds stored from wreg
  3893  0000' 6E24'              	movwf	delay_s@seconds,c
  3894                           
  3895                           ;Movement.c: 21: unsigned int i=0;
  3896  0002' 0E00               	movlw	0
  3897  0004' 6E26'              	movwf	delay_s@i+1,c
  3898  0006' 0E00               	movlw	0
  3899  0008' 6E25'              	movwf	delay_s@i,c
  3900                           
  3901                           ;Movement.c: 22: for (i=1; i<=seconds*20; i++) {
  3902  000A' 0E00               	movlw	0
  3903  000C' 6E26'              	movwf	delay_s@i+1,c
  3904  000E' 0E01               	movlw	1
  3905  0010' 6E25'              	movwf	delay_s@i,c
  3906  0012' D009               	goto	l2566
  3907  0014'                    l2562:
  3908                           
  3909                           ;Movement.c: 24: _delay((unsigned long)((50)*(8000000/4000.0)));
  3910  0014' 0E82               	movlw	130
  3911  0016' 6E00'              	movwf	??_delay_s& (0+255),c
  3912  0018' 0EDE               	movlw	222
  3913  001A'                    u3567:
  3914  001A' 2EE8               	decfsz	wreg,f,c
  3915  001C' D7FE               	goto	u3567
  3916  001E' 2E00'              	decfsz	??_delay_s& (0+255),f,c
  3917  0020' D7FC               	goto	u3567
  3918  0022' 4A25'              	infsnz	delay_s@i,f,c
  3919  0024' 2A26'              	incf	delay_s@i+1,f,c
  3920  0026'                    l2566:
  3921  0026' 5024'              	movf	delay_s@seconds,w,c
  3922  0028' 0D14               	mullw	20
  3923  002A' 5025'              	movf	delay_s@i,w,c
  3924  002C' 5CF3               	subwf	prodl,w,c
  3925  002E' 5026'              	movf	delay_s@i+1,w,c
  3926  0030' 58F4               	subwfb	prodh,w,c
  3927  0032' A0D8               	btfss	status,0,c
  3928  0034' 0012               	return	
  3929  0036' D7EE               	goto	l2562
  3930  0038'                    __end_of_delay_s:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           intcon	equ	0xFF2
  3939                           postinc0	equ	0xFEE
  3940                           wreg	equ	0xFE8
  3941                           indf1	equ	0xFE7
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           indf2	equ	0xFDF
  3945                           postinc2	equ	0xFDE
  3946                           postdec2	equ	0xFDD
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _ScanIR *****************
  3952 ;; Defined at:
  3953 ;;		line 42 in file "Movement.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3956 ;;		 -> main@mL(9), 
  3957 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3958 ;;		 -> main@mR(9), 
  3959 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3960 ;;		 -> main@Move(1), 
  3961 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3962 ;;		 -> main@MoveTime(100), 
  3963 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3964 ;;		 -> main@MoveType(100), 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  buf            40   25[BANK0 ] unsigned char [40]
  3967 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      unsigned char 
  3970 ;; Registers used:
  3971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3977 ;;      Params:         0      10       0       0
  3978 ;;      Locals:         0      44       0       0
  3979 ;;      Temps:          0       2       0       0
  3980 ;;      Totals:         0      56       0       0
  3981 ;;Total ram usage:       56 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    7
  3984 ;; This function calls:
  3985 ;;		_LCD_String
  3986 ;;		_SendLCD
  3987 ;;		_SetLine
  3988 ;;		_delay_tenth_s
  3989 ;;		_grabLeftIR
  3990 ;;		_grabRightIR
  3991 ;;		_sprintf
  3992 ;;		_stop
  3993 ;;		_turnLeft
  3994 ;;		_turnRight
  3995 ;; This function is called by:
  3996 ;;		_main
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text10
  4001  0000'                    __ptext10:
  4002                           	opt stack 0
  4003  0000'                    _ScanIR:
  4004                           	opt stack 23
  4005                           
  4006                           ;Movement.c: 44: unsigned int SensorResult[2]={0,0};
  4007                           
  4008                           ;incstack = 0
  4009  0000' C000' F041'        	movff	ScanIR@F3878,ScanIR@SensorResult
  4010  0004' C001' F042'        	movff	ScanIR@F3878+1,ScanIR@SensorResult+1
  4011  0008' C002' F043'        	movff	ScanIR@F3878+2,ScanIR@SensorResult+2
  4012  000C' C003' F044'        	movff	ScanIR@F3878+3,ScanIR@SensorResult+3
  4013                           
  4014                           ;Movement.c: 45: char buf[40];
  4015                           ;Movement.c: 49: SensorResult[0]=grabLeftIR();
  4016  0010' EC00' F000'        	call	_grabLeftIR	;wreg free
  4017  0014' C023' F041'        	movff	?_grabLeftIR,ScanIR@SensorResult
  4018  0018' C024' F042'        	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4019                           
  4020                           ;Movement.c: 50: SensorResult[1]=grabRightIR();
  4021  001C' EC00' F000'        	call	_grabRightIR	;wreg free
  4022  0020' C023' F043'        	movff	?_grabRightIR,ScanIR@SensorResult+2
  4023  0024' C024' F044'        	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4024                           
  4025                           ;Movement.c: 54: CAP1BUFH=0;
  4026  0028' 0E00               	movlw	0
  4027  002A' 6E69               	movwf	3945,c	;volatile
  4028                           
  4029                           ;Movement.c: 55: CAP1BUFL=0;
  4030  002C' 0E00               	movlw	0
  4031  002E' 6E68               	movwf	3944,c	;volatile
  4032                           
  4033                           ;Movement.c: 56: CAP2BUFH=0;
  4034  0030' 0E00               	movlw	0
  4035  0032' 6E67               	movwf	3943,c	;volatile
  4036                           
  4037                           ;Movement.c: 57: CAP2BUFL=0;
  4038  0034' 0E00               	movlw	0
  4039  0036' 6E66               	movwf	3942,c	;volatile
  4040                           
  4041                           ;Movement.c: 60: SendLCD(0b00000001,0);
  4042  0038' 0E00               	movlw	0
  4043  003A' 6E27'              	movwf	SendLCD@type,c
  4044  003C' 0E01               	movlw	1
  4045  003E' EC00' F000'        	call	_SendLCD
  4046                           
  4047                           ;Movement.c: 61: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4048  0042' 0E21               	movlw	33
  4049  0044'                    u3577:
  4050  0044' 2EE8               	decfsz	wreg,f,c
  4051  0046' D7FE               	goto	u3577
  4052  0048' F000               	nop	
  4053                           
  4054                           ;Movement.c: 62: SendLCD(0b00000010,0);
  4055  004A' 0E00               	movlw	0
  4056  004C' 6E27'              	movwf	SendLCD@type,c
  4057  004E' 0E02               	movlw	2
  4058  0050' EC00' F000'        	call	_SendLCD
  4059                           
  4060                           ;Movement.c: 63: _delay((unsigned long)((2)*(8000000/4000.0)));
  4061  0054' 0E06               	movlw	6
  4062  0056' 0100               	movlb	0	; () banked
  4063  0058' 6F00'              	movwf	??_ScanIR& (0+255),b
  4064  005A' 0E30               	movlw	48
  4065  005C'                    u3587:
  4066  005C' 2EE8               	decfsz	wreg,f,c
  4067  005E' D7FE               	goto	u3587
  4068  0060' 2F00'              	decfsz	??_ScanIR& (0+255),f,b
  4069  0062' D7FC               	goto	u3587
  4070  0064' D000               	nop2	
  4071                           
  4072                           ;Movement.c: 64: SetLine(1);
  4073  0066' 0E01               	movlw	1
  4074  0068' EC00' F000'        	call	_SetLine
  4075                           
  4076                           ;Movement.c: 65: LCD_String("        ScanIR");
  4077  006C' 0E00'              	movlw	low STR_6
  4078  006E' 6E29'              	movwf	LCD_String@string,c
  4079  0070' 0E00'              	movlw	high STR_6
  4080  0072' 6E2A'              	movwf	LCD_String@string+1,c
  4081  0074' EC00' F000'        	call	_LCD_String	;wreg free
  4082                           
  4083                           ;Movement.c: 66: SetLine(2);
  4084  0078' 0E02               	movlw	2
  4085  007A' EC00' F000'        	call	_SetLine
  4086                           
  4087                           ;Movement.c: 67: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4088  007E' 0E00'              	movlw	low ScanIR@buf
  4089  0080' 6E2F'              	movwf	sprintf@sp,c
  4090  0082' 0E00'              	movlw	high ScanIR@buf
  4091  0084' 6E30'              	movwf	sprintf@sp+1,c
  4092  0086' 0E00'              	movlw	low STR_2
  4093  0088' 6E31'              	movwf	sprintf@f,c
  4094  008A' 0E00'              	movlw	high STR_2
  4095  008C' 6E32'              	movwf	sprintf@f+1,c
  4096  008E' C041' F033'        	movff	ScanIR@SensorResult,?_sprintf+4
  4097  0092' C042' F034'        	movff	ScanIR@SensorResult+1,?_sprintf+5
  4098  0096' C043' F035'        	movff	ScanIR@SensorResult+2,?_sprintf+6
  4099  009A' C044' F036'        	movff	ScanIR@SensorResult+3,?_sprintf+7
  4100  009E' EC00' F000'        	call	_sprintf	;wreg free
  4101                           
  4102                           ;Movement.c: 68: LCD_String(buf);
  4103  00A2' 0E00'              	movlw	low ScanIR@buf
  4104  00A4' 6E29'              	movwf	LCD_String@string,c
  4105  00A6' 0E00'              	movlw	high ScanIR@buf
  4106  00A8' 6E2A'              	movwf	LCD_String@string+1,c
  4107  00AA' EC00' F000'        	call	_LCD_String	;wreg free
  4108                           
  4109                           ;Movement.c: 71: if ((SensorResult[0]+SensorResult[1])>ClearSignalThreshold) {
  4110  00AE' 0100               	movlb	0	; () banked
  4111  00B0' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4112  00B2' 0100               	movlb	0	; () banked
  4113  00B4' 2500'              	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4114  00B6' 0100               	movlb	0	; () banked
  4115  00B8' 6F00'              	movwf	??_ScanIR& (0+255),b
  4116  00BA' 0100               	movlb	0	; () banked
  4117  00BC' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4118  00BE' 0100               	movlb	0	; () banked
  4119  00C0' 2100'              	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  4120  00C2' 0100               	movlb	0	; () banked
  4121  00C4' 6F00'              	movwf	(??_ScanIR+1)& (0+255),b
  4122  00C6' 0E00'              	movlw	low _ClearSignalThreshold
  4123  00C8' 6EF6               	movwf	tblptrl,c
  4124  00CA'                    	if	1	;There is more than 1 active tblptr byte
  4125  00CA' 0E00'              	movlw	high _ClearSignalThreshold
  4126  00CC' 6EF7               	movwf	tblptrh,c
  4127  00CE'                    	endif
  4128  00CE'                    	if	0	;There are less than 3 active tblptr bytes
  4129  00CE'                    	endif
  4130  00CE' 0100               	movlb	0	; () banked
  4131  00D0' 5100'              	movf	??_ScanIR& (0+255),w,b
  4132  00D2' 0009               	tblrd		*+
  4133  00D4' 5CF5               	subwf	tablat,w,c
  4134  00D6' 0100               	movlb	0	; () banked
  4135  00D8' 5100'              	movf	(??_ScanIR+1)& (0+255),w,b
  4136  00DA' 0009               	tblrd		*+
  4137  00DC' 58F5               	subwfb	tablat,w,c
  4138  00DE' B0D8               	btfsc	status,0,c
  4139  00E0' D0F8               	goto	l3870
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;Movement.c: 74: if (((SensorResult[0]>DirectionFoundThreshold)&&(SensorResult[1]>Direct
      +                          ionFoundThreshold)
  4143                           ;Movement.c: 75: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  4144                           ;Movement.c: 76: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  4145  00E2' 0E00'              	movlw	low _DirectionFoundThreshold
  4146  00E4' 6EF6               	movwf	tblptrl,c
  4147  00E6'                    	if	1	;There is more than 1 active tblptr byte
  4148  00E6' 0E00'              	movlw	high _DirectionFoundThreshold
  4149  00E8' 6EF7               	movwf	tblptrh,c
  4150  00EA'                    	endif
  4151  00EA'                    	if	0	;There are less than 3 active tblptr bytes
  4152  00EA'                    	endif
  4153  00EA' 0100               	movlb	0	; () banked
  4154  00EC' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4155  00EE' 0009               	tblrd		*+
  4156  00F0' 5CF5               	subwf	tablat,w,c
  4157  00F2' 0100               	movlb	0	; () banked
  4158  00F4' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4159  00F6' 0009               	tblrd		*+
  4160  00F8' 58F5               	subwfb	tablat,w,c
  4161  00FA' B0D8               	btfsc	status,0,c
  4162  00FC' D050               	goto	l3832
  4163                           
  4164                           ; BSR set to: 0
  4165  00FE' 0E00'              	movlw	low _DirectionFoundThreshold
  4166  0100' 6EF6               	movwf	tblptrl,c
  4167  0102'                    	if	1	;There is more than 1 active tblptr byte
  4168  0102' 0E00'              	movlw	high _DirectionFoundThreshold
  4169  0104' 6EF7               	movwf	tblptrh,c
  4170  0106'                    	endif
  4171  0106'                    	if	0	;There are less than 3 active tblptr bytes
  4172  0106'                    	endif
  4173  0106' 0100               	movlb	0	; () banked
  4174  0108' 5100'              	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4175  010A' 0009               	tblrd		*+
  4176  010C' 5CF5               	subwf	tablat,w,c
  4177  010E' 0100               	movlb	0	; () banked
  4178  0110' 5100'              	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4179  0112' 0009               	tblrd		*+
  4180  0114' 58F5               	subwfb	tablat,w,c
  4181  0116' B0D8               	btfsc	status,0,c
  4182  0118' D042               	goto	l3832
  4183                           
  4184                           ; BSR set to: 0
  4185  011A' 0E00'              	movlw	low _DirectionFoundTolerance
  4186  011C' 6EF6               	movwf	tblptrl,c
  4187  011E'                    	if	1	;There is more than 1 active tblptr byte
  4188  011E' 0E00'              	movlw	high _DirectionFoundTolerance
  4189  0120' 6EF7               	movwf	tblptrh,c
  4190  0122'                    	endif
  4191  0122'                    	if	0	;There are less than 3 active tblptr bytes
  4192  0122'                    	endif
  4193  0122' EE20' F000'        	lfsr	2,ScanIR@SensorResult+2
  4194  0126' CFDE F017'         	movff	postinc2,??_ScanIR
  4195  012A' CFDD F018'         	movff	postdec2,??_ScanIR+1
  4196  012E' 0100               	movlb	0	; () banked
  4197  0130' 1F00'              	comf	??_ScanIR& (0+255),f,b
  4198  0132' 1F00'              	comf	(??_ScanIR+1)& (0+255),f,b
  4199  0134' 4B00'              	infsnz	??_ScanIR& (0+255),f,b
  4200  0136' 2B00'              	incf	(??_ScanIR+1)& (0+255),f,b
  4201  0138' 0100               	movlb	0	; () banked
  4202  013A' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4203  013C' 0100               	movlb	0	; () banked
  4204  013E' 2700'              	addwf	??_ScanIR& (0+255),f,b
  4205  0140' 0100               	movlb	0	; () banked
  4206  0142' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4207  0144' 0100               	movlb	0	; () banked
  4208  0146' 2300'              	addwfc	(??_ScanIR+1)& (0+255),f,b
  4209  0148' 0009               	tblrd		*+
  4210  014A' 50F5               	movf	tablat,w,c
  4211  014C' 0100               	movlb	0	; () banked
  4212  014E' 5D00'              	subwf	??_ScanIR& (0+255),w,b
  4213  0150' 0009               	tblrd		*+
  4214  0152' 50F5               	movf	tablat,w,c
  4215  0154' 0100               	movlb	0	; () banked
  4216  0156' 5900'              	subwfb	(??_ScanIR+1)& (0+255),w,b
  4217  0158' A0D8               	btfss	status,0,c
  4218  015A' D01F               	goto	l3826
  4219                           
  4220                           ; BSR set to: 0
  4221  015C' 0E00'              	movlw	low _DirectionFoundTolerance
  4222  015E' 6EF6               	movwf	tblptrl,c
  4223  0160'                    	if	1	;There is more than 1 active tblptr byte
  4224  0160' 0E00'              	movlw	high _DirectionFoundTolerance
  4225  0162' 6EF7               	movwf	tblptrh,c
  4226  0164'                    	endif
  4227  0164'                    	if	0	;There are less than 3 active tblptr bytes
  4228  0164'                    	endif
  4229  0164' C041' F017'        	movff	ScanIR@SensorResult,??_ScanIR
  4230  0168' C042' F018'        	movff	ScanIR@SensorResult+1,??_ScanIR+1
  4231  016C' 0100               	movlb	0	; () banked
  4232  016E' 1F00'              	comf	??_ScanIR& (0+255),f,b
  4233  0170' 1F00'              	comf	(??_ScanIR+1)& (0+255),f,b
  4234  0172' 4B00'              	infsnz	??_ScanIR& (0+255),f,b
  4235  0174' 2B00'              	incf	(??_ScanIR+1)& (0+255),f,b
  4236  0176' 0100               	movlb	0	; () banked
  4237  0178' 5100'              	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4238  017A' 0100               	movlb	0	; () banked
  4239  017C' 2700'              	addwf	??_ScanIR& (0+255),f,b
  4240  017E' 0100               	movlb	0	; () banked
  4241  0180' 5100'              	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4242  0182' 0100               	movlb	0	; () banked
  4243  0184' 2300'              	addwfc	(??_ScanIR+1)& (0+255),f,b
  4244  0186' 0009               	tblrd		*+
  4245  0188' 50F5               	movf	tablat,w,c
  4246  018A' 0100               	movlb	0	; () banked
  4247  018C' 5D00'              	subwf	??_ScanIR& (0+255),w,b
  4248  018E' 0009               	tblrd		*+
  4249  0190' 50F5               	movf	tablat,w,c
  4250  0192' 0100               	movlb	0	; () banked
  4251  0194' 5900'              	subwfb	(??_ScanIR+1)& (0+255),w,b
  4252  0196' B0D8               	btfsc	status,0,c
  4253  0198' D002               	goto	l3832
  4254  019A'                    l3826:
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;Movement.c: 77: return 2;
  4258  019A' 0E02               	movlw	2
  4259                           
  4260                           ; BSR set to: 0
  4261  019C' 0012               	return	
  4262  019E'                    l3832:
  4263                           
  4264                           ; BSR set to: 0
  4265  019E' 0100               	movlb	0	; () banked
  4266  01A0' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4267  01A2' 0100               	movlb	0	; () banked
  4268  01A4' 5D00'              	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4269  01A6' 0100               	movlb	0	; () banked
  4270  01A8' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4271  01AA' 0100               	movlb	0	; () banked
  4272  01AC' 5900'              	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4273  01AE' A0D8               	btfss	status,0,c
  4274  01B0' D03A               	goto	l3852
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;Movement.c: 80: stop(mL,mR);
  4278  01B2' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4279  01B6' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4280  01BA' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4281  01BE' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4282  01C2' EC00' F000'        	call	_stop	;wreg free
  4283                           
  4284                           ;Movement.c: 81: turnLeft(mL,mR);
  4285  01C6' C00D' F006'        	movff	ScanIR@mL,turnLeft@mL
  4286  01CA' C00E' F007'        	movff	ScanIR@mL+1,turnLeft@mL+1
  4287  01CE' C00F' F008'        	movff	ScanIR@mR,turnLeft@mR
  4288  01D2' C010' F009'        	movff	ScanIR@mR+1,turnLeft@mR+1
  4289  01D6' EC00' F000'        	call	_turnLeft	;wreg free
  4290                           
  4291                           ;Movement.c: 82: delay_tenth_s(3);
  4292  01DA' 0E03               	movlw	3
  4293  01DC' EC00' F000'        	call	_delay_tenth_s
  4294                           
  4295                           ;Movement.c: 83: stop(mL,mR);
  4296  01E0' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4297  01E4' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4298  01E8' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4299  01EC' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4300  01F0' EC00' F000'        	call	_stop	;wreg free
  4301                           
  4302                           ;Movement.c: 84: MoveTime[*Move]=3;
  4303  01F4' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4304  01F8' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4305  01FC' 50DF               	movf	indf2,w,c
  4306  01FE' 0100               	movlb	0	; () banked
  4307  0200' 6F00'              	movwf	??_ScanIR& (0+255),b
  4308  0202' 0100               	movlb	0	; () banked
  4309  0204' 5100'              	movf	??_ScanIR& (0+255),w,b
  4310  0206' 0D01               	mullw	1
  4311  0208' 50F3               	movf	prodl,w,c
  4312  020A' 0100               	movlb	0	; () banked
  4313  020C' 2500'              	addwf	ScanIR@MoveTime& (0+255),w,b
  4314  020E' 6ED9               	movwf	fsr2l,c
  4315  0210' 50F4               	movf	prodh,w,c
  4316  0212' 0100               	movlb	0	; () banked
  4317  0214' 2100'              	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4318  0216' 6EDA               	movwf	fsr2h,c
  4319  0218' 0E03               	movlw	3
  4320  021A' 6EDF               	movwf	indf2,c
  4321  021C' D043               	goto	l3862
  4322  021E'                    l3844:
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;Movement.c: 86: Move++;
  4326  021E' 0100               	movlb	0	; () banked
  4327  0220' 4B00'              	infsnz	ScanIR@Move& (0+255),f,b
  4328  0222' 2B00'              	incf	(ScanIR@Move+1)& (0+255),f,b
  4329  0224' D054               	goto	l3866
  4330  0226'                    l3852:
  4331                           
  4332                           ; BSR set to: 0
  4333  0226' 0100               	movlb	0	; () banked
  4334  0228' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4335  022A' 0100               	movlb	0	; () banked
  4336  022C' 5D00'              	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4337  022E' 0100               	movlb	0	; () banked
  4338  0230' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4339  0232' 0100               	movlb	0	; () banked
  4340  0234' 5900'              	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4341  0236' B0D8               	btfsc	status,0,c
  4342  0238' D0DC               	goto	l3910
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;Movement.c: 91: stop(mL,mR);
  4346  023A' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4347  023E' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4348  0242' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4349  0246' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4350  024A' EC00' F000'        	call	_stop	;wreg free
  4351                           
  4352                           ;Movement.c: 92: turnRight(mL,mR);
  4353  024E' C00D' F006'        	movff	ScanIR@mL,turnRight@mL
  4354  0252' C00E' F007'        	movff	ScanIR@mL+1,turnRight@mL+1
  4355  0256' C00F' F008'        	movff	ScanIR@mR,turnRight@mR
  4356  025A' C010' F009'        	movff	ScanIR@mR+1,turnRight@mR+1
  4357  025E' EC00' F000'        	call	_turnRight	;wreg free
  4358                           
  4359                           ;Movement.c: 93: delay_tenth_s(3);
  4360  0262' 0E03               	movlw	3
  4361  0264' EC00' F000'        	call	_delay_tenth_s
  4362                           
  4363                           ;Movement.c: 94: stop(mL,mR);
  4364  0268' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4365  026C' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4366  0270' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4367  0274' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4368  0278' EC00' F000'        	call	_stop	;wreg free
  4369                           
  4370                           ;Movement.c: 95: MoveTime[*Move]=-3;
  4371  027C' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4372  0280' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4373  0284' 50DF               	movf	indf2,w,c
  4374  0286' 0100               	movlb	0	; () banked
  4375  0288' 6F00'              	movwf	??_ScanIR& (0+255),b
  4376  028A' 0100               	movlb	0	; () banked
  4377  028C' 5100'              	movf	??_ScanIR& (0+255),w,b
  4378  028E' 0D01               	mullw	1
  4379  0290' 50F3               	movf	prodl,w,c
  4380  0292' 0100               	movlb	0	; () banked
  4381  0294' 2500'              	addwf	ScanIR@MoveTime& (0+255),w,b
  4382  0296' 6ED9               	movwf	fsr2l,c
  4383  0298' 50F4               	movf	prodh,w,c
  4384  029A' 0100               	movlb	0	; () banked
  4385  029C' 2100'              	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4386  029E' 6EDA               	movwf	fsr2h,c
  4387  02A0' 0EFD               	movlw	253
  4388  02A2' D7BB               	goto	L3
  4389  02A4'                    l3862:
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;Movement.c: 96: MoveType[*Move]=1;
  4393  02A4' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4394  02A8' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4395  02AC' 50DF               	movf	indf2,w,c
  4396  02AE' 0100               	movlb	0	; () banked
  4397  02B0' 6F00'              	movwf	??_ScanIR& (0+255),b
  4398  02B2' 0100               	movlb	0	; () banked
  4399  02B4' 5100'              	movf	??_ScanIR& (0+255),w,b
  4400  02B6' 0D01               	mullw	1
  4401  02B8' 50F3               	movf	prodl,w,c
  4402  02BA' 0100               	movlb	0	; () banked
  4403  02BC' 2500'              	addwf	ScanIR@MoveType& (0+255),w,b
  4404  02BE' 6ED9               	movwf	fsr2l,c
  4405  02C0' 50F4               	movf	prodh,w,c
  4406  02C2' 0100               	movlb	0	; () banked
  4407  02C4' 2100'              	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4408  02C6' 6EDA               	movwf	fsr2h,c
  4409  02C8' 0E01               	movlw	1
  4410  02CA' 6EDF               	movwf	indf2,c
  4411  02CC' D7A8               	goto	l3844
  4412  02CE'                    l3866:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;Movement.c: 98: return 1;
  4416  02CE' 0E01               	movlw	1
  4417                           
  4418                           ; BSR set to: 0
  4419  02D0' 0012               	return	
  4420  02D2'                    l3870:
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;Movement.c: 103: stop(mL,mR);
  4424  02D2' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4425  02D6' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4426  02DA' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4427  02DE' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4428  02E2' EC00' F000'        	call	_stop	;wreg free
  4429                           
  4430                           ;Movement.c: 106: if (SensorResult[0]<=SensorResult[1]) {
  4431  02E6' 0100               	movlb	0	; () banked
  4432  02E8' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4433  02EA' 0100               	movlb	0	; () banked
  4434  02EC' 5D00'              	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4435  02EE' 0100               	movlb	0	; () banked
  4436  02F0' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4437  02F2' 0100               	movlb	0	; () banked
  4438  02F4' 5900'              	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4439  02F6' A0D8               	btfss	status,0,c
  4440  02F8' D030               	goto	l3892
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;Movement.c: 107: turnLeft(mL,mR);
  4444  02FA' C00D' F006'        	movff	ScanIR@mL,turnLeft@mL
  4445  02FE' C00E' F007'        	movff	ScanIR@mL+1,turnLeft@mL+1
  4446  0302' C00F' F008'        	movff	ScanIR@mR,turnLeft@mR
  4447  0306' C010' F009'        	movff	ScanIR@mR+1,turnLeft@mR+1
  4448  030A' EC00' F000'        	call	_turnLeft	;wreg free
  4449                           
  4450                           ;Movement.c: 108: delay_tenth_s(5);
  4451  030E' 0E05               	movlw	5
  4452  0310' EC00' F000'        	call	_delay_tenth_s
  4453                           
  4454                           ;Movement.c: 109: stop(mL,mR);
  4455  0314' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4456  0318' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4457  031C' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4458  0320' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4459  0324' EC00' F000'        	call	_stop	;wreg free
  4460                           
  4461                           ;Movement.c: 110: MoveTime[*Move]=5;
  4462  0328' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4463  032C' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4464  0330' 50DF               	movf	indf2,w,c
  4465  0332' 0100               	movlb	0	; () banked
  4466  0334' 6F00'              	movwf	??_ScanIR& (0+255),b
  4467  0336' 0100               	movlb	0	; () banked
  4468  0338' 5100'              	movf	??_ScanIR& (0+255),w,b
  4469  033A' 0D01               	mullw	1
  4470  033C' 50F3               	movf	prodl,w,c
  4471  033E' 0100               	movlb	0	; () banked
  4472  0340' 2500'              	addwf	ScanIR@MoveTime& (0+255),w,b
  4473  0342' 6ED9               	movwf	fsr2l,c
  4474  0344' 50F4               	movf	prodh,w,c
  4475  0346' 0100               	movlb	0	; () banked
  4476  0348' 2100'              	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4477  034A' 6EDA               	movwf	fsr2h,c
  4478  034C' 0E05               	movlw	5
  4479  034E' 6EDF               	movwf	indf2,c
  4480  0350' D039               	goto	l3902
  4481  0352'                    l3884:
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;Movement.c: 112: Move++;
  4485  0352' 0100               	movlb	0	; () banked
  4486  0354' 4B00'              	infsnz	ScanIR@Move& (0+255),f,b
  4487  0356' 2B00'              	incf	(ScanIR@Move+1)& (0+255),f,b
  4488  0358' D04A               	goto	l3906
  4489  035A'                    l3892:
  4490                           
  4491                           ; BSR set to: 0
  4492  035A' 0100               	movlb	0	; () banked
  4493  035C' 5100'              	movf	ScanIR@SensorResult& (0+255),w,b
  4494  035E' 0100               	movlb	0	; () banked
  4495  0360' 5D00'              	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4496  0362' 0100               	movlb	0	; () banked
  4497  0364' 5100'              	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4498  0366' 0100               	movlb	0	; () banked
  4499  0368' 5900'              	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4500  036A' B0D8               	btfsc	status,0,c
  4501  036C' D042               	goto	l3910
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;Movement.c: 116: turnRight(mL,mR);
  4505  036E' C00D' F006'        	movff	ScanIR@mL,turnRight@mL
  4506  0372' C00E' F007'        	movff	ScanIR@mL+1,turnRight@mL+1
  4507  0376' C00F' F008'        	movff	ScanIR@mR,turnRight@mR
  4508  037A' C010' F009'        	movff	ScanIR@mR+1,turnRight@mR+1
  4509  037E' EC00' F000'        	call	_turnRight	;wreg free
  4510                           
  4511                           ;Movement.c: 117: delay_tenth_s(5);
  4512  0382' 0E05               	movlw	5
  4513  0384' EC00' F000'        	call	_delay_tenth_s
  4514                           
  4515                           ;Movement.c: 118: stop(mL,mR);
  4516  0388' C00D' F002'        	movff	ScanIR@mL,stop@mL
  4517  038C' C00E' F003'        	movff	ScanIR@mL+1,stop@mL+1
  4518  0390' C00F' F004'        	movff	ScanIR@mR,stop@mR
  4519  0394' C010' F005'        	movff	ScanIR@mR+1,stop@mR+1
  4520  0398' EC00' F000'        	call	_stop	;wreg free
  4521                           
  4522                           ;Movement.c: 119: MoveTime[*Move]=-5;
  4523  039C' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4524  03A0' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4525  03A4' 50DF               	movf	indf2,w,c
  4526  03A6' 0100               	movlb	0	; () banked
  4527  03A8' 6F00'              	movwf	??_ScanIR& (0+255),b
  4528  03AA' 0100               	movlb	0	; () banked
  4529  03AC' 5100'              	movf	??_ScanIR& (0+255),w,b
  4530  03AE' 0D01               	mullw	1
  4531  03B0' 50F3               	movf	prodl,w,c
  4532  03B2' 0100               	movlb	0	; () banked
  4533  03B4' 2500'              	addwf	ScanIR@MoveTime& (0+255),w,b
  4534  03B6' 6ED9               	movwf	fsr2l,c
  4535  03B8' 50F4               	movf	prodh,w,c
  4536  03BA' 0100               	movlb	0	; () banked
  4537  03BC' 2100'              	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4538  03BE' 6EDA               	movwf	fsr2h,c
  4539  03C0' 0EFB               	movlw	251
  4540  03C2' D7C5               	goto	L4
  4541  03C4'                    l3902:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;Movement.c: 120: MoveType[*Move]=1;
  4545  03C4' C011' FFD9         	movff	ScanIR@Move,fsr2l
  4546  03C8' C012' FFDA         	movff	ScanIR@Move+1,fsr2h
  4547  03CC' 50DF               	movf	indf2,w,c
  4548  03CE' 0100               	movlb	0	; () banked
  4549  03D0' 6F00'              	movwf	??_ScanIR& (0+255),b
  4550  03D2' 0100               	movlb	0	; () banked
  4551  03D4' 5100'              	movf	??_ScanIR& (0+255),w,b
  4552  03D6' 0D01               	mullw	1
  4553  03D8' 50F3               	movf	prodl,w,c
  4554  03DA' 0100               	movlb	0	; () banked
  4555  03DC' 2500'              	addwf	ScanIR@MoveType& (0+255),w,b
  4556  03DE' 6ED9               	movwf	fsr2l,c
  4557  03E0' 50F4               	movf	prodh,w,c
  4558  03E2' 0100               	movlb	0	; () banked
  4559  03E4' 2100'              	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4560  03E6' 6EDA               	movwf	fsr2h,c
  4561  03E8' 0E01               	movlw	1
  4562  03EA' 6EDF               	movwf	indf2,c
  4563  03EC' D7B2               	goto	l3884
  4564  03EE'                    l3906:
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;Movement.c: 122: return 0;
  4568  03EE' 0E00               	movlw	0
  4569                           
  4570                           ; BSR set to: 0
  4571  03F0' 0012               	return	
  4572  03F2'                    l3910:
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;Movement.c: 123: }
  4576                           ;Movement.c: 124: }
  4577                           ;Movement.c: 125: return 0;
  4578  03F2' 0E00               	movlw	0
  4579  03F4' 0012               	return	
  4580  03F6'                    __end_of_ScanIR:
  4581                           	opt stack 0
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           postinc0	equ	0xFEE
  4590                           wreg	equ	0xFE8
  4591                           indf1	equ	0xFE7
  4592                           fsr1h	equ	0xFE2
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _turnRight *****************
  4602 ;; Defined at:
  4603 ;;		line 98 in file "dc_motor.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4606 ;;		 -> main@mL(9), 
  4607 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4608 ;;		 -> main@mR(9), 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;		None
  4611 ;; Return value:  Size  Location     Type
  4612 ;;		None               void
  4613 ;; Registers used:
  4614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4620 ;;      Params:         0       4       0       0
  4621 ;;      Locals:         0       0       0       0
  4622 ;;      Temps:          0       0       0       0
  4623 ;;      Totals:         0       4       0       0
  4624 ;;Total ram usage:        4 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    6
  4627 ;; This function calls:
  4628 ;;		_fullSpeedAhead
  4629 ;;		_stop
  4630 ;; This function is called by:
  4631 ;;		_ScanIR
  4632 ;;		_ScanWithRange
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text11
  4637  0000'                    __ptext11:
  4638                           	opt stack 0
  4639  0000'                    _turnRight:
  4640                           	opt stack 23
  4641                           
  4642                           ;dc_motor.c: 100: stop(mL, mR);
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;incstack = 0
  4646  0000' C006' F002'        	movff	turnRight@mL,stop@mL
  4647  0004' C007' F003'        	movff	turnRight@mL+1,stop@mL+1
  4648  0008' C008' F004'        	movff	turnRight@mR,stop@mR
  4649  000C' C009' F005'        	movff	turnRight@mR+1,stop@mR+1
  4650  0010' EC00' F000'        	call	_stop	;wreg free
  4651                           
  4652                           ;dc_motor.c: 102: mL->direction=1;
  4653  0014' 0100               	movlb	0	; () banked
  4654  0016' EE20 F001          	lfsr	2,1
  4655  001A' 5100'              	movf	turnRight@mL& (0+255),w,b
  4656  001C' 26D9               	addwf	fsr2l,f,c
  4657  001E' 5100'              	movf	(turnRight@mL+1)& (0+255),w,b
  4658  0020' 22DA               	addwfc	fsr2h,f,c
  4659  0022' 0E01               	movlw	1
  4660  0024' 6EDF               	movwf	indf2,c
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;dc_motor.c: 103: mR->direction=0;
  4664  0026' 0100               	movlb	0	; () banked
  4665  0028' EE20 F001          	lfsr	2,1
  4666  002C' 5100'              	movf	turnRight@mR& (0+255),w,b
  4667  002E' 26D9               	addwf	fsr2l,f,c
  4668  0030' 5100'              	movf	(turnRight@mR+1)& (0+255),w,b
  4669  0032' 22DA               	addwfc	fsr2h,f,c
  4670  0034' 0E00               	movlw	0
  4671  0036' 6EDF               	movwf	indf2,c
  4672                           
  4673                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  4674  0038' C006' F002'        	movff	turnRight@mL,fullSpeedAhead@mL
  4675  003C' C007' F003'        	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  4676  0040' C008' F004'        	movff	turnRight@mR,fullSpeedAhead@mR
  4677  0044' C009' F005'        	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  4678  0048' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  4679  004C' 0012               	return		;funcret
  4680  004E'                    __end_of_turnRight:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           intcon	equ	0xFF2
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           indf1	equ	0xFE7
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function _turnLeft *****************
  4702 ;; Defined at:
  4703 ;;		line 87 in file "dc_motor.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4706 ;;		 -> main@mL(9), 
  4707 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4708 ;;		 -> main@mR(9), 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;		None               void
  4713 ;; Registers used:
  4714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4720 ;;      Params:         0       4       0       0
  4721 ;;      Locals:         0       0       0       0
  4722 ;;      Temps:          0       0       0       0
  4723 ;;      Totals:         0       4       0       0
  4724 ;;Total ram usage:        4 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    6
  4727 ;; This function calls:
  4728 ;;		_fullSpeedAhead
  4729 ;;		_stop
  4730 ;; This function is called by:
  4731 ;;		_ScanIR
  4732 ;;		_ScanWithRange
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text12
  4737  0000'                    __ptext12:
  4738                           	opt stack 0
  4739  0000'                    _turnLeft:
  4740                           	opt stack 23
  4741                           
  4742                           ;dc_motor.c: 89: stop(mL, mR);
  4743                           
  4744                           ;incstack = 0
  4745  0000' C006' F002'        	movff	turnLeft@mL,stop@mL
  4746  0004' C007' F003'        	movff	turnLeft@mL+1,stop@mL+1
  4747  0008' C008' F004'        	movff	turnLeft@mR,stop@mR
  4748  000C' C009' F005'        	movff	turnLeft@mR+1,stop@mR+1
  4749  0010' EC00' F000'        	call	_stop	;wreg free
  4750                           
  4751                           ;dc_motor.c: 91: mL->direction=0;
  4752  0014' 0100               	movlb	0	; () banked
  4753  0016' EE20 F001          	lfsr	2,1
  4754  001A' 5100'              	movf	turnLeft@mL& (0+255),w,b
  4755  001C' 26D9               	addwf	fsr2l,f,c
  4756  001E' 5100'              	movf	(turnLeft@mL+1)& (0+255),w,b
  4757  0020' 22DA               	addwfc	fsr2h,f,c
  4758  0022' 0E00               	movlw	0
  4759  0024' 6EDF               	movwf	indf2,c
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;dc_motor.c: 92: mR->direction=1;
  4763  0026' 0100               	movlb	0	; () banked
  4764  0028' EE20 F001          	lfsr	2,1
  4765  002C' 5100'              	movf	turnLeft@mR& (0+255),w,b
  4766  002E' 26D9               	addwf	fsr2l,f,c
  4767  0030' 5100'              	movf	(turnLeft@mR+1)& (0+255),w,b
  4768  0032' 22DA               	addwfc	fsr2h,f,c
  4769  0034' 0E01               	movlw	1
  4770  0036' 6EDF               	movwf	indf2,c
  4771                           
  4772                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4773  0038' C006' F002'        	movff	turnLeft@mL,fullSpeedAhead@mL
  4774  003C' C007' F003'        	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4775  0040' C008' F004'        	movff	turnLeft@mR,fullSpeedAhead@mR
  4776  0044' C009' F005'        	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4777  0048' EC00' F000'        	call	_fullSpeedAhead	;wreg free
  4778  004C' 0012               	return		;funcret
  4779  004E'                    __end_of_turnLeft:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           indf1	equ	0xFE7
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _stop *****************
  4801 ;; Defined at:
  4802 ;;		line 67 in file "dc_motor.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4805 ;;		 -> main@mL(9), 
  4806 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4807 ;;		 -> main@mR(9), 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;		None               void
  4812 ;; Registers used:
  4813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4819 ;;      Params:         0       4       0       0
  4820 ;;      Locals:         0       0       0       0
  4821 ;;      Temps:          0       0       0       0
  4822 ;;      Totals:         0       4       0       0
  4823 ;;Total ram usage:        4 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    5
  4826 ;; This function calls:
  4827 ;;		_setMotorPWM
  4828 ;; This function is called by:
  4829 ;;		_main
  4830 ;;		_turnLeft
  4831 ;;		_turnRight
  4832 ;;		_ScanIR
  4833 ;;		_ScanWithRange
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text13
  4838  0000'                    __ptext13:
  4839                           	opt stack 0
  4840  0000'                    _stop:
  4841                           	opt stack 25
  4842                           
  4843                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4844                           
  4845                           ;incstack = 0
  4846  0000' D028               	goto	l3370
  4847  0002'                    l3356:
  4848                           
  4849                           ;dc_motor.c: 71: if(mL->power>0){
  4850  0002' C002' FFD9         	movff	stop@mL,fsr2l
  4851  0006' C003' FFDA         	movff	stop@mL+1,fsr2h
  4852  000A' 50DF               	movf	indf2,w,c
  4853  000C' B4D8               	btfsc	status,2,c
  4854  000E' D005               	goto	l3360
  4855                           
  4856                           ;dc_motor.c: 72: mL->power--;
  4857  0010' C002' FFD9         	movff	stop@mL,fsr2l
  4858  0014' C003' FFDA         	movff	stop@mL+1,fsr2h
  4859  0018' 06DF               	decf	indf2,f,c
  4860  001A'                    l3360:
  4861                           
  4862                           ;dc_motor.c: 73: }
  4863                           ;dc_motor.c: 74: if(mR->power>0){
  4864  001A' C004' FFD9         	movff	stop@mR,fsr2l
  4865  001E' C005' FFDA         	movff	stop@mR+1,fsr2h
  4866  0022' 50DF               	movf	indf2,w,c
  4867  0024' B4D8               	btfsc	status,2,c
  4868  0026' D005               	goto	l3364
  4869                           
  4870                           ;dc_motor.c: 75: mR->power--;
  4871  0028' C004' FFD9         	movff	stop@mR,fsr2l
  4872  002C' C005' FFDA         	movff	stop@mR+1,fsr2h
  4873  0030' 06DF               	decf	indf2,f,c
  4874  0032'                    l3364:
  4875                           
  4876                           ;dc_motor.c: 76: }
  4877                           ;dc_motor.c: 77: setMotorPWM(mL);
  4878  0032' C002' F031'        	movff	stop@mL,setMotorPWM@m
  4879  0036' C003' F032'        	movff	stop@mL+1,setMotorPWM@m+1
  4880  003A' EC00' F000'        	call	_setMotorPWM	;wreg free
  4881                           
  4882                           ;dc_motor.c: 78: setMotorPWM(mR);
  4883  003E' C004' F031'        	movff	stop@mR,setMotorPWM@m
  4884  0042' C005' F032'        	movff	stop@mR+1,setMotorPWM@m+1
  4885  0046' EC00' F000'        	call	_setMotorPWM	;wreg free
  4886                           
  4887                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4888  004A' 0E21               	movlw	33
  4889  004C'                    u3597:
  4890  004C' 2EE8               	decfsz	wreg,f,c
  4891  004E' D7FE               	goto	u3597
  4892  0050' F000               	nop	
  4893  0052'                    l3370:
  4894  0052' C002' FFD9         	movff	stop@mL,fsr2l
  4895  0056' C003' FFDA         	movff	stop@mL+1,fsr2h
  4896  005A' 50DF               	movf	indf2,w,c
  4897  005C' A4D8               	btfss	status,2,c
  4898  005E' D7D1               	goto	l3356
  4899  0060' C004' FFD9         	movff	stop@mR,fsr2l
  4900  0064' C005' FFDA         	movff	stop@mR+1,fsr2h
  4901  0068' 50DF               	movf	indf2,w,c
  4902  006A' A4D8               	btfss	status,2,c
  4903  006C' D7CA               	goto	l3356
  4904                           
  4905                           ;dc_motor.c: 80: }
  4906                           ;dc_motor.c: 81: mL->direction=1;
  4907  006E' 0100               	movlb	0	; () banked
  4908  0070' EE20 F001          	lfsr	2,1
  4909  0074' 5100'              	movf	stop@mL& (0+255),w,b
  4910  0076' 26D9               	addwf	fsr2l,f,c
  4911  0078' 5100'              	movf	(stop@mL+1)& (0+255),w,b
  4912  007A' 22DA               	addwfc	fsr2h,f,c
  4913  007C' 0E01               	movlw	1
  4914  007E' 6EDF               	movwf	indf2,c
  4915                           
  4916                           ;dc_motor.c: 82: mR->direction=1;
  4917  0080' 0100               	movlb	0	; () banked
  4918  0082' EE20 F001          	lfsr	2,1
  4919  0086' 5100'              	movf	stop@mR& (0+255),w,b
  4920  0088' 26D9               	addwf	fsr2l,f,c
  4921  008A' 5100'              	movf	(stop@mR+1)& (0+255),w,b
  4922  008C' 22DA               	addwfc	fsr2h,f,c
  4923  008E' 0E01               	movlw	1
  4924  0090' 6EDF               	movwf	indf2,c
  4925                           
  4926                           ; BSR set to: 0
  4927  0092' 0012               	return		;funcret
  4928  0094'                    __end_of_stop:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           tblptrh	equ	0xFF7
  4932                           tblptrl	equ	0xFF6
  4933                           tablat	equ	0xFF5
  4934                           prodh	equ	0xFF4
  4935                           prodl	equ	0xFF3
  4936                           intcon	equ	0xFF2
  4937                           postinc0	equ	0xFEE
  4938                           wreg	equ	0xFE8
  4939                           indf1	equ	0xFE7
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           postdec2	equ	0xFDD
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _fullSpeedAhead *****************
  4950 ;; Defined at:
  4951 ;;		line 108 in file "dc_motor.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4954 ;;		 -> main@mL(9), 
  4955 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4956 ;;		 -> main@mR(9), 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;		None               void
  4961 ;; Registers used:
  4962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4968 ;;      Params:         0       4       0       0
  4969 ;;      Locals:         0       0       0       0
  4970 ;;      Temps:          1       0       0       0
  4971 ;;      Totals:         1       4       0       0
  4972 ;;Total ram usage:        5 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    5
  4975 ;; This function calls:
  4976 ;;		_setMotorPWM
  4977 ;; This function is called by:
  4978 ;;		_main
  4979 ;;		_turnLeft
  4980 ;;		_turnRight
  4981 ;;		_fullSpeedBack
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text14
  4986  0000'                    __ptext14:
  4987                           	opt stack 0
  4988  0000'                    _fullSpeedAhead:
  4989                           	opt stack 24
  4990                           
  4991                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;incstack = 0
  4995  0000' D028               	goto	l193
  4996  0002'                    l3378:
  4997                           
  4998                           ;dc_motor.c: 112: if(mL->power<100){
  4999  0002' C002' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5000  0006' C003' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5001  000A' 0E64               	movlw	100
  5002  000C' 60DF               	cpfslt	indf2,c
  5003  000E' D005               	goto	l3382
  5004                           
  5005                           ;dc_motor.c: 113: mL->power++;
  5006  0010' C002' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5007  0014' C003' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5008  0018' 2ADF               	incf	indf2,f,c
  5009  001A'                    l3382:
  5010                           
  5011                           ;dc_motor.c: 114: }
  5012                           ;dc_motor.c: 115: if(mR->power<100){
  5013  001A' C004' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5014  001E' C005' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5015  0022' 0E64               	movlw	100
  5016  0024' 60DF               	cpfslt	indf2,c
  5017  0026' D005               	goto	l3386
  5018                           
  5019                           ;dc_motor.c: 116: mR->power++;
  5020  0028' C004' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5021  002C' C005' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5022  0030' 2ADF               	incf	indf2,f,c
  5023  0032'                    l3386:
  5024                           
  5025                           ;dc_motor.c: 117: }
  5026                           ;dc_motor.c: 118: setMotorPWM(mL);
  5027  0032' C002' F031'        	movff	fullSpeedAhead@mL,setMotorPWM@m
  5028  0036' C003' F032'        	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  5029  003A' EC00' F000'        	call	_setMotorPWM	;wreg free
  5030                           
  5031                           ;dc_motor.c: 119: setMotorPWM(mR);
  5032  003E' C004' F031'        	movff	fullSpeedAhead@mR,setMotorPWM@m
  5033  0042' C005' F032'        	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  5034  0046' EC00' F000'        	call	_setMotorPWM	;wreg free
  5035                           
  5036                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5037  004A' 0E21               	movlw	33
  5038  004C'                    u3607:
  5039  004C' 2EE8               	decfsz	wreg,f,c
  5040  004E' D7FE               	goto	u3607
  5041  0050' F000               	nop	
  5042  0052'                    l193:
  5043  0052' C002' FFD9         	movff	fullSpeedAhead@mL,fsr2l
  5044  0056' C003' FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  5045  005A' 0E63               	movlw	99
  5046  005C' 64DF               	cpfsgt	indf2,c
  5047  005E' D7D1               	goto	l3378
  5048  0060' C004' FFD9         	movff	fullSpeedAhead@mR,fsr2l
  5049  0064' C005' FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  5050  0068' 0E63               	movlw	99
  5051  006A' 64DF               	cpfsgt	indf2,c
  5052  006C' D7CA               	goto	l3378
  5053  006E' 0012               	return	
  5054  0070'                    __end_of_fullSpeedAhead:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           indf1	equ	0xFE7
  5066                           fsr1h	equ	0xFE2
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _setMotorPWM *****************
  5076 ;; Defined at:
  5077 ;;		line 26 in file "dc_motor.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  m               2   49[COMRAM] PTR struct DC_motor
  5080 ;;		 -> main@mR(9), main@mL(9), 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  PWMduty         2    0[BANK0 ] int 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;		None               void
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5092 ;;      Params:         2       0       0       0
  5093 ;;      Locals:         0       2       0       0
  5094 ;;      Temps:          5       0       0       0
  5095 ;;      Totals:         7       2       0       0
  5096 ;;Total ram usage:        9 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    4
  5099 ;; This function calls:
  5100 ;;		___awdiv
  5101 ;;		___wmul
  5102 ;; This function is called by:
  5103 ;;		_stop
  5104 ;;		_fullSpeedAhead
  5105 ;;		_setMotorFullSpeed
  5106 ;;		_stopMotor
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text15
  5111  0000'                    __ptext15:
  5112                           	opt stack 0
  5113  0000'                    _setMotorPWM:
  5114                           	opt stack 25
  5115                           
  5116                           ;dc_motor.c: 28: int PWMduty;
  5117                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  5118                           
  5119                           ;incstack = 0
  5120  0000' C031' FFD9         	movff	setMotorPWM@m,fsr2l
  5121  0004' C032' FFDA         	movff	setMotorPWM@m+1,fsr2h
  5122  0008' 50DF               	movf	indf2,w,c
  5123  000A' 6E00'              	movwf	??_setMotorPWM& (0+255),c
  5124  000C' 5033'              	movf	??_setMotorPWM,w,c
  5125  000E' 6E23'              	movwf	___wmul@multiplier,c
  5126  0010' 6A24'              	clrf	___wmul@multiplier+1,c
  5127  0012' EE20 F007          	lfsr	2,7
  5128  0016' 5031'              	movf	setMotorPWM@m,w,c
  5129  0018' 26D9               	addwf	fsr2l,f,c
  5130  001A' 5032'              	movf	setMotorPWM@m+1,w,c
  5131  001C' 22DA               	addwfc	fsr2h,f,c
  5132  001E' CFDE F025'         	movff	postinc2,___wmul@multiplicand
  5133  0022' CFDD F026'         	movff	postdec2,___wmul@multiplicand+1
  5134  0026' EC00' F000'        	call	___wmul	;wreg free
  5135  002A' C023' F029'        	movff	?___wmul,___awdiv@dividend
  5136  002E' C024' F02A'        	movff	?___wmul+1,___awdiv@dividend+1
  5137  0032' 0E00               	movlw	0
  5138  0034' 6E2C'              	movwf	___awdiv@divisor+1,c
  5139  0036' 0E64               	movlw	100
  5140  0038' 6E2B'              	movwf	___awdiv@divisor,c
  5141  003A' EC00' F000'        	call	___awdiv	;wreg free
  5142  003E' C029' F000'        	movff	?___awdiv,setMotorPWM@PWMduty
  5143  0042' C02A' F001'        	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5144                           
  5145                           ;dc_motor.c: 32: if (m->direction)
  5146  0046' EE20 F001          	lfsr	2,1
  5147  004A' 5031'              	movf	setMotorPWM@m,w,c
  5148  004C' 26D9               	addwf	fsr2l,f,c
  5149  004E' 5032'              	movf	setMotorPWM@m+1,w,c
  5150  0050' 22DA               	addwfc	fsr2h,f,c
  5151  0052' 50DF               	movf	indf2,w,c
  5152  0054' B4D8               	btfsc	status,2,c
  5153  0056' D02E               	goto	l3352
  5154                           
  5155                           ;dc_motor.c: 33: {
  5156                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  5157  0058' EE20 F006          	lfsr	2,6
  5158  005C' 5031'              	movf	setMotorPWM@m,w,c
  5159  005E' 26D9               	addwf	fsr2l,f,c
  5160  0060' 5032'              	movf	setMotorPWM@m+1,w,c
  5161  0062' 22DA               	addwfc	fsr2h,f,c
  5162  0064' 50DF               	movf	indf2,w,c
  5163  0066' 6E00'              	movwf	??_setMotorPWM& (0+255),c
  5164  0068' 0E01               	movlw	1
  5165  006A' 6E00'              	movwf	(??_setMotorPWM+1)& (0+255),c
  5166  006C' 2A33'              	incf	??_setMotorPWM,f,c
  5167  006E' D002               	goto	u2614
  5168  0070'                    u2615:
  5169  0070' 90D8               	bcf	status,0,c
  5170  0072' 3634'              	rlcf	??_setMotorPWM+1,f,c
  5171  0074'                    u2614:
  5172  0074' 2E33'              	decfsz	??_setMotorPWM,f,c
  5173  0076' D7FC               	goto	u2615
  5174  0078' 5034'              	movf	??_setMotorPWM+1,w,c
  5175  007A' 108A               	iorwf	3978,w,c	;volatile
  5176  007C' 6E8A               	movwf	3978,c	;volatile
  5177                           
  5178                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  5179  007E' EE20 F007          	lfsr	2,7
  5180  0082' 5031'              	movf	setMotorPWM@m,w,c
  5181  0084' 26D9               	addwf	fsr2l,f,c
  5182  0086' 5032'              	movf	setMotorPWM@m+1,w,c
  5183  0088' 22DA               	addwfc	fsr2h,f,c
  5184  008A' CFDE F033'         	movff	postinc2,??_setMotorPWM
  5185  008E' CFDD F034'         	movff	postdec2,??_setMotorPWM+1
  5186  0092' C000' F035'        	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5187  0096' C001' F036'        	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5188  009A' 1E35'              	comf	??_setMotorPWM+2,f,c
  5189  009C' 1E36'              	comf	??_setMotorPWM+3,f,c
  5190  009E' 4A35'              	infsnz	??_setMotorPWM+2,f,c
  5191  00A0' 2A36'              	incf	??_setMotorPWM+3,f,c
  5192  00A2' 5033'              	movf	??_setMotorPWM,w,c
  5193  00A4' 2435'              	addwf	??_setMotorPWM+2,w,c
  5194  00A6' 0100               	movlb	0	; () banked
  5195  00A8' 6F00'              	movwf	setMotorPWM@PWMduty& (0+255),b
  5196  00AA' 5034'              	movf	??_setMotorPWM+1,w,c
  5197  00AC' 2036'              	addwfc	??_setMotorPWM+3,w,c
  5198  00AE' 0100               	movlb	0	; () banked
  5199  00B0' 6F00'              	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  5200                           
  5201                           ;dc_motor.c: 36: }
  5202  00B2' D014               	goto	l163
  5203  00B4'                    l3352:
  5204                           
  5205                           ;dc_motor.c: 37: else
  5206                           ;dc_motor.c: 38: {
  5207                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  5208  00B4' EE20 F006          	lfsr	2,6
  5209  00B8' 5031'              	movf	setMotorPWM@m,w,c
  5210  00BA' 26D9               	addwf	fsr2l,f,c
  5211  00BC' 5032'              	movf	setMotorPWM@m+1,w,c
  5212  00BE' 22DA               	addwfc	fsr2h,f,c
  5213  00C0' 50DF               	movf	indf2,w,c
  5214  00C2' 6E00'              	movwf	??_setMotorPWM& (0+255),c
  5215  00C4' 0E01               	movlw	1
  5216  00C6' 6E00'              	movwf	(??_setMotorPWM+1)& (0+255),c
  5217  00C8' 2A33'              	incf	??_setMotorPWM,f,c
  5218  00CA' D002               	goto	u2624
  5219  00CC'                    u2625:
  5220  00CC' 90D8               	bcf	status,0,c
  5221  00CE' 3634'              	rlcf	??_setMotorPWM+1,f,c
  5222  00D0'                    u2624:
  5223  00D0' 2E33'              	decfsz	??_setMotorPWM,f,c
  5224  00D2' D7FC               	goto	u2625
  5225  00D4' 5034'              	movf	??_setMotorPWM+1,w,c
  5226  00D6' 0AFF               	xorlw	255
  5227  00D8' 148A               	andwf	3978,w,c	;volatile
  5228  00DA' 6E8A               	movwf	3978,c	;volatile
  5229  00DC'                    l163:
  5230                           
  5231                           ;dc_motor.c: 40: }
  5232                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  5233  00DC' EE20 F002          	lfsr	2,2
  5234  00E0' 5031'              	movf	setMotorPWM@m,w,c
  5235  00E2' 26D9               	addwf	fsr2l,f,c
  5236  00E4' 5032'              	movf	setMotorPWM@m+1,w,c
  5237  00E6' 22DA               	addwfc	fsr2h,f,c
  5238  00E8' CFDE F033'         	movff	postinc2,??_setMotorPWM
  5239  00EC' CFDD F034'         	movff	postdec2,??_setMotorPWM+1
  5240  00F0' C033' FFD9         	movff	??_setMotorPWM,fsr2l
  5241  00F4' C034' FFDA         	movff	??_setMotorPWM+1,fsr2h
  5242  00F8' 0100               	movlb	0	; () banked
  5243  00FA' 4500'              	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  5244  00FC' 46E8               	rlncf	wreg,f,c
  5245  00FE' 0BFC               	andlw	252
  5246  0100' 6EDF               	movwf	indf2,c
  5247                           
  5248                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  5249  0102' EE20 F004          	lfsr	2,4
  5250  0106' 5031'              	movf	setMotorPWM@m,w,c
  5251  0108' 26D9               	addwf	fsr2l,f,c
  5252  010A' 5032'              	movf	setMotorPWM@m+1,w,c
  5253  010C' 22DA               	addwfc	fsr2h,f,c
  5254  010E' CFDE F033'         	movff	postinc2,??_setMotorPWM
  5255  0112' CFDD F034'         	movff	postdec2,??_setMotorPWM+1
  5256  0116' C033' FFD9         	movff	??_setMotorPWM,fsr2l
  5257  011A' C034' FFDA         	movff	??_setMotorPWM+1,fsr2h
  5258  011E' C000' F035'        	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5259  0122' C001' F036'        	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5260  0126' 0E06               	movlw	6
  5261  0128' 6E00'              	movwf	(??_setMotorPWM+4)& (0+255),c
  5262  012A'                    u2635:
  5263  012A' 3436'              	rlcf	??_setMotorPWM+3,w,c
  5264  012C' 3236'              	rrcf	??_setMotorPWM+3,f,c
  5265  012E' 3235'              	rrcf	??_setMotorPWM+2,f,c
  5266  0130' 2E00'              	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  5267  0132' D7FB               	goto	u2635
  5268  0134' 5035'              	movf	??_setMotorPWM+2,w,c
  5269  0136' 6EDF               	movwf	indf2,c
  5270                           
  5271                           ; BSR set to: 0
  5272  0138' 0012               	return		;funcret
  5273  013A'                    __end_of_setMotorPWM:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           indf1	equ	0xFE7
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function ___awdiv *****************
  5295 ;; Defined at:
  5296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  dividend        2   41[COMRAM] int 
  5299 ;;  divisor         2   43[COMRAM] int 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  quotient        2   47[COMRAM] int 
  5302 ;;  sign            1   46[COMRAM] unsigned char 
  5303 ;;  counter         1   45[COMRAM] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  2   41[COMRAM] int 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5313 ;;      Params:         4       0       0       0
  5314 ;;      Locals:         4       0       0       0
  5315 ;;      Temps:          0       0       0       0
  5316 ;;      Totals:         8       0       0       0
  5317 ;;Total ram usage:        8 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    3
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_setMotorPWM
  5324 ;;		_ScanWithRange
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text16
  5329  0000'                    __ptext16:
  5330                           	opt stack 0
  5331  0000'                    ___awdiv:
  5332                           	opt stack 25
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;incstack = 0
  5336  0000' 0E00               	movlw	0
  5337  0002' 6E2E'              	movwf	___awdiv@sign,c
  5338  0004' AE2C'              	btfss	___awdiv@divisor+1,7,c
  5339  0006' D006               	goto	l3310
  5340  0008' 6C2B'              	negf	___awdiv@divisor,c
  5341  000A' 1E2C'              	comf	___awdiv@divisor+1,f,c
  5342  000C' B0D8               	btfsc	status,0,c
  5343  000E' 2A2C'              	incf	___awdiv@divisor+1,f,c
  5344  0010' 0E01               	movlw	1
  5345  0012' 6E2E'              	movwf	___awdiv@sign,c
  5346  0014'                    l3310:
  5347  0014' AE2A'              	btfss	___awdiv@dividend+1,7,c
  5348  0016' D006               	goto	l3316
  5349  0018' 6C29'              	negf	___awdiv@dividend,c
  5350  001A' 1E2A'              	comf	___awdiv@dividend+1,f,c
  5351  001C' B0D8               	btfsc	status,0,c
  5352  001E' 2A2A'              	incf	___awdiv@dividend+1,f,c
  5353  0020' 0E01               	movlw	1
  5354  0022' 1A2E'              	xorwf	___awdiv@sign,f,c
  5355  0024'                    l3316:
  5356  0024' 0E00               	movlw	0
  5357  0026' 6E30'              	movwf	___awdiv@quotient+1,c
  5358  0028' 0E00               	movlw	0
  5359  002A' 6E2F'              	movwf	___awdiv@quotient,c
  5360  002C' 502B'              	movf	___awdiv@divisor,w,c
  5361  002E' 102C'              	iorwf	___awdiv@divisor+1,w,c
  5362  0030' B4D8               	btfsc	status,2,c
  5363  0032' D01C               	goto	l3338
  5364  0034' 0E01               	movlw	1
  5365  0036' 6E2D'              	movwf	___awdiv@counter,c
  5366  0038' D004               	goto	l3324
  5367  003A'                    l3322:
  5368  003A' 90D8               	bcf	status,0,c
  5369  003C' 362B'              	rlcf	___awdiv@divisor,f,c
  5370  003E' 362C'              	rlcf	___awdiv@divisor+1,f,c
  5371  0040' 2A2D'              	incf	___awdiv@counter,f,c
  5372  0042'                    l3324:
  5373  0042' AE2C'              	btfss	___awdiv@divisor+1,7,c
  5374  0044' D7FA               	goto	l3322
  5375  0046'                    l3326:
  5376  0046' 90D8               	bcf	status,0,c
  5377  0048' 362F'              	rlcf	___awdiv@quotient,f,c
  5378  004A' 3630'              	rlcf	___awdiv@quotient+1,f,c
  5379  004C' 502B'              	movf	___awdiv@divisor,w,c
  5380  004E' 5C29'              	subwf	___awdiv@dividend,w,c
  5381  0050' 502C'              	movf	___awdiv@divisor+1,w,c
  5382  0052' 582A'              	subwfb	___awdiv@dividend+1,w,c
  5383  0054' A0D8               	btfss	status,0,c
  5384  0056' D005               	goto	l3334
  5385  0058' 502B'              	movf	___awdiv@divisor,w,c
  5386  005A' 5E29'              	subwf	___awdiv@dividend,f,c
  5387  005C' 502C'              	movf	___awdiv@divisor+1,w,c
  5388  005E' 5A2A'              	subwfb	___awdiv@dividend+1,f,c
  5389  0060' 802F'              	bsf	___awdiv@quotient,0,c
  5390  0062'                    l3334:
  5391  0062' 90D8               	bcf	status,0,c
  5392  0064' 322C'              	rrcf	___awdiv@divisor+1,f,c
  5393  0066' 322B'              	rrcf	___awdiv@divisor,f,c
  5394  0068' 2E2D'              	decfsz	___awdiv@counter,f,c
  5395  006A' D7ED               	goto	l3326
  5396  006C'                    l3338:
  5397  006C' 502E'              	movf	___awdiv@sign,w,c
  5398  006E' B4D8               	btfsc	status,2,c
  5399  0070' D004               	goto	l3342
  5400  0072' 6C2F'              	negf	___awdiv@quotient,c
  5401  0074' 1E30'              	comf	___awdiv@quotient+1,f,c
  5402  0076' B0D8               	btfsc	status,0,c
  5403  0078' 2A30'              	incf	___awdiv@quotient+1,f,c
  5404  007A'                    l3342:
  5405  007A' C02F' F029'        	movff	___awdiv@quotient,?___awdiv
  5406  007E' C030' F02A'        	movff	___awdiv@quotient+1,?___awdiv+1
  5407  0082' 0012               	return	
  5408  0084'                    __end_of___awdiv:
  5409                           	opt stack 0
  5410                           tblptru	equ	0xFF8
  5411                           tblptrh	equ	0xFF7
  5412                           tblptrl	equ	0xFF6
  5413                           tablat	equ	0xFF5
  5414                           prodh	equ	0xFF4
  5415                           prodl	equ	0xFF3
  5416                           intcon	equ	0xFF2
  5417                           postinc0	equ	0xFEE
  5418                           wreg	equ	0xFE8
  5419                           indf1	equ	0xFE7
  5420                           fsr1h	equ	0xFE2
  5421                           fsr1l	equ	0xFE1
  5422                           indf2	equ	0xFDF
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           fsr2h	equ	0xFDA
  5426                           fsr2l	equ	0xFD9
  5427                           status	equ	0xFD8
  5428                           
  5429 ;; *************** function _sprintf *****************
  5430 ;; Defined at:
  5431 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5434 ;;		 -> ScanWithRange@buf(40), ScanIR@buf(40), main@buf(40), 
  5435 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5436 ;;		 -> STR_13(12), STR_11(16), STR_9(12), STR_7(16), 
  5437 ;;		 -> STR_2(16), 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  tmpval          4    0        struct .
  5440 ;;  cp              3    0        PTR const unsigned char 
  5441 ;;  width           2   10[BANK0 ] int 
  5442 ;;  val             2    7[BANK0 ] unsigned int 
  5443 ;;  ap              2    4[BANK0 ] PTR void [1]
  5444 ;;		 -> ?_sprintf(2), 
  5445 ;;  len             2    0        unsigned int 
  5446 ;;  c               1   12[BANK0 ] char 
  5447 ;;  flag            1    9[BANK0 ] unsigned char 
  5448 ;;  prec            1    6[BANK0 ] char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  2   47[COMRAM] int 
  5451 ;; Registers used:
  5452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5458 ;;      Params:         8       0       0       0
  5459 ;;      Locals:         0       9       0       0
  5460 ;;      Temps:          0       4       0       0
  5461 ;;      Totals:         8      13       0       0
  5462 ;;Total ram usage:       21 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    4
  5465 ;; This function calls:
  5466 ;;		___lwdiv
  5467 ;;		___lwmod
  5468 ;;		___wmul
  5469 ;;		_isdigit
  5470 ;; This function is called by:
  5471 ;;		_main
  5472 ;;		_ScanIR
  5473 ;;		_ScanWithRange
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text17
  5478  0000'                    __ptext17:
  5479                           	opt stack 0
  5480  0000'                    _sprintf:
  5481                           	opt stack 26
  5482                           
  5483                           ;doprnt.c: 494: va_list ap;
  5484                           ;doprnt.c: 499: signed char c;
  5485                           ;doprnt.c: 501: int width;
  5486                           ;doprnt.c: 506: signed char prec;
  5487                           ;doprnt.c: 508: unsigned char flag;
  5488                           ;doprnt.c: 523: union {
  5489                           ;doprnt.c: 524: unsigned long vd;
  5490                           ;doprnt.c: 525: double integ;
  5491                           ;doprnt.c: 526: } tmpval;
  5492                           ;doprnt.c: 528: unsigned int val;
  5493                           ;doprnt.c: 529: unsigned len;
  5494                           ;doprnt.c: 530: const char * cp;
  5495                           ;doprnt.c: 533: *ap = __va_start();
  5496                           
  5497                           ;incstack = 0
  5498  0000' 0E00'              	movlw	low (?_sprintf+4)
  5499  0002' 0100               	movlb	0	; () banked
  5500  0004' 6F00'              	movwf	sprintf@ap& (0+255),b
  5501  0006' 0E00'              	movlw	high (?_sprintf+4)
  5502  0008' 0100               	movlb	0	; () banked
  5503  000A' 6F00'              	movwf	(sprintf@ap+1)& (0+255),b
  5504                           
  5505                           ;doprnt.c: 536: while(c = *f++) {
  5506  000C' D168               	goto	l3502
  5507  000E'                    l3396:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;doprnt.c: 538: if(c != '%')
  5511  000E' 0E25               	movlw	37
  5512  0010' 0100               	movlb	0	; () banked
  5513  0012' 1900'              	xorwf	sprintf@c& (0+255),w,b
  5514  0014' B4D8               	btfsc	status,2,c
  5515  0016' D009               	goto	l3402
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 540: {
  5519                           ;doprnt.c: 541: ((*sp++ = (c)));
  5520  0018' C02F' FFD9         	movff	sprintf@sp,fsr2l
  5521  001C' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  5522  0020' C00C' FFDF         	movff	sprintf@c,indf2
  5523                           
  5524                           ; BSR set to: 0
  5525  0024' 4A2F'              	infsnz	sprintf@sp,f,c
  5526  0026' 2A30'              	incf	sprintf@sp+1,f,c
  5527                           
  5528                           ;doprnt.c: 542: continue;
  5529  0028' D15A               	goto	l3502
  5530  002A'                    l3402:
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;doprnt.c: 543: }
  5534                           ;doprnt.c: 546: width = 0;
  5535  002A' 0E00               	movlw	0
  5536  002C' 0100               	movlb	0	; () banked
  5537  002E' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  5538  0030' 0E00               	movlw	0
  5539  0032' 6F00'              	movwf	sprintf@width& (0+255),b
  5540                           
  5541                           ;doprnt.c: 548: flag = 0;
  5542  0034' 0E00               	movlw	0
  5543  0036' 0100               	movlb	0	; () banked
  5544  0038' 6F00'              	movwf	sprintf@flag& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;doprnt.c: 551: switch(*f) {
  5548                           
  5549                           ;doprnt.c: 550: for(;;) {
  5550  003A' D004               	goto	l3408
  5551  003C'                    l3404:
  5552                           
  5553                           ;doprnt.c: 580: flag |= 0x04;
  5554  003C' 0100               	movlb	0	; () banked
  5555  003E' 8500'              	bsf	sprintf@flag& (0+255),2,b
  5556                           
  5557                           ;doprnt.c: 581: f++;
  5558  0040' 4A31'              	infsnz	sprintf@f,f,c
  5559  0042' 2A32'              	incf	sprintf@f+1,f,c
  5560  0044'                    l3408:
  5561  0044' C031' FFF6         	movff	sprintf@f,tblptrl
  5562  0048' C032' FFF7         	movff	sprintf@f+1,tblptrh
  5563  004C'                    	if	0	;tblptru may be non-zero
  5564  004C'                    	endif
  5565  004C'                    	if	0	;tblptru may be non-zero
  5566  004C'                    	endif
  5567  004C' 0008               	tblrd		*
  5568  004E' 50F5               	movf	tablat,w,c
  5569                           
  5570                           ; Switch size 1, requested type "space"
  5571                           ; Number of cases is 1, Range of values is 48 to 48
  5572                           ; switch strategies available:
  5573                           ; Name         Instructions Cycles
  5574                           ; simple_byte            4     3 (average)
  5575                           ;	Chosen strategy is simple_byte
  5576  0050' 0A30               	xorlw	48	; case 48
  5577  0052' B4D8               	btfsc	status,2,c
  5578  0054' D7F3               	goto	l3404
  5579                           
  5580                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5581                           
  5582                           ;doprnt.c: 586: }
  5583                           
  5584                           ;doprnt.c: 585: break;
  5585  0056' C031' FFF6         	movff	sprintf@f,tblptrl
  5586  005A' C032' FFF7         	movff	sprintf@f+1,tblptrh
  5587  005E'                    	if	0	;tblptru may be non-zero
  5588  005E'                    	endif
  5589  005E'                    	if	0	;tblptru may be non-zero
  5590  005E'                    	endif
  5591  005E' 0008               	tblrd		*
  5592  0060' 50F5               	movf	tablat,w,c
  5593  0062' EC00' F000'        	call	_isdigit
  5594  0066' A0D8               	btfss	status,0,c
  5595  0068' D03E               	goto	l3424
  5596                           
  5597                           ;doprnt.c: 598: width = 0;
  5598  006A' 0E00               	movlw	0
  5599  006C' 0100               	movlb	0	; () banked
  5600  006E' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  5601  0070' 0E00               	movlw	0
  5602  0072' 6F00'              	movwf	sprintf@width& (0+255),b
  5603  0074'                    l3414:
  5604                           
  5605                           ;doprnt.c: 600: width *= 10;
  5606  0074' C00A' F023'        	movff	sprintf@width,___wmul@multiplier
  5607  0078' C00B' F024'        	movff	sprintf@width+1,___wmul@multiplier+1
  5608  007C' 0E00               	movlw	0
  5609  007E' 6E26'              	movwf	___wmul@multiplicand+1,c
  5610  0080' 0E0A               	movlw	10
  5611  0082' 6E25'              	movwf	___wmul@multiplicand,c
  5612  0084' EC00' F000'        	call	___wmul	;wreg free
  5613  0088' C023' F00A'        	movff	?___wmul,sprintf@width
  5614  008C' C024' F00B'        	movff	?___wmul+1,sprintf@width+1
  5615                           
  5616                           ;doprnt.c: 601: width += *f++ - '0';
  5617  0090' 0ED0               	movlw	208
  5618  0092' 0100               	movlb	0	; () banked
  5619  0094' 6F00'              	movwf	??_sprintf& (0+255),b
  5620  0096' 0EFF               	movlw	255
  5621  0098' 0100               	movlb	0	; () banked
  5622  009A' 6F00'              	movwf	(??_sprintf+1)& (0+255),b
  5623  009C' C031' FFF6         	movff	sprintf@f,tblptrl
  5624  00A0' C032' FFF7         	movff	sprintf@f+1,tblptrh
  5625  00A4'                    	if	0	;tblptru may be non-zero
  5626  00A4'                    	endif
  5627  00A4'                    	if	0	;tblptru may be non-zero
  5628  00A4'                    	endif
  5629  00A4' 0008               	tblrd		*
  5630  00A6' 50F5               	movf	tablat,w,c
  5631  00A8' 0100               	movlb	0	; () banked
  5632  00AA' 6F00'              	movwf	(??_sprintf+2)& (0+255),b
  5633  00AC' 6B00'              	clrf	(??_sprintf+3)& (0+255),b
  5634  00AE' 0100               	movlb	0	; () banked
  5635  00B0' 5100'              	movf	??_sprintf& (0+255),w,b
  5636  00B2' 0100               	movlb	0	; () banked
  5637  00B4' 2700'              	addwf	(??_sprintf+2)& (0+255),f,b
  5638  00B6' 0100               	movlb	0	; () banked
  5639  00B8' 5100'              	movf	(??_sprintf+1)& (0+255),w,b
  5640  00BA' 0100               	movlb	0	; () banked
  5641  00BC' 2300'              	addwfc	(??_sprintf+3)& (0+255),f,b
  5642  00BE' 0100               	movlb	0	; () banked
  5643  00C0' 5100'              	movf	(??_sprintf+2)& (0+255),w,b
  5644  00C2' 0100               	movlb	0	; () banked
  5645  00C4' 2700'              	addwf	sprintf@width& (0+255),f,b
  5646  00C6' 0100               	movlb	0	; () banked
  5647  00C8' 5100'              	movf	(??_sprintf+3)& (0+255),w,b
  5648  00CA' 0100               	movlb	0	; () banked
  5649  00CC' 2300'              	addwfc	(sprintf@width+1)& (0+255),f,b
  5650                           
  5651                           ; BSR set to: 0
  5652  00CE' 4A31'              	infsnz	sprintf@f,f,c
  5653  00D0' 2A32'              	incf	sprintf@f+1,f,c
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5657  00D2' C031' FFF6         	movff	sprintf@f,tblptrl
  5658  00D6' C032' FFF7         	movff	sprintf@f+1,tblptrh
  5659  00DA'                    	if	0	;tblptru may be non-zero
  5660  00DA'                    	endif
  5661  00DA'                    	if	0	;tblptru may be non-zero
  5662  00DA'                    	endif
  5663  00DA' 0008               	tblrd		*
  5664  00DC' 50F5               	movf	tablat,w,c
  5665  00DE' EC00' F000'        	call	_isdigit
  5666  00E2' B0D8               	btfsc	status,0,c
  5667  00E4' D7C7               	goto	l3414
  5668  00E6'                    l3424:
  5669  00E6' C031' FFF6         	movff	sprintf@f,tblptrl
  5670  00EA' C032' FFF7         	movff	sprintf@f+1,tblptrh
  5671  00EE' 4A31'              	infsnz	sprintf@f,f,c
  5672  00F0' 2A32'              	incf	sprintf@f+1,f,c
  5673  00F2'                    	if	0	;tblptru may be non-zero
  5674  00F2'                    	endif
  5675  00F2'                    	if	0	;tblptru may be non-zero
  5676  00F2'                    	endif
  5677  00F2' 0008               	tblrd		*
  5678  00F4' CFF5 F00C'         	movff	tablat,sprintf@c
  5679  00F8' 0100               	movlb	0	; () banked
  5680  00FA' 5100'              	movf	sprintf@c& (0+255),w,b
  5681                           
  5682                           ; Switch size 1, requested type "space"
  5683                           ; Number of cases is 3, Range of values is 0 to 105
  5684                           ; switch strategies available:
  5685                           ; Name         Instructions Cycles
  5686                           ; simple_byte           10     6 (average)
  5687                           ;	Chosen strategy is simple_byte
  5688  00FC' 0A00               	xorlw	0	; case 0
  5689  00FE' B4D8               	btfsc	status,2,c
  5690  0100' D0FB               	goto	l3504
  5691  0102' 0A64               	xorlw	100	; case 100
  5692  0104' B4D8               	btfsc	status,2,c
  5693  0106' D003               	goto	l3426
  5694  0108' 0A0D               	xorlw	13	; case 105
  5695  010A' A4D8               	btfss	status,2,c
  5696  010C' D0E8               	goto	l3502
  5697  010E'                    l3426:
  5698                           
  5699                           ;doprnt.c: 1253: {
  5700                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5701  010E' C004' FFD9         	movff	sprintf@ap,fsr2l
  5702  0112' C005' FFDA         	movff	sprintf@ap+1,fsr2h
  5703  0116' CFDE F007'         	movff	postinc2,sprintf@val
  5704  011A' CFDD F008'         	movff	postdec2,sprintf@val+1
  5705  011E' 0E02               	movlw	2
  5706  0120' 0100               	movlb	0	; () banked
  5707  0122' 2700'              	addwf	sprintf@ap& (0+255),f,b
  5708  0124' 0E00               	movlw	0
  5709  0126' 2300'              	addwfc	(sprintf@ap+1)& (0+255),f,b
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;doprnt.c: 1261: if((int)val < 0) {
  5713  0128' 0100               	movlb	0	; () banked
  5714  012A' AF00'              	btfss	(sprintf@val+1)& (0+255),7,b
  5715  012C' D008               	goto	l3436
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;doprnt.c: 1262: flag |= 0x03;
  5719  012E' 0E03               	movlw	3
  5720  0130' 0100               	movlb	0	; () banked
  5721  0132' 1300'              	iorwf	sprintf@flag& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;doprnt.c: 1263: val = -val;
  5725  0134' 0100               	movlb	0	; () banked
  5726  0136' 6D00'              	negf	sprintf@val& (0+255),b
  5727  0138' 1F00'              	comf	(sprintf@val+1)& (0+255),f,b
  5728  013A' B0D8               	btfsc	status,0,c
  5729  013C' 2B00'              	incf	(sprintf@val+1)& (0+255),f,b
  5730  013E'                    l3436:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;doprnt.c: 1264: }
  5734                           ;doprnt.c: 1266: }
  5735                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5736  013E' 0E01               	movlw	1
  5737  0140' 0100               	movlb	0	; () banked
  5738  0142' 6F00'              	movwf	sprintf@c& (0+255),b
  5739  0144'                    l3438:
  5740                           
  5741                           ; BSR set to: 0
  5742  0144' 0E05               	movlw	5
  5743  0146' 0100               	movlb	0	; () banked
  5744  0148' 1900'              	xorwf	sprintf@c& (0+255),w,b
  5745  014A' B4D8               	btfsc	status,2,c
  5746  014C' D016               	goto	l3450
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;doprnt.c: 1306: if(val < dpowers[c])
  5750                           
  5751                           ; BSR set to: 0
  5752                           
  5753                           ; BSR set to: 0
  5754  014E' 0100               	movlb	0	; () banked
  5755  0150' 5100'              	movf	sprintf@c& (0+255),w,b
  5756  0152' 0D02               	mullw	2
  5757  0154' 0E00'              	movlw	low _dpowers
  5758  0156' 24F3               	addwf	prodl,w,c
  5759  0158' 6EF6               	movwf	tblptrl,c
  5760  015A' 0E00'              	movlw	high _dpowers
  5761  015C' 20F4               	addwfc	prodh,w,c
  5762  015E' 6EF7               	movwf	tblptrh,c
  5763  0160'                    	if	0	;There are less than 3 active tblptr bytes
  5764  0160'                    	endif
  5765  0160' 0009               	tblrd		*+
  5766  0162' 50F5               	movf	tablat,w,c
  5767  0164' 0100               	movlb	0	; () banked
  5768  0166' 5D00'              	subwf	sprintf@val& (0+255),w,b
  5769  0168' 0009               	tblrd		*+
  5770  016A' 50F5               	movf	tablat,w,c
  5771  016C' 0100               	movlb	0	; () banked
  5772  016E' 5900'              	subwfb	(sprintf@val+1)& (0+255),w,b
  5773  0170' A0D8               	btfss	status,0,c
  5774  0172' D003               	goto	l3450
  5775                           
  5776                           ; BSR set to: 0
  5777                           
  5778                           ; BSR set to: 0
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;doprnt.c: 1307: break;
  5782  0174' 0100               	movlb	0	; () banked
  5783  0176' 2B00'              	incf	sprintf@c& (0+255),f,b
  5784  0178' D7E5               	goto	l3438
  5785  017A'                    l3450:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5789  017A' 0100               	movlb	0	; () banked
  5790  017C' 5100'              	movf	sprintf@width& (0+255),w,b
  5791  017E' 0100               	movlb	0	; () banked
  5792  0180' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  5793  0182' B4D8               	btfsc	status,2,c
  5794  0184' D00B               	goto	l3456
  5795                           
  5796                           ; BSR set to: 0
  5797  0186' C009' F000'        	movff	sprintf@flag,??_sprintf
  5798  018A' 0E03               	movlw	3
  5799  018C' 0100               	movlb	0	; () banked
  5800  018E' 1700'              	andwf	??_sprintf& (0+255),f,b
  5801  0190' B4D8               	btfsc	status,2,c
  5802  0192' D004               	goto	l3456
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;doprnt.c: 1346: width--;
  5806  0194' 0100               	movlb	0	; () banked
  5807  0196' 0700'              	decf	sprintf@width& (0+255),f,b
  5808  0198' A0D8               	btfss	status,0,c
  5809  019A' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  5810  019C'                    l3456:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;doprnt.c: 1381: if(width > c)
  5814  019C' 0E80               	movlw	128
  5815  019E' 0100               	movlb	0	; () banked
  5816  01A0' BF00'              	btfsc	sprintf@c& (0+255),7,b
  5817  01A2' 0E7F               	movlw	127
  5818  01A4' 0100               	movlb	0	; () banked
  5819  01A6' 6F00'              	movwf	??_sprintf& (0+255),b
  5820  01A8' 0100               	movlb	0	; () banked
  5821  01AA' 5100'              	movf	sprintf@width& (0+255),w,b
  5822  01AC' 0100               	movlb	0	; () banked
  5823  01AE' 5D00'              	subwf	sprintf@c& (0+255),w,b
  5824  01B0' 0100               	movlb	0	; () banked
  5825  01B2' 5100'              	movf	(sprintf@width+1)& (0+255),w,b
  5826  01B4' 0A80               	xorlw	128
  5827  01B6' 0100               	movlb	0	; () banked
  5828  01B8' 5900'              	subwfb	??_sprintf& (0+255),w,b
  5829  01BA' B0D8               	btfsc	status,0,c
  5830  01BC' D00B               	goto	l3460
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;doprnt.c: 1382: width -= c;
  5834  01BE' 0100               	movlb	0	; () banked
  5835  01C0' 5100'              	movf	sprintf@c& (0+255),w,b
  5836  01C2' 0100               	movlb	0	; () banked
  5837  01C4' 5F00'              	subwf	sprintf@width& (0+255),f,b
  5838  01C6' 0E00               	movlw	0
  5839  01C8' 0100               	movlb	0	; () banked
  5840  01CA' BF00'              	btfsc	sprintf@c& (0+255),7,b
  5841  01CC' 0EFF               	movlw	255
  5842  01CE' 0100               	movlb	0	; () banked
  5843  01D0' 5B00'              	subwfb	(sprintf@width+1)& (0+255),f,b
  5844  01D2' D005               	goto	l3462
  5845  01D4'                    l3460:
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;doprnt.c: 1383: else
  5849                           ;doprnt.c: 1384: width = 0;
  5850  01D4' 0E00               	movlw	0
  5851  01D6' 0100               	movlb	0	; () banked
  5852  01D8' 6F00'              	movwf	(sprintf@width+1)& (0+255),b
  5853  01DA' 0E00               	movlw	0
  5854  01DC' 6F00'              	movwf	sprintf@width& (0+255),b
  5855  01DE'                    l3462:
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;doprnt.c: 1387: if(flag & 0x04) {
  5859  01DE' 0100               	movlb	0	; () banked
  5860  01E0' A500'              	btfss	sprintf@flag& (0+255),2,b
  5861  01E2' D022               	goto	l3478
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;doprnt.c: 1392: if(flag & 0x03)
  5865  01E4' C009' F000'        	movff	sprintf@flag,??_sprintf
  5866  01E8' 0E03               	movlw	3
  5867  01EA' 0100               	movlb	0	; () banked
  5868  01EC' 1700'              	andwf	??_sprintf& (0+255),f,b
  5869  01EE' B4D8               	btfsc	status,2,c
  5870  01F0' D008               	goto	l3470
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5874  01F2' C02F' FFD9         	movff	sprintf@sp,fsr2l
  5875  01F6' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  5876  01FA' 0E2D               	movlw	45
  5877  01FC' 6EDF               	movwf	indf2,c
  5878                           
  5879                           ; BSR set to: 0
  5880  01FE' 4A2F'              	infsnz	sprintf@sp,f,c
  5881  0200' 2A30'              	incf	sprintf@sp+1,f,c
  5882  0202'                    l3470:
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;doprnt.c: 1415: if(width)
  5886  0202' 0100               	movlb	0	; () banked
  5887  0204' 5100'              	movf	sprintf@width& (0+255),w,b
  5888  0206' 0100               	movlb	0	; () banked
  5889  0208' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  5890  020A' B4D8               	btfsc	status,2,c
  5891  020C' D034               	goto	l3492
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5895                           
  5896                           ; BSR set to: 0
  5897                           
  5898                           ;doprnt.c: 1416: do
  5899  020E' C02F' FFD9         	movff	sprintf@sp,fsr2l
  5900  0212' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  5901  0216' 0E30               	movlw	48
  5902  0218' 6EDF               	movwf	indf2,c
  5903                           
  5904                           ; BSR set to: 0
  5905  021A' 4A2F'              	infsnz	sprintf@sp,f,c
  5906  021C' 2A30'              	incf	sprintf@sp+1,f,c
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;doprnt.c: 1418: while(--width);
  5910  021E' 0100               	movlb	0	; () banked
  5911  0220' 0700'              	decf	sprintf@width& (0+255),f,b
  5912  0222' A0D8               	btfss	status,0,c
  5913  0224' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  5914  0226' D7ED               	goto	l3470
  5915  0228'                    l3478:
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;doprnt.c: 1422: {
  5919                           ;doprnt.c: 1424: if(width
  5920                           ;doprnt.c: 1428: )
  5921  0228' 0100               	movlb	0	; () banked
  5922  022A' 5100'              	movf	sprintf@width& (0+255),w,b
  5923  022C' 0100               	movlb	0	; () banked
  5924  022E' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  5925  0230' B4D8               	btfsc	status,2,c
  5926  0232' D012               	goto	l3486
  5927  0234'                    l3480:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5931  0234' C02F' FFD9         	movff	sprintf@sp,fsr2l
  5932  0238' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  5933  023C' 0E20               	movlw	32
  5934  023E' 6EDF               	movwf	indf2,c
  5935                           
  5936                           ; BSR set to: 0
  5937  0240' 4A2F'              	infsnz	sprintf@sp,f,c
  5938  0242' 2A30'              	incf	sprintf@sp+1,f,c
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;doprnt.c: 1431: while(--width);
  5942  0244' 0100               	movlb	0	; () banked
  5943  0246' 0700'              	decf	sprintf@width& (0+255),f,b
  5944  0248' A0D8               	btfss	status,0,c
  5945  024A' 0700'              	decf	(sprintf@width+1)& (0+255),f,b
  5946  024C' 0100               	movlb	0	; () banked
  5947  024E' 5100'              	movf	sprintf@width& (0+255),w,b
  5948  0250' 0100               	movlb	0	; () banked
  5949  0252' 1100'              	iorwf	(sprintf@width+1)& (0+255),w,b
  5950  0254' A4D8               	btfss	status,2,c
  5951  0256' D7EE               	goto	l3480
  5952  0258'                    l3486:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 1438: if(flag & 0x03)
  5956  0258' C009' F000'        	movff	sprintf@flag,??_sprintf
  5957  025C' 0E03               	movlw	3
  5958  025E' 0100               	movlb	0	; () banked
  5959  0260' 1700'              	andwf	??_sprintf& (0+255),f,b
  5960  0262' B4D8               	btfsc	status,2,c
  5961  0264' D008               	goto	l3492
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5965  0266' C02F' FFD9         	movff	sprintf@sp,fsr2l
  5966  026A' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  5967  026E' 0E2D               	movlw	45
  5968  0270' 6EDF               	movwf	indf2,c
  5969                           
  5970                           ; BSR set to: 0
  5971  0272' 4A2F'              	infsnz	sprintf@sp,f,c
  5972  0274' 2A30'              	incf	sprintf@sp+1,f,c
  5973  0276'                    l3492:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;doprnt.c: 1469: }
  5977                           ;doprnt.c: 1472: prec = c;
  5978  0276' C00C' F006'        	movff	sprintf@c,sprintf@prec
  5979                           
  5980                           ;doprnt.c: 1474: while(prec--) {
  5981  027A' D02B               	goto	l3500
  5982  027C'                    l3494:
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;doprnt.c: 1478: {
  5986                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5987  027C' 0100               	movlb	0	; () banked
  5988  027E' 5100'              	movf	sprintf@prec& (0+255),w,b
  5989  0280' 0D02               	mullw	2
  5990  0282' 0E00'              	movlw	low _dpowers
  5991  0284' 24F3               	addwf	prodl,w,c
  5992  0286' 6EF6               	movwf	tblptrl,c
  5993  0288' 0E00'              	movlw	high _dpowers
  5994  028A' 20F4               	addwfc	prodh,w,c
  5995  028C' 6EF7               	movwf	tblptrh,c
  5996  028E'                    	if	0	;There are less than 3 active tblptr bytes
  5997  028E'                    	endif
  5998  028E' 0009               	tblrd		*+
  5999  0290' CFF5 F025'         	movff	tablat,___lwdiv@divisor
  6000  0294' 000A               	tblrd		*-
  6001  0296' CFF5 F026'         	movff	tablat,___lwdiv@divisor+1
  6002  029A' C007' F023'        	movff	sprintf@val,___lwdiv@dividend
  6003  029E' C008' F024'        	movff	sprintf@val+1,___lwdiv@dividend+1
  6004  02A2' EC00' F000'        	call	___lwdiv	;wreg free
  6005  02A6' C023' F02A'        	movff	?___lwdiv,___lwmod@dividend
  6006  02AA' C024' F02B'        	movff	?___lwdiv+1,___lwmod@dividend+1
  6007  02AE' 0E00               	movlw	0
  6008  02B0' 6E2D'              	movwf	___lwmod@divisor+1,c
  6009  02B2' 0E0A               	movlw	10
  6010  02B4' 6E2C'              	movwf	___lwmod@divisor,c
  6011  02B6' EC00' F000'        	call	___lwmod	;wreg free
  6012  02BA' 502A'              	movf	?___lwmod,w,c
  6013  02BC' 0F30               	addlw	48
  6014  02BE' 0100               	movlb	0	; () banked
  6015  02C0' 6F00'              	movwf	sprintf@c& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;doprnt.c: 1523: }
  6019                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6020  02C2' C02F' FFD9         	movff	sprintf@sp,fsr2l
  6021  02C6' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  6022  02CA' C00C' FFDF         	movff	sprintf@c,indf2
  6023                           
  6024                           ; BSR set to: 0
  6025  02CE' 4A2F'              	infsnz	sprintf@sp,f,c
  6026  02D0' 2A30'              	incf	sprintf@sp+1,f,c
  6027  02D2'                    l3500:
  6028                           
  6029                           ; BSR set to: 0
  6030  02D2' 0100               	movlb	0	; () banked
  6031  02D4' 0700'              	decf	sprintf@prec& (0+255),f,b
  6032  02D6' 0100               	movlb	0	; () banked
  6033  02D8' 2900'              	incf	sprintf@prec& (0+255),w,b
  6034  02DA' A4D8               	btfss	status,2,c
  6035  02DC' D7CF               	goto	l3494
  6036  02DE'                    l3502:
  6037  02DE' C031' FFF6         	movff	sprintf@f,tblptrl
  6038  02E2' C032' FFF7         	movff	sprintf@f+1,tblptrh
  6039  02E6' 4A31'              	infsnz	sprintf@f,f,c
  6040  02E8' 2A32'              	incf	sprintf@f+1,f,c
  6041  02EA'                    	if	0	;tblptru may be non-zero
  6042  02EA'                    	endif
  6043  02EA'                    	if	0	;tblptru may be non-zero
  6044  02EA'                    	endif
  6045  02EA' 0008               	tblrd		*
  6046  02EC' CFF5 F00C'         	movff	tablat,sprintf@c
  6047  02F0' 0100               	movlb	0	; () banked
  6048  02F2' 5100'              	movf	sprintf@c& (0+255),w,b
  6049  02F4' A4D8               	btfss	status,2,c
  6050  02F6' D68B               	goto	l3396
  6051  02F8'                    l3504:
  6052                           
  6053                           ;doprnt.c: 1538: *sp = 0;
  6054  02F8' C02F' FFD9         	movff	sprintf@sp,fsr2l
  6055  02FC' C030' FFDA         	movff	sprintf@sp+1,fsr2h
  6056  0300' 0E00               	movlw	0
  6057  0302' 6EDF               	movwf	indf2,c
  6058  0304' 0012               	return	
  6059  0306'                    __end_of_sprintf:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           postinc0	equ	0xFEE
  6069                           wreg	equ	0xFE8
  6070                           indf1	equ	0xFE7
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _isdigit *****************
  6081 ;; Defined at:
  6082 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  c               1    wreg     unsigned char 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  c               1   37[COMRAM] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6096 ;;      Params:         0       0       0       0
  6097 ;;      Locals:         2       0       0       0
  6098 ;;      Temps:          1       0       0       0
  6099 ;;      Totals:         3       0       0       0
  6100 ;;Total ram usage:        3 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    3
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_sprintf
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text18
  6111  0000'                    __ptext18:
  6112                           	opt stack 0
  6113  0000'                    _isdigit:
  6114                           	opt stack 26
  6115                           
  6116                           ;incstack = 0
  6117                           ;isdigit@c stored from wreg
  6118  0000' 6E25'              	movwf	isdigit@c,c
  6119  0002' 0E00               	movlw	0
  6120  0004' 6E24'              	movwf	_isdigit$1931,c
  6121  0006' 0E3A               	movlw	58
  6122  0008' 6025'              	cpfslt	isdigit@c,c
  6123  000A' D005               	goto	l2332
  6124  000C' 0E2F               	movlw	47
  6125  000E' 6425'              	cpfsgt	isdigit@c,c
  6126  0010' D002               	goto	l2332
  6127  0012' 0E01               	movlw	1
  6128  0014' 6E24'              	movwf	_isdigit$1931,c
  6129  0016'                    l2332:
  6130  0016' C024' F023'        	movff	_isdigit$1931,??_isdigit
  6131  001A' 3023'              	rrcf	??_isdigit,w,c
  6132  001C' 0012               	return	
  6133  001E'                    __end_of_isdigit:
  6134                           	opt stack 0
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           intcon	equ	0xFF2
  6142                           postinc0	equ	0xFEE
  6143                           wreg	equ	0xFE8
  6144                           indf1	equ	0xFE7
  6145                           fsr1h	equ	0xFE2
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function ___wmul *****************
  6155 ;; Defined at:
  6156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  multiplier      2   35[COMRAM] unsigned int 
  6159 ;;  multiplicand    2   37[COMRAM] unsigned int 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  product         2   39[COMRAM] unsigned int 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  2   35[COMRAM] unsigned int 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, prodl, prodh
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6171 ;;      Params:         4       0       0       0
  6172 ;;      Locals:         2       0       0       0
  6173 ;;      Temps:          0       0       0       0
  6174 ;;      Totals:         6       0       0       0
  6175 ;;Total ram usage:        6 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_setMotorPWM
  6182 ;;		_sprintf
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text19
  6187  0000'                    __ptext19:
  6188                           	opt stack 0
  6189  0000'                    ___wmul:
  6190                           	opt stack 25
  6191                           
  6192                           ;incstack = 0
  6193  0000' 5023'              	movf	___wmul@multiplier,w,c
  6194  0002' 0225'              	mulwf	___wmul@multiplicand,c
  6195  0004' CFF3 F027'         	movff	prodl,___wmul@product
  6196  0008' CFF4 F028'         	movff	prodh,___wmul@product+1
  6197  000C' 5023'              	movf	___wmul@multiplier,w,c
  6198  000E' 0226'              	mulwf	___wmul@multiplicand+1,c
  6199  0010' 50F3               	movf	prodl,w,c
  6200  0012' 2628'              	addwf	___wmul@product+1,f,c
  6201  0014' 5024'              	movf	___wmul@multiplier+1,w,c
  6202  0016' 0225'              	mulwf	___wmul@multiplicand,c
  6203  0018' 50F3               	movf	prodl,w,c
  6204  001A' 2628'              	addwf	___wmul@product+1,f,c
  6205  001C' C027' F023'        	movff	___wmul@product,?___wmul
  6206  0020' C028' F024'        	movff	___wmul@product+1,?___wmul+1
  6207  0024' 0012               	return	
  6208  0026'                    __end_of___wmul:
  6209                           	opt stack 0
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           intcon	equ	0xFF2
  6217                           postinc0	equ	0xFEE
  6218                           wreg	equ	0xFE8
  6219                           indf1	equ	0xFE7
  6220                           fsr1h	equ	0xFE2
  6221                           fsr1l	equ	0xFE1
  6222                           indf2	equ	0xFDF
  6223                           postinc2	equ	0xFDE
  6224                           postdec2	equ	0xFDD
  6225                           fsr2h	equ	0xFDA
  6226                           fsr2l	equ	0xFD9
  6227                           status	equ	0xFD8
  6228                           
  6229 ;; *************** function ___lwmod *****************
  6230 ;; Defined at:
  6231 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  dividend        2   42[COMRAM] unsigned int 
  6234 ;;  divisor         2   44[COMRAM] unsigned int 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  counter         1   46[COMRAM] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  2   42[COMRAM] unsigned int 
  6239 ;; Registers used:
  6240 ;;		wreg, status,2, status,0
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6246 ;;      Params:         4       0       0       0
  6247 ;;      Locals:         1       0       0       0
  6248 ;;      Temps:          0       0       0       0
  6249 ;;      Totals:         5       0       0       0
  6250 ;;Total ram usage:        5 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    3
  6253 ;; This function calls:
  6254 ;;		Nothing
  6255 ;; This function is called by:
  6256 ;;		_sprintf
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           	psect	text20
  6261  0000'                    __ptext20:
  6262                           	opt stack 0
  6263  0000'                    ___lwmod:
  6264                           	opt stack 26
  6265                           
  6266                           ;incstack = 0
  6267  0000' 502C'              	movf	___lwmod@divisor,w,c
  6268  0002' 102D'              	iorwf	___lwmod@divisor+1,w,c
  6269  0004' B4D8               	btfsc	status,2,c
  6270  0006' D018               	goto	l895
  6271  0008' 0E01               	movlw	1
  6272  000A' 6E2E'              	movwf	___lwmod@counter,c
  6273  000C' D004               	goto	l2364
  6274  000E'                    l2362:
  6275  000E' 90D8               	bcf	status,0,c
  6276  0010' 362C'              	rlcf	___lwmod@divisor,f,c
  6277  0012' 362D'              	rlcf	___lwmod@divisor+1,f,c
  6278  0014' 2A2E'              	incf	___lwmod@counter,f,c
  6279  0016'                    l2364:
  6280  0016' AE2D'              	btfss	___lwmod@divisor+1,7,c
  6281  0018' D7FA               	goto	l2362
  6282  001A'                    l2366:
  6283  001A' 502C'              	movf	___lwmod@divisor,w,c
  6284  001C' 5C2A'              	subwf	___lwmod@dividend,w,c
  6285  001E' 502D'              	movf	___lwmod@divisor+1,w,c
  6286  0020' 582B'              	subwfb	___lwmod@dividend+1,w,c
  6287  0022' A0D8               	btfss	status,0,c
  6288  0024' D004               	goto	l2370
  6289  0026' 502C'              	movf	___lwmod@divisor,w,c
  6290  0028' 5E2A'              	subwf	___lwmod@dividend,f,c
  6291  002A' 502D'              	movf	___lwmod@divisor+1,w,c
  6292  002C' 5A2B'              	subwfb	___lwmod@dividend+1,f,c
  6293  002E'                    l2370:
  6294  002E' 90D8               	bcf	status,0,c
  6295  0030' 322D'              	rrcf	___lwmod@divisor+1,f,c
  6296  0032' 322C'              	rrcf	___lwmod@divisor,f,c
  6297  0034' 2E2E'              	decfsz	___lwmod@counter,f,c
  6298  0036' D7F1               	goto	l2366
  6299  0038'                    l895:
  6300  0038' C02A' F02A'        	movff	___lwmod@dividend,?___lwmod
  6301  003C' C02B' F02B'        	movff	___lwmod@dividend+1,?___lwmod+1
  6302  0040' 0012               	return		;funcret
  6303  0042'                    __end_of___lwmod:
  6304                           	opt stack 0
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           intcon	equ	0xFF2
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           indf1	equ	0xFE7
  6315                           fsr1h	equ	0xFE2
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function ___lwdiv *****************
  6325 ;; Defined at:
  6326 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  dividend        2   35[COMRAM] unsigned int 
  6329 ;;  divisor         2   37[COMRAM] unsigned int 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;  quotient        2   39[COMRAM] unsigned int 
  6332 ;;  counter         1   41[COMRAM] unsigned char 
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  2   35[COMRAM] unsigned int 
  6335 ;; Registers used:
  6336 ;;		wreg, status,2, status,0
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6342 ;;      Params:         4       0       0       0
  6343 ;;      Locals:         3       0       0       0
  6344 ;;      Temps:          0       0       0       0
  6345 ;;      Totals:         7       0       0       0
  6346 ;;Total ram usage:        7 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    3
  6349 ;; This function calls:
  6350 ;;		Nothing
  6351 ;; This function is called by:
  6352 ;;		_sprintf
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text21
  6357  0000'                    __ptext21:
  6358                           	opt stack 0
  6359  0000'                    ___lwdiv:
  6360                           	opt stack 26
  6361                           
  6362                           ;incstack = 0
  6363  0000' 0E00               	movlw	0
  6364  0002' 6E28'              	movwf	___lwdiv@quotient+1,c
  6365  0004' 0E00               	movlw	0
  6366  0006' 6E27'              	movwf	___lwdiv@quotient,c
  6367  0008' 5025'              	movf	___lwdiv@divisor,w,c
  6368  000A' 1026'              	iorwf	___lwdiv@divisor+1,w,c
  6369  000C' B4D8               	btfsc	status,2,c
  6370  000E' D01C               	goto	l885
  6371  0010' 0E01               	movlw	1
  6372  0012' 6E29'              	movwf	___lwdiv@counter,c
  6373  0014' D004               	goto	l2344
  6374  0016'                    l2342:
  6375  0016' 90D8               	bcf	status,0,c
  6376  0018' 3625'              	rlcf	___lwdiv@divisor,f,c
  6377  001A' 3626'              	rlcf	___lwdiv@divisor+1,f,c
  6378  001C' 2A29'              	incf	___lwdiv@counter,f,c
  6379  001E'                    l2344:
  6380  001E' AE26'              	btfss	___lwdiv@divisor+1,7,c
  6381  0020' D7FA               	goto	l2342
  6382  0022'                    l2346:
  6383  0022' 90D8               	bcf	status,0,c
  6384  0024' 3627'              	rlcf	___lwdiv@quotient,f,c
  6385  0026' 3628'              	rlcf	___lwdiv@quotient+1,f,c
  6386  0028' 5025'              	movf	___lwdiv@divisor,w,c
  6387  002A' 5C23'              	subwf	___lwdiv@dividend,w,c
  6388  002C' 5026'              	movf	___lwdiv@divisor+1,w,c
  6389  002E' 5824'              	subwfb	___lwdiv@dividend+1,w,c
  6390  0030' A0D8               	btfss	status,0,c
  6391  0032' D005               	goto	l2354
  6392  0034' 5025'              	movf	___lwdiv@divisor,w,c
  6393  0036' 5E23'              	subwf	___lwdiv@dividend,f,c
  6394  0038' 5026'              	movf	___lwdiv@divisor+1,w,c
  6395  003A' 5A24'              	subwfb	___lwdiv@dividend+1,f,c
  6396  003C' 8027'              	bsf	___lwdiv@quotient,0,c
  6397  003E'                    l2354:
  6398  003E' 90D8               	bcf	status,0,c
  6399  0040' 3226'              	rrcf	___lwdiv@divisor+1,f,c
  6400  0042' 3225'              	rrcf	___lwdiv@divisor,f,c
  6401  0044' 2E29'              	decfsz	___lwdiv@counter,f,c
  6402  0046' D7ED               	goto	l2346
  6403  0048'                    l885:
  6404  0048' C027' F023'        	movff	___lwdiv@quotient,?___lwdiv
  6405  004C' C028' F024'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  6406  0050' 0012               	return		;funcret
  6407  0052'                    __end_of___lwdiv:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           indf1	equ	0xFE7
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _grabRightIR *****************
  6429 ;; Defined at:
  6430 ;;		line 74 in file "IR_Reading.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6435 ;;  i               1   42[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  2   35[COMRAM] unsigned int 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6445 ;;      Params:         2       0       0       0
  6446 ;;      Locals:         3       0       0       0
  6447 ;;      Temps:          3       0       0       0
  6448 ;;      Totals:         8       0       0       0
  6449 ;;Total ram usage:        8 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    3
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_main
  6456 ;;		_ScanIR
  6457 ;;		_ScanWithRange
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           	psect	text22
  6462  0000'                    __ptext22:
  6463                           	opt stack 0
  6464  0000'                    _grabRightIR:
  6465                           	opt stack 27
  6466                           
  6467                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6468                           
  6469                           ;incstack = 0
  6470  0000' 0E00               	movlw	0
  6471  0002' 6E29'              	movwf	grabRightIR@IR_signal+1,c
  6472  0004' 0E00               	movlw	0
  6473  0006' 6E28'              	movwf	grabRightIR@IR_signal,c
  6474                           
  6475                           ;IR_Reading.c: 77: unsigned char i=0;
  6476  0008' 0E00               	movlw	0
  6477  000A' 6E2A'              	movwf	grabRightIR@i,c
  6478                           
  6479                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6480  000C' 0E00               	movlw	0
  6481  000E' 6E2A'              	movwf	grabRightIR@i,c
  6482  0010'                    l2400:
  6483  0010' 0E03               	movlw	3
  6484  0012' 642A'              	cpfsgt	grabRightIR@i,c
  6485  0014' D001               	goto	l2404
  6486  0016' D01E               	goto	l2410
  6487  0018'                    l2404:
  6488                           
  6489                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6490  0018' 5069               	movf	3945,w,c	;volatile
  6491  001A' 6E00'              	movwf	??_grabRightIR& (0+255),c
  6492  001C' 6A00'              	clrf	(??_grabRightIR+1)& (0+255),c
  6493  001E' 0E07               	movlw	7
  6494  0020'                    u1685:
  6495  0020' 90D8               	bcf	status,0,c
  6496  0022' 3625'              	rlcf	??_grabRightIR,f,c
  6497  0024' 3626'              	rlcf	??_grabRightIR+1,f,c
  6498  0026' 2EE8               	decfsz	wreg,f,c
  6499  0028' D7FB               	goto	u1685
  6500  002A' CF68 F027'         	movff	3944,??_grabRightIR+2	;volatile
  6501  002E' 90D8               	bcf	status,0,c
  6502  0030' 3227'              	rrcf	??_grabRightIR+2,f,c
  6503  0032' 5027'              	movf	??_grabRightIR+2,w,c
  6504  0034' 1225'              	iorwf	??_grabRightIR,f,c
  6505  0036' 0E00               	movlw	0
  6506  0038' 1226'              	iorwf	??_grabRightIR+1,f,c
  6507  003A' 5025'              	movf	??_grabRightIR,w,c
  6508  003C' 2628'              	addwf	grabRightIR@IR_signal,f,c
  6509  003E' 5026'              	movf	??_grabRightIR+1,w,c
  6510  0040' 2229'              	addwfc	grabRightIR@IR_signal+1,f,c
  6511                           
  6512                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6513  0042' 0E82               	movlw	130
  6514  0044' 6E00'              	movwf	??_grabRightIR& (0+255),c
  6515  0046' 0EDE               	movlw	222
  6516  0048'                    u3617:
  6517  0048' 2EE8               	decfsz	wreg,f,c
  6518  004A' D7FE               	goto	u3617
  6519  004C' 2E00'              	decfsz	??_grabRightIR& (0+255),f,c
  6520  004E' D7FC               	goto	u3617
  6521  0050' 2A2A'              	incf	grabRightIR@i,f,c
  6522  0052' D7DE               	goto	l2400
  6523  0054'                    l2410:
  6524                           
  6525                           ;IR_Reading.c: 83: }
  6526                           ;IR_Reading.c: 85: return IR_signal>>2;
  6527  0054' C028' F025'        	movff	grabRightIR@IR_signal,??_grabRightIR
  6528  0058' C029' F026'        	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6529  005C' 90D8               	bcf	status,0,c
  6530  005E' 3226'              	rrcf	??_grabRightIR+1,f,c
  6531  0060' 3225'              	rrcf	??_grabRightIR,f,c
  6532  0062' 90D8               	bcf	status,0,c
  6533  0064' 3226'              	rrcf	??_grabRightIR+1,f,c
  6534  0066' 3225'              	rrcf	??_grabRightIR,f,c
  6535  0068' C025' F023'        	movff	??_grabRightIR,?_grabRightIR
  6536  006C' C026' F024'        	movff	??_grabRightIR+1,?_grabRightIR+1
  6537  0070' 0012               	return	
  6538  0072'                    __end_of_grabRightIR:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           intcon	equ	0xFF2
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           indf1	equ	0xFE7
  6550                           fsr1h	equ	0xFE2
  6551                           fsr1l	equ	0xFE1
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _grabLeftIR *****************
  6560 ;; Defined at:
  6561 ;;		line 90 in file "IR_Reading.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6566 ;;  i               1   42[COMRAM] unsigned char 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  2   35[COMRAM] unsigned int 
  6569 ;; Registers used:
  6570 ;;		wreg, status,2, status,0
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6576 ;;      Params:         2       0       0       0
  6577 ;;      Locals:         3       0       0       0
  6578 ;;      Temps:          3       0       0       0
  6579 ;;      Totals:         8       0       0       0
  6580 ;;Total ram usage:        8 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    3
  6583 ;; This function calls:
  6584 ;;		Nothing
  6585 ;; This function is called by:
  6586 ;;		_main
  6587 ;;		_ScanIR
  6588 ;;		_ScanWithRange
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text23
  6593  0000'                    __ptext23:
  6594                           	opt stack 0
  6595  0000'                    _grabLeftIR:
  6596                           	opt stack 27
  6597                           
  6598                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6599                           
  6600                           ;incstack = 0
  6601  0000' 0E00               	movlw	0
  6602  0002' 6E29'              	movwf	grabLeftIR@IR_signal+1,c
  6603  0004' 0E00               	movlw	0
  6604  0006' 6E28'              	movwf	grabLeftIR@IR_signal,c
  6605                           
  6606                           ;IR_Reading.c: 93: unsigned char i=0;
  6607  0008' 0E00               	movlw	0
  6608  000A' 6E2A'              	movwf	grabLeftIR@i,c
  6609                           
  6610                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6611  000C' 0E00               	movlw	0
  6612  000E' 6E2A'              	movwf	grabLeftIR@i,c
  6613  0010'                    l2384:
  6614  0010' 0E03               	movlw	3
  6615  0012' 642A'              	cpfsgt	grabLeftIR@i,c
  6616  0014' D001               	goto	l2388
  6617  0016' D01E               	goto	l2394
  6618  0018'                    l2388:
  6619                           
  6620                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6621  0018' 5067               	movf	3943,w,c	;volatile
  6622  001A' 6E00'              	movwf	??_grabLeftIR& (0+255),c
  6623  001C' 6A00'              	clrf	(??_grabLeftIR+1)& (0+255),c
  6624  001E' 0E07               	movlw	7
  6625  0020'                    u1655:
  6626  0020' 90D8               	bcf	status,0,c
  6627  0022' 3625'              	rlcf	??_grabLeftIR,f,c
  6628  0024' 3626'              	rlcf	??_grabLeftIR+1,f,c
  6629  0026' 2EE8               	decfsz	wreg,f,c
  6630  0028' D7FB               	goto	u1655
  6631  002A' CF66 F027'         	movff	3942,??_grabLeftIR+2	;volatile
  6632  002E' 90D8               	bcf	status,0,c
  6633  0030' 3227'              	rrcf	??_grabLeftIR+2,f,c
  6634  0032' 5027'              	movf	??_grabLeftIR+2,w,c
  6635  0034' 1225'              	iorwf	??_grabLeftIR,f,c
  6636  0036' 0E00               	movlw	0
  6637  0038' 1226'              	iorwf	??_grabLeftIR+1,f,c
  6638  003A' 5025'              	movf	??_grabLeftIR,w,c
  6639  003C' 2628'              	addwf	grabLeftIR@IR_signal,f,c
  6640  003E' 5026'              	movf	??_grabLeftIR+1,w,c
  6641  0040' 2229'              	addwfc	grabLeftIR@IR_signal+1,f,c
  6642                           
  6643                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6644  0042' 0E82               	movlw	130
  6645  0044' 6E00'              	movwf	??_grabLeftIR& (0+255),c
  6646  0046' 0EDE               	movlw	222
  6647  0048'                    u3627:
  6648  0048' 2EE8               	decfsz	wreg,f,c
  6649  004A' D7FE               	goto	u3627
  6650  004C' 2E00'              	decfsz	??_grabLeftIR& (0+255),f,c
  6651  004E' D7FC               	goto	u3627
  6652  0050' 2A2A'              	incf	grabLeftIR@i,f,c
  6653  0052' D7DE               	goto	l2384
  6654  0054'                    l2394:
  6655                           
  6656                           ;IR_Reading.c: 99: }
  6657                           ;IR_Reading.c: 101: return IR_signal>>2;
  6658  0054' C028' F025'        	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6659  0058' C029' F026'        	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6660  005C' 90D8               	bcf	status,0,c
  6661  005E' 3226'              	rrcf	??_grabLeftIR+1,f,c
  6662  0060' 3225'              	rrcf	??_grabLeftIR,f,c
  6663  0062' 90D8               	bcf	status,0,c
  6664  0064' 3226'              	rrcf	??_grabLeftIR+1,f,c
  6665  0066' 3225'              	rrcf	??_grabLeftIR,f,c
  6666  0068' C025' F023'        	movff	??_grabLeftIR,?_grabLeftIR
  6667  006C' C026' F024'        	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6668  0070' 0012               	return	
  6669  0072'                    __end_of_grabLeftIR:
  6670                           	opt stack 0
  6671                           tblptru	equ	0xFF8
  6672                           tblptrh	equ	0xFF7
  6673                           tblptrl	equ	0xFF6
  6674                           tablat	equ	0xFF5
  6675                           prodh	equ	0xFF4
  6676                           prodl	equ	0xFF3
  6677                           intcon	equ	0xFF2
  6678                           postinc0	equ	0xFEE
  6679                           wreg	equ	0xFE8
  6680                           indf1	equ	0xFE7
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _delay_tenth_s *****************
  6691 ;; Defined at:
  6692 ;;		line 29 in file "Movement.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;  tenth_second    1    wreg     unsigned char 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;  tenth_second    1   36[COMRAM] unsigned char 
  6697 ;;  i               2   37[COMRAM] unsigned int 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;		None               void
  6700 ;; Registers used:
  6701 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6707 ;;      Params:         0       0       0       0
  6708 ;;      Locals:         3       0       0       0
  6709 ;;      Temps:          1       0       0       0
  6710 ;;      Totals:         4       0       0       0
  6711 ;;Total ram usage:        4 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    3
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;;		_ScanIR
  6719 ;;		_ScanWithRange
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text24
  6724  0000'                    __ptext24:
  6725                           	opt stack 0
  6726  0000'                    _delay_tenth_s:
  6727                           	opt stack 27
  6728                           
  6729                           ;incstack = 0
  6730                           ;delay_tenth_s@tenth_seconds stored from wreg
  6731  0000' 6E24'              	movwf	delay_tenth_s@tenth_seconds,c
  6732                           
  6733                           ;Movement.c: 30: unsigned int i=0;
  6734  0002' 0E00               	movlw	0
  6735  0004' 6E26'              	movwf	delay_tenth_s@i+1,c
  6736  0006' 0E00               	movlw	0
  6737  0008' 6E25'              	movwf	delay_tenth_s@i,c
  6738                           
  6739                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  6740  000A' 0E00               	movlw	0
  6741  000C' 6E26'              	movwf	delay_tenth_s@i+1,c
  6742  000E' 0E01               	movlw	1
  6743  0010' 6E25'              	movwf	delay_tenth_s@i,c
  6744  0012' D009               	goto	l2380
  6745  0014'                    l2376:
  6746                           
  6747                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  6748  0014' 0E82               	movlw	130
  6749  0016' 6E00'              	movwf	??_delay_tenth_s& (0+255),c
  6750  0018' 0EDE               	movlw	222
  6751  001A'                    u3637:
  6752  001A' 2EE8               	decfsz	wreg,f,c
  6753  001C' D7FE               	goto	u3637
  6754  001E' 2E00'              	decfsz	??_delay_tenth_s& (0+255),f,c
  6755  0020' D7FC               	goto	u3637
  6756  0022' 4A25'              	infsnz	delay_tenth_s@i,f,c
  6757  0024' 2A26'              	incf	delay_tenth_s@i+1,f,c
  6758  0026'                    l2380:
  6759  0026' 5024'              	movf	delay_tenth_s@tenth_seconds,w,c
  6760  0028' 0D02               	mullw	2
  6761  002A' 5025'              	movf	delay_tenth_s@i,w,c
  6762  002C' 5CF3               	subwf	prodl,w,c
  6763  002E' 5026'              	movf	delay_tenth_s@i+1,w,c
  6764  0030' 58F4               	subwfb	prodh,w,c
  6765  0032' A0D8               	btfss	status,0,c
  6766  0034' 0012               	return	
  6767  0036' D7EE               	goto	l2376
  6768  0038'                    __end_of_delay_tenth_s:
  6769                           	opt stack 0
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _SetLine *****************
  6790 ;; Defined at:
  6791 ;;		line 74 in file "LCD.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  line            1    wreg     unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  line            1   41[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;		None               void
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6805 ;;      Params:         0       0       0       0
  6806 ;;      Locals:         1       0       0       0
  6807 ;;      Temps:          0       0       0       0
  6808 ;;      Totals:         1       0       0       0
  6809 ;;Total ram usage:        1 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    6
  6812 ;; This function calls:
  6813 ;;		_SendLCD
  6814 ;; This function is called by:
  6815 ;;		_main
  6816 ;;		_ScanIR
  6817 ;;		_ScanWithRange
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text25
  6822  0000'                    __ptext25:
  6823                           	opt stack 0
  6824  0000'                    _SetLine:
  6825                           	opt stack 24
  6826                           
  6827                           ;incstack = 0
  6828                           ;SetLine@line stored from wreg
  6829  0000' 6E29'              	movwf	SetLine@line,c
  6830                           
  6831                           ;LCD.c: 75: if (line==1) {
  6832  0002' 0429'              	decf	SetLine@line,w,c
  6833  0004' A4D8               	btfss	status,2,c
  6834  0006' D006               	goto	l2418
  6835                           
  6836                           ;LCD.c: 76: SendLCD(0x80,0);
  6837  0008' 0E00               	movlw	0
  6838  000A' 6E27'              	movwf	SendLCD@type,c
  6839  000C' 0E80               	movlw	128
  6840  000E' EC00' F000'        	call	_SendLCD
  6841                           
  6842                           ;LCD.c: 77: } else if (line==2) {
  6843  0012' D009               	goto	l2422
  6844  0014'                    l2418:
  6845  0014' 0E02               	movlw	2
  6846  0016' 1829'              	xorwf	SetLine@line,w,c
  6847  0018' A4D8               	btfss	status,2,c
  6848  001A' D005               	goto	l2422
  6849                           
  6850                           ;LCD.c: 78: SendLCD(0xC0,0);
  6851  001C' 0E00               	movlw	0
  6852  001E' 6E27'              	movwf	SendLCD@type,c
  6853  0020' 0EC0               	movlw	192
  6854  0022' EC00' F000'        	call	_SendLCD
  6855  0026'                    l2422:
  6856                           
  6857                           ;LCD.c: 79: }
  6858                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6859  0026' 0E21               	movlw	33
  6860  0028'                    u3647:
  6861  0028' 2EE8               	decfsz	wreg,f,c
  6862  002A' D7FE               	goto	u3647
  6863  002C' F000               	nop	
  6864  002E' 0012               	return		;funcret
  6865  0030'                    __end_of_SetLine:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           intcon	equ	0xFF2
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           indf1	equ	0xFE7
  6877                           fsr1h	equ	0xFE2
  6878                           fsr1l	equ	0xFE1
  6879                           indf2	equ	0xFDF
  6880                           postinc2	equ	0xFDE
  6881                           postdec2	equ	0xFDD
  6882                           fsr2h	equ	0xFDA
  6883                           fsr2l	equ	0xFD9
  6884                           status	equ	0xFD8
  6885                           
  6886 ;; *************** function _LCD_String *****************
  6887 ;; Defined at:
  6888 ;;		line 83 in file "LCD.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  string          2   41[COMRAM] PTR unsigned char 
  6891 ;;		 -> STR_12(20), STR_10(18), ScanWithRange@buf(40), STR_8(18), 
  6892 ;;		 -> ScanIR@buf(40), STR_6(15), STR_5(17), STR_4(18), 
  6893 ;;		 -> STR_3(17), main@buf(40), STR_1(16), 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;		None               void
  6898 ;; Registers used:
  6899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6905 ;;      Params:         2       0       0       0
  6906 ;;      Locals:         0       0       0       0
  6907 ;;      Temps:          0       0       0       0
  6908 ;;      Totals:         2       0       0       0
  6909 ;;Total ram usage:        2 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    6
  6912 ;; This function calls:
  6913 ;;		_SendLCD
  6914 ;; This function is called by:
  6915 ;;		_main
  6916 ;;		_ScanIR
  6917 ;;		_ScanWithRange
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text26
  6922  0000'                    __ptext26:
  6923                           	opt stack 0
  6924  0000'                    _LCD_String:
  6925                           	opt stack 23
  6926                           
  6927                           ;LCD.c: 85: while(*string != 0){
  6928                           
  6929                           ;incstack = 0
  6930  0000' D01A               	goto	l2432
  6931  0002'                    l2426:
  6932                           
  6933                           ;LCD.c: 88: SendLCD(*string++,1);
  6934  0002' 0E01               	movlw	1
  6935  0004' 6E27'              	movwf	SendLCD@type,c
  6936  0006' C029' FFF6         	movff	LCD_String@string,tblptrl
  6937  000A' C02A' FFF7         	movff	LCD_String@string+1,tblptrh
  6938  000E' 6AF8               	clrf	tblptru,c
  6939  0010' 0EFF'              	movlw	(high __ramtop+-1)
  6940  0012' 64F7               	cpfsgt	tblptrh,c
  6941  0014' D003               	bra	u1727
  6942  0016' 0008               	tblrd		*
  6943  0018' 50F5               	movf	tablat,w,c
  6944  001A' D005               	bra	u1720
  6945  001C'                    u1727:
  6946  001C' CFF6 FFE1          	movff	tblptrl,fsr1l
  6947  0020' CFF7 FFE2          	movff	tblptrh,fsr1h
  6948  0024' 50E7               	movf	indf1,w,c
  6949  0026'                    u1720:
  6950  0026' EC00' F000'        	call	_SendLCD
  6951  002A' 4A29'              	infsnz	LCD_String@string,f,c
  6952  002C' 2A2A'              	incf	LCD_String@string+1,f,c
  6953                           
  6954                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6955  002E' 0E21               	movlw	33
  6956  0030'                    u3657:
  6957  0030' 2EE8               	decfsz	wreg,f,c
  6958  0032' D7FE               	goto	u3657
  6959  0034' F000               	nop	
  6960  0036'                    l2432:
  6961  0036' C029' FFF6         	movff	LCD_String@string,tblptrl
  6962  003A' C02A' FFF7         	movff	LCD_String@string+1,tblptrh
  6963  003E' 6AF8               	clrf	tblptru,c
  6964  0040' 0EFF'              	movlw	(high __ramtop+-1)
  6965  0042' 64F7               	cpfsgt	tblptrh,c
  6966  0044' D003               	bra	u1737
  6967  0046' 0008               	tblrd		*
  6968  0048' 50F5               	movf	tablat,w,c
  6969  004A' D005               	bra	u1730
  6970  004C'                    u1737:
  6971  004C' CFF6 FFE1          	movff	tblptrl,fsr1l
  6972  0050' CFF7 FFE2          	movff	tblptrh,fsr1h
  6973  0054' 50E7               	movf	indf1,w,c
  6974  0056'                    u1730:
  6975  0056' 0900               	iorlw	0
  6976  0058' B4D8               	btfsc	status,2,c
  6977  005A' 0012               	return	
  6978  005C' D7D2               	goto	l2426
  6979  005E'                    __end_of_LCD_String:
  6980                           	opt stack 0
  6981                           tblptru	equ	0xFF8
  6982                           tblptrh	equ	0xFF7
  6983                           tblptrl	equ	0xFF6
  6984                           tablat	equ	0xFF5
  6985                           prodh	equ	0xFF4
  6986                           prodl	equ	0xFF3
  6987                           intcon	equ	0xFF2
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           indf1	equ	0xFE7
  6991                           fsr1h	equ	0xFE2
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function _SendLCD *****************
  7001 ;; Defined at:
  7002 ;;		line 27 in file "LCD.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  Byte            1    wreg     unsigned char 
  7005 ;;  type            1   39[COMRAM] unsigned char 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  Byte            1   40[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;		None               void
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7017 ;;      Params:         1       0       0       0
  7018 ;;      Locals:         1       0       0       0
  7019 ;;      Temps:          0       0       0       0
  7020 ;;      Totals:         2       0       0       0
  7021 ;;Total ram usage:        2 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    5
  7024 ;; This function calls:
  7025 ;;		_LCDout
  7026 ;; This function is called by:
  7027 ;;		_main
  7028 ;;		_initLCD
  7029 ;;		_SetLine
  7030 ;;		_LCD_String
  7031 ;;		_ScanIR
  7032 ;;		_ScanWithRange
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text27
  7037  0000'                    __ptext27:
  7038                           	opt stack 0
  7039  0000'                    _SendLCD:
  7040                           	opt stack 24
  7041                           
  7042                           ;incstack = 0
  7043                           ;SendLCD@Byte stored from wreg
  7044  0000' 6E28'              	movwf	SendLCD@Byte,c
  7045                           
  7046                           ;LCD.c: 30: LATAbits.LATA6=type;
  7047  0002' B027'              	btfsc	SendLCD@type,0,c
  7048  0004' D002               	bra	u1505
  7049  0006' 9C89               	bcf	3977,6,c	;volatile
  7050  0008' D001               	bra	u1506
  7051  000A'                    u1505:
  7052  000A' 8C89               	bsf	3977,6,c	;volatile
  7053  000C'                    u1506:
  7054                           
  7055                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  7056  000C' 3828'              	swapf	SendLCD@Byte,w,c
  7057  000E' 0B0F               	andlw	15
  7058  0010' 0B0F               	andlw	15
  7059  0012' EC00' F000'        	call	_LCDout
  7060                           
  7061                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7062  0016' 0E06               	movlw	6
  7063  0018'                    u3667:
  7064  0018' 2EE8               	decfsz	wreg,f,c
  7065  001A' D7FE               	goto	u3667
  7066  001C' D000               	nop2		;nop
  7067                           
  7068                           ;LCD.c: 35: LCDout(Byte&0x0F);
  7069  001E' 5028'              	movf	SendLCD@Byte,w,c
  7070  0020' 0B0F               	andlw	15
  7071  0022' EC00' F000'        	call	_LCDout
  7072                           
  7073                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  7074  0026' 0E21               	movlw	33
  7075  0028'                    u3677:
  7076  0028' 2EE8               	decfsz	wreg,f,c
  7077  002A' D7FE               	goto	u3677
  7078  002C' F000               	nop	
  7079  002E' 0012               	return		;funcret
  7080  0030'                    __end_of_SendLCD:
  7081                           	opt stack 0
  7082                           tblptru	equ	0xFF8
  7083                           tblptrh	equ	0xFF7
  7084                           tblptrl	equ	0xFF6
  7085                           tablat	equ	0xFF5
  7086                           prodh	equ	0xFF4
  7087                           prodl	equ	0xFF3
  7088                           intcon	equ	0xFF2
  7089                           postinc0	equ	0xFEE
  7090                           wreg	equ	0xFE8
  7091                           indf1	equ	0xFE7
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101 ;; *************** function _LCDout *****************
  7102 ;; Defined at:
  7103 ;;		line 14 in file "LCD.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  number          1    wreg     unsigned char 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  number          1   38[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;		None               void
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7117 ;;      Params:         0       0       0       0
  7118 ;;      Locals:         1       0       0       0
  7119 ;;      Temps:          3       0       0       0
  7120 ;;      Totals:         4       0       0       0
  7121 ;;Total ram usage:        4 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    4
  7124 ;; This function calls:
  7125 ;;		_E_TOG
  7126 ;; This function is called by:
  7127 ;;		_SendLCD
  7128 ;;		_initLCD
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text28
  7133  0000'                    __ptext28:
  7134                           	opt stack 0
  7135  0000'                    _LCDout:
  7136                           	opt stack 24
  7137                           
  7138                           ;incstack = 0
  7139                           ;LCDout@number stored from wreg
  7140  0000' 6E26'              	movwf	LCDout@number,c
  7141                           
  7142                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  7143  0002' 5026'              	movf	LCDout@number,w,c
  7144  0004' 6E00'              	movwf	??_LCDout& (0+255),c
  7145  0006' 6A00'              	clrf	(??_LCDout+1)& (0+255),c
  7146  0008' 0E07               	movlw	7
  7147  000A'                    u1395:
  7148  000A' 90D8               	bcf	status,0,c
  7149  000C' 3623'              	rlcf	??_LCDout,f,c
  7150  000E' 3624'              	rlcf	??_LCDout+1,f,c
  7151  0010' 2EE8               	decfsz	wreg,f,c
  7152  0012' D7FB               	goto	u1395
  7153  0014' 0E07               	movlw	7
  7154  0016' 6E00'              	movwf	(??_LCDout+2)& (0+255),c
  7155  0018'                    u1405:
  7156  0018' 3424'              	rlcf	??_LCDout+1,w,c
  7157  001A' 3224'              	rrcf	??_LCDout+1,f,c
  7158  001C' 3223'              	rrcf	??_LCDout,f,c
  7159  001E' 2E00'              	decfsz	(??_LCDout+2)& (0+255),f,c
  7160  0020' D7FB               	goto	u1405
  7161  0022' 4623'              	rlncf	??_LCDout,f,c
  7162  0024' 508B               	movf	3979,w,c	;volatile
  7163  0026' 1823'              	xorwf	??_LCDout,w,c
  7164  0028' 0BFD               	andlw	-3
  7165  002A' 1823'              	xorwf	??_LCDout,w,c
  7166  002C' 6E8B               	movwf	3979,c	;volatile
  7167                           
  7168                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  7169  002E' 5026'              	movf	LCDout@number,w,c
  7170  0030' 6E00'              	movwf	??_LCDout& (0+255),c
  7171  0032' 6A00'              	clrf	(??_LCDout+1)& (0+255),c
  7172  0034' 0E06               	movlw	6
  7173  0036'                    u1415:
  7174  0036' 90D8               	bcf	status,0,c
  7175  0038' 3623'              	rlcf	??_LCDout,f,c
  7176  003A' 3624'              	rlcf	??_LCDout+1,f,c
  7177  003C' 2EE8               	decfsz	wreg,f,c
  7178  003E' D7FB               	goto	u1415
  7179  0040' 0E07               	movlw	7
  7180  0042' 6E00'              	movwf	(??_LCDout+2)& (0+255),c
  7181  0044'                    u1425:
  7182  0044' 3424'              	rlcf	??_LCDout+1,w,c
  7183  0046' 3224'              	rrcf	??_LCDout+1,f,c
  7184  0048' 3223'              	rrcf	??_LCDout,f,c
  7185  004A' 2E00'              	decfsz	(??_LCDout+2)& (0+255),f,c
  7186  004C' D7FB               	goto	u1425
  7187  004E' 4623'              	rlncf	??_LCDout,f,c
  7188  0050' 4623'              	rlncf	??_LCDout,f,c
  7189  0052' 508B               	movf	3979,w,c	;volatile
  7190  0054' 1823'              	xorwf	??_LCDout,w,c
  7191  0056' 0BFB               	andlw	-5
  7192  0058' 1823'              	xorwf	??_LCDout,w,c
  7193  005A' 6E8B               	movwf	3979,c	;volatile
  7194                           
  7195                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  7196  005C' 5026'              	movf	LCDout@number,w,c
  7197  005E' 6E00'              	movwf	??_LCDout& (0+255),c
  7198  0060' 6A00'              	clrf	(??_LCDout+1)& (0+255),c
  7199  0062' 0E05               	movlw	5
  7200  0064'                    u1435:
  7201  0064' 90D8               	bcf	status,0,c
  7202  0066' 3623'              	rlcf	??_LCDout,f,c
  7203  0068' 3624'              	rlcf	??_LCDout+1,f,c
  7204  006A' 2EE8               	decfsz	wreg,f,c
  7205  006C' D7FB               	goto	u1435
  7206  006E' 0E07               	movlw	7
  7207  0070' 6E00'              	movwf	(??_LCDout+2)& (0+255),c
  7208  0072'                    u1445:
  7209  0072' 3424'              	rlcf	??_LCDout+1,w,c
  7210  0074' 3224'              	rrcf	??_LCDout+1,f,c
  7211  0076' 3223'              	rrcf	??_LCDout,f,c
  7212  0078' 2E00'              	decfsz	(??_LCDout+2)& (0+255),f,c
  7213  007A' D7FB               	goto	u1445
  7214  007C' 508C               	movf	3980,w,c	;volatile
  7215  007E' 1823'              	xorwf	??_LCDout,w,c
  7216  0080' 0BFE               	andlw	-2
  7217  0082' 1823'              	xorwf	??_LCDout,w,c
  7218  0084' 6E8C               	movwf	3980,c	;volatile
  7219                           
  7220                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  7221  0086' 5026'              	movf	LCDout@number,w,c
  7222  0088' 6E00'              	movwf	??_LCDout& (0+255),c
  7223  008A' 6A00'              	clrf	(??_LCDout+1)& (0+255),c
  7224  008C' 3A23'              	swapf	??_LCDout,f,c
  7225  008E' 3A24'              	swapf	??_LCDout+1,f,c
  7226  0090' 0EF0               	movlw	240
  7227  0092' 1624'              	andwf	??_LCDout+1,f,c
  7228  0094' 5023'              	movf	??_LCDout,w,c
  7229  0096' 0B0F               	andlw	15
  7230  0098' 1224'              	iorwf	??_LCDout+1,f,c
  7231  009A' 0EF0               	movlw	240
  7232  009C' 1623'              	andwf	??_LCDout,f,c
  7233  009E' 0E07               	movlw	7
  7234  00A0' 6E00'              	movwf	(??_LCDout+2)& (0+255),c
  7235  00A2'                    u1455:
  7236  00A2' 3424'              	rlcf	??_LCDout+1,w,c
  7237  00A4' 3224'              	rrcf	??_LCDout+1,f,c
  7238  00A6' 3223'              	rrcf	??_LCDout,f,c
  7239  00A8' 2E00'              	decfsz	(??_LCDout+2)& (0+255),f,c
  7240  00AA' D7FB               	goto	u1455
  7241  00AC' 4623'              	rlncf	??_LCDout,f,c
  7242  00AE' 508C               	movf	3980,w,c	;volatile
  7243  00B0' 1823'              	xorwf	??_LCDout,w,c
  7244  00B2' 0BFD               	andlw	-3
  7245  00B4' 1823'              	xorwf	??_LCDout,w,c
  7246  00B6' 6E8C               	movwf	3980,c	;volatile
  7247                           
  7248                           ;LCD.c: 21: E_TOG();
  7249  00B8' EC00' F000'        	call	_E_TOG	;wreg free
  7250                           
  7251                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7252  00BC' 0E03               	movlw	3
  7253  00BE'                    u3687:
  7254  00BE' 2EE8               	decfsz	wreg,f,c
  7255  00C0' D7FE               	goto	u3687
  7256  00C2' F000               	nop	
  7257  00C4' 0012               	return		;funcret
  7258  00C6'                    __end_of_LCDout:
  7259                           	opt stack 0
  7260                           tblptru	equ	0xFF8
  7261                           tblptrh	equ	0xFF7
  7262                           tblptrl	equ	0xFF6
  7263                           tablat	equ	0xFF5
  7264                           prodh	equ	0xFF4
  7265                           prodl	equ	0xFF3
  7266                           intcon	equ	0xFF2
  7267                           postinc0	equ	0xFEE
  7268                           wreg	equ	0xFE8
  7269                           indf1	equ	0xFE7
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _E_TOG *****************
  7280 ;; Defined at:
  7281 ;;		line 5 in file "LCD.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;		None
  7286 ;; Return value:  Size  Location     Type
  7287 ;;		None               void
  7288 ;; Registers used:
  7289 ;;		wreg
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7295 ;;      Params:         0       0       0       0
  7296 ;;      Locals:         0       0       0       0
  7297 ;;      Temps:          0       0       0       0
  7298 ;;      Totals:         0       0       0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    3
  7302 ;; This function calls:
  7303 ;;		Nothing
  7304 ;; This function is called by:
  7305 ;;		_LCDout
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text29
  7310  0000'                    __ptext29:
  7311                           	opt stack 0
  7312  0000'                    _E_TOG:
  7313                           	opt stack 24
  7314                           
  7315                           ;LCD.c: 8: LATCbits.LATC0=1;
  7316                           
  7317                           ;incstack = 0
  7318  0000' 808B               	bsf	3979,0,c	;volatile
  7319                           
  7320                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7321  0002' 0E03               	movlw	3
  7322  0004'                    u3697:
  7323  0004' 2EE8               	decfsz	wreg,f,c
  7324  0006' D7FE               	goto	u3697
  7325  0008' F000               	nop	
  7326                           
  7327                           ;LCD.c: 10: LATCbits.LATC0=0;
  7328  000A' 908B               	bcf	3979,0,c	;volatile
  7329  000C' 0012               	return		;funcret
  7330  000E'                    __end_of_E_TOG:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           indf1	equ	0xFE7
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _InterruptHandlerLow *****************
  7352 ;; Defined at:
  7353 ;;		line 18 in file "main.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;		None               void
  7360 ;; Registers used:
  7361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7367 ;;      Params:         0       0       0       0
  7368 ;;      Locals:         0       0       0       0
  7369 ;;      Temps:         17       0       0       0
  7370 ;;      Totals:        17       0       0       0
  7371 ;;Total ram usage:       17 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    2
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		Interrupt level 1
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	intcodelo
  7382  0000'                    __pintcodelo:
  7383                           	opt stack 0
  7384  0000'                    _InterruptHandlerLow:
  7385                           	opt stack 23
  7386                           
  7387                           ;incstack = 0
  7388  0000' 8000'              	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7389  0002' CFD8 F012'         	movff	status,??_InterruptHandlerLow
  7390  0006' CFE8 F013'         	movff	wreg,??_InterruptHandlerLow+1
  7391  000A' CFE0 F014'         	movff	bsr,??_InterruptHandlerLow+2
  7392  000E' CFFA F015'         	movff	pclath,??_InterruptHandlerLow+3
  7393  0012' CFFB F016'         	movff	pclatu,??_InterruptHandlerLow+4
  7394  0016' CFE9 F017'         	movff	fsr0l,??_InterruptHandlerLow+5
  7395  001A' CFEA F018'         	movff	fsr0h,??_InterruptHandlerLow+6
  7396  001E' CFE1 F019'         	movff	fsr1l,??_InterruptHandlerLow+7
  7397  0022' CFE2 F01A'         	movff	fsr1h,??_InterruptHandlerLow+8
  7398  0026' CFD9 F01B'         	movff	fsr2l,??_InterruptHandlerLow+9
  7399  002A' CFDA F01C'         	movff	fsr2h,??_InterruptHandlerLow+10
  7400  002E' CFF3 F01D'         	movff	prodl,??_InterruptHandlerLow+11
  7401  0032' CFF4 F01E'         	movff	prodh,??_InterruptHandlerLow+12
  7402  0036' CFF6 F01F'         	movff	tblptrl,??_InterruptHandlerLow+13
  7403  003A' CFF7 F020'         	movff	tblptrh,??_InterruptHandlerLow+14
  7404  003E' CFF8 F021'         	movff	tblptru,??_InterruptHandlerLow+15
  7405  0042' CFF5 F022'         	movff	tablat,??_InterruptHandlerLow+16
  7406                           
  7407                           ;main.c: 20: if (PIR1bits.RCIF) {
  7408  0046' AA9E               	btfss	3998,5,c	;volatile
  7409  0048' D016               	goto	i1l86
  7410                           
  7411                           ;main.c: 21: ReceivedString[i]=RCREG;
  7412  004A' 5000'              	movf	_i,w,c	;volatile
  7413  004C' 0D01               	mullw	1
  7414  004E' 0E00'              	movlw	low _ReceivedString
  7415  0050' 24F3               	addwf	prodl,w,c
  7416  0052' 6ED9               	movwf	fsr2l,c
  7417  0054' 0E00'              	movlw	high _ReceivedString
  7418  0056' 20F4               	addwfc	prodh,w,c
  7419  0058' 6EDA               	movwf	fsr2h,c
  7420  005A' CFAE FFDF          	movff	4014,indf2	;volatile
  7421                           
  7422                           ;main.c: 22: RFID_Read=1;
  7423  005E' 0E01               	movlw	1
  7424  0060' 0101               	movlb	1	; () banked
  7425  0062' 6F00'              	movwf	_RFID_Read& (0+255),b	;volatile
  7426                           
  7427                           ; BSR set to: 1
  7428                           ;main.c: 23: if (i==15){
  7429  0064' 0E0F               	movlw	15
  7430  0066' 1800'              	xorwf	_i,w,c	;volatile
  7431  0068' A4D8               	btfss	status,2,c
  7432  006A' D003               	goto	i1l3078
  7433                           
  7434                           ; BSR set to: 1
  7435                           ;main.c: 24: i=0;
  7436  006C' 0E00               	movlw	0
  7437  006E' 6E00'              	movwf	_i,c	;volatile
  7438                           
  7439                           ;main.c: 25: }else{
  7440  0070' D001               	goto	i1l3080
  7441  0072'                    i1l3078:
  7442                           
  7443                           ; BSR set to: 1
  7444                           ;main.c: 26: i++;
  7445  0072' 2A00'              	incf	_i,f,c	;volatile
  7446  0074'                    i1l3080:
  7447                           
  7448                           ; BSR set to: 1
  7449                           ;main.c: 27: }
  7450                           ;main.c: 28: PIR1bits.RCIF=0;
  7451  0074' 9A9E               	bcf	3998,5,c	;volatile
  7452  0076'                    i1l86:
  7453  0076' C022' FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7454  007A' C021' FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7455  007E' C020' FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7456  0082' C01F' FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7457  0086' C01E' FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7458  008A' C01D' FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7459  008E' C01C' FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7460  0092' C01B' FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7461  0096' C01A' FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7462  009A' C019' FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7463  009E' C018' FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7464  00A2' C017' FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7465  00A6' C016' FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7466  00AA' C015' FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7467  00AE' C014' FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7468  00B2' C013' FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7469  00B6' C012' FFD8         	movff	??_InterruptHandlerLow,status
  7470  00BA' 9000'              	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7471  00BC' 0010               	retfie	
  7472  00BE'                    __end_of_InterruptHandlerLow:
  7473                           	opt stack 0
  7474                           pclatu	equ	0xFFB
  7475                           pclath	equ	0xFFA
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodh	equ	0xFF4
  7481                           prodl	equ	0xFF3
  7482                           intcon	equ	0xFF2
  7483                           postinc0	equ	0xFEE
  7484                           fsr0h	equ	0xFEA
  7485                           fsr0l	equ	0xFE9
  7486                           wreg	equ	0xFE8
  7487                           indf1	equ	0xFE7
  7488                           fsr1h	equ	0xFE2
  7489                           fsr1l	equ	0xFE1
  7490                           bsr	equ	0xFE0
  7491                           indf2	equ	0xFDF
  7492                           postinc2	equ	0xFDE
  7493                           postdec2	equ	0xFDD
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _InterruptHandlerHigh *****************
  7499 ;; Defined at:
  7500 ;;		line 34 in file "main.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;		None               void
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7514 ;;      Params:         0       0       0       0
  7515 ;;      Locals:         0       0       0       0
  7516 ;;      Temps:         14       0       0       0
  7517 ;;      Totals:        14       0       0       0
  7518 ;;Total ram usage:       14 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    1
  7521 ;; This function calls:
  7522 ;;		i2_delay_tenth_s
  7523 ;; This function is called by:
  7524 ;;		Interrupt level 2
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	intcode
  7529  0000'                    __pintcode:
  7530                           	opt stack 0
  7531  0000'                    _InterruptHandlerHigh:
  7532                           	opt stack 23
  7533                           
  7534                           ;incstack = 0
  7535  0000' 8200'              	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7536  0002' CFFA F004'         	movff	pclath,??_InterruptHandlerHigh
  7537  0006' CFFB F005'         	movff	pclatu,??_InterruptHandlerHigh+1
  7538  000A' EF00' F000'        	goto	int_func
  7539                           pclatu	equ	0xFFB
  7540                           pclath	equ	0xFFA
  7541                           tblptru	equ	0xFF8
  7542                           tblptrh	equ	0xFF7
  7543                           tblptrl	equ	0xFF6
  7544                           tablat	equ	0xFF5
  7545                           prodh	equ	0xFF4
  7546                           prodl	equ	0xFF3
  7547                           intcon	equ	0xFF2
  7548                           postinc0	equ	0xFEE
  7549                           fsr0h	equ	0xFEA
  7550                           fsr0l	equ	0xFE9
  7551                           wreg	equ	0xFE8
  7552                           indf1	equ	0xFE7
  7553                           fsr1h	equ	0xFE2
  7554                           fsr1l	equ	0xFE1
  7555                           bsr	equ	0xFE0
  7556                           indf2	equ	0xFDF
  7557                           postinc2	equ	0xFDE
  7558                           postdec2	equ	0xFDD
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8
  7562                           
  7563                           	psect	intcode_body
  7564  0000'                    __pintcode_body:
  7565                           	opt stack 23
  7566  0000'                    int_func:
  7567                           	opt stack 23
  7568  0000' CFE9 F006'         	movff	fsr0l,??_InterruptHandlerHigh+2
  7569  0004' CFEA F007'         	movff	fsr0h,??_InterruptHandlerHigh+3
  7570  0008' CFE1 F008'         	movff	fsr1l,??_InterruptHandlerHigh+4
  7571  000C' CFE2 F009'         	movff	fsr1h,??_InterruptHandlerHigh+5
  7572  0010' CFD9 F00A'         	movff	fsr2l,??_InterruptHandlerHigh+6
  7573  0014' CFDA F00B'         	movff	fsr2h,??_InterruptHandlerHigh+7
  7574  0018' CFF3 F00C'         	movff	prodl,??_InterruptHandlerHigh+8
  7575  001C' CFF4 F00D'         	movff	prodh,??_InterruptHandlerHigh+9
  7576  0020' CFF6 F00E'         	movff	tblptrl,??_InterruptHandlerHigh+10
  7577  0024' CFF7 F00F'         	movff	tblptrh,??_InterruptHandlerHigh+11
  7578  0028' CFF8 F010'         	movff	tblptru,??_InterruptHandlerHigh+12
  7579  002C' CFF5 F011'         	movff	tablat,??_InterruptHandlerHigh+13
  7580                           
  7581                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7582  0030' A2F2               	btfss	intcon,1,c	;volatile
  7583  0032' D00D               	goto	i2l94
  7584                           
  7585                           ;main.c: 36: if (mode==-1) {
  7586  0034' 2801'              	incf	_mode,w,c	;volatile
  7587  0036' A4D8               	btfss	status,2,c
  7588  0038' D003               	goto	i2l3088
  7589                           
  7590                           ;main.c: 38: mode=1;
  7591  003A' 0E01               	movlw	1
  7592  003C' 6E01'              	movwf	_mode,c	;volatile
  7593                           
  7594                           ;main.c: 39: } else if (mode==0) {
  7595  003E' D003               	goto	i2l3092
  7596  0040'                    i2l3088:
  7597  0040' 5001'              	movf	_mode,w,c	;volatile
  7598  0042' A4D8               	btfss	status,2,c
  7599                           
  7600                           ;main.c: 43: mode=-1;
  7601                           
  7602                           ;main.c: 41: } else {
  7603  0044' 6801'              	setf	_mode,c	;volatile
  7604  0046'                    i2l3092:
  7605                           
  7606                           ;main.c: 44: }
  7607                           ;main.c: 46: delay_tenth_s(2);
  7608  0046' 0E02               	movlw	2
  7609  0048' EC00' F000'        	call	i2_delay_tenth_s
  7610                           
  7611                           ;main.c: 47: INTCONbits.INT0IF=0;
  7612  004C' 92F2               	bcf	intcon,1,c	;volatile
  7613  004E'                    i2l94:
  7614  004E' C011' FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7615  0052' C010' FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7616  0056' C00F' FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7617  005A' C00E' FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7618  005E' C00D' FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7619  0062' C00C' FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7620  0066' C00B' FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7621  006A' C00A' FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7622  006E' C009' FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7623  0072' C008' FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7624  0076' C007' FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7625  007A' C006' FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7626  007E' C005' FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7627  0082' C004' FFFA         	movff	??_InterruptHandlerHigh,pclath
  7628  0086' 9200'              	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7629  0088' 0011               	retfie		f
  7630  008A'                    __end_of_InterruptHandlerHigh:
  7631                           	opt stack 0
  7632                           pclatu	equ	0xFFB
  7633                           pclath	equ	0xFFA
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           postinc0	equ	0xFEE
  7642                           fsr0h	equ	0xFEA
  7643                           fsr0l	equ	0xFE9
  7644                           wreg	equ	0xFE8
  7645                           indf1	equ	0xFE7
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           bsr	equ	0xFE0
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656 ;; *************** function i2_delay_tenth_s *****************
  7657 ;; Defined at:
  7658 ;;		line 29 in file "Movement.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  tenth_second    1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7663 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;		None               void
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7673 ;;      Params:         0       0       0       0
  7674 ;;      Locals:         3       0       0       0
  7675 ;;      Temps:          1       0       0       0
  7676 ;;      Totals:         4       0       0       0
  7677 ;;Total ram usage:        4 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_InterruptHandlerHigh
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text32
  7687  0000'                    __ptext32:
  7688                           	opt stack 0
  7689  0000'                    i2_delay_tenth_s:
  7690                           	opt stack 23
  7691                           
  7692                           ;incstack = 0
  7693                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7694  0000' 6E01'              	movwf	i2delay_tenth_s@tenth_seconds,c
  7695                           
  7696                           ;Movement.c: 30: unsigned int i=0;
  7697  0002' 0E00               	movlw	0
  7698  0004' 6E03'              	movwf	i2delay_tenth_s@i+1,c
  7699  0006' 0E00               	movlw	0
  7700  0008' 6E02'              	movwf	i2delay_tenth_s@i,c
  7701                           
  7702                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  7703  000A' 0E00               	movlw	0
  7704  000C' 6E03'              	movwf	i2delay_tenth_s@i+1,c
  7705  000E' 0E01               	movlw	1
  7706  0010' 6E02'              	movwf	i2delay_tenth_s@i,c
  7707  0012' D009               	goto	i2l3066
  7708  0014'                    i2l3062:
  7709                           
  7710                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  7711  0014' 0E82               	movlw	130
  7712  0016' 6E00'              	movwf	??i2_delay_tenth_s& (0+255),c
  7713  0018' 0EDE               	movlw	222
  7714  001A'                    i2u370_47:
  7715  001A' 2EE8               	decfsz	wreg,f,c
  7716  001C' D7FE               	goto	i2u370_47
  7717  001E' 2E00'              	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7718  0020' D7FC               	goto	i2u370_47
  7719  0022' 4A02'              	infsnz	i2delay_tenth_s@i,f,c
  7720  0024' 2A03'              	incf	i2delay_tenth_s@i+1,f,c
  7721  0026'                    i2l3066:
  7722  0026' 5001'              	movf	i2delay_tenth_s@tenth_seconds,w,c
  7723  0028' 0D02               	mullw	2
  7724  002A' 5002'              	movf	i2delay_tenth_s@i,w,c
  7725  002C' 5CF3               	subwf	prodl,w,c
  7726  002E' 5003'              	movf	i2delay_tenth_s@i+1,w,c
  7727  0030' 58F4               	subwfb	prodh,w,c
  7728  0032' A0D8               	btfss	status,0,c
  7729  0034' 0012               	return	
  7730  0036' D7EE               	goto	i2l3062
  7731  0038'                    __end_ofi2_delay_tenth_s:
  7732                           	opt stack 0
  7733                           pclatu	equ	0xFFB
  7734                           pclath	equ	0xFFA
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           intcon	equ	0xFF2
  7742                           postinc0	equ	0xFEE
  7743                           fsr0h	equ	0xFEA
  7744                           fsr0l	equ	0xFE9
  7745                           wreg	equ	0xFE8
  7746                           indf1	equ	0xFE7
  7747                           fsr1h	equ	0xFE2
  7748                           fsr1l	equ	0xFE1
  7749                           bsr	equ	0xFE0
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           pclatu	equ	0xFFB
  7757                           pclath	equ	0xFFA
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           intcon	equ	0xFF2
  7765                           postinc0	equ	0xFEE
  7766                           fsr0h	equ	0xFEA
  7767                           fsr0l	equ	0xFE9
  7768                           wreg	equ	0xFE8
  7769                           indf1	equ	0xFE7
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           bsr	equ	0xFE0
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780                           	psect	rparam
  7781  0000                     pclatu	equ	0xFFB
  7782                           pclath	equ	0xFFA
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           intcon	equ	0xFF2
  7790                           postinc0	equ	0xFEE
  7791                           fsr0h	equ	0xFEA
  7792                           fsr0l	equ	0xFE9
  7793                           wreg	equ	0xFE8
  7794                           indf1	equ	0xFE7
  7795                           fsr1h	equ	0xFE2
  7796                           fsr1l	equ	0xFE1
  7797                           bsr	equ	0xFE0
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           postdec2	equ	0xFDD
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805                           	psect	temp
  7806  0000'                    btemp:
  7807                           	opt stack 0
  7808  0000'                    	ds	1
  7809  0000                     int$flags	set	btemp
  7810                           pclatu	equ	0xFFB
  7811                           pclath	equ	0xFFA
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           intcon	equ	0xFF2
  7819                           postinc0	equ	0xFEE
  7820                           fsr0h	equ	0xFEA
  7821                           fsr0l	equ	0xFE9
  7822                           wreg	equ	0xFE8
  7823                           indf1	equ	0xFE7
  7824                           fsr1h	equ	0xFE2
  7825                           fsr1l	equ	0xFE1
  7826                           bsr	equ	0xFE0
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           fsr2h	equ	0xFDA
  7831                           fsr2l	equ	0xFD9
  7832                           status	equ	0xFD8


Data Sizes:
    Strings     131
    Constant    16
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     87     119
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_13(CODE[12]), STR_11(CODE[16]), STR_9(CODE[12]), STR_7(CODE[16]), 
		 -> STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), main@buf(BANK1[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_12(CODE[20]), STR_10(CODE[18]), ScanWithRange@buf(BANK0[40]), STR_8(CODE[18]), 
		 -> ScanIR@buf(BANK0[40]), STR_6(CODE[15]), STR_5(CODE[17]), STR_4(CODE[18]), 
		 -> STR_3(CODE[17]), main@buf(BANK1[40]), STR_1(CODE[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S350DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S350DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _ScanIR->_sprintf
    _turnRight->_fullSpeedAhead
    _turnRight->_stop
    _turnLeft->_fullSpeedAhead
    _turnLeft->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               278   278      0  111635
                                             77 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1394
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    4092
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       64    57      7   43752
                                             13 BANK0     64    57      7
                         _LCD_String
                            _SendLCD
                            _SetLine
                            ___awdiv
                            _delay_s
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              56    46     10   40528
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4   11264
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   12034
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6648
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3814
                                             56 COMRAM     1     1      0
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2488
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1177
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3241
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1350
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2183
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1306
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     ___awdiv
       ___wmul (ARG)
     _delay_s
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      77       5       74.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C3       3        0.0%
DATA                 0      0     1C3      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 12:45:20 2018

                   ?_grabRightIR 000023                                _i 000000  
                             l99 0000A8                     ___awdiv@sign 00002E  
                             bsr 000FE0              ___wmul@multiplicand 000025  
                    main@Message 0000F0                      ?_LCD_String 000029  
                            l163 0000DC                              l193 000052  
                            l885 000048                              l895 000038  
                    grabLeftIR@i 00002A                              prod 000FF3  
                            wreg 000FE8                     main@MoveTime 000064  
                   main@MoveType 000000                             l2400 000010  
                           l3040 000058                             l4000 0001B8  
                           l2410 000054                             l2404 000018  
                           l2332 000016                             l3052 0000B0  
                           l3044 000060                             l4100 0004C6  
                           l2422 000026                             l2342 000016  
                           l3310 000014                             l4030 0002D0  
                           l4022 000274                             l2432 000036  
                           l2344 00001E                             l4016 00022E  
                           l2426 000002                             l2418 000014  
                           l2354 00003E                             l2346 000022  
                           l2370 00002E                             l2362 00000E  
                           l3402 00002A                             l3322 00003A  
                           l4034 0002E6                             l4026 0002C2  
                           l2380 000026                             l2364 000016  
                           l3500 0002D2                             l3404 00003C  
                           l3324 000042                             l3316 000024  
                           l4060 0003A8                             l4044 00034E  
                           l2366 00001A                             l3414 000074  
                           l3502 0002DE                             l3342 00007A  
                           l3334 000062                             l3326 000046  
                           l4054 000398                             l2376 000014  
                           l2384 000010                             l3504 0002F8  
                           l3424 0000E6                             l3408 000044  
                           l3352 0000B4                             l3360 00001A  
                           l4056 00039E                             l4048 000358  
                           l2394 000054                             l3450 00017A  
                           l3426 00010E                             l3338 00006C  
                           l3370 000052                             l2562 000014  
                           l4066 0003C4                             l2388 000018  
                           l3460 0001D4                             l3436 00013E  
                           l3364 000032                             l3356 000002  
                           l2636 000014                             l4068 0003CA  
                           l4076 000426                             l3470 000202  
                           l3462 0001DE                             l3438 000144  
                           l3382 00001A                             l2566 000026  
                           l4086 00047E                             l3480 000234  
                           l3456 00019C                             l3712 0006C6  
                           l3720 0006DC                             l3704 00060E  
                           l3640 000350                             l4096 0004C4  
                           l4088 000484                             l3386 000032  
                           l3378 000002                             l3492 000276  
                           l3396 00000E                             l3660 000416  
                           l3644 00039E                             l3636 000302  
                           l3494 00027C                             l3486 000258  
                           l3478 000228                             l3902 0003C4  
                           l3910 0003F2                             l3832 00019E  
                           l3752 00078C                             l3736 000738  
                           l3906 0003EE                             l3826 00019A  
                           l3770 000824                             l3690 0005D0  
                           l3682 000518                             l3844 00021E  
                           l3852 000226                             l3676 000514  
                           l3668 0004CE                             l3862 0002A4  
                           l3870 0002D2                             l3950 0000AE  
                           l3866 0002CE                             l3786 0008AC  
                           l3884 000352                             l3892 00035A  
                           l3984 000170                             STR_1 000069  
                           STR_2 000059                             STR_3 000048  
                           STR_4 000025                             STR_5 000037  
                           STR_6 000079                             STR_7 000000  
                           STR_8 000002                             STR_9 000088  
                           u1405 000018                             _LATB 000F8A  
                           u1415 000036                             u1425 000044  
                           u1505 00000A                             u1506 00000C  
                           u1435 000064                             u1445 000072  
                           u1455 0000A2                             u1720 000026  
                           u1730 000056                             u1395 00000A  
                           u2614 000074                             u1727 00001C  
                           u1655 000020                             u2615 000070  
                           u3407 000012                             u2624 0000D0  
                           u3280 000318                             u1737 00004C  
                           u2625 0000CC                             u3417 000028  
                           u3290 00032C                             u3282 00031A  
                           u2635 00012A                             u3507 00007A  
                           u3427 000038                             u3292 00032E  
                           u1685 000020                             u3517 000092  
                           u3437 000046                             u3607 00004C  
                           u3527 000156                             u3447 000054  
                           u3617 000048                             u3537 00016E  
                           u3457 000066                             u3627 000048  
                           u3547 00023A                             u3467 000078  
                           u3387 000104                             u3637 00001A  
                           u3557 000252                             u1965 000010  
                           u3477 00008E                             u3397 00011C  
                           u1966 000012                             u3647 000028  
                           u3567 00001A                             u3487 0000A2  
                           u3657 000030                             u3577 000044  
                           u1985 000022                             u3497 0000B4  
                           u1986 000024                             u3667 000018  
                           u3587 00005C                             u3677 000028  
                           u3597 00004C                             u3687 0000BE  
                           u3697 000004                             i1l86 000076  
                           i2l94 00004E                       ScanIR@Move 000011  
                           _main 000000                             _mode 000001  
                  main@ScanAngle 000053                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 000000  
                           _stop 000000                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 000000*                  delay_s@seconds 000024  
                   ___param_bank 000010                  i2_delay_tenth_s 000000  
                __end_of_SendLCD 000030                  __end_of_SetLine 000030  
             ScanWithRange@F3891 00000C               ScanWithRange@F3887 000004  
             ScanWithRange@F3889 000008                      ScanIR@F3878 000000  
                          ?_main 000000                  __end_of___awdiv 000084  
                          STR_10 000002                            STR_11 000000  
                          STR_12 000011                            STR_13 000000  
                          ?_stop 000002                  ___awdiv@divisor 00002B  
                          _PDC0H 000F78                            _PDC1H 000F76  
                          _PDC0L 000F79                            _PDC1L 000F77  
                          _T5CON 000FB7                     grabRightIR@i 00002A  
                __end_of___lwdiv 000052                  __end_of___lwmod 000042  
                ___awdiv@counter 00002D                            _RCREG 000FAE  
                          _E_TOG 000000                            _SPBRG 000FAF  
                          _TRISC 000F94                            _TXREG 000FAD  
                __end_of_delay_s 000038                  __end_of_initLCD 0000BC  
                __end_of_dpowers 00000B                  __end_of_isdigit 00001E  
                          main@i 000055                            tablat 000FF5  
                          status 000FD8              __size_of_LCD_String 000000  
                __end_of_sprintf 000306           __size_of_ScanWithRange 000000  
                __initialization 000000                     __end_of_main 0004E8  
                   __end_of_stop 000094                   delay_tenth_s@i 000025  
                 __CFG_OSC$IRCIO 000000                 LCD_String@string 000029  
           __end_of_enableSensor 000026              VerifySignal@hexByte 00002C  
                         ??_main 00004D                           ??_stop 000038  
                  __activetblptr 000002                    ?_initMotorPWM 000000  
                         ?_E_TOG 000000                     ?_setMotorPWM 000031  
         __size_of_fullSpeedBack 000000                 ___awdiv@dividend 000029  
__end_of_DirectionFoundThreshold 00000F                           i1l3080 000074  
                         i1l3078 000072                           i2l3062 000014  
                         i2l3066 000026                           i2l3092 000046  
                 __CFG_WDTEN$OFF 000000                           i2l3088 000040  
          __end_of_delay_tenth_s 000038                           _LCDout 000000  
                    SendLCD@Byte 000028  __end_of_DirectionFoundTolerance 000011  
                         _OSCCON 000FD3                           _PTCON0 000F7F  
                         _PTCON1 000F7E                           _SPBRGH 000FB0  
                         _PTPERH 000F7A                           _PTPERL 000F7B  
        __end_ofi2_delay_tenth_s 000038                      SendLCD@type 000027  
                      ??_SendLCD 000028                           _ScanIR 000000  
                      ??_SetLine 000029                           ___wmul 000000  
                      ??___awdiv 00002D                 __end_of_initRFID 00001C  
                      ??___lwdiv 000027                        ??___lwmod 00002E  
                         _initIR 000000             __size_of_grabRightIR 000000  
                         clear_0 000012                 ___awdiv@quotient 00002F  
                      ??_delay_s 000023                           main@mL 000000  
                         main@mR 000009                   ??_initMotorPWM 000023  
                      ??_initLCD 000029                    _ScanWithRange 000000  
                      ??_isdigit 000023     i2delay_tenth_s@tenth_seconds 000001  
                   __mediumconst 000000*                          tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         stop@mL 000002                           stop@mR 000004  
                      ??_sprintf 000000                 __end_of_turnLeft 00004E  
                fullSpeedBack@mL 000006                  fullSpeedBack@mR 000008  
                     __accesstop 000000*         __end_of__initialization 00001C  
                  ___rparam_used 000001                      SetLine@line 000029  
                  __end_of_E_TOG 00000E                   __pcstackCOMRAM 000000  
                  _fullSpeedBack 000000                     ??_LCD_String 00002B  
                 ?_ScanWithRange 00000D             VerifySignal@checksum 00002B  
                        ??_E_TOG 000023    __size_of_InterruptHandlerHigh 000000  
    __end_of_InterruptHandlerLow 0000BE       delay_tenth_s@tenth_seconds 000024  
                   sprintf@width 00000A                       __pbssBANK0 000000  
                     __pbssBANK1 000000                          ?_LCDout 000000  
               ?i2_delay_tenth_s 000000               __end_of_LCD_String 00005E  
                        ?_ScanIR 00000D                   ?_fullSpeedBack 000006  
          __size_of_enableSensor 000000                          ?___wmul 000023  
            grabLeftIR@IR_signal 000028                          _CAP1CON 000F63  
                        _CAP2CON 000F62                          ?_initIR 000000  
        __size_of_fullSpeedAhead 000000                       _grabLeftIR 000000  
                        _PWMCON0 000F6F                          _PWMCON1 000F6E  
                      ?_initRFID 000000             __size_of_setMotorPWM 000000  
                __size_of_LCDout 000000                     _enableSensor 000000  
             __size_of_turnRight 000000             __end_of_initMotorPWM 000032  
                        _SendLCD 000000                          __Hparam 000000  
                        _SetLine 000000                          __Lparam 000000  
                __size_of_ScanIR 000000                          ___awdiv 000000  
                __size_of___wmul 000000                          ___lwdiv 000000  
                        ___lwmod 000000                     __psmallconst 000000  
                __size_of_initIR 000000                          __pcinit 000000  
                ??_ScanWithRange 000014                          _delay_s 000000  
                        __ramtop 000000*                       ?_turnLeft 000006  
                        __ptext0 000000                          __ptext1 000000  
                        __ptext2 000000                          __ptext3 000000  
                        __ptext4 000000                          __ptext5 000000  
                        __ptext6 000000                          __ptext7 000000  
                        __ptext8 000000                          __ptext9 000000  
                        _initLCD 000000                          _dpowers 000001  
                        _isdigit 000000                     LCDout@number 000026  
                  ?_VerifySignal 000023                          main@buf 0000C8  
                        _sprintf 000000                   __pintcode_body 000000  
           end_of_initialization 00001C               setMotorPWM@PWMduty 000000  
                     ??_initRFID 000023                    __Lmediumconst 000000* 
                        int_func 000000               ScanIR@SensorResult 000041  
                ??_fullSpeedBack 000039                        _RFID_Read 000004  
                      _RCSTAbits 000FAB                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     ??_turnLeft 000039                __end_of_turnRight 00004E  
                    ?_grabLeftIR 000023                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
                 ??_VerifySignal 000025                 fullSpeedAhead@mL 000002  
               fullSpeedAhead@mR 000004                   __end_of_LCDout 0000C6  
                      _TXSTAbits 000FAC                        ScanIR@buf 000019  
     ScanWithRange@MoveTimeEntry 000012                    ??_grabRightIR 000025  
                 __end_of_ScanIR 0003F6                   _fullSpeedAhead 000000  
        _DirectionFoundThreshold 00000D                   _ReceivedString 000010  
                 __end_of___wmul 000026                      _BAUDCONbits 000FAA  
        _DirectionFoundTolerance 00000F                   __end_of_initIR 000022  
         __size_of_delay_tenth_s 000000              start_initialization 000000  
             VerifySignal@Signal 000023            __size_of_initMotorPWM 000000  
                       ??_LCDout 000023     __end_of_InterruptHandlerHigh 00008A  
                       ??_ScanIR 000017           __end_of_fullSpeedAhead 000070  
            __size_of_grabLeftIR 000000                         ??___wmul 000027  
                       ??_initIR 000023              __end_of_grabRightIR 000072  
                   _initMotorPWM 000000                      __pbssCOMRAM 000000  
                  __pcstackBANK0 000000                    __pcstackBANK1 000000  
                  __pcstackBANK2 000000                     _isdigit$1931 000024  
   __size_of_InterruptHandlerLow 000000                    _delay_tenth_s 000000  
                    sprintf@flag 000009                      sprintf@prec 000006  
              __size_of_initRFID 000000                         ?_SendLCD 000027  
                       ?_SetLine 000000                 ___lwdiv@dividend 000023  
                ?_fullSpeedAhead 000002                        __pintcode 000000  
           __end_of_VerifySignal 0000B4                         ?___awdiv 000029  
       __size_ofi2_delay_tenth_s 000000                         ?___lwdiv 000023  
                       ?___lwmod 00002A     __end_of_ClearSignalThreshold 00000D  
                    __pintcodelo 000000                         ?_delay_s 000000  
                       _CAP1BUFH 000F69                         _CAP1BUFL 000F68  
                       _CAP2BUFH 000F67                         _CAP2BUFL 000F66  
                       ?_initLCD 000000                 main@SensorResult 00004F  
                    __smallconst 000000*                  __size_of_E_TOG 000000  
                       ?_isdigit 000000                __size_of_turnLeft 000000  
     ScanWithRange@SensorResultC 000045       ScanWithRange@SensorResultL 000041  
     ScanWithRange@SensorResultR 000049                    ??_setMotorPWM 000033  
               ___lwdiv@quotient 000027                         ?_sprintf 00002F  
                 ?_delay_tenth_s 000000                   ___wmul@product 000027  
                       _LATAbits 000F89                         _LATCbits 000F8B  
                       _LATDbits 000F8C                         _LATEbits 000F8D  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                    turnRight@mL 000006                      turnRight@mR 000008  
                       _PIR1bits 000F9E                         i2u370_47 00001A  
                       _RCONbits 000FD0                        main@F3890 000000  
                    _grabRightIR 000000             grabRightIR@IR_signal 000028  
              ___wmul@multiplier 000023            __end_of_ScanWithRange 0008B0  
                   setMotorPWM@m 000031             _InterruptHandlerHigh 000000  
                       ScanIR@mL 00000D                         ScanIR@mR 00000F  
                   ??_grabLeftIR 000025                        _turnRight 000000  
                 ScanIR@MoveTime 000013                   ScanIR@MoveType 000015  
               ScanWithRange@buf 000016              __end_of_setMotorPWM 00013A  
                       __Hrparam 000000*                __size_of_SendLCD 000000  
                       __Lrparam 000000*           __end_of_fullSpeedBack 00003A  
               __size_of_SetLine 000000               __end_of_grabLeftIR 000072  
               __size_of___awdiv 000000                 __size_of___lwdiv 000000  
               __size_of___lwmod 000000                       _ANSEL0bits 000FB8  
               __size_of_delay_s 000000            ?_InterruptHandlerHigh 000000  
              ??i2_delay_tenth_s 000000                       sprintf@val 000007  
               __size_of_initLCD 000000                 __size_of_isdigit 000000  
                ___lwdiv@divisor 000025                  ___lwdiv@counter 000029  
                     ?_turnRight 000006                         __ptext10 000000  
                       __ptext11 000000                         __ptext20 000000  
                       __ptext12 000000                         __ptext21 000000  
                       __ptext13 000000                         __ptext22 000000  
                       __ptext14 000000                         __ptext23 000000  
                       __ptext15 000000                         __ptext32 000000  
                       __ptext24 000000                         __ptext16 000000  
                       __ptext25 000000                         __ptext17 000000  
                       __ptext26 000000                         __ptext18 000000  
                       __ptext27 000000                         __ptext19 000000  
                       __ptext28 000000                         __ptext29 000000  
                ??_delay_tenth_s 000023                 __size_of_sprintf 000000  
                       _initRFID 000000             _ClearSignalThreshold 00000B  
                  __size_of_main 000000        ScanWithRange@ResultFalseC 00003F  
             main@DirectionFound 000054        ScanWithRange@ResultFalseL 00003E  
      ScanWithRange@ResultFalseR 000040                    __size_of_stop 000000  
                     turnLeft@mL 000006                       turnLeft@mR 000008  
          __size_of_VerifySignal 000000                         delay_s@i 000025  
                       int$flags 000000                         main@Move 000056  
            _InterruptHandlerLow 000000                       _LCD_String 000000  
                       _turnLeft 000000                  ScanWithRange@mL 00000D  
                ScanWithRange@mR 00000F               enableSensor@sensor 000024  
             enableSensor@status 000023                    VerifySignal@i 00002E  
                     _INTCONbits 000FF2                         isdigit@c 000025  
     ScanWithRange@tenth_seconds 000011                      _setMotorPWM 000000  
                   _VerifySignal 000000                         intlevel1 000000* 
                       intlevel2 000000*                       sprintf@ap 000004  
                      sprintf@sp 00002F             ?_InterruptHandlerLow 000000  
                  ?_enableSensor 000023                 ___lwmod@dividend 00002A  
               ??_fullSpeedAhead 000038                       _OSCCONbits 000FD3  
         ??_InterruptHandlerHigh 000004                         sprintf@c 00000C  
                       sprintf@f 000031                  ___lwmod@divisor 00002C  
                ___lwmod@counter 00002E                      ??_turnRight 000039  
          ??_InterruptHandlerLow 000012                   ??_enableSensor 000024  
               i2delay_tenth_s@i 000002  
