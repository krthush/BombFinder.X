

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 20:10:18 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     _ANSEL0bits	set	4024
    32  0000                     _BAUDCONbits	set	4010
    33  0000                     _CAP1BUFH	set	3945
    34  0000                     _CAP1BUFL	set	3944
    35  0000                     _CAP1CON	set	3939
    36  0000                     _CAP2BUFH	set	3943
    37  0000                     _CAP2BUFL	set	3942
    38  0000                     _CAP2CON	set	3938
    39  0000                     _INTCONbits	set	4082
    40  0000                     _IPR1bits	set	3999
    41  0000                     _LATAbits	set	3977
    42  0000                     _LATB	set	3978
    43  0000                     _LATCbits	set	3979
    44  0000                     _LATDbits	set	3980
    45  0000                     _LATEbits	set	3981
    46  0000                     _OSCCON	set	4051
    47  0000                     _OSCCONbits	set	4051
    48  0000                     _PIE1bits	set	3997
    49  0000                     _PIR1bits	set	3998
    50  0000                     _PTCON0	set	3967
    51  0000                     _PTCON1	set	3966
    52  0000                     _PTPERH	set	3962
    53  0000                     _PTPERL	set	3963
    54  0000                     _PWMCON0	set	3951
    55  0000                     _PWMCON1	set	3950
    56  0000                     _RCONbits	set	4048
    57  0000                     _RCREG	set	4014
    58  0000                     _RCSTAbits	set	4011
    59  0000                     _SPBRG	set	4015
    60  0000                     _SPBRGH	set	4016
    61  0000                     _T5CON	set	4023
    62  0000                     _TRISAbits	set	3986
    63  0000                     _TRISBbits	set	3987
    64  0000                     _TRISC	set	3988
    65  0000                     _TRISCbits	set	3988
    66  0000                     _TRISDbits	set	3989
    67  0000                     _TRISEbits	set	3990
    68  0000                     _TXREG	set	4013
    69  0000                     _TXSTAbits	set	4012
    70  0000                     _PDC0H	set	3960
    71  0000                     _PDC0L	set	3961
    72  0000                     _PDC1H	set	3958
    73  0000                     _PDC1L	set	3959
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  000F88                     __pcinit:
    79                           	opt stack 0
    80  000F88                     start_initialization:
    81                           	opt stack 0
    82  000F88                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (17 bytes)
    86  000F88  EE00  F03F         	lfsr	0,__pbssCOMRAM
    87  000F8C  0E11               	movlw	17
    88  000F8E                     clear_0:
    89  000F8E  6AEE               	clrf	postinc0,c
    90  000F90  06E8               	decf	wreg,f,c
    91  000F92  E1FD               	bnz	clear_0
    92  000F94                     end_of_initialization:
    93                           	opt stack 0
    94  000F94                     __end_of__initialization:
    95                           	opt stack 0
    96  000F94  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    97  000F96  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    98  000F98  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  000F9A  6EF8               	movwf	tblptru,c
   100  000F9C  0100               	movlb	0
   101  000F9E  EF2D  F004         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssCOMRAM
   107  00003F                     __pbssCOMRAM:
   108                           	opt stack 0
   109  00003F                     _ReceivedString:
   110                           	opt stack 0
   111  00003F                     	ds	16
   112  00004F                     _i:
   113                           	opt stack 0
   114  00004F                     	ds	1
   115                           tblptru	equ	0xFF8
   116                           postinc0	equ	0xFEE
   117                           wreg	equ	0xFE8
   118                           
   119                           	psect	cstackBANK0
   120  000060                     __pcstackBANK0:
   121                           	opt stack 0
   122  000060                     ScanWithRange@ResultFalseL:
   123                           	opt stack 0
   124                           
   125                           ; 1 bytes @ 0x0
   126  000060                     	ds	1
   127  000061                     ScanWithRange@ResultFalseC:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x1
   131  000061                     	ds	1
   132  000062                     ScanWithRange@ResultFalseR:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x2
   136  000062                     	ds	1
   137  000063                     ScanWithRange@ClearSignalTolerance:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x3
   141  000063                     	ds	2
   142  000065                     ScanWithRange@DirectionFoundLimit:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x5
   146  000065                     	ds	2
   147  000067                     ScanWithRange@DirectionFoundTolerance:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x7
   151  000067                     	ds	2
   152  000069                     ScanWithRange@SensorResultL:
   153                           	opt stack 0
   154                           
   155                           ; 4 bytes @ 0x9
   156  000069                     	ds	4
   157  00006D                     ScanWithRange@SensorResultC:
   158                           	opt stack 0
   159                           
   160                           ; 4 bytes @ 0xD
   161  00006D                     	ds	4
   162  000071                     ScanWithRange@SensorResultR:
   163                           	opt stack 0
   164                           
   165                           ; 4 bytes @ 0x11
   166  000071                     	ds	4
   167  000075                     main@test:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x15
   171  000075                     	ds	2
   172  000077                     main@i:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x17
   176  000077                     	ds	1
   177  000078                     main@ScanAngle:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x18
   181  000078                     	ds	1
   182  000079                     main@mode:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x19
   186  000079                     	ds	1
   187  00007A                     main@DirectionFound:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1A
   191  00007A                     	ds	1
   192  00007B                     main@mL:
   193                           	opt stack 0
   194                           
   195                           ; 9 bytes @ 0x1B
   196  00007B                     	ds	9
   197  000084                     main@mR:
   198                           	opt stack 0
   199                           
   200                           ; 9 bytes @ 0x24
   201  000084                     	ds	9
   202                           tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ??_InterruptHandlerHigh:
   210  000001                     
   211                           ; 0 bytes @ 0x0
   212  000001                     	ds	14
   213  00000F                     ??_delay_s:
   214  00000F                     ??_delay_tenth_s:
   215  00000F                     ?_grabLeftIR:
   216                           	opt stack 0
   217  00000F                     ?_grabRightIR:
   218                           	opt stack 0
   219  00000F                     ?___wmul:
   220                           	opt stack 0
   221  00000F                     enableSensor@status:
   222                           	opt stack 0
   223  00000F                     ___wmul@multiplier:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0xE
   227  00000F                     	ds	1
   228  000010                     delay_s@seconds:
   229                           	opt stack 0
   230  000010                     delay_tenth_s@tenth_seconds:
   231                           	opt stack 0
   232  000010                     enableSensor@sensor:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xF
   236  000010                     	ds	1
   237  000011                     ??_grabLeftIR:
   238  000011                     ??_grabRightIR:
   239  000011                     delay_s@i:
   240                           	opt stack 0
   241  000011                     delay_tenth_s@i:
   242                           	opt stack 0
   243  000011                     ___wmul@multiplicand:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x10
   247  000011                     	ds	2
   248  000013                     ___wmul@product:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x12
   252  000013                     	ds	1
   253  000014                     grabRightIR@IR_signal:
   254                           	opt stack 0
   255  000014                     grabLeftIR@IR_signal:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x13
   259  000014                     	ds	1
   260  000015                     ?___awdiv:
   261                           	opt stack 0
   262  000015                     ___awdiv@dividend:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x14
   266  000015                     	ds	1
   267  000016                     grabRightIR@i:
   268                           	opt stack 0
   269  000016                     grabLeftIR@i:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x15
   273  000016                     	ds	1
   274  000017                     ___awdiv@divisor:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x16
   278  000017                     	ds	2
   279  000019                     ___awdiv@counter:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x18
   283  000019                     	ds	1
   284  00001A                     ___awdiv@sign:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x19
   288  00001A                     	ds	1
   289  00001B                     ___awdiv@quotient:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x1A
   293  00001B                     	ds	2
   294  00001D                     setMotorPWM@m:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x1C
   298  00001D                     	ds	2
   299  00001F                     ??_setMotorPWM:
   300                           
   301                           ; 0 bytes @ 0x1E
   302  00001F                     	ds	5
   303  000024                     setMotorPWM@PWMduty:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x23
   307  000024                     	ds	2
   308  000026                     stop@mL:
   309                           	opt stack 0
   310  000026                     fullSpeedAhead@mL:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x25
   314  000026                     	ds	2
   315  000028                     stop@mR:
   316                           	opt stack 0
   317  000028                     fullSpeedAhead@mR:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x27
   321  000028                     	ds	2
   322  00002A                     
   323                           ; 0 bytes @ 0x29
   324  00002A                     	ds	1
   325  00002B                     turnLeft@mL:
   326                           	opt stack 0
   327  00002B                     turnRight@mL:
   328                           	opt stack 0
   329  00002B                     fullSpeedBack@mL:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x2A
   333  00002B                     	ds	2
   334  00002D                     turnLeft@mR:
   335                           	opt stack 0
   336  00002D                     turnRight@mR:
   337                           	opt stack 0
   338  00002D                     fullSpeedBack@mR:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x2C
   342  00002D                     	ds	2
   343  00002F                     ScanIR@mL:
   344                           	opt stack 0
   345  00002F                     ScanWithRange@mL:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x2E
   349  00002F                     	ds	2
   350  000031                     ScanIR@mR:
   351                           	opt stack 0
   352  000031                     ScanWithRange@mR:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x30
   356  000031                     	ds	2
   357  000033                     ??_ScanIR:
   358  000033                     ScanWithRange@tenth_seconds:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x32
   362  000033                     	ds	1
   363  000034                     ??_ScanWithRange:
   364                           
   365                           ; 0 bytes @ 0x33
   366  000034                     	ds	1
   367  000035                     ScanIR@ClearSignalTolerance:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x34
   371  000035                     	ds	2
   372  000037                     ScanIR@DirectionFoundLimit:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x36
   376  000037                     	ds	2
   377  000039                     ScanIR@DirectionFoundTolerance:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x38
   381  000039                     	ds	2
   382  00003B                     ScanIR@SensorResult:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x3A
   386  00003B                     	ds	4
   387  00003F                     tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           ; 0 bytes @ 0x3E
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 29 in file "main.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  PathTaken     100    0        unsigned char [100]
   402 ;;  Message        10    0        unsigned char [10]
   403 ;;  mR              9   36[BANK0 ] struct DC_motor
   404 ;;  mL              9   27[BANK0 ] struct DC_motor
   405 ;;  SignalStreng    3    0        unsigned char [3]
   406 ;;  test            2   21[BANK0 ] unsigned int 
   407 ;;  DirectionFou    1   26[BANK0 ] unsigned char 
   408 ;;  mode            1   25[BANK0 ] unsigned char 
   409 ;;  ScanAngle       1   24[BANK0 ] unsigned char 
   410 ;;  i               1   23[BANK0 ] unsigned char 
   411 ;; Return value:  Size  Location     Type
   412 ;;		None               void
   413 ;; Registers used:
   414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : 0/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   420 ;;      Params:         0       0       0       0
   421 ;;      Locals:         0      24       0       0
   422 ;;      Temps:          0       0       0       0
   423 ;;      Totals:         0      24       0       0
   424 ;;Total ram usage:       24 bytes
   425 ;; Hardware stack levels required when called:    6
   426 ;; This function calls:
   427 ;;		_ScanIR
   428 ;;		_ScanWithRange
   429 ;;		_delay_s
   430 ;;		_enableSensor
   431 ;;		_fullSpeedAhead
   432 ;;		_fullSpeedBack
   433 ;;		_initIR
   434 ;;		_initMotorPWM
   435 ;;		_stop
   436 ;; This function is called by:
   437 ;;		Startup code after reset
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           	psect	text0
   442  00085A                     __ptext0:
   443                           	opt stack 0
   444  00085A                     _main:
   445                           	opt stack 25
   446                           
   447                           ;main.c: 32: unsigned char Message[10];
   448                           ;main.c: 33: unsigned char i=0;
   449                           
   450                           ;incstack = 0
   451  00085A  0E00               	movlw	0
   452  00085C  0100               	movlb	0	; () banked
   453  00085E  6F77               	movwf	main@i& (0+255),b
   454                           
   455                           ;main.c: 34: unsigned char mode=0;
   456  000860  0E00               	movlw	0
   457  000862  0100               	movlb	0	; () banked
   458  000864  6F79               	movwf	main@mode& (0+255),b
   459                           
   460                           ;main.c: 35: char DirectionFound=0;
   461  000866  0E00               	movlw	0
   462  000868  0100               	movlb	0	; () banked
   463  00086A  6F7A               	movwf	main@DirectionFound& (0+255),b
   464                           
   465                           ;main.c: 36: unsigned char SignalStrength[3];
   466                           ;main.c: 37: char PathTaken[100];
   467                           ;main.c: 38: unsigned int test=0;
   468  00086C  0E00               	movlw	0
   469  00086E  0100               	movlb	0	; () banked
   470  000870  6F76               	movwf	(main@test+1)& (0+255),b
   471  000872  0E00               	movlw	0
   472  000874  6F75               	movwf	main@test& (0+255),b
   473                           
   474                           ;main.c: 40: unsigned char ScanAngle=6;
   475  000876  0E06               	movlw	6
   476  000878  0100               	movlb	0	; () banked
   477  00087A  6F78               	movwf	main@ScanAngle& (0+255),b
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 43: INTCONbits.GIEH = 1;
   481  00087C  8EF2               	bsf	intcon,7,c	;volatile
   482                           
   483                           ; BSR set to: 0
   484                           ;main.c: 44: RCONbits.IPEN = 1;
   485  00087E  8ED0               	bsf	4048,7,c	;volatile
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 45: INTCONbits.GIEL = 1;
   489  000880  8CF2               	bsf	intcon,6,c	;volatile
   490                           
   491                           ; BSR set to: 0
   492                           ;main.c: 46: INTCONbits.INT0IE = 1;
   493  000882  88F2               	bsf	intcon,4,c	;volatile
   494                           
   495                           ; BSR set to: 0
   496                           ;main.c: 47: INTCONbits.PEIE = 1;
   497  000884  8CF2               	bsf	intcon,6,c	;volatile
   498                           
   499                           ; BSR set to: 0
   500                           ;main.c: 49: IPR1bits.RCIP=1;
   501  000886  8A9F               	bsf	3999,5,c	;volatile
   502                           
   503                           ; BSR set to: 0
   504                           ;main.c: 50: PIE1bits.RCIE=1;
   505  000888  8A9D               	bsf	3997,5,c	;volatile
   506                           
   507                           ;main.c: 53: struct DC_motor mL, mR;
   508                           ;main.c: 54: mL.power=0;
   509  00088A  0E00               	movlw	0
   510  00088C  0100               	movlb	0	; () banked
   511  00088E  6F7B               	movwf	main@mL& (0+255),b
   512                           
   513                           ;main.c: 55: mL.direction=1;
   514  000890  0E01               	movlw	1
   515  000892  0100               	movlb	0	; () banked
   516  000894  6F7C               	movwf	(main@mL+1)& (0+255),b
   517                           
   518                           ; BSR set to: 0
   519                           ;main.c: 56: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   520  000896  0E79               	movlw	121
   521  000898  0100               	movlb	0	; () banked
   522  00089A  6F7D               	movwf	(main@mL+2)& (0+255),b
   523  00089C  0E0F               	movlw	15
   524  00089E  0100               	movlb	0	; () banked
   525  0008A0  6F7E               	movwf	(main@mL+3)& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 57: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   529  0008A2  0E78               	movlw	120
   530  0008A4  0100               	movlb	0	; () banked
   531  0008A6  6F7F               	movwf	(main@mL+4)& (0+255),b
   532  0008A8  0E0F               	movlw	15
   533  0008AA  0100               	movlb	0	; () banked
   534  0008AC  6F80               	movwf	(main@mL+5)& (0+255),b
   535                           
   536                           ;main.c: 58: mL.dir_pin=0;
   537  0008AE  0E00               	movlw	0
   538  0008B0  0100               	movlb	0	; () banked
   539  0008B2  6F81               	movwf	(main@mL+6)& (0+255),b
   540                           
   541                           ;main.c: 59: mL.PWMperiod=199;
   542  0008B4  0E00               	movlw	0
   543  0008B6  0100               	movlb	0	; () banked
   544  0008B8  6F83               	movwf	(main@mL+8)& (0+255),b
   545  0008BA  0EC7               	movlw	199
   546  0008BC  6F82               	movwf	(main@mL+7)& (0+255),b
   547                           
   548                           ;main.c: 61: mR.power=0;
   549  0008BE  0E00               	movlw	0
   550  0008C0  0100               	movlb	0	; () banked
   551  0008C2  6F84               	movwf	main@mR& (0+255),b
   552                           
   553                           ;main.c: 62: mR.direction=1;
   554  0008C4  0E01               	movlw	1
   555  0008C6  0100               	movlb	0	; () banked
   556  0008C8  6F85               	movwf	(main@mR+1)& (0+255),b
   557                           
   558                           ; BSR set to: 0
   559                           ;main.c: 63: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   560  0008CA  0E77               	movlw	119
   561  0008CC  0100               	movlb	0	; () banked
   562  0008CE  6F86               	movwf	(main@mR+2)& (0+255),b
   563  0008D0  0E0F               	movlw	15
   564  0008D2  0100               	movlb	0	; () banked
   565  0008D4  6F87               	movwf	(main@mR+3)& (0+255),b
   566                           
   567                           ; BSR set to: 0
   568                           ;main.c: 64: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   569  0008D6  0E76               	movlw	118
   570  0008D8  0100               	movlb	0	; () banked
   571  0008DA  6F88               	movwf	(main@mR+4)& (0+255),b
   572  0008DC  0E0F               	movlw	15
   573  0008DE  0100               	movlb	0	; () banked
   574  0008E0  6F89               	movwf	(main@mR+5)& (0+255),b
   575                           
   576                           ;main.c: 65: mR.dir_pin=2;
   577  0008E2  0E02               	movlw	2
   578  0008E4  0100               	movlb	0	; () banked
   579  0008E6  6F8A               	movwf	(main@mR+6)& (0+255),b
   580                           
   581                           ;main.c: 66: mR.PWMperiod=199;
   582  0008E8  0E00               	movlw	0
   583  0008EA  0100               	movlb	0	; () banked
   584  0008EC  6F8C               	movwf	(main@mR+8)& (0+255),b
   585  0008EE  0EC7               	movlw	199
   586  0008F0  6F8B               	movwf	(main@mR+7)& (0+255),b
   587                           
   588                           ;main.c: 68: OSCCON = 0x72;
   589  0008F2  0E72               	movlw	114
   590  0008F4  6ED3               	movwf	4051,c	;volatile
   591  0008F6                     l55:
   592  0008F6  B4D3               	btfsc	4051,2,c	;volatile
   593  0008F8  D07B               	goto	l2677
   594  0008FA  D7FD               	goto	l55
   595  0008FC                     l2635:
   596                           
   597                           ;main.c: 76: initMotorPWM();
   598  0008FC  EC74  F007         	call	_initMotorPWM	;wreg free
   599                           
   600                           ;main.c: 78: initIR();
   601  000900  ECB3  F007         	call	_initIR	;wreg free
   602                           
   603                           ;main.c: 82: fullSpeedAhead(&mL, &mR);
   604  000904  0E7B               	movlw	low main@mL
   605  000906  6E26               	movwf	fullSpeedAhead@mL,c
   606  000908  0E00               	movlw	high main@mL
   607  00090A  6E27               	movwf	fullSpeedAhead@mL+1,c
   608  00090C  0E84               	movlw	low main@mR
   609  00090E  6E28               	movwf	fullSpeedAhead@mR,c
   610  000910  0E00               	movlw	high main@mR
   611  000912  6E29               	movwf	fullSpeedAhead@mR+1,c
   612  000914  EC9F  F006         	call	_fullSpeedAhead	;wreg free
   613                           
   614                           ;main.c: 83: delay_s(1);
   615  000918  0E01               	movlw	1
   616  00091A  EC21  F007         	call	_delay_s
   617                           
   618                           ;main.c: 84: stop(&mL, &mR);
   619  00091E  0E7B               	movlw	low main@mL
   620  000920  6E26               	movwf	stop@mL,c
   621  000922  0E00               	movlw	high main@mL
   622  000924  6E27               	movwf	stop@mL+1,c
   623  000926  0E84               	movlw	low main@mR
   624  000928  6E28               	movwf	stop@mR,c
   625  00092A  0E00               	movlw	high main@mR
   626  00092C  6E29               	movwf	stop@mR+1,c
   627  00092E  EC9F  F005         	call	_stop	;wreg free
   628                           
   629                           ;main.c: 85: fullSpeedBack(&mL, &mR);
   630  000932  0E7B               	movlw	low main@mL
   631  000934  6E2B               	movwf	fullSpeedBack@mL,c
   632  000936  0E00               	movlw	high main@mL
   633  000938  6E2C               	movwf	fullSpeedBack@mL+1,c
   634  00093A  0E84               	movlw	low main@mR
   635  00093C  6E2D               	movwf	fullSpeedBack@mR,c
   636  00093E  0E00               	movlw	high main@mR
   637  000940  6E2E               	movwf	fullSpeedBack@mR+1,c
   638  000942  EC59  F007         	call	_fullSpeedBack	;wreg free
   639                           
   640                           ;main.c: 86: delay_s(1);
   641  000946  0E01               	movlw	1
   642  000948  EC21  F007         	call	_delay_s
   643                           
   644                           ;main.c: 87: stop(&mL, &mR);
   645  00094C  0E7B               	movlw	low main@mL
   646  00094E  6E26               	movwf	stop@mL,c
   647  000950  0E00               	movlw	high main@mL
   648  000952  6E27               	movwf	stop@mL+1,c
   649  000954  0E84               	movlw	low main@mR
   650  000956  6E28               	movwf	stop@mR,c
   651  000958  0E00               	movlw	high main@mR
   652  00095A  6E29               	movwf	stop@mR+1,c
   653  00095C  EC9F  F005         	call	_stop	;wreg free
   654                           
   655                           ;main.c: 89: enableSensor(0, 1);
   656  000960  0E01               	movlw	1
   657  000962  6E0F               	movwf	enableSensor@status,c
   658  000964  0E00               	movlw	0
   659  000966  EC8D  F007         	call	_enableSensor
   660                           
   661                           ;main.c: 90: enableSensor(1, 1);
   662  00096A  0E01               	movlw	1
   663  00096C  6E0F               	movwf	enableSensor@status,c
   664  00096E  0E01               	movlw	1
   665  000970  EC8D  F007         	call	_enableSensor
   666  000974  D03A               	goto	l2673
   667  000976                     l2655:
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 97: if (DirectionFound==0) {
   671  000976  0100               	movlb	0	; () banked
   672  000978  517A               	movf	main@DirectionFound& (0+255),w,b
   673  00097A  0100               	movlb	0	; () banked
   674  00097C  A4D8               	btfss	status,2,c
   675  00097E  D00D               	goto	l2659
   676                           
   677                           ; BSR set to: 0
   678                           ;main.c: 99: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   679  000980  0E7B               	movlw	low main@mL
   680  000982  6E2F               	movwf	ScanWithRange@mL,c
   681  000984  0E00               	movlw	high main@mL
   682  000986  6E30               	movwf	ScanWithRange@mL+1,c
   683  000988  0E84               	movlw	low main@mR
   684  00098A  6E31               	movwf	ScanWithRange@mR,c
   685  00098C  0E00               	movlw	high main@mR
   686  00098E  6E32               	movwf	ScanWithRange@mR+1,c
   687  000990  C078  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   688  000994  EC56  F000         	call	_ScanWithRange	;wreg free
   689  000998  D00E               	goto	L2
   690  00099A                     l2659:
   691                           
   692                           ; BSR set to: 0
   693  00099A  0100               	movlb	0	; () banked
   694  00099C  057A               	decf	main@DirectionFound& (0+255),w,b
   695  00099E  A4D8               	btfss	status,2,c
   696  0009A0  D00D               	goto	l2663
   697                           
   698                           ; BSR set to: 0
   699                           ;main.c: 102: DirectionFound = ScanIR(&mL, &mR);
   700  0009A2  0E7B               	movlw	low main@mL
   701  0009A4  6E2F               	movwf	ScanIR@mL,c
   702  0009A6  0E00               	movlw	high main@mL
   703  0009A8  6E30               	movwf	ScanIR@mL+1,c
   704  0009AA  0E84               	movlw	low main@mR
   705  0009AC  6E31               	movwf	ScanIR@mR,c
   706  0009AE  0E00               	movlw	high main@mR
   707  0009B0  6E32               	movwf	ScanIR@mR+1,c
   708  0009B2  EC31  F003         	call	_ScanIR	;wreg free
   709  0009B6                     L2:
   710  0009B6  0100               	movlb	0	; () banked
   711  0009B8  6F7A               	movwf	main@DirectionFound& (0+255),b
   712                           
   713                           ;main.c: 103: } else if (DirectionFound==2) {
   714  0009BA  D01A               	goto	l2677
   715  0009BC                     l2663:
   716                           
   717                           ; BSR set to: 0
   718  0009BC  0E02               	movlw	2
   719  0009BE  0100               	movlb	0	; () banked
   720  0009C0  197A               	xorwf	main@DirectionFound& (0+255),w,b
   721  0009C2  A4D8               	btfss	status,2,c
   722  0009C4  D015               	goto	l2677
   723                           
   724                           ; BSR set to: 0
   725                           ;main.c: 104: mode=2;
   726  0009C6  0E02               	movlw	2
   727  0009C8  D011               	goto	L3
   728  0009CA                     l2667:
   729                           
   730                           ; BSR set to: 0
   731                           ;main.c: 123: fullSpeedAhead(&mL, &mR);
   732  0009CA  0E7B               	movlw	low main@mL
   733  0009CC  6E26               	movwf	fullSpeedAhead@mL,c
   734  0009CE  0E00               	movlw	high main@mL
   735  0009D0  6E27               	movwf	fullSpeedAhead@mL+1,c
   736  0009D2  0E84               	movlw	low main@mR
   737  0009D4  6E28               	movwf	fullSpeedAhead@mR,c
   738  0009D6  0E00               	movlw	high main@mR
   739  0009D8  6E29               	movwf	fullSpeedAhead@mR+1,c
   740  0009DA  EC9F  F006         	call	_fullSpeedAhead	;wreg free
   741                           
   742                           ;main.c: 124: delay_s(1);
   743  0009DE  0E01               	movlw	1
   744  0009E0  EC21  F007         	call	_delay_s
   745                           
   746                           ;main.c: 125: DirectionFound=1;
   747  0009E4  0E01               	movlw	1
   748  0009E6  0100               	movlb	0	; () banked
   749  0009E8  6F7A               	movwf	main@DirectionFound& (0+255),b
   750  0009EA                     l2673:
   751                           
   752                           ; BSR set to: 0
   753                           ;main.c: 126: mode = 1;
   754  0009EA  0E01               	movlw	1
   755  0009EC                     L3:
   756  0009EC  0100               	movlb	0	; () banked
   757  0009EE  6F79               	movwf	main@mode& (0+255),b
   758  0009F0                     l2677:
   759  0009F0  0100               	movlb	0	; () banked
   760  0009F2  5179               	movf	main@mode& (0+255),w,b
   761                           
   762                           ; Switch size 1, requested type "space"
   763                           ; Number of cases is 4, Range of values is 0 to 3
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte           13     7 (average)
   767                           ;	Chosen strategy is simple_byte
   768  0009F4  0A00               	xorlw	0	; case 0
   769  0009F6  B4D8               	btfsc	status,2,c
   770  0009F8  D781               	goto	l2635
   771  0009FA  0A01               	xorlw	1	; case 1
   772  0009FC  B4D8               	btfsc	status,2,c
   773  0009FE  D7BB               	goto	l2655
   774  000A00  0A03               	xorlw	3	; case 2
   775  000A02  B4D8               	btfsc	status,2,c
   776  000A04  D7E2               	goto	l2667
   777  000A06  0A01               	xorlw	1	; case 3
   778                           
   779                           ; BSR set to: 0
   780                           
   781                           ; BSR set to: 0
   782  000A08  D7F3               	goto	l2677
   783  000A0A                     __end_of_main:
   784                           	opt stack 0
   785                           tblptru	equ	0xFF8
   786                           intcon	equ	0xFF2
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _initMotorPWM *****************
   792 ;; Defined at:
   793 ;;		line 4 in file "dc_motor.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;		None               void
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   807 ;;      Params:         0       0       0       0
   808 ;;      Locals:         0       0       0       0
   809 ;;      Temps:          0       0       0       0
   810 ;;      Totals:         0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text1
   822  000EE8                     __ptext1:
   823                           	opt stack 0
   824  000EE8                     _initMotorPWM:
   825                           	opt stack 29
   826                           
   827                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   828                           
   829                           ; BSR set to: 0
   830                           ;incstack = 0
   831  000EE8  0E00               	movlw	0
   832  000EEA  6E7F               	movwf	3967,c	;volatile
   833                           
   834                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   835  000EEC  0E80               	movlw	128
   836  000EEE  6E7E               	movwf	3966,c	;volatile
   837                           
   838                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   839  000EF0  0E6F               	movlw	111
   840  000EF2  6E6F               	movwf	3951,c	;volatile
   841                           
   842                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   843  000EF4  0E00               	movlw	0
   844  000EF6  6E6E               	movwf	3950,c	;volatile
   845                           
   846                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   847  000EF8  0EC7               	movlw	199
   848  000EFA  6E7B               	movwf	3963,c	;volatile
   849                           
   850                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   851  000EFC  0E00               	movlw	0
   852  000EFE  6E7A               	movwf	3962,c	;volatile
   853                           
   854                           ;dc_motor.c: 13: PDC0L = 0<<2;
   855  000F00  0E00               	movlw	0
   856  000F02  6E79               	movwf	3961,c	;volatile
   857                           
   858                           ;dc_motor.c: 14: PDC0H = 0>>6;
   859  000F04  0E00               	movlw	0
   860  000F06  6E78               	movwf	3960,c	;volatile
   861                           
   862                           ;dc_motor.c: 15: PDC1L = 0<<2;
   863  000F08  0E00               	movlw	0
   864  000F0A  6E77               	movwf	3959,c	;volatile
   865                           
   866                           ;dc_motor.c: 16: PDC1H = 0>>6;
   867  000F0C  0E00               	movlw	0
   868  000F0E  6E76               	movwf	3958,c	;volatile
   869                           
   870                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   871  000F10  9093               	bcf	3987,0,c	;volatile
   872                           
   873                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   874  000F12  9293               	bcf	3987,1,c	;volatile
   875                           
   876                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   877  000F14  9493               	bcf	3987,2,c	;volatile
   878                           
   879                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   880  000F16  9693               	bcf	3987,3,c	;volatile
   881  000F18  0012               	return		;funcret
   882  000F1A                     __end_of_initMotorPWM:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           intcon	equ	0xFF2
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           status	equ	0xFD8
   889                           
   890 ;; *************** function _initIR *****************
   891 ;; Defined at:
   892 ;;		line 30 in file "IR_Reading.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;		None               void
   899 ;; Registers used:
   900 ;;		wreg, status,2
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   906 ;;      Params:         0       0       0       0
   907 ;;      Locals:         0       0       0       0
   908 ;;      Temps:          0       0       0       0
   909 ;;      Totals:         0       0       0       0
   910 ;;Total ram usage:        0 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    1
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text2
   921  000F66                     __ptext2:
   922                           	opt stack 0
   923  000F66                     _initIR:
   924                           	opt stack 29
   925                           
   926                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   927                           
   928                           ;incstack = 0
   929  000F66  9489               	bcf	3977,2,c	;volatile
   930                           
   931                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   932  000F68  9689               	bcf	3977,3,c	;volatile
   933                           
   934                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   935  000F6A  8492               	bsf	3986,2,c	;volatile
   936                           
   937                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   938  000F6C  8692               	bsf	3986,3,c	;volatile
   939                           
   940                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   941  000F6E  94B8               	bcf	4024,2,c	;volatile
   942                           
   943                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   944  000F70  96B8               	bcf	4024,3,c	;volatile
   945                           
   946                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   947  000F72  9CB8               	bcf	4024,6,c	;volatile
   948                           
   949                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   950  000F74  9EB8               	bcf	4024,7,c	;volatile
   951                           
   952                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   953  000F76  0E06               	movlw	6
   954  000F78  6E63               	movwf	3939,c	;volatile
   955                           
   956                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   957  000F7A  0E06               	movlw	6
   958  000F7C  6E62               	movwf	3938,c	;volatile
   959                           
   960                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   961  000F7E  9096               	bcf	3990,0,c	;volatile
   962                           
   963                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   964  000F80  9296               	bcf	3990,1,c	;volatile
   965                           
   966                           ;IR_Reading.c: 69: T5CON=0b01011001;
   967  000F82  0E59               	movlw	89
   968  000F84  6EB7               	movwf	4023,c	;volatile
   969  000F86  0012               	return		;funcret
   970  000F88                     __end_of_initIR:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           intcon	equ	0xFF2
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _fullSpeedBack *****************
   979 ;; Defined at:
   980 ;;		line 125 in file "dc_motor.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   983 ;;		 -> main@mL(9), 
   984 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   985 ;;		 -> main@mR(9), 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;		None               void
   990 ;; Registers used:
   991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   997 ;;      Params:         4       0       0       0
   998 ;;      Locals:         0       0       0       0
   999 ;;      Temps:          0       0       0       0
  1000 ;;      Totals:         4       0       0       0
  1001 ;;Total ram usage:        4 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; Hardware stack levels required when called:    4
  1004 ;; This function calls:
  1005 ;;		_fullSpeedAhead
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text3
  1012  000EB2                     __ptext3:
  1013                           	opt stack 0
  1014  000EB2                     _fullSpeedBack:
  1015                           	opt stack 26
  1016                           
  1017                           ;dc_motor.c: 128: mL->direction=0;
  1018                           
  1019                           ;incstack = 0
  1020  000EB2  EE20 F001          	lfsr	2,1
  1021  000EB6  502B               	movf	fullSpeedBack@mL,w,c
  1022  000EB8  26D9               	addwf	fsr2l,f,c
  1023  000EBA  502C               	movf	fullSpeedBack@mL+1,w,c
  1024  000EBC  22DA               	addwfc	fsr2h,f,c
  1025  000EBE  0E00               	movlw	0
  1026  000EC0  6EDF               	movwf	indf2,c
  1027                           
  1028                           ;dc_motor.c: 129: mR->direction=0;
  1029  000EC2  EE20 F001          	lfsr	2,1
  1030  000EC6  502D               	movf	fullSpeedBack@mR,w,c
  1031  000EC8  26D9               	addwf	fsr2l,f,c
  1032  000ECA  502E               	movf	fullSpeedBack@mR+1,w,c
  1033  000ECC  22DA               	addwfc	fsr2h,f,c
  1034  000ECE  0E00               	movlw	0
  1035  000ED0  6EDF               	movwf	indf2,c
  1036                           
  1037                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1038  000ED2  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1039  000ED6  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1040  000EDA  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1041  000EDE  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1042  000EE2  EC9F  F006         	call	_fullSpeedAhead	;wreg free
  1043  000EE6  0012               	return		;funcret
  1044  000EE8                     __end_of_fullSpeedBack:
  1045                           	opt stack 0
  1046                           tblptru	equ	0xFF8
  1047                           intcon	equ	0xFF2
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           indf2	equ	0xFDF
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055 ;; *************** function _enableSensor *****************
  1056 ;; Defined at:
  1057 ;;		line 106 in file "IR_Reading.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  sensor          1    wreg     unsigned char 
  1060 ;;  status          1   14[COMRAM] unsigned char 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  sensor          1   15[COMRAM] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;		None               void
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1072 ;;      Params:         1       0       0       0
  1073 ;;      Locals:         1       0       0       0
  1074 ;;      Temps:          0       0       0       0
  1075 ;;      Totals:         2       0       0       0
  1076 ;;Total ram usage:        2 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text4
  1087  000F1A                     __ptext4:
  1088                           	opt stack 0
  1089  000F1A                     _enableSensor:
  1090                           	opt stack 29
  1091                           
  1092                           ;incstack = 0
  1093                           ;enableSensor@sensor stored from wreg
  1094  000F1A  6E10               	movwf	enableSensor@sensor,c
  1095                           
  1096                           ;IR_Reading.c: 108: if (sensor==0){
  1097  000F1C  5010               	movf	enableSensor@sensor,w,c
  1098  000F1E  A4D8               	btfss	status,2,c
  1099  000F20  D006               	goto	l1849
  1100                           
  1101                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1102  000F22  B00F               	btfsc	enableSensor@status,0,c
  1103  000F24  D002               	bra	u1175
  1104  000F26  908D               	bcf	3981,0,c	;volatile
  1105  000F28  D001               	bra	u1176
  1106  000F2A                     u1175:
  1107  000F2A  808D               	bsf	3981,0,c	;volatile
  1108  000F2C                     u1176:
  1109                           
  1110                           ;IR_Reading.c: 110: } else if (sensor==1){
  1111  000F2C  0012               	return	
  1112  000F2E                     l1849:
  1113  000F2E  0410               	decf	enableSensor@sensor,w,c
  1114  000F30  A4D8               	btfss	status,2,c
  1115  000F32  0012               	return	
  1116                           
  1117                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1118  000F34  B00F               	btfsc	enableSensor@status,0,c
  1119  000F36  D002               	bra	u1195
  1120  000F38  928D               	bcf	3981,1,c	;volatile
  1121  000F3A  D001               	bra	u1196
  1122  000F3C                     u1195:
  1123  000F3C  828D               	bsf	3981,1,c	;volatile
  1124  000F3E                     u1196:
  1125  000F3E  0012               	return	
  1126  000F40                     __end_of_enableSensor:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           indf2	equ	0xFDF
  1133                           fsr2h	equ	0xFDA
  1134                           fsr2l	equ	0xFD9
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _delay_s *****************
  1138 ;; Defined at:
  1139 ;;		line 10 in file "Movement.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  seconds         1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  seconds         1   15[COMRAM] unsigned char 
  1144 ;;  i               2   16[COMRAM] unsigned int 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;		None               void
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1154 ;;      Params:         0       0       0       0
  1155 ;;      Locals:         3       0       0       0
  1156 ;;      Temps:          1       0       0       0
  1157 ;;      Totals:         4       0       0       0
  1158 ;;Total ram usage:        4 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text5
  1169  000E42                     __ptext5:
  1170                           	opt stack 0
  1171  000E42                     _delay_s:
  1172                           	opt stack 29
  1173                           
  1174                           ;incstack = 0
  1175                           ;delay_s@seconds stored from wreg
  1176  000E42  6E10               	movwf	delay_s@seconds,c
  1177                           
  1178                           ;Movement.c: 11: unsigned int i=0;
  1179  000E44  0E00               	movlw	0
  1180  000E46  6E12               	movwf	delay_s@i+1,c
  1181  000E48  0E00               	movlw	0
  1182  000E4A  6E11               	movwf	delay_s@i,c
  1183                           
  1184                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1185  000E4C  0E00               	movlw	0
  1186  000E4E  6E12               	movwf	delay_s@i+1,c
  1187  000E50  0E01               	movlw	1
  1188  000E52  6E11               	movwf	delay_s@i,c
  1189  000E54  D009               	goto	l1839
  1190  000E56                     l1835:
  1191                           
  1192                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1193  000E56  0E82               	movlw	130
  1194  000E58  6E0F               	movwf	??_delay_s& (0+255),c
  1195  000E5A  0EDE               	movlw	222
  1196  000E5C                     u2197:
  1197  000E5C  2EE8               	decfsz	wreg,f,c
  1198  000E5E  D7FE               	goto	u2197
  1199  000E60  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1200  000E62  D7FC               	goto	u2197
  1201  000E64  4A11               	infsnz	delay_s@i,f,c
  1202  000E66  2A12               	incf	delay_s@i+1,f,c
  1203  000E68                     l1839:
  1204  000E68  5010               	movf	delay_s@seconds,w,c
  1205  000E6A  0D14               	mullw	20
  1206  000E6C  5011               	movf	delay_s@i,w,c
  1207  000E6E  5CF3               	subwf	prodl,w,c
  1208  000E70  5012               	movf	delay_s@i+1,w,c
  1209  000E72  58F4               	subwfb	prodh,w,c
  1210  000E74  A0D8               	btfss	status,0,c
  1211  000E76  0012               	return	
  1212  000E78  D7EE               	goto	l1835
  1213  000E7A                     __end_of_delay_s:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf2	equ	0xFDF
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function _ScanWithRange *****************
  1227 ;; Defined at:
  1228 ;;		line 94 in file "Movement.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1231 ;;		 -> main@mL(9), 
  1232 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1233 ;;		 -> main@mR(9), 
  1234 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  SensorResult    4   17[BANK0 ] unsigned int [2]
  1237 ;;  SensorResult    4   13[BANK0 ] unsigned int [2]
  1238 ;;  SensorResult    4    9[BANK0 ] unsigned int [2]
  1239 ;;  DirectionFou    2    7[BANK0 ] const unsigned int 
  1240 ;;  DirectionFou    2    5[BANK0 ] const unsigned int 
  1241 ;;  ClearSignalT    2    3[BANK0 ] const unsigned int 
  1242 ;;  ResultFalseR    1    2[BANK0 ] unsigned char 
  1243 ;;  ResultFalseC    1    1[BANK0 ] unsigned char 
  1244 ;;  ResultFalseL    1    0[BANK0 ] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      unsigned char 
  1247 ;; Registers used:
  1248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1254 ;;      Params:         5       0       0       0
  1255 ;;      Locals:         0      21       0       0
  1256 ;;      Temps:          2       0       0       0
  1257 ;;      Totals:         7      21       0       0
  1258 ;;Total ram usage:       28 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    5
  1261 ;; This function calls:
  1262 ;;		___awdiv
  1263 ;;		_delay_tenth_s
  1264 ;;		_fullSpeedAhead
  1265 ;;		_grabLeftIR
  1266 ;;		_grabRightIR
  1267 ;;		_stop
  1268 ;;		_turnLeft
  1269 ;;		_turnRight
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text6
  1276  0000AC                     __ptext6:
  1277                           	opt stack 0
  1278  0000AC                     _ScanWithRange:
  1279                           	opt stack 25
  1280                           
  1281                           ;Movement.c: 97: unsigned int SensorResultL[2];
  1282                           ;Movement.c: 98: unsigned int SensorResultC[2];
  1283                           ;Movement.c: 99: unsigned int SensorResultR[2];
  1284                           ;Movement.c: 100: unsigned char ResultFalseL=0;
  1285                           
  1286                           ;incstack = 0
  1287  0000AC  0E00               	movlw	0
  1288  0000AE  0100               	movlb	0	; () banked
  1289  0000B0  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1290                           
  1291                           ;Movement.c: 101: unsigned char ResultFalseC=0;
  1292  0000B2  0E00               	movlw	0
  1293  0000B4  0100               	movlb	0	; () banked
  1294  0000B6  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1295                           
  1296                           ;Movement.c: 102: unsigned char ResultFalseR=0;
  1297  0000B8  0E00               	movlw	0
  1298  0000BA  0100               	movlb	0	; () banked
  1299  0000BC  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1300                           
  1301                           ;Movement.c: 105: const unsigned int ClearSignalTolerance=200;
  1302  0000BE  0E00               	movlw	0
  1303  0000C0  0100               	movlb	0	; () banked
  1304  0000C2  6F64               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  1305  0000C4  0EC8               	movlw	200
  1306  0000C6  6F63               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  1307                           
  1308                           ;Movement.c: 106: const unsigned int DirectionFoundLimit=1500;
  1309  0000C8  0E05               	movlw	5
  1310  0000CA  0100               	movlb	0	; () banked
  1311  0000CC  6F66               	movwf	(ScanWithRange@DirectionFoundLimit+1)& (0+255),b
  1312  0000CE  0EDC               	movlw	220
  1313  0000D0  6F65               	movwf	ScanWithRange@DirectionFoundLimit& (0+255),b
  1314                           
  1315                           ;Movement.c: 107: const unsigned int DirectionFoundTolerance=500;
  1316  0000D2  0E01               	movlw	1
  1317  0000D4  0100               	movlb	0	; () banked
  1318  0000D6  6F68               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  1319  0000D8  0EF4               	movlw	244
  1320  0000DA  6F67               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;Movement.c: 114: stop(mL,mR);
  1324  0000DC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1325  0000E0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1326  0000E4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1327  0000E8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1328  0000EC  EC9F  F005         	call	_stop	;wreg free
  1329                           
  1330                           ;Movement.c: 115: SensorResultC[0]=grabLeftIR();
  1331  0000F0  EC64  F006         	call	_grabLeftIR	;wreg free
  1332  0000F4  C00F  F06D         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1333  0000F8  C010  F06E         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1334                           
  1335                           ;Movement.c: 116: SensorResultC[1]=grabRightIR();
  1336  0000FC  EC29  F006         	call	_grabRightIR	;wreg free
  1337  000100  C00F  F06F         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1338  000104  C010  F070         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1339                           
  1340                           ;Movement.c: 119: turnLeft(mL,mR);
  1341  000108  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1342  00010C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1343  000110  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1344  000114  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1345  000118  ECFC  F006         	call	_turnLeft	;wreg free
  1346                           
  1347                           ;Movement.c: 120: delay_tenth_s(tenth_seconds);
  1348  00011C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1349  00011E  EC3D  F007         	call	_delay_tenth_s
  1350                           
  1351                           ;Movement.c: 122: stop(mL,mR);
  1352  000122  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1353  000126  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1354  00012A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1355  00012E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1356  000132  EC9F  F005         	call	_stop	;wreg free
  1357                           
  1358                           ;Movement.c: 123: SensorResultL[0]=grabLeftIR();
  1359  000136  EC64  F006         	call	_grabLeftIR	;wreg free
  1360  00013A  C00F  F069         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1361  00013E  C010  F06A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1362                           
  1363                           ;Movement.c: 124: SensorResultL[1]=grabRightIR();
  1364  000142  EC29  F006         	call	_grabRightIR	;wreg free
  1365  000146  C00F  F06B         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1366  00014A  C010  F06C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1367                           
  1368                           ;Movement.c: 127: turnRight(mL,mR);
  1369  00014E  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1370  000152  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1371  000156  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1372  00015A  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1373  00015E  ECD7  F006         	call	_turnRight	;wreg free
  1374                           
  1375                           ;Movement.c: 128: delay_tenth_s(2*tenth_seconds);
  1376  000162  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1377  000164  0D02               	mullw	2
  1378  000166  50F3               	movf	prodl,w,c
  1379  000168  EC3D  F007         	call	_delay_tenth_s
  1380                           
  1381                           ;Movement.c: 130: stop(mL,mR);
  1382  00016C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1383  000170  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1384  000174  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1385  000178  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1386  00017C  EC9F  F005         	call	_stop	;wreg free
  1387                           
  1388                           ;Movement.c: 131: SensorResultR[0]=grabLeftIR();
  1389  000180  EC64  F006         	call	_grabLeftIR	;wreg free
  1390  000184  C00F  F071         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1391  000188  C010  F072         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1392                           
  1393                           ;Movement.c: 132: SensorResultR[1]=grabRightIR();
  1394  00018C  EC29  F006         	call	_grabRightIR	;wreg free
  1395  000190  C00F  F073         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1396  000194  C010  F074         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1397                           
  1398                           ;Movement.c: 143: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  1399  000198  0100               	movlb	0	; () banked
  1400  00019A  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1401  00019C  0100               	movlb	0	; () banked
  1402  00019E  256B               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1403  0001A0  6E34               	movwf	??_ScanWithRange& (0+255),c
  1404  0001A2  0100               	movlb	0	; () banked
  1405  0001A4  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1406  0001A6  0100               	movlb	0	; () banked
  1407  0001A8  216C               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1408  0001AA  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1409  0001AC  0100               	movlb	0	; () banked
  1410  0001AE  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1411  0001B0  5C34               	subwf	??_ScanWithRange,w,c
  1412  0001B2  0100               	movlb	0	; () banked
  1413  0001B4  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1414  0001B6  5835               	subwfb	??_ScanWithRange+1,w,c
  1415  0001B8  B0D8               	btfsc	status,0,c
  1416  0001BA  D00D               	goto	l2383
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;Movement.c: 144: SensorResultL[0]=0;
  1420  0001BC  0E00               	movlw	0
  1421  0001BE  0100               	movlb	0	; () banked
  1422  0001C0  6F6A               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  1423  0001C2  0E00               	movlw	0
  1424  0001C4  6F69               	movwf	ScanWithRange@SensorResultL& (0+255),b
  1425                           
  1426                           ;Movement.c: 145: SensorResultL[1]=0;
  1427  0001C6  0E00               	movlw	0
  1428  0001C8  0100               	movlb	0	; () banked
  1429  0001CA  6F6C               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  1430  0001CC  0E00               	movlw	0
  1431  0001CE  6F6B               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  1432                           
  1433                           ;Movement.c: 146: ResultFalseL=1;
  1434  0001D0  0E01               	movlw	1
  1435  0001D2  0100               	movlb	0	; () banked
  1436  0001D4  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1437  0001D6                     l2383:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;Movement.c: 147: }
  1441                           ;Movement.c: 148: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  1442  0001D6  0100               	movlb	0	; () banked
  1443  0001D8  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1444  0001DA  0100               	movlb	0	; () banked
  1445  0001DC  256F               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1446  0001DE  6E34               	movwf	??_ScanWithRange& (0+255),c
  1447  0001E0  0100               	movlb	0	; () banked
  1448  0001E2  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1449  0001E4  0100               	movlb	0	; () banked
  1450  0001E6  2170               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1451  0001E8  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1452  0001EA  0100               	movlb	0	; () banked
  1453  0001EC  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1454  0001EE  5C34               	subwf	??_ScanWithRange,w,c
  1455  0001F0  0100               	movlb	0	; () banked
  1456  0001F2  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1457  0001F4  5835               	subwfb	??_ScanWithRange+1,w,c
  1458  0001F6  B0D8               	btfsc	status,0,c
  1459  0001F8  D00D               	goto	l2387
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;Movement.c: 149: SensorResultC[0]=0;
  1463  0001FA  0E00               	movlw	0
  1464  0001FC  0100               	movlb	0	; () banked
  1465  0001FE  6F6E               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  1466  000200  0E00               	movlw	0
  1467  000202  6F6D               	movwf	ScanWithRange@SensorResultC& (0+255),b
  1468                           
  1469                           ;Movement.c: 150: SensorResultC[1]=0;
  1470  000204  0E00               	movlw	0
  1471  000206  0100               	movlb	0	; () banked
  1472  000208  6F70               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  1473  00020A  0E00               	movlw	0
  1474  00020C  6F6F               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  1475                           
  1476                           ;Movement.c: 151: ResultFalseC=1;
  1477  00020E  0E01               	movlw	1
  1478  000210  0100               	movlb	0	; () banked
  1479  000212  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1480  000214                     l2387:
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;Movement.c: 152: }
  1484                           ;Movement.c: 153: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  1485  000214  0100               	movlb	0	; () banked
  1486  000216  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1487  000218  0100               	movlb	0	; () banked
  1488  00021A  2573               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1489  00021C  6E34               	movwf	??_ScanWithRange& (0+255),c
  1490  00021E  0100               	movlb	0	; () banked
  1491  000220  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1492  000222  0100               	movlb	0	; () banked
  1493  000224  2174               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1494  000226  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1495  000228  0100               	movlb	0	; () banked
  1496  00022A  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1497  00022C  5C34               	subwf	??_ScanWithRange,w,c
  1498  00022E  0100               	movlb	0	; () banked
  1499  000230  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1500  000232  5835               	subwfb	??_ScanWithRange+1,w,c
  1501  000234  B0D8               	btfsc	status,0,c
  1502  000236  D00D               	goto	l2391
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;Movement.c: 154: SensorResultR[0]=0;
  1506  000238  0E00               	movlw	0
  1507  00023A  0100               	movlb	0	; () banked
  1508  00023C  6F72               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  1509  00023E  0E00               	movlw	0
  1510  000240  6F71               	movwf	ScanWithRange@SensorResultR& (0+255),b
  1511                           
  1512                           ;Movement.c: 155: SensorResultR[1]=0;
  1513  000242  0E00               	movlw	0
  1514  000244  0100               	movlb	0	; () banked
  1515  000246  6F74               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  1516  000248  0E00               	movlw	0
  1517  00024A  6F73               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  1518                           
  1519                           ;Movement.c: 156: ResultFalseR=1;
  1520  00024C  0E01               	movlw	1
  1521  00024E  0100               	movlb	0	; () banked
  1522  000250  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1523  000252                     l2391:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;Movement.c: 157: }
  1527                           ;Movement.c: 159: stop(mL,mR);
  1528  000252  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1529  000256  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1530  00025A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1531  00025E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1532  000262  EC9F  F005         	call	_stop	;wreg free
  1533                           
  1534                           ;Movement.c: 162: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  1535  000266  0100               	movlb	0	; () banked
  1536  000268  5161               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  1537  00026A  C060  F034         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  1538  00026E  6A35               	clrf	(??_ScanWithRange+1)& (0+255),c
  1539  000270  2634               	addwf	??_ScanWithRange,f,c
  1540  000272  0E00               	movlw	0
  1541  000274  2235               	addwfc	??_ScanWithRange+1,f,c
  1542  000276  0100               	movlb	0	; () banked
  1543  000278  5162               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  1544  00027A  2634               	addwf	??_ScanWithRange,f,c
  1545  00027C  0E00               	movlw	0
  1546  00027E  2235               	addwfc	??_ScanWithRange+1,f,c
  1547  000280  0E03               	movlw	3
  1548  000282  1834               	xorwf	??_ScanWithRange,w,c
  1549  000284  1035               	iorwf	??_ScanWithRange+1,w,c
  1550  000286  A4D8               	btfss	status,2,c
  1551  000288  D032               	goto	l2411
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;Movement.c: 164: turnLeft(mL,mR);
  1555  00028A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1556  00028E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1557  000292  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1558  000296  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1559  00029A  ECFC  F006         	call	_turnLeft	;wreg free
  1560                           
  1561                           ;Movement.c: 165: delay_tenth_s(5*tenth_seconds);
  1562  00029E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1563  0002A0  0D05               	mullw	5
  1564  0002A2  50F3               	movf	prodl,w,c
  1565  0002A4  EC3D  F007         	call	_delay_tenth_s
  1566                           
  1567                           ;Movement.c: 166: stop(mL,mR);
  1568  0002A8  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1569  0002AC  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1570  0002B0  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1571  0002B4  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1572  0002B8  EC9F  F005         	call	_stop	;wreg free
  1573                           
  1574                           ;Movement.c: 167: fullSpeedAhead(mL, mR);
  1575  0002BC  C02F  F026         	movff	ScanWithRange@mL,fullSpeedAhead@mL
  1576  0002C0  C030  F027         	movff	ScanWithRange@mL+1,fullSpeedAhead@mL+1
  1577  0002C4  C031  F028         	movff	ScanWithRange@mR,fullSpeedAhead@mR
  1578  0002C8  C032  F029         	movff	ScanWithRange@mR+1,fullSpeedAhead@mR+1
  1579  0002CC  EC9F  F006         	call	_fullSpeedAhead	;wreg free
  1580                           
  1581                           ;Movement.c: 168: delay_tenth_s(tenth_seconds);
  1582  0002D0  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1583  0002D2  EC3D  F007         	call	_delay_tenth_s
  1584                           
  1585                           ;Movement.c: 169: stop(mL,mR);
  1586  0002D6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1587  0002DA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1588  0002DE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1589  0002E2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1590  0002E6  EC9F  F005         	call	_stop	;wreg free
  1591  0002EA                     l2405:
  1592                           
  1593                           ;Movement.c: 170: return 0;
  1594  0002EA  0E00               	movlw	0
  1595  0002EC  0012               	return	
  1596  0002EE                     l2411:
  1597                           
  1598                           ;Movement.c: 173: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  1599                           ;Movement.c: 174: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  1600                           ;Movement.c: 175: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  1601  0002EE  0100               	movlb	0	; () banked
  1602  0002F0  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1603  0002F2  0100               	movlb	0	; () banked
  1604  0002F4  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1605  0002F6  0100               	movlb	0	; () banked
  1606  0002F8  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1607  0002FA  0100               	movlb	0	; () banked
  1608  0002FC  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1609  0002FE  B0D8               	btfsc	status,0,c
  1610  000300  D053               	goto	l2431
  1611                           
  1612                           ; BSR set to: 0
  1613  000302  0100               	movlb	0	; () banked
  1614  000304  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1615  000306  0100               	movlb	0	; () banked
  1616  000308  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1617  00030A  0100               	movlb	0	; () banked
  1618  00030C  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1619  00030E  0100               	movlb	0	; () banked
  1620  000310  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1621  000312  B0D8               	btfsc	status,0,c
  1622  000314  D049               	goto	l2431
  1623                           
  1624                           ; BSR set to: 0
  1625  000316  EE20  F06B         	lfsr	2,ScanWithRange@SensorResultL+2
  1626  00031A  CFDE F034          	movff	postinc2,??_ScanWithRange
  1627  00031E  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1628  000322  1E34               	comf	??_ScanWithRange,f,c
  1629  000324  1E35               	comf	??_ScanWithRange+1,f,c
  1630  000326  4A34               	infsnz	??_ScanWithRange,f,c
  1631  000328  2A35               	incf	??_ScanWithRange+1,f,c
  1632  00032A  0100               	movlb	0	; () banked
  1633  00032C  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1634  00032E  2634               	addwf	??_ScanWithRange,f,c
  1635  000330  0100               	movlb	0	; () banked
  1636  000332  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1637  000334  2235               	addwfc	??_ScanWithRange+1,f,c
  1638  000336  0100               	movlb	0	; () banked
  1639  000338  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1640  00033A  5C34               	subwf	??_ScanWithRange,w,c
  1641  00033C  0100               	movlb	0	; () banked
  1642  00033E  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1643  000340  5835               	subwfb	??_ScanWithRange+1,w,c
  1644  000342  A0D8               	btfss	status,0,c
  1645  000344  D016               	goto	l2419
  1646                           
  1647                           ; BSR set to: 0
  1648  000346  C069  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1649  00034A  C06A  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1650  00034E  1E34               	comf	??_ScanWithRange,f,c
  1651  000350  1E35               	comf	??_ScanWithRange+1,f,c
  1652  000352  4A34               	infsnz	??_ScanWithRange,f,c
  1653  000354  2A35               	incf	??_ScanWithRange+1,f,c
  1654  000356  0100               	movlb	0	; () banked
  1655  000358  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1656  00035A  2634               	addwf	??_ScanWithRange,f,c
  1657  00035C  0100               	movlb	0	; () banked
  1658  00035E  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1659  000360  2235               	addwfc	??_ScanWithRange+1,f,c
  1660  000362  0100               	movlb	0	; () banked
  1661  000364  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1662  000366  5C34               	subwf	??_ScanWithRange,w,c
  1663  000368  0100               	movlb	0	; () banked
  1664  00036A  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1665  00036C  5835               	subwfb	??_ScanWithRange+1,w,c
  1666  00036E  B0D8               	btfsc	status,0,c
  1667  000370  D01B               	goto	l2431
  1668  000372                     l2419:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;Movement.c: 177: turnLeft(mL,mR);
  1672  000372  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1673  000376  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1674  00037A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1675  00037E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1676  000382  ECFC  F006         	call	_turnLeft	;wreg free
  1677                           
  1678                           ;Movement.c: 178: delay_tenth_s(2*(tenth_seconds));
  1679  000386  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1680  000388  0D02               	mullw	2
  1681  00038A  50F3               	movf	prodl,w,c
  1682  00038C  EC3D  F007         	call	_delay_tenth_s
  1683                           
  1684                           ;Movement.c: 179: stop(mL,mR);
  1685  000390  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1686  000394  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1687  000398  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1688  00039C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1689  0003A0  EC9F  F005         	call	_stop	;wreg free
  1690  0003A4                     l2425:
  1691                           
  1692                           ;Movement.c: 180: return 2;
  1693  0003A4  0E02               	movlw	2
  1694  0003A6  0012               	return	
  1695  0003A8                     l2431:
  1696                           
  1697                           ;Movement.c: 182: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  1698                           ;Movement.c: 183: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  1699  0003A8  0100               	movlb	0	; () banked
  1700  0003AA  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1701  0003AC  0100               	movlb	0	; () banked
  1702  0003AE  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1703  0003B0  0100               	movlb	0	; () banked
  1704  0003B2  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1705  0003B4  0100               	movlb	0	; () banked
  1706  0003B6  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1707  0003B8  B0D8               	btfsc	status,0,c
  1708  0003BA  D050               	goto	l2451
  1709                           
  1710                           ; BSR set to: 0
  1711  0003BC  0100               	movlb	0	; () banked
  1712  0003BE  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1713  0003C0  0100               	movlb	0	; () banked
  1714  0003C2  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1715  0003C4  0100               	movlb	0	; () banked
  1716  0003C6  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1717  0003C8  0100               	movlb	0	; () banked
  1718  0003CA  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1719  0003CC  B0D8               	btfsc	status,0,c
  1720  0003CE  D046               	goto	l2451
  1721                           
  1722                           ; BSR set to: 0
  1723  0003D0  EE20  F06F         	lfsr	2,ScanWithRange@SensorResultC+2
  1724  0003D4  CFDE F034          	movff	postinc2,??_ScanWithRange
  1725  0003D8  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1726  0003DC  1E34               	comf	??_ScanWithRange,f,c
  1727  0003DE  1E35               	comf	??_ScanWithRange+1,f,c
  1728  0003E0  4A34               	infsnz	??_ScanWithRange,f,c
  1729  0003E2  2A35               	incf	??_ScanWithRange+1,f,c
  1730  0003E4  0100               	movlb	0	; () banked
  1731  0003E6  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1732  0003E8  2634               	addwf	??_ScanWithRange,f,c
  1733  0003EA  0100               	movlb	0	; () banked
  1734  0003EC  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1735  0003EE  2235               	addwfc	??_ScanWithRange+1,f,c
  1736  0003F0  0100               	movlb	0	; () banked
  1737  0003F2  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1738  0003F4  5C34               	subwf	??_ScanWithRange,w,c
  1739  0003F6  0100               	movlb	0	; () banked
  1740  0003F8  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1741  0003FA  5835               	subwfb	??_ScanWithRange+1,w,c
  1742  0003FC  A0D8               	btfss	status,0,c
  1743  0003FE  D016               	goto	l2439
  1744                           
  1745                           ; BSR set to: 0
  1746  000400  C06D  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1747  000404  C06E  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1748  000408  1E34               	comf	??_ScanWithRange,f,c
  1749  00040A  1E35               	comf	??_ScanWithRange+1,f,c
  1750  00040C  4A34               	infsnz	??_ScanWithRange,f,c
  1751  00040E  2A35               	incf	??_ScanWithRange+1,f,c
  1752  000410  0100               	movlb	0	; () banked
  1753  000412  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1754  000414  2634               	addwf	??_ScanWithRange,f,c
  1755  000416  0100               	movlb	0	; () banked
  1756  000418  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1757  00041A  2235               	addwfc	??_ScanWithRange+1,f,c
  1758  00041C  0100               	movlb	0	; () banked
  1759  00041E  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1760  000420  5C34               	subwf	??_ScanWithRange,w,c
  1761  000422  0100               	movlb	0	; () banked
  1762  000424  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1763  000426  5835               	subwfb	??_ScanWithRange+1,w,c
  1764  000428  B0D8               	btfsc	status,0,c
  1765  00042A  D018               	goto	l2451
  1766  00042C                     l2439:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;Movement.c: 185: turnLeft(mL,mR);
  1770  00042C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1771  000430  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1772  000434  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1773  000438  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1774  00043C  ECFC  F006         	call	_turnLeft	;wreg free
  1775                           
  1776                           ;Movement.c: 186: delay_tenth_s(tenth_seconds);
  1777  000440  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1778  000442  EC3D  F007         	call	_delay_tenth_s
  1779                           
  1780                           ;Movement.c: 187: stop(mL,mR);
  1781  000446  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1782  00044A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1783  00044E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1784  000452  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1785  000456  EC9F  F005         	call	_stop	;wreg free
  1786  00045A  D7A4               	goto	l2425
  1787  00045C                     l2451:
  1788                           
  1789                           ;Movement.c: 190: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  1790                           ;Movement.c: 191: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  1791  00045C  0100               	movlb	0	; () banked
  1792  00045E  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1793  000460  0100               	movlb	0	; () banked
  1794  000462  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1795  000464  0100               	movlb	0	; () banked
  1796  000466  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1797  000468  0100               	movlb	0	; () banked
  1798  00046A  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1799  00046C  B0D8               	btfsc	status,0,c
  1800  00046E  D043               	goto	l2467
  1801                           
  1802                           ; BSR set to: 0
  1803  000470  0100               	movlb	0	; () banked
  1804  000472  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1805  000474  0100               	movlb	0	; () banked
  1806  000476  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1807  000478  0100               	movlb	0	; () banked
  1808  00047A  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1809  00047C  0100               	movlb	0	; () banked
  1810  00047E  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1811  000480  B0D8               	btfsc	status,0,c
  1812  000482  D039               	goto	l2467
  1813                           
  1814                           ; BSR set to: 0
  1815  000484  EE20  F073         	lfsr	2,ScanWithRange@SensorResultR+2
  1816  000488  CFDE F034          	movff	postinc2,??_ScanWithRange
  1817  00048C  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1818  000490  1E34               	comf	??_ScanWithRange,f,c
  1819  000492  1E35               	comf	??_ScanWithRange+1,f,c
  1820  000494  4A34               	infsnz	??_ScanWithRange,f,c
  1821  000496  2A35               	incf	??_ScanWithRange+1,f,c
  1822  000498  0100               	movlb	0	; () banked
  1823  00049A  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1824  00049C  2634               	addwf	??_ScanWithRange,f,c
  1825  00049E  0100               	movlb	0	; () banked
  1826  0004A0  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1827  0004A2  2235               	addwfc	??_ScanWithRange+1,f,c
  1828  0004A4  0100               	movlb	0	; () banked
  1829  0004A6  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1830  0004A8  5C34               	subwf	??_ScanWithRange,w,c
  1831  0004AA  0100               	movlb	0	; () banked
  1832  0004AC  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1833  0004AE  5835               	subwfb	??_ScanWithRange+1,w,c
  1834  0004B0  A0D8               	btfss	status,0,c
  1835  0004B2  D016               	goto	l2459
  1836                           
  1837                           ; BSR set to: 0
  1838  0004B4  C071  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1839  0004B8  C072  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1840  0004BC  1E34               	comf	??_ScanWithRange,f,c
  1841  0004BE  1E35               	comf	??_ScanWithRange+1,f,c
  1842  0004C0  4A34               	infsnz	??_ScanWithRange,f,c
  1843  0004C2  2A35               	incf	??_ScanWithRange+1,f,c
  1844  0004C4  0100               	movlb	0	; () banked
  1845  0004C6  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1846  0004C8  2634               	addwf	??_ScanWithRange,f,c
  1847  0004CA  0100               	movlb	0	; () banked
  1848  0004CC  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1849  0004CE  2235               	addwfc	??_ScanWithRange+1,f,c
  1850  0004D0  0100               	movlb	0	; () banked
  1851  0004D2  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1852  0004D4  5C34               	subwf	??_ScanWithRange,w,c
  1853  0004D6  0100               	movlb	0	; () banked
  1854  0004D8  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1855  0004DA  5835               	subwfb	??_ScanWithRange+1,w,c
  1856  0004DC  B0D8               	btfsc	status,0,c
  1857  0004DE  D00B               	goto	l2467
  1858  0004E0                     l2459:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;Movement.c: 193: stop(mL,mR);
  1862  0004E0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1863  0004E4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1864  0004E8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1865  0004EC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1866  0004F0  EC9F  F005         	call	_stop	;wreg free
  1867  0004F4  D757               	goto	l2425
  1868  0004F6                     l2467:
  1869  0004F6  0100               	movlb	0	; () banked
  1870  0004F8  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1871  0004FA  0100               	movlb	0	; () banked
  1872  0004FC  5D6B               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1873  0004FE  0100               	movlb	0	; () banked
  1874  000500  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1875  000502  0100               	movlb	0	; () banked
  1876  000504  596C               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1877  000506  B0D8               	btfsc	status,0,c
  1878  000508  D01A               	goto	l2481
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;Movement.c: 199: turnLeft(mL,mR);
  1882  00050A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1883  00050E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1884  000512  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1885  000516  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1886  00051A  ECFC  F006         	call	_turnLeft	;wreg free
  1887                           
  1888                           ;Movement.c: 200: delay_tenth_s(3*tenth_seconds);
  1889  00051E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1890  000520  0D03               	mullw	3
  1891  000522  50F3               	movf	prodl,w,c
  1892  000524  EC3D  F007         	call	_delay_tenth_s
  1893                           
  1894                           ;Movement.c: 201: stop(mL,mR);
  1895  000528  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1896  00052C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1897  000530  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1898  000534  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1899  000538  EC9F  F005         	call	_stop	;wreg free
  1900  00053C  D6D6               	goto	l2405
  1901  00053E                     l2481:
  1902  00053E  0100               	movlb	0	; () banked
  1903  000540  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1904  000542  0100               	movlb	0	; () banked
  1905  000544  5D71               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  1906  000546  0100               	movlb	0	; () banked
  1907  000548  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1908  00054A  0100               	movlb	0	; () banked
  1909  00054C  5972               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1910  00054E  B0D8               	btfsc	status,0,c
  1911  000550  D018               	goto	l2495
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;Movement.c: 205: turnRight(mL,mR);
  1915  000552  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1916  000556  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1917  00055A  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1918  00055E  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1919  000562  ECD7  F006         	call	_turnRight	;wreg free
  1920                           
  1921                           ;Movement.c: 206: delay_tenth_s(tenth_seconds);
  1922  000566  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1923  000568  EC3D  F007         	call	_delay_tenth_s
  1924                           
  1925                           ;Movement.c: 207: stop(mL,mR);
  1926  00056C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1927  000570  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1928  000574  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1929  000578  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1930  00057C  EC9F  F005         	call	_stop	;wreg free
  1931  000580  D6B4               	goto	l2405
  1932  000582                     l2495:
  1933  000582  0100               	movlb	0	; () banked
  1934  000584  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1935  000586  0100               	movlb	0	; () banked
  1936  000588  5D69               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1937  00058A  0100               	movlb	0	; () banked
  1938  00058C  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1939  00058E  0100               	movlb	0	; () banked
  1940  000590  596A               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1941  000592  B0D8               	btfsc	status,0,c
  1942  000594  D02F               	goto	l2511
  1943                           
  1944                           ; BSR set to: 0
  1945  000596  0100               	movlb	0	; () banked
  1946  000598  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1947  00059A  0100               	movlb	0	; () banked
  1948  00059C  5D6F               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1949  00059E  0100               	movlb	0	; () banked
  1950  0005A0  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1951  0005A2  0100               	movlb	0	; () banked
  1952  0005A4  5970               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1953  0005A6  B0D8               	btfsc	status,0,c
  1954  0005A8  D025               	goto	l2511
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;Movement.c: 213: turnLeft(mL,mR);
  1958  0005AA  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1959  0005AE  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1960  0005B2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1961  0005B6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1962  0005BA  ECFC  F006         	call	_turnLeft	;wreg free
  1963                           
  1964                           ;Movement.c: 214: delay_tenth_s((3*tenth_seconds)/2);
  1965  0005BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1966  0005C0  0D03               	mullw	3
  1967  0005C2  CFF3 F015          	movff	prodl,___awdiv@dividend
  1968  0005C6  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1969  0005CA  0E00               	movlw	0
  1970  0005CC  6E18               	movwf	___awdiv@divisor+1,c
  1971  0005CE  0E02               	movlw	2
  1972  0005D0  6E17               	movwf	___awdiv@divisor,c
  1973  0005D2  ECE7  F005         	call	___awdiv	;wreg free
  1974  0005D6  5015               	movf	?___awdiv,w,c
  1975  0005D8  EC3D  F007         	call	_delay_tenth_s
  1976                           
  1977                           ;Movement.c: 215: stop(mL,mR);
  1978  0005DC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1979  0005E0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1980  0005E4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1981  0005E8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1982  0005EC  EC9F  F005         	call	_stop	;wreg free
  1983  0005F0                     l2505:
  1984                           
  1985                           ;Movement.c: 216: return 1;
  1986  0005F0  0E01               	movlw	1
  1987  0005F2  0012               	return	
  1988  0005F4                     l2511:
  1989  0005F4  0100               	movlb	0	; () banked
  1990  0005F6  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1991  0005F8  0100               	movlb	0	; () banked
  1992  0005FA  5D73               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1993  0005FC  0100               	movlb	0	; () banked
  1994  0005FE  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1995  000600  0100               	movlb	0	; () banked
  1996  000602  5974               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1997  000604  B0D8               	btfsc	status,0,c
  1998  000606  D02B               	goto	l2525
  1999                           
  2000                           ; BSR set to: 0
  2001  000608  0100               	movlb	0	; () banked
  2002  00060A  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2003  00060C  0100               	movlb	0	; () banked
  2004  00060E  5D6D               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  2005  000610  0100               	movlb	0	; () banked
  2006  000612  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2007  000614  0100               	movlb	0	; () banked
  2008  000616  596E               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2009  000618  B0D8               	btfsc	status,0,c
  2010  00061A  D021               	goto	l2525
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;Movement.c: 219: turnLeft(mL,mR);
  2014  00061C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2015  000620  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2016  000624  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2017  000628  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2018  00062C  ECFC  F006         	call	_turnLeft	;wreg free
  2019                           
  2020                           ;Movement.c: 220: delay_tenth_s((tenth_seconds)/2);
  2021  000630  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  2022  000634  6A16               	clrf	___awdiv@dividend+1,c
  2023  000636  0E00               	movlw	0
  2024  000638  6E18               	movwf	___awdiv@divisor+1,c
  2025  00063A  0E02               	movlw	2
  2026  00063C  6E17               	movwf	___awdiv@divisor,c
  2027  00063E  ECE7  F005         	call	___awdiv	;wreg free
  2028  000642  5015               	movf	?___awdiv,w,c
  2029  000644  EC3D  F007         	call	_delay_tenth_s
  2030                           
  2031                           ;Movement.c: 221: stop(mL,mR);
  2032  000648  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2033  00064C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2034  000650  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2035  000654  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2036  000658  EC9F  F005         	call	_stop	;wreg free
  2037  00065C  D7C9               	goto	l2505
  2038  00065E                     l2525:
  2039                           
  2040                           ;Movement.c: 223: }
  2041                           ;Movement.c: 224: }
  2042                           ;Movement.c: 225: return 0;
  2043  00065E  0E00               	movlw	0
  2044  000660  0012               	return	
  2045  000662                     __end_of_ScanWithRange:
  2046                           	opt stack 0
  2047                           tblptru	equ	0xFF8
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           indf2	equ	0xFDF
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _ScanIR *****************
  2061 ;; Defined at:
  2062 ;;		line 32 in file "Movement.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2065 ;;		 -> main@mL(9), 
  2066 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2067 ;;		 -> main@mR(9), 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  2070 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  2071 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  2072 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      unsigned char 
  2075 ;; Registers used:
  2076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2082 ;;      Params:         4       0       0       0
  2083 ;;      Locals:        10       0       0       0
  2084 ;;      Temps:          2       0       0       0
  2085 ;;      Totals:        16       0       0       0
  2086 ;;Total ram usage:       16 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    5
  2089 ;; This function calls:
  2090 ;;		_delay_tenth_s
  2091 ;;		_grabLeftIR
  2092 ;;		_grabRightIR
  2093 ;;		_stop
  2094 ;;		_turnLeft
  2095 ;;		_turnRight
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text7
  2102  000662                     __ptext7:
  2103                           	opt stack 0
  2104  000662                     _ScanIR:
  2105                           	opt stack 25
  2106                           
  2107                           ;Movement.c: 34: unsigned int SensorResult[2];
  2108                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  2109                           
  2110                           ;incstack = 0
  2111  000662  0E00               	movlw	0
  2112  000664  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  2113  000666  0EC8               	movlw	200
  2114  000668  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  2115                           
  2116                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  2117  00066A  0E05               	movlw	5
  2118  00066C  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  2119  00066E  0EDC               	movlw	220
  2120  000670  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  2121                           
  2122                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  2123  000672  0E01               	movlw	1
  2124  000674  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  2125  000676  0EF4               	movlw	244
  2126  000678  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  2127                           
  2128                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  2129  00067A  EC64  F006         	call	_grabLeftIR	;wreg free
  2130  00067E  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  2131  000682  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  2132                           
  2133                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  2134  000686  EC29  F006         	call	_grabRightIR	;wreg free
  2135  00068A  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  2136  00068E  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  2137                           
  2138                           ;Movement.c: 44: stop(mL,mR);
  2139  000692  C02F  F026         	movff	ScanIR@mL,stop@mL
  2140  000696  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2141  00069A  C031  F028         	movff	ScanIR@mR,stop@mR
  2142  00069E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2143  0006A2  EC9F  F005         	call	_stop	;wreg free
  2144                           
  2145                           ;Movement.c: 47: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  2146  0006A6  503B               	movf	ScanIR@SensorResult,w,c
  2147  0006A8  243D               	addwf	ScanIR@SensorResult+2,w,c
  2148  0006AA  6E33               	movwf	??_ScanIR& (0+255),c
  2149  0006AC  503C               	movf	ScanIR@SensorResult+1,w,c
  2150  0006AE  203E               	addwfc	ScanIR@SensorResult+3,w,c
  2151  0006B0  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  2152  0006B2  5033               	movf	??_ScanIR,w,c
  2153  0006B4  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  2154  0006B6  5034               	movf	??_ScanIR+1,w,c
  2155  0006B8  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  2156  0006BA  B0D8               	btfsc	status,0,c
  2157  0006BC  D085               	goto	l2579
  2158                           
  2159                           ;Movement.c: 50: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  2160                           ;Movement.c: 51: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  2161                           ;Movement.c: 52: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  2162  0006BE  503B               	movf	ScanIR@SensorResult,w,c
  2163  0006C0  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2164  0006C2  503C               	movf	ScanIR@SensorResult+1,w,c
  2165  0006C4  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2166  0006C6  B0D8               	btfsc	status,0,c
  2167  0006C8  D02E               	goto	l2553
  2168  0006CA  503D               	movf	ScanIR@SensorResult+2,w,c
  2169  0006CC  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2170  0006CE  503E               	movf	ScanIR@SensorResult+3,w,c
  2171  0006D0  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2172  0006D2  B0D8               	btfsc	status,0,c
  2173  0006D4  D028               	goto	l2553
  2174  0006D6  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  2175  0006DA  CFDE F033          	movff	postinc2,??_ScanIR
  2176  0006DE  CFDD F034          	movff	postdec2,??_ScanIR+1
  2177  0006E2  1E33               	comf	??_ScanIR,f,c
  2178  0006E4  1E34               	comf	??_ScanIR+1,f,c
  2179  0006E6  4A33               	infsnz	??_ScanIR,f,c
  2180  0006E8  2A34               	incf	??_ScanIR+1,f,c
  2181  0006EA  503B               	movf	ScanIR@SensorResult,w,c
  2182  0006EC  2633               	addwf	??_ScanIR,f,c
  2183  0006EE  503C               	movf	ScanIR@SensorResult+1,w,c
  2184  0006F0  2234               	addwfc	??_ScanIR+1,f,c
  2185  0006F2  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2186  0006F4  5C33               	subwf	??_ScanIR,w,c
  2187  0006F6  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2188  0006F8  5834               	subwfb	??_ScanIR+1,w,c
  2189  0006FA  A0D8               	btfss	status,0,c
  2190  0006FC  D012               	goto	l2547
  2191  0006FE  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  2192  000702  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  2193  000706  1E33               	comf	??_ScanIR,f,c
  2194  000708  1E34               	comf	??_ScanIR+1,f,c
  2195  00070A  4A33               	infsnz	??_ScanIR,f,c
  2196  00070C  2A34               	incf	??_ScanIR+1,f,c
  2197  00070E  503D               	movf	ScanIR@SensorResult+2,w,c
  2198  000710  2633               	addwf	??_ScanIR,f,c
  2199  000712  503E               	movf	ScanIR@SensorResult+3,w,c
  2200  000714  2234               	addwfc	??_ScanIR+1,f,c
  2201  000716  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2202  000718  5C33               	subwf	??_ScanIR,w,c
  2203  00071A  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2204  00071C  5834               	subwfb	??_ScanIR+1,w,c
  2205  00071E  B0D8               	btfsc	status,0,c
  2206  000720  D002               	goto	l2553
  2207  000722                     l2547:
  2208                           
  2209                           ;Movement.c: 53: return 2;
  2210  000722  0E02               	movlw	2
  2211  000724  0012               	return	
  2212  000726                     l2553:
  2213  000726  503B               	movf	ScanIR@SensorResult,w,c
  2214  000728  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2215  00072A  503C               	movf	ScanIR@SensorResult+1,w,c
  2216  00072C  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2217  00072E  A0D8               	btfss	status,0,c
  2218  000730  D023               	goto	l2567
  2219                           
  2220                           ;Movement.c: 56: stop(mL,mR);
  2221  000732  C02F  F026         	movff	ScanIR@mL,stop@mL
  2222  000736  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2223  00073A  C031  F028         	movff	ScanIR@mR,stop@mR
  2224  00073E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2225  000742  EC9F  F005         	call	_stop	;wreg free
  2226                           
  2227                           ;Movement.c: 57: turnLeft(mL,mR);
  2228  000746  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2229  00074A  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2230  00074E  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2231  000752  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2232  000756  ECFC  F006         	call	_turnLeft	;wreg free
  2233                           
  2234                           ;Movement.c: 58: delay_tenth_s(3);
  2235  00075A  0E03               	movlw	3
  2236  00075C  EC3D  F007         	call	_delay_tenth_s
  2237                           
  2238                           ;Movement.c: 59: stop(mL,mR);
  2239  000760  C02F  F026         	movff	ScanIR@mL,stop@mL
  2240  000764  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2241  000768  C031  F028         	movff	ScanIR@mR,stop@mR
  2242  00076C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2243  000770  EC9F  F005         	call	_stop	;wreg free
  2244  000774                     l2561:
  2245                           
  2246                           ;Movement.c: 60: return 1;
  2247  000774  0E01               	movlw	1
  2248  000776  0012               	return	
  2249  000778                     l2567:
  2250  000778  503B               	movf	ScanIR@SensorResult,w,c
  2251  00077A  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2252  00077C  503C               	movf	ScanIR@SensorResult+1,w,c
  2253  00077E  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2254  000780  B0D8               	btfsc	status,0,c
  2255  000782  D069               	goto	l2607
  2256                           
  2257                           ;Movement.c: 63: stop(mL,mR);
  2258  000784  C02F  F026         	movff	ScanIR@mL,stop@mL
  2259  000788  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2260  00078C  C031  F028         	movff	ScanIR@mR,stop@mR
  2261  000790  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2262  000794  EC9F  F005         	call	_stop	;wreg free
  2263                           
  2264                           ;Movement.c: 64: turnRight(mL,mR);
  2265  000798  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2266  00079C  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2267  0007A0  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2268  0007A4  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2269  0007A8  ECD7  F006         	call	_turnRight	;wreg free
  2270                           
  2271                           ;Movement.c: 65: delay_tenth_s(3);
  2272  0007AC  0E03               	movlw	3
  2273  0007AE  EC3D  F007         	call	_delay_tenth_s
  2274                           
  2275                           ;Movement.c: 66: stop(mL,mR);
  2276  0007B2  C02F  F026         	movff	ScanIR@mL,stop@mL
  2277  0007B6  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2278  0007BA  C031  F028         	movff	ScanIR@mR,stop@mR
  2279  0007BE  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2280  0007C2  EC9F  F005         	call	_stop	;wreg free
  2281  0007C6  D7D6               	goto	l2561
  2282  0007C8                     l2579:
  2283                           
  2284                           ;Movement.c: 71: stop(mL,mR);
  2285  0007C8  C02F  F026         	movff	ScanIR@mL,stop@mL
  2286  0007CC  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2287  0007D0  C031  F028         	movff	ScanIR@mR,stop@mR
  2288  0007D4  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2289  0007D8  EC9F  F005         	call	_stop	;wreg free
  2290                           
  2291                           ;Movement.c: 74: if (SensorResult[0]<=SensorResult[1]) {
  2292  0007DC  503B               	movf	ScanIR@SensorResult,w,c
  2293  0007DE  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2294  0007E0  503C               	movf	ScanIR@SensorResult+1,w,c
  2295  0007E2  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2296  0007E4  A0D8               	btfss	status,0,c
  2297  0007E6  D019               	goto	l2595
  2298                           
  2299                           ;Movement.c: 75: turnLeft(mL,mR);
  2300  0007E8  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2301  0007EC  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2302  0007F0  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2303  0007F4  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2304  0007F8  ECFC  F006         	call	_turnLeft	;wreg free
  2305                           
  2306                           ;Movement.c: 76: delay_tenth_s(5);
  2307  0007FC  0E05               	movlw	5
  2308  0007FE  EC3D  F007         	call	_delay_tenth_s
  2309                           
  2310                           ;Movement.c: 77: stop(mL,mR);
  2311  000802  C02F  F026         	movff	ScanIR@mL,stop@mL
  2312  000806  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2313  00080A  C031  F028         	movff	ScanIR@mR,stop@mR
  2314  00080E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2315  000812  EC9F  F005         	call	_stop	;wreg free
  2316  000816                     l2589:
  2317                           
  2318                           ;Movement.c: 78: return 0;
  2319  000816  0E00               	movlw	0
  2320  000818  0012               	return	
  2321  00081A                     l2595:
  2322  00081A  503B               	movf	ScanIR@SensorResult,w,c
  2323  00081C  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2324  00081E  503C               	movf	ScanIR@SensorResult+1,w,c
  2325  000820  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2326  000822  B0D8               	btfsc	status,0,c
  2327  000824  D018               	goto	l2607
  2328                           
  2329                           ;Movement.c: 81: turnRight(mL,mR);
  2330  000826  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2331  00082A  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2332  00082E  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2333  000832  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2334  000836  ECD7  F006         	call	_turnRight	;wreg free
  2335                           
  2336                           ;Movement.c: 82: delay_tenth_s(5);
  2337  00083A  0E05               	movlw	5
  2338  00083C  EC3D  F007         	call	_delay_tenth_s
  2339                           
  2340                           ;Movement.c: 83: stop(mL,mR);
  2341  000840  C02F  F026         	movff	ScanIR@mL,stop@mL
  2342  000844  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2343  000848  C031  F028         	movff	ScanIR@mR,stop@mR
  2344  00084C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2345  000850  EC9F  F005         	call	_stop	;wreg free
  2346  000854  D7E0               	goto	l2589
  2347  000856                     l2607:
  2348                           
  2349                           ;Movement.c: 85: }
  2350                           ;Movement.c: 86: }
  2351                           ;Movement.c: 87: return 0;
  2352  000856  0E00               	movlw	0
  2353  000858  0012               	return	
  2354  00085A                     __end_of_ScanIR:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           prodh	equ	0xFF4
  2358                           prodl	equ	0xFF3
  2359                           intcon	equ	0xFF2
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           indf2	equ	0xFDF
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _turnRight *****************
  2370 ;; Defined at:
  2371 ;;		line 98 in file "dc_motor.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2374 ;;		 -> main@mL(9), 
  2375 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2376 ;;		 -> main@mR(9), 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;		None               void
  2381 ;; Registers used:
  2382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2388 ;;      Params:         4       0       0       0
  2389 ;;      Locals:         0       0       0       0
  2390 ;;      Temps:          0       0       0       0
  2391 ;;      Totals:         4       0       0       0
  2392 ;;Total ram usage:        4 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    4
  2395 ;; This function calls:
  2396 ;;		_fullSpeedAhead
  2397 ;;		_stop
  2398 ;; This function is called by:
  2399 ;;		_ScanIR
  2400 ;;		_ScanWithRange
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text8
  2405  000DAE                     __ptext8:
  2406                           	opt stack 0
  2407  000DAE                     _turnRight:
  2408                           	opt stack 25
  2409                           
  2410                           ;dc_motor.c: 100: stop(mL, mR);
  2411                           
  2412                           ;incstack = 0
  2413  000DAE  C02B  F026         	movff	turnRight@mL,stop@mL
  2414  000DB2  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2415  000DB6  C02D  F028         	movff	turnRight@mR,stop@mR
  2416  000DBA  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2417  000DBE  EC9F  F005         	call	_stop	;wreg free
  2418                           
  2419                           ;dc_motor.c: 102: mL->direction=1;
  2420  000DC2  EE20 F001          	lfsr	2,1
  2421  000DC6  502B               	movf	turnRight@mL,w,c
  2422  000DC8  26D9               	addwf	fsr2l,f,c
  2423  000DCA  502C               	movf	turnRight@mL+1,w,c
  2424  000DCC  22DA               	addwfc	fsr2h,f,c
  2425  000DCE  0E01               	movlw	1
  2426  000DD0  6EDF               	movwf	indf2,c
  2427                           
  2428                           ;dc_motor.c: 103: mR->direction=0;
  2429  000DD2  EE20 F001          	lfsr	2,1
  2430  000DD6  502D               	movf	turnRight@mR,w,c
  2431  000DD8  26D9               	addwf	fsr2l,f,c
  2432  000DDA  502E               	movf	turnRight@mR+1,w,c
  2433  000DDC  22DA               	addwfc	fsr2h,f,c
  2434  000DDE  0E00               	movlw	0
  2435  000DE0  6EDF               	movwf	indf2,c
  2436                           
  2437                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2438  000DE2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2439  000DE6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2440  000DEA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2441  000DEE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2442  000DF2  EC9F  F006         	call	_fullSpeedAhead	;wreg free
  2443  000DF6  0012               	return		;funcret
  2444  000DF8                     __end_of_turnRight:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _turnLeft *****************
  2460 ;; Defined at:
  2461 ;;		line 87 in file "dc_motor.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2464 ;;		 -> main@mL(9), 
  2465 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2466 ;;		 -> main@mR(9), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;		None               void
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2478 ;;      Params:         4       0       0       0
  2479 ;;      Locals:         0       0       0       0
  2480 ;;      Temps:          0       0       0       0
  2481 ;;      Totals:         4       0       0       0
  2482 ;;Total ram usage:        4 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    4
  2485 ;; This function calls:
  2486 ;;		_fullSpeedAhead
  2487 ;;		_stop
  2488 ;; This function is called by:
  2489 ;;		_ScanIR
  2490 ;;		_ScanWithRange
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text9
  2495  000DF8                     __ptext9:
  2496                           	opt stack 0
  2497  000DF8                     _turnLeft:
  2498                           	opt stack 25
  2499                           
  2500                           ;dc_motor.c: 89: stop(mL, mR);
  2501                           
  2502                           ;incstack = 0
  2503  000DF8  C02B  F026         	movff	turnLeft@mL,stop@mL
  2504  000DFC  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2505  000E00  C02D  F028         	movff	turnLeft@mR,stop@mR
  2506  000E04  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2507  000E08  EC9F  F005         	call	_stop	;wreg free
  2508                           
  2509                           ;dc_motor.c: 91: mL->direction=0;
  2510  000E0C  EE20 F001          	lfsr	2,1
  2511  000E10  502B               	movf	turnLeft@mL,w,c
  2512  000E12  26D9               	addwf	fsr2l,f,c
  2513  000E14  502C               	movf	turnLeft@mL+1,w,c
  2514  000E16  22DA               	addwfc	fsr2h,f,c
  2515  000E18  0E00               	movlw	0
  2516  000E1A  6EDF               	movwf	indf2,c
  2517                           
  2518                           ;dc_motor.c: 92: mR->direction=1;
  2519  000E1C  EE20 F001          	lfsr	2,1
  2520  000E20  502D               	movf	turnLeft@mR,w,c
  2521  000E22  26D9               	addwf	fsr2l,f,c
  2522  000E24  502E               	movf	turnLeft@mR+1,w,c
  2523  000E26  22DA               	addwfc	fsr2h,f,c
  2524  000E28  0E01               	movlw	1
  2525  000E2A  6EDF               	movwf	indf2,c
  2526                           
  2527                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2528  000E2C  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2529  000E30  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2530  000E34  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2531  000E38  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2532  000E3C  EC9F  F006         	call	_fullSpeedAhead	;wreg free
  2533  000E40  0012               	return		;funcret
  2534  000E42                     __end_of_turnLeft:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon	equ	0xFF2
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _stop *****************
  2550 ;; Defined at:
  2551 ;;		line 67 in file "dc_motor.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2554 ;;		 -> main@mL(9), 
  2555 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2556 ;;		 -> main@mR(9), 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;		None
  2559 ;; Return value:  Size  Location     Type
  2560 ;;		None               void
  2561 ;; Registers used:
  2562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2568 ;;      Params:         4       0       0       0
  2569 ;;      Locals:         0       0       0       0
  2570 ;;      Temps:          0       0       0       0
  2571 ;;      Totals:         4       0       0       0
  2572 ;;Total ram usage:        4 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    3
  2575 ;; This function calls:
  2576 ;;		_setMotorPWM
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;;		_turnLeft
  2580 ;;		_turnRight
  2581 ;;		_ScanIR
  2582 ;;		_ScanWithRange
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text10
  2587  000B3E                     __ptext10:
  2588                           	opt stack 0
  2589  000B3E                     _stop:
  2590                           	opt stack 27
  2591                           
  2592                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2593                           
  2594                           ;incstack = 0
  2595  000B3E  D028               	goto	l2289
  2596  000B40                     l2275:
  2597                           
  2598                           ;dc_motor.c: 71: if(mL->power>0){
  2599  000B40  C026  FFD9         	movff	stop@mL,fsr2l
  2600  000B44  C027  FFDA         	movff	stop@mL+1,fsr2h
  2601  000B48  50DF               	movf	indf2,w,c
  2602  000B4A  B4D8               	btfsc	status,2,c
  2603  000B4C  D005               	goto	l2279
  2604                           
  2605                           ;dc_motor.c: 72: mL->power--;
  2606  000B4E  C026  FFD9         	movff	stop@mL,fsr2l
  2607  000B52  C027  FFDA         	movff	stop@mL+1,fsr2h
  2608  000B56  06DF               	decf	indf2,f,c
  2609  000B58                     l2279:
  2610                           
  2611                           ;dc_motor.c: 73: }
  2612                           ;dc_motor.c: 74: if(mR->power>0){
  2613  000B58  C028  FFD9         	movff	stop@mR,fsr2l
  2614  000B5C  C029  FFDA         	movff	stop@mR+1,fsr2h
  2615  000B60  50DF               	movf	indf2,w,c
  2616  000B62  B4D8               	btfsc	status,2,c
  2617  000B64  D005               	goto	l2283
  2618                           
  2619                           ;dc_motor.c: 75: mR->power--;
  2620  000B66  C028  FFD9         	movff	stop@mR,fsr2l
  2621  000B6A  C029  FFDA         	movff	stop@mR+1,fsr2h
  2622  000B6E  06DF               	decf	indf2,f,c
  2623  000B70                     l2283:
  2624                           
  2625                           ;dc_motor.c: 76: }
  2626                           ;dc_motor.c: 77: setMotorPWM(mL);
  2627  000B70  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2628  000B74  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2629  000B78  EC05  F005         	call	_setMotorPWM	;wreg free
  2630                           
  2631                           ;dc_motor.c: 78: setMotorPWM(mR);
  2632  000B7C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2633  000B80  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2634  000B84  EC05  F005         	call	_setMotorPWM	;wreg free
  2635                           
  2636                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2637  000B88  0E21               	movlw	33
  2638  000B8A                     u2207:
  2639  000B8A  2EE8               	decfsz	wreg,f,c
  2640  000B8C  D7FE               	goto	u2207
  2641  000B8E  F000               	nop	
  2642  000B90                     l2289:
  2643  000B90  C026  FFD9         	movff	stop@mL,fsr2l
  2644  000B94  C027  FFDA         	movff	stop@mL+1,fsr2h
  2645  000B98  50DF               	movf	indf2,w,c
  2646  000B9A  A4D8               	btfss	status,2,c
  2647  000B9C  D7D1               	goto	l2275
  2648  000B9E  C028  FFD9         	movff	stop@mR,fsr2l
  2649  000BA2  C029  FFDA         	movff	stop@mR+1,fsr2h
  2650  000BA6  50DF               	movf	indf2,w,c
  2651  000BA8  A4D8               	btfss	status,2,c
  2652  000BAA  D7CA               	goto	l2275
  2653                           
  2654                           ;dc_motor.c: 80: }
  2655                           ;dc_motor.c: 81: mL->direction=1;
  2656  000BAC  EE20 F001          	lfsr	2,1
  2657  000BB0  5026               	movf	stop@mL,w,c
  2658  000BB2  26D9               	addwf	fsr2l,f,c
  2659  000BB4  5027               	movf	stop@mL+1,w,c
  2660  000BB6  22DA               	addwfc	fsr2h,f,c
  2661  000BB8  0E01               	movlw	1
  2662  000BBA  6EDF               	movwf	indf2,c
  2663                           
  2664                           ;dc_motor.c: 82: mR->direction=1;
  2665  000BBC  EE20 F001          	lfsr	2,1
  2666  000BC0  5028               	movf	stop@mR,w,c
  2667  000BC2  26D9               	addwf	fsr2l,f,c
  2668  000BC4  5029               	movf	stop@mR+1,w,c
  2669  000BC6  22DA               	addwfc	fsr2h,f,c
  2670  000BC8  0E01               	movlw	1
  2671  000BCA  6EDF               	movwf	indf2,c
  2672  000BCC  0012               	return		;funcret
  2673  000BCE                     __end_of_stop:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _fullSpeedAhead *****************
  2689 ;; Defined at:
  2690 ;;		line 108 in file "dc_motor.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2693 ;;		 -> main@mL(9), 
  2694 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2695 ;;		 -> main@mR(9), 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;		None               void
  2700 ;; Registers used:
  2701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2707 ;;      Params:         4       0       0       0
  2708 ;;      Locals:         0       0       0       0
  2709 ;;      Temps:          1       0       0       0
  2710 ;;      Totals:         5       0       0       0
  2711 ;;Total ram usage:        5 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    3
  2714 ;; This function calls:
  2715 ;;		_setMotorPWM
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;;		_turnLeft
  2719 ;;		_turnRight
  2720 ;;		_fullSpeedBack
  2721 ;;		_ScanWithRange
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text11
  2726  000D3E                     __ptext11:
  2727                           	opt stack 0
  2728  000D3E                     _fullSpeedAhead:
  2729                           	opt stack 26
  2730                           
  2731                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2732                           
  2733                           ;incstack = 0
  2734  000D3E  D028               	goto	l137
  2735  000D40                     l2257:
  2736                           
  2737                           ;dc_motor.c: 112: if(mL->power<100){
  2738  000D40  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2739  000D44  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2740  000D48  0E64               	movlw	100
  2741  000D4A  60DF               	cpfslt	indf2,c
  2742  000D4C  D005               	goto	l2261
  2743                           
  2744                           ;dc_motor.c: 113: mL->power++;
  2745  000D4E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2746  000D52  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2747  000D56  2ADF               	incf	indf2,f,c
  2748  000D58                     l2261:
  2749                           
  2750                           ;dc_motor.c: 114: }
  2751                           ;dc_motor.c: 115: if(mR->power<100){
  2752  000D58  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2753  000D5C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2754  000D60  0E64               	movlw	100
  2755  000D62  60DF               	cpfslt	indf2,c
  2756  000D64  D005               	goto	l2265
  2757                           
  2758                           ;dc_motor.c: 116: mR->power++;
  2759  000D66  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2760  000D6A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2761  000D6E  2ADF               	incf	indf2,f,c
  2762  000D70                     l2265:
  2763                           
  2764                           ;dc_motor.c: 117: }
  2765                           ;dc_motor.c: 118: setMotorPWM(mL);
  2766  000D70  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2767  000D74  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2768  000D78  EC05  F005         	call	_setMotorPWM	;wreg free
  2769                           
  2770                           ;dc_motor.c: 119: setMotorPWM(mR);
  2771  000D7C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2772  000D80  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2773  000D84  EC05  F005         	call	_setMotorPWM	;wreg free
  2774                           
  2775                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2776  000D88  0E21               	movlw	33
  2777  000D8A                     u2217:
  2778  000D8A  2EE8               	decfsz	wreg,f,c
  2779  000D8C  D7FE               	goto	u2217
  2780  000D8E  F000               	nop	
  2781  000D90                     l137:
  2782  000D90  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2783  000D94  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2784  000D98  0E63               	movlw	99
  2785  000D9A  64DF               	cpfsgt	indf2,c
  2786  000D9C  D7D1               	goto	l2257
  2787  000D9E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2788  000DA2  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2789  000DA6  0E63               	movlw	99
  2790  000DA8  64DF               	cpfsgt	indf2,c
  2791  000DAA  D7CA               	goto	l2257
  2792  000DAC  0012               	return	
  2793  000DAE                     __end_of_fullSpeedAhead:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           intcon	equ	0xFF2
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           indf2	equ	0xFDF
  2802                           postinc2	equ	0xFDE
  2803                           postdec2	equ	0xFDD
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _setMotorPWM *****************
  2809 ;; Defined at:
  2810 ;;		line 26 in file "dc_motor.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2813 ;;		 -> main@mR(9), main@mL(9), 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  PWMduty         2   35[COMRAM] int 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;		None               void
  2818 ;; Registers used:
  2819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2825 ;;      Params:         2       0       0       0
  2826 ;;      Locals:         2       0       0       0
  2827 ;;      Temps:          5       0       0       0
  2828 ;;      Totals:         9       0       0       0
  2829 ;;Total ram usage:        9 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    2
  2832 ;; This function calls:
  2833 ;;		___awdiv
  2834 ;;		___wmul
  2835 ;; This function is called by:
  2836 ;;		_stop
  2837 ;;		_fullSpeedAhead
  2838 ;;		_setMotorFullSpeed
  2839 ;;		_stopMotor
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text12
  2844  000A0A                     __ptext12:
  2845                           	opt stack 0
  2846  000A0A                     _setMotorPWM:
  2847                           	opt stack 27
  2848                           
  2849                           ;dc_motor.c: 28: int PWMduty;
  2850                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2851                           
  2852                           ;incstack = 0
  2853  000A0A  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2854  000A0E  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2855  000A12  50DF               	movf	indf2,w,c
  2856  000A14  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2857  000A16  501F               	movf	??_setMotorPWM,w,c
  2858  000A18  6E0F               	movwf	___wmul@multiplier,c
  2859  000A1A  6A10               	clrf	___wmul@multiplier+1,c
  2860  000A1C  EE20 F007          	lfsr	2,7
  2861  000A20  501D               	movf	setMotorPWM@m,w,c
  2862  000A22  26D9               	addwf	fsr2l,f,c
  2863  000A24  501E               	movf	setMotorPWM@m+1,w,c
  2864  000A26  22DA               	addwfc	fsr2h,f,c
  2865  000A28  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2866  000A2C  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2867  000A30  ECA0  F007         	call	___wmul	;wreg free
  2868  000A34  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2869  000A38  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2870  000A3C  0E00               	movlw	0
  2871  000A3E  6E18               	movwf	___awdiv@divisor+1,c
  2872  000A40  0E64               	movlw	100
  2873  000A42  6E17               	movwf	___awdiv@divisor,c
  2874  000A44  ECE7  F005         	call	___awdiv	;wreg free
  2875  000A48  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2876  000A4C  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2877                           
  2878                           ;dc_motor.c: 32: if (m->direction)
  2879  000A50  EE20 F001          	lfsr	2,1
  2880  000A54  501D               	movf	setMotorPWM@m,w,c
  2881  000A56  26D9               	addwf	fsr2l,f,c
  2882  000A58  501E               	movf	setMotorPWM@m+1,w,c
  2883  000A5A  22DA               	addwfc	fsr2h,f,c
  2884  000A5C  50DF               	movf	indf2,w,c
  2885  000A5E  B4D8               	btfsc	status,2,c
  2886  000A60  D02C               	goto	l2253
  2887                           
  2888                           ;dc_motor.c: 33: {
  2889                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2890  000A62  EE20 F006          	lfsr	2,6
  2891  000A66  501D               	movf	setMotorPWM@m,w,c
  2892  000A68  26D9               	addwf	fsr2l,f,c
  2893  000A6A  501E               	movf	setMotorPWM@m+1,w,c
  2894  000A6C  22DA               	addwfc	fsr2h,f,c
  2895  000A6E  50DF               	movf	indf2,w,c
  2896  000A70  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2897  000A72  0E01               	movlw	1
  2898  000A74  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2899  000A76  2A1F               	incf	??_setMotorPWM,f,c
  2900  000A78  D002               	goto	u1644
  2901  000A7A                     u1645:
  2902  000A7A  90D8               	bcf	status,0,c
  2903  000A7C  3620               	rlcf	??_setMotorPWM+1,f,c
  2904  000A7E                     u1644:
  2905  000A7E  2E1F               	decfsz	??_setMotorPWM,f,c
  2906  000A80  D7FC               	goto	u1645
  2907  000A82  5020               	movf	??_setMotorPWM+1,w,c
  2908  000A84  108A               	iorwf	3978,w,c	;volatile
  2909  000A86  6E8A               	movwf	3978,c	;volatile
  2910                           
  2911                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2912  000A88  EE20 F007          	lfsr	2,7
  2913  000A8C  501D               	movf	setMotorPWM@m,w,c
  2914  000A8E  26D9               	addwf	fsr2l,f,c
  2915  000A90  501E               	movf	setMotorPWM@m+1,w,c
  2916  000A92  22DA               	addwfc	fsr2h,f,c
  2917  000A94  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2918  000A98  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2919  000A9C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2920  000AA0  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2921  000AA4  1E21               	comf	??_setMotorPWM+2,f,c
  2922  000AA6  1E22               	comf	??_setMotorPWM+3,f,c
  2923  000AA8  4A21               	infsnz	??_setMotorPWM+2,f,c
  2924  000AAA  2A22               	incf	??_setMotorPWM+3,f,c
  2925  000AAC  501F               	movf	??_setMotorPWM,w,c
  2926  000AAE  2421               	addwf	??_setMotorPWM+2,w,c
  2927  000AB0  6E24               	movwf	setMotorPWM@PWMduty,c
  2928  000AB2  5020               	movf	??_setMotorPWM+1,w,c
  2929  000AB4  2022               	addwfc	??_setMotorPWM+3,w,c
  2930  000AB6  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2931                           
  2932                           ;dc_motor.c: 36: }
  2933  000AB8  D014               	goto	l107
  2934  000ABA                     l2253:
  2935                           
  2936                           ;dc_motor.c: 37: else
  2937                           ;dc_motor.c: 38: {
  2938                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2939  000ABA  EE20 F006          	lfsr	2,6
  2940  000ABE  501D               	movf	setMotorPWM@m,w,c
  2941  000AC0  26D9               	addwf	fsr2l,f,c
  2942  000AC2  501E               	movf	setMotorPWM@m+1,w,c
  2943  000AC4  22DA               	addwfc	fsr2h,f,c
  2944  000AC6  50DF               	movf	indf2,w,c
  2945  000AC8  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2946  000ACA  0E01               	movlw	1
  2947  000ACC  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2948  000ACE  2A1F               	incf	??_setMotorPWM,f,c
  2949  000AD0  D002               	goto	u1654
  2950  000AD2                     u1655:
  2951  000AD2  90D8               	bcf	status,0,c
  2952  000AD4  3620               	rlcf	??_setMotorPWM+1,f,c
  2953  000AD6                     u1654:
  2954  000AD6  2E1F               	decfsz	??_setMotorPWM,f,c
  2955  000AD8  D7FC               	goto	u1655
  2956  000ADA  5020               	movf	??_setMotorPWM+1,w,c
  2957  000ADC  0AFF               	xorlw	255
  2958  000ADE  148A               	andwf	3978,w,c	;volatile
  2959  000AE0  6E8A               	movwf	3978,c	;volatile
  2960  000AE2                     l107:
  2961                           
  2962                           ;dc_motor.c: 40: }
  2963                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2964  000AE2  EE20 F002          	lfsr	2,2
  2965  000AE6  501D               	movf	setMotorPWM@m,w,c
  2966  000AE8  26D9               	addwf	fsr2l,f,c
  2967  000AEA  501E               	movf	setMotorPWM@m+1,w,c
  2968  000AEC  22DA               	addwfc	fsr2h,f,c
  2969  000AEE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2970  000AF2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2971  000AF6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2972  000AFA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2973  000AFE  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2974  000B00  46E8               	rlncf	wreg,f,c
  2975  000B02  0BFC               	andlw	252
  2976  000B04  6EDF               	movwf	indf2,c
  2977                           
  2978                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2979  000B06  EE20 F004          	lfsr	2,4
  2980  000B0A  501D               	movf	setMotorPWM@m,w,c
  2981  000B0C  26D9               	addwf	fsr2l,f,c
  2982  000B0E  501E               	movf	setMotorPWM@m+1,w,c
  2983  000B10  22DA               	addwfc	fsr2h,f,c
  2984  000B12  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2985  000B16  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2986  000B1A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2987  000B1E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2988  000B22  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2989  000B26  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2990  000B2A  0E06               	movlw	6
  2991  000B2C  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2992  000B2E                     u1665:
  2993  000B2E  3422               	rlcf	??_setMotorPWM+3,w,c
  2994  000B30  3222               	rrcf	??_setMotorPWM+3,f,c
  2995  000B32  3221               	rrcf	??_setMotorPWM+2,f,c
  2996  000B34  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2997  000B36  D7FB               	goto	u1665
  2998  000B38  5021               	movf	??_setMotorPWM+2,w,c
  2999  000B3A  6EDF               	movwf	indf2,c
  3000  000B3C  0012               	return		;funcret
  3001  000B3E                     __end_of_setMotorPWM:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           postinc0	equ	0xFEE
  3008                           wreg	equ	0xFE8
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function ___wmul *****************
  3017 ;; Defined at:
  3018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  multiplier      2   14[COMRAM] unsigned int 
  3021 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  product         2   18[COMRAM] unsigned int 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  2   14[COMRAM] unsigned int 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0, prodl, prodh
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3033 ;;      Params:         4       0       0       0
  3034 ;;      Locals:         2       0       0       0
  3035 ;;      Temps:          0       0       0       0
  3036 ;;      Totals:         6       0       0       0
  3037 ;;Total ram usage:        6 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    1
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_setMotorPWM
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text13
  3048  000F40                     __ptext13:
  3049                           	opt stack 0
  3050  000F40                     ___wmul:
  3051                           	opt stack 27
  3052                           
  3053                           ;incstack = 0
  3054  000F40  500F               	movf	___wmul@multiplier,w,c
  3055  000F42  0211               	mulwf	___wmul@multiplicand,c
  3056  000F44  CFF3 F013          	movff	prodl,___wmul@product
  3057  000F48  CFF4 F014          	movff	prodh,___wmul@product+1
  3058  000F4C  500F               	movf	___wmul@multiplier,w,c
  3059  000F4E  0212               	mulwf	___wmul@multiplicand+1,c
  3060  000F50  50F3               	movf	prodl,w,c
  3061  000F52  2614               	addwf	___wmul@product+1,f,c
  3062  000F54  5010               	movf	___wmul@multiplier+1,w,c
  3063  000F56  0211               	mulwf	___wmul@multiplicand,c
  3064  000F58  50F3               	movf	prodl,w,c
  3065  000F5A  2614               	addwf	___wmul@product+1,f,c
  3066  000F5C  C013  F00F         	movff	___wmul@product,?___wmul
  3067  000F60  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3068  000F64  0012               	return	
  3069  000F66                     __end_of___wmul:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           intcon	equ	0xFF2
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           indf2	equ	0xFDF
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function ___awdiv *****************
  3085 ;; Defined at:
  3086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  dividend        2   20[COMRAM] int 
  3089 ;;  divisor         2   22[COMRAM] int 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  quotient        2   26[COMRAM] int 
  3092 ;;  sign            1   25[COMRAM] unsigned char 
  3093 ;;  counter         1   24[COMRAM] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  2   20[COMRAM] int 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3103 ;;      Params:         4       0       0       0
  3104 ;;      Locals:         4       0       0       0
  3105 ;;      Temps:          0       0       0       0
  3106 ;;      Totals:         8       0       0       0
  3107 ;;Total ram usage:        8 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_setMotorPWM
  3114 ;;		_ScanWithRange
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text14
  3119  000BCE                     __ptext14:
  3120                           	opt stack 0
  3121  000BCE                     ___awdiv:
  3122                           	opt stack 27
  3123                           
  3124                           ;incstack = 0
  3125  000BCE  0E00               	movlw	0
  3126  000BD0  6E1A               	movwf	___awdiv@sign,c
  3127  000BD2  AE18               	btfss	___awdiv@divisor+1,7,c
  3128  000BD4  D006               	goto	l2211
  3129  000BD6  6C17               	negf	___awdiv@divisor,c
  3130  000BD8  1E18               	comf	___awdiv@divisor+1,f,c
  3131  000BDA  B0D8               	btfsc	status,0,c
  3132  000BDC  2A18               	incf	___awdiv@divisor+1,f,c
  3133  000BDE  0E01               	movlw	1
  3134  000BE0  6E1A               	movwf	___awdiv@sign,c
  3135  000BE2                     l2211:
  3136  000BE2  AE16               	btfss	___awdiv@dividend+1,7,c
  3137  000BE4  D006               	goto	l2217
  3138  000BE6  6C15               	negf	___awdiv@dividend,c
  3139  000BE8  1E16               	comf	___awdiv@dividend+1,f,c
  3140  000BEA  B0D8               	btfsc	status,0,c
  3141  000BEC  2A16               	incf	___awdiv@dividend+1,f,c
  3142  000BEE  0E01               	movlw	1
  3143  000BF0  1A1A               	xorwf	___awdiv@sign,f,c
  3144  000BF2                     l2217:
  3145  000BF2  0E00               	movlw	0
  3146  000BF4  6E1C               	movwf	___awdiv@quotient+1,c
  3147  000BF6  0E00               	movlw	0
  3148  000BF8  6E1B               	movwf	___awdiv@quotient,c
  3149  000BFA  5017               	movf	___awdiv@divisor,w,c
  3150  000BFC  1018               	iorwf	___awdiv@divisor+1,w,c
  3151  000BFE  B4D8               	btfsc	status,2,c
  3152  000C00  D01C               	goto	l2239
  3153  000C02  0E01               	movlw	1
  3154  000C04  6E19               	movwf	___awdiv@counter,c
  3155  000C06  D004               	goto	l2225
  3156  000C08                     l2223:
  3157  000C08  90D8               	bcf	status,0,c
  3158  000C0A  3617               	rlcf	___awdiv@divisor,f,c
  3159  000C0C  3618               	rlcf	___awdiv@divisor+1,f,c
  3160  000C0E  2A19               	incf	___awdiv@counter,f,c
  3161  000C10                     l2225:
  3162  000C10  AE18               	btfss	___awdiv@divisor+1,7,c
  3163  000C12  D7FA               	goto	l2223
  3164  000C14                     l2227:
  3165  000C14  90D8               	bcf	status,0,c
  3166  000C16  361B               	rlcf	___awdiv@quotient,f,c
  3167  000C18  361C               	rlcf	___awdiv@quotient+1,f,c
  3168  000C1A  5017               	movf	___awdiv@divisor,w,c
  3169  000C1C  5C15               	subwf	___awdiv@dividend,w,c
  3170  000C1E  5018               	movf	___awdiv@divisor+1,w,c
  3171  000C20  5816               	subwfb	___awdiv@dividend+1,w,c
  3172  000C22  A0D8               	btfss	status,0,c
  3173  000C24  D005               	goto	l2235
  3174  000C26  5017               	movf	___awdiv@divisor,w,c
  3175  000C28  5E15               	subwf	___awdiv@dividend,f,c
  3176  000C2A  5018               	movf	___awdiv@divisor+1,w,c
  3177  000C2C  5A16               	subwfb	___awdiv@dividend+1,f,c
  3178  000C2E  801B               	bsf	___awdiv@quotient,0,c
  3179  000C30                     l2235:
  3180  000C30  90D8               	bcf	status,0,c
  3181  000C32  3218               	rrcf	___awdiv@divisor+1,f,c
  3182  000C34  3217               	rrcf	___awdiv@divisor,f,c
  3183  000C36  2E19               	decfsz	___awdiv@counter,f,c
  3184  000C38  D7ED               	goto	l2227
  3185  000C3A                     l2239:
  3186  000C3A  501A               	movf	___awdiv@sign,w,c
  3187  000C3C  B4D8               	btfsc	status,2,c
  3188  000C3E  D004               	goto	l2243
  3189  000C40  6C1B               	negf	___awdiv@quotient,c
  3190  000C42  1E1C               	comf	___awdiv@quotient+1,f,c
  3191  000C44  B0D8               	btfsc	status,0,c
  3192  000C46  2A1C               	incf	___awdiv@quotient+1,f,c
  3193  000C48                     l2243:
  3194  000C48  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  3195  000C4C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  3196  000C50  0012               	return	
  3197  000C52                     __end_of___awdiv:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _grabRightIR *****************
  3213 ;; Defined at:
  3214 ;;		line 74 in file "IR_Reading.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3219 ;;  i               1   21[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  2   14[COMRAM] unsigned int 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3229 ;;      Params:         2       0       0       0
  3230 ;;      Locals:         3       0       0       0
  3231 ;;      Temps:          3       0       0       0
  3232 ;;      Totals:         8       0       0       0
  3233 ;;Total ram usage:        8 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    1
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_ScanIR
  3240 ;;		_ScanWithRange
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text15
  3245  000C52                     __ptext15:
  3246                           	opt stack 0
  3247  000C52                     _grabRightIR:
  3248                           	opt stack 28
  3249                           
  3250                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  3251                           
  3252                           ;incstack = 0
  3253  000C52  0E00               	movlw	0
  3254  000C54  6E15               	movwf	grabRightIR@IR_signal+1,c
  3255  000C56  0E00               	movlw	0
  3256  000C58  6E14               	movwf	grabRightIR@IR_signal,c
  3257                           
  3258                           ;IR_Reading.c: 77: unsigned char i=0;
  3259  000C5A  0E00               	movlw	0
  3260  000C5C  6E16               	movwf	grabRightIR@i,c
  3261                           
  3262                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  3263  000C5E  0E00               	movlw	0
  3264  000C60  6E16               	movwf	grabRightIR@i,c
  3265  000C62                     l2333:
  3266  000C62  0E03               	movlw	3
  3267  000C64  6416               	cpfsgt	grabRightIR@i,c
  3268  000C66  D001               	goto	l2337
  3269  000C68  D020               	goto	l2343
  3270  000C6A                     l2337:
  3271                           
  3272                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  3273  000C6A  5069               	movf	3945,w,c	;volatile
  3274  000C6C  6E11               	movwf	??_grabRightIR& (0+255),c
  3275  000C6E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  3276  000C70  0E06               	movlw	6
  3277  000C72                     u1805:
  3278  000C72  90D8               	bcf	status,0,c
  3279  000C74  3611               	rlcf	??_grabRightIR,f,c
  3280  000C76  3612               	rlcf	??_grabRightIR+1,f,c
  3281  000C78  2EE8               	decfsz	wreg,f,c
  3282  000C7A  D7FB               	goto	u1805
  3283  000C7C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  3284  000C80  90D8               	bcf	status,0,c
  3285  000C82  3213               	rrcf	??_grabRightIR+2,f,c
  3286  000C84  90D8               	bcf	status,0,c
  3287  000C86  3213               	rrcf	??_grabRightIR+2,f,c
  3288  000C88  5013               	movf	??_grabRightIR+2,w,c
  3289  000C8A  1211               	iorwf	??_grabRightIR,f,c
  3290  000C8C  0E00               	movlw	0
  3291  000C8E  1212               	iorwf	??_grabRightIR+1,f,c
  3292  000C90  5011               	movf	??_grabRightIR,w,c
  3293  000C92  2614               	addwf	grabRightIR@IR_signal,f,c
  3294  000C94  5012               	movf	??_grabRightIR+1,w,c
  3295  000C96  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3296                           
  3297                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3298  000C98  0E82               	movlw	130
  3299  000C9A  6E11               	movwf	??_grabRightIR& (0+255),c
  3300  000C9C  0EDE               	movlw	222
  3301  000C9E                     u2227:
  3302  000C9E  2EE8               	decfsz	wreg,f,c
  3303  000CA0  D7FE               	goto	u2227
  3304  000CA2  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3305  000CA4  D7FC               	goto	u2227
  3306  000CA6  2A16               	incf	grabRightIR@i,f,c
  3307  000CA8  D7DC               	goto	l2333
  3308  000CAA                     l2343:
  3309                           
  3310                           ;IR_Reading.c: 83: }
  3311                           ;IR_Reading.c: 85: return IR_signal>>2;
  3312  000CAA  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3313  000CAE  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3314  000CB2  90D8               	bcf	status,0,c
  3315  000CB4  3212               	rrcf	??_grabRightIR+1,f,c
  3316  000CB6  3211               	rrcf	??_grabRightIR,f,c
  3317  000CB8  90D8               	bcf	status,0,c
  3318  000CBA  3212               	rrcf	??_grabRightIR+1,f,c
  3319  000CBC  3211               	rrcf	??_grabRightIR,f,c
  3320  000CBE  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3321  000CC2  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3322  000CC6  0012               	return	
  3323  000CC8                     __end_of_grabRightIR:
  3324                           	opt stack 0
  3325                           tblptru	equ	0xFF8
  3326                           prodh	equ	0xFF4
  3327                           prodl	equ	0xFF3
  3328                           intcon	equ	0xFF2
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function _grabLeftIR *****************
  3339 ;; Defined at:
  3340 ;;		line 90 in file "IR_Reading.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3345 ;;  i               1   21[COMRAM] unsigned char 
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  2   14[COMRAM] unsigned int 
  3348 ;; Registers used:
  3349 ;;		wreg, status,2, status,0
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3355 ;;      Params:         2       0       0       0
  3356 ;;      Locals:         3       0       0       0
  3357 ;;      Temps:          3       0       0       0
  3358 ;;      Totals:         8       0       0       0
  3359 ;;Total ram usage:        8 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    1
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_ScanIR
  3366 ;;		_ScanWithRange
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text16
  3371  000CC8                     __ptext16:
  3372                           	opt stack 0
  3373  000CC8                     _grabLeftIR:
  3374                           	opt stack 28
  3375                           
  3376                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3377                           
  3378                           ;incstack = 0
  3379  000CC8  0E00               	movlw	0
  3380  000CCA  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3381  000CCC  0E00               	movlw	0
  3382  000CCE  6E14               	movwf	grabLeftIR@IR_signal,c
  3383                           
  3384                           ;IR_Reading.c: 93: unsigned char i=0;
  3385  000CD0  0E00               	movlw	0
  3386  000CD2  6E16               	movwf	grabLeftIR@i,c
  3387                           
  3388                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3389  000CD4  0E00               	movlw	0
  3390  000CD6  6E16               	movwf	grabLeftIR@i,c
  3391  000CD8                     l2317:
  3392  000CD8  0E03               	movlw	3
  3393  000CDA  6416               	cpfsgt	grabLeftIR@i,c
  3394  000CDC  D001               	goto	l2321
  3395  000CDE  D020               	goto	l2327
  3396  000CE0                     l2321:
  3397                           
  3398                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3399  000CE0  5067               	movf	3943,w,c	;volatile
  3400  000CE2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3401  000CE4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3402  000CE6  0E06               	movlw	6
  3403  000CE8                     u1775:
  3404  000CE8  90D8               	bcf	status,0,c
  3405  000CEA  3611               	rlcf	??_grabLeftIR,f,c
  3406  000CEC  3612               	rlcf	??_grabLeftIR+1,f,c
  3407  000CEE  2EE8               	decfsz	wreg,f,c
  3408  000CF0  D7FB               	goto	u1775
  3409  000CF2  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3410  000CF6  90D8               	bcf	status,0,c
  3411  000CF8  3213               	rrcf	??_grabLeftIR+2,f,c
  3412  000CFA  90D8               	bcf	status,0,c
  3413  000CFC  3213               	rrcf	??_grabLeftIR+2,f,c
  3414  000CFE  5013               	movf	??_grabLeftIR+2,w,c
  3415  000D00  1211               	iorwf	??_grabLeftIR,f,c
  3416  000D02  0E00               	movlw	0
  3417  000D04  1212               	iorwf	??_grabLeftIR+1,f,c
  3418  000D06  5011               	movf	??_grabLeftIR,w,c
  3419  000D08  2614               	addwf	grabLeftIR@IR_signal,f,c
  3420  000D0A  5012               	movf	??_grabLeftIR+1,w,c
  3421  000D0C  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3422                           
  3423                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3424  000D0E  0E82               	movlw	130
  3425  000D10  6E11               	movwf	??_grabLeftIR& (0+255),c
  3426  000D12  0EDE               	movlw	222
  3427  000D14                     u2237:
  3428  000D14  2EE8               	decfsz	wreg,f,c
  3429  000D16  D7FE               	goto	u2237
  3430  000D18  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3431  000D1A  D7FC               	goto	u2237
  3432  000D1C  2A16               	incf	grabLeftIR@i,f,c
  3433  000D1E  D7DC               	goto	l2317
  3434  000D20                     l2327:
  3435                           
  3436                           ;IR_Reading.c: 99: }
  3437                           ;IR_Reading.c: 101: return IR_signal>>2;
  3438  000D20  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3439  000D24  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3440  000D28  90D8               	bcf	status,0,c
  3441  000D2A  3212               	rrcf	??_grabLeftIR+1,f,c
  3442  000D2C  3211               	rrcf	??_grabLeftIR,f,c
  3443  000D2E  90D8               	bcf	status,0,c
  3444  000D30  3212               	rrcf	??_grabLeftIR+1,f,c
  3445  000D32  3211               	rrcf	??_grabLeftIR,f,c
  3446  000D34  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3447  000D38  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3448  000D3C  0012               	return	
  3449  000D3E                     __end_of_grabLeftIR:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           prodh	equ	0xFF4
  3453                           prodl	equ	0xFF3
  3454                           intcon	equ	0xFF2
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _delay_tenth_s *****************
  3465 ;; Defined at:
  3466 ;;		line 19 in file "Movement.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  tenth_second    1    wreg     unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3471 ;;  i               2   16[COMRAM] unsigned int 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;		None               void
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3481 ;;      Params:         0       0       0       0
  3482 ;;      Locals:         3       0       0       0
  3483 ;;      Temps:          1       0       0       0
  3484 ;;      Totals:         4       0       0       0
  3485 ;;Total ram usage:        4 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    1
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_ScanIR
  3492 ;;		_ScanWithRange
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text17
  3497  000E7A                     __ptext17:
  3498                           	opt stack 0
  3499  000E7A                     _delay_tenth_s:
  3500                           	opt stack 28
  3501                           
  3502                           ;incstack = 0
  3503                           ;delay_tenth_s@tenth_seconds stored from wreg
  3504  000E7A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3505                           
  3506                           ;Movement.c: 20: unsigned int i=0;
  3507  000E7C  0E00               	movlw	0
  3508  000E7E  6E12               	movwf	delay_tenth_s@i+1,c
  3509  000E80  0E00               	movlw	0
  3510  000E82  6E11               	movwf	delay_tenth_s@i,c
  3511                           
  3512                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3513  000E84  0E00               	movlw	0
  3514  000E86  6E12               	movwf	delay_tenth_s@i+1,c
  3515  000E88  0E01               	movlw	1
  3516  000E8A  6E11               	movwf	delay_tenth_s@i,c
  3517  000E8C  D009               	goto	l2313
  3518  000E8E                     l2309:
  3519                           
  3520                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3521  000E8E  0E82               	movlw	130
  3522  000E90  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3523  000E92  0EDE               	movlw	222
  3524  000E94                     u2247:
  3525  000E94  2EE8               	decfsz	wreg,f,c
  3526  000E96  D7FE               	goto	u2247
  3527  000E98  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3528  000E9A  D7FC               	goto	u2247
  3529  000E9C  4A11               	infsnz	delay_tenth_s@i,f,c
  3530  000E9E  2A12               	incf	delay_tenth_s@i+1,f,c
  3531  000EA0                     l2313:
  3532  000EA0  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3533  000EA2  0D02               	mullw	2
  3534  000EA4  5011               	movf	delay_tenth_s@i,w,c
  3535  000EA6  5CF3               	subwf	prodl,w,c
  3536  000EA8  5012               	movf	delay_tenth_s@i+1,w,c
  3537  000EAA  58F4               	subwfb	prodh,w,c
  3538  000EAC  A0D8               	btfss	status,0,c
  3539  000EAE  0012               	return	
  3540  000EB0  D7EE               	goto	l2309
  3541  000EB2                     __end_of_delay_tenth_s:
  3542                           	opt stack 0
  3543                           tblptru	equ	0xFF8
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           intcon	equ	0xFF2
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _InterruptHandlerHigh *****************
  3557 ;; Defined at:
  3558 ;;		line 16 in file "main.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3572 ;;      Params:         0       0       0       0
  3573 ;;      Locals:         0       0       0       0
  3574 ;;      Temps:         14       0       0       0
  3575 ;;      Totals:        14       0       0       0
  3576 ;;Total ram usage:       14 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		Interrupt level 2
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	intcode
  3586  000008                     __pintcode:
  3587                           	opt stack 0
  3588  000008                     _InterruptHandlerHigh:
  3589                           	opt stack 25
  3590                           
  3591                           ;incstack = 0
  3592  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3593  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3594  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3595  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3596  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3597  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3598  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3599  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3600  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3601  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3602  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3603  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3604  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3605  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3606  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3607                           
  3608                           ;main.c: 18: if (PIR1bits.RCIF) {
  3609  000042  AA9E               	btfss	3998,5,c	;volatile
  3610  000044  D013               	goto	i2l52
  3611                           
  3612                           ;main.c: 19: ReceivedString[i]=RCREG;
  3613  000046  504F               	movf	_i,w,c	;volatile
  3614  000048  0D01               	mullw	1
  3615  00004A  0E3F               	movlw	low _ReceivedString
  3616  00004C  24F3               	addwf	prodl,w,c
  3617  00004E  6ED9               	movwf	fsr2l,c
  3618  000050  0E00               	movlw	high _ReceivedString
  3619  000052  20F4               	addwfc	prodh,w,c
  3620  000054  6EDA               	movwf	fsr2h,c
  3621  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3622                           
  3623                           ;main.c: 20: if (i==15){
  3624  00005A  0E0F               	movlw	15
  3625  00005C  184F               	xorwf	_i,w,c	;volatile
  3626  00005E  A4D8               	btfss	status,2,c
  3627  000060  D003               	goto	i2l1461
  3628                           
  3629                           ;main.c: 21: i=0;
  3630  000062  0E00               	movlw	0
  3631  000064  6E4F               	movwf	_i,c	;volatile
  3632                           
  3633                           ;main.c: 22: }else{
  3634  000066  D001               	goto	i2l1463
  3635  000068                     i2l1461:
  3636                           
  3637                           ;main.c: 23: i++;
  3638  000068  2A4F               	incf	_i,f,c	;volatile
  3639  00006A                     i2l1463:
  3640                           
  3641                           ;main.c: 24: }
  3642                           ;main.c: 25: PIR1bits.RCIF=0;
  3643  00006A  9A9E               	bcf	3998,5,c	;volatile
  3644  00006C                     i2l52:
  3645  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3646  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3647  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3648  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3649  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3650  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3651  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3652  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3653  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3654  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3655  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3656  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3657  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3658  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3659  0000A4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3660  0000A6  0011               	retfie		f
  3661  0000A8                     __end_of_InterruptHandlerHigh:
  3662                           	opt stack 0
  3663  0000                     pclatu	equ	0xFFB
  3664                           pclath	equ	0xFFA
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           postinc0	equ	0xFEE
  3673                           fsr0h	equ	0xFEA
  3674                           fsr0l	equ	0xFE9
  3675                           wreg	equ	0xFE8
  3676                           fsr1h	equ	0xFE2
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           pclatu	equ	0xFFB
  3685                           pclath	equ	0xFFA
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           fsr0h	equ	0xFEA
  3695                           fsr0l	equ	0xFE9
  3696                           wreg	equ	0xFE8
  3697                           fsr1h	equ	0xFE2
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706                           	psect	rparam
  3707  0000                     pclatu	equ	0xFFB
  3708                           pclath	equ	0xFFA
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           postinc0	equ	0xFEE
  3717                           fsr0h	equ	0xFEA
  3718                           fsr0l	equ	0xFE9
  3719                           wreg	equ	0xFE8
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729                           	psect	temp
  3730  000050                     btemp:
  3731                           	opt stack 0
  3732  000050                     	ds	1
  3733  0000                     int$flags	set	btemp
  3734                           pclatu	equ	0xFFB
  3735                           pclath	equ	0xFFA
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           postinc0	equ	0xFEE
  3744                           fsr0h	equ	0xFEA
  3745                           fsr0l	equ	0xFE9
  3746                           wreg	equ	0xFE8
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      79
    BANK0           160     45      45
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   79146
                                             21 BANK0     24    24      0
                             _ScanIR
                      _ScanWithRange
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3476
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       28    23      5   35644
                                             46 COMRAM     7     2      5
                                              0 BANK0     21    21      0
                            ___awdiv
                      _delay_tenth_s
                     _fullSpeedAhead
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   29237
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4   10186
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   10956
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6186
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3198
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2026
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     869
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2D      2D       5       28.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C       3        0.0%
DATA                 0      0      7C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 20:10:18 2018

                        ?_grabRightIR 000F                                     _i 004F  
                                  l55 08F6                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                                   l107 0AE2  
                                 l137 0D90                           grabLeftIR@i 0016  
                                 prod 000FF3                                   wreg 000FE8  
                                l2211 0BE2                                  l2223 0C08  
                                l2313 0EA0                                  l2321 0CE0  
                                l2225 0C10                                  l2217 0BF2  
                                l2243 0C48                                  l2235 0C30  
                                l2227 0C14                                  l2411 02EE  
                                l2309 0E8E                                  l2317 0CD8  
                                l2333 0C62                                  l2253 0ABA  
                                l2261 0D58                                  l2405 02EA  
                                l2327 0D20                                  l2343 0CAA  
                                l2239 0C3A                                  l2511 05F4  
                                l2431 03A8                                  l2337 0C6A  
                                l2265 0D70                                  l2257 0D40  
                                l2505 05F0                                  l2425 03A4  
                                l2283 0B70                                  l2275 0B40  
                                l2451 045C                                  l2419 0372  
                                l2525 065E                                  l2279 0B58  
                                l2607 0856                                  l2439 042C  
                                l2391 0252                                  l2383 01D6  
                                l2289 0B90                                  l2561 0774  
                                l2553 0726                                  l2481 053E  
                                l2547 0722                                  l2459 04E0  
                                l2467 04F6                                  l2387 0214  
                                l1835 0E56                                  l2635 08FC  
                                l2567 0778                                  l2495 0582  
                                l1839 0E68                                  l2663 09BC  
                                l2655 0976                                  l1849 0F2E  
                                l2673 09EA                                  l2595 081A  
                                l2579 07C8                                  l2667 09CA  
                                l2659 099A                                  l2589 0816  
                                l2677 09F0                                  _LATB 000F8A  
                                u2207 0B8A                                  u1175 0F2A  
                                u1176 0F2C                                  u2217 0D8A  
                                u2227 0C9E                                  u1195 0F3C  
                                u1196 0F3E                                  u2237 0D14  
                                u2247 0E94                                  u1644 0A7E  
                                u1805 0C72                                  u1645 0A7A  
                                u2197 0E5C                                  u1654 0AD6  
                                u1655 0AD2                                  u1665 0B2E  
                                u1775 0CE8                                  i2l52 006C  
                                _main 085A                         main@ScanAngle 0078  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0050  
                                _stop 0B3E                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 0C52                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                       ___awdiv@counter 0019  
                               _RCREG 000FAE                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 0E7A                                 main@i 0077  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 05B6                       __initialization 0F88  
                        __end_of_main 0A0A                          __end_of_stop 0BCE  
                      delay_tenth_s@i 0011                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 0F40                                ??_main 003F  
                              ??_stop 002A                         __activetblptr 000002  
                       ?_initMotorPWM 0001                          ?_setMotorPWM 001D  
              __size_of_fullSpeedBack 0036                      ___awdiv@dividend 0015  
                              i2l1461 0068                                i2l1463 006A  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 0EB2  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                              _ScanIR 0662                                ___wmul 0F40  
                           ??___awdiv 0019                                _initIR 0F66  
                __size_of_grabRightIR 0076                                clear_0 0F8E  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                              main@mL 007B                                main@mR 0084  
                      ??_initMotorPWM 000F                         _ScanWithRange 00AC  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0E42  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 0F94  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 0EB2                        ?_ScanWithRange 002F  
       __size_of_InterruptHandlerHigh 00A0            delay_tenth_s@tenth_seconds 0010  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 0CC8  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                __size_of_setMotorPWM 0134                          _enableSensor 0F1A  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 0F1A  
                             __Hparam 0000                               __Lparam 0000  
                     __size_of_ScanIR 01F8                               ___awdiv 0BCE  
                     __size_of___wmul 0026                       __size_of_initIR 0022  
                             __pcinit 0F88                       ??_ScanWithRange 0034  
                             _delay_s 0E42                               __ramtop 0300  
                           ?_turnLeft 002B                               __ptext0 085A  
                             __ptext1 0EE8                               __ptext2 0F66  
                             __ptext3 0EB2                               __ptext4 0F1A  
                             __ptext5 0E42                               __ptext6 00AC  
                             __ptext7 0662                               __ptext8 0DAE  
                             __ptext9 0DF8                  end_of_initialization 0F94  
                  setMotorPWM@PWMduty 0024                         __Lmediumconst 0000  
                  ScanIR@SensorResult 003B                       ??_fullSpeedBack 002F  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0DF8  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0039                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 085A  
                      _fullSpeedAhead 0D3E                        _ReceivedString 003F  
                      __end_of___wmul 0F66                           _BAUDCONbits 000FAA  
                      __end_of_initIR 0F88                __size_of_delay_tenth_s 0038  
                 start_initialization 0F88                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00A8                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 0DAE                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 0CC8                          _initMotorPWM 0EE8  
                         __pbssCOMRAM 003F                         __pcstackBANK0 0060  
    ScanWithRange@DirectionFoundLimit 0065                         _delay_tenth_s 0E7A  
   ScanWithRange@ClearSignalTolerance 0063                       ?_fullSpeedAhead 0026  
                           __pintcode 0008                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 006D            ScanWithRange@SensorResultL 0069  
          ScanWithRange@SensorResultR 0071                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 0C52                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 0662  
                        setMotorPWM@m 001D                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 002F                              ScanIR@mR 0031  
                        ??_grabLeftIR 0011                             _turnRight 0DAE  
          ScanIR@ClearSignalTolerance 0035                   __end_of_setMotorPWM 0B3E  
                            __Hrparam 0000                              __Lrparam 0000  
               __end_of_fullSpeedBack 0EE8                    __end_of_grabLeftIR 0D3E  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                          ?_turnRight 002B                              __ptext10 0B3E  
                            __ptext11 0D3E                              __ptext12 0A0A  
                            __ptext13 0F40                              __ptext14 0BCE  
                            __ptext15 0C52                              __ptext16 0CC8  
                            __ptext17 0E7A                       ??_delay_tenth_s 000F  
                       __size_of_main 01B0             ScanWithRange@ResultFalseC 0061  
                  main@DirectionFound 007A             ScanWithRange@ResultFalseL 0060  
           ScanWithRange@ResultFalseR 0062                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
                            delay_s@i 0011                              int$flags 0050  
                            main@mode 0079                              main@test 0075  
                            _turnLeft 0DF8                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                            _INTCONbits 000FF2  
          ScanWithRange@tenth_seconds 0033                           _setMotorPWM 0A0A  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0067                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
