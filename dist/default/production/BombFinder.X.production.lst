

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 17:02:21 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     _ANSEL0bits	set	4024
    33  0000                     _BAUDCONbits	set	4010
    34  0000                     _CAP1BUFH	set	3945
    35  0000                     _CAP1BUFL	set	3944
    36  0000                     _CAP1CON	set	3939
    37  0000                     _CAP2BUFH	set	3943
    38  0000                     _CAP2BUFL	set	3942
    39  0000                     _CAP2CON	set	3938
    40  0000                     _INTCONbits	set	4082
    41  0000                     _IPR1bits	set	3999
    42  0000                     _LATAbits	set	3977
    43  0000                     _LATB	set	3978
    44  0000                     _LATCbits	set	3979
    45  0000                     _LATDbits	set	3980
    46  0000                     _LATEbits	set	3981
    47  0000                     _OSCCON	set	4051
    48  0000                     _OSCCONbits	set	4051
    49  0000                     _PIE1bits	set	3997
    50  0000                     _PIR1bits	set	3998
    51  0000                     _PTCON0	set	3967
    52  0000                     _PTCON1	set	3966
    53  0000                     _PTPERH	set	3962
    54  0000                     _PTPERL	set	3963
    55  0000                     _PWMCON0	set	3951
    56  0000                     _PWMCON1	set	3950
    57  0000                     _RCONbits	set	4048
    58  0000                     _RCREG	set	4014
    59  0000                     _RCSTAbits	set	4011
    60  0000                     _SPBRG	set	4015
    61  0000                     _SPBRGH	set	4016
    62  0000                     _T5CON	set	4023
    63  0000                     _TRISAbits	set	3986
    64  0000                     _TRISBbits	set	3987
    65  0000                     _TRISC	set	3988
    66  0000                     _TRISCbits	set	3988
    67  0000                     _TRISDbits	set	3989
    68  0000                     _TRISEbits	set	3990
    69  0000                     _TXREG	set	4013
    70  0000                     _TXSTAbits	set	4012
    71  0000                     _PDC0H	set	3960
    72  0000                     _PDC0L	set	3961
    73  0000                     _PDC1H	set	3958
    74  0000                     _PDC1L	set	3959
    75                           
    76                           ; #config settings
    77  0000                     
    78                           	psect	cinit
    79  000DB8                     __pcinit:
    80                           	opt stack 0
    81  000DB8                     start_initialization:
    82                           	opt stack 0
    83  000DB8                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to COMRAM (17 bytes)
    87  000DB8  EE00  F03B         	lfsr	0,__pbssCOMRAM
    88  000DBC  0E11               	movlw	17
    89  000DBE                     clear_0:
    90  000DBE  6AEE               	clrf	postinc0,c
    91  000DC0  06E8               	decf	wreg,f,c
    92  000DC2  E1FD               	bnz	clear_0
    93  000DC4                     end_of_initialization:
    94                           	opt stack 0
    95  000DC4                     __end_of__initialization:
    96                           	opt stack 0
    97  000DC4  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    98  000DC6  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    99  000DC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   100  000DCA  6EF8               	movwf	tblptru,c
   101  000DCC  0100               	movlb	0
   102  000DCE  EF40  F003         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssCOMRAM
   108  00003B                     __pbssCOMRAM:
   109                           	opt stack 0
   110  00003B                     _ReceivedString:
   111                           	opt stack 0
   112  00003B                     	ds	16
   113  00004B                     _i:
   114                           	opt stack 0
   115  00004B                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	cstackBANK0
   121  000060                     __pcstackBANK0:
   122                           	opt stack 0
   123  000060                     ScanWithRange@SensorResultL:
   124                           	opt stack 0
   125                           
   126                           ; 4 bytes @ 0x0
   127  000060                     	ds	4
   128  000064                     ScanWithRange@SensorResultC:
   129                           	opt stack 0
   130                           
   131                           ; 4 bytes @ 0x4
   132  000064                     	ds	4
   133  000068                     ScanWithRange@SensorResultR:
   134                           	opt stack 0
   135                           
   136                           ; 4 bytes @ 0x8
   137  000068                     	ds	4
   138  00006C                     ScanWithRange@DirectionFoundTolerance:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0xC
   142  00006C                     	ds	2
   143  00006E                     main@test:
   144                           	opt stack 0
   145                           
   146                           ; 2 bytes @ 0xE
   147  00006E                     	ds	2
   148  000070                     main@i:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x10
   152  000070                     	ds	1
   153  000071                     main@ScanAngle:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x11
   157  000071                     	ds	1
   158  000072                     main@mode:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0x12
   162  000072                     	ds	1
   163  000073                     main@DirectionFound:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0x13
   167  000073                     	ds	1
   168  000074                     main@mL:
   169                           	opt stack 0
   170                           
   171                           ; 9 bytes @ 0x14
   172  000074                     	ds	9
   173  00007D                     main@mR:
   174                           	opt stack 0
   175                           
   176                           ; 9 bytes @ 0x1D
   177  00007D                     	ds	9
   178                           tblptru	equ	0xFF8
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	opt stack 0
   185  000001                     ??_InterruptHandlerHigh:
   186  000001                     
   187                           ; 0 bytes @ 0x0
   188  000001                     	ds	14
   189  00000F                     ??_delay_s:
   190  00000F                     ??_delay_tenth_s:
   191  00000F                     ?_grabLeftIR:
   192                           	opt stack 0
   193  00000F                     ?_grabRightIR:
   194                           	opt stack 0
   195  00000F                     ?___wmul:
   196                           	opt stack 0
   197  00000F                     _initRFID$1294:
   198                           	opt stack 0
   199  00000F                     enableSensor@status:
   200                           	opt stack 0
   201  00000F                     ___wmul@multiplier:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0xE
   205  00000F                     	ds	1
   206  000010                     delay_s@seconds:
   207                           	opt stack 0
   208  000010                     delay_tenth_s@tenth_seconds:
   209                           	opt stack 0
   210  000010                     enableSensor@sensor:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0xF
   214  000010                     	ds	1
   215  000011                     ??_grabLeftIR:
   216  000011                     ??_grabRightIR:
   217  000011                     delay_s@i:
   218                           	opt stack 0
   219  000011                     delay_tenth_s@i:
   220                           	opt stack 0
   221  000011                     ___wmul@multiplicand:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x10
   225  000011                     	ds	2
   226  000013                     ___wmul@product:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x12
   230  000013                     	ds	1
   231  000014                     grabRightIR@IR_signal:
   232                           	opt stack 0
   233  000014                     grabLeftIR@IR_signal:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x13
   237  000014                     	ds	1
   238  000015                     ?___awdiv:
   239                           	opt stack 0
   240  000015                     ___awdiv@dividend:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x14
   244  000015                     	ds	1
   245  000016                     grabRightIR@i:
   246                           	opt stack 0
   247  000016                     grabLeftIR@i:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x15
   251  000016                     	ds	1
   252  000017                     ___awdiv@divisor:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x16
   256  000017                     	ds	2
   257  000019                     ___awdiv@counter:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x18
   261  000019                     	ds	1
   262  00001A                     ___awdiv@sign:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x19
   266  00001A                     	ds	1
   267  00001B                     ___awdiv@quotient:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x1A
   271  00001B                     	ds	2
   272  00001D                     setMotorPWM@m:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x1C
   276  00001D                     	ds	2
   277  00001F                     ??_setMotorPWM:
   278                           
   279                           ; 0 bytes @ 0x1E
   280  00001F                     	ds	5
   281  000024                     setMotorPWM@PWMduty:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x23
   285  000024                     	ds	2
   286  000026                     stop@mL:
   287                           	opt stack 0
   288  000026                     fullSpeedAhead@mL:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x25
   292  000026                     	ds	2
   293  000028                     stop@mR:
   294                           	opt stack 0
   295  000028                     fullSpeedAhead@mR:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x27
   299  000028                     	ds	2
   300  00002A                     
   301                           ; 0 bytes @ 0x29
   302  00002A                     	ds	1
   303  00002B                     turnLeft@mL:
   304                           	opt stack 0
   305  00002B                     turnRight@mL:
   306                           	opt stack 0
   307  00002B                     fullSpeedBack@mL:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x2A
   311  00002B                     	ds	2
   312  00002D                     turnLeft@mR:
   313                           	opt stack 0
   314  00002D                     turnRight@mR:
   315                           	opt stack 0
   316  00002D                     fullSpeedBack@mR:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x2C
   320  00002D                     	ds	2
   321  00002F                     ScanIR@mL:
   322                           	opt stack 0
   323  00002F                     ScanWithRange@mL:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x2E
   327  00002F                     	ds	2
   328  000031                     ScanIR@mR:
   329                           	opt stack 0
   330  000031                     ScanWithRange@mR:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x30
   334  000031                     	ds	2
   335  000033                     ??_ScanIR:
   336  000033                     ScanWithRange@tenth_seconds:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x32
   340  000033                     	ds	1
   341  000034                     ??_ScanWithRange:
   342                           
   343                           ; 0 bytes @ 0x33
   344  000034                     	ds	1
   345  000035                     ScanIR@DirectionFoundTolerance:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x34
   349  000035                     	ds	2
   350  000037                     ScanIR@SensorResult:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x36
   354  000037                     	ds	4
   355  00003B                     tblptru	equ	0xFF8
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           
   359                           ; 0 bytes @ 0x3A
   360 ;;
   361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   362 ;;
   363 ;; *************** function _main *****************
   364 ;; Defined at:
   365 ;;		line 29 in file "main.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  PathTaken     100    0        unsigned char [100]
   370 ;;  Message        10    0        unsigned char [10]
   371 ;;  mR              9   29[BANK0 ] struct DC_motor
   372 ;;  mL              9   20[BANK0 ] struct DC_motor
   373 ;;  SignalStreng    3    0        unsigned char [3]
   374 ;;  test            2   14[BANK0 ] unsigned int 
   375 ;;  DirectionFou    1   19[BANK0 ] unsigned char 
   376 ;;  mode            1   18[BANK0 ] unsigned char 
   377 ;;  ScanAngle       1   17[BANK0 ] unsigned char 
   378 ;;  i               1   16[BANK0 ] unsigned char 
   379 ;; Return value:  Size  Location     Type
   380 ;;		None               void
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   388 ;;      Params:         0       0       0       0
   389 ;;      Locals:         0      24       0       0
   390 ;;      Temps:          0       0       0       0
   391 ;;      Totals:         0      24       0       0
   392 ;;Total ram usage:       24 bytes
   393 ;; Hardware stack levels required when called:    6
   394 ;; This function calls:
   395 ;;		_ScanIR
   396 ;;		_ScanWithRange
   397 ;;		_delay_s
   398 ;;		_enableSensor
   399 ;;		_fullSpeedAhead
   400 ;;		_fullSpeedBack
   401 ;;		_initIR
   402 ;;		_initMotorPWM
   403 ;;		_initRFID
   404 ;;		_stop
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           	psect	text0
   411  000680                     __ptext0:
   412                           	opt stack 0
   413  000680                     _main:
   414                           	opt stack 25
   415                           
   416                           ;main.c: 32: unsigned char Message[10];
   417                           ;main.c: 33: unsigned char i=0;
   418                           
   419                           ;incstack = 0
   420  000680  0E00               	movlw	0
   421  000682  0100               	movlb	0	; () banked
   422  000684  6F70               	movwf	main@i& (0+255),b
   423                           
   424                           ;main.c: 34: unsigned char mode=0;
   425  000686  0E00               	movlw	0
   426  000688  0100               	movlb	0	; () banked
   427  00068A  6F72               	movwf	main@mode& (0+255),b
   428                           
   429                           ;main.c: 35: char DirectionFound=0;
   430  00068C  0E00               	movlw	0
   431  00068E  0100               	movlb	0	; () banked
   432  000690  6F73               	movwf	main@DirectionFound& (0+255),b
   433                           
   434                           ;main.c: 36: unsigned char SignalStrength[3];
   435                           ;main.c: 37: char PathTaken[100];
   436                           ;main.c: 38: unsigned int test=0;
   437  000692  0E00               	movlw	0
   438  000694  0100               	movlb	0	; () banked
   439  000696  6F6F               	movwf	(main@test+1)& (0+255),b
   440  000698  0E00               	movlw	0
   441  00069A  6F6E               	movwf	main@test& (0+255),b
   442                           
   443                           ;main.c: 40: unsigned char ScanAngle=6;
   444  00069C  0E06               	movlw	6
   445  00069E  0100               	movlb	0	; () banked
   446  0006A0  6F71               	movwf	main@ScanAngle& (0+255),b
   447                           
   448                           ; BSR set to: 0
   449                           ;main.c: 43: INTCONbits.GIEH = 1;
   450  0006A2  8EF2               	bsf	intcon,7,c	;volatile
   451                           
   452                           ; BSR set to: 0
   453                           ;main.c: 44: RCONbits.IPEN = 1;
   454  0006A4  8ED0               	bsf	4048,7,c	;volatile
   455                           
   456                           ; BSR set to: 0
   457                           ;main.c: 45: INTCONbits.GIEL = 1;
   458  0006A6  8CF2               	bsf	intcon,6,c	;volatile
   459                           
   460                           ; BSR set to: 0
   461                           ;main.c: 46: INTCONbits.INT0IE = 1;
   462  0006A8  88F2               	bsf	intcon,4,c	;volatile
   463                           
   464                           ; BSR set to: 0
   465                           ;main.c: 47: INTCONbits.PEIE = 1;
   466  0006AA  8CF2               	bsf	intcon,6,c	;volatile
   467                           
   468                           ; BSR set to: 0
   469                           ;main.c: 49: IPR1bits.RCIP=1;
   470  0006AC  8A9F               	bsf	3999,5,c	;volatile
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 50: PIE1bits.RCIE=1;
   474  0006AE  8A9D               	bsf	3997,5,c	;volatile
   475                           
   476                           ;main.c: 53: struct DC_motor mL, mR;
   477                           ;main.c: 54: mL.power=0;
   478  0006B0  0E00               	movlw	0
   479  0006B2  0100               	movlb	0	; () banked
   480  0006B4  6F74               	movwf	main@mL& (0+255),b
   481                           
   482                           ;main.c: 55: mL.direction=1;
   483  0006B6  0E01               	movlw	1
   484  0006B8  0100               	movlb	0	; () banked
   485  0006BA  6F75               	movwf	(main@mL+1)& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 56: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   489  0006BC  0E79               	movlw	121
   490  0006BE  0100               	movlb	0	; () banked
   491  0006C0  6F76               	movwf	(main@mL+2)& (0+255),b
   492  0006C2  0E0F               	movlw	15
   493  0006C4  0100               	movlb	0	; () banked
   494  0006C6  6F77               	movwf	(main@mL+3)& (0+255),b
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 57: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   498  0006C8  0E78               	movlw	120
   499  0006CA  0100               	movlb	0	; () banked
   500  0006CC  6F78               	movwf	(main@mL+4)& (0+255),b
   501  0006CE  0E0F               	movlw	15
   502  0006D0  0100               	movlb	0	; () banked
   503  0006D2  6F79               	movwf	(main@mL+5)& (0+255),b
   504                           
   505                           ;main.c: 58: mL.dir_pin=0;
   506  0006D4  0E00               	movlw	0
   507  0006D6  0100               	movlb	0	; () banked
   508  0006D8  6F7A               	movwf	(main@mL+6)& (0+255),b
   509                           
   510                           ;main.c: 59: mL.PWMperiod=199;
   511  0006DA  0E00               	movlw	0
   512  0006DC  0100               	movlb	0	; () banked
   513  0006DE  6F7C               	movwf	(main@mL+8)& (0+255),b
   514  0006E0  0EC7               	movlw	199
   515  0006E2  6F7B               	movwf	(main@mL+7)& (0+255),b
   516                           
   517                           ;main.c: 61: mR.power=0;
   518  0006E4  0E00               	movlw	0
   519  0006E6  0100               	movlb	0	; () banked
   520  0006E8  6F7D               	movwf	main@mR& (0+255),b
   521                           
   522                           ;main.c: 62: mR.direction=1;
   523  0006EA  0E01               	movlw	1
   524  0006EC  0100               	movlb	0	; () banked
   525  0006EE  6F7E               	movwf	(main@mR+1)& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 63: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   529  0006F0  0E77               	movlw	119
   530  0006F2  0100               	movlb	0	; () banked
   531  0006F4  6F7F               	movwf	(main@mR+2)& (0+255),b
   532  0006F6  0E0F               	movlw	15
   533  0006F8  0100               	movlb	0	; () banked
   534  0006FA  6F80               	movwf	(main@mR+3)& (0+255),b
   535                           
   536                           ; BSR set to: 0
   537                           ;main.c: 64: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   538  0006FC  0E76               	movlw	118
   539  0006FE  0100               	movlb	0	; () banked
   540  000700  6F81               	movwf	(main@mR+4)& (0+255),b
   541  000702  0E0F               	movlw	15
   542  000704  0100               	movlb	0	; () banked
   543  000706  6F82               	movwf	(main@mR+5)& (0+255),b
   544                           
   545                           ;main.c: 65: mR.dir_pin=2;
   546  000708  0E02               	movlw	2
   547  00070A  0100               	movlb	0	; () banked
   548  00070C  6F83               	movwf	(main@mR+6)& (0+255),b
   549                           
   550                           ;main.c: 66: mR.PWMperiod=199;
   551  00070E  0E00               	movlw	0
   552  000710  0100               	movlb	0	; () banked
   553  000712  6F85               	movwf	(main@mR+8)& (0+255),b
   554  000714  0EC7               	movlw	199
   555  000716  6F84               	movwf	(main@mR+7)& (0+255),b
   556                           
   557                           ;main.c: 68: OSCCON = 0x72;
   558  000718  0E72               	movlw	114
   559  00071A  6ED3               	movwf	4051,c	;volatile
   560  00071C                     l57:
   561  00071C  B4D3               	btfsc	4051,2,c	;volatile
   562  00071E  D070               	goto	l2527
   563  000720  D7FD               	goto	l57
   564  000722                     l2491:
   565                           
   566                           ;main.c: 76: initMotorPWM();
   567  000722  EC7C  F006         	call	_initMotorPWM	;wreg free
   568                           
   569                           ;main.c: 77: initRFID();
   570  000726  ECCC  F006         	call	_initRFID	;wreg free
   571                           
   572                           ;main.c: 78: initIR();
   573  00072A  ECBB  F006         	call	_initIR	;wreg free
   574                           
   575                           ;main.c: 82: fullSpeedAhead(&mL, &mR);
   576  00072E  0E74               	movlw	low main@mL
   577  000730  6E26               	movwf	fullSpeedAhead@mL,c
   578  000732  0E00               	movlw	high main@mL
   579  000734  6E27               	movwf	fullSpeedAhead@mL+1,c
   580  000736  0E7D               	movlw	low main@mR
   581  000738  6E28               	movwf	fullSpeedAhead@mR,c
   582  00073A  0E00               	movlw	high main@mR
   583  00073C  6E29               	movwf	fullSpeedAhead@mR+1,c
   584  00073E  ECA7  F005         	call	_fullSpeedAhead	;wreg free
   585                           
   586                           ;main.c: 83: delay_s(1);
   587  000742  0E01               	movlw	1
   588  000744  EC29  F006         	call	_delay_s
   589                           
   590                           ;main.c: 84: stop(&mL, &mR);
   591  000748  0E74               	movlw	low main@mL
   592  00074A  6E26               	movwf	stop@mL,c
   593  00074C  0E00               	movlw	high main@mL
   594  00074E  6E27               	movwf	stop@mL+1,c
   595  000750  0E7D               	movlw	low main@mR
   596  000752  6E28               	movwf	stop@mR,c
   597  000754  0E00               	movlw	high main@mR
   598  000756  6E29               	movwf	stop@mR+1,c
   599  000758  ECA7  F004         	call	_stop	;wreg free
   600                           
   601                           ;main.c: 85: fullSpeedBack(&mL, &mR);
   602  00075C  0E74               	movlw	low main@mL
   603  00075E  6E2B               	movwf	fullSpeedBack@mL,c
   604  000760  0E00               	movlw	high main@mL
   605  000762  6E2C               	movwf	fullSpeedBack@mL+1,c
   606  000764  0E7D               	movlw	low main@mR
   607  000766  6E2D               	movwf	fullSpeedBack@mR,c
   608  000768  0E00               	movlw	high main@mR
   609  00076A  6E2E               	movwf	fullSpeedBack@mR+1,c
   610  00076C  EC61  F006         	call	_fullSpeedBack	;wreg free
   611                           
   612                           ;main.c: 86: delay_s(1);
   613  000770  0E01               	movlw	1
   614  000772  EC29  F006         	call	_delay_s
   615                           
   616                           ;main.c: 87: stop(&mL, &mR);
   617  000776  0E74               	movlw	low main@mL
   618  000778  6E26               	movwf	stop@mL,c
   619  00077A  0E00               	movlw	high main@mL
   620  00077C  6E27               	movwf	stop@mL+1,c
   621  00077E  0E7D               	movlw	low main@mR
   622  000780  6E28               	movwf	stop@mR,c
   623  000782  0E00               	movlw	high main@mR
   624  000784  6E29               	movwf	stop@mR+1,c
   625  000786  ECA7  F004         	call	_stop	;wreg free
   626                           
   627                           ;main.c: 89: enableSensor(0, 1);
   628  00078A  0E01               	movlw	1
   629  00078C  6E0F               	movwf	enableSensor@status,c
   630  00078E  0E00               	movlw	0
   631  000790  EC95  F006         	call	_enableSensor
   632                           
   633                           ;main.c: 90: enableSensor(1, 1);
   634  000794  0E01               	movlw	1
   635  000796  6E0F               	movwf	enableSensor@status,c
   636  000798  0E01               	movlw	1
   637  00079A  EC95  F006         	call	_enableSensor
   638  00079E  D02D               	goto	L4
   639  0007A0                     l2511:
   640                           
   641                           ; BSR set to: 0
   642                           ;main.c: 97: if (DirectionFound==0) {
   643  0007A0  0100               	movlb	0	; () banked
   644  0007A2  5173               	movf	main@DirectionFound& (0+255),w,b
   645  0007A4  0100               	movlb	0	; () banked
   646  0007A6  A4D8               	btfss	status,2,c
   647  0007A8  D00D               	goto	l2515
   648                           
   649                           ; BSR set to: 0
   650                           ;main.c: 99: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   651  0007AA  0E74               	movlw	low main@mL
   652  0007AC  6E2F               	movwf	ScanWithRange@mL,c
   653  0007AE  0E00               	movlw	high main@mL
   654  0007B0  6E30               	movwf	ScanWithRange@mL+1,c
   655  0007B2  0E7D               	movlw	low main@mR
   656  0007B4  6E31               	movwf	ScanWithRange@mR,c
   657  0007B6  0E00               	movlw	high main@mR
   658  0007B8  6E32               	movwf	ScanWithRange@mR+1,c
   659  0007BA  C071  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   660  0007BE  EC56  F000         	call	_ScanWithRange	;wreg free
   661  0007C2  D00E               	goto	L2
   662  0007C4                     l2515:
   663                           
   664                           ; BSR set to: 0
   665  0007C4  0100               	movlb	0	; () banked
   666  0007C6  0573               	decf	main@DirectionFound& (0+255),w,b
   667  0007C8  A4D8               	btfss	status,2,c
   668  0007CA  D00D               	goto	l2519
   669                           
   670                           ; BSR set to: 0
   671                           ;main.c: 102: DirectionFound = ScanIR(&mL, &mR);
   672  0007CC  0E74               	movlw	low main@mL
   673  0007CE  6E2F               	movwf	ScanIR@mL,c
   674  0007D0  0E00               	movlw	high main@mL
   675  0007D2  6E30               	movwf	ScanIR@mL+1,c
   676  0007D4  0E7D               	movlw	low main@mR
   677  0007D6  6E31               	movwf	ScanIR@mR,c
   678  0007D8  0E00               	movlw	high main@mR
   679  0007DA  6E32               	movwf	ScanIR@mR+1,c
   680  0007DC  EC4C  F002         	call	_ScanIR	;wreg free
   681  0007E0                     L2:
   682  0007E0  0100               	movlb	0	; () banked
   683  0007E2  6F73               	movwf	main@DirectionFound& (0+255),b
   684                           
   685                           ;main.c: 103: } else if (DirectionFound==2) {
   686  0007E4  D00D               	goto	l2527
   687  0007E6                     l2519:
   688                           
   689                           ; BSR set to: 0
   690  0007E6  0E02               	movlw	2
   691  0007E8  0100               	movlb	0	; () banked
   692  0007EA  1973               	xorwf	main@DirectionFound& (0+255),w,b
   693  0007EC  A4D8               	btfss	status,2,c
   694  0007EE  D008               	goto	l2527
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 104: mode=2;
   698  0007F0  0E02               	movlw	2
   699  0007F2  D004               	goto	L3
   700  0007F4                     l2523:
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 125: DirectionFound=1;
   704  0007F4  0E01               	movlw	1
   705  0007F6  0100               	movlb	0	; () banked
   706  0007F8  6F73               	movwf	main@DirectionFound& (0+255),b
   707  0007FA                     L4:
   708                           
   709                           ;main.c: 126: mode = 1;
   710  0007FA  0E01               	movlw	1
   711  0007FC                     L3:
   712  0007FC  0100               	movlb	0	; () banked
   713  0007FE  6F72               	movwf	main@mode& (0+255),b
   714  000800                     l2527:
   715  000800  0100               	movlb	0	; () banked
   716  000802  5172               	movf	main@mode& (0+255),w,b
   717                           
   718                           ; Switch size 1, requested type "space"
   719                           ; Number of cases is 4, Range of values is 0 to 3
   720                           ; switch strategies available:
   721                           ; Name         Instructions Cycles
   722                           ; simple_byte           13     7 (average)
   723                           ;	Chosen strategy is simple_byte
   724  000804  0A00               	xorlw	0	; case 0
   725  000806  B4D8               	btfsc	status,2,c
   726  000808  D78C               	goto	l2491
   727  00080A  0A01               	xorlw	1	; case 1
   728  00080C  B4D8               	btfsc	status,2,c
   729  00080E  D7C8               	goto	l2511
   730  000810  0A03               	xorlw	3	; case 2
   731  000812  B4D8               	btfsc	status,2,c
   732  000814  D7EF               	goto	l2523
   733  000816  0A01               	xorlw	1	; case 3
   734                           
   735                           ; BSR set to: 0
   736                           
   737                           ; BSR set to: 0
   738  000818  D7F3               	goto	l2527
   739  00081A                     __end_of_main:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           intcon	equ	0xFF2
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           status	equ	0xFD8
   746                           
   747 ;; *************** function _initRFID *****************
   748 ;; Defined at:
   749 ;;		line 5 in file "RFID_Reader.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, status,2
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   763 ;;      Params:         0       0       0       0
   764 ;;      Locals:         1       0       0       0
   765 ;;      Temps:          0       0       0       0
   766 ;;      Totals:         1       0       0       0
   767 ;;Total ram usage:        1 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    1
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  000D98                     __ptext1:
   779                           	opt stack 0
   780  000D98                     _initRFID:
   781                           	opt stack 29
   782                           
   783                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   784                           
   785                           ; BSR set to: 0
   786                           ;incstack = 0
   787  000D98  0E01               	movlw	1
   788  000D9A  6E0F               	movwf	_initRFID$1294,c
   789  000D9C  5094               	movf	3988,w,c	;volatile
   790  000D9E  C00F  FF94         	movff	_initRFID$1294,3988	;volatile
   791                           
   792                           ;RFID_Reader.c: 10: SPBRG=205;
   793  000DA2  0ECD               	movlw	205
   794  000DA4  6EAF               	movwf	4015,c	;volatile
   795                           
   796                           ;RFID_Reader.c: 11: SPBRGH=0;
   797  000DA6  0E00               	movlw	0
   798  000DA8  6EB0               	movwf	4016,c	;volatile
   799                           
   800                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   801  000DAA  86AA               	bsf	4010,3,c	;volatile
   802                           
   803                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   804  000DAC  84AC               	bsf	4012,2,c	;volatile
   805                           
   806                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   807  000DAE  88AB               	bsf	4011,4,c	;volatile
   808                           
   809                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   810  000DB0  8EAB               	bsf	4011,7,c	;volatile
   811                           
   812                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   813  000DB2  98AC               	bcf	4012,4,c	;volatile
   814                           
   815                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   816  000DB4  9CAB               	bcf	4011,6,c	;volatile
   817  000DB6  0012               	return		;funcret
   818  000DB8                     __end_of_initRFID:
   819                           	opt stack 0
   820                           tblptru	equ	0xFF8
   821                           intcon	equ	0xFF2
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           status	equ	0xFD8
   825                           
   826 ;; *************** function _initMotorPWM *****************
   827 ;; Defined at:
   828 ;;		line 4 in file "dc_motor.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;		None
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;		None               void
   835 ;; Registers used:
   836 ;;		wreg, status,2
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   842 ;;      Params:         0       0       0       0
   843 ;;      Locals:         0       0       0       0
   844 ;;      Temps:          0       0       0       0
   845 ;;      Totals:         0       0       0       0
   846 ;;Total ram usage:        0 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    1
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text2
   857  000CF8                     __ptext2:
   858                           	opt stack 0
   859  000CF8                     _initMotorPWM:
   860                           	opt stack 29
   861                           
   862                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   863                           
   864                           ;incstack = 0
   865  000CF8  0E00               	movlw	0
   866  000CFA  6E7F               	movwf	3967,c	;volatile
   867                           
   868                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   869  000CFC  0E80               	movlw	128
   870  000CFE  6E7E               	movwf	3966,c	;volatile
   871                           
   872                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   873  000D00  0E6F               	movlw	111
   874  000D02  6E6F               	movwf	3951,c	;volatile
   875                           
   876                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   877  000D04  0E00               	movlw	0
   878  000D06  6E6E               	movwf	3950,c	;volatile
   879                           
   880                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   881  000D08  0EC7               	movlw	199
   882  000D0A  6E7B               	movwf	3963,c	;volatile
   883                           
   884                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   885  000D0C  0E00               	movlw	0
   886  000D0E  6E7A               	movwf	3962,c	;volatile
   887                           
   888                           ;dc_motor.c: 13: PDC0L = 0<<2;
   889  000D10  0E00               	movlw	0
   890  000D12  6E79               	movwf	3961,c	;volatile
   891                           
   892                           ;dc_motor.c: 14: PDC0H = 0>>6;
   893  000D14  0E00               	movlw	0
   894  000D16  6E78               	movwf	3960,c	;volatile
   895                           
   896                           ;dc_motor.c: 15: PDC1L = 0<<2;
   897  000D18  0E00               	movlw	0
   898  000D1A  6E77               	movwf	3959,c	;volatile
   899                           
   900                           ;dc_motor.c: 16: PDC1H = 0>>6;
   901  000D1C  0E00               	movlw	0
   902  000D1E  6E76               	movwf	3958,c	;volatile
   903                           
   904                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   905  000D20  9093               	bcf	3987,0,c	;volatile
   906                           
   907                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   908  000D22  9293               	bcf	3987,1,c	;volatile
   909                           
   910                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   911  000D24  9493               	bcf	3987,2,c	;volatile
   912                           
   913                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   914  000D26  9693               	bcf	3987,3,c	;volatile
   915  000D28  0012               	return		;funcret
   916  000D2A                     __end_of_initMotorPWM:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           intcon	equ	0xFF2
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           status	equ	0xFD8
   923                           
   924 ;; *************** function _initIR *****************
   925 ;; Defined at:
   926 ;;		line 30 in file "IR_Reading.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;		None               void
   933 ;; Registers used:
   934 ;;		wreg, status,2
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   940 ;;      Params:         0       0       0       0
   941 ;;      Locals:         0       0       0       0
   942 ;;      Temps:          0       0       0       0
   943 ;;      Totals:         0       0       0       0
   944 ;;Total ram usage:        0 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text3
   955  000D76                     __ptext3:
   956                           	opt stack 0
   957  000D76                     _initIR:
   958                           	opt stack 29
   959                           
   960                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   961                           
   962                           ;incstack = 0
   963  000D76  9489               	bcf	3977,2,c	;volatile
   964                           
   965                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   966  000D78  9689               	bcf	3977,3,c	;volatile
   967                           
   968                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   969  000D7A  8492               	bsf	3986,2,c	;volatile
   970                           
   971                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   972  000D7C  8692               	bsf	3986,3,c	;volatile
   973                           
   974                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   975  000D7E  94B8               	bcf	4024,2,c	;volatile
   976                           
   977                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   978  000D80  96B8               	bcf	4024,3,c	;volatile
   979                           
   980                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   981  000D82  9CB8               	bcf	4024,6,c	;volatile
   982                           
   983                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   984  000D84  9EB8               	bcf	4024,7,c	;volatile
   985                           
   986                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   987  000D86  0E06               	movlw	6
   988  000D88  6E63               	movwf	3939,c	;volatile
   989                           
   990                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   991  000D8A  0E06               	movlw	6
   992  000D8C  6E62               	movwf	3938,c	;volatile
   993                           
   994                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   995  000D8E  9096               	bcf	3990,0,c	;volatile
   996                           
   997                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   998  000D90  9296               	bcf	3990,1,c	;volatile
   999                           
  1000                           ;IR_Reading.c: 69: T5CON=0b01011001;
  1001  000D92  0E59               	movlw	89
  1002  000D94  6EB7               	movwf	4023,c	;volatile
  1003  000D96  0012               	return		;funcret
  1004  000D98                     __end_of_initIR:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           intcon	equ	0xFF2
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _fullSpeedBack *****************
  1013 ;; Defined at:
  1014 ;;		line 125 in file "dc_motor.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1017 ;;		 -> main@mL(9), 
  1018 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1019 ;;		 -> main@mR(9), 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;		None               void
  1024 ;; Registers used:
  1025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1031 ;;      Params:         4       0       0       0
  1032 ;;      Locals:         0       0       0       0
  1033 ;;      Temps:          0       0       0       0
  1034 ;;      Totals:         4       0       0       0
  1035 ;;Total ram usage:        4 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    4
  1038 ;; This function calls:
  1039 ;;		_fullSpeedAhead
  1040 ;; This function is called by:
  1041 ;;		_main
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text4
  1046  000CC2                     __ptext4:
  1047                           	opt stack 0
  1048  000CC2                     _fullSpeedBack:
  1049                           	opt stack 26
  1050                           
  1051                           ;dc_motor.c: 128: mL->direction=0;
  1052                           
  1053                           ;incstack = 0
  1054  000CC2  EE20 F001          	lfsr	2,1
  1055  000CC6  502B               	movf	fullSpeedBack@mL,w,c
  1056  000CC8  26D9               	addwf	fsr2l,f,c
  1057  000CCA  502C               	movf	fullSpeedBack@mL+1,w,c
  1058  000CCC  22DA               	addwfc	fsr2h,f,c
  1059  000CCE  0E00               	movlw	0
  1060  000CD0  6EDF               	movwf	indf2,c
  1061                           
  1062                           ;dc_motor.c: 129: mR->direction=0;
  1063  000CD2  EE20 F001          	lfsr	2,1
  1064  000CD6  502D               	movf	fullSpeedBack@mR,w,c
  1065  000CD8  26D9               	addwf	fsr2l,f,c
  1066  000CDA  502E               	movf	fullSpeedBack@mR+1,w,c
  1067  000CDC  22DA               	addwfc	fsr2h,f,c
  1068  000CDE  0E00               	movlw	0
  1069  000CE0  6EDF               	movwf	indf2,c
  1070                           
  1071                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1072  000CE2  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1073  000CE6  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1074  000CEA  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1075  000CEE  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1076  000CF2  ECA7  F005         	call	_fullSpeedAhead	;wreg free
  1077  000CF6  0012               	return		;funcret
  1078  000CF8                     __end_of_fullSpeedBack:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           intcon	equ	0xFF2
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           indf2	equ	0xFDF
  1085                           fsr2h	equ	0xFDA
  1086                           fsr2l	equ	0xFD9
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _delay_s *****************
  1090 ;; Defined at:
  1091 ;;		line 10 in file "Movement.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  seconds         1    wreg     unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  seconds         1   15[COMRAM] unsigned char 
  1096 ;;  i               2   16[COMRAM] unsigned int 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;		None               void
  1099 ;; Registers used:
  1100 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1106 ;;      Params:         0       0       0       0
  1107 ;;      Locals:         3       0       0       0
  1108 ;;      Temps:          1       0       0       0
  1109 ;;      Totals:         4       0       0       0
  1110 ;;Total ram usage:        4 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    1
  1113 ;; This function calls:
  1114 ;;		Nothing
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text5
  1121  000C52                     __ptext5:
  1122                           	opt stack 0
  1123  000C52                     _delay_s:
  1124                           	opt stack 29
  1125                           
  1126                           ;incstack = 0
  1127                           ;delay_s@seconds stored from wreg
  1128  000C52  6E10               	movwf	delay_s@seconds,c
  1129                           
  1130                           ;Movement.c: 11: unsigned int i=0;
  1131  000C54  0E00               	movlw	0
  1132  000C56  6E12               	movwf	delay_s@i+1,c
  1133  000C58  0E00               	movlw	0
  1134  000C5A  6E11               	movwf	delay_s@i,c
  1135                           
  1136                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1137  000C5C  0E00               	movlw	0
  1138  000C5E  6E12               	movwf	delay_s@i+1,c
  1139  000C60  0E01               	movlw	1
  1140  000C62  6E11               	movwf	delay_s@i,c
  1141  000C64  D009               	goto	l1781
  1142  000C66                     l1777:
  1143                           
  1144                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1145  000C66  0E82               	movlw	130
  1146  000C68  6E0F               	movwf	??_delay_s& (0+255),c
  1147  000C6A  0EDE               	movlw	222
  1148  000C6C                     u1897:
  1149  000C6C  2EE8               	decfsz	wreg,f,c
  1150  000C6E  D7FE               	goto	u1897
  1151  000C70  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1152  000C72  D7FC               	goto	u1897
  1153  000C74  4A11               	infsnz	delay_s@i,f,c
  1154  000C76  2A12               	incf	delay_s@i+1,f,c
  1155  000C78                     l1781:
  1156  000C78  5010               	movf	delay_s@seconds,w,c
  1157  000C7A  0D14               	mullw	20
  1158  000C7C  5011               	movf	delay_s@i,w,c
  1159  000C7E  5CF3               	subwf	prodl,w,c
  1160  000C80  5012               	movf	delay_s@i+1,w,c
  1161  000C82  58F4               	subwfb	prodh,w,c
  1162  000C84  A0D8               	btfss	status,0,c
  1163  000C86  0012               	return	
  1164  000C88  D7EE               	goto	l1777
  1165  000C8A                     __end_of_delay_s:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           indf2	equ	0xFDF
  1174                           fsr2h	equ	0xFDA
  1175                           fsr2l	equ	0xFD9
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _ScanWithRange *****************
  1179 ;; Defined at:
  1180 ;;		line 92 in file "Movement.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1183 ;;		 -> main@mL(9), 
  1184 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1185 ;;		 -> main@mR(9), 
  1186 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  SensorResult    4    8[BANK0 ] unsigned int [2]
  1189 ;;  SensorResult    4    4[BANK0 ] unsigned int [2]
  1190 ;;  SensorResult    4    0[BANK0 ] unsigned int [2]
  1191 ;;  DirectionFou    2   12[BANK0 ] unsigned int 
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      unsigned char 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1201 ;;      Params:         5       0       0       0
  1202 ;;      Locals:         0      14       0       0
  1203 ;;      Temps:          2       0       0       0
  1204 ;;      Totals:         7      14       0       0
  1205 ;;Total ram usage:       21 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    5
  1208 ;; This function calls:
  1209 ;;		___awdiv
  1210 ;;		_delay_tenth_s
  1211 ;;		_enableSensor
  1212 ;;		_grabLeftIR
  1213 ;;		_grabRightIR
  1214 ;;		_stop
  1215 ;;		_turnLeft
  1216 ;;		_turnRight
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text6
  1223  0000AC                     __ptext6:
  1224                           	opt stack 0
  1225  0000AC                     _ScanWithRange:
  1226                           	opt stack 25
  1227                           
  1228                           ;Movement.c: 95: unsigned int SensorResultL[2];
  1229                           ;Movement.c: 96: unsigned int SensorResultC[2];
  1230                           ;Movement.c: 97: unsigned int SensorResultR[2];
  1231                           ;Movement.c: 99: unsigned int DirectionFoundTolerance=500;
  1232                           
  1233                           ;incstack = 0
  1234  0000AC  0E01               	movlw	1
  1235  0000AE  0100               	movlb	0	; () banked
  1236  0000B0  6F6D               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  1237  0000B2  0EF4               	movlw	244
  1238  0000B4  6F6C               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;Movement.c: 102: enableSensor(0, 1);
  1242  0000B6  0E01               	movlw	1
  1243  0000B8  6E0F               	movwf	enableSensor@status,c
  1244  0000BA  0E00               	movlw	0
  1245  0000BC  EC95  F006         	call	_enableSensor
  1246                           
  1247                           ;Movement.c: 103: enableSensor(1, 1);
  1248  0000C0  0E01               	movlw	1
  1249  0000C2  6E0F               	movwf	enableSensor@status,c
  1250  0000C4  0E01               	movlw	1
  1251  0000C6  EC95  F006         	call	_enableSensor
  1252                           
  1253                           ;Movement.c: 105: stop(mL,mR);
  1254  0000CA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1255  0000CE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1256  0000D2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1257  0000D6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1258  0000DA  ECA7  F004         	call	_stop	;wreg free
  1259                           
  1260                           ;Movement.c: 106: SensorResultC[0]=grabLeftIR();
  1261  0000DE  EC6C  F005         	call	_grabLeftIR	;wreg free
  1262  0000E2  C00F  F064         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1263  0000E6  C010  F065         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1264                           
  1265                           ;Movement.c: 107: SensorResultC[1]=grabRightIR();
  1266  0000EA  EC31  F005         	call	_grabRightIR	;wreg free
  1267  0000EE  C00F  F066         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1268  0000F2  C010  F067         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1269                           
  1270                           ;Movement.c: 110: turnLeft(mL,mR);
  1271  0000F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1272  0000FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1273  0000FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1274  000102  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1275  000106  EC04  F006         	call	_turnLeft	;wreg free
  1276                           
  1277                           ;Movement.c: 111: delay_tenth_s(tenth_seconds);
  1278  00010A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1279  00010C  EC45  F006         	call	_delay_tenth_s
  1280                           
  1281                           ;Movement.c: 113: stop(mL,mR);
  1282  000110  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1283  000114  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1284  000118  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1285  00011C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1286  000120  ECA7  F004         	call	_stop	;wreg free
  1287                           
  1288                           ;Movement.c: 114: SensorResultL[0]=grabLeftIR();
  1289  000124  EC6C  F005         	call	_grabLeftIR	;wreg free
  1290  000128  C00F  F060         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1291  00012C  C010  F061         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1292                           
  1293                           ;Movement.c: 115: SensorResultL[1]=grabRightIR();
  1294  000130  EC31  F005         	call	_grabRightIR	;wreg free
  1295  000134  C00F  F062         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1296  000138  C010  F063         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1297                           
  1298                           ;Movement.c: 118: turnRight(mL,mR);
  1299  00013C  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1300  000140  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1301  000144  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1302  000148  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1303  00014C  ECDF  F005         	call	_turnRight	;wreg free
  1304                           
  1305                           ;Movement.c: 119: delay_tenth_s(2*tenth_seconds);
  1306  000150  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1307  000152  0D02               	mullw	2
  1308  000154  50F3               	movf	prodl,w,c
  1309  000156  EC45  F006         	call	_delay_tenth_s
  1310                           
  1311                           ;Movement.c: 121: stop(mL,mR);
  1312  00015A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1313  00015E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1314  000162  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1315  000166  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1316  00016A  ECA7  F004         	call	_stop	;wreg free
  1317                           
  1318                           ;Movement.c: 122: SensorResultR[0]=grabLeftIR();
  1319  00016E  EC6C  F005         	call	_grabLeftIR	;wreg free
  1320  000172  C00F  F068         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1321  000176  C010  F069         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1322                           
  1323                           ;Movement.c: 123: SensorResultR[1]=grabRightIR();
  1324  00017A  EC31  F005         	call	_grabRightIR	;wreg free
  1325  00017E  C00F  F06A         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1326  000182  C010  F06B         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1327                           
  1328                           ;Movement.c: 126: enableSensor(0, 0);
  1329  000186  0E00               	movlw	0
  1330  000188  6E0F               	movwf	enableSensor@status,c
  1331  00018A  0E00               	movlw	0
  1332  00018C  EC95  F006         	call	_enableSensor
  1333                           
  1334                           ;Movement.c: 127: enableSensor(1, 0);
  1335  000190  0E00               	movlw	0
  1336  000192  6E0F               	movwf	enableSensor@status,c
  1337  000194  0E01               	movlw	1
  1338  000196  EC95  F006         	call	_enableSensor
  1339                           
  1340                           ;Movement.c: 134: if (((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)
  1341                           ;Movement.c: 135: ||((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)) {
  1342  00019A  C060  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1343  00019E  C061  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1344  0001A2  1E34               	comf	??_ScanWithRange,f,c
  1345  0001A4  1E35               	comf	??_ScanWithRange+1,f,c
  1346  0001A6  4A34               	infsnz	??_ScanWithRange,f,c
  1347  0001A8  2A35               	incf	??_ScanWithRange+1,f,c
  1348  0001AA  0100               	movlb	0	; () banked
  1349  0001AC  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1350  0001AE  2634               	addwf	??_ScanWithRange,f,c
  1351  0001B0  0100               	movlb	0	; () banked
  1352  0001B2  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1353  0001B4  2235               	addwfc	??_ScanWithRange+1,f,c
  1354  0001B6  0100               	movlb	0	; () banked
  1355  0001B8  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1356  0001BA  5C34               	subwf	??_ScanWithRange,w,c
  1357  0001BC  0100               	movlb	0	; () banked
  1358  0001BE  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1359  0001C0  5835               	subwfb	??_ScanWithRange+1,w,c
  1360  0001C2  A0D8               	btfss	status,0,c
  1361  0001C4  D018               	goto	l2287
  1362                           
  1363                           ; BSR set to: 0
  1364  0001C6  EE20  F062         	lfsr	2,ScanWithRange@SensorResultL+2
  1365  0001CA  CFDE F034          	movff	postinc2,??_ScanWithRange
  1366  0001CE  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1367  0001D2  1E34               	comf	??_ScanWithRange,f,c
  1368  0001D4  1E35               	comf	??_ScanWithRange+1,f,c
  1369  0001D6  4A34               	infsnz	??_ScanWithRange,f,c
  1370  0001D8  2A35               	incf	??_ScanWithRange+1,f,c
  1371  0001DA  0100               	movlb	0	; () banked
  1372  0001DC  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1373  0001DE  2634               	addwf	??_ScanWithRange,f,c
  1374  0001E0  0100               	movlb	0	; () banked
  1375  0001E2  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1376  0001E4  2235               	addwfc	??_ScanWithRange+1,f,c
  1377  0001E6  0100               	movlb	0	; () banked
  1378  0001E8  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1379  0001EA  5C34               	subwf	??_ScanWithRange,w,c
  1380  0001EC  0100               	movlb	0	; () banked
  1381  0001EE  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1382  0001F0  5835               	subwfb	??_ScanWithRange+1,w,c
  1383  0001F2  B0D8               	btfsc	status,0,c
  1384  0001F4  D01B               	goto	l2299
  1385  0001F6                     l2287:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;Movement.c: 137: turnLeft(mL,mR);
  1389  0001F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1390  0001FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1391  0001FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1392  000202  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1393  000206  EC04  F006         	call	_turnLeft	;wreg free
  1394                           
  1395                           ;Movement.c: 138: delay_tenth_s(2*(tenth_seconds));
  1396  00020A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1397  00020C  0D02               	mullw	2
  1398  00020E  50F3               	movf	prodl,w,c
  1399  000210  EC45  F006         	call	_delay_tenth_s
  1400                           
  1401                           ;Movement.c: 139: stop(mL,mR);
  1402  000214  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1403  000218  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1404  00021C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1405  000220  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1406  000224  ECA7  F004         	call	_stop	;wreg free
  1407  000228                     l2293:
  1408                           
  1409                           ;Movement.c: 140: return 2;
  1410  000228  0E02               	movlw	2
  1411  00022A  0012               	return	
  1412  00022C                     l2299:
  1413                           
  1414                           ;Movement.c: 142: ||((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)) {
  1415  00022C  C064  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1416  000230  C065  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1417  000234  1E34               	comf	??_ScanWithRange,f,c
  1418  000236  1E35               	comf	??_ScanWithRange+1,f,c
  1419  000238  4A34               	infsnz	??_ScanWithRange,f,c
  1420  00023A  2A35               	incf	??_ScanWithRange+1,f,c
  1421  00023C  0100               	movlb	0	; () banked
  1422  00023E  5166               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1423  000240  2634               	addwf	??_ScanWithRange,f,c
  1424  000242  0100               	movlb	0	; () banked
  1425  000244  5167               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1426  000246  2235               	addwfc	??_ScanWithRange+1,f,c
  1427  000248  0100               	movlb	0	; () banked
  1428  00024A  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1429  00024C  5C34               	subwf	??_ScanWithRange,w,c
  1430  00024E  0100               	movlb	0	; () banked
  1431  000250  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1432  000252  5835               	subwfb	??_ScanWithRange+1,w,c
  1433  000254  A0D8               	btfss	status,0,c
  1434  000256  D018               	goto	l2303
  1435                           
  1436                           ; BSR set to: 0
  1437  000258  EE20  F066         	lfsr	2,ScanWithRange@SensorResultC+2
  1438  00025C  CFDE F034          	movff	postinc2,??_ScanWithRange
  1439  000260  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1440  000264  1E34               	comf	??_ScanWithRange,f,c
  1441  000266  1E35               	comf	??_ScanWithRange+1,f,c
  1442  000268  4A34               	infsnz	??_ScanWithRange,f,c
  1443  00026A  2A35               	incf	??_ScanWithRange+1,f,c
  1444  00026C  0100               	movlb	0	; () banked
  1445  00026E  5164               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1446  000270  2634               	addwf	??_ScanWithRange,f,c
  1447  000272  0100               	movlb	0	; () banked
  1448  000274  5165               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1449  000276  2235               	addwfc	??_ScanWithRange+1,f,c
  1450  000278  0100               	movlb	0	; () banked
  1451  00027A  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1452  00027C  5C34               	subwf	??_ScanWithRange,w,c
  1453  00027E  0100               	movlb	0	; () banked
  1454  000280  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1455  000282  5835               	subwfb	??_ScanWithRange+1,w,c
  1456  000284  B0D8               	btfsc	status,0,c
  1457  000286  D018               	goto	l2315
  1458  000288                     l2303:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;Movement.c: 144: turnLeft(mL,mR);
  1462  000288  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1463  00028C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1464  000290  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1465  000294  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1466  000298  EC04  F006         	call	_turnLeft	;wreg free
  1467                           
  1468                           ;Movement.c: 145: delay_tenth_s(tenth_seconds);
  1469  00029C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1470  00029E  EC45  F006         	call	_delay_tenth_s
  1471                           
  1472                           ;Movement.c: 146: stop(mL,mR);
  1473  0002A2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1474  0002A6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1475  0002AA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1476  0002AE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1477  0002B2  ECA7  F004         	call	_stop	;wreg free
  1478  0002B6  D7B8               	goto	l2293
  1479  0002B8                     l2315:
  1480                           
  1481                           ;Movement.c: 149: ||((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)) {
  1482  0002B8  C068  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1483  0002BC  C069  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1484  0002C0  1E34               	comf	??_ScanWithRange,f,c
  1485  0002C2  1E35               	comf	??_ScanWithRange+1,f,c
  1486  0002C4  4A34               	infsnz	??_ScanWithRange,f,c
  1487  0002C6  2A35               	incf	??_ScanWithRange+1,f,c
  1488  0002C8  0100               	movlb	0	; () banked
  1489  0002CA  516A               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1490  0002CC  2634               	addwf	??_ScanWithRange,f,c
  1491  0002CE  0100               	movlb	0	; () banked
  1492  0002D0  516B               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1493  0002D2  2235               	addwfc	??_ScanWithRange+1,f,c
  1494  0002D4  0100               	movlb	0	; () banked
  1495  0002D6  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1496  0002D8  5C34               	subwf	??_ScanWithRange,w,c
  1497  0002DA  0100               	movlb	0	; () banked
  1498  0002DC  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1499  0002DE  5835               	subwfb	??_ScanWithRange+1,w,c
  1500  0002E0  A0D8               	btfss	status,0,c
  1501  0002E2  D018               	goto	l2319
  1502                           
  1503                           ; BSR set to: 0
  1504  0002E4  EE20  F06A         	lfsr	2,ScanWithRange@SensorResultR+2
  1505  0002E8  CFDE F034          	movff	postinc2,??_ScanWithRange
  1506  0002EC  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1507  0002F0  1E34               	comf	??_ScanWithRange,f,c
  1508  0002F2  1E35               	comf	??_ScanWithRange+1,f,c
  1509  0002F4  4A34               	infsnz	??_ScanWithRange,f,c
  1510  0002F6  2A35               	incf	??_ScanWithRange+1,f,c
  1511  0002F8  0100               	movlb	0	; () banked
  1512  0002FA  5168               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1513  0002FC  2634               	addwf	??_ScanWithRange,f,c
  1514  0002FE  0100               	movlb	0	; () banked
  1515  000300  5169               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1516  000302  2235               	addwfc	??_ScanWithRange+1,f,c
  1517  000304  0100               	movlb	0	; () banked
  1518  000306  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1519  000308  5C34               	subwf	??_ScanWithRange,w,c
  1520  00030A  0100               	movlb	0	; () banked
  1521  00030C  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1522  00030E  5835               	subwfb	??_ScanWithRange+1,w,c
  1523  000310  B0D8               	btfsc	status,0,c
  1524  000312  D00B               	goto	l2327
  1525  000314                     l2319:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;Movement.c: 151: stop(mL,mR);
  1529  000314  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1530  000318  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1531  00031C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1532  000320  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1533  000324  ECA7  F004         	call	_stop	;wreg free
  1534  000328  D77F               	goto	l2293
  1535  00032A                     l2327:
  1536  00032A  0100               	movlb	0	; () banked
  1537  00032C  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1538  00032E  0100               	movlb	0	; () banked
  1539  000330  5D62               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1540  000332  0100               	movlb	0	; () banked
  1541  000334  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1542  000336  0100               	movlb	0	; () banked
  1543  000338  5963               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1544  00033A  B0D8               	btfsc	status,0,c
  1545  00033C  D01B               	goto	l2341
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;Movement.c: 157: turnLeft(mL,mR);
  1549  00033E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1550  000342  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1551  000346  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1552  00034A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1553  00034E  EC04  F006         	call	_turnLeft	;wreg free
  1554                           
  1555                           ;Movement.c: 158: delay_tenth_s(3*tenth_seconds);
  1556  000352  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1557  000354  0D03               	mullw	3
  1558  000356  50F3               	movf	prodl,w,c
  1559  000358  EC45  F006         	call	_delay_tenth_s
  1560                           
  1561                           ;Movement.c: 159: stop(mL,mR);
  1562  00035C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1563  000360  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1564  000364  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1565  000368  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1566  00036C  ECA7  F004         	call	_stop	;wreg free
  1567  000370                     l2335:
  1568                           
  1569                           ;Movement.c: 160: return 0;
  1570  000370  0E00               	movlw	0
  1571  000372  0012               	return	
  1572  000374                     l2341:
  1573  000374  0100               	movlb	0	; () banked
  1574  000376  516A               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1575  000378  0100               	movlb	0	; () banked
  1576  00037A  5D68               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  1577  00037C  0100               	movlb	0	; () banked
  1578  00037E  516B               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1579  000380  0100               	movlb	0	; () banked
  1580  000382  5969               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1581  000384  B0D8               	btfsc	status,0,c
  1582  000386  D018               	goto	l2355
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;Movement.c: 163: turnRight(mL,mR);
  1586  000388  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1587  00038C  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1588  000390  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1589  000394  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1590  000398  ECDF  F005         	call	_turnRight	;wreg free
  1591                           
  1592                           ;Movement.c: 164: delay_tenth_s(tenth_seconds);
  1593  00039C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1594  00039E  EC45  F006         	call	_delay_tenth_s
  1595                           
  1596                           ;Movement.c: 165: stop(mL,mR);
  1597  0003A2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1598  0003A6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1599  0003AA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1600  0003AE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1601  0003B2  ECA7  F004         	call	_stop	;wreg free
  1602  0003B6  D7DC               	goto	l2335
  1603  0003B8                     l2355:
  1604  0003B8  0100               	movlb	0	; () banked
  1605  0003BA  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1606  0003BC  0100               	movlb	0	; () banked
  1607  0003BE  5D60               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1608  0003C0  0100               	movlb	0	; () banked
  1609  0003C2  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1610  0003C4  0100               	movlb	0	; () banked
  1611  0003C6  5961               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1612  0003C8  B0D8               	btfsc	status,0,c
  1613  0003CA  D02F               	goto	l2371
  1614                           
  1615                           ; BSR set to: 0
  1616  0003CC  0100               	movlb	0	; () banked
  1617  0003CE  5164               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1618  0003D0  0100               	movlb	0	; () banked
  1619  0003D2  5D66               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1620  0003D4  0100               	movlb	0	; () banked
  1621  0003D6  5165               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1622  0003D8  0100               	movlb	0	; () banked
  1623  0003DA  5967               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1624  0003DC  B0D8               	btfsc	status,0,c
  1625  0003DE  D025               	goto	l2371
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;Movement.c: 171: turnLeft(mL,mR);
  1629  0003E0  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1630  0003E4  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1631  0003E8  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1632  0003EC  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1633  0003F0  EC04  F006         	call	_turnLeft	;wreg free
  1634                           
  1635                           ;Movement.c: 172: delay_tenth_s((3*tenth_seconds)/2);
  1636  0003F4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1637  0003F6  0D03               	mullw	3
  1638  0003F8  CFF3 F015          	movff	prodl,___awdiv@dividend
  1639  0003FC  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1640  000400  0E00               	movlw	0
  1641  000402  6E18               	movwf	___awdiv@divisor+1,c
  1642  000404  0E02               	movlw	2
  1643  000406  6E17               	movwf	___awdiv@divisor,c
  1644  000408  ECEF  F004         	call	___awdiv	;wreg free
  1645  00040C  5015               	movf	?___awdiv,w,c
  1646  00040E  EC45  F006         	call	_delay_tenth_s
  1647                           
  1648                           ;Movement.c: 173: stop(mL,mR);
  1649  000412  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1650  000416  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1651  00041A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1652  00041E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1653  000422  ECA7  F004         	call	_stop	;wreg free
  1654  000426                     l2365:
  1655                           
  1656                           ;Movement.c: 174: return 1;
  1657  000426  0E01               	movlw	1
  1658  000428  0012               	return	
  1659  00042A                     l2371:
  1660  00042A  0100               	movlb	0	; () banked
  1661  00042C  5168               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1662  00042E  0100               	movlb	0	; () banked
  1663  000430  5D6A               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1664  000432  0100               	movlb	0	; () banked
  1665  000434  5169               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1666  000436  0100               	movlb	0	; () banked
  1667  000438  596B               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1668  00043A  B0D8               	btfsc	status,0,c
  1669  00043C  D02B               	goto	l2385
  1670                           
  1671                           ; BSR set to: 0
  1672  00043E  0100               	movlb	0	; () banked
  1673  000440  5166               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1674  000442  0100               	movlb	0	; () banked
  1675  000444  5D64               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  1676  000446  0100               	movlb	0	; () banked
  1677  000448  5167               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1678  00044A  0100               	movlb	0	; () banked
  1679  00044C  5965               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1680  00044E  B0D8               	btfsc	status,0,c
  1681  000450  D021               	goto	l2385
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;Movement.c: 177: turnLeft(mL,mR);
  1685  000452  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1686  000456  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1687  00045A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1688  00045E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1689  000462  EC04  F006         	call	_turnLeft	;wreg free
  1690                           
  1691                           ;Movement.c: 178: delay_tenth_s((tenth_seconds)/2);
  1692  000466  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  1693  00046A  6A16               	clrf	___awdiv@dividend+1,c
  1694  00046C  0E00               	movlw	0
  1695  00046E  6E18               	movwf	___awdiv@divisor+1,c
  1696  000470  0E02               	movlw	2
  1697  000472  6E17               	movwf	___awdiv@divisor,c
  1698  000474  ECEF  F004         	call	___awdiv	;wreg free
  1699  000478  5015               	movf	?___awdiv,w,c
  1700  00047A  EC45  F006         	call	_delay_tenth_s
  1701                           
  1702                           ;Movement.c: 179: stop(mL,mR);
  1703  00047E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1704  000482  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1705  000486  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1706  00048A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1707  00048E  ECA7  F004         	call	_stop	;wreg free
  1708  000492  D7C9               	goto	l2365
  1709  000494                     l2385:
  1710                           
  1711                           ;Movement.c: 181: }
  1712                           ;Movement.c: 182: return 0;
  1713  000494  0E00               	movlw	0
  1714  000496  0012               	return	
  1715  000498                     __end_of_ScanWithRange:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _enableSensor *****************
  1731 ;; Defined at:
  1732 ;;		line 106 in file "IR_Reading.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  sensor          1    wreg     unsigned char 
  1735 ;;  status          1   14[COMRAM] unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  sensor          1   15[COMRAM] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1747 ;;      Params:         1       0       0       0
  1748 ;;      Locals:         1       0       0       0
  1749 ;;      Temps:          0       0       0       0
  1750 ;;      Totals:         2       0       0       0
  1751 ;;Total ram usage:        2 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;;		_ScanWithRange
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text7
  1763  000D2A                     __ptext7:
  1764                           	opt stack 0
  1765  000D2A                     _enableSensor:
  1766                           	opt stack 29
  1767                           
  1768                           ;incstack = 0
  1769                           ;enableSensor@sensor stored from wreg
  1770  000D2A  6E10               	movwf	enableSensor@sensor,c
  1771                           
  1772                           ;IR_Reading.c: 108: if (sensor==0){
  1773  000D2C  5010               	movf	enableSensor@sensor,w,c
  1774  000D2E  A4D8               	btfss	status,2,c
  1775  000D30  D006               	goto	l2187
  1776                           
  1777                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1778  000D32  B00F               	btfsc	enableSensor@status,0,c
  1779  000D34  D002               	bra	u1525
  1780  000D36  908D               	bcf	3981,0,c	;volatile
  1781  000D38  D001               	bra	u1526
  1782  000D3A                     u1525:
  1783  000D3A  808D               	bsf	3981,0,c	;volatile
  1784  000D3C                     u1526:
  1785                           
  1786                           ;IR_Reading.c: 110: } else if (sensor==1){
  1787  000D3C  0012               	return	
  1788  000D3E                     l2187:
  1789  000D3E  0410               	decf	enableSensor@sensor,w,c
  1790  000D40  A4D8               	btfss	status,2,c
  1791  000D42  0012               	return	
  1792                           
  1793                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1794  000D44  B00F               	btfsc	enableSensor@status,0,c
  1795  000D46  D002               	bra	u1545
  1796  000D48  928D               	bcf	3981,1,c	;volatile
  1797  000D4A  D001               	bra	u1546
  1798  000D4C                     u1545:
  1799  000D4C  828D               	bsf	3981,1,c	;volatile
  1800  000D4E                     u1546:
  1801  000D4E  0012               	return	
  1802  000D50                     __end_of_enableSensor:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           indf2	equ	0xFDF
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _ScanIR *****************
  1818 ;; Defined at:
  1819 ;;		line 32 in file "Movement.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1822 ;;		 -> main@mL(9), 
  1823 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1824 ;;		 -> main@mR(9), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  SensorResult    4   54[COMRAM] unsigned int [2]
  1827 ;;  DirectionFou    2   52[COMRAM] const unsigned int 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      unsigned char 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1837 ;;      Params:         4       0       0       0
  1838 ;;      Locals:         6       0       0       0
  1839 ;;      Temps:          2       0       0       0
  1840 ;;      Totals:        12       0       0       0
  1841 ;;Total ram usage:       12 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    5
  1844 ;; This function calls:
  1845 ;;		_delay_tenth_s
  1846 ;;		_grabLeftIR
  1847 ;;		_grabRightIR
  1848 ;;		_stop
  1849 ;;		_turnLeft
  1850 ;;		_turnRight
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text8
  1857  000498                     __ptext8:
  1858                           	opt stack 0
  1859  000498                     _ScanIR:
  1860                           	opt stack 25
  1861                           
  1862                           ;Movement.c: 34: unsigned int SensorResult[2];
  1863                           ;Movement.c: 36: const unsigned int DirectionFoundTolerance=100;
  1864                           
  1865                           ;incstack = 0
  1866  000498  0E00               	movlw	0
  1867  00049A  6E36               	movwf	ScanIR@DirectionFoundTolerance+1,c
  1868  00049C  0E64               	movlw	100
  1869  00049E  6E35               	movwf	ScanIR@DirectionFoundTolerance,c
  1870                           
  1871                           ;Movement.c: 40: SensorResult[0]=grabLeftIR();
  1872  0004A0  EC6C  F005         	call	_grabLeftIR	;wreg free
  1873  0004A4  C00F  F037         	movff	?_grabLeftIR,ScanIR@SensorResult
  1874  0004A8  C010  F038         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  1875                           
  1876                           ;Movement.c: 41: SensorResult[1]=grabRightIR();
  1877  0004AC  EC31  F005         	call	_grabRightIR	;wreg free
  1878  0004B0  C00F  F039         	movff	?_grabRightIR,ScanIR@SensorResult+2
  1879  0004B4  C010  F03A         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  1880                           
  1881                           ;Movement.c: 42: stop(mL,mR);
  1882  0004B8  C02F  F026         	movff	ScanIR@mL,stop@mL
  1883  0004BC  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1884  0004C0  C031  F028         	movff	ScanIR@mR,stop@mR
  1885  0004C4  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1886  0004C8  ECA7  F004         	call	_stop	;wreg free
  1887                           
  1888                           ;Movement.c: 45: if ((SensorResult[0]+SensorResult[1])>1000) {
  1889  0004CC  5037               	movf	ScanIR@SensorResult,w,c
  1890  0004CE  2439               	addwf	ScanIR@SensorResult+2,w,c
  1891  0004D0  6E33               	movwf	??_ScanIR& (0+255),c
  1892  0004D2  5038               	movf	ScanIR@SensorResult+1,w,c
  1893  0004D4  203A               	addwfc	ScanIR@SensorResult+3,w,c
  1894  0004D6  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  1895  0004D8  0EE9               	movlw	233
  1896  0004DA  5C33               	subwf	??_ScanIR,w,c
  1897  0004DC  0E03               	movlw	3
  1898  0004DE  5834               	subwfb	??_ScanIR+1,w,c
  1899  0004E0  A0D8               	btfss	status,0,c
  1900  0004E2  D086               	goto	l2439
  1901                           
  1902                           ;Movement.c: 48: if ((SensorResult[0]>2500)&&(SensorResult[1]>2500)
  1903                           ;Movement.c: 49: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  1904                           ;Movement.c: 50: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance))) {
  1905  0004E4  0EC5               	movlw	197
  1906  0004E6  5C37               	subwf	ScanIR@SensorResult,w,c
  1907  0004E8  0E09               	movlw	9
  1908  0004EA  5838               	subwfb	ScanIR@SensorResult+1,w,c
  1909  0004EC  A0D8               	btfss	status,0,c
  1910  0004EE  D02E               	goto	l2413
  1911  0004F0  0EC5               	movlw	197
  1912  0004F2  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1913  0004F4  0E09               	movlw	9
  1914  0004F6  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1915  0004F8  A0D8               	btfss	status,0,c
  1916  0004FA  D028               	goto	l2413
  1917  0004FC  EE20  F039         	lfsr	2,ScanIR@SensorResult+2
  1918  000500  CFDE F033          	movff	postinc2,??_ScanIR
  1919  000504  CFDD F034          	movff	postdec2,??_ScanIR+1
  1920  000508  1E33               	comf	??_ScanIR,f,c
  1921  00050A  1E34               	comf	??_ScanIR+1,f,c
  1922  00050C  4A33               	infsnz	??_ScanIR,f,c
  1923  00050E  2A34               	incf	??_ScanIR+1,f,c
  1924  000510  5037               	movf	ScanIR@SensorResult,w,c
  1925  000512  2633               	addwf	??_ScanIR,f,c
  1926  000514  5038               	movf	ScanIR@SensorResult+1,w,c
  1927  000516  2234               	addwfc	??_ScanIR+1,f,c
  1928  000518  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1929  00051A  5C33               	subwf	??_ScanIR,w,c
  1930  00051C  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1931  00051E  5834               	subwfb	??_ScanIR+1,w,c
  1932  000520  A0D8               	btfss	status,0,c
  1933  000522  D012               	goto	l2407
  1934  000524  C037  F033         	movff	ScanIR@SensorResult,??_ScanIR
  1935  000528  C038  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  1936  00052C  1E33               	comf	??_ScanIR,f,c
  1937  00052E  1E34               	comf	??_ScanIR+1,f,c
  1938  000530  4A33               	infsnz	??_ScanIR,f,c
  1939  000532  2A34               	incf	??_ScanIR+1,f,c
  1940  000534  5039               	movf	ScanIR@SensorResult+2,w,c
  1941  000536  2633               	addwf	??_ScanIR,f,c
  1942  000538  503A               	movf	ScanIR@SensorResult+3,w,c
  1943  00053A  2234               	addwfc	??_ScanIR+1,f,c
  1944  00053C  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1945  00053E  5C33               	subwf	??_ScanIR,w,c
  1946  000540  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1947  000542  5834               	subwfb	??_ScanIR+1,w,c
  1948  000544  B0D8               	btfsc	status,0,c
  1949  000546  D002               	goto	l2413
  1950  000548                     l2407:
  1951                           
  1952                           ;Movement.c: 51: return 2;
  1953  000548  0E02               	movlw	2
  1954                           
  1955                           ;Movement.c: 54: } else if (SensorResult[0]<=SensorResult[1]) {
  1956  00054A  0012               	return	
  1957  00054C                     l2413:
  1958  00054C  5037               	movf	ScanIR@SensorResult,w,c
  1959  00054E  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1960  000550  5038               	movf	ScanIR@SensorResult+1,w,c
  1961  000552  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1962  000554  A0D8               	btfss	status,0,c
  1963  000556  D023               	goto	l2427
  1964                           
  1965                           ;Movement.c: 55: stop(mL,mR);
  1966  000558  C02F  F026         	movff	ScanIR@mL,stop@mL
  1967  00055C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1968  000560  C031  F028         	movff	ScanIR@mR,stop@mR
  1969  000564  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1970  000568  ECA7  F004         	call	_stop	;wreg free
  1971                           
  1972                           ;Movement.c: 56: turnLeft(mL,mR);
  1973  00056C  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1974  000570  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1975  000574  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1976  000578  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1977  00057C  EC04  F006         	call	_turnLeft	;wreg free
  1978                           
  1979                           ;Movement.c: 57: delay_tenth_s(3);
  1980  000580  0E03               	movlw	3
  1981  000582  EC45  F006         	call	_delay_tenth_s
  1982                           
  1983                           ;Movement.c: 58: stop(mL,mR);
  1984  000586  C02F  F026         	movff	ScanIR@mL,stop@mL
  1985  00058A  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1986  00058E  C031  F028         	movff	ScanIR@mR,stop@mR
  1987  000592  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1988  000596  ECA7  F004         	call	_stop	;wreg free
  1989                           
  1990                           ;Movement.c: 59: return 1;
  1991  00059A  0E01               	movlw	1
  1992                           
  1993                           ;Movement.c: 61: } else if (SensorResult[0]>SensorResult[1]) {
  1994  00059C  0012               	return	
  1995  00059E                     l2427:
  1996  00059E  5037               	movf	ScanIR@SensorResult,w,c
  1997  0005A0  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1998  0005A2  5038               	movf	ScanIR@SensorResult+1,w,c
  1999  0005A4  583A               	subwfb	ScanIR@SensorResult+3,w,c
  2000  0005A6  B0D8               	btfsc	status,0,c
  2001  0005A8  0012               	return	
  2002                           
  2003                           ;Movement.c: 62: stop(mL,mR);
  2004  0005AA  C02F  F026         	movff	ScanIR@mL,stop@mL
  2005  0005AE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2006  0005B2  C031  F028         	movff	ScanIR@mR,stop@mR
  2007  0005B6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2008  0005BA  ECA7  F004         	call	_stop	;wreg free
  2009                           
  2010                           ;Movement.c: 63: turnRight(mL,mR);
  2011  0005BE  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2012  0005C2  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2013  0005C6  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2014  0005CA  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2015  0005CE  ECDF  F005         	call	_turnRight	;wreg free
  2016                           
  2017                           ;Movement.c: 64: delay_tenth_s(3);
  2018  0005D2  0E03               	movlw	3
  2019  0005D4  EC45  F006         	call	_delay_tenth_s
  2020                           
  2021                           ;Movement.c: 65: stop(mL,mR);
  2022  0005D8  C02F  F026         	movff	ScanIR@mL,stop@mL
  2023  0005DC  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2024  0005E0  C031  F028         	movff	ScanIR@mR,stop@mR
  2025  0005E4  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2026  0005E8  ECA7  F004         	call	_stop	;wreg free
  2027                           
  2028                           ;Movement.c: 66: return 1;
  2029  0005EC  0E01               	movlw	1
  2030                           
  2031                           ;Movement.c: 67: }
  2032                           ;Movement.c: 68: } else {
  2033  0005EE  0012               	return	
  2034  0005F0                     l2439:
  2035                           
  2036                           ;Movement.c: 70: stop(mL,mR);
  2037  0005F0  C02F  F026         	movff	ScanIR@mL,stop@mL
  2038  0005F4  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2039  0005F8  C031  F028         	movff	ScanIR@mR,stop@mR
  2040  0005FC  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2041  000600  ECA7  F004         	call	_stop	;wreg free
  2042                           
  2043                           ;Movement.c: 73: if (SensorResult[0]<=SensorResult[1]) {
  2044  000604  5037               	movf	ScanIR@SensorResult,w,c
  2045  000606  5C39               	subwf	ScanIR@SensorResult+2,w,c
  2046  000608  5038               	movf	ScanIR@SensorResult+1,w,c
  2047  00060A  583A               	subwfb	ScanIR@SensorResult+3,w,c
  2048  00060C  A0D8               	btfss	status,0,c
  2049  00060E  D019               	goto	l2455
  2050                           
  2051                           ;Movement.c: 74: turnLeft(mL,mR);
  2052  000610  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2053  000614  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2054  000618  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2055  00061C  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2056  000620  EC04  F006         	call	_turnLeft	;wreg free
  2057                           
  2058                           ;Movement.c: 75: delay_tenth_s(5);
  2059  000624  0E05               	movlw	5
  2060  000626  EC45  F006         	call	_delay_tenth_s
  2061                           
  2062                           ;Movement.c: 76: stop(mL,mR);
  2063  00062A  C02F  F026         	movff	ScanIR@mL,stop@mL
  2064  00062E  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2065  000632  C031  F028         	movff	ScanIR@mR,stop@mR
  2066  000636  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2067  00063A  ECA7  F004         	call	_stop	;wreg free
  2068                           
  2069                           ;Movement.c: 77: return 0;
  2070  00063E  0E00               	movlw	0
  2071                           
  2072                           ;Movement.c: 79: } else if (SensorResult[0]>SensorResult[1]) {
  2073  000640  0012               	return	
  2074  000642                     l2455:
  2075  000642  5037               	movf	ScanIR@SensorResult,w,c
  2076  000644  5C39               	subwf	ScanIR@SensorResult+2,w,c
  2077  000646  5038               	movf	ScanIR@SensorResult+1,w,c
  2078  000648  583A               	subwfb	ScanIR@SensorResult+3,w,c
  2079  00064A  B0D8               	btfsc	status,0,c
  2080  00064C  0012               	return	
  2081                           
  2082                           ;Movement.c: 80: turnRight(mL,mR);
  2083  00064E  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2084  000652  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2085  000656  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2086  00065A  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2087  00065E  ECDF  F005         	call	_turnRight	;wreg free
  2088                           
  2089                           ;Movement.c: 81: delay_tenth_s(5);
  2090  000662  0E05               	movlw	5
  2091  000664  EC45  F006         	call	_delay_tenth_s
  2092                           
  2093                           ;Movement.c: 82: stop(mL,mR);
  2094  000668  C02F  F026         	movff	ScanIR@mL,stop@mL
  2095  00066C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2096  000670  C031  F028         	movff	ScanIR@mR,stop@mR
  2097  000674  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2098  000678  ECA7  F004         	call	_stop	;wreg free
  2099                           
  2100                           ;Movement.c: 83: return 0;
  2101  00067C  0E00               	movlw	0
  2102  00067E  0012               	return	
  2103  000680                     __end_of_ScanIR:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon	equ	0xFF2
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           indf2	equ	0xFDF
  2112                           postinc2	equ	0xFDE
  2113                           postdec2	equ	0xFDD
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8
  2117                           
  2118 ;; *************** function _turnRight *****************
  2119 ;; Defined at:
  2120 ;;		line 98 in file "dc_motor.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2123 ;;		 -> main@mL(9), 
  2124 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2125 ;;		 -> main@mR(9), 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2137 ;;      Params:         4       0       0       0
  2138 ;;      Locals:         0       0       0       0
  2139 ;;      Temps:          0       0       0       0
  2140 ;;      Totals:         4       0       0       0
  2141 ;;Total ram usage:        4 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		_fullSpeedAhead
  2146 ;;		_stop
  2147 ;; This function is called by:
  2148 ;;		_ScanIR
  2149 ;;		_ScanWithRange
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text9
  2154  000BBE                     __ptext9:
  2155                           	opt stack 0
  2156  000BBE                     _turnRight:
  2157                           	opt stack 25
  2158                           
  2159                           ;dc_motor.c: 100: stop(mL, mR);
  2160                           
  2161                           ;incstack = 0
  2162  000BBE  C02B  F026         	movff	turnRight@mL,stop@mL
  2163  000BC2  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2164  000BC6  C02D  F028         	movff	turnRight@mR,stop@mR
  2165  000BCA  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2166  000BCE  ECA7  F004         	call	_stop	;wreg free
  2167                           
  2168                           ;dc_motor.c: 102: mL->direction=1;
  2169  000BD2  EE20 F001          	lfsr	2,1
  2170  000BD6  502B               	movf	turnRight@mL,w,c
  2171  000BD8  26D9               	addwf	fsr2l,f,c
  2172  000BDA  502C               	movf	turnRight@mL+1,w,c
  2173  000BDC  22DA               	addwfc	fsr2h,f,c
  2174  000BDE  0E01               	movlw	1
  2175  000BE0  6EDF               	movwf	indf2,c
  2176                           
  2177                           ;dc_motor.c: 103: mR->direction=0;
  2178  000BE2  EE20 F001          	lfsr	2,1
  2179  000BE6  502D               	movf	turnRight@mR,w,c
  2180  000BE8  26D9               	addwf	fsr2l,f,c
  2181  000BEA  502E               	movf	turnRight@mR+1,w,c
  2182  000BEC  22DA               	addwfc	fsr2h,f,c
  2183  000BEE  0E00               	movlw	0
  2184  000BF0  6EDF               	movwf	indf2,c
  2185                           
  2186                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2187  000BF2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2188  000BF6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2189  000BFA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2190  000BFE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2191  000C02  ECA7  F005         	call	_fullSpeedAhead	;wreg free
  2192  000C06  0012               	return		;funcret
  2193  000C08                     __end_of_turnRight:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           intcon	equ	0xFF2
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           fsr2h	equ	0xFDA
  2205                           fsr2l	equ	0xFD9
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _turnLeft *****************
  2209 ;; Defined at:
  2210 ;;		line 87 in file "dc_motor.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2213 ;;		 -> main@mL(9), 
  2214 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2215 ;;		 -> main@mR(9), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;		None               void
  2220 ;; Registers used:
  2221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2227 ;;      Params:         4       0       0       0
  2228 ;;      Locals:         0       0       0       0
  2229 ;;      Temps:          0       0       0       0
  2230 ;;      Totals:         4       0       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    4
  2234 ;; This function calls:
  2235 ;;		_fullSpeedAhead
  2236 ;;		_stop
  2237 ;; This function is called by:
  2238 ;;		_ScanIR
  2239 ;;		_ScanWithRange
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text10
  2244  000C08                     __ptext10:
  2245                           	opt stack 0
  2246  000C08                     _turnLeft:
  2247                           	opt stack 25
  2248                           
  2249                           ;dc_motor.c: 89: stop(mL, mR);
  2250                           
  2251                           ;incstack = 0
  2252  000C08  C02B  F026         	movff	turnLeft@mL,stop@mL
  2253  000C0C  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2254  000C10  C02D  F028         	movff	turnLeft@mR,stop@mR
  2255  000C14  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2256  000C18  ECA7  F004         	call	_stop	;wreg free
  2257                           
  2258                           ;dc_motor.c: 91: mL->direction=0;
  2259  000C1C  EE20 F001          	lfsr	2,1
  2260  000C20  502B               	movf	turnLeft@mL,w,c
  2261  000C22  26D9               	addwf	fsr2l,f,c
  2262  000C24  502C               	movf	turnLeft@mL+1,w,c
  2263  000C26  22DA               	addwfc	fsr2h,f,c
  2264  000C28  0E00               	movlw	0
  2265  000C2A  6EDF               	movwf	indf2,c
  2266                           
  2267                           ;dc_motor.c: 92: mR->direction=1;
  2268  000C2C  EE20 F001          	lfsr	2,1
  2269  000C30  502D               	movf	turnLeft@mR,w,c
  2270  000C32  26D9               	addwf	fsr2l,f,c
  2271  000C34  502E               	movf	turnLeft@mR+1,w,c
  2272  000C36  22DA               	addwfc	fsr2h,f,c
  2273  000C38  0E01               	movlw	1
  2274  000C3A  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2277  000C3C  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2278  000C40  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2279  000C44  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2280  000C48  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2281  000C4C  ECA7  F005         	call	_fullSpeedAhead	;wreg free
  2282  000C50  0012               	return		;funcret
  2283  000C52                     __end_of_turnLeft:
  2284                           	opt stack 0
  2285                           tblptru	equ	0xFF8
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           intcon	equ	0xFF2
  2289                           postinc0	equ	0xFEE
  2290                           wreg	equ	0xFE8
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _stop *****************
  2299 ;; Defined at:
  2300 ;;		line 67 in file "dc_motor.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2303 ;;		 -> main@mL(9), 
  2304 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2305 ;;		 -> main@mR(9), 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;		None               void
  2310 ;; Registers used:
  2311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2317 ;;      Params:         4       0       0       0
  2318 ;;      Locals:         0       0       0       0
  2319 ;;      Temps:          0       0       0       0
  2320 ;;      Totals:         4       0       0       0
  2321 ;;Total ram usage:        4 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    3
  2324 ;; This function calls:
  2325 ;;		_setMotorPWM
  2326 ;; This function is called by:
  2327 ;;		_main
  2328 ;;		_turnLeft
  2329 ;;		_turnRight
  2330 ;;		_ScanIR
  2331 ;;		_ScanWithRange
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text11
  2336  00094E                     __ptext11:
  2337                           	opt stack 0
  2338  00094E                     _stop:
  2339                           	opt stack 27
  2340                           
  2341                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2342                           
  2343                           ;incstack = 0
  2344  00094E  D028               	goto	l2177
  2345  000950                     l2163:
  2346                           
  2347                           ;dc_motor.c: 71: if(mL->power>0){
  2348  000950  C026  FFD9         	movff	stop@mL,fsr2l
  2349  000954  C027  FFDA         	movff	stop@mL+1,fsr2h
  2350  000958  50DF               	movf	indf2,w,c
  2351  00095A  B4D8               	btfsc	status,2,c
  2352  00095C  D005               	goto	l2167
  2353                           
  2354                           ;dc_motor.c: 72: mL->power--;
  2355  00095E  C026  FFD9         	movff	stop@mL,fsr2l
  2356  000962  C027  FFDA         	movff	stop@mL+1,fsr2h
  2357  000966  06DF               	decf	indf2,f,c
  2358  000968                     l2167:
  2359                           
  2360                           ;dc_motor.c: 73: }
  2361                           ;dc_motor.c: 74: if(mR->power>0){
  2362  000968  C028  FFD9         	movff	stop@mR,fsr2l
  2363  00096C  C029  FFDA         	movff	stop@mR+1,fsr2h
  2364  000970  50DF               	movf	indf2,w,c
  2365  000972  B4D8               	btfsc	status,2,c
  2366  000974  D005               	goto	l2171
  2367                           
  2368                           ;dc_motor.c: 75: mR->power--;
  2369  000976  C028  FFD9         	movff	stop@mR,fsr2l
  2370  00097A  C029  FFDA         	movff	stop@mR+1,fsr2h
  2371  00097E  06DF               	decf	indf2,f,c
  2372  000980                     l2171:
  2373                           
  2374                           ;dc_motor.c: 76: }
  2375                           ;dc_motor.c: 77: setMotorPWM(mL);
  2376  000980  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2377  000984  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2378  000988  EC0D  F004         	call	_setMotorPWM	;wreg free
  2379                           
  2380                           ;dc_motor.c: 78: setMotorPWM(mR);
  2381  00098C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2382  000990  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2383  000994  EC0D  F004         	call	_setMotorPWM	;wreg free
  2384                           
  2385                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2386  000998  0E21               	movlw	33
  2387  00099A                     u1907:
  2388  00099A  2EE8               	decfsz	wreg,f,c
  2389  00099C  D7FE               	goto	u1907
  2390  00099E  F000               	nop	
  2391  0009A0                     l2177:
  2392  0009A0  C026  FFD9         	movff	stop@mL,fsr2l
  2393  0009A4  C027  FFDA         	movff	stop@mL+1,fsr2h
  2394  0009A8  50DF               	movf	indf2,w,c
  2395  0009AA  A4D8               	btfss	status,2,c
  2396  0009AC  D7D1               	goto	l2163
  2397  0009AE  C028  FFD9         	movff	stop@mR,fsr2l
  2398  0009B2  C029  FFDA         	movff	stop@mR+1,fsr2h
  2399  0009B6  50DF               	movf	indf2,w,c
  2400  0009B8  A4D8               	btfss	status,2,c
  2401  0009BA  D7CA               	goto	l2163
  2402                           
  2403                           ;dc_motor.c: 80: }
  2404                           ;dc_motor.c: 81: mL->direction=1;
  2405  0009BC  EE20 F001          	lfsr	2,1
  2406  0009C0  5026               	movf	stop@mL,w,c
  2407  0009C2  26D9               	addwf	fsr2l,f,c
  2408  0009C4  5027               	movf	stop@mL+1,w,c
  2409  0009C6  22DA               	addwfc	fsr2h,f,c
  2410  0009C8  0E01               	movlw	1
  2411  0009CA  6EDF               	movwf	indf2,c
  2412                           
  2413                           ;dc_motor.c: 82: mR->direction=1;
  2414  0009CC  EE20 F001          	lfsr	2,1
  2415  0009D0  5028               	movf	stop@mR,w,c
  2416  0009D2  26D9               	addwf	fsr2l,f,c
  2417  0009D4  5029               	movf	stop@mR+1,w,c
  2418  0009D6  22DA               	addwfc	fsr2h,f,c
  2419  0009D8  0E01               	movlw	1
  2420  0009DA  6EDF               	movwf	indf2,c
  2421  0009DC  0012               	return		;funcret
  2422  0009DE                     __end_of_stop:
  2423                           	opt stack 0
  2424                           tblptru	equ	0xFF8
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           intcon	equ	0xFF2
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           indf2	equ	0xFDF
  2431                           postinc2	equ	0xFDE
  2432                           postdec2	equ	0xFDD
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _fullSpeedAhead *****************
  2438 ;; Defined at:
  2439 ;;		line 108 in file "dc_motor.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2442 ;;		 -> main@mL(9), 
  2443 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2444 ;;		 -> main@mR(9), 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;		None               void
  2449 ;; Registers used:
  2450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2456 ;;      Params:         4       0       0       0
  2457 ;;      Locals:         0       0       0       0
  2458 ;;      Temps:          1       0       0       0
  2459 ;;      Totals:         5       0       0       0
  2460 ;;Total ram usage:        5 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		_setMotorPWM
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;;		_turnLeft
  2468 ;;		_turnRight
  2469 ;;		_fullSpeedBack
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text12
  2474  000B4E                     __ptext12:
  2475                           	opt stack 0
  2476  000B4E                     _fullSpeedAhead:
  2477                           	opt stack 26
  2478                           
  2479                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2480                           
  2481                           ;incstack = 0
  2482  000B4E  D028               	goto	l139
  2483  000B50                     l2145:
  2484                           
  2485                           ;dc_motor.c: 112: if(mL->power<100){
  2486  000B50  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2487  000B54  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2488  000B58  0E64               	movlw	100
  2489  000B5A  60DF               	cpfslt	indf2,c
  2490  000B5C  D005               	goto	l2149
  2491                           
  2492                           ;dc_motor.c: 113: mL->power++;
  2493  000B5E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2494  000B62  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2495  000B66  2ADF               	incf	indf2,f,c
  2496  000B68                     l2149:
  2497                           
  2498                           ;dc_motor.c: 114: }
  2499                           ;dc_motor.c: 115: if(mR->power<100){
  2500  000B68  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2501  000B6C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2502  000B70  0E64               	movlw	100
  2503  000B72  60DF               	cpfslt	indf2,c
  2504  000B74  D005               	goto	l2153
  2505                           
  2506                           ;dc_motor.c: 116: mR->power++;
  2507  000B76  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2508  000B7A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2509  000B7E  2ADF               	incf	indf2,f,c
  2510  000B80                     l2153:
  2511                           
  2512                           ;dc_motor.c: 117: }
  2513                           ;dc_motor.c: 118: setMotorPWM(mL);
  2514  000B80  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2515  000B84  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2516  000B88  EC0D  F004         	call	_setMotorPWM	;wreg free
  2517                           
  2518                           ;dc_motor.c: 119: setMotorPWM(mR);
  2519  000B8C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2520  000B90  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2521  000B94  EC0D  F004         	call	_setMotorPWM	;wreg free
  2522                           
  2523                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2524  000B98  0E21               	movlw	33
  2525  000B9A                     u1917:
  2526  000B9A  2EE8               	decfsz	wreg,f,c
  2527  000B9C  D7FE               	goto	u1917
  2528  000B9E  F000               	nop	
  2529  000BA0                     l139:
  2530  000BA0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2531  000BA4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2532  000BA8  0E63               	movlw	99
  2533  000BAA  64DF               	cpfsgt	indf2,c
  2534  000BAC  D7D1               	goto	l2145
  2535  000BAE  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2536  000BB2  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2537  000BB6  0E63               	movlw	99
  2538  000BB8  64DF               	cpfsgt	indf2,c
  2539  000BBA  D7CA               	goto	l2145
  2540  000BBC  0012               	return	
  2541  000BBE                     __end_of_fullSpeedAhead:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           prodh	equ	0xFF4
  2545                           prodl	equ	0xFF3
  2546                           intcon	equ	0xFF2
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           indf2	equ	0xFDF
  2550                           postinc2	equ	0xFDE
  2551                           postdec2	equ	0xFDD
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _setMotorPWM *****************
  2557 ;; Defined at:
  2558 ;;		line 26 in file "dc_motor.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2561 ;;		 -> main@mR(9), main@mL(9), 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  PWMduty         2   35[COMRAM] int 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;		None               void
  2566 ;; Registers used:
  2567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2573 ;;      Params:         2       0       0       0
  2574 ;;      Locals:         2       0       0       0
  2575 ;;      Temps:          5       0       0       0
  2576 ;;      Totals:         9       0       0       0
  2577 ;;Total ram usage:        9 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    2
  2580 ;; This function calls:
  2581 ;;		___awdiv
  2582 ;;		___wmul
  2583 ;; This function is called by:
  2584 ;;		_stop
  2585 ;;		_fullSpeedAhead
  2586 ;;		_setMotorFullSpeed
  2587 ;;		_stopMotor
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text13
  2592  00081A                     __ptext13:
  2593                           	opt stack 0
  2594  00081A                     _setMotorPWM:
  2595                           	opt stack 27
  2596                           
  2597                           ;dc_motor.c: 28: int PWMduty;
  2598                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2599                           
  2600                           ;incstack = 0
  2601  00081A  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2602  00081E  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2603  000822  50DF               	movf	indf2,w,c
  2604  000824  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2605  000826  501F               	movf	??_setMotorPWM,w,c
  2606  000828  6E0F               	movwf	___wmul@multiplier,c
  2607  00082A  6A10               	clrf	___wmul@multiplier+1,c
  2608  00082C  EE20 F007          	lfsr	2,7
  2609  000830  501D               	movf	setMotorPWM@m,w,c
  2610  000832  26D9               	addwf	fsr2l,f,c
  2611  000834  501E               	movf	setMotorPWM@m+1,w,c
  2612  000836  22DA               	addwfc	fsr2h,f,c
  2613  000838  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2614  00083C  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2615  000840  ECA8  F006         	call	___wmul	;wreg free
  2616  000844  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2617  000848  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2618  00084C  0E00               	movlw	0
  2619  00084E  6E18               	movwf	___awdiv@divisor+1,c
  2620  000850  0E64               	movlw	100
  2621  000852  6E17               	movwf	___awdiv@divisor,c
  2622  000854  ECEF  F004         	call	___awdiv	;wreg free
  2623  000858  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2624  00085C  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2625                           
  2626                           ;dc_motor.c: 32: if (m->direction)
  2627  000860  EE20 F001          	lfsr	2,1
  2628  000864  501D               	movf	setMotorPWM@m,w,c
  2629  000866  26D9               	addwf	fsr2l,f,c
  2630  000868  501E               	movf	setMotorPWM@m+1,w,c
  2631  00086A  22DA               	addwfc	fsr2h,f,c
  2632  00086C  50DF               	movf	indf2,w,c
  2633  00086E  B4D8               	btfsc	status,2,c
  2634  000870  D02C               	goto	l2141
  2635                           
  2636                           ;dc_motor.c: 33: {
  2637                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2638  000872  EE20 F006          	lfsr	2,6
  2639  000876  501D               	movf	setMotorPWM@m,w,c
  2640  000878  26D9               	addwf	fsr2l,f,c
  2641  00087A  501E               	movf	setMotorPWM@m+1,w,c
  2642  00087C  22DA               	addwfc	fsr2h,f,c
  2643  00087E  50DF               	movf	indf2,w,c
  2644  000880  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2645  000882  0E01               	movlw	1
  2646  000884  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2647  000886  2A1F               	incf	??_setMotorPWM,f,c
  2648  000888  D002               	goto	u1404
  2649  00088A                     u1405:
  2650  00088A  90D8               	bcf	status,0,c
  2651  00088C  3620               	rlcf	??_setMotorPWM+1,f,c
  2652  00088E                     u1404:
  2653  00088E  2E1F               	decfsz	??_setMotorPWM,f,c
  2654  000890  D7FC               	goto	u1405
  2655  000892  5020               	movf	??_setMotorPWM+1,w,c
  2656  000894  108A               	iorwf	3978,w,c	;volatile
  2657  000896  6E8A               	movwf	3978,c	;volatile
  2658                           
  2659                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2660  000898  EE20 F007          	lfsr	2,7
  2661  00089C  501D               	movf	setMotorPWM@m,w,c
  2662  00089E  26D9               	addwf	fsr2l,f,c
  2663  0008A0  501E               	movf	setMotorPWM@m+1,w,c
  2664  0008A2  22DA               	addwfc	fsr2h,f,c
  2665  0008A4  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2666  0008A8  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2667  0008AC  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2668  0008B0  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2669  0008B4  1E21               	comf	??_setMotorPWM+2,f,c
  2670  0008B6  1E22               	comf	??_setMotorPWM+3,f,c
  2671  0008B8  4A21               	infsnz	??_setMotorPWM+2,f,c
  2672  0008BA  2A22               	incf	??_setMotorPWM+3,f,c
  2673  0008BC  501F               	movf	??_setMotorPWM,w,c
  2674  0008BE  2421               	addwf	??_setMotorPWM+2,w,c
  2675  0008C0  6E24               	movwf	setMotorPWM@PWMduty,c
  2676  0008C2  5020               	movf	??_setMotorPWM+1,w,c
  2677  0008C4  2022               	addwfc	??_setMotorPWM+3,w,c
  2678  0008C6  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2679                           
  2680                           ;dc_motor.c: 36: }
  2681  0008C8  D014               	goto	l109
  2682  0008CA                     l2141:
  2683                           
  2684                           ;dc_motor.c: 37: else
  2685                           ;dc_motor.c: 38: {
  2686                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2687  0008CA  EE20 F006          	lfsr	2,6
  2688  0008CE  501D               	movf	setMotorPWM@m,w,c
  2689  0008D0  26D9               	addwf	fsr2l,f,c
  2690  0008D2  501E               	movf	setMotorPWM@m+1,w,c
  2691  0008D4  22DA               	addwfc	fsr2h,f,c
  2692  0008D6  50DF               	movf	indf2,w,c
  2693  0008D8  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2694  0008DA  0E01               	movlw	1
  2695  0008DC  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2696  0008DE  2A1F               	incf	??_setMotorPWM,f,c
  2697  0008E0  D002               	goto	u1414
  2698  0008E2                     u1415:
  2699  0008E2  90D8               	bcf	status,0,c
  2700  0008E4  3620               	rlcf	??_setMotorPWM+1,f,c
  2701  0008E6                     u1414:
  2702  0008E6  2E1F               	decfsz	??_setMotorPWM,f,c
  2703  0008E8  D7FC               	goto	u1415
  2704  0008EA  5020               	movf	??_setMotorPWM+1,w,c
  2705  0008EC  0AFF               	xorlw	255
  2706  0008EE  148A               	andwf	3978,w,c	;volatile
  2707  0008F0  6E8A               	movwf	3978,c	;volatile
  2708  0008F2                     l109:
  2709                           
  2710                           ;dc_motor.c: 40: }
  2711                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2712  0008F2  EE20 F002          	lfsr	2,2
  2713  0008F6  501D               	movf	setMotorPWM@m,w,c
  2714  0008F8  26D9               	addwf	fsr2l,f,c
  2715  0008FA  501E               	movf	setMotorPWM@m+1,w,c
  2716  0008FC  22DA               	addwfc	fsr2h,f,c
  2717  0008FE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2718  000902  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2719  000906  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2720  00090A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2721  00090E  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2722  000910  46E8               	rlncf	wreg,f,c
  2723  000912  0BFC               	andlw	252
  2724  000914  6EDF               	movwf	indf2,c
  2725                           
  2726                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2727  000916  EE20 F004          	lfsr	2,4
  2728  00091A  501D               	movf	setMotorPWM@m,w,c
  2729  00091C  26D9               	addwf	fsr2l,f,c
  2730  00091E  501E               	movf	setMotorPWM@m+1,w,c
  2731  000920  22DA               	addwfc	fsr2h,f,c
  2732  000922  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2733  000926  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2734  00092A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2735  00092E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2736  000932  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2737  000936  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2738  00093A  0E06               	movlw	6
  2739  00093C  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2740  00093E                     u1425:
  2741  00093E  3422               	rlcf	??_setMotorPWM+3,w,c
  2742  000940  3222               	rrcf	??_setMotorPWM+3,f,c
  2743  000942  3221               	rrcf	??_setMotorPWM+2,f,c
  2744  000944  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2745  000946  D7FB               	goto	u1425
  2746  000948  5021               	movf	??_setMotorPWM+2,w,c
  2747  00094A  6EDF               	movwf	indf2,c
  2748  00094C  0012               	return		;funcret
  2749  00094E                     __end_of_setMotorPWM:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           intcon	equ	0xFF2
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           indf2	equ	0xFDF
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function ___wmul *****************
  2765 ;; Defined at:
  2766 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  multiplier      2   14[COMRAM] unsigned int 
  2769 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  product         2   18[COMRAM] unsigned int 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2   14[COMRAM] unsigned int 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0, prodl, prodh
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2781 ;;      Params:         4       0       0       0
  2782 ;;      Locals:         2       0       0       0
  2783 ;;      Temps:          0       0       0       0
  2784 ;;      Totals:         6       0       0       0
  2785 ;;Total ram usage:        6 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_setMotorPWM
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text14
  2796  000D50                     __ptext14:
  2797                           	opt stack 0
  2798  000D50                     ___wmul:
  2799                           	opt stack 27
  2800                           
  2801                           ;incstack = 0
  2802  000D50  500F               	movf	___wmul@multiplier,w,c
  2803  000D52  0211               	mulwf	___wmul@multiplicand,c
  2804  000D54  CFF3 F013          	movff	prodl,___wmul@product
  2805  000D58  CFF4 F014          	movff	prodh,___wmul@product+1
  2806  000D5C  500F               	movf	___wmul@multiplier,w,c
  2807  000D5E  0212               	mulwf	___wmul@multiplicand+1,c
  2808  000D60  50F3               	movf	prodl,w,c
  2809  000D62  2614               	addwf	___wmul@product+1,f,c
  2810  000D64  5010               	movf	___wmul@multiplier+1,w,c
  2811  000D66  0211               	mulwf	___wmul@multiplicand,c
  2812  000D68  50F3               	movf	prodl,w,c
  2813  000D6A  2614               	addwf	___wmul@product+1,f,c
  2814  000D6C  C013  F00F         	movff	___wmul@product,?___wmul
  2815  000D70  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2816  000D74  0012               	return	
  2817  000D76                     __end_of___wmul:
  2818                           	opt stack 0
  2819                           tblptru	equ	0xFF8
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           indf2	equ	0xFDF
  2826                           postinc2	equ	0xFDE
  2827                           postdec2	equ	0xFDD
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function ___awdiv *****************
  2833 ;; Defined at:
  2834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  dividend        2   20[COMRAM] int 
  2837 ;;  divisor         2   22[COMRAM] int 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  quotient        2   26[COMRAM] int 
  2840 ;;  sign            1   25[COMRAM] unsigned char 
  2841 ;;  counter         1   24[COMRAM] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  2   20[COMRAM] int 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2851 ;;      Params:         4       0       0       0
  2852 ;;      Locals:         4       0       0       0
  2853 ;;      Temps:          0       0       0       0
  2854 ;;      Totals:         8       0       0       0
  2855 ;;Total ram usage:        8 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_setMotorPWM
  2862 ;;		_ScanWithRange
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text15
  2867  0009DE                     __ptext15:
  2868                           	opt stack 0
  2869  0009DE                     ___awdiv:
  2870                           	opt stack 27
  2871                           
  2872                           ;incstack = 0
  2873  0009DE  0E00               	movlw	0
  2874  0009E0  6E1A               	movwf	___awdiv@sign,c
  2875  0009E2  AE18               	btfss	___awdiv@divisor+1,7,c
  2876  0009E4  D006               	goto	l2099
  2877  0009E6  6C17               	negf	___awdiv@divisor,c
  2878  0009E8  1E18               	comf	___awdiv@divisor+1,f,c
  2879  0009EA  B0D8               	btfsc	status,0,c
  2880  0009EC  2A18               	incf	___awdiv@divisor+1,f,c
  2881  0009EE  0E01               	movlw	1
  2882  0009F0  6E1A               	movwf	___awdiv@sign,c
  2883  0009F2                     l2099:
  2884  0009F2  AE16               	btfss	___awdiv@dividend+1,7,c
  2885  0009F4  D006               	goto	l2105
  2886  0009F6  6C15               	negf	___awdiv@dividend,c
  2887  0009F8  1E16               	comf	___awdiv@dividend+1,f,c
  2888  0009FA  B0D8               	btfsc	status,0,c
  2889  0009FC  2A16               	incf	___awdiv@dividend+1,f,c
  2890  0009FE  0E01               	movlw	1
  2891  000A00  1A1A               	xorwf	___awdiv@sign,f,c
  2892  000A02                     l2105:
  2893  000A02  0E00               	movlw	0
  2894  000A04  6E1C               	movwf	___awdiv@quotient+1,c
  2895  000A06  0E00               	movlw	0
  2896  000A08  6E1B               	movwf	___awdiv@quotient,c
  2897  000A0A  5017               	movf	___awdiv@divisor,w,c
  2898  000A0C  1018               	iorwf	___awdiv@divisor+1,w,c
  2899  000A0E  B4D8               	btfsc	status,2,c
  2900  000A10  D01C               	goto	l2127
  2901  000A12  0E01               	movlw	1
  2902  000A14  6E19               	movwf	___awdiv@counter,c
  2903  000A16  D004               	goto	l2113
  2904  000A18                     l2111:
  2905  000A18  90D8               	bcf	status,0,c
  2906  000A1A  3617               	rlcf	___awdiv@divisor,f,c
  2907  000A1C  3618               	rlcf	___awdiv@divisor+1,f,c
  2908  000A1E  2A19               	incf	___awdiv@counter,f,c
  2909  000A20                     l2113:
  2910  000A20  AE18               	btfss	___awdiv@divisor+1,7,c
  2911  000A22  D7FA               	goto	l2111
  2912  000A24                     l2115:
  2913  000A24  90D8               	bcf	status,0,c
  2914  000A26  361B               	rlcf	___awdiv@quotient,f,c
  2915  000A28  361C               	rlcf	___awdiv@quotient+1,f,c
  2916  000A2A  5017               	movf	___awdiv@divisor,w,c
  2917  000A2C  5C15               	subwf	___awdiv@dividend,w,c
  2918  000A2E  5018               	movf	___awdiv@divisor+1,w,c
  2919  000A30  5816               	subwfb	___awdiv@dividend+1,w,c
  2920  000A32  A0D8               	btfss	status,0,c
  2921  000A34  D005               	goto	l2123
  2922  000A36  5017               	movf	___awdiv@divisor,w,c
  2923  000A38  5E15               	subwf	___awdiv@dividend,f,c
  2924  000A3A  5018               	movf	___awdiv@divisor+1,w,c
  2925  000A3C  5A16               	subwfb	___awdiv@dividend+1,f,c
  2926  000A3E  801B               	bsf	___awdiv@quotient,0,c
  2927  000A40                     l2123:
  2928  000A40  90D8               	bcf	status,0,c
  2929  000A42  3218               	rrcf	___awdiv@divisor+1,f,c
  2930  000A44  3217               	rrcf	___awdiv@divisor,f,c
  2931  000A46  2E19               	decfsz	___awdiv@counter,f,c
  2932  000A48  D7ED               	goto	l2115
  2933  000A4A                     l2127:
  2934  000A4A  501A               	movf	___awdiv@sign,w,c
  2935  000A4C  B4D8               	btfsc	status,2,c
  2936  000A4E  D004               	goto	l2131
  2937  000A50  6C1B               	negf	___awdiv@quotient,c
  2938  000A52  1E1C               	comf	___awdiv@quotient+1,f,c
  2939  000A54  B0D8               	btfsc	status,0,c
  2940  000A56  2A1C               	incf	___awdiv@quotient+1,f,c
  2941  000A58                     l2131:
  2942  000A58  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2943  000A5C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2944  000A60  0012               	return	
  2945  000A62                     __end_of___awdiv:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           prodh	equ	0xFF4
  2949                           prodl	equ	0xFF3
  2950                           intcon	equ	0xFF2
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _grabRightIR *****************
  2961 ;; Defined at:
  2962 ;;		line 74 in file "IR_Reading.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  IR_signal       2   19[COMRAM] unsigned int 
  2967 ;;  i               1   21[COMRAM] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  2   14[COMRAM] unsigned int 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2977 ;;      Params:         2       0       0       0
  2978 ;;      Locals:         3       0       0       0
  2979 ;;      Temps:          3       0       0       0
  2980 ;;      Totals:         8       0       0       0
  2981 ;;Total ram usage:        8 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    1
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_ScanIR
  2988 ;;		_ScanWithRange
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text16
  2993  000A62                     __ptext16:
  2994                           	opt stack 0
  2995  000A62                     _grabRightIR:
  2996                           	opt stack 28
  2997                           
  2998                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2999                           
  3000                           ;incstack = 0
  3001  000A62  0E00               	movlw	0
  3002  000A64  6E15               	movwf	grabRightIR@IR_signal+1,c
  3003  000A66  0E00               	movlw	0
  3004  000A68  6E14               	movwf	grabRightIR@IR_signal,c
  3005                           
  3006                           ;IR_Reading.c: 77: unsigned char i=0;
  3007  000A6A  0E00               	movlw	0
  3008  000A6C  6E16               	movwf	grabRightIR@i,c
  3009                           
  3010                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  3011  000A6E  0E00               	movlw	0
  3012  000A70  6E16               	movwf	grabRightIR@i,c
  3013  000A72                     l2229:
  3014  000A72  0E03               	movlw	3
  3015  000A74  6416               	cpfsgt	grabRightIR@i,c
  3016  000A76  D001               	goto	l2233
  3017  000A78  D020               	goto	l2239
  3018  000A7A                     l2233:
  3019                           
  3020                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  3021  000A7A  5069               	movf	3945,w,c	;volatile
  3022  000A7C  6E11               	movwf	??_grabRightIR& (0+255),c
  3023  000A7E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  3024  000A80  0E06               	movlw	6
  3025  000A82                     u1605:
  3026  000A82  90D8               	bcf	status,0,c
  3027  000A84  3611               	rlcf	??_grabRightIR,f,c
  3028  000A86  3612               	rlcf	??_grabRightIR+1,f,c
  3029  000A88  2EE8               	decfsz	wreg,f,c
  3030  000A8A  D7FB               	goto	u1605
  3031  000A8C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  3032  000A90  90D8               	bcf	status,0,c
  3033  000A92  3213               	rrcf	??_grabRightIR+2,f,c
  3034  000A94  90D8               	bcf	status,0,c
  3035  000A96  3213               	rrcf	??_grabRightIR+2,f,c
  3036  000A98  5013               	movf	??_grabRightIR+2,w,c
  3037  000A9A  1211               	iorwf	??_grabRightIR,f,c
  3038  000A9C  0E00               	movlw	0
  3039  000A9E  1212               	iorwf	??_grabRightIR+1,f,c
  3040  000AA0  5011               	movf	??_grabRightIR,w,c
  3041  000AA2  2614               	addwf	grabRightIR@IR_signal,f,c
  3042  000AA4  5012               	movf	??_grabRightIR+1,w,c
  3043  000AA6  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3044                           
  3045                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3046  000AA8  0E82               	movlw	130
  3047  000AAA  6E11               	movwf	??_grabRightIR& (0+255),c
  3048  000AAC  0EDE               	movlw	222
  3049  000AAE                     u1927:
  3050  000AAE  2EE8               	decfsz	wreg,f,c
  3051  000AB0  D7FE               	goto	u1927
  3052  000AB2  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3053  000AB4  D7FC               	goto	u1927
  3054  000AB6  2A16               	incf	grabRightIR@i,f,c
  3055  000AB8  D7DC               	goto	l2229
  3056  000ABA                     l2239:
  3057                           
  3058                           ;IR_Reading.c: 83: }
  3059                           ;IR_Reading.c: 85: return IR_signal>>2;
  3060  000ABA  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3061  000ABE  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3062  000AC2  90D8               	bcf	status,0,c
  3063  000AC4  3212               	rrcf	??_grabRightIR+1,f,c
  3064  000AC6  3211               	rrcf	??_grabRightIR,f,c
  3065  000AC8  90D8               	bcf	status,0,c
  3066  000ACA  3212               	rrcf	??_grabRightIR+1,f,c
  3067  000ACC  3211               	rrcf	??_grabRightIR,f,c
  3068  000ACE  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3069  000AD2  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3070  000AD6  0012               	return	
  3071  000AD8                     __end_of_grabRightIR:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           intcon	equ	0xFF2
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           indf2	equ	0xFDF
  3080                           postinc2	equ	0xFDE
  3081                           postdec2	equ	0xFDD
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _grabLeftIR *****************
  3087 ;; Defined at:
  3088 ;;		line 90 in file "IR_Reading.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3093 ;;  i               1   21[COMRAM] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  2   14[COMRAM] unsigned int 
  3096 ;; Registers used:
  3097 ;;		wreg, status,2, status,0
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3103 ;;      Params:         2       0       0       0
  3104 ;;      Locals:         3       0       0       0
  3105 ;;      Temps:          3       0       0       0
  3106 ;;      Totals:         8       0       0       0
  3107 ;;Total ram usage:        8 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_ScanIR
  3114 ;;		_ScanWithRange
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  000AD8                     __ptext17:
  3120                           	opt stack 0
  3121  000AD8                     _grabLeftIR:
  3122                           	opt stack 28
  3123                           
  3124                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3125                           
  3126                           ;incstack = 0
  3127  000AD8  0E00               	movlw	0
  3128  000ADA  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3129  000ADC  0E00               	movlw	0
  3130  000ADE  6E14               	movwf	grabLeftIR@IR_signal,c
  3131                           
  3132                           ;IR_Reading.c: 93: unsigned char i=0;
  3133  000AE0  0E00               	movlw	0
  3134  000AE2  6E16               	movwf	grabLeftIR@i,c
  3135                           
  3136                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3137  000AE4  0E00               	movlw	0
  3138  000AE6  6E16               	movwf	grabLeftIR@i,c
  3139  000AE8                     l2213:
  3140  000AE8  0E03               	movlw	3
  3141  000AEA  6416               	cpfsgt	grabLeftIR@i,c
  3142  000AEC  D001               	goto	l2217
  3143  000AEE  D020               	goto	l2223
  3144  000AF0                     l2217:
  3145                           
  3146                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3147  000AF0  5067               	movf	3943,w,c	;volatile
  3148  000AF2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3149  000AF4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3150  000AF6  0E06               	movlw	6
  3151  000AF8                     u1575:
  3152  000AF8  90D8               	bcf	status,0,c
  3153  000AFA  3611               	rlcf	??_grabLeftIR,f,c
  3154  000AFC  3612               	rlcf	??_grabLeftIR+1,f,c
  3155  000AFE  2EE8               	decfsz	wreg,f,c
  3156  000B00  D7FB               	goto	u1575
  3157  000B02  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3158  000B06  90D8               	bcf	status,0,c
  3159  000B08  3213               	rrcf	??_grabLeftIR+2,f,c
  3160  000B0A  90D8               	bcf	status,0,c
  3161  000B0C  3213               	rrcf	??_grabLeftIR+2,f,c
  3162  000B0E  5013               	movf	??_grabLeftIR+2,w,c
  3163  000B10  1211               	iorwf	??_grabLeftIR,f,c
  3164  000B12  0E00               	movlw	0
  3165  000B14  1212               	iorwf	??_grabLeftIR+1,f,c
  3166  000B16  5011               	movf	??_grabLeftIR,w,c
  3167  000B18  2614               	addwf	grabLeftIR@IR_signal,f,c
  3168  000B1A  5012               	movf	??_grabLeftIR+1,w,c
  3169  000B1C  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3170                           
  3171                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3172  000B1E  0E82               	movlw	130
  3173  000B20  6E11               	movwf	??_grabLeftIR& (0+255),c
  3174  000B22  0EDE               	movlw	222
  3175  000B24                     u1937:
  3176  000B24  2EE8               	decfsz	wreg,f,c
  3177  000B26  D7FE               	goto	u1937
  3178  000B28  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3179  000B2A  D7FC               	goto	u1937
  3180  000B2C  2A16               	incf	grabLeftIR@i,f,c
  3181  000B2E  D7DC               	goto	l2213
  3182  000B30                     l2223:
  3183                           
  3184                           ;IR_Reading.c: 99: }
  3185                           ;IR_Reading.c: 101: return IR_signal>>2;
  3186  000B30  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3187  000B34  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3188  000B38  90D8               	bcf	status,0,c
  3189  000B3A  3212               	rrcf	??_grabLeftIR+1,f,c
  3190  000B3C  3211               	rrcf	??_grabLeftIR,f,c
  3191  000B3E  90D8               	bcf	status,0,c
  3192  000B40  3212               	rrcf	??_grabLeftIR+1,f,c
  3193  000B42  3211               	rrcf	??_grabLeftIR,f,c
  3194  000B44  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3195  000B48  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3196  000B4C  0012               	return	
  3197  000B4E                     __end_of_grabLeftIR:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _delay_tenth_s *****************
  3213 ;; Defined at:
  3214 ;;		line 19 in file "Movement.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  tenth_second    1    wreg     unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3219 ;;  i               2   16[COMRAM] unsigned int 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;		None               void
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3229 ;;      Params:         0       0       0       0
  3230 ;;      Locals:         3       0       0       0
  3231 ;;      Temps:          1       0       0       0
  3232 ;;      Totals:         4       0       0       0
  3233 ;;Total ram usage:        4 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    1
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_ScanIR
  3240 ;;		_ScanWithRange
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text18
  3245  000C8A                     __ptext18:
  3246                           	opt stack 0
  3247  000C8A                     _delay_tenth_s:
  3248                           	opt stack 28
  3249                           
  3250                           ;incstack = 0
  3251                           ;delay_tenth_s@tenth_seconds stored from wreg
  3252  000C8A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3253                           
  3254                           ;Movement.c: 20: unsigned int i=0;
  3255  000C8C  0E00               	movlw	0
  3256  000C8E  6E12               	movwf	delay_tenth_s@i+1,c
  3257  000C90  0E00               	movlw	0
  3258  000C92  6E11               	movwf	delay_tenth_s@i,c
  3259                           
  3260                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3261  000C94  0E00               	movlw	0
  3262  000C96  6E12               	movwf	delay_tenth_s@i+1,c
  3263  000C98  0E01               	movlw	1
  3264  000C9A  6E11               	movwf	delay_tenth_s@i,c
  3265  000C9C  D009               	goto	l2209
  3266  000C9E                     l2205:
  3267                           
  3268                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3269  000C9E  0E82               	movlw	130
  3270  000CA0  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3271  000CA2  0EDE               	movlw	222
  3272  000CA4                     u1947:
  3273  000CA4  2EE8               	decfsz	wreg,f,c
  3274  000CA6  D7FE               	goto	u1947
  3275  000CA8  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3276  000CAA  D7FC               	goto	u1947
  3277  000CAC  4A11               	infsnz	delay_tenth_s@i,f,c
  3278  000CAE  2A12               	incf	delay_tenth_s@i+1,f,c
  3279  000CB0                     l2209:
  3280  000CB0  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3281  000CB2  0D02               	mullw	2
  3282  000CB4  5011               	movf	delay_tenth_s@i,w,c
  3283  000CB6  5CF3               	subwf	prodl,w,c
  3284  000CB8  5012               	movf	delay_tenth_s@i+1,w,c
  3285  000CBA  58F4               	subwfb	prodh,w,c
  3286  000CBC  A0D8               	btfss	status,0,c
  3287  000CBE  0012               	return	
  3288  000CC0  D7EE               	goto	l2205
  3289  000CC2                     __end_of_delay_tenth_s:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           intcon	equ	0xFF2
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           indf2	equ	0xFDF
  3298                           postinc2	equ	0xFDE
  3299                           postdec2	equ	0xFDD
  3300                           fsr2h	equ	0xFDA
  3301                           fsr2l	equ	0xFD9
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function _InterruptHandlerHigh *****************
  3305 ;; Defined at:
  3306 ;;		line 16 in file "main.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;		None               void
  3313 ;; Registers used:
  3314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3320 ;;      Params:         0       0       0       0
  3321 ;;      Locals:         0       0       0       0
  3322 ;;      Temps:         14       0       0       0
  3323 ;;      Totals:        14       0       0       0
  3324 ;;Total ram usage:       14 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; This function calls:
  3327 ;;		Nothing
  3328 ;; This function is called by:
  3329 ;;		Interrupt level 2
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	intcode
  3334  000008                     __pintcode:
  3335                           	opt stack 0
  3336  000008                     _InterruptHandlerHigh:
  3337                           	opt stack 25
  3338                           
  3339                           ;incstack = 0
  3340  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3341  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3342  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3343  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3344  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3345  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3346  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3347  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3348  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3349  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3350  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3351  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3352  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3353  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3354  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3355                           
  3356                           ;main.c: 18: if (PIR1bits.RCIF) {
  3357  000042  AA9E               	btfss	3998,5,c	;volatile
  3358  000044  D013               	goto	i2l54
  3359                           
  3360                           ;main.c: 19: ReceivedString[i]=RCREG;
  3361  000046  504B               	movf	_i,w,c	;volatile
  3362  000048  0D01               	mullw	1
  3363  00004A  0E3B               	movlw	low _ReceivedString
  3364  00004C  24F3               	addwf	prodl,w,c
  3365  00004E  6ED9               	movwf	fsr2l,c
  3366  000050  0E00               	movlw	high _ReceivedString
  3367  000052  20F4               	addwfc	prodh,w,c
  3368  000054  6EDA               	movwf	fsr2h,c
  3369  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3370                           
  3371                           ;main.c: 20: if (i==15){
  3372  00005A  0E0F               	movlw	15
  3373  00005C  184B               	xorwf	_i,w,c	;volatile
  3374  00005E  A4D8               	btfss	status,2,c
  3375  000060  D003               	goto	i2l1415
  3376                           
  3377                           ;main.c: 21: i=0;
  3378  000062  0E00               	movlw	0
  3379  000064  6E4B               	movwf	_i,c	;volatile
  3380                           
  3381                           ;main.c: 22: }else{
  3382  000066  D001               	goto	i2l1417
  3383  000068                     i2l1415:
  3384                           
  3385                           ;main.c: 23: i++;
  3386  000068  2A4B               	incf	_i,f,c	;volatile
  3387  00006A                     i2l1417:
  3388                           
  3389                           ;main.c: 24: }
  3390                           ;main.c: 25: PIR1bits.RCIF=0;
  3391  00006A  9A9E               	bcf	3998,5,c	;volatile
  3392  00006C                     i2l54:
  3393  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3394  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3395  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3396  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3397  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3398  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3399  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3400  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3401  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3402  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3403  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3404  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3405  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3406  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3407  0000A4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3408  0000A6  0011               	retfie		f
  3409  0000A8                     __end_of_InterruptHandlerHigh:
  3410                           	opt stack 0
  3411  0000                     pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           pclatu	equ	0xFFB
  3433                           pclath	equ	0xFFA
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           postinc0	equ	0xFEE
  3442                           fsr0h	equ	0xFEA
  3443                           fsr0l	equ	0xFE9
  3444                           wreg	equ	0xFE8
  3445                           fsr1h	equ	0xFE2
  3446                           fsr1l	equ	0xFE1
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           fsr2h	equ	0xFDA
  3451                           fsr2l	equ	0xFD9
  3452                           status	equ	0xFD8
  3453                           
  3454                           	psect	rparam
  3455  0000                     pclatu	equ	0xFFB
  3456                           pclath	equ	0xFFA
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           intcon	equ	0xFF2
  3464                           postinc0	equ	0xFEE
  3465                           fsr0h	equ	0xFEA
  3466                           fsr0l	equ	0xFE9
  3467                           wreg	equ	0xFE8
  3468                           fsr1h	equ	0xFE2
  3469                           fsr1l	equ	0xFE1
  3470                           indf2	equ	0xFDF
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477                           	psect	temp
  3478  00004C                     btemp:
  3479                           	opt stack 0
  3480  00004C                     	ds	1
  3481  0000                     int$flags	set	btemp
  3482                           pclatu	equ	0xFFB
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           fsr0h	equ	0xFEA
  3493                           fsr0l	equ	0xFE9
  3494                           wreg	equ	0xFE8
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      75
    BANK0           160     38      38
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   70099
                                             14 BANK0     24    24      0
                             _ScanIR
                      _ScanWithRange
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3168
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       21    16      5   29598
                                             46 COMRAM     7     2      5
                                              0 BANK0     14    14      0
                            ___awdiv
                      _delay_tenth_s
                       _enableSensor
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     586
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              12     8      4   26982
                                             46 COMRAM    12     8      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    9416
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   10032
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    5724
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2890
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2026
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     869
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _enableSensor
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      26       5       23.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4B       1       79.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71       3        0.0%
DATA                 0      0      71      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 17:02:21 2018

                        ?_grabRightIR 000F                                     _i 004B  
                                  l57 071C                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                                   l109 08F2  
                                 l139 0BA0                           grabLeftIR@i 0016  
                                 prod 000FF3                                   wreg 000FE8  
                                l2111 0A18                                  l2113 0A20  
                                l2105 0A02                                  l2131 0A58  
                                l2123 0A40                                  l2115 0A24  
                                l2205 0C9E                                  l2213 0AE8  
                                l2141 08CA                                  l2223 0B30  
                                l2127 0A4A                                  l2303 0288  
                                l2209 0CB0                                  l2217 0AF0  
                                l2233 0A7A                                  l2153 0B80  
                                l2145 0B50                                  l2171 0980  
                                l2163 0950                                  l2315 02B8  
                                l2229 0A72                                  l2149 0B68  
                                l2413 054C                                  l2341 0374  
                                l2239 0ABA                                  l2167 0968  
                                l2407 0548                                  l2335 0370  
                                l2327 032A                                  l2319 0314  
                                l2511 07A0                                  l2177 09A0  
                                l2099 09F2                                  l2427 059E  
                                l2187 0D3E                                  l2371 042A  
                                l2355 03B8                                  l2523 07F4  
                                l2515 07C4                                  l2365 0426  
                                l2293 0228                                  l2455 0642  
                                l2439 05F0                                  l2287 01F6  
                                l2519 07E6                                  l2527 0800  
                                l2385 0494                                  l2299 022C  
                                l2491 0722                                  l1781 0C78  
                                l1777 0C66                                  u1404 088E  
                                u1405 088A                                  u1414 08E6  
                                _LATB 000F8A                                  u1415 08E2  
                                u1425 093E                                  u1605 0A82  
                                u1525 0D3A                                  u1526 0D3C  
                                u1545 0D4C                                  u1546 0D4E  
                                u1575 0AF8                                  u1907 099A  
                                u1917 0B9A                                  u1927 0AAE  
                                u1937 0B24                                  u1947 0CA4  
                                u1897 0C6C                                  i2l54 006C  
                                _main 0680                         main@ScanAngle 0071  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 004C  
                                _stop 094E                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 0A62                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                         _initRFID$1294 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 0C8A  
                               main@i 0070                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 03EC  
                     __initialization 0DB8                          __end_of_main 081A  
                        __end_of_stop 09DE                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 0D50  
                              ??_main 003B                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                        ?_setMotorPWM 001D                __size_of_fullSpeedBack 0036  
                    ___awdiv@dividend 0015                                i2l1415 0068  
                              i2l1417 006A                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 0CC2                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B                                _ScanIR 0498  
                              ___wmul 0D50                             ??___awdiv 0019  
                    __end_of_initRFID 0DB8                                _initIR 0D76  
                __size_of_grabRightIR 0076                                clear_0 0DBE  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                              main@mL 0074                                main@mR 007D  
                      ??_initMotorPWM 000F                         _ScanWithRange 00AC  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0C52  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 0DC4  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 0CC2                        ?_ScanWithRange 002F  
       __size_of_InterruptHandlerHigh 00A0            delay_tenth_s@tenth_seconds 0010  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 0AD8  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                        _enableSensor 0D2A                    __size_of_turnRight 004A  
                __end_of_initMotorPWM 0D2A                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 01E8  
                             ___awdiv 09DE                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 0DB8  
                     ??_ScanWithRange 0034                               _delay_s 0C52  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 0680                               __ptext1 0D98  
                             __ptext2 0CF8                               __ptext3 0D76  
                             __ptext4 0CC2                               __ptext5 0C52  
                             __ptext6 00AC                               __ptext7 0D2A  
                             __ptext8 0498                               __ptext9 0BBE  
                end_of_initialization 0DC4                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                  ScanIR@SensorResult 0037                       ??_fullSpeedBack 002F  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0C08  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0035                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 0680  
                      _fullSpeedAhead 0B4E                        _ReceivedString 003B  
                      __end_of___wmul 0D76                           _BAUDCONbits 000FAA  
                      __end_of_initIR 0D98                __size_of_delay_tenth_s 0038  
                 start_initialization 0DB8                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00A8                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 0BBE                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 0AD8                          _initMotorPWM 0CF8  
                         __pbssCOMRAM 003B                         __pcstackBANK0 0060  
                       _delay_tenth_s 0C8A                     __size_of_initRFID 0020  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                            ?___awdiv 0015                              ?_delay_s 0001  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                   __size_of_turnLeft 004A            ScanWithRange@SensorResultC 0064  
          ScanWithRange@SensorResultL 0060            ScanWithRange@SensorResultR 0068  
                       ??_setMotorPWM 001F                        ?_delay_tenth_s 0001  
                      ___wmul@product 0013                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 002B  
                         turnRight@mR 002D                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                           _grabRightIR 0A62  
                grabRightIR@IR_signal 0014                     ___wmul@multiplier 000F  
               __end_of_ScanWithRange 0498                          setMotorPWM@m 001D  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 0BBE                   __end_of_setMotorPWM 094E  
                            __Hrparam 0000                              __Lrparam 0000  
               __end_of_fullSpeedBack 0CF8                    __end_of_grabLeftIR 0B4E  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                          ?_turnRight 002B                              __ptext10 0C08  
                            __ptext11 094E                              __ptext12 0B4E  
                            __ptext13 081A                              __ptext14 0D50  
                            __ptext15 09DE                              __ptext16 0A62  
                            __ptext17 0AD8                              __ptext18 0C8A  
                     ??_delay_tenth_s 000F                              _initRFID 0D98  
                       __size_of_main 019A                    main@DirectionFound 0073  
                       __size_of_stop 0090                            turnLeft@mL 002B  
                          turnLeft@mR 002D                              delay_s@i 0011  
                            int$flags 004C                              main@mode 0072  
                            main@test 006E                              _turnLeft 0C08  
                     ScanWithRange@mL 002F                       ScanWithRange@mR 0031  
                  enableSensor@sensor 0010                    enableSensor@status 000F  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 081A                              intlevel2 0000  
                       ?_enableSensor 000F                      ??_fullSpeedAhead 002A  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundTolerance 006C  
              ??_InterruptHandlerHigh 0001                           ??_turnRight 002F  
                      ??_enableSensor 0010  
