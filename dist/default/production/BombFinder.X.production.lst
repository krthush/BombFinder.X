

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 13:24:35 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     _ANSEL0bits	set	4024
    41  0000                     _BAUDCONbits	set	4010
    42  0000                     _CAP1BUFH	set	3945
    43  0000                     _CAP1BUFL	set	3944
    44  0000                     _CAP1CON	set	3939
    45  0000                     _CAP2BUFH	set	3943
    46  0000                     _CAP2BUFL	set	3942
    47  0000                     _CAP2CON	set	3938
    48  0000                     _INTCONbits	set	4082
    49  0000                     _IPR1bits	set	3999
    50  0000                     _LATAbits	set	3977
    51  0000                     _LATB	set	3978
    52  0000                     _LATCbits	set	3979
    53  0000                     _LATDbits	set	3980
    54  0000                     _LATEbits	set	3981
    55  0000                     _OSCCON	set	4051
    56  0000                     _OSCCONbits	set	4051
    57  0000                     _PIE1bits	set	3997
    58  0000                     _PIR1bits	set	3998
    59  0000                     _PTCON0	set	3967
    60  0000                     _PTCON1	set	3966
    61  0000                     _PTPERH	set	3962
    62  0000                     _PTPERL	set	3963
    63  0000                     _PWMCON0	set	3951
    64  0000                     _PWMCON1	set	3950
    65  0000                     _RCONbits	set	4048
    66  0000                     _RCREG	set	4014
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _SPBRG	set	4015
    69  0000                     _SPBRGH	set	4016
    70  0000                     _T5CON	set	4023
    71  0000                     _TRISAbits	set	3986
    72  0000                     _TRISBbits	set	3987
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISCbits	set	3988
    75  0000                     _TRISDbits	set	3989
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TXREG	set	4013
    78  0000                     _TXSTAbits	set	4012
    79  0000                     _PDC0H	set	3960
    80  0000                     _PDC0L	set	3961
    81  0000                     _PDC1H	set	3958
    82  0000                     _PDC1L	set	3959
    83                           
    84                           ; #config settings
    85  0000                     
    86                           	psect	cinit
    87  00148E                     __pcinit:
    88                           	opt stack 0
    89  00148E                     start_initialization:
    90                           	opt stack 0
    91  00148E                     __initialization:
    92                           	opt stack 0
    93                           
    94                           ; Clear objects allocated to BANK1 (17 bytes)
    95  00148E  EE01  F0EB         	lfsr	0,__pbssBANK1
    96  001492  0E11               	movlw	17
    97  001494                     clear_0:
    98  001494  6AEE               	clrf	postinc0,c
    99  001496  06E8               	decf	wreg,f,c
   100  001498  E1FD               	bnz	clear_0
   101                           
   102                           ; Clear objects allocated to BANK0 (4 bytes)
   103  00149A  0100               	movlb	0
   104  00149C  6B78               	clrf	(__pbssBANK0+3)& (0+255),b
   105  00149E  6B77               	clrf	(__pbssBANK0+2)& (0+255),b
   106  0014A0  6B76               	clrf	(__pbssBANK0+1)& (0+255),b
   107  0014A2  6B75               	clrf	__pbssBANK0& (0+255),b
   108                           
   109                           ; Clear objects allocated to COMRAM (13 bytes)
   110  0014A4  EE00  F041         	lfsr	0,__pbssCOMRAM
   111  0014A8  0E0D               	movlw	13
   112  0014AA                     clear_1:
   113  0014AA  6AEE               	clrf	postinc0,c
   114  0014AC  06E8               	decf	wreg,f,c
   115  0014AE  E1FD               	bnz	clear_1
   116  0014B0                     end_of_initialization:
   117                           	opt stack 0
   118  0014B0                     __end_of__initialization:
   119                           	opt stack 0
   120  0014B0  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121  0014B2  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122  0014B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   123  0014B6  6EF8               	movwf	tblptru,c
   124  0014B8  0100               	movlb	0
   125  0014BA  EF8B  F003         	goto	_main	;jump to C main() function
   126                           tblptru	equ	0xFF8
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           
   130                           	psect	bssCOMRAM
   131  000041                     __pbssCOMRAM:
   132                           	opt stack 0
   133  000041                     ScanIR@F3710:
   134                           	opt stack 0
   135  000041                     	ds	4
   136  000045                     ScanWithRange@F3719:
   137                           	opt stack 0
   138  000045                     	ds	4
   139  000049                     ScanWithRange@F3721:
   140                           	opt stack 0
   141  000049                     	ds	4
   142  00004D                     _i:
   143                           	opt stack 0
   144  00004D                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssBANK0
   150  000075                     __pbssBANK0:
   151                           	opt stack 0
   152  000075                     ScanWithRange@F3723:
   153                           	opt stack 0
   154  000075                     	ds	4
   155                           tblptru	equ	0xFF8
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	bssBANK1
   160  0001EB                     __pbssBANK1:
   161                           	opt stack 0
   162  0001EB                     _RFID_Read:
   163                           	opt stack 0
   164  0001EB                     	ds	1
   165  0001EC                     _ReceivedString:
   166                           	opt stack 0
   167  0001EC                     	ds	16
   168                           tblptru	equ	0xFF8
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           
   172                           	psect	cstackBANK1
   173  000100                     __pcstackBANK1:
   174                           	opt stack 0
   175  000100                     main@MoveType:
   176                           	opt stack 0
   177                           
   178                           ; 100 bytes @ 0x0
   179  000100                     	ds	100
   180  000164                     main@MoveTime:
   181                           	opt stack 0
   182                           
   183                           ; 100 bytes @ 0x64
   184  000164                     	ds	100
   185  0001C8                     main@Message:
   186                           	opt stack 0
   187                           
   188                           ; 10 bytes @ 0xC8
   189  0001C8                     	ds	10
   190  0001D2                     main@test:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0xD2
   194  0001D2                     	ds	2
   195  0001D4                     main@ScanAngle:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0xD4
   199  0001D4                     	ds	1
   200  0001D5                     main@mode:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0xD5
   204  0001D5                     	ds	1
   205  0001D6                     main@DirectionFound:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0xD6
   209  0001D6                     	ds	1
   210  0001D7                     main@i:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0xD7
   214  0001D7                     	ds	1
   215  0001D8                     main@Move:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0xD8
   219  0001D8                     	ds	1
   220  0001D9                     main@mL:
   221                           	opt stack 0
   222                           
   223                           ; 9 bytes @ 0xD9
   224  0001D9                     	ds	9
   225  0001E2                     main@mR:
   226                           	opt stack 0
   227                           
   228                           ; 9 bytes @ 0xE2
   229  0001E2                     	ds	9
   230                           tblptru	equ	0xFF8
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	cstackBANK0
   235  000060                     __pcstackBANK0:
   236                           	opt stack 0
   237  000060                     ScanWithRange@ResultFalseL:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x0
   241  000060                     	ds	1
   242  000061                     ScanWithRange@ResultFalseC:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x1
   246  000061                     	ds	1
   247  000062                     ScanWithRange@ResultFalseR:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x2
   251  000062                     	ds	1
   252  000063                     ScanWithRange@ClearSignalTolerance:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000063                     	ds	2
   257  000065                     ScanWithRange@DirectionFoundLimit:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x5
   261  000065                     	ds	2
   262  000067                     ScanWithRange@DirectionFoundTolerance:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x7
   266  000067                     	ds	2
   267  000069                     ScanWithRange@SensorResultL:
   268                           	opt stack 0
   269                           
   270                           ; 4 bytes @ 0x9
   271  000069                     	ds	4
   272  00006D                     ScanWithRange@SensorResultC:
   273                           	opt stack 0
   274                           
   275                           ; 4 bytes @ 0xD
   276  00006D                     	ds	4
   277  000071                     ScanWithRange@SensorResultR:
   278                           	opt stack 0
   279                           
   280                           ; 4 bytes @ 0x11
   281  000071                     	ds	4
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	cstackCOMRAM
   287  000001                     __pcstackCOMRAM:
   288                           	opt stack 0
   289  000001                     ??_InterruptHandlerHigh:
   290  000001                     
   291                           ; 2 bytes @ 0x0
   292  000001                     	ds	14
   293  00000F                     ??_delay_s:
   294  00000F                     ??_delay_tenth_s:
   295  00000F                     ??_LCDout:
   296  00000F                     ?_grabLeftIR:
   297                           	opt stack 0
   298  00000F                     ?_grabRightIR:
   299                           	opt stack 0
   300  00000F                     ?___wmul:
   301                           	opt stack 0
   302  00000F                     _initRFID$1317:
   303                           	opt stack 0
   304  00000F                     enableSensor@status:
   305                           	opt stack 0
   306  00000F                     VerifySignal@Signal:
   307                           	opt stack 0
   308  00000F                     ___wmul@multiplier:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0xE
   312  00000F                     	ds	1
   313  000010                     delay_s@seconds:
   314                           	opt stack 0
   315  000010                     delay_tenth_s@tenth_seconds:
   316                           	opt stack 0
   317  000010                     enableSensor@sensor:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xF
   321  000010                     	ds	1
   322  000011                     ??_VerifySignal:
   323  000011                     ??_grabLeftIR:
   324  000011                     ??_grabRightIR:
   325  000011                     delay_s@i:
   326                           	opt stack 0
   327  000011                     delay_tenth_s@i:
   328                           	opt stack 0
   329  000011                     ___wmul@multiplicand:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x10
   333  000011                     	ds	1
   334  000012                     LCDout@number:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x11
   338  000012                     	ds	1
   339  000013                     SendLCD@type:
   340                           	opt stack 0
   341  000013                     ___wmul@product:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x12
   345  000013                     	ds	1
   346  000014                     SendLCD@Byte:
   347                           	opt stack 0
   348  000014                     grabRightIR@IR_signal:
   349                           	opt stack 0
   350  000014                     grabLeftIR@IR_signal:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x13
   354  000014                     	ds	1
   355  000015                     ??_initLCD:
   356  000015                     ?___awdiv:
   357                           	opt stack 0
   358  000015                     ___awdiv@dividend:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x14
   362  000015                     	ds	1
   363  000016                     grabRightIR@i:
   364                           	opt stack 0
   365  000016                     grabLeftIR@i:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x15
   369  000016                     	ds	1
   370  000017                     VerifySignal@checksum:
   371                           	opt stack 0
   372  000017                     ___awdiv@divisor:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x16
   376  000017                     	ds	1
   377  000018                     VerifySignal@hexByte:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x17
   381  000018                     	ds	1
   382  000019                     ___awdiv@counter:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x18
   386  000019                     	ds	1
   387  00001A                     VerifySignal@i:
   388                           	opt stack 0
   389  00001A                     ___awdiv@sign:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x19
   393  00001A                     	ds	1
   394  00001B                     ___awdiv@quotient:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x1A
   398  00001B                     	ds	2
   399  00001D                     setMotorPWM@m:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x1C
   403  00001D                     	ds	2
   404  00001F                     ??_setMotorPWM:
   405                           
   406                           ; 0 bytes @ 0x1E
   407  00001F                     	ds	5
   408  000024                     setMotorPWM@PWMduty:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x23
   412  000024                     	ds	2
   413  000026                     stop@mL:
   414                           	opt stack 0
   415  000026                     fullSpeedAhead@mL:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x25
   419  000026                     	ds	2
   420  000028                     stop@mR:
   421                           	opt stack 0
   422  000028                     fullSpeedAhead@mR:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x27
   426  000028                     	ds	2
   427  00002A                     
   428                           ; 0 bytes @ 0x29
   429  00002A                     	ds	1
   430  00002B                     turnLeft@mL:
   431                           	opt stack 0
   432  00002B                     turnRight@mL:
   433                           	opt stack 0
   434  00002B                     fullSpeedBack@mL:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x2A
   438  00002B                     	ds	2
   439  00002D                     turnLeft@mR:
   440                           	opt stack 0
   441  00002D                     turnRight@mR:
   442                           	opt stack 0
   443  00002D                     fullSpeedBack@mR:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x2C
   447  00002D                     	ds	2
   448  00002F                     ScanIR@mL:
   449                           	opt stack 0
   450  00002F                     ScanWithRange@mL:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x2E
   454  00002F                     	ds	2
   455  000031                     ScanIR@mR:
   456                           	opt stack 0
   457  000031                     ScanWithRange@mR:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x30
   461  000031                     	ds	2
   462  000033                     ??_ScanIR:
   463  000033                     ScanWithRange@tenth_seconds:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x32
   467  000033                     	ds	1
   468  000034                     ScanWithRange@MoveTime:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x33
   472  000034                     	ds	1
   473  000035                     ScanIR@ClearSignalTolerance:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x34
   477  000035                     	ds	1
   478  000036                     ??_ScanWithRange:
   479                           
   480                           ; 0 bytes @ 0x35
   481  000036                     	ds	1
   482  000037                     ScanIR@DirectionFoundLimit:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x36
   486  000037                     	ds	2
   487  000039                     ScanIR@DirectionFoundTolerance:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x38
   491  000039                     	ds	2
   492  00003B                     ScanIR@SensorResult:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x3A
   496  00003B                     	ds	4
   497  00003F                     ??_main:
   498                           
   499                           ; 0 bytes @ 0x3E
   500  00003F                     	ds	2
   501                           tblptru	equ	0xFF8
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           
   505 ;;
   506 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   507 ;;
   508 ;; *************** function _main *****************
   509 ;; Defined at:
   510 ;;		line 31 in file "main.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   515 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   516 ;;  PathTaken     100    0        unsigned char [100]
   517 ;;  Message        10  200[BANK1 ] unsigned char [10]
   518 ;;  mR              9  226[BANK1 ] struct DC_motor
   519 ;;  mL              9  217[BANK1 ] struct DC_motor
   520 ;;  SignalStreng    3    0        unsigned char [3]
   521 ;;  test            2  210[BANK1 ] unsigned int 
   522 ;;  Move            1  216[BANK1 ] unsigned char 
   523 ;;  i               1  215[BANK1 ] unsigned char 
   524 ;;  DirectionFou    1  214[BANK1 ] unsigned char 
   525 ;;  mode            1  213[BANK1 ] unsigned char 
   526 ;;  ScanAngle       1  212[BANK1 ] unsigned char 
   527 ;; Return value:  Size  Location     Type
   528 ;;		None               void
   529 ;; Registers used:
   530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   536 ;;      Params:         0       0       0       0
   537 ;;      Locals:         0       0     235       0
   538 ;;      Temps:          2       0       0       0
   539 ;;      Totals:         2       0     235       0
   540 ;;Total ram usage:      237 bytes
   541 ;; Hardware stack levels required when called:    6
   542 ;; This function calls:
   543 ;;		_ScanIR
   544 ;;		_ScanWithRange
   545 ;;		_VerifySignal
   546 ;;		_delay_s
   547 ;;		_delay_tenth_s
   548 ;;		_enableSensor
   549 ;;		_fullSpeedAhead
   550 ;;		_fullSpeedBack
   551 ;;		_initIR
   552 ;;		_initLCD
   553 ;;		_initMotorPWM
   554 ;;		_initRFID
   555 ;;		_stop
   556 ;;		_turnLeft
   557 ;;		_turnRight
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text0
   564  000716                     __ptext0:
   565                           	opt stack 0
   566  000716                     _main:
   567                           	opt stack 25
   568                           
   569                           ;main.c: 34: unsigned char Message[10];
   570                           ;main.c: 35: unsigned char i=0;
   571                           
   572                           ;incstack = 0
   573  000716  0E00               	movlw	0
   574  000718  0101               	movlb	1	; () banked
   575  00071A  6FD7               	movwf	main@i& (0+255),b
   576                           
   577                           ;main.c: 36: unsigned char mode=0;
   578  00071C  0E00               	movlw	0
   579  00071E  0101               	movlb	1	; () banked
   580  000720  6FD5               	movwf	main@mode& (0+255),b
   581                           
   582                           ;main.c: 37: char DirectionFound=0;
   583  000722  0E00               	movlw	0
   584  000724  0101               	movlb	1	; () banked
   585  000726  6FD6               	movwf	main@DirectionFound& (0+255),b
   586                           
   587                           ;main.c: 38: unsigned char SignalStrength[3];
   588                           ;main.c: 39: char PathTaken[100];
   589                           ;main.c: 40: unsigned int test=0;
   590  000728  0E00               	movlw	0
   591  00072A  0101               	movlb	1	; () banked
   592  00072C  6FD3               	movwf	(main@test+1)& (0+255),b
   593  00072E  0E00               	movlw	0
   594  000730  6FD2               	movwf	main@test& (0+255),b
   595                           
   596                           ;main.c: 41: char MoveTime[100];
   597                           ;main.c: 42: char MoveType[100];
   598                           ;main.c: 43: char Move=0;
   599  000732  0E00               	movlw	0
   600  000734  0101               	movlb	1	; () banked
   601  000736  6FD8               	movwf	main@Move& (0+255),b
   602                           
   603                           ;main.c: 45: unsigned char ScanAngle=6;
   604  000738  0E06               	movlw	6
   605  00073A  0101               	movlb	1	; () banked
   606  00073C  6FD4               	movwf	main@ScanAngle& (0+255),b
   607                           
   608                           ; BSR set to: 1
   609                           ;main.c: 48: INTCONbits.GIEH = 1;
   610  00073E  8EF2               	bsf	intcon,7,c	;volatile
   611                           
   612                           ; BSR set to: 1
   613                           ;main.c: 49: INTCONbits.GIEL = 1;
   614  000740  8CF2               	bsf	intcon,6,c	;volatile
   615                           
   616                           ; BSR set to: 1
   617                           ;main.c: 50: INTCONbits.PEIE = 1;
   618  000742  8CF2               	bsf	intcon,6,c	;volatile
   619                           
   620                           ; BSR set to: 1
   621                           ;main.c: 51: RCONbits.IPEN = 1;
   622  000744  8ED0               	bsf	4048,7,c	;volatile
   623                           
   624                           ; BSR set to: 1
   625                           ;main.c: 54: IPR1bits.RCIP=1;
   626  000746  8A9F               	bsf	3999,5,c	;volatile
   627                           
   628                           ; BSR set to: 1
   629                           ;main.c: 55: PIE1bits.RCIE=1;
   630  000748  8A9D               	bsf	3997,5,c	;volatile
   631                           
   632                           ; BSR set to: 1
   633                           ;main.c: 56: PIR1bits.RCIF=0;
   634  00074A  9A9E               	bcf	3998,5,c	;volatile
   635                           
   636                           ;main.c: 59: struct DC_motor mL, mR;
   637                           ;main.c: 60: mL.power=0;
   638  00074C  0E00               	movlw	0
   639  00074E  0101               	movlb	1	; () banked
   640  000750  6FD9               	movwf	main@mL& (0+255),b
   641                           
   642                           ;main.c: 61: mL.direction=1;
   643  000752  0E01               	movlw	1
   644  000754  0101               	movlb	1	; () banked
   645  000756  6FDA               	movwf	(main@mL+1)& (0+255),b
   646                           
   647                           ; BSR set to: 1
   648                           ;main.c: 62: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   649  000758  0E79               	movlw	121
   650  00075A  0101               	movlb	1	; () banked
   651  00075C  6FDB               	movwf	(main@mL+2)& (0+255),b
   652  00075E  0E0F               	movlw	15
   653  000760  0101               	movlb	1	; () banked
   654  000762  6FDC               	movwf	(main@mL+3)& (0+255),b
   655                           
   656                           ; BSR set to: 1
   657                           ;main.c: 63: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   658  000764  0E78               	movlw	120
   659  000766  0101               	movlb	1	; () banked
   660  000768  6FDD               	movwf	(main@mL+4)& (0+255),b
   661  00076A  0E0F               	movlw	15
   662  00076C  0101               	movlb	1	; () banked
   663  00076E  6FDE               	movwf	(main@mL+5)& (0+255),b
   664                           
   665                           ;main.c: 64: mL.dir_pin=0;
   666  000770  0E00               	movlw	0
   667  000772  0101               	movlb	1	; () banked
   668  000774  6FDF               	movwf	(main@mL+6)& (0+255),b
   669                           
   670                           ;main.c: 65: mL.PWMperiod=199;
   671  000776  0E00               	movlw	0
   672  000778  0101               	movlb	1	; () banked
   673  00077A  6FE1               	movwf	(main@mL+8)& (0+255),b
   674  00077C  0EC7               	movlw	199
   675  00077E  6FE0               	movwf	(main@mL+7)& (0+255),b
   676                           
   677                           ;main.c: 67: mR.power=0;
   678  000780  0E00               	movlw	0
   679  000782  0101               	movlb	1	; () banked
   680  000784  6FE2               	movwf	main@mR& (0+255),b
   681                           
   682                           ;main.c: 68: mR.direction=1;
   683  000786  0E01               	movlw	1
   684  000788  0101               	movlb	1	; () banked
   685  00078A  6FE3               	movwf	(main@mR+1)& (0+255),b
   686                           
   687                           ; BSR set to: 1
   688                           ;main.c: 69: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   689  00078C  0E77               	movlw	119
   690  00078E  0101               	movlb	1	; () banked
   691  000790  6FE4               	movwf	(main@mR+2)& (0+255),b
   692  000792  0E0F               	movlw	15
   693  000794  0101               	movlb	1	; () banked
   694  000796  6FE5               	movwf	(main@mR+3)& (0+255),b
   695                           
   696                           ; BSR set to: 1
   697                           ;main.c: 70: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   698  000798  0E76               	movlw	118
   699  00079A  0101               	movlb	1	; () banked
   700  00079C  6FE6               	movwf	(main@mR+4)& (0+255),b
   701  00079E  0E0F               	movlw	15
   702  0007A0  0101               	movlb	1	; () banked
   703  0007A2  6FE7               	movwf	(main@mR+5)& (0+255),b
   704                           
   705                           ;main.c: 71: mR.dir_pin=2;
   706  0007A4  0E02               	movlw	2
   707  0007A6  0101               	movlb	1	; () banked
   708  0007A8  6FE8               	movwf	(main@mR+6)& (0+255),b
   709                           
   710                           ;main.c: 72: mR.PWMperiod=199;
   711  0007AA  0E00               	movlw	0
   712  0007AC  0101               	movlb	1	; () banked
   713  0007AE  6FEA               	movwf	(main@mR+8)& (0+255),b
   714  0007B0  0EC7               	movlw	199
   715  0007B2  6FE9               	movwf	(main@mR+7)& (0+255),b
   716                           
   717                           ;main.c: 74: OSCCON = 0x72;
   718  0007B4  0E72               	movlw	114
   719  0007B6  6ED3               	movwf	4051,c	;volatile
   720  0007B8                     l69:
   721  0007B8  B4D3               	btfsc	4051,2,c	;volatile
   722  0007BA  D1B5               	goto	l3146
   723  0007BC  D7FD               	goto	l69
   724  0007BE                     l3030:
   725                           
   726                           ;main.c: 82: initMotorPWM();
   727  0007BE  EC2E  F00A         	call	_initMotorPWM	;wreg free
   728                           
   729                           ;main.c: 83: initRFID();
   730  0007C2  ECAE  F00A         	call	_initRFID	;wreg free
   731                           
   732                           ;main.c: 84: initIR();
   733  0007C6  EC9D  F00A         	call	_initIR	;wreg free
   734                           
   735                           ;main.c: 85: initLCD();
   736  0007CA  ECA1  F007         	call	_initLCD	;wreg free
   737                           
   738                           ;main.c: 86: initIR();
   739  0007CE  EC9D  F00A         	call	_initIR	;wreg free
   740                           
   741                           ;main.c: 90: fullSpeedAhead(&mL, &mR);
   742  0007D2  0ED9               	movlw	low main@mL
   743  0007D4  6E26               	movwf	fullSpeedAhead@mL,c
   744  0007D6  0E01               	movlw	high main@mL
   745  0007D8  6E27               	movwf	fullSpeedAhead@mL+1,c
   746  0007DA  0EE2               	movlw	low main@mR
   747  0007DC  6E28               	movwf	fullSpeedAhead@mR,c
   748  0007DE  0E01               	movlw	high main@mR
   749  0007E0  6E29               	movwf	fullSpeedAhead@mR+1,c
   750  0007E2  EC59  F009         	call	_fullSpeedAhead	;wreg free
   751                           
   752                           ;main.c: 91: delay_s(1);
   753  0007E6  0E01               	movlw	1
   754  0007E8  ECDB  F009         	call	_delay_s
   755                           
   756                           ;main.c: 92: stop(&mL, &mR);
   757  0007EC  0ED9               	movlw	low main@mL
   758  0007EE  6E26               	movwf	stop@mL,c
   759  0007F0  0E01               	movlw	high main@mL
   760  0007F2  6E27               	movwf	stop@mL+1,c
   761  0007F4  0EE2               	movlw	low main@mR
   762  0007F6  6E28               	movwf	stop@mR,c
   763  0007F8  0E01               	movlw	high main@mR
   764  0007FA  6E29               	movwf	stop@mR+1,c
   765  0007FC  EC59  F008         	call	_stop	;wreg free
   766                           
   767                           ;main.c: 93: fullSpeedBack(&mL, &mR);
   768  000800  0ED9               	movlw	low main@mL
   769  000802  6E2B               	movwf	fullSpeedBack@mL,c
   770  000804  0E01               	movlw	high main@mL
   771  000806  6E2C               	movwf	fullSpeedBack@mL+1,c
   772  000808  0EE2               	movlw	low main@mR
   773  00080A  6E2D               	movwf	fullSpeedBack@mR,c
   774  00080C  0E01               	movlw	high main@mR
   775  00080E  6E2E               	movwf	fullSpeedBack@mR+1,c
   776  000810  EC13  F00A         	call	_fullSpeedBack	;wreg free
   777                           
   778                           ;main.c: 94: delay_s(1);
   779  000814  0E01               	movlw	1
   780  000816  ECDB  F009         	call	_delay_s
   781                           
   782                           ;main.c: 95: stop(&mL, &mR);
   783  00081A  0ED9               	movlw	low main@mL
   784  00081C  6E26               	movwf	stop@mL,c
   785  00081E  0E01               	movlw	high main@mL
   786  000820  6E27               	movwf	stop@mL+1,c
   787  000822  0EE2               	movlw	low main@mR
   788  000824  6E28               	movwf	stop@mR,c
   789  000826  0E01               	movlw	high main@mR
   790  000828  6E29               	movwf	stop@mR+1,c
   791  00082A  EC59  F008         	call	_stop	;wreg free
   792                           
   793                           ;main.c: 97: enableSensor(0, 1);
   794  00082E  0E01               	movlw	1
   795  000830  6E0F               	movwf	enableSensor@status,c
   796  000832  0E00               	movlw	0
   797  000834  EC77  F00A         	call	_enableSensor
   798                           
   799                           ;main.c: 98: enableSensor(1, 1);
   800  000838  0E01               	movlw	1
   801  00083A  6E0F               	movwf	enableSensor@status,c
   802  00083C  0E01               	movlw	1
   803  00083E  EC77  F00A         	call	_enableSensor
   804                           
   805                           ;main.c: 99: mode = 1;
   806  000842  0E01               	movlw	1
   807  000844  D0C7               	goto	L1
   808  000846                     l3050:
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 105: if (DirectionFound==0) {
   812  000846  0101               	movlb	1	; () banked
   813  000848  51D6               	movf	main@DirectionFound& (0+255),w,b
   814  00084A  0101               	movlb	1	; () banked
   815  00084C  A4D8               	btfss	status,2,c
   816  00084E  D016               	goto	l3054
   817                           
   818                           ; BSR set to: 1
   819                           ;main.c: 107: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   820  000850  0ED9               	movlw	low main@mL
   821  000852  6E2F               	movwf	ScanWithRange@mL,c
   822  000854  0E01               	movlw	high main@mL
   823  000856  6E30               	movwf	ScanWithRange@mL+1,c
   824  000858  0EE2               	movlw	low main@mR
   825  00085A  6E31               	movwf	ScanWithRange@mR,c
   826  00085C  0E01               	movlw	high main@mR
   827  00085E  6E32               	movwf	ScanWithRange@mR+1,c
   828  000860  C1D4  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   829  000864  0101               	movlb	1	; () banked
   830  000866  51D8               	movf	main@Move& (0+255),w,b
   831  000868  0D01               	mullw	1
   832  00086A  0E64               	movlw	low main@MoveTime
   833  00086C  24F3               	addwf	prodl,w,c
   834  00086E  6E34               	movwf	ScanWithRange@MoveTime,c
   835  000870  0E01               	movlw	high main@MoveTime
   836  000872  20F4               	addwfc	prodh,w,c
   837  000874  6E35               	movwf	ScanWithRange@MoveTime+1,c
   838  000876  EC59  F000         	call	_ScanWithRange	;wreg free
   839  00087A  D036               	goto	L3
   840  00087C                     l3054:
   841                           
   842                           ; BSR set to: 1
   843  00087C  0101               	movlb	1	; () banked
   844  00087E  05D6               	decf	main@DirectionFound& (0+255),w,b
   845  000880  A4D8               	btfss	status,2,c
   846  000882  D00B               	goto	l3058
   847                           
   848                           ; BSR set to: 1
   849                           ;main.c: 110: DirectionFound = ScanIR(&mL, &mR);
   850  000884  0ED9               	movlw	low main@mL
   851  000886  6E2F               	movwf	ScanIR@mL,c
   852  000888  0E01               	movlw	high main@mL
   853  00088A  6E30               	movwf	ScanIR@mL+1,c
   854  00088C  0EE2               	movlw	low main@mR
   855  00088E  6E31               	movwf	ScanIR@mR,c
   856  000890  0E01               	movlw	high main@mR
   857  000892  6E32               	movwf	ScanIR@mR+1,c
   858  000894  ECA2  F005         	call	_ScanIR	;wreg free
   859  000898  D027               	goto	L3
   860  00089A                     l3058:
   861                           
   862                           ; BSR set to: 1
   863  00089A  0E02               	movlw	2
   864  00089C  0101               	movlb	1	; () banked
   865  00089E  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   866  0008A0  A4D8               	btfss	status,2,c
   867  0008A2  D004               	goto	l3062
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 113: mode=2;
   871  0008A4  0E02               	movlw	2
   872  0008A6  0101               	movlb	1	; () banked
   873  0008A8  6FD5               	movwf	main@mode& (0+255),b
   874                           
   875                           ;main.c: 114: } else if (DirectionFound==3) {
   876  0008AA  D020               	goto	l3072
   877  0008AC                     l3062:
   878                           
   879                           ; BSR set to: 1
   880  0008AC  0E03               	movlw	3
   881  0008AE  0101               	movlb	1	; () banked
   882  0008B0  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   883  0008B2  A4D8               	btfss	status,2,c
   884  0008B4  D01B               	goto	l3072
   885                           
   886                           ; BSR set to: 1
   887                           ;main.c: 119: fullSpeedAhead(&mL, &mR);
   888  0008B6  0ED9               	movlw	low main@mL
   889  0008B8  6E26               	movwf	fullSpeedAhead@mL,c
   890  0008BA  0E01               	movlw	high main@mL
   891  0008BC  6E27               	movwf	fullSpeedAhead@mL+1,c
   892  0008BE  0EE2               	movlw	low main@mR
   893  0008C0  6E28               	movwf	fullSpeedAhead@mR,c
   894  0008C2  0E01               	movlw	high main@mR
   895  0008C4  6E29               	movwf	fullSpeedAhead@mR+1,c
   896  0008C6  EC59  F009         	call	_fullSpeedAhead	;wreg free
   897                           
   898                           ;main.c: 120: delay_tenth_s(ScanAngle);
   899  0008CA  0101               	movlb	1	; () banked
   900  0008CC  51D4               	movf	main@ScanAngle& (0+255),w,b
   901  0008CE  ECF7  F009         	call	_delay_tenth_s
   902                           
   903                           ;main.c: 121: stop(&mL,&mR);
   904  0008D2  0ED9               	movlw	low main@mL
   905  0008D4  6E26               	movwf	stop@mL,c
   906  0008D6  0E01               	movlw	high main@mL
   907  0008D8  6E27               	movwf	stop@mL+1,c
   908  0008DA  0EE2               	movlw	low main@mR
   909  0008DC  6E28               	movwf	stop@mR,c
   910  0008DE  0E01               	movlw	high main@mR
   911  0008E0  6E29               	movwf	stop@mR+1,c
   912  0008E2  EC59  F008         	call	_stop	;wreg free
   913                           
   914                           ;main.c: 122: DirectionFound=0;
   915  0008E6  0E00               	movlw	0
   916  0008E8                     L3:
   917  0008E8  0101               	movlb	1	; () banked
   918  0008EA  6FD6               	movwf	main@DirectionFound& (0+255),b
   919  0008EC                     l3072:
   920                           
   921                           ; BSR set to: 1
   922                           ;main.c: 123: }
   923                           ;main.c: 125: MoveType[Move] = 1;
   924  0008EC  0101               	movlb	1	; () banked
   925  0008EE  51D8               	movf	main@Move& (0+255),w,b
   926  0008F0  0D01               	mullw	1
   927  0008F2  0E00               	movlw	low main@MoveType
   928  0008F4  24F3               	addwf	prodl,w,c
   929  0008F6  6ED9               	movwf	fsr2l,c
   930  0008F8  0E01               	movlw	high main@MoveType
   931  0008FA  20F4               	addwfc	prodh,w,c
   932  0008FC  6EDA               	movwf	fsr2h,c
   933  0008FE  0E01               	movlw	1
   934  000900  6EDF               	movwf	indf2,c
   935                           
   936                           ; BSR set to: 1
   937                           ;main.c: 126: Move++;
   938  000902  0101               	movlb	1	; () banked
   939  000904  2BD8               	incf	main@Move& (0+255),f,b
   940                           
   941                           ;main.c: 128: break;
   942  000906  D10F               	goto	l3146
   943  000908                     l3076:
   944                           
   945                           ; BSR set to: 1
   946                           ;main.c: 134: if (RFID_Read) {
   947  000908  0101               	movlb	1	; () banked
   948  00090A  51EB               	movf	_RFID_Read& (0+255),w,b	;volatile
   949  00090C  B4D8               	btfsc	status,2,c
   950  00090E  D087               	goto	l3118
   951                           
   952                           ; BSR set to: 1
   953                           ;main.c: 135: stop(&mL, &mR);
   954  000910  0ED9               	movlw	low main@mL
   955  000912  6E26               	movwf	stop@mL,c
   956  000914  0E01               	movlw	high main@mL
   957  000916  6E27               	movwf	stop@mL+1,c
   958  000918  0EE2               	movlw	low main@mR
   959  00091A  6E28               	movwf	stop@mR,c
   960  00091C  0E01               	movlw	high main@mR
   961  00091E  6E29               	movwf	stop@mR+1,c
   962  000920  EC59  F008         	call	_stop	;wreg free
   963                           
   964                           ;main.c: 136: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   965  000924  0E03               	movlw	3
   966  000926  0101               	movlb	1	; () banked
   967  000928  19FB               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   968  00092A  A4D8               	btfss	status,2,c
   969  00092C  D002               	goto	u2600
   970  00092E  0E01               	movlw	1
   971  000930  D001               	goto	u2602
   972  000932                     u2600:
   973  000932  0E00               	movlw	0
   974  000934                     u2602:
   975  000934  6E3F               	movwf	??_main& (0+255),c
   976  000936  0E02               	movlw	2
   977  000938  0101               	movlb	1	; () banked
   978  00093A  19EC               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   979  00093C  A4D8               	btfss	status,2,c
   980  00093E  D002               	goto	u2610
   981  000940  0E01               	movlw	1
   982  000942  D001               	goto	u2612
   983  000944                     u2610:
   984  000944  0E00               	movlw	0
   985  000946                     u2612:
   986  000946  143F               	andwf	??_main,w,c
   987  000948  A0E8               	btfss	wreg,0,c
   988  00094A  D0ED               	goto	l3146
   989                           
   990                           ; BSR set to: 1
   991                           ;main.c: 137: if (VerifySignal(ReceivedString)){
   992  00094C  0EEC               	movlw	low _ReceivedString
   993  00094E  6E0F               	movwf	VerifySignal@Signal,c
   994  000950  0E01               	movlw	high _ReceivedString
   995  000952  6E10               	movwf	VerifySignal@Signal+1,c
   996  000954  ECFF  F007         	call	_VerifySignal	;wreg free
   997  000958  0900               	iorlw	0
   998  00095A  B4D8               	btfsc	status,2,c
   999  00095C  D03E               	goto	l3110
  1000                           
  1001                           ;main.c: 139: for (i=0; i<10; i++){
  1002  00095E  0E00               	movlw	0
  1003  000960  0101               	movlb	1	; () banked
  1004  000962  6FD7               	movwf	main@i& (0+255),b
  1005  000964                     l3086:
  1006                           
  1007                           ; BSR set to: 1
  1008  000964  0E09               	movlw	9
  1009  000966  0101               	movlb	1	; () banked
  1010  000968  65D7               	cpfsgt	main@i& (0+255),b
  1011  00096A  D001               	goto	l3090
  1012  00096C  D01C               	goto	l3096
  1013  00096E                     l3090:
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 140: Message[i] = ReceivedString[i+1];
  1017  00096E  0101               	movlb	1	; () banked
  1018  000970  51D7               	movf	main@i& (0+255),w,b
  1019  000972  6E3F               	movwf	??_main& (0+255),c
  1020  000974  6A40               	clrf	(??_main+1)& (0+255),c
  1021  000976  0E01               	movlw	1
  1022  000978  263F               	addwf	??_main,f,c
  1023  00097A  0E00               	movlw	0
  1024  00097C  2240               	addwfc	??_main+1,f,c
  1025  00097E  0EEC               	movlw	low _ReceivedString
  1026  000980  243F               	addwf	??_main,w,c
  1027  000982  6ED9               	movwf	fsr2l,c
  1028  000984  0E01               	movlw	high _ReceivedString
  1029  000986  2040               	addwfc	??_main+1,w,c
  1030  000988  6EDA               	movwf	fsr2h,c
  1031  00098A  0101               	movlb	1	; () banked
  1032  00098C  51D7               	movf	main@i& (0+255),w,b
  1033  00098E  0D01               	mullw	1
  1034  000990  0EC8               	movlw	low main@Message
  1035  000992  24F3               	addwf	prodl,w,c
  1036  000994  6EE1               	movwf	fsr1l,c
  1037  000996  0E01               	movlw	high main@Message
  1038  000998  20F4               	addwfc	prodh,w,c
  1039  00099A  6EE2               	movwf	fsr1h,c
  1040  00099C  CFDF FFE7          	movff	indf2,indf1
  1041                           
  1042                           ; BSR set to: 1
  1043  0009A0  0101               	movlb	1	; () banked
  1044  0009A2  2BD7               	incf	main@i& (0+255),f,b
  1045  0009A4  D7DF               	goto	l3086
  1046  0009A6                     l3096:
  1047                           
  1048                           ; BSR set to: 1
  1049                           ;main.c: 141: }
  1050                           ;main.c: 144: for (i=0; i<16; i++) {
  1051  0009A6  0E00               	movlw	0
  1052  0009A8  0101               	movlb	1	; () banked
  1053  0009AA  6FD7               	movwf	main@i& (0+255),b
  1054  0009AC                     l3098:
  1055                           
  1056                           ; BSR set to: 1
  1057  0009AC  0E0F               	movlw	15
  1058  0009AE  0101               	movlb	1	; () banked
  1059  0009B0  65D7               	cpfsgt	main@i& (0+255),b
  1060  0009B2  D001               	goto	l3102
  1061  0009B4  D00E               	goto	l3108
  1062  0009B6                     l3102:
  1063                           
  1064                           ; BSR set to: 1
  1065                           ;main.c: 145: ReceivedString[i]=0;
  1066  0009B6  0101               	movlb	1	; () banked
  1067  0009B8  51D7               	movf	main@i& (0+255),w,b
  1068  0009BA  0D01               	mullw	1
  1069  0009BC  0EEC               	movlw	low _ReceivedString
  1070  0009BE  24F3               	addwf	prodl,w,c
  1071  0009C0  6ED9               	movwf	fsr2l,c
  1072  0009C2  0E01               	movlw	high _ReceivedString
  1073  0009C4  20F4               	addwfc	prodh,w,c
  1074  0009C6  6EDA               	movwf	fsr2h,c
  1075  0009C8  0E00               	movlw	0
  1076  0009CA  6EDF               	movwf	indf2,c
  1077                           
  1078                           ; BSR set to: 1
  1079  0009CC  0101               	movlb	1	; () banked
  1080  0009CE  2BD7               	incf	main@i& (0+255),f,b
  1081  0009D0  D7ED               	goto	l3098
  1082  0009D2                     l3108:
  1083                           
  1084                           ; BSR set to: 1
  1085                           ;main.c: 146: }
  1086                           ;main.c: 147: mode = 3;
  1087  0009D2  0E03               	movlw	3
  1088  0009D4                     L1:
  1089  0009D4  0101               	movlb	1	; () banked
  1090  0009D6  6FD5               	movwf	main@mode& (0+255),b
  1091                           
  1092                           ;main.c: 149: } else {
  1093  0009D8  D0A6               	goto	l3146
  1094  0009DA                     l3110:
  1095                           
  1096                           ;main.c: 150: fullSpeedBack(&mL,&mR);
  1097  0009DA  0ED9               	movlw	low main@mL
  1098  0009DC  6E2B               	movwf	fullSpeedBack@mL,c
  1099  0009DE  0E01               	movlw	high main@mL
  1100  0009E0  6E2C               	movwf	fullSpeedBack@mL+1,c
  1101  0009E2  0EE2               	movlw	low main@mR
  1102  0009E4  6E2D               	movwf	fullSpeedBack@mR,c
  1103  0009E6  0E01               	movlw	high main@mR
  1104  0009E8  6E2E               	movwf	fullSpeedBack@mR+1,c
  1105  0009EA  EC13  F00A         	call	_fullSpeedBack	;wreg free
  1106                           
  1107                           ;main.c: 151: delay_tenth_s(5);
  1108  0009EE  0E05               	movlw	5
  1109  0009F0  ECF7  F009         	call	_delay_tenth_s
  1110                           
  1111                           ;main.c: 152: stop(&mL,&mR);
  1112  0009F4  0ED9               	movlw	low main@mL
  1113  0009F6  6E26               	movwf	stop@mL,c
  1114  0009F8  0E01               	movlw	high main@mL
  1115  0009FA  6E27               	movwf	stop@mL+1,c
  1116  0009FC  0EE2               	movlw	low main@mR
  1117  0009FE  6E28               	movwf	stop@mR,c
  1118  000A00  0E01               	movlw	high main@mR
  1119  000A02  6E29               	movwf	stop@mR+1,c
  1120  000A04  EC59  F008         	call	_stop	;wreg free
  1121                           
  1122                           ;main.c: 153: fullSpeedAhead(&mL,&mR);
  1123  000A08  0ED9               	movlw	low main@mL
  1124  000A0A  6E26               	movwf	fullSpeedAhead@mL,c
  1125  000A0C  0E01               	movlw	high main@mL
  1126  000A0E  6E27               	movwf	fullSpeedAhead@mL+1,c
  1127  000A10  0EE2               	movlw	low main@mR
  1128  000A12  6E28               	movwf	fullSpeedAhead@mR,c
  1129  000A14  0E01               	movlw	high main@mR
  1130  000A16  6E29               	movwf	fullSpeedAhead@mR+1,c
  1131  000A18  EC59  F009         	call	_fullSpeedAhead	;wreg free
  1132                           
  1133                           ;main.c: 154: }
  1134                           ;main.c: 155: }
  1135                           ;main.c: 156: } else {
  1136  000A1C  D084               	goto	l3146
  1137  000A1E                     l3118:
  1138                           
  1139                           ;main.c: 157: DirectionFound=1;
  1140  000A1E  0E01               	movlw	1
  1141  000A20  0101               	movlb	1	; () banked
  1142  000A22  6FD6               	movwf	main@DirectionFound& (0+255),b
  1143                           
  1144                           ;main.c: 158: mode=1;
  1145  000A24  0E01               	movlw	1
  1146  000A26  0101               	movlb	1	; () banked
  1147  000A28  6FD5               	movwf	main@mode& (0+255),b
  1148                           
  1149                           ; BSR set to: 1
  1150                           ;main.c: 159: fullSpeedAhead(&mL,&mR);
  1151  000A2A  0ED9               	movlw	low main@mL
  1152  000A2C  6E26               	movwf	fullSpeedAhead@mL,c
  1153  000A2E  0E01               	movlw	high main@mL
  1154  000A30  6E27               	movwf	fullSpeedAhead@mL+1,c
  1155  000A32  0EE2               	movlw	low main@mR
  1156  000A34  6E28               	movwf	fullSpeedAhead@mR,c
  1157  000A36  0E01               	movlw	high main@mR
  1158  000A38  6E29               	movwf	fullSpeedAhead@mR+1,c
  1159  000A3A  EC59  F009         	call	_fullSpeedAhead	;wreg free
  1160                           
  1161                           ;main.c: 160: delay_tenth_s(5);
  1162  000A3E  0E05               	movlw	5
  1163  000A40  ECF7  F009         	call	_delay_tenth_s
  1164                           
  1165                           ;main.c: 161: }
  1166                           ;main.c: 163: break;
  1167  000A44  D070               	goto	l3146
  1168  000A46                     l3124:
  1169  000A46  0101               	movlb	1	; () banked
  1170  000A48  51D8               	movf	main@Move& (0+255),w,b
  1171  000A4A  0101               	movlb	1	; () banked
  1172  000A4C  B4D8               	btfsc	status,2,c
  1173  000A4E  D06B               	goto	l3146
  1174                           
  1175                           ; BSR set to: 1
  1176                           ;main.c: 168: if (MoveType[Move]==0) {
  1177                           
  1178                           ; BSR set to: 1
  1179                           
  1180                           ; BSR set to: 1
  1181  000A50  0101               	movlb	1	; () banked
  1182  000A52  51D8               	movf	main@Move& (0+255),w,b
  1183  000A54  0D01               	mullw	1
  1184  000A56  0E00               	movlw	low main@MoveType
  1185  000A58  24F3               	addwf	prodl,w,c
  1186  000A5A  6ED9               	movwf	fsr2l,c
  1187  000A5C  0E01               	movlw	high main@MoveType
  1188  000A5E  20F4               	addwfc	prodh,w,c
  1189  000A60  6EDA               	movwf	fsr2h,c
  1190  000A62  50DF               	movf	indf2,w,c
  1191  000A64  A4D8               	btfss	status,2,c
  1192  000A66  D017               	goto	l3132
  1193                           
  1194                           ; BSR set to: 1
  1195                           ;main.c: 169: fullSpeedBack(&mL,&mR);
  1196  000A68  0ED9               	movlw	low main@mL
  1197  000A6A  6E2B               	movwf	fullSpeedBack@mL,c
  1198  000A6C  0E01               	movlw	high main@mL
  1199  000A6E  6E2C               	movwf	fullSpeedBack@mL+1,c
  1200  000A70  0EE2               	movlw	low main@mR
  1201  000A72  6E2D               	movwf	fullSpeedBack@mR,c
  1202  000A74  0E01               	movlw	high main@mR
  1203  000A76  6E2E               	movwf	fullSpeedBack@mR+1,c
  1204  000A78  EC13  F00A         	call	_fullSpeedBack	;wreg free
  1205                           
  1206                           ;main.c: 170: delay_tenth_s(MoveTime[Move]);
  1207  000A7C  0101               	movlb	1	; () banked
  1208  000A7E  51D8               	movf	main@Move& (0+255),w,b
  1209  000A80  0D01               	mullw	1
  1210  000A82  0E64               	movlw	low main@MoveTime
  1211  000A84  24F3               	addwf	prodl,w,c
  1212  000A86  6ED9               	movwf	fsr2l,c
  1213  000A88  0E01               	movlw	high main@MoveTime
  1214  000A8A  20F4               	addwfc	prodh,w,c
  1215  000A8C  6EDA               	movwf	fsr2h,c
  1216  000A8E  50DF               	movf	indf2,w,c
  1217  000A90  ECF7  F009         	call	_delay_tenth_s
  1218                           
  1219                           ;main.c: 171: } else if (MoveType[Move]==1) {
  1220  000A94  D045               	goto	l3140
  1221  000A96                     l3132:
  1222  000A96  0101               	movlb	1	; () banked
  1223  000A98  51D8               	movf	main@Move& (0+255),w,b
  1224  000A9A  0D01               	mullw	1
  1225  000A9C  0E00               	movlw	low main@MoveType
  1226  000A9E  24F3               	addwf	prodl,w,c
  1227  000AA0  6ED9               	movwf	fsr2l,c
  1228  000AA2  0E01               	movlw	high main@MoveType
  1229  000AA4  20F4               	addwfc	prodh,w,c
  1230  000AA6  6EDA               	movwf	fsr2h,c
  1231  000AA8  04DE               	decf	postinc2,w,c
  1232  000AAA  A4D8               	btfss	status,2,c
  1233  000AAC  D039               	goto	l3140
  1234                           
  1235                           ; BSR set to: 1
  1236                           ;main.c: 172: if (MoveTime[Move]>0) {
  1237  000AAE  0101               	movlb	1	; () banked
  1238  000AB0  51D8               	movf	main@Move& (0+255),w,b
  1239  000AB2  0D01               	mullw	1
  1240  000AB4  0E64               	movlw	low main@MoveTime
  1241  000AB6  24F3               	addwf	prodl,w,c
  1242  000AB8  6ED9               	movwf	fsr2l,c
  1243  000ABA  0E01               	movlw	high main@MoveTime
  1244  000ABC  20F4               	addwfc	prodh,w,c
  1245  000ABE  6EDA               	movwf	fsr2h,c
  1246  000AC0  50DF               	movf	indf2,w,c
  1247  000AC2  B4D8               	btfsc	status,2,c
  1248  000AC4  D017               	goto	l3138
  1249                           
  1250                           ; BSR set to: 1
  1251                           ;main.c: 173: turnRight(&mL,&mR);
  1252  000AC6  0ED9               	movlw	low main@mL
  1253  000AC8  6E2B               	movwf	turnRight@mL,c
  1254  000ACA  0E01               	movlw	high main@mL
  1255  000ACC  6E2C               	movwf	turnRight@mL+1,c
  1256  000ACE  0EE2               	movlw	low main@mR
  1257  000AD0  6E2D               	movwf	turnRight@mR,c
  1258  000AD2  0E01               	movlw	high main@mR
  1259  000AD4  6E2E               	movwf	turnRight@mR+1,c
  1260  000AD6  EC91  F009         	call	_turnRight	;wreg free
  1261                           
  1262                           ;main.c: 174: delay_tenth_s(MoveTime[Move]);
  1263  000ADA  0101               	movlb	1	; () banked
  1264  000ADC  51D8               	movf	main@Move& (0+255),w,b
  1265  000ADE  0D01               	mullw	1
  1266  000AE0  0E64               	movlw	low main@MoveTime
  1267  000AE2  24F3               	addwf	prodl,w,c
  1268  000AE4  6ED9               	movwf	fsr2l,c
  1269  000AE6  0E01               	movlw	high main@MoveTime
  1270  000AE8  20F4               	addwfc	prodh,w,c
  1271  000AEA  6EDA               	movwf	fsr2h,c
  1272  000AEC  50DF               	movf	indf2,w,c
  1273  000AEE  ECF7  F009         	call	_delay_tenth_s
  1274                           
  1275                           ;main.c: 175: } else {
  1276  000AF2  D016               	goto	l3140
  1277  000AF4                     l3138:
  1278                           
  1279                           ;main.c: 176: turnLeft(&mL,&mR);
  1280  000AF4  0ED9               	movlw	low main@mL
  1281  000AF6  6E2B               	movwf	turnLeft@mL,c
  1282  000AF8  0E01               	movlw	high main@mL
  1283  000AFA  6E2C               	movwf	turnLeft@mL+1,c
  1284  000AFC  0EE2               	movlw	low main@mR
  1285  000AFE  6E2D               	movwf	turnLeft@mR,c
  1286  000B00  0E01               	movlw	high main@mR
  1287  000B02  6E2E               	movwf	turnLeft@mR+1,c
  1288  000B04  ECB6  F009         	call	_turnLeft	;wreg free
  1289                           
  1290                           ;main.c: 177: delay_tenth_s(MoveTime[Move]);
  1291  000B08  0101               	movlb	1	; () banked
  1292  000B0A  51D8               	movf	main@Move& (0+255),w,b
  1293  000B0C  0D01               	mullw	1
  1294  000B0E  0E64               	movlw	low main@MoveTime
  1295  000B10  24F3               	addwf	prodl,w,c
  1296  000B12  6ED9               	movwf	fsr2l,c
  1297  000B14  0E01               	movlw	high main@MoveTime
  1298  000B16  20F4               	addwfc	prodh,w,c
  1299  000B18  6EDA               	movwf	fsr2h,c
  1300  000B1A  50DF               	movf	indf2,w,c
  1301  000B1C  ECF7  F009         	call	_delay_tenth_s
  1302  000B20                     l3140:
  1303  000B20  0101               	movlb	1	; () banked
  1304  000B22  07D8               	decf	main@Move& (0+255),f,b
  1305  000B24  D790               	goto	l3124
  1306  000B26                     l3146:
  1307  000B26  0101               	movlb	1	; () banked
  1308  000B28  51D5               	movf	main@mode& (0+255),w,b
  1309                           
  1310                           ; Switch size 1, requested type "space"
  1311                           ; Number of cases is 4, Range of values is 0 to 3
  1312                           ; switch strategies available:
  1313                           ; Name         Instructions Cycles
  1314                           ; simple_byte           13     7 (average)
  1315                           ;	Chosen strategy is simple_byte
  1316  000B2A  0A00               	xorlw	0	; case 0
  1317  000B2C  B4D8               	btfsc	status,2,c
  1318  000B2E  D647               	goto	l3030
  1319  000B30  0A01               	xorlw	1	; case 1
  1320  000B32  B4D8               	btfsc	status,2,c
  1321  000B34  D688               	goto	l3050
  1322  000B36  0A03               	xorlw	3	; case 2
  1323  000B38  B4D8               	btfsc	status,2,c
  1324  000B3A  D6E6               	goto	l3076
  1325  000B3C  0A01               	xorlw	1	; case 3
  1326  000B3E  B4D8               	btfsc	status,2,c
  1327  000B40  D782               	goto	l3124
  1328                           
  1329                           ; BSR set to: 1
  1330                           
  1331                           ; BSR set to: 1
  1332  000B42  D7F1               	goto	l3146
  1333  000B44                     __end_of_main:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           prodh	equ	0xFF4
  1337                           prodl	equ	0xFF3
  1338                           intcon	equ	0xFF2
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           indf1	equ	0xFE7
  1342                           fsr1h	equ	0xFE2
  1343                           fsr1l	equ	0xFE1
  1344                           indf2	equ	0xFDF
  1345                           postinc2	equ	0xFDE
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _initRFID *****************
  1351 ;; Defined at:
  1352 ;;		line 5 in file "RFID_Reader.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;		None               void
  1359 ;; Registers used:
  1360 ;;		wreg, status,2
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1366 ;;      Params:         0       0       0       0
  1367 ;;      Locals:         1       0       0       0
  1368 ;;      Temps:          0       0       0       0
  1369 ;;      Totals:         1       0       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    1
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text1
  1381  00155C                     __ptext1:
  1382                           	opt stack 0
  1383  00155C                     _initRFID:
  1384                           	opt stack 29
  1385                           
  1386                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1387                           
  1388                           ; BSR set to: 1
  1389                           ;incstack = 0
  1390  00155C  0E01               	movlw	1
  1391  00155E  6E0F               	movwf	_initRFID$1317,c
  1392  001560  5094               	movf	3988,w,c	;volatile
  1393  001562  C00F  FF94         	movff	_initRFID$1317,3988	;volatile
  1394                           
  1395                           ;RFID_Reader.c: 10: SPBRG=205;
  1396  001566  0ECD               	movlw	205
  1397  001568  6EAF               	movwf	4015,c	;volatile
  1398                           
  1399                           ;RFID_Reader.c: 11: SPBRGH=0;
  1400  00156A  0E00               	movlw	0
  1401  00156C  6EB0               	movwf	4016,c	;volatile
  1402                           
  1403                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1404  00156E  86AA               	bsf	4010,3,c	;volatile
  1405                           
  1406                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1407  001570  84AC               	bsf	4012,2,c	;volatile
  1408                           
  1409                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1410  001572  88AB               	bsf	4011,4,c	;volatile
  1411                           
  1412                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1413  001574  8EAB               	bsf	4011,7,c	;volatile
  1414                           
  1415                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1416  001576  98AC               	bcf	4012,4,c	;volatile
  1417                           
  1418                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1419  001578  9CAB               	bcf	4011,6,c	;volatile
  1420  00157A  0012               	return		;funcret
  1421  00157C                     __end_of_initRFID:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           intcon	equ	0xFF2
  1427                           postinc0	equ	0xFEE
  1428                           wreg	equ	0xFE8
  1429                           indf1	equ	0xFE7
  1430                           fsr1h	equ	0xFE2
  1431                           fsr1l	equ	0xFE1
  1432                           indf2	equ	0xFDF
  1433                           postinc2	equ	0xFDE
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _initMotorPWM *****************
  1439 ;; Defined at:
  1440 ;;		line 4 in file "dc_motor.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;		None
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;		None
  1445 ;; Return value:  Size  Location     Type
  1446 ;;		None               void
  1447 ;; Registers used:
  1448 ;;		wreg, status,2
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1454 ;;      Params:         0       0       0       0
  1455 ;;      Locals:         0       0       0       0
  1456 ;;      Temps:          0       0       0       0
  1457 ;;      Totals:         0       0       0       0
  1458 ;;Total ram usage:        0 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text2
  1469  00145C                     __ptext2:
  1470                           	opt stack 0
  1471  00145C                     _initMotorPWM:
  1472                           	opt stack 29
  1473                           
  1474                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1475                           
  1476                           ;incstack = 0
  1477  00145C  0E00               	movlw	0
  1478  00145E  6E7F               	movwf	3967,c	;volatile
  1479                           
  1480                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1481  001460  0E80               	movlw	128
  1482  001462  6E7E               	movwf	3966,c	;volatile
  1483                           
  1484                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1485  001464  0E6F               	movlw	111
  1486  001466  6E6F               	movwf	3951,c	;volatile
  1487                           
  1488                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1489  001468  0E00               	movlw	0
  1490  00146A  6E6E               	movwf	3950,c	;volatile
  1491                           
  1492                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1493  00146C  0EC7               	movlw	199
  1494  00146E  6E7B               	movwf	3963,c	;volatile
  1495                           
  1496                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1497  001470  0E00               	movlw	0
  1498  001472  6E7A               	movwf	3962,c	;volatile
  1499                           
  1500                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1501  001474  0E00               	movlw	0
  1502  001476  6E79               	movwf	3961,c	;volatile
  1503                           
  1504                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1505  001478  0E00               	movlw	0
  1506  00147A  6E78               	movwf	3960,c	;volatile
  1507                           
  1508                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1509  00147C  0E00               	movlw	0
  1510  00147E  6E77               	movwf	3959,c	;volatile
  1511                           
  1512                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1513  001480  0E00               	movlw	0
  1514  001482  6E76               	movwf	3958,c	;volatile
  1515                           
  1516                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1517  001484  9093               	bcf	3987,0,c	;volatile
  1518                           
  1519                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1520  001486  9293               	bcf	3987,1,c	;volatile
  1521                           
  1522                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1523  001488  9493               	bcf	3987,2,c	;volatile
  1524                           
  1525                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1526  00148A  9693               	bcf	3987,3,c	;volatile
  1527  00148C  0012               	return		;funcret
  1528  00148E                     __end_of_initMotorPWM:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           prodh	equ	0xFF4
  1532                           prodl	equ	0xFF3
  1533                           intcon	equ	0xFF2
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           indf1	equ	0xFE7
  1537                           fsr1h	equ	0xFE2
  1538                           fsr1l	equ	0xFE1
  1539                           indf2	equ	0xFDF
  1540                           postinc2	equ	0xFDE
  1541                           fsr2h	equ	0xFDA
  1542                           fsr2l	equ	0xFD9
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _initLCD *****************
  1546 ;; Defined at:
  1547 ;;		line 38 in file "LCD.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  2   32[None  ] int 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1561 ;;      Params:         0       0       0       0
  1562 ;;      Locals:         0       0       0       0
  1563 ;;      Temps:          1       0       0       0
  1564 ;;      Totals:         1       0       0       0
  1565 ;;Total ram usage:        1 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    4
  1568 ;; This function calls:
  1569 ;;		_LCDout
  1570 ;;		_SendLCD
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text3
  1577  000F42                     __ptext3:
  1578                           	opt stack 0
  1579  000F42                     _initLCD:
  1580                           	opt stack 26
  1581                           
  1582                           ;LCD.c: 44: TRISAbits.RA6=0;
  1583                           
  1584                           ;incstack = 0
  1585  000F42  9C92               	bcf	3986,6,c	;volatile
  1586                           
  1587                           ;LCD.c: 45: TRISCbits.RC0=0;
  1588  000F44  9094               	bcf	3988,0,c	;volatile
  1589                           
  1590                           ;LCD.c: 46: TRISCbits.RC1=0;
  1591  000F46  9294               	bcf	3988,1,c	;volatile
  1592                           
  1593                           ;LCD.c: 47: TRISCbits.RC2=0;
  1594  000F48  9494               	bcf	3988,2,c	;volatile
  1595                           
  1596                           ;LCD.c: 48: TRISDbits.RD0=0;
  1597  000F4A  9095               	bcf	3989,0,c	;volatile
  1598                           
  1599                           ;LCD.c: 49: TRISDbits.RD1=0;
  1600  000F4C  9295               	bcf	3989,1,c	;volatile
  1601                           
  1602                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1603  000F4E  0E27               	movlw	39
  1604  000F50  6E15               	movwf	??_initLCD& (0+255),c
  1605  000F52  0EF5               	movlw	245
  1606  000F54                     u2757:
  1607  000F54  2EE8               	decfsz	wreg,f,c
  1608  000F56  D7FE               	goto	u2757
  1609  000F58  2E15               	decfsz	??_initLCD& (0+255),f,c
  1610  000F5A  D7FC               	goto	u2757
  1611  000F5C  F000               	nop	
  1612                           
  1613                           ;LCD.c: 52: LCDout(0b0011);
  1614  000F5E  0E03               	movlw	3
  1615  000F60  EC3E  F007         	call	_LCDout
  1616                           
  1617                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1618  000F64  0E0D               	movlw	13
  1619  000F66  6E15               	movwf	??_initLCD& (0+255),c
  1620  000F68  0EFC               	movlw	252
  1621  000F6A                     u2767:
  1622  000F6A  2EE8               	decfsz	wreg,f,c
  1623  000F6C  D7FE               	goto	u2767
  1624  000F6E  2E15               	decfsz	??_initLCD& (0+255),f,c
  1625  000F70  D7FC               	goto	u2767
  1626                           
  1627                           ;LCD.c: 54: LCDout(0b0011);
  1628  000F72  0E03               	movlw	3
  1629  000F74  EC3E  F007         	call	_LCDout
  1630                           
  1631                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1632  000F78  0E85               	movlw	133
  1633  000F7A                     u2777:
  1634  000F7A  2EE8               	decfsz	wreg,f,c
  1635  000F7C  D7FE               	goto	u2777
  1636  000F7E  F000               	nop	
  1637                           
  1638                           ;LCD.c: 56: LCDout(0b0011);
  1639  000F80  0E03               	movlw	3
  1640  000F82  EC3E  F007         	call	_LCDout
  1641                           
  1642                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1643  000F86  0E21               	movlw	33
  1644  000F88                     u2787:
  1645  000F88  2EE8               	decfsz	wreg,f,c
  1646  000F8A  D7FE               	goto	u2787
  1647  000F8C  F000               	nop	
  1648                           
  1649                           ;LCD.c: 58: LCDout(0b0010);
  1650  000F8E  0E02               	movlw	2
  1651  000F90  EC3E  F007         	call	_LCDout
  1652                           
  1653                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1654  000F94  0E21               	movlw	33
  1655  000F96                     u2797:
  1656  000F96  2EE8               	decfsz	wreg,f,c
  1657  000F98  D7FE               	goto	u2797
  1658  000F9A  F000               	nop	
  1659                           
  1660                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1661  000F9C  0E00               	movlw	0
  1662  000F9E  6E13               	movwf	SendLCD@type,c
  1663  000FA0  0E28               	movlw	40
  1664  000FA2  EC5F  F00A         	call	_SendLCD
  1665                           
  1666                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1667  000FA6  0E21               	movlw	33
  1668  000FA8                     u2807:
  1669  000FA8  2EE8               	decfsz	wreg,f,c
  1670  000FAA  D7FE               	goto	u2807
  1671  000FAC  F000               	nop	
  1672                           
  1673                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1674  000FAE  0E00               	movlw	0
  1675  000FB0  6E13               	movwf	SendLCD@type,c
  1676  000FB2  0E08               	movlw	8
  1677  000FB4  EC5F  F00A         	call	_SendLCD
  1678                           
  1679                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1680  000FB8  0E21               	movlw	33
  1681  000FBA                     u2817:
  1682  000FBA  2EE8               	decfsz	wreg,f,c
  1683  000FBC  D7FE               	goto	u2817
  1684  000FBE  F000               	nop	
  1685                           
  1686                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1687  000FC0  0E00               	movlw	0
  1688  000FC2  6E13               	movwf	SendLCD@type,c
  1689  000FC4  0E01               	movlw	1
  1690  000FC6  EC5F  F00A         	call	_SendLCD
  1691                           
  1692                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1693  000FCA  0E0D               	movlw	13
  1694  000FCC  6E15               	movwf	??_initLCD& (0+255),c
  1695  000FCE  0EFC               	movlw	252
  1696  000FD0                     u2827:
  1697  000FD0  2EE8               	decfsz	wreg,f,c
  1698  000FD2  D7FE               	goto	u2827
  1699  000FD4  2E15               	decfsz	??_initLCD& (0+255),f,c
  1700  000FD6  D7FC               	goto	u2827
  1701                           
  1702                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1703  000FD8  0E00               	movlw	0
  1704  000FDA  6E13               	movwf	SendLCD@type,c
  1705  000FDC  0E06               	movlw	6
  1706  000FDE  EC5F  F00A         	call	_SendLCD
  1707                           
  1708                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1709  000FE2  0E21               	movlw	33
  1710  000FE4                     u2837:
  1711  000FE4  2EE8               	decfsz	wreg,f,c
  1712  000FE6  D7FE               	goto	u2837
  1713  000FE8  F000               	nop	
  1714                           
  1715                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1716  000FEA  0E00               	movlw	0
  1717  000FEC  6E13               	movwf	SendLCD@type,c
  1718  000FEE  0E0C               	movlw	12
  1719  000FF0  EC5F  F00A         	call	_SendLCD
  1720                           
  1721                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1722  000FF4  0E21               	movlw	33
  1723  000FF6                     u2847:
  1724  000FF6  2EE8               	decfsz	wreg,f,c
  1725  000FF8  D7FE               	goto	u2847
  1726  000FFA  F000               	nop	
  1727  000FFC  0012               	return		;funcret
  1728  000FFE                     __end_of_initLCD:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           indf1	equ	0xFE7
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           postinc2	equ	0xFDE
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _SendLCD *****************
  1746 ;; Defined at:
  1747 ;;		line 27 in file "LCD.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  Byte            1    wreg     unsigned char 
  1750 ;;  type            1   18[COMRAM] unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  Byte            1   19[COMRAM] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;		None               void
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, status,0, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1762 ;;      Params:         1       0       0       0
  1763 ;;      Locals:         1       0       0       0
  1764 ;;      Temps:          0       0       0       0
  1765 ;;      Totals:         2       0       0       0
  1766 ;;Total ram usage:        2 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    3
  1769 ;; This function calls:
  1770 ;;		_LCDout
  1771 ;; This function is called by:
  1772 ;;		_initLCD
  1773 ;;		_SetLine
  1774 ;;		_LCD_String
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text4
  1779  0014BE                     __ptext4:
  1780                           	opt stack 0
  1781  0014BE                     _SendLCD:
  1782                           	opt stack 26
  1783                           
  1784                           ;incstack = 0
  1785                           ;SendLCD@Byte stored from wreg
  1786  0014BE  6E14               	movwf	SendLCD@Byte,c
  1787                           
  1788                           ;LCD.c: 30: LATAbits.LATA6=type;
  1789  0014C0  B013               	btfsc	SendLCD@type,0,c
  1790  0014C2  D002               	bra	u1275
  1791  0014C4  9C89               	bcf	3977,6,c	;volatile
  1792  0014C6  D001               	bra	u1276
  1793  0014C8                     u1275:
  1794  0014C8  8C89               	bsf	3977,6,c	;volatile
  1795  0014CA                     u1276:
  1796                           
  1797                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1798  0014CA  3814               	swapf	SendLCD@Byte,w,c
  1799  0014CC  0B0F               	andlw	15
  1800  0014CE  0B0F               	andlw	15
  1801  0014D0  EC3E  F007         	call	_LCDout
  1802                           
  1803                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1804  0014D4  0E06               	movlw	6
  1805  0014D6                     u2857:
  1806  0014D6  2EE8               	decfsz	wreg,f,c
  1807  0014D8  D7FE               	goto	u2857
  1808  0014DA  D000               	nop2		;nop
  1809                           
  1810                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1811  0014DC  5014               	movf	SendLCD@Byte,w,c
  1812  0014DE  0B0F               	andlw	15
  1813  0014E0  EC3E  F007         	call	_LCDout
  1814                           
  1815                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1816  0014E4  0E21               	movlw	33
  1817  0014E6                     u2867:
  1818  0014E6  2EE8               	decfsz	wreg,f,c
  1819  0014E8  D7FE               	goto	u2867
  1820  0014EA  F000               	nop	
  1821  0014EC  0012               	return		;funcret
  1822  0014EE                     __end_of_SendLCD:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           indf1	equ	0xFE7
  1831                           fsr1h	equ	0xFE2
  1832                           fsr1l	equ	0xFE1
  1833                           indf2	equ	0xFDF
  1834                           postinc2	equ	0xFDE
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _LCDout *****************
  1840 ;; Defined at:
  1841 ;;		line 14 in file "LCD.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  number          1    wreg     unsigned char 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  number          1   17[COMRAM] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1855 ;;      Params:         0       0       0       0
  1856 ;;      Locals:         1       0       0       0
  1857 ;;      Temps:          3       0       0       0
  1858 ;;      Totals:         4       0       0       0
  1859 ;;Total ram usage:        4 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    2
  1862 ;; This function calls:
  1863 ;;		_E_TOG
  1864 ;; This function is called by:
  1865 ;;		_SendLCD
  1866 ;;		_initLCD
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text5
  1871  000E7C                     __ptext5:
  1872                           	opt stack 0
  1873  000E7C                     _LCDout:
  1874                           	opt stack 26
  1875                           
  1876                           ;incstack = 0
  1877                           ;LCDout@number stored from wreg
  1878  000E7C  6E12               	movwf	LCDout@number,c
  1879                           
  1880                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1881  000E7E  5012               	movf	LCDout@number,w,c
  1882  000E80  6E0F               	movwf	??_LCDout& (0+255),c
  1883  000E82  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1884  000E84  0E07               	movlw	7
  1885  000E86                     u1195:
  1886  000E86  90D8               	bcf	status,0,c
  1887  000E88  360F               	rlcf	??_LCDout,f,c
  1888  000E8A  3610               	rlcf	??_LCDout+1,f,c
  1889  000E8C  2EE8               	decfsz	wreg,f,c
  1890  000E8E  D7FB               	goto	u1195
  1891  000E90  0E07               	movlw	7
  1892  000E92  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1893  000E94                     u1205:
  1894  000E94  3410               	rlcf	??_LCDout+1,w,c
  1895  000E96  3210               	rrcf	??_LCDout+1,f,c
  1896  000E98  320F               	rrcf	??_LCDout,f,c
  1897  000E9A  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1898  000E9C  D7FB               	goto	u1205
  1899  000E9E  460F               	rlncf	??_LCDout,f,c
  1900  000EA0  508B               	movf	3979,w,c	;volatile
  1901  000EA2  180F               	xorwf	??_LCDout,w,c
  1902  000EA4  0BFD               	andlw	-3
  1903  000EA6  180F               	xorwf	??_LCDout,w,c
  1904  000EA8  6E8B               	movwf	3979,c	;volatile
  1905                           
  1906                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1907  000EAA  5012               	movf	LCDout@number,w,c
  1908  000EAC  6E0F               	movwf	??_LCDout& (0+255),c
  1909  000EAE  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1910  000EB0  0E06               	movlw	6
  1911  000EB2                     u1215:
  1912  000EB2  90D8               	bcf	status,0,c
  1913  000EB4  360F               	rlcf	??_LCDout,f,c
  1914  000EB6  3610               	rlcf	??_LCDout+1,f,c
  1915  000EB8  2EE8               	decfsz	wreg,f,c
  1916  000EBA  D7FB               	goto	u1215
  1917  000EBC  0E07               	movlw	7
  1918  000EBE  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1919  000EC0                     u1225:
  1920  000EC0  3410               	rlcf	??_LCDout+1,w,c
  1921  000EC2  3210               	rrcf	??_LCDout+1,f,c
  1922  000EC4  320F               	rrcf	??_LCDout,f,c
  1923  000EC6  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1924  000EC8  D7FB               	goto	u1225
  1925  000ECA  460F               	rlncf	??_LCDout,f,c
  1926  000ECC  460F               	rlncf	??_LCDout,f,c
  1927  000ECE  508B               	movf	3979,w,c	;volatile
  1928  000ED0  180F               	xorwf	??_LCDout,w,c
  1929  000ED2  0BFB               	andlw	-5
  1930  000ED4  180F               	xorwf	??_LCDout,w,c
  1931  000ED6  6E8B               	movwf	3979,c	;volatile
  1932                           
  1933                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1934  000ED8  5012               	movf	LCDout@number,w,c
  1935  000EDA  6E0F               	movwf	??_LCDout& (0+255),c
  1936  000EDC  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1937  000EDE  0E05               	movlw	5
  1938  000EE0                     u1235:
  1939  000EE0  90D8               	bcf	status,0,c
  1940  000EE2  360F               	rlcf	??_LCDout,f,c
  1941  000EE4  3610               	rlcf	??_LCDout+1,f,c
  1942  000EE6  2EE8               	decfsz	wreg,f,c
  1943  000EE8  D7FB               	goto	u1235
  1944  000EEA  0E07               	movlw	7
  1945  000EEC  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1946  000EEE                     u1245:
  1947  000EEE  3410               	rlcf	??_LCDout+1,w,c
  1948  000EF0  3210               	rrcf	??_LCDout+1,f,c
  1949  000EF2  320F               	rrcf	??_LCDout,f,c
  1950  000EF4  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1951  000EF6  D7FB               	goto	u1245
  1952  000EF8  508C               	movf	3980,w,c	;volatile
  1953  000EFA  180F               	xorwf	??_LCDout,w,c
  1954  000EFC  0BFE               	andlw	-2
  1955  000EFE  180F               	xorwf	??_LCDout,w,c
  1956  000F00  6E8C               	movwf	3980,c	;volatile
  1957                           
  1958                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1959  000F02  5012               	movf	LCDout@number,w,c
  1960  000F04  6E0F               	movwf	??_LCDout& (0+255),c
  1961  000F06  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1962  000F08  3A0F               	swapf	??_LCDout,f,c
  1963  000F0A  3A10               	swapf	??_LCDout+1,f,c
  1964  000F0C  0EF0               	movlw	240
  1965  000F0E  1610               	andwf	??_LCDout+1,f,c
  1966  000F10  500F               	movf	??_LCDout,w,c
  1967  000F12  0B0F               	andlw	15
  1968  000F14  1210               	iorwf	??_LCDout+1,f,c
  1969  000F16  0EF0               	movlw	240
  1970  000F18  160F               	andwf	??_LCDout,f,c
  1971  000F1A  0E07               	movlw	7
  1972  000F1C  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1973  000F1E                     u1255:
  1974  000F1E  3410               	rlcf	??_LCDout+1,w,c
  1975  000F20  3210               	rrcf	??_LCDout+1,f,c
  1976  000F22  320F               	rrcf	??_LCDout,f,c
  1977  000F24  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1978  000F26  D7FB               	goto	u1255
  1979  000F28  460F               	rlncf	??_LCDout,f,c
  1980  000F2A  508C               	movf	3980,w,c	;volatile
  1981  000F2C  180F               	xorwf	??_LCDout,w,c
  1982  000F2E  0BFD               	andlw	-3
  1983  000F30  180F               	xorwf	??_LCDout,w,c
  1984  000F32  6E8C               	movwf	3980,c	;volatile
  1985                           
  1986                           ;LCD.c: 21: E_TOG();
  1987  000F34  ECBE  F00A         	call	_E_TOG	;wreg free
  1988                           
  1989                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1990  000F38  0E03               	movlw	3
  1991  000F3A                     u2877:
  1992  000F3A  2EE8               	decfsz	wreg,f,c
  1993  000F3C  D7FE               	goto	u2877
  1994  000F3E  F000               	nop	
  1995  000F40  0012               	return		;funcret
  1996  000F42                     __end_of_LCDout:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           indf1	equ	0xFE7
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _E_TOG *****************
  2014 ;; Defined at:
  2015 ;;		line 5 in file "LCD.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;		None
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;		None
  2020 ;; Return value:  Size  Location     Type
  2021 ;;		None               void
  2022 ;; Registers used:
  2023 ;;		wreg
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2029 ;;      Params:         0       0       0       0
  2030 ;;      Locals:         0       0       0       0
  2031 ;;      Temps:          0       0       0       0
  2032 ;;      Totals:         0       0       0       0
  2033 ;;Total ram usage:        0 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_LCDout
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text6
  2044  00157C                     __ptext6:
  2045                           	opt stack 0
  2046  00157C                     _E_TOG:
  2047                           	opt stack 26
  2048                           
  2049                           ;LCD.c: 8: LATCbits.LATC0=1;
  2050                           
  2051                           ;incstack = 0
  2052  00157C  808B               	bsf	3979,0,c	;volatile
  2053                           
  2054                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2055  00157E  0E03               	movlw	3
  2056  001580                     u2887:
  2057  001580  2EE8               	decfsz	wreg,f,c
  2058  001582  D7FE               	goto	u2887
  2059  001584  F000               	nop	
  2060                           
  2061                           ;LCD.c: 10: LATCbits.LATC0=0;
  2062  001586  908B               	bcf	3979,0,c	;volatile
  2063  001588  0012               	return		;funcret
  2064  00158A                     __end_of_E_TOG:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           intcon	equ	0xFF2
  2070                           postinc0	equ	0xFEE
  2071                           wreg	equ	0xFE8
  2072                           indf1	equ	0xFE7
  2073                           fsr1h	equ	0xFE2
  2074                           fsr1l	equ	0xFE1
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _initIR *****************
  2082 ;; Defined at:
  2083 ;;		line 30 in file "IR_Reading.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, status,2
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2097 ;;      Params:         0       0       0       0
  2098 ;;      Locals:         0       0       0       0
  2099 ;;      Temps:          0       0       0       0
  2100 ;;      Totals:         0       0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text7
  2112  00153A                     __ptext7:
  2113                           	opt stack 0
  2114  00153A                     _initIR:
  2115                           	opt stack 29
  2116                           
  2117                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2118                           
  2119                           ;incstack = 0
  2120  00153A  9489               	bcf	3977,2,c	;volatile
  2121                           
  2122                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2123  00153C  9689               	bcf	3977,3,c	;volatile
  2124                           
  2125                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2126  00153E  8492               	bsf	3986,2,c	;volatile
  2127                           
  2128                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2129  001540  8692               	bsf	3986,3,c	;volatile
  2130                           
  2131                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2132  001542  94B8               	bcf	4024,2,c	;volatile
  2133                           
  2134                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2135  001544  96B8               	bcf	4024,3,c	;volatile
  2136                           
  2137                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2138  001546  9CB8               	bcf	4024,6,c	;volatile
  2139                           
  2140                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2141  001548  9EB8               	bcf	4024,7,c	;volatile
  2142                           
  2143                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2144  00154A  0E06               	movlw	6
  2145  00154C  6E63               	movwf	3939,c	;volatile
  2146                           
  2147                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2148  00154E  0E06               	movlw	6
  2149  001550  6E62               	movwf	3938,c	;volatile
  2150                           
  2151                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2152  001552  9096               	bcf	3990,0,c	;volatile
  2153                           
  2154                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2155  001554  9296               	bcf	3990,1,c	;volatile
  2156                           
  2157                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2158  001556  0E59               	movlw	89
  2159  001558  6EB7               	movwf	4023,c	;volatile
  2160  00155A  0012               	return		;funcret
  2161  00155C                     __end_of_initIR:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           indf1	equ	0xFE7
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _fullSpeedBack *****************
  2179 ;; Defined at:
  2180 ;;		line 125 in file "dc_motor.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2183 ;;		 -> main@mL(9), 
  2184 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2185 ;;		 -> main@mR(9), 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;		None               void
  2190 ;; Registers used:
  2191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2197 ;;      Params:         4       0       0       0
  2198 ;;      Locals:         0       0       0       0
  2199 ;;      Temps:          0       0       0       0
  2200 ;;      Totals:         4       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    4
  2204 ;; This function calls:
  2205 ;;		_fullSpeedAhead
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text8
  2212  001426                     __ptext8:
  2213                           	opt stack 0
  2214  001426                     _fullSpeedBack:
  2215                           	opt stack 26
  2216                           
  2217                           ;dc_motor.c: 128: mL->direction=0;
  2218                           
  2219                           ;incstack = 0
  2220  001426  EE20 F001          	lfsr	2,1
  2221  00142A  502B               	movf	fullSpeedBack@mL,w,c
  2222  00142C  26D9               	addwf	fsr2l,f,c
  2223  00142E  502C               	movf	fullSpeedBack@mL+1,w,c
  2224  001430  22DA               	addwfc	fsr2h,f,c
  2225  001432  0E00               	movlw	0
  2226  001434  6EDF               	movwf	indf2,c
  2227                           
  2228                           ;dc_motor.c: 129: mR->direction=0;
  2229  001436  EE20 F001          	lfsr	2,1
  2230  00143A  502D               	movf	fullSpeedBack@mR,w,c
  2231  00143C  26D9               	addwf	fsr2l,f,c
  2232  00143E  502E               	movf	fullSpeedBack@mR+1,w,c
  2233  001440  22DA               	addwfc	fsr2h,f,c
  2234  001442  0E00               	movlw	0
  2235  001444  6EDF               	movwf	indf2,c
  2236                           
  2237                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2238  001446  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2239  00144A  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2240  00144E  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2241  001452  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2242  001456  EC59  F009         	call	_fullSpeedAhead	;wreg free
  2243  00145A  0012               	return		;funcret
  2244  00145C                     __end_of_fullSpeedBack:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           indf1	equ	0xFE7
  2253                           fsr1h	equ	0xFE2
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function _enableSensor *****************
  2262 ;; Defined at:
  2263 ;;		line 106 in file "IR_Reading.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  sensor          1    wreg     unsigned char 
  2266 ;;  status          1   14[COMRAM] unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  sensor          1   15[COMRAM] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;		None               void
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2278 ;;      Params:         1       0       0       0
  2279 ;;      Locals:         1       0       0       0
  2280 ;;      Temps:          0       0       0       0
  2281 ;;      Totals:         2       0       0       0
  2282 ;;Total ram usage:        2 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    1
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text9
  2293  0014EE                     __ptext9:
  2294                           	opt stack 0
  2295  0014EE                     _enableSensor:
  2296                           	opt stack 29
  2297                           
  2298                           ;incstack = 0
  2299                           ;enableSensor@sensor stored from wreg
  2300  0014EE  6E10               	movwf	enableSensor@sensor,c
  2301                           
  2302                           ;IR_Reading.c: 108: if (sensor==0){
  2303  0014F0  5010               	movf	enableSensor@sensor,w,c
  2304  0014F2  A4D8               	btfss	status,2,c
  2305  0014F4  D006               	goto	l2042
  2306                           
  2307                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2308  0014F6  B00F               	btfsc	enableSensor@status,0,c
  2309  0014F8  D002               	bra	u1365
  2310  0014FA  908D               	bcf	3981,0,c	;volatile
  2311  0014FC  D001               	bra	u1366
  2312  0014FE                     u1365:
  2313  0014FE  808D               	bsf	3981,0,c	;volatile
  2314  001500                     u1366:
  2315                           
  2316                           ;IR_Reading.c: 110: } else if (sensor==1){
  2317  001500  0012               	return	
  2318  001502                     l2042:
  2319  001502  0410               	decf	enableSensor@sensor,w,c
  2320  001504  A4D8               	btfss	status,2,c
  2321  001506  0012               	return	
  2322                           
  2323                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2324  001508  B00F               	btfsc	enableSensor@status,0,c
  2325  00150A  D002               	bra	u1385
  2326  00150C  928D               	bcf	3981,1,c	;volatile
  2327  00150E  D001               	bra	u1386
  2328  001510                     u1385:
  2329  001510  828D               	bsf	3981,1,c	;volatile
  2330  001512                     u1386:
  2331  001512  0012               	return	
  2332  001514                     __end_of_enableSensor:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf1	equ	0xFE7
  2341                           fsr1h	equ	0xFE2
  2342                           fsr1l	equ	0xFE1
  2343                           indf2	equ	0xFDF
  2344                           postinc2	equ	0xFDE
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _delay_s *****************
  2350 ;; Defined at:
  2351 ;;		line 10 in file "Movement.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  seconds         1    wreg     unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  seconds         1   15[COMRAM] unsigned char 
  2356 ;;  i               2   16[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;		None               void
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         0       0       0       0
  2367 ;;      Locals:         3       0       0       0
  2368 ;;      Temps:          1       0       0       0
  2369 ;;      Totals:         4       0       0       0
  2370 ;;Total ram usage:        4 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    1
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text10
  2381  0013B6                     __ptext10:
  2382                           	opt stack 0
  2383  0013B6                     _delay_s:
  2384                           	opt stack 29
  2385                           
  2386                           ;incstack = 0
  2387                           ;delay_s@seconds stored from wreg
  2388  0013B6  6E10               	movwf	delay_s@seconds,c
  2389                           
  2390                           ;Movement.c: 11: unsigned int i=0;
  2391  0013B8  0E00               	movlw	0
  2392  0013BA  6E12               	movwf	delay_s@i+1,c
  2393  0013BC  0E00               	movlw	0
  2394  0013BE  6E11               	movwf	delay_s@i,c
  2395                           
  2396                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2397  0013C0  0E00               	movlw	0
  2398  0013C2  6E12               	movwf	delay_s@i+1,c
  2399  0013C4  0E01               	movlw	1
  2400  0013C6  6E11               	movwf	delay_s@i,c
  2401  0013C8  D009               	goto	l2032
  2402  0013CA                     l2028:
  2403                           
  2404                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2405  0013CA  0E82               	movlw	130
  2406  0013CC  6E0F               	movwf	??_delay_s& (0+255),c
  2407  0013CE  0EDE               	movlw	222
  2408  0013D0                     u2897:
  2409  0013D0  2EE8               	decfsz	wreg,f,c
  2410  0013D2  D7FE               	goto	u2897
  2411  0013D4  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2412  0013D6  D7FC               	goto	u2897
  2413  0013D8  4A11               	infsnz	delay_s@i,f,c
  2414  0013DA  2A12               	incf	delay_s@i+1,f,c
  2415  0013DC                     l2032:
  2416  0013DC  5010               	movf	delay_s@seconds,w,c
  2417  0013DE  0D14               	mullw	20
  2418  0013E0  5011               	movf	delay_s@i,w,c
  2419  0013E2  5CF3               	subwf	prodl,w,c
  2420  0013E4  5012               	movf	delay_s@i+1,w,c
  2421  0013E6  58F4               	subwfb	prodh,w,c
  2422  0013E8  A0D8               	btfss	status,0,c
  2423  0013EA  0012               	return	
  2424  0013EC  D7EE               	goto	l2028
  2425  0013EE                     __end_of_delay_s:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           intcon	equ	0xFF2
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           indf1	equ	0xFE7
  2434                           fsr1h	equ	0xFE2
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _VerifySignal *****************
  2443 ;; Defined at:
  2444 ;;		line 56 in file "RFID_Reader.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  2447 ;;		 -> ReceivedString(16), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  hexByte         2   23[COMRAM] unsigned int 
  2450 ;;  i               1   25[COMRAM] unsigned char 
  2451 ;;  checksum        1   22[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      unsigned char 
  2454 ;; Registers used:
  2455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2461 ;;      Params:         2       0       0       0
  2462 ;;      Locals:         4       0       0       0
  2463 ;;      Temps:          6       0       0       0
  2464 ;;      Totals:        12       0       0       0
  2465 ;;Total ram usage:       12 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           	psect	text11
  2476  000FFE                     __ptext11:
  2477                           	opt stack 0
  2478  000FFE                     _VerifySignal:
  2479                           	opt stack 29
  2480                           
  2481                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  2482                           
  2483                           ;incstack = 0
  2484  000FFE  0E00               	movlw	0
  2485  001000  6E17               	movwf	VerifySignal@checksum,c
  2486                           
  2487                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  2488  001002  0E00               	movlw	0
  2489  001004  6E19               	movwf	VerifySignal@hexByte+1,c
  2490  001006  0E00               	movlw	0
  2491  001008  6E18               	movwf	VerifySignal@hexByte,c
  2492                           
  2493                           ;RFID_Reader.c: 59: unsigned char i=0;
  2494  00100A  0E00               	movlw	0
  2495  00100C  6E1A               	movwf	VerifySignal@i,c
  2496                           
  2497                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  2498  00100E  EE20 F004          	lfsr	2,4
  2499  001012  500F               	movf	VerifySignal@Signal,w,c
  2500  001014  26D9               	addwf	fsr2l,f,c
  2501  001016  5010               	movf	VerifySignal@Signal+1,w,c
  2502  001018  22DA               	addwfc	fsr2h,f,c
  2503  00101A  50DF               	movf	indf2,w,c
  2504  00101C  6E11               	movwf	??_VerifySignal& (0+255),c
  2505  00101E  EE20 F003          	lfsr	2,3
  2506  001022  500F               	movf	VerifySignal@Signal,w,c
  2507  001024  26D9               	addwf	fsr2l,f,c
  2508  001026  5010               	movf	VerifySignal@Signal+1,w,c
  2509  001028  22DA               	addwfc	fsr2h,f,c
  2510  00102A  50DF               	movf	indf2,w,c
  2511  00102C  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  2512  00102E  5012               	movf	??_VerifySignal+1,w,c
  2513  001030  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2514  001032  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  2515  001034  5011               	movf	??_VerifySignal,w,c
  2516  001036  2413               	addwf	??_VerifySignal+2,w,c
  2517  001038  6E18               	movwf	VerifySignal@hexByte,c
  2518  00103A  0E00               	movlw	0
  2519  00103C  2014               	addwfc	??_VerifySignal+3,w,c
  2520  00103E  6E19               	movwf	VerifySignal@hexByte+1,c
  2521                           
  2522                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2523  001040  EE20 F002          	lfsr	2,2
  2524  001044  500F               	movf	VerifySignal@Signal,w,c
  2525  001046  26D9               	addwf	fsr2l,f,c
  2526  001048  5010               	movf	VerifySignal@Signal+1,w,c
  2527  00104A  22DA               	addwfc	fsr2h,f,c
  2528  00104C  50DF               	movf	indf2,w,c
  2529  00104E  1818               	xorwf	VerifySignal@hexByte,w,c
  2530  001050  6E17               	movwf	VerifySignal@checksum,c
  2531                           
  2532                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  2533  001052  0E05               	movlw	5
  2534  001054  6E1A               	movwf	VerifySignal@i,c
  2535  001056                     l2348:
  2536  001056  0E09               	movlw	9
  2537  001058  641A               	cpfsgt	VerifySignal@i,c
  2538  00105A  D001               	goto	l2352
  2539  00105C  D028               	goto	l2360
  2540  00105E                     l2352:
  2541                           
  2542                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  2543  00105E  501A               	movf	VerifySignal@i,w,c
  2544  001060  6E11               	movwf	??_VerifySignal& (0+255),c
  2545  001062  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  2546  001064  0E01               	movlw	1
  2547  001066  2611               	addwf	??_VerifySignal,f,c
  2548  001068  0E00               	movlw	0
  2549  00106A  2212               	addwfc	??_VerifySignal+1,f,c
  2550  00106C  5011               	movf	??_VerifySignal,w,c
  2551  00106E  240F               	addwf	VerifySignal@Signal,w,c
  2552  001070  6ED9               	movwf	fsr2l,c
  2553  001072  5012               	movf	??_VerifySignal+1,w,c
  2554  001074  2010               	addwfc	VerifySignal@Signal+1,w,c
  2555  001076  6EDA               	movwf	fsr2h,c
  2556  001078  50DF               	movf	indf2,w,c
  2557  00107A  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  2558  00107C  501A               	movf	VerifySignal@i,w,c
  2559  00107E  0D01               	mullw	1
  2560  001080  50F3               	movf	prodl,w,c
  2561  001082  240F               	addwf	VerifySignal@Signal,w,c
  2562  001084  6ED9               	movwf	fsr2l,c
  2563  001086  50F4               	movf	prodh,w,c
  2564  001088  2010               	addwfc	VerifySignal@Signal+1,w,c
  2565  00108A  6EDA               	movwf	fsr2h,c
  2566  00108C  50DF               	movf	indf2,w,c
  2567  00108E  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2568  001090  5014               	movf	??_VerifySignal+3,w,c
  2569  001092  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  2570  001094  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  2571  001096  5013               	movf	??_VerifySignal+2,w,c
  2572  001098  2415               	addwf	??_VerifySignal+4,w,c
  2573  00109A  6E18               	movwf	VerifySignal@hexByte,c
  2574  00109C  0E00               	movlw	0
  2575  00109E  2016               	addwfc	??_VerifySignal+5,w,c
  2576  0010A0  6E19               	movwf	VerifySignal@hexByte+1,c
  2577                           
  2578                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  2579  0010A2  5017               	movf	VerifySignal@checksum,w,c
  2580  0010A4  1818               	xorwf	VerifySignal@hexByte,w,c
  2581  0010A6  6E17               	movwf	VerifySignal@checksum,c
  2582  0010A8  0E02               	movlw	2
  2583  0010AA  261A               	addwf	VerifySignal@i,f,c
  2584  0010AC  D7D4               	goto	l2348
  2585  0010AE                     l2360:
  2586                           
  2587                           ;RFID_Reader.c: 69: }
  2588                           ;RFID_Reader.c: 72: return 1;
  2589  0010AE  0E01               	movlw	1
  2590  0010B0  0012               	return	
  2591  0010B2                     __end_of_VerifySignal:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           indf1	equ	0xFE7
  2600                           fsr1h	equ	0xFE2
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _ScanWithRange *****************
  2609 ;; Defined at:
  2610 ;;		line 101 in file "Movement.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2613 ;;		 -> main@mL(9), 
  2614 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2615 ;;		 -> main@mR(9), 
  2616 ;;  tenth_second    1   50[COMRAM] unsigned char 
  2617 ;;  MoveTime        2   51[COMRAM] PTR unsigned char 
  2618 ;;		 -> main@MoveTime(100), 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  SensorResult    4   17[BANK0 ] unsigned int [2]
  2621 ;;  SensorResult    4   13[BANK0 ] unsigned int [2]
  2622 ;;  SensorResult    4    9[BANK0 ] unsigned int [2]
  2623 ;;  DirectionFou    2    7[BANK0 ] const unsigned int 
  2624 ;;  DirectionFou    2    5[BANK0 ] const unsigned int 
  2625 ;;  ClearSignalT    2    3[BANK0 ] const unsigned int 
  2626 ;;  ResultFalseR    1    2[BANK0 ] unsigned char 
  2627 ;;  ResultFalseC    1    1[BANK0 ] unsigned char 
  2628 ;;  ResultFalseL    1    0[BANK0 ] unsigned char 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      unsigned char 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2638 ;;      Params:         7       0       0       0
  2639 ;;      Locals:         0      21       0       0
  2640 ;;      Temps:          2       0       0       0
  2641 ;;      Totals:         9      21       0       0
  2642 ;;Total ram usage:       30 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    5
  2645 ;; This function calls:
  2646 ;;		___awdiv
  2647 ;;		_delay_tenth_s
  2648 ;;		_grabLeftIR
  2649 ;;		_grabRightIR
  2650 ;;		_stop
  2651 ;;		_turnLeft
  2652 ;;		_turnRight
  2653 ;; This function is called by:
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text12
  2659  0000B2                     __ptext12:
  2660                           	opt stack 0
  2661  0000B2                     _ScanWithRange:
  2662                           	opt stack 25
  2663                           
  2664                           ;Movement.c: 104: unsigned int SensorResultL[2]={0,0};
  2665                           
  2666                           ;incstack = 0
  2667  0000B2  C045  F069         	movff	ScanWithRange@F3719,ScanWithRange@SensorResultL
  2668  0000B6  C046  F06A         	movff	ScanWithRange@F3719+1,ScanWithRange@SensorResultL+1
  2669  0000BA  C047  F06B         	movff	ScanWithRange@F3719+2,ScanWithRange@SensorResultL+2
  2670  0000BE  C048  F06C         	movff	ScanWithRange@F3719+3,ScanWithRange@SensorResultL+3
  2671                           
  2672                           ;Movement.c: 105: unsigned int SensorResultC[2]={0,0};
  2673  0000C2  C049  F06D         	movff	ScanWithRange@F3721,ScanWithRange@SensorResultC
  2674  0000C6  C04A  F06E         	movff	ScanWithRange@F3721+1,ScanWithRange@SensorResultC+1
  2675  0000CA  C04B  F06F         	movff	ScanWithRange@F3721+2,ScanWithRange@SensorResultC+2
  2676  0000CE  C04C  F070         	movff	ScanWithRange@F3721+3,ScanWithRange@SensorResultC+3
  2677                           
  2678                           ;Movement.c: 106: unsigned int SensorResultR[2]={0,0};
  2679  0000D2  C075  F071         	movff	ScanWithRange@F3723,ScanWithRange@SensorResultR
  2680  0000D6  C076  F072         	movff	ScanWithRange@F3723+1,ScanWithRange@SensorResultR+1
  2681  0000DA  C077  F073         	movff	ScanWithRange@F3723+2,ScanWithRange@SensorResultR+2
  2682  0000DE  C078  F074         	movff	ScanWithRange@F3723+3,ScanWithRange@SensorResultR+3
  2683                           
  2684                           ;Movement.c: 107: unsigned char ResultFalseL=0;
  2685  0000E2  0E00               	movlw	0
  2686  0000E4  0100               	movlb	0	; () banked
  2687  0000E6  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2688                           
  2689                           ;Movement.c: 108: unsigned char ResultFalseC=0;
  2690  0000E8  0E00               	movlw	0
  2691  0000EA  0100               	movlb	0	; () banked
  2692  0000EC  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2693                           
  2694                           ;Movement.c: 109: unsigned char ResultFalseR=0;
  2695  0000EE  0E00               	movlw	0
  2696  0000F0  0100               	movlb	0	; () banked
  2697  0000F2  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2698                           
  2699                           ;Movement.c: 112: const unsigned int ClearSignalTolerance=200;
  2700  0000F4  0E00               	movlw	0
  2701  0000F6  0100               	movlb	0	; () banked
  2702  0000F8  6F64               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  2703  0000FA  0EC8               	movlw	200
  2704  0000FC  6F63               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  2705                           
  2706                           ;Movement.c: 113: const unsigned int DirectionFoundLimit=800;
  2707  0000FE  0E03               	movlw	3
  2708  000100  0100               	movlb	0	; () banked
  2709  000102  6F66               	movwf	(ScanWithRange@DirectionFoundLimit+1)& (0+255),b
  2710  000104  0E20               	movlw	32
  2711  000106  6F65               	movwf	ScanWithRange@DirectionFoundLimit& (0+255),b
  2712                           
  2713                           ;Movement.c: 114: const unsigned int DirectionFoundTolerance=600;
  2714  000108  0E02               	movlw	2
  2715  00010A  0100               	movlb	0	; () banked
  2716  00010C  6F68               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  2717  00010E  0E58               	movlw	88
  2718  000110  6F67               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;Movement.c: 121: stop(mL,mR);
  2722  000112  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2723  000116  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2724  00011A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2725  00011E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2726  000122  EC59  F008         	call	_stop	;wreg free
  2727                           
  2728                           ;Movement.c: 122: SensorResultC[0]=grabLeftIR();
  2729  000126  EC1E  F009         	call	_grabLeftIR	;wreg free
  2730  00012A  C00F  F06D         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2731  00012E  C010  F06E         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2732                           
  2733                           ;Movement.c: 123: SensorResultC[1]=grabRightIR();
  2734  000132  ECE3  F008         	call	_grabRightIR	;wreg free
  2735  000136  C00F  F06F         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2736  00013A  C010  F070         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2737                           
  2738                           ;Movement.c: 127: CAP1BUFH=0;
  2739  00013E  0E00               	movlw	0
  2740  000140  6E69               	movwf	3945,c	;volatile
  2741                           
  2742                           ;Movement.c: 128: CAP1BUFL=0;
  2743  000142  0E00               	movlw	0
  2744  000144  6E68               	movwf	3944,c	;volatile
  2745                           
  2746                           ;Movement.c: 129: CAP2BUFH=0;
  2747  000146  0E00               	movlw	0
  2748  000148  6E67               	movwf	3943,c	;volatile
  2749                           
  2750                           ;Movement.c: 130: CAP2BUFL=0;
  2751  00014A  0E00               	movlw	0
  2752  00014C  6E66               	movwf	3942,c	;volatile
  2753                           
  2754                           ;Movement.c: 133: turnLeft(mL,mR);
  2755  00014E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2756  000152  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2757  000156  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2758  00015A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2759  00015E  ECB6  F009         	call	_turnLeft	;wreg free
  2760                           
  2761                           ;Movement.c: 134: delay_tenth_s(tenth_seconds);
  2762  000162  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2763  000164  ECF7  F009         	call	_delay_tenth_s
  2764                           
  2765                           ;Movement.c: 135: MoveTime += tenth_seconds;
  2766  000168  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2767  00016A  0D01               	mullw	1
  2768  00016C  50F3               	movf	prodl,w,c
  2769  00016E  2634               	addwf	ScanWithRange@MoveTime,f,c
  2770  000170  50F4               	movf	prodh,w,c
  2771  000172  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2772                           
  2773                           ;Movement.c: 137: stop(mL,mR);
  2774  000174  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2775  000178  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2776  00017C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2777  000180  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2778  000184  EC59  F008         	call	_stop	;wreg free
  2779                           
  2780                           ;Movement.c: 138: SensorResultL[0]=grabLeftIR();
  2781  000188  EC1E  F009         	call	_grabLeftIR	;wreg free
  2782  00018C  C00F  F069         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2783  000190  C010  F06A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2784                           
  2785                           ;Movement.c: 139: SensorResultL[1]=grabRightIR();
  2786  000194  ECE3  F008         	call	_grabRightIR	;wreg free
  2787  000198  C00F  F06B         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2788  00019C  C010  F06C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2789                           
  2790                           ;Movement.c: 143: CAP1BUFH=0;
  2791  0001A0  0E00               	movlw	0
  2792  0001A2  6E69               	movwf	3945,c	;volatile
  2793                           
  2794                           ;Movement.c: 144: CAP1BUFL=0;
  2795  0001A4  0E00               	movlw	0
  2796  0001A6  6E68               	movwf	3944,c	;volatile
  2797                           
  2798                           ;Movement.c: 145: CAP2BUFH=0;
  2799  0001A8  0E00               	movlw	0
  2800  0001AA  6E67               	movwf	3943,c	;volatile
  2801                           
  2802                           ;Movement.c: 146: CAP2BUFL=0;
  2803  0001AC  0E00               	movlw	0
  2804  0001AE  6E66               	movwf	3942,c	;volatile
  2805                           
  2806                           ;Movement.c: 149: turnRight(mL,mR);
  2807  0001B0  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2808  0001B4  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2809  0001B8  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2810  0001BC  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2811  0001C0  EC91  F009         	call	_turnRight	;wreg free
  2812                           
  2813                           ;Movement.c: 150: delay_tenth_s(2*tenth_seconds);
  2814  0001C4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2815  0001C6  0D02               	mullw	2
  2816  0001C8  50F3               	movf	prodl,w,c
  2817  0001CA  ECF7  F009         	call	_delay_tenth_s
  2818                           
  2819                           ;Movement.c: 151: MoveTime -= 2*tenth_seconds;
  2820  0001CE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2821  0001D0  0D02               	mullw	2
  2822  0001D2  50F3               	movf	prodl,w,c
  2823  0001D4  5E34               	subwf	ScanWithRange@MoveTime,f,c
  2824  0001D6  50F4               	movf	prodh,w,c
  2825  0001D8  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  2826                           
  2827                           ;Movement.c: 153: stop(mL,mR);
  2828  0001DA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2829  0001DE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2830  0001E2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2831  0001E6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2832  0001EA  EC59  F008         	call	_stop	;wreg free
  2833                           
  2834                           ;Movement.c: 154: SensorResultR[0]=grabLeftIR();
  2835  0001EE  EC1E  F009         	call	_grabLeftIR	;wreg free
  2836  0001F2  C00F  F071         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2837  0001F6  C010  F072         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2838                           
  2839                           ;Movement.c: 155: SensorResultR[1]=grabRightIR();
  2840  0001FA  ECE3  F008         	call	_grabRightIR	;wreg free
  2841  0001FE  C00F  F073         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2842  000202  C010  F074         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2843                           
  2844                           ;Movement.c: 159: CAP1BUFH=0;
  2845  000206  0E00               	movlw	0
  2846  000208  6E69               	movwf	3945,c	;volatile
  2847                           
  2848                           ;Movement.c: 160: CAP1BUFL=0;
  2849  00020A  0E00               	movlw	0
  2850  00020C  6E68               	movwf	3944,c	;volatile
  2851                           
  2852                           ;Movement.c: 161: CAP2BUFH=0;
  2853  00020E  0E00               	movlw	0
  2854  000210  6E67               	movwf	3943,c	;volatile
  2855                           
  2856                           ;Movement.c: 162: CAP2BUFL=0;
  2857  000212  0E00               	movlw	0
  2858  000214  6E66               	movwf	3942,c	;volatile
  2859                           
  2860                           ;Movement.c: 173: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  2861  000216  0100               	movlb	0	; () banked
  2862  000218  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2863  00021A  0100               	movlb	0	; () banked
  2864  00021C  256B               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2865  00021E  6E36               	movwf	??_ScanWithRange& (0+255),c
  2866  000220  0100               	movlb	0	; () banked
  2867  000222  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2868  000224  0100               	movlb	0	; () banked
  2869  000226  216C               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2870  000228  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2871  00022A  0100               	movlb	0	; () banked
  2872  00022C  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2873  00022E  5C36               	subwf	??_ScanWithRange,w,c
  2874  000230  0100               	movlb	0	; () banked
  2875  000232  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2876  000234  5837               	subwfb	??_ScanWithRange+1,w,c
  2877  000236  B0D8               	btfsc	status,0,c
  2878  000238  D00D               	goto	l2772
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;Movement.c: 174: SensorResultL[0]=0;
  2882  00023A  0E00               	movlw	0
  2883  00023C  0100               	movlb	0	; () banked
  2884  00023E  6F6A               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2885  000240  0E00               	movlw	0
  2886  000242  6F69               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2887                           
  2888                           ;Movement.c: 175: SensorResultL[1]=0;
  2889  000244  0E00               	movlw	0
  2890  000246  0100               	movlb	0	; () banked
  2891  000248  6F6C               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2892  00024A  0E00               	movlw	0
  2893  00024C  6F6B               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2894                           
  2895                           ;Movement.c: 176: ResultFalseL=1;
  2896  00024E  0E01               	movlw	1
  2897  000250  0100               	movlb	0	; () banked
  2898  000252  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2899  000254                     l2772:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;Movement.c: 177: }
  2903                           ;Movement.c: 178: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  2904  000254  0100               	movlb	0	; () banked
  2905  000256  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2906  000258  0100               	movlb	0	; () banked
  2907  00025A  256F               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2908  00025C  6E36               	movwf	??_ScanWithRange& (0+255),c
  2909  00025E  0100               	movlb	0	; () banked
  2910  000260  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2911  000262  0100               	movlb	0	; () banked
  2912  000264  2170               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2913  000266  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2914  000268  0100               	movlb	0	; () banked
  2915  00026A  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2916  00026C  5C36               	subwf	??_ScanWithRange,w,c
  2917  00026E  0100               	movlb	0	; () banked
  2918  000270  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2919  000272  5837               	subwfb	??_ScanWithRange+1,w,c
  2920  000274  B0D8               	btfsc	status,0,c
  2921  000276  D00D               	goto	l2776
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;Movement.c: 179: SensorResultC[0]=0;
  2925  000278  0E00               	movlw	0
  2926  00027A  0100               	movlb	0	; () banked
  2927  00027C  6F6E               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2928  00027E  0E00               	movlw	0
  2929  000280  6F6D               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2930                           
  2931                           ;Movement.c: 180: SensorResultC[1]=0;
  2932  000282  0E00               	movlw	0
  2933  000284  0100               	movlb	0	; () banked
  2934  000286  6F70               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2935  000288  0E00               	movlw	0
  2936  00028A  6F6F               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2937                           
  2938                           ;Movement.c: 181: ResultFalseC=1;
  2939  00028C  0E01               	movlw	1
  2940  00028E  0100               	movlb	0	; () banked
  2941  000290  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2942  000292                     l2776:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;Movement.c: 182: }
  2946                           ;Movement.c: 183: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2947  000292  0100               	movlb	0	; () banked
  2948  000294  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2949  000296  0100               	movlb	0	; () banked
  2950  000298  2573               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2951  00029A  6E36               	movwf	??_ScanWithRange& (0+255),c
  2952  00029C  0100               	movlb	0	; () banked
  2953  00029E  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2954  0002A0  0100               	movlb	0	; () banked
  2955  0002A2  2174               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2956  0002A4  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2957  0002A6  0100               	movlb	0	; () banked
  2958  0002A8  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2959  0002AA  5C36               	subwf	??_ScanWithRange,w,c
  2960  0002AC  0100               	movlb	0	; () banked
  2961  0002AE  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2962  0002B0  5837               	subwfb	??_ScanWithRange+1,w,c
  2963  0002B2  B0D8               	btfsc	status,0,c
  2964  0002B4  D00D               	goto	l2780
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;Movement.c: 184: SensorResultR[0]=0;
  2968  0002B6  0E00               	movlw	0
  2969  0002B8  0100               	movlb	0	; () banked
  2970  0002BA  6F72               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2971  0002BC  0E00               	movlw	0
  2972  0002BE  6F71               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2973                           
  2974                           ;Movement.c: 185: SensorResultR[1]=0;
  2975  0002C0  0E00               	movlw	0
  2976  0002C2  0100               	movlb	0	; () banked
  2977  0002C4  6F74               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2978  0002C6  0E00               	movlw	0
  2979  0002C8  6F73               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2980                           
  2981                           ;Movement.c: 186: ResultFalseR=1;
  2982  0002CA  0E01               	movlw	1
  2983  0002CC  0100               	movlb	0	; () banked
  2984  0002CE  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2985  0002D0                     l2780:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;Movement.c: 187: }
  2989                           ;Movement.c: 189: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2990  0002D0  0100               	movlb	0	; () banked
  2991  0002D2  5161               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2992  0002D4  C060  F036         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2993  0002D8  6A37               	clrf	(??_ScanWithRange+1)& (0+255),c
  2994  0002DA  2636               	addwf	??_ScanWithRange,f,c
  2995  0002DC  0E00               	movlw	0
  2996  0002DE  2237               	addwfc	??_ScanWithRange+1,f,c
  2997  0002E0  0100               	movlb	0	; () banked
  2998  0002E2  5162               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2999  0002E4  2636               	addwf	??_ScanWithRange,f,c
  3000  0002E6  0E00               	movlw	0
  3001  0002E8  2237               	addwfc	??_ScanWithRange+1,f,c
  3002  0002EA  0E03               	movlw	3
  3003  0002EC  1836               	xorwf	??_ScanWithRange,w,c
  3004  0002EE  1037               	iorwf	??_ScanWithRange+1,w,c
  3005  0002F0  A4D8               	btfss	status,2,c
  3006  0002F2  D021               	goto	l2796
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;Movement.c: 191: turnLeft(mL,mR);
  3010  0002F4  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3011  0002F8  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3012  0002FC  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3013  000300  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3014  000304  ECB6  F009         	call	_turnLeft	;wreg free
  3015                           
  3016                           ;Movement.c: 192: delay_tenth_s(5*tenth_seconds);
  3017  000308  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3018  00030A  0D05               	mullw	5
  3019  00030C  50F3               	movf	prodl,w,c
  3020  00030E  ECF7  F009         	call	_delay_tenth_s
  3021                           
  3022                           ;Movement.c: 193: MoveTime += 5*tenth_seconds;
  3023  000312  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3024  000314  0D05               	mullw	5
  3025  000316  50F3               	movf	prodl,w,c
  3026  000318  2634               	addwf	ScanWithRange@MoveTime,f,c
  3027  00031A  50F4               	movf	prodh,w,c
  3028  00031C  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3029                           
  3030                           ;Movement.c: 194: stop(mL,mR);
  3031  00031E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3032  000322  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3033  000326  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3034  00032A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3035  00032E  EC59  F008         	call	_stop	;wreg free
  3036                           
  3037                           ;Movement.c: 195: return 3;
  3038  000332  0E03               	movlw	3
  3039  000334  0012               	return	
  3040  000336                     l2796:
  3041                           
  3042                           ;Movement.c: 198: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  3043                           ;Movement.c: 199: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  3044                           ;Movement.c: 200: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  3045  000336  0100               	movlb	0	; () banked
  3046  000338  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3047  00033A  0100               	movlb	0	; () banked
  3048  00033C  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3049  00033E  0100               	movlb	0	; () banked
  3050  000340  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3051  000342  0100               	movlb	0	; () banked
  3052  000344  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3053  000346  B0D8               	btfsc	status,0,c
  3054  000348  D059               	goto	l2818
  3055                           
  3056                           ; BSR set to: 0
  3057  00034A  0100               	movlb	0	; () banked
  3058  00034C  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3059  00034E  0100               	movlb	0	; () banked
  3060  000350  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3061  000352  0100               	movlb	0	; () banked
  3062  000354  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3063  000356  0100               	movlb	0	; () banked
  3064  000358  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3065  00035A  B0D8               	btfsc	status,0,c
  3066  00035C  D04F               	goto	l2818
  3067                           
  3068                           ; BSR set to: 0
  3069  00035E  EE20  F06B         	lfsr	2,ScanWithRange@SensorResultL+2
  3070  000362  CFDE F036          	movff	postinc2,??_ScanWithRange
  3071  000366  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3072  00036A  1E36               	comf	??_ScanWithRange,f,c
  3073  00036C  1E37               	comf	??_ScanWithRange+1,f,c
  3074  00036E  4A36               	infsnz	??_ScanWithRange,f,c
  3075  000370  2A37               	incf	??_ScanWithRange+1,f,c
  3076  000372  0100               	movlb	0	; () banked
  3077  000374  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3078  000376  2636               	addwf	??_ScanWithRange,f,c
  3079  000378  0100               	movlb	0	; () banked
  3080  00037A  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3081  00037C  2237               	addwfc	??_ScanWithRange+1,f,c
  3082  00037E  0100               	movlb	0	; () banked
  3083  000380  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3084  000382  5C36               	subwf	??_ScanWithRange,w,c
  3085  000384  0100               	movlb	0	; () banked
  3086  000386  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3087  000388  5837               	subwfb	??_ScanWithRange+1,w,c
  3088  00038A  A0D8               	btfss	status,0,c
  3089  00038C  D016               	goto	l2804
  3090                           
  3091                           ; BSR set to: 0
  3092  00038E  C069  F036         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  3093  000392  C06A  F037         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  3094  000396  1E36               	comf	??_ScanWithRange,f,c
  3095  000398  1E37               	comf	??_ScanWithRange+1,f,c
  3096  00039A  4A36               	infsnz	??_ScanWithRange,f,c
  3097  00039C  2A37               	incf	??_ScanWithRange+1,f,c
  3098  00039E  0100               	movlb	0	; () banked
  3099  0003A0  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3100  0003A2  2636               	addwf	??_ScanWithRange,f,c
  3101  0003A4  0100               	movlb	0	; () banked
  3102  0003A6  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3103  0003A8  2237               	addwfc	??_ScanWithRange+1,f,c
  3104  0003AA  0100               	movlb	0	; () banked
  3105  0003AC  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3106  0003AE  5C36               	subwf	??_ScanWithRange,w,c
  3107  0003B0  0100               	movlb	0	; () banked
  3108  0003B2  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3109  0003B4  5837               	subwfb	??_ScanWithRange+1,w,c
  3110  0003B6  B0D8               	btfsc	status,0,c
  3111  0003B8  D021               	goto	l2818
  3112  0003BA                     l2804:
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;Movement.c: 202: turnLeft(mL,mR);
  3116  0003BA  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3117  0003BE  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3118  0003C2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3119  0003C6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3120  0003CA  ECB6  F009         	call	_turnLeft	;wreg free
  3121                           
  3122                           ;Movement.c: 203: delay_tenth_s(2*(tenth_seconds));
  3123  0003CE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3124  0003D0  0D02               	mullw	2
  3125  0003D2  50F3               	movf	prodl,w,c
  3126  0003D4  ECF7  F009         	call	_delay_tenth_s
  3127                           
  3128                           ;Movement.c: 204: MoveTime += 2*tenth_seconds;
  3129  0003D8  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3130  0003DA  0D02               	mullw	2
  3131  0003DC  50F3               	movf	prodl,w,c
  3132  0003DE  2634               	addwf	ScanWithRange@MoveTime,f,c
  3133  0003E0  50F4               	movf	prodh,w,c
  3134  0003E2  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3135                           
  3136                           ;Movement.c: 205: stop(mL,mR);
  3137  0003E4  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3138  0003E8  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3139  0003EC  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3140  0003F0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3141  0003F4  EC59  F008         	call	_stop	;wreg free
  3142  0003F8                     l2812:
  3143                           
  3144                           ;Movement.c: 206: return 2;
  3145  0003F8  0E02               	movlw	2
  3146  0003FA  0012               	return	
  3147  0003FC                     l2818:
  3148                           
  3149                           ;Movement.c: 208: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3150                           ;Movement.c: 209: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3151  0003FC  0100               	movlb	0	; () banked
  3152  0003FE  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3153  000400  0100               	movlb	0	; () banked
  3154  000402  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3155  000404  0100               	movlb	0	; () banked
  3156  000406  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3157  000408  0100               	movlb	0	; () banked
  3158  00040A  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3159  00040C  B0D8               	btfsc	status,0,c
  3160  00040E  D056               	goto	l2840
  3161                           
  3162                           ; BSR set to: 0
  3163  000410  0100               	movlb	0	; () banked
  3164  000412  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3165  000414  0100               	movlb	0	; () banked
  3166  000416  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3167  000418  0100               	movlb	0	; () banked
  3168  00041A  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3169  00041C  0100               	movlb	0	; () banked
  3170  00041E  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3171  000420  B0D8               	btfsc	status,0,c
  3172  000422  D04C               	goto	l2840
  3173                           
  3174                           ; BSR set to: 0
  3175  000424  EE20  F06F         	lfsr	2,ScanWithRange@SensorResultC+2
  3176  000428  CFDE F036          	movff	postinc2,??_ScanWithRange
  3177  00042C  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3178  000430  1E36               	comf	??_ScanWithRange,f,c
  3179  000432  1E37               	comf	??_ScanWithRange+1,f,c
  3180  000434  4A36               	infsnz	??_ScanWithRange,f,c
  3181  000436  2A37               	incf	??_ScanWithRange+1,f,c
  3182  000438  0100               	movlb	0	; () banked
  3183  00043A  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3184  00043C  2636               	addwf	??_ScanWithRange,f,c
  3185  00043E  0100               	movlb	0	; () banked
  3186  000440  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3187  000442  2237               	addwfc	??_ScanWithRange+1,f,c
  3188  000444  0100               	movlb	0	; () banked
  3189  000446  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3190  000448  5C36               	subwf	??_ScanWithRange,w,c
  3191  00044A  0100               	movlb	0	; () banked
  3192  00044C  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3193  00044E  5837               	subwfb	??_ScanWithRange+1,w,c
  3194  000450  A0D8               	btfss	status,0,c
  3195  000452  D016               	goto	l2826
  3196                           
  3197                           ; BSR set to: 0
  3198  000454  C06D  F036         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3199  000458  C06E  F037         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3200  00045C  1E36               	comf	??_ScanWithRange,f,c
  3201  00045E  1E37               	comf	??_ScanWithRange+1,f,c
  3202  000460  4A36               	infsnz	??_ScanWithRange,f,c
  3203  000462  2A37               	incf	??_ScanWithRange+1,f,c
  3204  000464  0100               	movlb	0	; () banked
  3205  000466  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3206  000468  2636               	addwf	??_ScanWithRange,f,c
  3207  00046A  0100               	movlb	0	; () banked
  3208  00046C  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3209  00046E  2237               	addwfc	??_ScanWithRange+1,f,c
  3210  000470  0100               	movlb	0	; () banked
  3211  000472  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3212  000474  5C36               	subwf	??_ScanWithRange,w,c
  3213  000476  0100               	movlb	0	; () banked
  3214  000478  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3215  00047A  5837               	subwfb	??_ScanWithRange+1,w,c
  3216  00047C  B0D8               	btfsc	status,0,c
  3217  00047E  D01E               	goto	l2840
  3218  000480                     l2826:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;Movement.c: 211: turnLeft(mL,mR);
  3222  000480  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3223  000484  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3224  000488  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3225  00048C  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3226  000490  ECB6  F009         	call	_turnLeft	;wreg free
  3227                           
  3228                           ;Movement.c: 212: delay_tenth_s(tenth_seconds);
  3229  000494  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3230  000496  ECF7  F009         	call	_delay_tenth_s
  3231                           
  3232                           ;Movement.c: 213: MoveTime += tenth_seconds;
  3233  00049A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3234  00049C  0D01               	mullw	1
  3235  00049E  50F3               	movf	prodl,w,c
  3236  0004A0  2634               	addwf	ScanWithRange@MoveTime,f,c
  3237  0004A2  50F4               	movf	prodh,w,c
  3238  0004A4  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3239                           
  3240                           ;Movement.c: 214: stop(mL,mR);
  3241  0004A6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3242  0004AA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3243  0004AE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3244  0004B2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3245  0004B6  EC59  F008         	call	_stop	;wreg free
  3246  0004BA  D79E               	goto	l2812
  3247  0004BC                     l2840:
  3248                           
  3249                           ;Movement.c: 217: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3250                           ;Movement.c: 218: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3251  0004BC  0100               	movlb	0	; () banked
  3252  0004BE  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3253  0004C0  0100               	movlb	0	; () banked
  3254  0004C2  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3255  0004C4  0100               	movlb	0	; () banked
  3256  0004C6  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3257  0004C8  0100               	movlb	0	; () banked
  3258  0004CA  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3259  0004CC  B0D8               	btfsc	status,0,c
  3260  0004CE  D043               	goto	l2856
  3261                           
  3262                           ; BSR set to: 0
  3263  0004D0  0100               	movlb	0	; () banked
  3264  0004D2  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3265  0004D4  0100               	movlb	0	; () banked
  3266  0004D6  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3267  0004D8  0100               	movlb	0	; () banked
  3268  0004DA  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3269  0004DC  0100               	movlb	0	; () banked
  3270  0004DE  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3271  0004E0  B0D8               	btfsc	status,0,c
  3272  0004E2  D039               	goto	l2856
  3273                           
  3274                           ; BSR set to: 0
  3275  0004E4  EE20  F073         	lfsr	2,ScanWithRange@SensorResultR+2
  3276  0004E8  CFDE F036          	movff	postinc2,??_ScanWithRange
  3277  0004EC  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3278  0004F0  1E36               	comf	??_ScanWithRange,f,c
  3279  0004F2  1E37               	comf	??_ScanWithRange+1,f,c
  3280  0004F4  4A36               	infsnz	??_ScanWithRange,f,c
  3281  0004F6  2A37               	incf	??_ScanWithRange+1,f,c
  3282  0004F8  0100               	movlb	0	; () banked
  3283  0004FA  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3284  0004FC  2636               	addwf	??_ScanWithRange,f,c
  3285  0004FE  0100               	movlb	0	; () banked
  3286  000500  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3287  000502  2237               	addwfc	??_ScanWithRange+1,f,c
  3288  000504  0100               	movlb	0	; () banked
  3289  000506  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3290  000508  5C36               	subwf	??_ScanWithRange,w,c
  3291  00050A  0100               	movlb	0	; () banked
  3292  00050C  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3293  00050E  5837               	subwfb	??_ScanWithRange+1,w,c
  3294  000510  A0D8               	btfss	status,0,c
  3295  000512  D016               	goto	l2848
  3296                           
  3297                           ; BSR set to: 0
  3298  000514  C071  F036         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3299  000518  C072  F037         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3300  00051C  1E36               	comf	??_ScanWithRange,f,c
  3301  00051E  1E37               	comf	??_ScanWithRange+1,f,c
  3302  000520  4A36               	infsnz	??_ScanWithRange,f,c
  3303  000522  2A37               	incf	??_ScanWithRange+1,f,c
  3304  000524  0100               	movlb	0	; () banked
  3305  000526  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3306  000528  2636               	addwf	??_ScanWithRange,f,c
  3307  00052A  0100               	movlb	0	; () banked
  3308  00052C  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3309  00052E  2237               	addwfc	??_ScanWithRange+1,f,c
  3310  000530  0100               	movlb	0	; () banked
  3311  000532  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3312  000534  5C36               	subwf	??_ScanWithRange,w,c
  3313  000536  0100               	movlb	0	; () banked
  3314  000538  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3315  00053A  5837               	subwfb	??_ScanWithRange+1,w,c
  3316  00053C  B0D8               	btfsc	status,0,c
  3317  00053E  D00B               	goto	l2856
  3318  000540                     l2848:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;Movement.c: 220: stop(mL,mR);
  3322  000540  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3323  000544  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3324  000548  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3325  00054C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3326  000550  EC59  F008         	call	_stop	;wreg free
  3327  000554  D751               	goto	l2812
  3328  000556                     l2856:
  3329  000556  0100               	movlb	0	; () banked
  3330  000558  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3331  00055A  0100               	movlb	0	; () banked
  3332  00055C  5D6B               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3333  00055E  0100               	movlb	0	; () banked
  3334  000560  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3335  000562  0100               	movlb	0	; () banked
  3336  000564  596C               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3337  000566  B0D8               	btfsc	status,0,c
  3338  000568  D021               	goto	l2872
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;Movement.c: 226: turnLeft(mL,mR);
  3342  00056A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3343  00056E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3344  000572  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3345  000576  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3346  00057A  ECB6  F009         	call	_turnLeft	;wreg free
  3347                           
  3348                           ;Movement.c: 227: delay_tenth_s(3*tenth_seconds);
  3349  00057E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3350  000580  0D03               	mullw	3
  3351  000582  50F3               	movf	prodl,w,c
  3352  000584  ECF7  F009         	call	_delay_tenth_s
  3353                           
  3354                           ;Movement.c: 228: MoveTime += 3*tenth_seconds;
  3355  000588  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3356  00058A  0D03               	mullw	3
  3357  00058C  50F3               	movf	prodl,w,c
  3358  00058E  2634               	addwf	ScanWithRange@MoveTime,f,c
  3359  000590  50F4               	movf	prodh,w,c
  3360  000592  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3361                           
  3362                           ;Movement.c: 229: stop(mL,mR);
  3363  000594  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3364  000598  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3365  00059C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3366  0005A0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3367  0005A4  EC59  F008         	call	_stop	;wreg free
  3368  0005A8                     l2866:
  3369                           
  3370                           ;Movement.c: 230: return 0;
  3371  0005A8  0E00               	movlw	0
  3372  0005AA  0012               	return	
  3373  0005AC                     l2872:
  3374  0005AC  0100               	movlb	0	; () banked
  3375  0005AE  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3376  0005B0  0100               	movlb	0	; () banked
  3377  0005B2  5D71               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3378  0005B4  0100               	movlb	0	; () banked
  3379  0005B6  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3380  0005B8  0100               	movlb	0	; () banked
  3381  0005BA  5972               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3382  0005BC  B0D8               	btfsc	status,0,c
  3383  0005BE  D01E               	goto	l2888
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;Movement.c: 233: turnRight(mL,mR);
  3387  0005C0  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  3388  0005C4  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3389  0005C8  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  3390  0005CC  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3391  0005D0  EC91  F009         	call	_turnRight	;wreg free
  3392                           
  3393                           ;Movement.c: 234: delay_tenth_s(tenth_seconds);
  3394  0005D4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3395  0005D6  ECF7  F009         	call	_delay_tenth_s
  3396                           
  3397                           ;Movement.c: 235: MoveTime -= tenth_seconds;
  3398  0005DA  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3399  0005DC  0D01               	mullw	1
  3400  0005DE  50F3               	movf	prodl,w,c
  3401  0005E0  5E34               	subwf	ScanWithRange@MoveTime,f,c
  3402  0005E2  50F4               	movf	prodh,w,c
  3403  0005E4  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  3404                           
  3405                           ;Movement.c: 236: stop(mL,mR);
  3406  0005E6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3407  0005EA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3408  0005EE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3409  0005F2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3410  0005F6  EC59  F008         	call	_stop	;wreg free
  3411  0005FA  D7D6               	goto	l2866
  3412  0005FC                     l2888:
  3413  0005FC  0100               	movlb	0	; () banked
  3414  0005FE  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3415  000600  0100               	movlb	0	; () banked
  3416  000602  5D69               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3417  000604  0100               	movlb	0	; () banked
  3418  000606  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3419  000608  0100               	movlb	0	; () banked
  3420  00060A  596A               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3421  00060C  B0D8               	btfsc	status,0,c
  3422  00060E  D03F               	goto	l2904
  3423                           
  3424                           ; BSR set to: 0
  3425  000610  0100               	movlb	0	; () banked
  3426  000612  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3427  000614  0100               	movlb	0	; () banked
  3428  000616  5D6F               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3429  000618  0100               	movlb	0	; () banked
  3430  00061A  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3431  00061C  0100               	movlb	0	; () banked
  3432  00061E  5970               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3433  000620  B0D8               	btfsc	status,0,c
  3434  000622  D035               	goto	l2904
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;Movement.c: 242: turnLeft(mL,mR);
  3438  000624  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3439  000628  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3440  00062C  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3441  000630  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3442  000634  ECB6  F009         	call	_turnLeft	;wreg free
  3443                           
  3444                           ;Movement.c: 243: delay_tenth_s((3*tenth_seconds)/2);
  3445  000638  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3446  00063A  0D03               	mullw	3
  3447  00063C  CFF3 F015          	movff	prodl,___awdiv@dividend
  3448  000640  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3449  000644  0E00               	movlw	0
  3450  000646  6E18               	movwf	___awdiv@divisor+1,c
  3451  000648  0E02               	movlw	2
  3452  00064A  6E17               	movwf	___awdiv@divisor,c
  3453  00064C  ECA1  F008         	call	___awdiv	;wreg free
  3454  000650  5015               	movf	?___awdiv,w,c
  3455  000652  ECF7  F009         	call	_delay_tenth_s
  3456                           
  3457                           ;Movement.c: 244: MoveTime += 3*tenth_seconds/2;
  3458  000656  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3459  000658  0D03               	mullw	3
  3460  00065A  CFF3 F015          	movff	prodl,___awdiv@dividend
  3461  00065E  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3462  000662  0E00               	movlw	0
  3463  000664  6E18               	movwf	___awdiv@divisor+1,c
  3464  000666  0E02               	movlw	2
  3465  000668  6E17               	movwf	___awdiv@divisor,c
  3466  00066A  ECA1  F008         	call	___awdiv	;wreg free
  3467  00066E  5015               	movf	?___awdiv,w,c
  3468  000670  2634               	addwf	ScanWithRange@MoveTime,f,c
  3469  000672  5016               	movf	?___awdiv+1,w,c
  3470  000674  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3471                           
  3472                           ;Movement.c: 245: stop(mL,mR);
  3473  000676  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3474  00067A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3475  00067E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3476  000682  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3477  000686  EC59  F008         	call	_stop	;wreg free
  3478  00068A                     l2898:
  3479                           
  3480                           ;Movement.c: 246: return 1;
  3481  00068A  0E01               	movlw	1
  3482  00068C  0012               	return	
  3483  00068E                     l2904:
  3484  00068E  0100               	movlb	0	; () banked
  3485  000690  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3486  000692  0100               	movlb	0	; () banked
  3487  000694  5D73               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3488  000696  0100               	movlb	0	; () banked
  3489  000698  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3490  00069A  0100               	movlb	0	; () banked
  3491  00069C  5974               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3492  00069E  B0D8               	btfsc	status,0,c
  3493  0006A0  D038               	goto	l2920
  3494                           
  3495                           ; BSR set to: 0
  3496  0006A2  0100               	movlb	0	; () banked
  3497  0006A4  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3498  0006A6  0100               	movlb	0	; () banked
  3499  0006A8  5D6D               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3500  0006AA  0100               	movlb	0	; () banked
  3501  0006AC  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3502  0006AE  0100               	movlb	0	; () banked
  3503  0006B0  596E               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3504  0006B2  B0D8               	btfsc	status,0,c
  3505  0006B4  D02E               	goto	l2920
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;Movement.c: 249: turnLeft(mL,mR);
  3509  0006B6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3510  0006BA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3511  0006BE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3512  0006C2  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3513  0006C6  ECB6  F009         	call	_turnLeft	;wreg free
  3514                           
  3515                           ;Movement.c: 250: delay_tenth_s((tenth_seconds)/2);
  3516  0006CA  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3517  0006CE  6A16               	clrf	___awdiv@dividend+1,c
  3518  0006D0  0E00               	movlw	0
  3519  0006D2  6E18               	movwf	___awdiv@divisor+1,c
  3520  0006D4  0E02               	movlw	2
  3521  0006D6  6E17               	movwf	___awdiv@divisor,c
  3522  0006D8  ECA1  F008         	call	___awdiv	;wreg free
  3523  0006DC  5015               	movf	?___awdiv,w,c
  3524  0006DE  ECF7  F009         	call	_delay_tenth_s
  3525                           
  3526                           ;Movement.c: 251: MoveTime += tenth_seconds/2;
  3527  0006E2  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3528  0006E6  6A16               	clrf	___awdiv@dividend+1,c
  3529  0006E8  0E00               	movlw	0
  3530  0006EA  6E18               	movwf	___awdiv@divisor+1,c
  3531  0006EC  0E02               	movlw	2
  3532  0006EE  6E17               	movwf	___awdiv@divisor,c
  3533  0006F0  ECA1  F008         	call	___awdiv	;wreg free
  3534  0006F4  5015               	movf	?___awdiv,w,c
  3535  0006F6  2634               	addwf	ScanWithRange@MoveTime,f,c
  3536  0006F8  5016               	movf	?___awdiv+1,w,c
  3537  0006FA  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3538                           
  3539                           ;Movement.c: 252: stop(mL,mR);
  3540  0006FC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3541  000700  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3542  000704  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3543  000708  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3544  00070C  EC59  F008         	call	_stop	;wreg free
  3545  000710  D7BC               	goto	l2898
  3546  000712                     l2920:
  3547                           
  3548                           ;Movement.c: 254: }
  3549                           ;Movement.c: 255: }
  3550                           ;Movement.c: 256: return 0;
  3551  000712  0E00               	movlw	0
  3552  000714  0012               	return	
  3553  000716                     __end_of_ScanWithRange:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function _ScanIR *****************
  3572 ;; Defined at:
  3573 ;;		line 32 in file "Movement.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  3576 ;;		 -> main@mL(9), 
  3577 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  3578 ;;		 -> main@mR(9), 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  3581 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  3582 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  3583 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      unsigned char 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3593 ;;      Params:         4       0       0       0
  3594 ;;      Locals:        10       0       0       0
  3595 ;;      Temps:          2       0       0       0
  3596 ;;      Totals:        16       0       0       0
  3597 ;;Total ram usage:       16 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    5
  3600 ;; This function calls:
  3601 ;;		_delay_tenth_s
  3602 ;;		_grabLeftIR
  3603 ;;		_grabRightIR
  3604 ;;		_stop
  3605 ;;		_turnLeft
  3606 ;;		_turnRight
  3607 ;; This function is called by:
  3608 ;;		_main
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text13
  3613  000B44                     __ptext13:
  3614                           	opt stack 0
  3615  000B44                     _ScanIR:
  3616                           	opt stack 25
  3617                           
  3618                           ;Movement.c: 34: unsigned int SensorResult[2]={0,0};
  3619                           
  3620                           ;incstack = 0
  3621  000B44  C041  F03B         	movff	ScanIR@F3710,ScanIR@SensorResult
  3622  000B48  C042  F03C         	movff	ScanIR@F3710+1,ScanIR@SensorResult+1
  3623  000B4C  C043  F03D         	movff	ScanIR@F3710+2,ScanIR@SensorResult+2
  3624  000B50  C044  F03E         	movff	ScanIR@F3710+3,ScanIR@SensorResult+3
  3625                           
  3626                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  3627  000B54  0E00               	movlw	0
  3628  000B56  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  3629  000B58  0EC8               	movlw	200
  3630  000B5A  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  3631                           
  3632                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=800;
  3633  000B5C  0E03               	movlw	3
  3634  000B5E  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  3635  000B60  0E20               	movlw	32
  3636  000B62  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  3637                           
  3638                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=600;
  3639  000B64  0E02               	movlw	2
  3640  000B66  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  3641  000B68  0E58               	movlw	88
  3642  000B6A  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  3643                           
  3644                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  3645  000B6C  EC1E  F009         	call	_grabLeftIR	;wreg free
  3646  000B70  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  3647  000B74  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3648                           
  3649                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  3650  000B78  ECE3  F008         	call	_grabRightIR	;wreg free
  3651  000B7C  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3652  000B80  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3653                           
  3654                           ;Movement.c: 47: CAP1BUFH=0;
  3655  000B84  0E00               	movlw	0
  3656  000B86  6E69               	movwf	3945,c	;volatile
  3657                           
  3658                           ;Movement.c: 48: CAP1BUFL=0;
  3659  000B88  0E00               	movlw	0
  3660  000B8A  6E68               	movwf	3944,c	;volatile
  3661                           
  3662                           ;Movement.c: 49: CAP2BUFH=0;
  3663  000B8C  0E00               	movlw	0
  3664  000B8E  6E67               	movwf	3943,c	;volatile
  3665                           
  3666                           ;Movement.c: 50: CAP2BUFL=0;
  3667  000B90  0E00               	movlw	0
  3668  000B92  6E66               	movwf	3942,c	;volatile
  3669                           
  3670                           ;Movement.c: 54: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  3671  000B94  503B               	movf	ScanIR@SensorResult,w,c
  3672  000B96  243D               	addwf	ScanIR@SensorResult+2,w,c
  3673  000B98  6E33               	movwf	??_ScanIR& (0+255),c
  3674  000B9A  503C               	movf	ScanIR@SensorResult+1,w,c
  3675  000B9C  203E               	addwfc	ScanIR@SensorResult+3,w,c
  3676  000B9E  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  3677  000BA0  5033               	movf	??_ScanIR,w,c
  3678  000BA2  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  3679  000BA4  5034               	movf	??_ScanIR+1,w,c
  3680  000BA6  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  3681  000BA8  B0D8               	btfsc	status,0,c
  3682  000BAA  D085               	goto	l2974
  3683                           
  3684                           ;Movement.c: 57: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  3685                           ;Movement.c: 58: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3686                           ;Movement.c: 59: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3687  000BAC  503B               	movf	ScanIR@SensorResult,w,c
  3688  000BAE  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3689  000BB0  503C               	movf	ScanIR@SensorResult+1,w,c
  3690  000BB2  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3691  000BB4  B0D8               	btfsc	status,0,c
  3692  000BB6  D02E               	goto	l2948
  3693  000BB8  503D               	movf	ScanIR@SensorResult+2,w,c
  3694  000BBA  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3695  000BBC  503E               	movf	ScanIR@SensorResult+3,w,c
  3696  000BBE  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3697  000BC0  B0D8               	btfsc	status,0,c
  3698  000BC2  D028               	goto	l2948
  3699  000BC4  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  3700  000BC8  CFDE F033          	movff	postinc2,??_ScanIR
  3701  000BCC  CFDD F034          	movff	postdec2,??_ScanIR+1
  3702  000BD0  1E33               	comf	??_ScanIR,f,c
  3703  000BD2  1E34               	comf	??_ScanIR+1,f,c
  3704  000BD4  4A33               	infsnz	??_ScanIR,f,c
  3705  000BD6  2A34               	incf	??_ScanIR+1,f,c
  3706  000BD8  503B               	movf	ScanIR@SensorResult,w,c
  3707  000BDA  2633               	addwf	??_ScanIR,f,c
  3708  000BDC  503C               	movf	ScanIR@SensorResult+1,w,c
  3709  000BDE  2234               	addwfc	??_ScanIR+1,f,c
  3710  000BE0  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3711  000BE2  5C33               	subwf	??_ScanIR,w,c
  3712  000BE4  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3713  000BE6  5834               	subwfb	??_ScanIR+1,w,c
  3714  000BE8  A0D8               	btfss	status,0,c
  3715  000BEA  D012               	goto	l2942
  3716  000BEC  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  3717  000BF0  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3718  000BF4  1E33               	comf	??_ScanIR,f,c
  3719  000BF6  1E34               	comf	??_ScanIR+1,f,c
  3720  000BF8  4A33               	infsnz	??_ScanIR,f,c
  3721  000BFA  2A34               	incf	??_ScanIR+1,f,c
  3722  000BFC  503D               	movf	ScanIR@SensorResult+2,w,c
  3723  000BFE  2633               	addwf	??_ScanIR,f,c
  3724  000C00  503E               	movf	ScanIR@SensorResult+3,w,c
  3725  000C02  2234               	addwfc	??_ScanIR+1,f,c
  3726  000C04  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3727  000C06  5C33               	subwf	??_ScanIR,w,c
  3728  000C08  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3729  000C0A  5834               	subwfb	??_ScanIR+1,w,c
  3730  000C0C  B0D8               	btfsc	status,0,c
  3731  000C0E  D002               	goto	l2948
  3732  000C10                     l2942:
  3733                           
  3734                           ;Movement.c: 60: return 2;
  3735  000C10  0E02               	movlw	2
  3736  000C12  0012               	return	
  3737  000C14                     l2948:
  3738  000C14  503B               	movf	ScanIR@SensorResult,w,c
  3739  000C16  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3740  000C18  503C               	movf	ScanIR@SensorResult+1,w,c
  3741  000C1A  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3742  000C1C  A0D8               	btfss	status,0,c
  3743  000C1E  D023               	goto	l2962
  3744                           
  3745                           ;Movement.c: 63: stop(mL,mR);
  3746  000C20  C02F  F026         	movff	ScanIR@mL,stop@mL
  3747  000C24  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3748  000C28  C031  F028         	movff	ScanIR@mR,stop@mR
  3749  000C2C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3750  000C30  EC59  F008         	call	_stop	;wreg free
  3751                           
  3752                           ;Movement.c: 64: turnLeft(mL,mR);
  3753  000C34  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3754  000C38  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3755  000C3C  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3756  000C40  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3757  000C44  ECB6  F009         	call	_turnLeft	;wreg free
  3758                           
  3759                           ;Movement.c: 65: delay_tenth_s(3);
  3760  000C48  0E03               	movlw	3
  3761  000C4A  ECF7  F009         	call	_delay_tenth_s
  3762                           
  3763                           ;Movement.c: 66: stop(mL,mR);
  3764  000C4E  C02F  F026         	movff	ScanIR@mL,stop@mL
  3765  000C52  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3766  000C56  C031  F028         	movff	ScanIR@mR,stop@mR
  3767  000C5A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3768  000C5E  EC59  F008         	call	_stop	;wreg free
  3769  000C62                     l2956:
  3770                           
  3771                           ;Movement.c: 67: return 1;
  3772  000C62  0E01               	movlw	1
  3773  000C64  0012               	return	
  3774  000C66                     l2962:
  3775  000C66  503B               	movf	ScanIR@SensorResult,w,c
  3776  000C68  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3777  000C6A  503C               	movf	ScanIR@SensorResult+1,w,c
  3778  000C6C  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3779  000C6E  B0D8               	btfsc	status,0,c
  3780  000C70  D069               	goto	l3002
  3781                           
  3782                           ;Movement.c: 70: stop(mL,mR);
  3783  000C72  C02F  F026         	movff	ScanIR@mL,stop@mL
  3784  000C76  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3785  000C7A  C031  F028         	movff	ScanIR@mR,stop@mR
  3786  000C7E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3787  000C82  EC59  F008         	call	_stop	;wreg free
  3788                           
  3789                           ;Movement.c: 71: turnRight(mL,mR);
  3790  000C86  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3791  000C8A  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3792  000C8E  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3793  000C92  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3794  000C96  EC91  F009         	call	_turnRight	;wreg free
  3795                           
  3796                           ;Movement.c: 72: delay_tenth_s(3);
  3797  000C9A  0E03               	movlw	3
  3798  000C9C  ECF7  F009         	call	_delay_tenth_s
  3799                           
  3800                           ;Movement.c: 73: stop(mL,mR);
  3801  000CA0  C02F  F026         	movff	ScanIR@mL,stop@mL
  3802  000CA4  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3803  000CA8  C031  F028         	movff	ScanIR@mR,stop@mR
  3804  000CAC  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3805  000CB0  EC59  F008         	call	_stop	;wreg free
  3806  000CB4  D7D6               	goto	l2956
  3807  000CB6                     l2974:
  3808                           
  3809                           ;Movement.c: 78: stop(mL,mR);
  3810  000CB6  C02F  F026         	movff	ScanIR@mL,stop@mL
  3811  000CBA  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3812  000CBE  C031  F028         	movff	ScanIR@mR,stop@mR
  3813  000CC2  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3814  000CC6  EC59  F008         	call	_stop	;wreg free
  3815                           
  3816                           ;Movement.c: 81: if (SensorResult[0]<=SensorResult[1]) {
  3817  000CCA  503B               	movf	ScanIR@SensorResult,w,c
  3818  000CCC  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3819  000CCE  503C               	movf	ScanIR@SensorResult+1,w,c
  3820  000CD0  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3821  000CD2  A0D8               	btfss	status,0,c
  3822  000CD4  D019               	goto	l2990
  3823                           
  3824                           ;Movement.c: 82: turnLeft(mL,mR);
  3825  000CD6  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3826  000CDA  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3827  000CDE  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3828  000CE2  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3829  000CE6  ECB6  F009         	call	_turnLeft	;wreg free
  3830                           
  3831                           ;Movement.c: 83: delay_tenth_s(5);
  3832  000CEA  0E05               	movlw	5
  3833  000CEC  ECF7  F009         	call	_delay_tenth_s
  3834                           
  3835                           ;Movement.c: 84: stop(mL,mR);
  3836  000CF0  C02F  F026         	movff	ScanIR@mL,stop@mL
  3837  000CF4  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3838  000CF8  C031  F028         	movff	ScanIR@mR,stop@mR
  3839  000CFC  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3840  000D00  EC59  F008         	call	_stop	;wreg free
  3841  000D04                     l2984:
  3842                           
  3843                           ;Movement.c: 85: return 0;
  3844  000D04  0E00               	movlw	0
  3845  000D06  0012               	return	
  3846  000D08                     l2990:
  3847  000D08  503B               	movf	ScanIR@SensorResult,w,c
  3848  000D0A  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3849  000D0C  503C               	movf	ScanIR@SensorResult+1,w,c
  3850  000D0E  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3851  000D10  B0D8               	btfsc	status,0,c
  3852  000D12  D018               	goto	l3002
  3853                           
  3854                           ;Movement.c: 88: turnRight(mL,mR);
  3855  000D14  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3856  000D18  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3857  000D1C  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3858  000D20  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3859  000D24  EC91  F009         	call	_turnRight	;wreg free
  3860                           
  3861                           ;Movement.c: 89: delay_tenth_s(5);
  3862  000D28  0E05               	movlw	5
  3863  000D2A  ECF7  F009         	call	_delay_tenth_s
  3864                           
  3865                           ;Movement.c: 90: stop(mL,mR);
  3866  000D2E  C02F  F026         	movff	ScanIR@mL,stop@mL
  3867  000D32  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3868  000D36  C031  F028         	movff	ScanIR@mR,stop@mR
  3869  000D3A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3870  000D3E  EC59  F008         	call	_stop	;wreg free
  3871  000D42  D7E0               	goto	l2984
  3872  000D44                     l3002:
  3873                           
  3874                           ;Movement.c: 92: }
  3875                           ;Movement.c: 93: }
  3876                           ;Movement.c: 94: return 0;
  3877  000D44  0E00               	movlw	0
  3878  000D46  0012               	return	
  3879  000D48                     __end_of_ScanIR:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           intcon	equ	0xFF2
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           indf1	equ	0xFE7
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           postinc2	equ	0xFDE
  3892                           postdec2	equ	0xFDD
  3893                           fsr2h	equ	0xFDA
  3894                           fsr2l	equ	0xFD9
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function _turnRight *****************
  3898 ;; Defined at:
  3899 ;;		line 98 in file "dc_motor.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3902 ;;		 -> main@mL(9), 
  3903 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3904 ;;		 -> main@mR(9), 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;		None               void
  3909 ;; Registers used:
  3910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3916 ;;      Params:         4       0       0       0
  3917 ;;      Locals:         0       0       0       0
  3918 ;;      Temps:          0       0       0       0
  3919 ;;      Totals:         4       0       0       0
  3920 ;;Total ram usage:        4 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    4
  3923 ;; This function calls:
  3924 ;;		_fullSpeedAhead
  3925 ;;		_stop
  3926 ;; This function is called by:
  3927 ;;		_main
  3928 ;;		_ScanIR
  3929 ;;		_ScanWithRange
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text14
  3934  001322                     __ptext14:
  3935                           	opt stack 0
  3936  001322                     _turnRight:
  3937                           	opt stack 26
  3938                           
  3939                           ;dc_motor.c: 100: stop(mL, mR);
  3940                           
  3941                           ;incstack = 0
  3942  001322  C02B  F026         	movff	turnRight@mL,stop@mL
  3943  001326  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  3944  00132A  C02D  F028         	movff	turnRight@mR,stop@mR
  3945  00132E  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  3946  001332  EC59  F008         	call	_stop	;wreg free
  3947                           
  3948                           ;dc_motor.c: 102: mL->direction=1;
  3949  001336  EE20 F001          	lfsr	2,1
  3950  00133A  502B               	movf	turnRight@mL,w,c
  3951  00133C  26D9               	addwf	fsr2l,f,c
  3952  00133E  502C               	movf	turnRight@mL+1,w,c
  3953  001340  22DA               	addwfc	fsr2h,f,c
  3954  001342  0E01               	movlw	1
  3955  001344  6EDF               	movwf	indf2,c
  3956                           
  3957                           ;dc_motor.c: 103: mR->direction=0;
  3958  001346  EE20 F001          	lfsr	2,1
  3959  00134A  502D               	movf	turnRight@mR,w,c
  3960  00134C  26D9               	addwf	fsr2l,f,c
  3961  00134E  502E               	movf	turnRight@mR+1,w,c
  3962  001350  22DA               	addwfc	fsr2h,f,c
  3963  001352  0E00               	movlw	0
  3964  001354  6EDF               	movwf	indf2,c
  3965                           
  3966                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3967  001356  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  3968  00135A  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3969  00135E  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  3970  001362  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3971  001366  EC59  F009         	call	_fullSpeedAhead	;wreg free
  3972  00136A  0012               	return		;funcret
  3973  00136C                     __end_of_turnRight:
  3974                           	opt stack 0
  3975                           tblptru	equ	0xFF8
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           intcon	equ	0xFF2
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           indf1	equ	0xFE7
  3982                           fsr1h	equ	0xFE2
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _turnLeft *****************
  3992 ;; Defined at:
  3993 ;;		line 87 in file "dc_motor.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3996 ;;		 -> main@mL(9), 
  3997 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3998 ;;		 -> main@mR(9), 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4010 ;;      Params:         4       0       0       0
  4011 ;;      Locals:         0       0       0       0
  4012 ;;      Temps:          0       0       0       0
  4013 ;;      Totals:         4       0       0       0
  4014 ;;Total ram usage:        4 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    4
  4017 ;; This function calls:
  4018 ;;		_fullSpeedAhead
  4019 ;;		_stop
  4020 ;; This function is called by:
  4021 ;;		_main
  4022 ;;		_ScanIR
  4023 ;;		_ScanWithRange
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text15
  4028  00136C                     __ptext15:
  4029                           	opt stack 0
  4030  00136C                     _turnLeft:
  4031                           	opt stack 26
  4032                           
  4033                           ;dc_motor.c: 89: stop(mL, mR);
  4034                           
  4035                           ;incstack = 0
  4036  00136C  C02B  F026         	movff	turnLeft@mL,stop@mL
  4037  001370  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  4038  001374  C02D  F028         	movff	turnLeft@mR,stop@mR
  4039  001378  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  4040  00137C  EC59  F008         	call	_stop	;wreg free
  4041                           
  4042                           ;dc_motor.c: 91: mL->direction=0;
  4043  001380  EE20 F001          	lfsr	2,1
  4044  001384  502B               	movf	turnLeft@mL,w,c
  4045  001386  26D9               	addwf	fsr2l,f,c
  4046  001388  502C               	movf	turnLeft@mL+1,w,c
  4047  00138A  22DA               	addwfc	fsr2h,f,c
  4048  00138C  0E00               	movlw	0
  4049  00138E  6EDF               	movwf	indf2,c
  4050                           
  4051                           ;dc_motor.c: 92: mR->direction=1;
  4052  001390  EE20 F001          	lfsr	2,1
  4053  001394  502D               	movf	turnLeft@mR,w,c
  4054  001396  26D9               	addwf	fsr2l,f,c
  4055  001398  502E               	movf	turnLeft@mR+1,w,c
  4056  00139A  22DA               	addwfc	fsr2h,f,c
  4057  00139C  0E01               	movlw	1
  4058  00139E  6EDF               	movwf	indf2,c
  4059                           
  4060                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4061  0013A0  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  4062  0013A4  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4063  0013A8  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  4064  0013AC  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4065  0013B0  EC59  F009         	call	_fullSpeedAhead	;wreg free
  4066  0013B4  0012               	return		;funcret
  4067  0013B6                     __end_of_turnLeft:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           prodh	equ	0xFF4
  4071                           prodl	equ	0xFF3
  4072                           intcon	equ	0xFF2
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           indf1	equ	0xFE7
  4076                           fsr1h	equ	0xFE2
  4077                           fsr1l	equ	0xFE1
  4078                           indf2	equ	0xFDF
  4079                           postinc2	equ	0xFDE
  4080                           postdec2	equ	0xFDD
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _stop *****************
  4086 ;; Defined at:
  4087 ;;		line 67 in file "dc_motor.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  4090 ;;		 -> main@mL(9), 
  4091 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  4092 ;;		 -> main@mR(9), 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4104 ;;      Params:         4       0       0       0
  4105 ;;      Locals:         0       0       0       0
  4106 ;;      Temps:          0       0       0       0
  4107 ;;      Totals:         4       0       0       0
  4108 ;;Total ram usage:        4 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    3
  4111 ;; This function calls:
  4112 ;;		_setMotorPWM
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;;		_turnLeft
  4116 ;;		_turnRight
  4117 ;;		_ScanIR
  4118 ;;		_ScanWithRange
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text16
  4123  0010B2                     __ptext16:
  4124                           	opt stack 0
  4125  0010B2                     _stop:
  4126                           	opt stack 26
  4127                           
  4128                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4129                           
  4130                           ;incstack = 0
  4131  0010B2  D028               	goto	l2648
  4132  0010B4                     l2634:
  4133                           
  4134                           ;dc_motor.c: 71: if(mL->power>0){
  4135  0010B4  C026  FFD9         	movff	stop@mL,fsr2l
  4136  0010B8  C027  FFDA         	movff	stop@mL+1,fsr2h
  4137  0010BC  50DF               	movf	indf2,w,c
  4138  0010BE  B4D8               	btfsc	status,2,c
  4139  0010C0  D005               	goto	l2638
  4140                           
  4141                           ;dc_motor.c: 72: mL->power--;
  4142  0010C2  C026  FFD9         	movff	stop@mL,fsr2l
  4143  0010C6  C027  FFDA         	movff	stop@mL+1,fsr2h
  4144  0010CA  06DF               	decf	indf2,f,c
  4145  0010CC                     l2638:
  4146                           
  4147                           ;dc_motor.c: 73: }
  4148                           ;dc_motor.c: 74: if(mR->power>0){
  4149  0010CC  C028  FFD9         	movff	stop@mR,fsr2l
  4150  0010D0  C029  FFDA         	movff	stop@mR+1,fsr2h
  4151  0010D4  50DF               	movf	indf2,w,c
  4152  0010D6  B4D8               	btfsc	status,2,c
  4153  0010D8  D005               	goto	l2642
  4154                           
  4155                           ;dc_motor.c: 75: mR->power--;
  4156  0010DA  C028  FFD9         	movff	stop@mR,fsr2l
  4157  0010DE  C029  FFDA         	movff	stop@mR+1,fsr2h
  4158  0010E2  06DF               	decf	indf2,f,c
  4159  0010E4                     l2642:
  4160                           
  4161                           ;dc_motor.c: 76: }
  4162                           ;dc_motor.c: 77: setMotorPWM(mL);
  4163  0010E4  C026  F01D         	movff	stop@mL,setMotorPWM@m
  4164  0010E8  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  4165  0010EC  ECA4  F006         	call	_setMotorPWM	;wreg free
  4166                           
  4167                           ;dc_motor.c: 78: setMotorPWM(mR);
  4168  0010F0  C028  F01D         	movff	stop@mR,setMotorPWM@m
  4169  0010F4  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  4170  0010F8  ECA4  F006         	call	_setMotorPWM	;wreg free
  4171                           
  4172                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4173  0010FC  0E21               	movlw	33
  4174  0010FE                     u2907:
  4175  0010FE  2EE8               	decfsz	wreg,f,c
  4176  001100  D7FE               	goto	u2907
  4177  001102  F000               	nop	
  4178  001104                     l2648:
  4179  001104  C026  FFD9         	movff	stop@mL,fsr2l
  4180  001108  C027  FFDA         	movff	stop@mL+1,fsr2h
  4181  00110C  50DF               	movf	indf2,w,c
  4182  00110E  A4D8               	btfss	status,2,c
  4183  001110  D7D1               	goto	l2634
  4184  001112  C028  FFD9         	movff	stop@mR,fsr2l
  4185  001116  C029  FFDA         	movff	stop@mR+1,fsr2h
  4186  00111A  50DF               	movf	indf2,w,c
  4187  00111C  A4D8               	btfss	status,2,c
  4188  00111E  D7CA               	goto	l2634
  4189                           
  4190                           ;dc_motor.c: 80: }
  4191                           ;dc_motor.c: 81: mL->direction=1;
  4192  001120  EE20 F001          	lfsr	2,1
  4193  001124  5026               	movf	stop@mL,w,c
  4194  001126  26D9               	addwf	fsr2l,f,c
  4195  001128  5027               	movf	stop@mL+1,w,c
  4196  00112A  22DA               	addwfc	fsr2h,f,c
  4197  00112C  0E01               	movlw	1
  4198  00112E  6EDF               	movwf	indf2,c
  4199                           
  4200                           ;dc_motor.c: 82: mR->direction=1;
  4201  001130  EE20 F001          	lfsr	2,1
  4202  001134  5028               	movf	stop@mR,w,c
  4203  001136  26D9               	addwf	fsr2l,f,c
  4204  001138  5029               	movf	stop@mR+1,w,c
  4205  00113A  22DA               	addwfc	fsr2h,f,c
  4206  00113C  0E01               	movlw	1
  4207  00113E  6EDF               	movwf	indf2,c
  4208  001140  0012               	return		;funcret
  4209  001142                     __end_of_stop:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           indf1	equ	0xFE7
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _fullSpeedAhead *****************
  4228 ;; Defined at:
  4229 ;;		line 108 in file "dc_motor.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  4232 ;;		 -> main@mL(9), 
  4233 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  4234 ;;		 -> main@mR(9), 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;		None
  4237 ;; Return value:  Size  Location     Type
  4238 ;;		None               void
  4239 ;; Registers used:
  4240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4246 ;;      Params:         4       0       0       0
  4247 ;;      Locals:         0       0       0       0
  4248 ;;      Temps:          1       0       0       0
  4249 ;;      Totals:         5       0       0       0
  4250 ;;Total ram usage:        5 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    3
  4253 ;; This function calls:
  4254 ;;		_setMotorPWM
  4255 ;; This function is called by:
  4256 ;;		_main
  4257 ;;		_turnLeft
  4258 ;;		_turnRight
  4259 ;;		_fullSpeedBack
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text17
  4264  0012B2                     __ptext17:
  4265                           	opt stack 0
  4266  0012B2                     _fullSpeedAhead:
  4267                           	opt stack 26
  4268                           
  4269                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4270                           
  4271                           ;incstack = 0
  4272  0012B2  D028               	goto	l169
  4273  0012B4                     l2616:
  4274                           
  4275                           ;dc_motor.c: 112: if(mL->power<100){
  4276  0012B4  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4277  0012B8  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4278  0012BC  0E64               	movlw	100
  4279  0012BE  60DF               	cpfslt	indf2,c
  4280  0012C0  D005               	goto	l2620
  4281                           
  4282                           ;dc_motor.c: 113: mL->power++;
  4283  0012C2  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4284  0012C6  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4285  0012CA  2ADF               	incf	indf2,f,c
  4286  0012CC                     l2620:
  4287                           
  4288                           ;dc_motor.c: 114: }
  4289                           ;dc_motor.c: 115: if(mR->power<100){
  4290  0012CC  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4291  0012D0  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4292  0012D4  0E64               	movlw	100
  4293  0012D6  60DF               	cpfslt	indf2,c
  4294  0012D8  D005               	goto	l2624
  4295                           
  4296                           ;dc_motor.c: 116: mR->power++;
  4297  0012DA  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4298  0012DE  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4299  0012E2  2ADF               	incf	indf2,f,c
  4300  0012E4                     l2624:
  4301                           
  4302                           ;dc_motor.c: 117: }
  4303                           ;dc_motor.c: 118: setMotorPWM(mL);
  4304  0012E4  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4305  0012E8  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4306  0012EC  ECA4  F006         	call	_setMotorPWM	;wreg free
  4307                           
  4308                           ;dc_motor.c: 119: setMotorPWM(mR);
  4309  0012F0  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4310  0012F4  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4311  0012F8  ECA4  F006         	call	_setMotorPWM	;wreg free
  4312                           
  4313                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4314  0012FC  0E21               	movlw	33
  4315  0012FE                     u2917:
  4316  0012FE  2EE8               	decfsz	wreg,f,c
  4317  001300  D7FE               	goto	u2917
  4318  001302  F000               	nop	
  4319  001304                     l169:
  4320  001304  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4321  001308  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4322  00130C  0E63               	movlw	99
  4323  00130E  64DF               	cpfsgt	indf2,c
  4324  001310  D7D1               	goto	l2616
  4325  001312  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4326  001316  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4327  00131A  0E63               	movlw	99
  4328  00131C  64DF               	cpfsgt	indf2,c
  4329  00131E  D7CA               	goto	l2616
  4330  001320  0012               	return	
  4331  001322                     __end_of_fullSpeedAhead:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           indf1	equ	0xFE7
  4340                           fsr1h	equ	0xFE2
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _setMotorPWM *****************
  4350 ;; Defined at:
  4351 ;;		line 26 in file "dc_motor.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  m               2   28[COMRAM] PTR struct DC_motor
  4354 ;;		 -> main@mR(9), main@mL(9), 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  PWMduty         2   35[COMRAM] int 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;		None               void
  4359 ;; Registers used:
  4360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4366 ;;      Params:         2       0       0       0
  4367 ;;      Locals:         2       0       0       0
  4368 ;;      Temps:          5       0       0       0
  4369 ;;      Totals:         9       0       0       0
  4370 ;;Total ram usage:        9 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		___awdiv
  4375 ;;		___wmul
  4376 ;; This function is called by:
  4377 ;;		_stop
  4378 ;;		_fullSpeedAhead
  4379 ;;		_setMotorFullSpeed
  4380 ;;		_stopMotor
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text18
  4385  000D48                     __ptext18:
  4386                           	opt stack 0
  4387  000D48                     _setMotorPWM:
  4388                           	opt stack 26
  4389                           
  4390                           ;dc_motor.c: 28: int PWMduty;
  4391                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4392                           
  4393                           ;incstack = 0
  4394  000D48  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  4395  000D4C  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4396  000D50  50DF               	movf	indf2,w,c
  4397  000D52  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4398  000D54  501F               	movf	??_setMotorPWM,w,c
  4399  000D56  6E0F               	movwf	___wmul@multiplier,c
  4400  000D58  6A10               	clrf	___wmul@multiplier+1,c
  4401  000D5A  EE20 F007          	lfsr	2,7
  4402  000D5E  501D               	movf	setMotorPWM@m,w,c
  4403  000D60  26D9               	addwf	fsr2l,f,c
  4404  000D62  501E               	movf	setMotorPWM@m+1,w,c
  4405  000D64  22DA               	addwfc	fsr2h,f,c
  4406  000D66  CFDE F011          	movff	postinc2,___wmul@multiplicand
  4407  000D6A  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  4408  000D6E  EC8A  F00A         	call	___wmul	;wreg free
  4409  000D72  C00F  F015         	movff	?___wmul,___awdiv@dividend
  4410  000D76  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  4411  000D7A  0E00               	movlw	0
  4412  000D7C  6E18               	movwf	___awdiv@divisor+1,c
  4413  000D7E  0E64               	movlw	100
  4414  000D80  6E17               	movwf	___awdiv@divisor,c
  4415  000D82  ECA1  F008         	call	___awdiv	;wreg free
  4416  000D86  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  4417  000D8A  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4418                           
  4419                           ;dc_motor.c: 32: if (m->direction)
  4420  000D8E  EE20 F001          	lfsr	2,1
  4421  000D92  501D               	movf	setMotorPWM@m,w,c
  4422  000D94  26D9               	addwf	fsr2l,f,c
  4423  000D96  501E               	movf	setMotorPWM@m+1,w,c
  4424  000D98  22DA               	addwfc	fsr2h,f,c
  4425  000D9A  50DF               	movf	indf2,w,c
  4426  000D9C  B4D8               	btfsc	status,2,c
  4427  000D9E  D02C               	goto	l2612
  4428                           
  4429                           ;dc_motor.c: 33: {
  4430                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4431  000DA0  EE20 F006          	lfsr	2,6
  4432  000DA4  501D               	movf	setMotorPWM@m,w,c
  4433  000DA6  26D9               	addwf	fsr2l,f,c
  4434  000DA8  501E               	movf	setMotorPWM@m+1,w,c
  4435  000DAA  22DA               	addwfc	fsr2h,f,c
  4436  000DAC  50DF               	movf	indf2,w,c
  4437  000DAE  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4438  000DB0  0E01               	movlw	1
  4439  000DB2  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4440  000DB4  2A1F               	incf	??_setMotorPWM,f,c
  4441  000DB6  D002               	goto	u2054
  4442  000DB8                     u2055:
  4443  000DB8  90D8               	bcf	status,0,c
  4444  000DBA  3620               	rlcf	??_setMotorPWM+1,f,c
  4445  000DBC                     u2054:
  4446  000DBC  2E1F               	decfsz	??_setMotorPWM,f,c
  4447  000DBE  D7FC               	goto	u2055
  4448  000DC0  5020               	movf	??_setMotorPWM+1,w,c
  4449  000DC2  108A               	iorwf	3978,w,c	;volatile
  4450  000DC4  6E8A               	movwf	3978,c	;volatile
  4451                           
  4452                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4453  000DC6  EE20 F007          	lfsr	2,7
  4454  000DCA  501D               	movf	setMotorPWM@m,w,c
  4455  000DCC  26D9               	addwf	fsr2l,f,c
  4456  000DCE  501E               	movf	setMotorPWM@m+1,w,c
  4457  000DD0  22DA               	addwfc	fsr2h,f,c
  4458  000DD2  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4459  000DD6  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4460  000DDA  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4461  000DDE  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4462  000DE2  1E21               	comf	??_setMotorPWM+2,f,c
  4463  000DE4  1E22               	comf	??_setMotorPWM+3,f,c
  4464  000DE6  4A21               	infsnz	??_setMotorPWM+2,f,c
  4465  000DE8  2A22               	incf	??_setMotorPWM+3,f,c
  4466  000DEA  501F               	movf	??_setMotorPWM,w,c
  4467  000DEC  2421               	addwf	??_setMotorPWM+2,w,c
  4468  000DEE  6E24               	movwf	setMotorPWM@PWMduty,c
  4469  000DF0  5020               	movf	??_setMotorPWM+1,w,c
  4470  000DF2  2022               	addwfc	??_setMotorPWM+3,w,c
  4471  000DF4  6E25               	movwf	setMotorPWM@PWMduty+1,c
  4472                           
  4473                           ;dc_motor.c: 36: }
  4474  000DF6  D014               	goto	l139
  4475  000DF8                     l2612:
  4476                           
  4477                           ;dc_motor.c: 37: else
  4478                           ;dc_motor.c: 38: {
  4479                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4480  000DF8  EE20 F006          	lfsr	2,6
  4481  000DFC  501D               	movf	setMotorPWM@m,w,c
  4482  000DFE  26D9               	addwf	fsr2l,f,c
  4483  000E00  501E               	movf	setMotorPWM@m+1,w,c
  4484  000E02  22DA               	addwfc	fsr2h,f,c
  4485  000E04  50DF               	movf	indf2,w,c
  4486  000E06  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4487  000E08  0E01               	movlw	1
  4488  000E0A  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4489  000E0C  2A1F               	incf	??_setMotorPWM,f,c
  4490  000E0E  D002               	goto	u2064
  4491  000E10                     u2065:
  4492  000E10  90D8               	bcf	status,0,c
  4493  000E12  3620               	rlcf	??_setMotorPWM+1,f,c
  4494  000E14                     u2064:
  4495  000E14  2E1F               	decfsz	??_setMotorPWM,f,c
  4496  000E16  D7FC               	goto	u2065
  4497  000E18  5020               	movf	??_setMotorPWM+1,w,c
  4498  000E1A  0AFF               	xorlw	255
  4499  000E1C  148A               	andwf	3978,w,c	;volatile
  4500  000E1E  6E8A               	movwf	3978,c	;volatile
  4501  000E20                     l139:
  4502                           
  4503                           ;dc_motor.c: 40: }
  4504                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4505  000E20  EE20 F002          	lfsr	2,2
  4506  000E24  501D               	movf	setMotorPWM@m,w,c
  4507  000E26  26D9               	addwf	fsr2l,f,c
  4508  000E28  501E               	movf	setMotorPWM@m+1,w,c
  4509  000E2A  22DA               	addwfc	fsr2h,f,c
  4510  000E2C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4511  000E30  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4512  000E34  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4513  000E38  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4514  000E3C  4424               	rlncf	setMotorPWM@PWMduty,w,c
  4515  000E3E  46E8               	rlncf	wreg,f,c
  4516  000E40  0BFC               	andlw	252
  4517  000E42  6EDF               	movwf	indf2,c
  4518                           
  4519                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4520  000E44  EE20 F004          	lfsr	2,4
  4521  000E48  501D               	movf	setMotorPWM@m,w,c
  4522  000E4A  26D9               	addwf	fsr2l,f,c
  4523  000E4C  501E               	movf	setMotorPWM@m+1,w,c
  4524  000E4E  22DA               	addwfc	fsr2h,f,c
  4525  000E50  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4526  000E54  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4527  000E58  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4528  000E5C  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4529  000E60  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4530  000E64  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4531  000E68  0E06               	movlw	6
  4532  000E6A  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  4533  000E6C                     u2075:
  4534  000E6C  3422               	rlcf	??_setMotorPWM+3,w,c
  4535  000E6E  3222               	rrcf	??_setMotorPWM+3,f,c
  4536  000E70  3221               	rrcf	??_setMotorPWM+2,f,c
  4537  000E72  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4538  000E74  D7FB               	goto	u2075
  4539  000E76  5021               	movf	??_setMotorPWM+2,w,c
  4540  000E78  6EDF               	movwf	indf2,c
  4541  000E7A  0012               	return		;funcret
  4542  000E7C                     __end_of_setMotorPWM:
  4543                           	opt stack 0
  4544                           tblptru	equ	0xFF8
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           intcon	equ	0xFF2
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           indf1	equ	0xFE7
  4551                           fsr1h	equ	0xFE2
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function ___wmul *****************
  4561 ;; Defined at:
  4562 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  multiplier      2   14[COMRAM] unsigned int 
  4565 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;  product         2   18[COMRAM] unsigned int 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  2   14[COMRAM] unsigned int 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0, prodl, prodh
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4577 ;;      Params:         4       0       0       0
  4578 ;;      Locals:         2       0       0       0
  4579 ;;      Temps:          0       0       0       0
  4580 ;;      Totals:         6       0       0       0
  4581 ;;Total ram usage:        6 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    1
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_setMotorPWM
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text19
  4592  001514                     __ptext19:
  4593                           	opt stack 0
  4594  001514                     ___wmul:
  4595                           	opt stack 26
  4596                           
  4597                           ;incstack = 0
  4598  001514  500F               	movf	___wmul@multiplier,w,c
  4599  001516  0211               	mulwf	___wmul@multiplicand,c
  4600  001518  CFF3 F013          	movff	prodl,___wmul@product
  4601  00151C  CFF4 F014          	movff	prodh,___wmul@product+1
  4602  001520  500F               	movf	___wmul@multiplier,w,c
  4603  001522  0212               	mulwf	___wmul@multiplicand+1,c
  4604  001524  50F3               	movf	prodl,w,c
  4605  001526  2614               	addwf	___wmul@product+1,f,c
  4606  001528  5010               	movf	___wmul@multiplier+1,w,c
  4607  00152A  0211               	mulwf	___wmul@multiplicand,c
  4608  00152C  50F3               	movf	prodl,w,c
  4609  00152E  2614               	addwf	___wmul@product+1,f,c
  4610  001530  C013  F00F         	movff	___wmul@product,?___wmul
  4611  001534  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4612  001538  0012               	return	
  4613  00153A                     __end_of___wmul:
  4614                           	opt stack 0
  4615                           tblptru	equ	0xFF8
  4616                           prodh	equ	0xFF4
  4617                           prodl	equ	0xFF3
  4618                           intcon	equ	0xFF2
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           indf1	equ	0xFE7
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function ___awdiv *****************
  4632 ;; Defined at:
  4633 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  dividend        2   20[COMRAM] int 
  4636 ;;  divisor         2   22[COMRAM] int 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  quotient        2   26[COMRAM] int 
  4639 ;;  sign            1   25[COMRAM] unsigned char 
  4640 ;;  counter         1   24[COMRAM] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  2   20[COMRAM] int 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4650 ;;      Params:         4       0       0       0
  4651 ;;      Locals:         4       0       0       0
  4652 ;;      Temps:          0       0       0       0
  4653 ;;      Totals:         8       0       0       0
  4654 ;;Total ram usage:        8 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    1
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		_setMotorPWM
  4661 ;;		_ScanWithRange
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text20
  4666  001142                     __ptext20:
  4667                           	opt stack 0
  4668  001142                     ___awdiv:
  4669                           	opt stack 26
  4670                           
  4671                           ;incstack = 0
  4672  001142  0E00               	movlw	0
  4673  001144  6E1A               	movwf	___awdiv@sign,c
  4674  001146  AE18               	btfss	___awdiv@divisor+1,7,c
  4675  001148  D006               	goto	l2570
  4676  00114A  6C17               	negf	___awdiv@divisor,c
  4677  00114C  1E18               	comf	___awdiv@divisor+1,f,c
  4678  00114E  B0D8               	btfsc	status,0,c
  4679  001150  2A18               	incf	___awdiv@divisor+1,f,c
  4680  001152  0E01               	movlw	1
  4681  001154  6E1A               	movwf	___awdiv@sign,c
  4682  001156                     l2570:
  4683  001156  AE16               	btfss	___awdiv@dividend+1,7,c
  4684  001158  D006               	goto	l2576
  4685  00115A  6C15               	negf	___awdiv@dividend,c
  4686  00115C  1E16               	comf	___awdiv@dividend+1,f,c
  4687  00115E  B0D8               	btfsc	status,0,c
  4688  001160  2A16               	incf	___awdiv@dividend+1,f,c
  4689  001162  0E01               	movlw	1
  4690  001164  1A1A               	xorwf	___awdiv@sign,f,c
  4691  001166                     l2576:
  4692  001166  0E00               	movlw	0
  4693  001168  6E1C               	movwf	___awdiv@quotient+1,c
  4694  00116A  0E00               	movlw	0
  4695  00116C  6E1B               	movwf	___awdiv@quotient,c
  4696  00116E  5017               	movf	___awdiv@divisor,w,c
  4697  001170  1018               	iorwf	___awdiv@divisor+1,w,c
  4698  001172  B4D8               	btfsc	status,2,c
  4699  001174  D01C               	goto	l2598
  4700  001176  0E01               	movlw	1
  4701  001178  6E19               	movwf	___awdiv@counter,c
  4702  00117A  D004               	goto	l2584
  4703  00117C                     l2582:
  4704  00117C  90D8               	bcf	status,0,c
  4705  00117E  3617               	rlcf	___awdiv@divisor,f,c
  4706  001180  3618               	rlcf	___awdiv@divisor+1,f,c
  4707  001182  2A19               	incf	___awdiv@counter,f,c
  4708  001184                     l2584:
  4709  001184  AE18               	btfss	___awdiv@divisor+1,7,c
  4710  001186  D7FA               	goto	l2582
  4711  001188                     l2586:
  4712  001188  90D8               	bcf	status,0,c
  4713  00118A  361B               	rlcf	___awdiv@quotient,f,c
  4714  00118C  361C               	rlcf	___awdiv@quotient+1,f,c
  4715  00118E  5017               	movf	___awdiv@divisor,w,c
  4716  001190  5C15               	subwf	___awdiv@dividend,w,c
  4717  001192  5018               	movf	___awdiv@divisor+1,w,c
  4718  001194  5816               	subwfb	___awdiv@dividend+1,w,c
  4719  001196  A0D8               	btfss	status,0,c
  4720  001198  D005               	goto	l2594
  4721  00119A  5017               	movf	___awdiv@divisor,w,c
  4722  00119C  5E15               	subwf	___awdiv@dividend,f,c
  4723  00119E  5018               	movf	___awdiv@divisor+1,w,c
  4724  0011A0  5A16               	subwfb	___awdiv@dividend+1,f,c
  4725  0011A2  801B               	bsf	___awdiv@quotient,0,c
  4726  0011A4                     l2594:
  4727  0011A4  90D8               	bcf	status,0,c
  4728  0011A6  3218               	rrcf	___awdiv@divisor+1,f,c
  4729  0011A8  3217               	rrcf	___awdiv@divisor,f,c
  4730  0011AA  2E19               	decfsz	___awdiv@counter,f,c
  4731  0011AC  D7ED               	goto	l2586
  4732  0011AE                     l2598:
  4733  0011AE  501A               	movf	___awdiv@sign,w,c
  4734  0011B0  B4D8               	btfsc	status,2,c
  4735  0011B2  D004               	goto	l2602
  4736  0011B4  6C1B               	negf	___awdiv@quotient,c
  4737  0011B6  1E1C               	comf	___awdiv@quotient+1,f,c
  4738  0011B8  B0D8               	btfsc	status,0,c
  4739  0011BA  2A1C               	incf	___awdiv@quotient+1,f,c
  4740  0011BC                     l2602:
  4741  0011BC  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4742  0011C0  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4743  0011C4  0012               	return	
  4744  0011C6                     __end_of___awdiv:
  4745                           	opt stack 0
  4746                           tblptru	equ	0xFF8
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           indf1	equ	0xFE7
  4753                           fsr1h	equ	0xFE2
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _grabRightIR *****************
  4763 ;; Defined at:
  4764 ;;		line 74 in file "IR_Reading.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4769 ;;  i               1   21[COMRAM] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  2   14[COMRAM] unsigned int 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4779 ;;      Params:         2       0       0       0
  4780 ;;      Locals:         3       0       0       0
  4781 ;;      Temps:          3       0       0       0
  4782 ;;      Totals:         8       0       0       0
  4783 ;;Total ram usage:        8 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    1
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_ScanIR
  4790 ;;		_ScanWithRange
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text21
  4795  0011C6                     __ptext21:
  4796                           	opt stack 0
  4797  0011C6                     _grabRightIR:
  4798                           	opt stack 28
  4799                           
  4800                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4801                           
  4802                           ;incstack = 0
  4803  0011C6  0E00               	movlw	0
  4804  0011C8  6E15               	movwf	grabRightIR@IR_signal+1,c
  4805  0011CA  0E00               	movlw	0
  4806  0011CC  6E14               	movwf	grabRightIR@IR_signal,c
  4807                           
  4808                           ;IR_Reading.c: 77: unsigned char i=0;
  4809  0011CE  0E00               	movlw	0
  4810  0011D0  6E16               	movwf	grabRightIR@i,c
  4811                           
  4812                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4813  0011D2  0E00               	movlw	0
  4814  0011D4  6E16               	movwf	grabRightIR@i,c
  4815  0011D6                     l2692:
  4816  0011D6  0E03               	movlw	3
  4817  0011D8  6416               	cpfsgt	grabRightIR@i,c
  4818  0011DA  D001               	goto	l2696
  4819  0011DC  D020               	goto	l2702
  4820  0011DE                     l2696:
  4821                           
  4822                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  4823  0011DE  5069               	movf	3945,w,c	;volatile
  4824  0011E0  6E11               	movwf	??_grabRightIR& (0+255),c
  4825  0011E2  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  4826  0011E4  0E06               	movlw	6
  4827  0011E6                     u2215:
  4828  0011E6  90D8               	bcf	status,0,c
  4829  0011E8  3611               	rlcf	??_grabRightIR,f,c
  4830  0011EA  3612               	rlcf	??_grabRightIR+1,f,c
  4831  0011EC  2EE8               	decfsz	wreg,f,c
  4832  0011EE  D7FB               	goto	u2215
  4833  0011F0  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  4834  0011F4  90D8               	bcf	status,0,c
  4835  0011F6  3213               	rrcf	??_grabRightIR+2,f,c
  4836  0011F8  90D8               	bcf	status,0,c
  4837  0011FA  3213               	rrcf	??_grabRightIR+2,f,c
  4838  0011FC  5013               	movf	??_grabRightIR+2,w,c
  4839  0011FE  1211               	iorwf	??_grabRightIR,f,c
  4840  001200  0E00               	movlw	0
  4841  001202  1212               	iorwf	??_grabRightIR+1,f,c
  4842  001204  5011               	movf	??_grabRightIR,w,c
  4843  001206  2614               	addwf	grabRightIR@IR_signal,f,c
  4844  001208  5012               	movf	??_grabRightIR+1,w,c
  4845  00120A  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  4846                           
  4847                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4848  00120C  0E82               	movlw	130
  4849  00120E  6E11               	movwf	??_grabRightIR& (0+255),c
  4850  001210  0EDE               	movlw	222
  4851  001212                     u2927:
  4852  001212  2EE8               	decfsz	wreg,f,c
  4853  001214  D7FE               	goto	u2927
  4854  001216  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  4855  001218  D7FC               	goto	u2927
  4856  00121A  2A16               	incf	grabRightIR@i,f,c
  4857  00121C  D7DC               	goto	l2692
  4858  00121E                     l2702:
  4859                           
  4860                           ;IR_Reading.c: 83: }
  4861                           ;IR_Reading.c: 85: return IR_signal>>2;
  4862  00121E  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  4863  001222  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4864  001226  90D8               	bcf	status,0,c
  4865  001228  3212               	rrcf	??_grabRightIR+1,f,c
  4866  00122A  3211               	rrcf	??_grabRightIR,f,c
  4867  00122C  90D8               	bcf	status,0,c
  4868  00122E  3212               	rrcf	??_grabRightIR+1,f,c
  4869  001230  3211               	rrcf	??_grabRightIR,f,c
  4870  001232  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  4871  001236  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  4872  00123A  0012               	return	
  4873  00123C                     __end_of_grabRightIR:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           indf1	equ	0xFE7
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _grabLeftIR *****************
  4892 ;; Defined at:
  4893 ;;		line 90 in file "IR_Reading.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4898 ;;  i               1   21[COMRAM] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  2   14[COMRAM] unsigned int 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4908 ;;      Params:         2       0       0       0
  4909 ;;      Locals:         3       0       0       0
  4910 ;;      Temps:          3       0       0       0
  4911 ;;      Totals:         8       0       0       0
  4912 ;;Total ram usage:        8 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    1
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_ScanIR
  4919 ;;		_ScanWithRange
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text22
  4924  00123C                     __ptext22:
  4925                           	opt stack 0
  4926  00123C                     _grabLeftIR:
  4927                           	opt stack 28
  4928                           
  4929                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  4930                           
  4931                           ;incstack = 0
  4932  00123C  0E00               	movlw	0
  4933  00123E  6E15               	movwf	grabLeftIR@IR_signal+1,c
  4934  001240  0E00               	movlw	0
  4935  001242  6E14               	movwf	grabLeftIR@IR_signal,c
  4936                           
  4937                           ;IR_Reading.c: 93: unsigned char i=0;
  4938  001244  0E00               	movlw	0
  4939  001246  6E16               	movwf	grabLeftIR@i,c
  4940                           
  4941                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  4942  001248  0E00               	movlw	0
  4943  00124A  6E16               	movwf	grabLeftIR@i,c
  4944  00124C                     l2676:
  4945  00124C  0E03               	movlw	3
  4946  00124E  6416               	cpfsgt	grabLeftIR@i,c
  4947  001250  D001               	goto	l2680
  4948  001252  D020               	goto	l2686
  4949  001254                     l2680:
  4950                           
  4951                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  4952  001254  5067               	movf	3943,w,c	;volatile
  4953  001256  6E11               	movwf	??_grabLeftIR& (0+255),c
  4954  001258  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  4955  00125A  0E06               	movlw	6
  4956  00125C                     u2185:
  4957  00125C  90D8               	bcf	status,0,c
  4958  00125E  3611               	rlcf	??_grabLeftIR,f,c
  4959  001260  3612               	rlcf	??_grabLeftIR+1,f,c
  4960  001262  2EE8               	decfsz	wreg,f,c
  4961  001264  D7FB               	goto	u2185
  4962  001266  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  4963  00126A  90D8               	bcf	status,0,c
  4964  00126C  3213               	rrcf	??_grabLeftIR+2,f,c
  4965  00126E  90D8               	bcf	status,0,c
  4966  001270  3213               	rrcf	??_grabLeftIR+2,f,c
  4967  001272  5013               	movf	??_grabLeftIR+2,w,c
  4968  001274  1211               	iorwf	??_grabLeftIR,f,c
  4969  001276  0E00               	movlw	0
  4970  001278  1212               	iorwf	??_grabLeftIR+1,f,c
  4971  00127A  5011               	movf	??_grabLeftIR,w,c
  4972  00127C  2614               	addwf	grabLeftIR@IR_signal,f,c
  4973  00127E  5012               	movf	??_grabLeftIR+1,w,c
  4974  001280  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  4975                           
  4976                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  4977  001282  0E82               	movlw	130
  4978  001284  6E11               	movwf	??_grabLeftIR& (0+255),c
  4979  001286  0EDE               	movlw	222
  4980  001288                     u2937:
  4981  001288  2EE8               	decfsz	wreg,f,c
  4982  00128A  D7FE               	goto	u2937
  4983  00128C  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  4984  00128E  D7FC               	goto	u2937
  4985  001290  2A16               	incf	grabLeftIR@i,f,c
  4986  001292  D7DC               	goto	l2676
  4987  001294                     l2686:
  4988                           
  4989                           ;IR_Reading.c: 99: }
  4990                           ;IR_Reading.c: 101: return IR_signal>>2;
  4991  001294  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  4992  001298  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  4993  00129C  90D8               	bcf	status,0,c
  4994  00129E  3212               	rrcf	??_grabLeftIR+1,f,c
  4995  0012A0  3211               	rrcf	??_grabLeftIR,f,c
  4996  0012A2  90D8               	bcf	status,0,c
  4997  0012A4  3212               	rrcf	??_grabLeftIR+1,f,c
  4998  0012A6  3211               	rrcf	??_grabLeftIR,f,c
  4999  0012A8  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  5000  0012AC  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5001  0012B0  0012               	return	
  5002  0012B2                     __end_of_grabLeftIR:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           indf1	equ	0xFE7
  5011                           fsr1h	equ	0xFE2
  5012                           fsr1l	equ	0xFE1
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _delay_tenth_s *****************
  5021 ;; Defined at:
  5022 ;;		line 19 in file "Movement.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  tenth_second    1    wreg     unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  tenth_second    1   15[COMRAM] unsigned char 
  5027 ;;  i               2   16[COMRAM] unsigned int 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5037 ;;      Params:         0       0       0       0
  5038 ;;      Locals:         3       0       0       0
  5039 ;;      Temps:          1       0       0       0
  5040 ;;      Totals:         4       0       0       0
  5041 ;;Total ram usage:        4 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    1
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_main
  5048 ;;		_ScanIR
  5049 ;;		_ScanWithRange
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text23
  5054  0013EE                     __ptext23:
  5055                           	opt stack 0
  5056  0013EE                     _delay_tenth_s:
  5057                           	opt stack 29
  5058                           
  5059                           ;incstack = 0
  5060                           ;delay_tenth_s@tenth_seconds stored from wreg
  5061  0013EE  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  5062                           
  5063                           ;Movement.c: 20: unsigned int i=0;
  5064  0013F0  0E00               	movlw	0
  5065  0013F2  6E12               	movwf	delay_tenth_s@i+1,c
  5066  0013F4  0E00               	movlw	0
  5067  0013F6  6E11               	movwf	delay_tenth_s@i,c
  5068                           
  5069                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  5070  0013F8  0E00               	movlw	0
  5071  0013FA  6E12               	movwf	delay_tenth_s@i+1,c
  5072  0013FC  0E01               	movlw	1
  5073  0013FE  6E11               	movwf	delay_tenth_s@i,c
  5074  001400  D009               	goto	l2660
  5075  001402                     l2656:
  5076                           
  5077                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  5078  001402  0E82               	movlw	130
  5079  001404  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  5080  001406  0EDE               	movlw	222
  5081  001408                     u2947:
  5082  001408  2EE8               	decfsz	wreg,f,c
  5083  00140A  D7FE               	goto	u2947
  5084  00140C  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  5085  00140E  D7FC               	goto	u2947
  5086  001410  4A11               	infsnz	delay_tenth_s@i,f,c
  5087  001412  2A12               	incf	delay_tenth_s@i+1,f,c
  5088  001414                     l2660:
  5089  001414  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  5090  001416  0D02               	mullw	2
  5091  001418  5011               	movf	delay_tenth_s@i,w,c
  5092  00141A  5CF3               	subwf	prodl,w,c
  5093  00141C  5012               	movf	delay_tenth_s@i+1,w,c
  5094  00141E  58F4               	subwfb	prodh,w,c
  5095  001420  A0D8               	btfss	status,0,c
  5096  001422  0012               	return	
  5097  001424  D7EE               	goto	l2656
  5098  001426                     __end_of_delay_tenth_s:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           indf1	equ	0xFE7
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function _InterruptHandlerHigh *****************
  5117 ;; Defined at:
  5118 ;;		line 17 in file "main.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;		None
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;		None
  5123 ;; Return value:  Size  Location     Type
  5124 ;;		None               void
  5125 ;; Registers used:
  5126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5132 ;;      Params:         0       0       0       0
  5133 ;;      Locals:         0       0       0       0
  5134 ;;      Temps:         14       0       0       0
  5135 ;;      Totals:        14       0       0       0
  5136 ;;Total ram usage:       14 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		Interrupt level 2
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	intcode
  5146  000008                     __pintcode:
  5147                           	opt stack 0
  5148  000008                     _InterruptHandlerHigh:
  5149                           	opt stack 25
  5150                           
  5151                           ;incstack = 0
  5152  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5153  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  5154  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  5155  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  5156  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  5157  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  5158  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  5159  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  5160  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  5161  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  5162  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  5163  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  5164  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  5165  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  5166  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  5167                           
  5168                           ;main.c: 19: if (PIR1bits.RCIF) {
  5169  000042  AA9E               	btfss	3998,5,c	;volatile
  5170  000044  D016               	goto	i2l66
  5171                           
  5172                           ;main.c: 20: ReceivedString[i]=RCREG;
  5173  000046  504D               	movf	_i,w,c	;volatile
  5174  000048  0D01               	mullw	1
  5175  00004A  0EEC               	movlw	low _ReceivedString
  5176  00004C  24F3               	addwf	prodl,w,c
  5177  00004E  6ED9               	movwf	fsr2l,c
  5178  000050  0E01               	movlw	high _ReceivedString
  5179  000052  20F4               	addwfc	prodh,w,c
  5180  000054  6EDA               	movwf	fsr2h,c
  5181  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  5182                           
  5183                           ;main.c: 21: RFID_Read=1;
  5184  00005A  0E01               	movlw	1
  5185  00005C  0101               	movlb	1	; () banked
  5186  00005E  6FEB               	movwf	_RFID_Read& (0+255),b	;volatile
  5187                           
  5188                           ; BSR set to: 1
  5189                           ;main.c: 22: if (i==15){
  5190  000060  0E0F               	movlw	15
  5191  000062  184D               	xorwf	_i,w,c	;volatile
  5192  000064  A4D8               	btfss	status,2,c
  5193  000066  D003               	goto	i2l2374
  5194                           
  5195                           ; BSR set to: 1
  5196                           ;main.c: 23: i=0;
  5197  000068  0E00               	movlw	0
  5198  00006A  6E4D               	movwf	_i,c	;volatile
  5199                           
  5200                           ;main.c: 24: }else{
  5201  00006C  D001               	goto	i2l2376
  5202  00006E                     i2l2374:
  5203                           
  5204                           ; BSR set to: 1
  5205                           ;main.c: 25: i++;
  5206  00006E  2A4D               	incf	_i,f,c	;volatile
  5207  000070                     i2l2376:
  5208                           
  5209                           ; BSR set to: 1
  5210                           ;main.c: 26: }
  5211                           ;main.c: 27: PIR1bits.RCIF=0;
  5212  000070  9A9E               	bcf	3998,5,c	;volatile
  5213  000072                     i2l66:
  5214  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  5215  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  5216  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  5217  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  5218  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  5219  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  5220  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  5221  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  5222  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  5223  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  5224  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  5225  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  5226  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  5227  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  5228  0000AA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5229  0000AC  0011               	retfie		f
  5230  0000AE                     __end_of_InterruptHandlerHigh:
  5231                           	opt stack 0
  5232  0000                     pclatu	equ	0xFFB
  5233                           pclath	equ	0xFFA
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           postinc0	equ	0xFEE
  5242                           fsr0h	equ	0xFEA
  5243                           fsr0l	equ	0xFE9
  5244                           wreg	equ	0xFE8
  5245                           indf1	equ	0xFE7
  5246                           fsr1h	equ	0xFE2
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           pclatu	equ	0xFFB
  5255                           pclath	equ	0xFFA
  5256                           tblptru	equ	0xFF8
  5257                           tblptrh	equ	0xFF7
  5258                           tblptrl	equ	0xFF6
  5259                           tablat	equ	0xFF5
  5260                           prodh	equ	0xFF4
  5261                           prodl	equ	0xFF3
  5262                           intcon	equ	0xFF2
  5263                           postinc0	equ	0xFEE
  5264                           fsr0h	equ	0xFEA
  5265                           fsr0l	equ	0xFE9
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277                           	psect	rparam
  5278  0000                     pclatu	equ	0xFFB
  5279                           pclath	equ	0xFFA
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           postinc0	equ	0xFEE
  5288                           fsr0h	equ	0xFEA
  5289                           fsr0l	equ	0xFE9
  5290                           wreg	equ	0xFE8
  5291                           indf1	equ	0xFE7
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           postdec2	equ	0xFDD
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301                           	psect	temp
  5302  00004E                     btemp:
  5303                           	opt stack 0
  5304  00004E                     	ds	1
  5305  0000                     int$flags	set	btemp
  5306                           pclatu	equ	0xFFB
  5307                           pclath	equ	0xFFA
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           postinc0	equ	0xFEE
  5316                           fsr0h	equ	0xFEA
  5317                           fsr0l	equ	0xFE9
  5318                           wreg	equ	0xFE8
  5319                           indf1	equ	0xFE7
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           indf2	equ	0xFDF
  5323                           postinc2	equ	0xFDE
  5324                           postdec2	equ	0xFDD
  5325                           fsr2h	equ	0xFDA
  5326                           fsr2l	equ	0xFD9
  5327                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      77
    BANK0           160     21      25
    BANK1           256    235     252
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               340   340      0  107883
                                             62 COMRAM     2     2      0
                                              0 BANK1    235   235      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             20 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             18 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             14 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    4246
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       30    23      7   35085
                                             46 COMRAM     9     2      7
                                              0 BANK0     21    21      0
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   31334
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4   11110
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4   11880
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    6494
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3660
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2334
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1177
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EB      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      19       5       15.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4D       1       81.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     162       3        0.0%
DATA                 0      0     162      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 13:24:35 2018

                        ?_grabRightIR 000F                                     _i 004D  
                                  l69 07B8                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 01C8  
                                 l139 0E20                                   l169 1304  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0164  
                        main@MoveType 0100                                  l2032 13DC  
                                l3002 0D44                                  l2042 1502  
                                l2028 13CA                                  l3102 09B6  
                                l3110 09DA                                  l3030 07BE  
                                l3050 0846                                  l3140 0B20  
                                l3132 0A96                                  l3124 0A46  
                                l3108 09D2                                  l3118 0A1E  
                                l3062 08AC                                  l3054 087C  
                                l2360 10AE                                  l2352 105E  
                                l3072 08EC                                  l2602 11BC  
                                l3138 0AF4                                  l3090 096E  
                                l3058 089A                                  l3146 0B26  
                                l2612 0DF8                                  l2620 12CC  
                                l2348 1056                                  l3076 0908  
                                l2702 121E                                  l3086 0964  
                                l2624 12E4                                  l2616 12B4  
                                l3096 09A6                                  l2570 1156  
                                l2642 10E4                                  l2634 10B4  
                                l3098 09AC                                  l2660 1414  
                                l2812 03F8                                  l2804 03BA  
                                l2582 117C                                  l2638 10CC  
                                l2656 1402                                  l2680 1254  
                                l2584 1184                                  l2576 1166  
                                l2648 1104                                  l2904 068E  
                                l2840 04BC                                  l2920 0712  
                                l2594 11A4                                  l2586 1188  
                                l2826 0480                                  l2818 03FC  
                                l2676 124C                                  l2692 11D6  
                                l2780 02D0                                  l2772 0254  
                                l2686 1294                                  l2598 11AE  
                                l2942 0C10                                  l2696 11DE  
                                l2872 05AC                                  l2848 0540  
                                l2856 0556                                  l2776 0292  
                                l2962 0C66                                  l2866 05A8  
                                l2956 0C62                                  l2948 0C14  
                                l2796 0336                                  l2990 0D08  
                                l2974 0CB6                                  l2984 0D04  
                                l2888 05FC                                  l2898 068A  
                                u1205 0E94                                  u1215 0EB2  
                                u1225 0EC0                                  u1235 0EE0  
                                u1245 0EEE                                  u2054 0DBC  
                                _LATB 000F8A                                  u2215 11E6  
                                u2055 0DB8                                  u1255 0F1E  
                                u2064 0E14                                  u2065 0E10  
                                u2075 0E6C                                  u1195 0E86  
                                u1275 14C8                                  u1276 14CA  
                                u1365 14FE                                  u1366 1500  
                                u2600 0932                                  u2185 125C  
                                u1385 1510                                  u1386 1512  
                                u2610 0944                                  u2602 0934  
                                u2612 0946                                  u2807 0FA8  
                                u2817 0FBA                                  u2907 10FE  
                                u2827 0FD0                                  u2917 12FE  
                                u2837 0FE4                                  u2757 0F54  
                                u2927 1212                                  u2847 0FF6  
                                u2767 0F6A                                  u2937 1288  
                                u2857 14D6                                  u2777 0F7A  
                                u2947 1408                                  u2867 14E6  
                                u2787 0F88                                  u2877 0F3A  
                                u2797 0F96                                  u2887 1580  
                                u2897 13D0                                  i2l66 0072  
                                _main 0716                         main@ScanAngle 01D4  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 004E                                  _stop 10B2  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00AE  
                      delay_s@seconds 0010                          ___param_bank 000010  
                     __end_of_SendLCD 14EE                    ScanWithRange@F3721 0049  
                  ScanWithRange@F3723 0075                    ScanWithRange@F3719 0045  
                         ScanIR@F3710 0041                                 ?_main 0001  
                     __end_of___awdiv 11C6                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                         _initRFID$1317 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _E_TOG 157C                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 13EE                       __end_of_initLCD 0FFE  
                               main@i 01D7                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 0664  
                     __initialization 148E                          __end_of_main 0B44  
                        __end_of_stop 1142                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 1514  
                 VerifySignal@hexByte 0018                                ??_main 003F  
                              ??_stop 002A                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 001D                __size_of_fullSpeedBack 0036  
                    ___awdiv@dividend 0015                                i2l2374 006E  
                      __CFG_WDTEN$OFF 000000                                i2l2376 0070  
               __end_of_delay_tenth_s 1426                                _LCDout 0E7C  
                         SendLCD@Byte 0014                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B                           SendLCD@type 0013  
                           ??_SendLCD 0014                                _ScanIR 0B44  
                              ___wmul 1514                             ??___awdiv 0019  
                    __end_of_initRFID 157C                                _initIR 153A  
                __size_of_grabRightIR 0076                                clear_0 1494  
                              clear_1 14AA                      ___awdiv@quotient 001B  
                           ??_delay_s 000F                                main@mL 01D9  
                              main@mR 01E2                        ??_initMotorPWM 000F  
                           ??_initLCD 0015                         _ScanWithRange 00B2  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 13B6  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 14B0  
                       ___rparam_used 000001                         __end_of_E_TOG 158A  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1426  
                      ?_ScanWithRange 002F                  VerifySignal@checksum 0017  
                             ??_E_TOG 000F         __size_of_InterruptHandlerHigh 00A6  
          delay_tenth_s@tenth_seconds 0010                            __pbssBANK0 0075  
                          __pbssBANK1 01EB                               ?_LCDout 0001  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 123C  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                     __size_of_LCDout 00C6                          _enableSensor 14EE  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 148E  
                             _SendLCD 14BE                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 0204  
                             ___awdiv 1142                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 148E  
                     ??_ScanWithRange 0036                               _delay_s 13B6  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 0716                               __ptext1 155C  
                             __ptext2 145C                               __ptext3 0F42  
                             __ptext4 14BE                               __ptext5 0E7C  
                             __ptext6 157C                               __ptext7 153A  
                             __ptext8 1426                               __ptext9 14EE  
                             _initLCD 0F42                          LCDout@number 0012  
                       ?_VerifySignal 000F                  end_of_initialization 14B0  
                  setMotorPWM@PWMduty 0024                            ??_initRFID 000F  
                       __Lmediumconst 0000                    ScanIR@SensorResult 003B  
                     ??_fullSpeedBack 002F                             _RFID_Read 01EB  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 136C  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0011                      fullSpeedAhead@mL 0026  
                    fullSpeedAhead@mR 0028         ScanIR@DirectionFoundTolerance 0039  
                      __end_of_LCDout 0F42                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 0D48  
                      _fullSpeedAhead 12B2                        _ReceivedString 01EC  
                      __end_of___wmul 153A                           _BAUDCONbits 000FAA  
                      __end_of_initIR 155C                __size_of_delay_tenth_s 0038  
                 start_initialization 148E                    VerifySignal@Signal 000F  
               __size_of_initMotorPWM 0032                              ??_LCDout 000F  
        __end_of_InterruptHandlerHigh 00AE                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 1322                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 123C                          _initMotorPWM 145C  
                         __pbssCOMRAM 0041                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100      ScanWithRange@DirectionFoundLimit 0065  
                       _delay_tenth_s 13EE                     __size_of_initRFID 0020  
   ScanWithRange@ClearSignalTolerance 0063                              ?_SendLCD 0013  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                __end_of_VerifySignal 10B2                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                      __size_of_E_TOG 000E                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 006D            ScanWithRange@SensorResultL 0069  
          ScanWithRange@SensorResultR 0071                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 11C6                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 0716  
                        setMotorPWM@m 001D                 ScanWithRange@MoveTime 0034  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 1322            ScanIR@ClearSignalTolerance 0035  
                 __end_of_setMotorPWM 0E7C                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 145C                    __end_of_grabLeftIR 12B2  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                    __size_of_initLCD 00BC                            ?_turnRight 002B  
                            __ptext10 13B6                              __ptext11 0FFE  
                            __ptext20 1142                              __ptext12 00B2  
                            __ptext21 11C6                              __ptext13 0B44  
                            __ptext22 123C                              __ptext14 1322  
                            __ptext23 13EE                              __ptext15 136C  
                            __ptext16 10B2                              __ptext17 12B2  
                            __ptext18 0D48                              __ptext19 1514  
                     ??_delay_tenth_s 000F                              _initRFID 155C  
                       __size_of_main 042E             ScanWithRange@ResultFalseC 0061  
                  main@DirectionFound 01D6             ScanWithRange@ResultFalseL 0060  
           ScanWithRange@ResultFalseR 0062                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
               __size_of_VerifySignal 00B4                              delay_s@i 0011  
                            int$flags 004E                              main@Move 01D8  
                            main@mode 01D5                              main@test 01D2  
                            _turnLeft 136C                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                         VerifySignal@i 001A  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 0D48                          _VerifySignal 0FFE  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0067                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
