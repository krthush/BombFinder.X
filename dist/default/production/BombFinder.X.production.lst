

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 06 15:48:24 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1
    21                           	psect	text14,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _ADCON0	set	4034
    25  0000                     _ADCON1	set	4033
    26  0000                     _ADCON2	set	4032
    27  0000                     _ANSEL0bits	set	4024
    28  0000                     _LATAbits	set	3977
    29  0000                     _LATB	set	3978
    30  0000                     _LATCbits	set	3979
    31  0000                     _LATDbits	set	3980
    32  0000                     _OSCCON	set	4051
    33  0000                     _OSCCONbits	set	4051
    34  0000                     _PTCON0	set	3967
    35  0000                     _PTCON1	set	3966
    36  0000                     _PTPERH	set	3962
    37  0000                     _PTPERL	set	3963
    38  0000                     _PWMCON0	set	3951
    39  0000                     _PWMCON1	set	3950
    40  0000                     _TRISAbits	set	3986
    41  0000                     _TRISBbits	set	3987
    42  0000                     _TRISCbits	set	3988
    43  0000                     _TRISDbits	set	3989
    44  0000                     _PDC0H	set	3960
    45  0000                     _PDC0L	set	3961
    46  0000                     _PDC1H	set	3958
    47  0000                     _PDC1L	set	3959
    48                           
    49                           ; #config settings
    50  0000                     
    51                           	psect	cinit
    52  0018E8                     __pcinit:
    53                           	opt stack 0
    54  0018E8                     start_initialization:
    55                           	opt stack 0
    56  0018E8                     __initialization:
    57                           	opt stack 0
    58  0018E8                     end_of_initialization:
    59                           	opt stack 0
    60  0018E8                     __end_of__initialization:
    61                           	opt stack 0
    62  0018E8  0100               	movlb	0
    63  0018EA  EF5A  F00F         	goto	_main	;jump to C main() function
    64                           
    65                           	psect	cstackCOMRAM
    66  000001                     __pcstackCOMRAM:
    67                           	opt stack 0
    68  000001                     ??_delay_s:
    69  000001                     ??_LCDout:
    70  000001                     ?___wmul:
    71                           	opt stack 0
    72  000001                     ___wmul@multiplier:
    73                           	opt stack 0
    74                           
    75                           ; 2 bytes @ 0x0
    76  000001                     	ds	2
    77  000003                     delay_s@seconds:
    78                           	opt stack 0
    79  000003                     ___wmul@multiplicand:
    80                           	opt stack 0
    81                           
    82                           ; 2 bytes @ 0x2
    83  000003                     	ds	1
    84  000004                     LCDout@number:
    85                           	opt stack 0
    86  000004                     delay_s@i:
    87                           	opt stack 0
    88                           
    89                           ; 2 bytes @ 0x3
    90  000004                     	ds	1
    91  000005                     SendLCD@type:
    92                           	opt stack 0
    93  000005                     ___wmul@product:
    94                           	opt stack 0
    95                           
    96                           ; 2 bytes @ 0x4
    97  000005                     	ds	1
    98  000006                     SendLCD@Byte:
    99                           	opt stack 0
   100  000006                     delay_s@j:
   101                           	opt stack 0
   102                           
   103                           ; 2 bytes @ 0x5
   104  000006                     	ds	1
   105  000007                     ??_LCD_Init:
   106  000007                     ?___awdiv:
   107                           	opt stack 0
   108  000007                     ___awdiv@dividend:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x6
   112  000007                     	ds	2
   113  000009                     ___awdiv@divisor:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0x8
   117  000009                     	ds	2
   118  00000B                     ___awdiv@counter:
   119                           	opt stack 0
   120                           
   121                           ; 1 bytes @ 0xA
   122  00000B                     	ds	1
   123  00000C                     ___awdiv@sign:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0xB
   127  00000C                     	ds	1
   128  00000D                     ___awdiv@quotient:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0xC
   132  00000D                     	ds	2
   133  00000F                     setMotorPWM@m:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0xE
   137  00000F                     	ds	2
   138  000011                     ??_setMotorPWM:
   139                           
   140                           ; 0 bytes @ 0x10
   141  000011                     	ds	5
   142  000016                     setMotorPWM@PWMduty:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x15
   146  000016                     	ds	2
   147  000018                     stop@mL:
   148                           	opt stack 0
   149  000018                     fullSpeedAhead@mL:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0x17
   153  000018                     	ds	2
   154  00001A                     stop@mR:
   155                           	opt stack 0
   156  00001A                     fullSpeedAhead@mR:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0x19
   160  00001A                     	ds	2
   161  00001C                     
   162                           ; 0 bytes @ 0x1B
   163  00001C                     	ds	1
   164  00001D                     turnLeft@mL:
   165                           	opt stack 0
   166  00001D                     turnRight@mL:
   167                           	opt stack 0
   168  00001D                     fullSpeedBack@mL:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0x1C
   172  00001D                     	ds	2
   173  00001F                     turnLeft@mR:
   174                           	opt stack 0
   175  00001F                     turnRight@mR:
   176                           	opt stack 0
   177  00001F                     fullSpeedBack@mR:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x1E
   181  00001F                     	ds	2
   182  000021                     main@motorL:
   183                           	opt stack 0
   184                           
   185                           ; 9 bytes @ 0x20
   186  000021                     	ds	9
   187  00002A                     main@motorR:
   188                           	opt stack 0
   189                           
   190                           ; 9 bytes @ 0x29
   191  00002A                     	ds	9
   192                           
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 21 in file "main.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;  motorR          9   41[COMRAM] struct DC_motor
   203 ;;  motorL          9   32[COMRAM] struct DC_motor
   204 ;; Return value:  Size  Location     Type
   205 ;;		None               void
   206 ;; Registers used:
   207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   208 ;; Tracked objects:
   209 ;;		On entry : 0/0
   210 ;;		On exit  : 0/0
   211 ;;		Unchanged: 0/0
   212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   213 ;;      Params:         0       0       0       0
   214 ;;      Locals:        18       0       0       0
   215 ;;      Temps:          0       0       0       0
   216 ;;      Totals:        18       0       0       0
   217 ;;Total ram usage:       18 bytes
   218 ;; Hardware stack levels required when called:    4
   219 ;; This function calls:
   220 ;;		_LCD_Init
   221 ;;		_SendLCD
   222 ;;		_delay_s
   223 ;;		_fullSpeedAhead
   224 ;;		_fullSpeedBack
   225 ;;		_initPWM
   226 ;;		_stop
   227 ;;		_turnLeft
   228 ;;		_turnRight
   229 ;; This function is called by:
   230 ;;		Startup code after reset
   231 ;; This function uses a non-reentrant model
   232 ;;
   233                           
   234                           	psect	text0
   235  001EB4                     __ptext0:
   236                           	opt stack 0
   237  001EB4                     _main:
   238                           	opt stack 27
   239                           
   240                           ;main.c: 23: struct DC_motor motorL, motorR;
   241                           ;main.c: 24: motorL.power=0;
   242                           
   243                           ;incstack = 0
   244  001EB4  0E00               	movlw	0
   245  001EB6  6E21               	movwf	main@motorL,c
   246                           
   247                           ;main.c: 25: motorL.direction=1;
   248  001EB8  0E01               	movlw	1
   249  001EBA  6E22               	movwf	main@motorL+1,c
   250                           
   251                           ;main.c: 26: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   252  001EBC  0E79               	movlw	121
   253  001EBE  6E23               	movwf	main@motorL+2,c
   254  001EC0  0E0F               	movlw	15
   255  001EC2  6E24               	movwf	main@motorL+3,c
   256                           
   257                           ;main.c: 27: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   258  001EC4  0E78               	movlw	120
   259  001EC6  6E25               	movwf	main@motorL+4,c
   260  001EC8  0E0F               	movlw	15
   261  001ECA  6E26               	movwf	main@motorL+5,c
   262                           
   263                           ;main.c: 28: motorL.dir_pin=0;
   264  001ECC  0E00               	movlw	0
   265  001ECE  6E27               	movwf	main@motorL+6,c
   266                           
   267                           ;main.c: 29: motorL.PWMperiod=199;
   268  001ED0  0E00               	movlw	0
   269  001ED2  6E29               	movwf	main@motorL+8,c
   270  001ED4  0EC7               	movlw	199
   271  001ED6  6E28               	movwf	main@motorL+7,c
   272                           
   273                           ;main.c: 31: motorR.power=0;
   274  001ED8  0E00               	movlw	0
   275  001EDA  6E2A               	movwf	main@motorR,c
   276                           
   277                           ;main.c: 32: motorR.direction=1;
   278  001EDC  0E01               	movlw	1
   279  001EDE  6E2B               	movwf	main@motorR+1,c
   280                           
   281                           ;main.c: 33: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   282  001EE0  0E77               	movlw	119
   283  001EE2  6E2C               	movwf	main@motorR+2,c
   284  001EE4  0E0F               	movlw	15
   285  001EE6  6E2D               	movwf	main@motorR+3,c
   286                           
   287                           ;main.c: 34: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   288  001EE8  0E76               	movlw	118
   289  001EEA  6E2E               	movwf	main@motorR+4,c
   290  001EEC  0E0F               	movlw	15
   291  001EEE  6E2F               	movwf	main@motorR+5,c
   292                           
   293                           ;main.c: 35: motorR.dir_pin=2;
   294  001EF0  0E02               	movlw	2
   295  001EF2  6E30               	movwf	main@motorR+6,c
   296                           
   297                           ;main.c: 36: motorR.PWMperiod=199;
   298  001EF4  0E00               	movlw	0
   299  001EF6  6E32               	movwf	main@motorR+8,c
   300  001EF8  0EC7               	movlw	199
   301  001EFA  6E31               	movwf	main@motorR+7,c
   302                           
   303                           ;main.c: 39: TRISBbits.RB0=0;
   304  001EFC  9093               	bcf	3987,0,c	;volatile
   305                           
   306                           ;main.c: 40: TRISBbits.RB1=0;
   307  001EFE  9293               	bcf	3987,1,c	;volatile
   308                           
   309                           ;main.c: 41: TRISBbits.RB2=0;
   310  001F00  9493               	bcf	3987,2,c	;volatile
   311                           
   312                           ;main.c: 42: TRISBbits.RB3=0;
   313  001F02  9693               	bcf	3987,3,c	;volatile
   314                           
   315                           ;main.c: 44: TRISAbits.RA3=1;
   316  001F04  8692               	bsf	3986,3,c	;volatile
   317                           
   318                           ;main.c: 45: ANSEL0bits.ANS3=1;
   319  001F06  86B8               	bsf	4024,3,c	;volatile
   320                           
   321                           ;main.c: 47: ADCON0=0b00001101;
   322  001F08  0E0D               	movlw	13
   323  001F0A  6EC2               	movwf	4034,c	;volatile
   324                           
   325                           ;main.c: 48: ADCON1=0b00000000;
   326  001F0C  0E00               	movlw	0
   327  001F0E  6EC1               	movwf	4033,c	;volatile
   328                           
   329                           ;main.c: 50: ADCON2=0b10101011;
   330  001F10  0EAB               	movlw	171
   331  001F12  6EC0               	movwf	4032,c	;volatile
   332                           
   333                           ;main.c: 52: OSCCON = 0x72;
   334  001F14  0E72               	movlw	114
   335  001F16  6ED3               	movwf	4051,c	;volatile
   336  001F18                     l53:
   337  001F18  A4D3               	btfss	4051,2,c	;volatile
   338  001F1A  D7FE               	goto	l53
   339                           
   340                           ;main.c: 55: initPWM();
   341  001F1C  EC91  F00C         	call	_initPWM	;wreg free
   342                           
   343                           ;main.c: 56: LCD_Init();
   344  001F20  ECFF  F00D         	call	_LCD_Init	;wreg free
   345  001F24                     l1226:
   346                           
   347                           ;main.c: 61: SendLCD('h',1);
   348  001F24  0E01               	movlw	1
   349  001F26  6E05               	movwf	SendLCD@type,c
   350  001F28  0E68               	movlw	104
   351  001F2A  ECA6  F00C         	call	_SendLCD
   352                           
   353                           ;main.c: 63: delay_s(2);
   354  001F2E  0E02               	movlw	2
   355  001F30  EC0F  F00D         	call	_delay_s
   356                           
   357                           ;main.c: 64: stop(&motorL, &motorR);
   358  001F34  0E21               	movlw	low main@motorL
   359  001F36  6E18               	movwf	stop@mL,c
   360  001F38  0E00               	movlw	high main@motorL
   361  001F3A  6E19               	movwf	stop@mL+1,c
   362  001F3C  0E2A               	movlw	low main@motorR
   363  001F3E  6E1A               	movwf	stop@mR,c
   364  001F40  0E00               	movlw	high main@motorR
   365  001F42  6E1B               	movwf	stop@mR+1,c
   366  001F44  ECB7  F00D         	call	_stop	;wreg free
   367                           
   368                           ;main.c: 66: delay_s(2);
   369  001F48  0E02               	movlw	2
   370  001F4A  EC0F  F00D         	call	_delay_s
   371                           
   372                           ;main.c: 67: fullSpeedAhead(&motorL, &motorR);
   373  001F4E  0E21               	movlw	low main@motorL
   374  001F50  6E18               	movwf	fullSpeedAhead@mL,c
   375  001F52  0E00               	movlw	high main@motorL
   376  001F54  6E19               	movwf	fullSpeedAhead@mL+1,c
   377  001F56  0E2A               	movlw	low main@motorR
   378  001F58  6E1A               	movwf	fullSpeedAhead@mR,c
   379  001F5A  0E00               	movlw	high main@motorR
   380  001F5C  6E1B               	movwf	fullSpeedAhead@mR+1,c
   381  001F5E  EC3D  F00D         	call	_fullSpeedAhead	;wreg free
   382                           
   383                           ;main.c: 69: delay_s(2);
   384  001F62  0E02               	movlw	2
   385  001F64  EC0F  F00D         	call	_delay_s
   386                           
   387                           ;main.c: 70: stop(&motorL, &motorR);
   388  001F68  0E21               	movlw	low main@motorL
   389  001F6A  6E18               	movwf	stop@mL,c
   390  001F6C  0E00               	movlw	high main@motorL
   391  001F6E  6E19               	movwf	stop@mL+1,c
   392  001F70  0E2A               	movlw	low main@motorR
   393  001F72  6E1A               	movwf	stop@mR,c
   394  001F74  0E00               	movlw	high main@motorR
   395  001F76  6E1B               	movwf	stop@mR+1,c
   396  001F78  ECB7  F00D         	call	_stop	;wreg free
   397                           
   398                           ;main.c: 72: delay_s(2);
   399  001F7C  0E02               	movlw	2
   400  001F7E  EC0F  F00D         	call	_delay_s
   401                           
   402                           ;main.c: 73: fullSpeedBack(&motorL, &motorR);
   403  001F82  0E21               	movlw	low main@motorL
   404  001F84  6E1D               	movwf	fullSpeedBack@mL,c
   405  001F86  0E00               	movlw	high main@motorL
   406  001F88  6E1E               	movwf	fullSpeedBack@mL+1,c
   407  001F8A  0E2A               	movlw	low main@motorR
   408  001F8C  6E1F               	movwf	fullSpeedBack@mR,c
   409  001F8E  0E00               	movlw	high main@motorR
   410  001F90  6E20               	movwf	fullSpeedBack@mR+1,c
   411  001F92  ECBE  F00C         	call	_fullSpeedBack	;wreg free
   412                           
   413                           ;main.c: 75: delay_s(2);
   414  001F96  0E02               	movlw	2
   415  001F98  EC0F  F00D         	call	_delay_s
   416                           
   417                           ;main.c: 76: stop(&motorL, &motorR);
   418  001F9C  0E21               	movlw	low main@motorL
   419  001F9E  6E18               	movwf	stop@mL,c
   420  001FA0  0E00               	movlw	high main@motorL
   421  001FA2  6E19               	movwf	stop@mL+1,c
   422  001FA4  0E2A               	movlw	low main@motorR
   423  001FA6  6E1A               	movwf	stop@mR,c
   424  001FA8  0E00               	movlw	high main@motorR
   425  001FAA  6E1B               	movwf	stop@mR+1,c
   426  001FAC  ECB7  F00D         	call	_stop	;wreg free
   427                           
   428                           ;main.c: 78: delay_s(2);
   429  001FB0  0E02               	movlw	2
   430  001FB2  EC0F  F00D         	call	_delay_s
   431                           
   432                           ;main.c: 79: turnLeft(&motorL, &motorR);
   433  001FB6  0E21               	movlw	low main@motorL
   434  001FB8  6E1D               	movwf	turnLeft@mL,c
   435  001FBA  0E00               	movlw	high main@motorL
   436  001FBC  6E1E               	movwf	turnLeft@mL+1,c
   437  001FBE  0E2A               	movlw	low main@motorR
   438  001FC0  6E1F               	movwf	turnLeft@mR,c
   439  001FC2  0E00               	movlw	high main@motorR
   440  001FC4  6E20               	movwf	turnLeft@mR+1,c
   441  001FC6  ECD9  F00C         	call	_turnLeft	;wreg free
   442                           
   443                           ;main.c: 81: delay_s(2);
   444  001FCA  0E02               	movlw	2
   445  001FCC  EC0F  F00D         	call	_delay_s
   446                           
   447                           ;main.c: 82: stop(&motorL, &motorR);
   448  001FD0  0E21               	movlw	low main@motorL
   449  001FD2  6E18               	movwf	stop@mL,c
   450  001FD4  0E00               	movlw	high main@motorL
   451  001FD6  6E19               	movwf	stop@mL+1,c
   452  001FD8  0E2A               	movlw	low main@motorR
   453  001FDA  6E1A               	movwf	stop@mR,c
   454  001FDC  0E00               	movlw	high main@motorR
   455  001FDE  6E1B               	movwf	stop@mR+1,c
   456  001FE0  ECB7  F00D         	call	_stop	;wreg free
   457                           
   458                           ;main.c: 84: delay_s(2);
   459  001FE4  0E02               	movlw	2
   460  001FE6  EC0F  F00D         	call	_delay_s
   461                           
   462                           ;main.c: 85: turnRight(&motorL, &motorR);
   463  001FEA  0E21               	movlw	low main@motorL
   464  001FEC  6E1D               	movwf	turnRight@mL,c
   465  001FEE  0E00               	movlw	high main@motorL
   466  001FF0  6E1E               	movwf	turnRight@mL+1,c
   467  001FF2  0E2A               	movlw	low main@motorR
   468  001FF4  6E1F               	movwf	turnRight@mR,c
   469  001FF6  0E00               	movlw	high main@motorR
   470  001FF8  6E20               	movwf	turnRight@mR+1,c
   471  001FFA  ECF4  F00C         	call	_turnRight	;wreg free
   472  001FFE  D792               	goto	l1226
   473  002000                     __end_of_main:
   474                           	opt stack 0
   475                           
   476 ;; *************** function _turnRight *****************
   477 ;; Defined at:
   478 ;;		line 89 in file "dc_motor.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   481 ;;		 -> main@motorL(9), 
   482 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   483 ;;		 -> main@motorR(9), 
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;		None               void
   488 ;; Registers used:
   489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   495 ;;      Params:         4       0       0       0
   496 ;;      Locals:         0       0       0       0
   497 ;;      Temps:          0       0       0       0
   498 ;;      Totals:         4       0       0       0
   499 ;;Total ram usage:        4 bytes
   500 ;; Hardware stack levels used:    1
   501 ;; Hardware stack levels required when called:    3
   502 ;; This function calls:
   503 ;;		_fullSpeedAhead
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509                           	psect	text1
   510  0019E8                     __ptext1:
   511                           	opt stack 0
   512  0019E8                     _turnRight:
   513                           	opt stack 27
   514                           
   515                           ;dc_motor.c: 92: mL->direction=1;
   516                           
   517                           ;incstack = 0
   518  0019E8  EE20 F001          	lfsr	2,1
   519  0019EC  501D               	movf	turnRight@mL,w,c
   520  0019EE  26D9               	addwf	fsr2l,f,c
   521  0019F0  501E               	movf	turnRight@mL+1,w,c
   522  0019F2  22DA               	addwfc	fsr2h,f,c
   523  0019F4  0E01               	movlw	1
   524  0019F6  6EDF               	movwf	indf2,c
   525                           
   526                           ;dc_motor.c: 93: mR->direction=0;
   527  0019F8  EE20 F001          	lfsr	2,1
   528  0019FC  501F               	movf	turnRight@mR,w,c
   529  0019FE  26D9               	addwf	fsr2l,f,c
   530  001A00  5020               	movf	turnRight@mR+1,w,c
   531  001A02  22DA               	addwfc	fsr2h,f,c
   532  001A04  0E00               	movlw	0
   533  001A06  6EDF               	movwf	indf2,c
   534                           
   535                           ;dc_motor.c: 94: fullSpeedAhead(mL, mR);
   536  001A08  C01D  F018         	movff	turnRight@mL,fullSpeedAhead@mL
   537  001A0C  C01E  F019         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
   538  001A10  C01F  F01A         	movff	turnRight@mR,fullSpeedAhead@mR
   539  001A14  C020  F01B         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
   540  001A18  EC3D  F00D         	call	_fullSpeedAhead	;wreg free
   541  001A1C  0012               	return		;funcret
   542  001A1E                     __end_of_turnRight:
   543                           	opt stack 0
   544                           indf2	equ	0xFDF
   545                           fsr2h	equ	0xFDA
   546                           fsr2l	equ	0xFD9
   547                           
   548 ;; *************** function _turnLeft *****************
   549 ;; Defined at:
   550 ;;		line 80 in file "dc_motor.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   553 ;;		 -> main@motorL(9), 
   554 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   555 ;;		 -> main@motorR(9), 
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;		None               void
   560 ;; Registers used:
   561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   567 ;;      Params:         4       0       0       0
   568 ;;      Locals:         0       0       0       0
   569 ;;      Temps:          0       0       0       0
   570 ;;      Totals:         4       0       0       0
   571 ;;Total ram usage:        4 bytes
   572 ;; Hardware stack levels used:    1
   573 ;; Hardware stack levels required when called:    3
   574 ;; This function calls:
   575 ;;		_fullSpeedAhead
   576 ;; This function is called by:
   577 ;;		_main
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text2
   582  0019B2                     __ptext2:
   583                           	opt stack 0
   584  0019B2                     _turnLeft:
   585                           	opt stack 27
   586                           
   587                           ;dc_motor.c: 83: mL->direction=0;
   588                           
   589                           ;incstack = 0
   590  0019B2  EE20 F001          	lfsr	2,1
   591  0019B6  501D               	movf	turnLeft@mL,w,c
   592  0019B8  26D9               	addwf	fsr2l,f,c
   593  0019BA  501E               	movf	turnLeft@mL+1,w,c
   594  0019BC  22DA               	addwfc	fsr2h,f,c
   595  0019BE  0E00               	movlw	0
   596  0019C0  6EDF               	movwf	indf2,c
   597                           
   598                           ;dc_motor.c: 84: mR->direction=1;
   599  0019C2  EE20 F001          	lfsr	2,1
   600  0019C6  501F               	movf	turnLeft@mR,w,c
   601  0019C8  26D9               	addwf	fsr2l,f,c
   602  0019CA  5020               	movf	turnLeft@mR+1,w,c
   603  0019CC  22DA               	addwfc	fsr2h,f,c
   604  0019CE  0E01               	movlw	1
   605  0019D0  6EDF               	movwf	indf2,c
   606                           
   607                           ;dc_motor.c: 85: fullSpeedAhead(mL, mR);
   608  0019D2  C01D  F018         	movff	turnLeft@mL,fullSpeedAhead@mL
   609  0019D6  C01E  F019         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
   610  0019DA  C01F  F01A         	movff	turnLeft@mR,fullSpeedAhead@mR
   611  0019DE  C020  F01B         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
   612  0019E2  EC3D  F00D         	call	_fullSpeedAhead	;wreg free
   613  0019E6  0012               	return		;funcret
   614  0019E8                     __end_of_turnLeft:
   615                           	opt stack 0
   616                           indf2	equ	0xFDF
   617                           fsr2h	equ	0xFDA
   618                           fsr2l	equ	0xFD9
   619                           
   620 ;; *************** function _stop *****************
   621 ;; Defined at:
   622 ;;		line 61 in file "dc_motor.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  mL              2   23[COMRAM] PTR struct DC_motor
   625 ;;		 -> main@motorL(9), 
   626 ;;  mR              2   25[COMRAM] PTR struct DC_motor
   627 ;;		 -> main@motorR(9), 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;		None               void
   632 ;; Registers used:
   633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   639 ;;      Params:         4       0       0       0
   640 ;;      Locals:         0       0       0       0
   641 ;;      Temps:          0       0       0       0
   642 ;;      Totals:         4       0       0       0
   643 ;;Total ram usage:        4 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; Hardware stack levels required when called:    2
   646 ;; This function calls:
   647 ;;		_setMotorPWM
   648 ;; This function is called by:
   649 ;;		_main
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text3
   654  001B6E                     __ptext3:
   655                           	opt stack 0
   656  001B6E                     _stop:
   657                           	opt stack 28
   658                           
   659                           ;dc_motor.c: 64: while(mL->power>0 || mR->power>0){
   660                           
   661                           ;incstack = 0
   662  001B6E  D028               	goto	l1182
   663  001B70                     l1168:
   664                           
   665                           ;dc_motor.c: 65: if(mL->power>0){
   666  001B70  C018  FFD9         	movff	stop@mL,fsr2l
   667  001B74  C019  FFDA         	movff	stop@mL+1,fsr2h
   668  001B78  50DF               	movf	indf2,w,c
   669  001B7A  B4D8               	btfsc	status,2,c
   670  001B7C  D005               	goto	l1172
   671                           
   672                           ;dc_motor.c: 66: mL->power--;
   673  001B7E  C018  FFD9         	movff	stop@mL,fsr2l
   674  001B82  C019  FFDA         	movff	stop@mL+1,fsr2h
   675  001B86  06DF               	decf	indf2,f,c
   676  001B88                     l1172:
   677                           
   678                           ;dc_motor.c: 67: }
   679                           ;dc_motor.c: 68: if(mR->power>0){
   680  001B88  C01A  FFD9         	movff	stop@mR,fsr2l
   681  001B8C  C01B  FFDA         	movff	stop@mR+1,fsr2h
   682  001B90  50DF               	movf	indf2,w,c
   683  001B92  B4D8               	btfsc	status,2,c
   684  001B94  D005               	goto	l1176
   685                           
   686                           ;dc_motor.c: 69: mR->power--;
   687  001B96  C01A  FFD9         	movff	stop@mR,fsr2l
   688  001B9A  C01B  FFDA         	movff	stop@mR+1,fsr2h
   689  001B9E  06DF               	decf	indf2,f,c
   690  001BA0                     l1176:
   691                           
   692                           ;dc_motor.c: 70: }
   693                           ;dc_motor.c: 71: setMotorPWM(mL);
   694  001BA0  C018  F00F         	movff	stop@mL,setMotorPWM@m
   695  001BA4  C019  F010         	movff	stop@mL+1,setMotorPWM@m+1
   696  001BA8  ECC0  F00E         	call	_setMotorPWM	;wreg free
   697                           
   698                           ;dc_motor.c: 72: setMotorPWM(mR);
   699  001BAC  C01A  F00F         	movff	stop@mR,setMotorPWM@m
   700  001BB0  C01B  F010         	movff	stop@mR+1,setMotorPWM@m+1
   701  001BB4  ECC0  F00E         	call	_setMotorPWM	;wreg free
   702                           
   703                           ;dc_motor.c: 73: _delay((unsigned long)((50)*(8000000/4000000.0)));
   704  001BB8  0E21               	movlw	33
   705  001BBA                     u617:
   706  001BBA  2EE8               	decfsz	wreg,f,c
   707  001BBC  D7FE               	goto	u617
   708  001BBE  F000               	nop	
   709  001BC0                     l1182:
   710  001BC0  C018  FFD9         	movff	stop@mL,fsr2l
   711  001BC4  C019  FFDA         	movff	stop@mL+1,fsr2h
   712  001BC8  50DF               	movf	indf2,w,c
   713  001BCA  A4D8               	btfss	status,2,c
   714  001BCC  D7D1               	goto	l1168
   715  001BCE  C01A  FFD9         	movff	stop@mR,fsr2l
   716  001BD2  C01B  FFDA         	movff	stop@mR+1,fsr2h
   717  001BD6  50DF               	movf	indf2,w,c
   718  001BD8  A4D8               	btfss	status,2,c
   719  001BDA  D7CA               	goto	l1168
   720                           
   721                           ;dc_motor.c: 74: }
   722                           ;dc_motor.c: 75: mL->direction=1;
   723  001BDC  EE20 F001          	lfsr	2,1
   724  001BE0  5018               	movf	stop@mL,w,c
   725  001BE2  26D9               	addwf	fsr2l,f,c
   726  001BE4  5019               	movf	stop@mL+1,w,c
   727  001BE6  22DA               	addwfc	fsr2h,f,c
   728  001BE8  0E01               	movlw	1
   729  001BEA  6EDF               	movwf	indf2,c
   730                           
   731                           ;dc_motor.c: 76: mR->direction=1;
   732  001BEC  EE20 F001          	lfsr	2,1
   733  001BF0  501A               	movf	stop@mR,w,c
   734  001BF2  26D9               	addwf	fsr2l,f,c
   735  001BF4  501B               	movf	stop@mR+1,w,c
   736  001BF6  22DA               	addwfc	fsr2h,f,c
   737  001BF8  0E01               	movlw	1
   738  001BFA  6EDF               	movwf	indf2,c
   739  001BFC  0012               	return		;funcret
   740  001BFE                     __end_of_stop:
   741                           	opt stack 0
   742                           wreg	equ	0xFE8
   743                           indf2	equ	0xFDF
   744                           fsr2h	equ	0xFDA
   745                           fsr2l	equ	0xFD9
   746                           status	equ	0xFD8
   747                           
   748 ;; *************** function _initPWM *****************
   749 ;; Defined at:
   750 ;;		line 4 in file "dc_motor.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;		None               void
   757 ;; Registers used:
   758 ;;		wreg, status,2
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   764 ;;      Params:         0       0       0       0
   765 ;;      Locals:         0       0       0       0
   766 ;;      Temps:          0       0       0       0
   767 ;;      Totals:         0       0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text4
   778  001922                     __ptext4:
   779                           	opt stack 0
   780  001922                     _initPWM:
   781                           	opt stack 30
   782                           
   783                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   784                           
   785                           ;incstack = 0
   786  001922  0E00               	movlw	0
   787  001924  6E7F               	movwf	3967,c	;volatile
   788                           
   789                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   790  001926  0E80               	movlw	128
   791  001928  6E7E               	movwf	3966,c	;volatile
   792                           
   793                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   794  00192A  0E6F               	movlw	111
   795  00192C  6E6F               	movwf	3951,c	;volatile
   796                           
   797                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   798  00192E  0E00               	movlw	0
   799  001930  6E6E               	movwf	3950,c	;volatile
   800                           
   801                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   802  001932  0EC7               	movlw	199
   803  001934  6E7B               	movwf	3963,c	;volatile
   804                           
   805                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   806  001936  0E00               	movlw	0
   807  001938  6E7A               	movwf	3962,c	;volatile
   808                           
   809                           ;dc_motor.c: 13: PDC0L = 0<<2;
   810  00193A  0E00               	movlw	0
   811  00193C  6E79               	movwf	3961,c	;volatile
   812                           
   813                           ;dc_motor.c: 14: PDC0H = 0>>6;
   814  00193E  0E00               	movlw	0
   815  001940  6E78               	movwf	3960,c	;volatile
   816                           
   817                           ;dc_motor.c: 15: PDC1L = 0<<2;
   818  001942  0E00               	movlw	0
   819  001944  6E77               	movwf	3959,c	;volatile
   820                           
   821                           ;dc_motor.c: 16: PDC1H = 0>>6;
   822  001946  0E00               	movlw	0
   823  001948  6E76               	movwf	3958,c	;volatile
   824  00194A  0012               	return		;funcret
   825  00194C                     __end_of_initPWM:
   826                           	opt stack 0
   827                           wreg	equ	0xFE8
   828                           indf2	equ	0xFDF
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833 ;; *************** function _fullSpeedBack *****************
   834 ;; Defined at:
   835 ;;		line 115 in file "dc_motor.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   838 ;;		 -> main@motorL(9), 
   839 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   840 ;;		 -> main@motorR(9), 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;		None               void
   845 ;; Registers used:
   846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   852 ;;      Params:         4       0       0       0
   853 ;;      Locals:         0       0       0       0
   854 ;;      Temps:          0       0       0       0
   855 ;;      Totals:         4       0       0       0
   856 ;;Total ram usage:        4 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    3
   859 ;; This function calls:
   860 ;;		_fullSpeedAhead
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text5
   867  00197C                     __ptext5:
   868                           	opt stack 0
   869  00197C                     _fullSpeedBack:
   870                           	opt stack 27
   871                           
   872                           ;dc_motor.c: 118: mL->direction=0;
   873                           
   874                           ;incstack = 0
   875  00197C  EE20 F001          	lfsr	2,1
   876  001980  501D               	movf	fullSpeedBack@mL,w,c
   877  001982  26D9               	addwf	fsr2l,f,c
   878  001984  501E               	movf	fullSpeedBack@mL+1,w,c
   879  001986  22DA               	addwfc	fsr2h,f,c
   880  001988  0E00               	movlw	0
   881  00198A  6EDF               	movwf	indf2,c
   882                           
   883                           ;dc_motor.c: 119: mR->direction=0;
   884  00198C  EE20 F001          	lfsr	2,1
   885  001990  501F               	movf	fullSpeedBack@mR,w,c
   886  001992  26D9               	addwf	fsr2l,f,c
   887  001994  5020               	movf	fullSpeedBack@mR+1,w,c
   888  001996  22DA               	addwfc	fsr2h,f,c
   889  001998  0E00               	movlw	0
   890  00199A  6EDF               	movwf	indf2,c
   891                           
   892                           ;dc_motor.c: 120: fullSpeedAhead(mL, mR);
   893  00199C  C01D  F018         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
   894  0019A0  C01E  F019         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
   895  0019A4  C01F  F01A         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
   896  0019A8  C020  F01B         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
   897  0019AC  EC3D  F00D         	call	_fullSpeedAhead	;wreg free
   898  0019B0  0012               	return		;funcret
   899  0019B2                     __end_of_fullSpeedBack:
   900                           	opt stack 0
   901                           wreg	equ	0xFE8
   902                           indf2	equ	0xFDF
   903                           fsr2h	equ	0xFDA
   904                           fsr2l	equ	0xFD9
   905                           status	equ	0xFD8
   906                           
   907 ;; *************** function _fullSpeedAhead *****************
   908 ;; Defined at:
   909 ;;		line 98 in file "dc_motor.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  mL              2   23[COMRAM] PTR struct DC_motor
   912 ;;		 -> main@motorL(9), 
   913 ;;  mR              2   25[COMRAM] PTR struct DC_motor
   914 ;;		 -> main@motorR(9), 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;		None               void
   919 ;; Registers used:
   920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   926 ;;      Params:         4       0       0       0
   927 ;;      Locals:         0       0       0       0
   928 ;;      Temps:          1       0       0       0
   929 ;;      Totals:         5       0       0       0
   930 ;;Total ram usage:        5 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		_setMotorPWM
   935 ;; This function is called by:
   936 ;;		_main
   937 ;;		_turnLeft
   938 ;;		_turnRight
   939 ;;		_fullSpeedBack
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text6
   944  001A7A                     __ptext6:
   945                           	opt stack 0
   946  001A7A                     _fullSpeedAhead:
   947                           	opt stack 27
   948                           
   949                           ;dc_motor.c: 101: while(mL->power<100 || mR->power<100){
   950                           
   951                           ;incstack = 0
   952  001A7A  D028               	goto	l122
   953  001A7C                     l1122:
   954                           
   955                           ;dc_motor.c: 102: if(mL->power<100){
   956  001A7C  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
   957  001A80  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
   958  001A84  0E64               	movlw	100
   959  001A86  60DF               	cpfslt	indf2,c
   960  001A88  D005               	goto	l1126
   961                           
   962                           ;dc_motor.c: 103: mL->power++;
   963  001A8A  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
   964  001A8E  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
   965  001A92  2ADF               	incf	indf2,f,c
   966  001A94                     l1126:
   967                           
   968                           ;dc_motor.c: 104: }
   969                           ;dc_motor.c: 105: if(mR->power<100){
   970  001A94  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
   971  001A98  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
   972  001A9C  0E64               	movlw	100
   973  001A9E  60DF               	cpfslt	indf2,c
   974  001AA0  D005               	goto	l1130
   975                           
   976                           ;dc_motor.c: 106: mR->power++;
   977  001AA2  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
   978  001AA6  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
   979  001AAA  2ADF               	incf	indf2,f,c
   980  001AAC                     l1130:
   981                           
   982                           ;dc_motor.c: 107: }
   983                           ;dc_motor.c: 108: setMotorPWM(mL);
   984  001AAC  C018  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
   985  001AB0  C019  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
   986  001AB4  ECC0  F00E         	call	_setMotorPWM	;wreg free
   987                           
   988                           ;dc_motor.c: 109: setMotorPWM(mR);
   989  001AB8  C01A  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
   990  001ABC  C01B  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
   991  001AC0  ECC0  F00E         	call	_setMotorPWM	;wreg free
   992                           
   993                           ;dc_motor.c: 110: _delay((unsigned long)((50)*(8000000/4000000.0)));
   994  001AC4  0E21               	movlw	33
   995  001AC6                     u627:
   996  001AC6  2EE8               	decfsz	wreg,f,c
   997  001AC8  D7FE               	goto	u627
   998  001ACA  F000               	nop	
   999  001ACC                     l122:
  1000  001ACC  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1001  001AD0  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1002  001AD4  0E63               	movlw	99
  1003  001AD6  64DF               	cpfsgt	indf2,c
  1004  001AD8  D7D1               	goto	l1122
  1005  001ADA  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1006  001ADE  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1007  001AE2  0E63               	movlw	99
  1008  001AE4  64DF               	cpfsgt	indf2,c
  1009  001AE6  D7CA               	goto	l1122
  1010  001AE8  0012               	return	
  1011  001AEA                     __end_of_fullSpeedAhead:
  1012                           	opt stack 0
  1013                           wreg	equ	0xFE8
  1014                           indf2	equ	0xFDF
  1015                           fsr2h	equ	0xFDA
  1016                           fsr2l	equ	0xFD9
  1017                           status	equ	0xFD8
  1018                           
  1019 ;; *************** function _setMotorPWM *****************
  1020 ;; Defined at:
  1021 ;;		line 20 in file "dc_motor.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  m               2   14[COMRAM] PTR struct DC_motor
  1024 ;;		 -> main@motorR(9), main@motorL(9), 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  PWMduty         2   21[COMRAM] int 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;		None               void
  1029 ;; Registers used:
  1030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1036 ;;      Params:         2       0       0       0
  1037 ;;      Locals:         2       0       0       0
  1038 ;;      Temps:          5       0       0       0
  1039 ;;      Totals:         9       0       0       0
  1040 ;;Total ram usage:        9 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    1
  1043 ;; This function calls:
  1044 ;;		___awdiv
  1045 ;;		___wmul
  1046 ;; This function is called by:
  1047 ;;		_stop
  1048 ;;		_fullSpeedAhead
  1049 ;;		_setMotorFullSpeed
  1050 ;;		_stopMotor
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           	psect	text7
  1055  001D80                     __ptext7:
  1056                           	opt stack 0
  1057  001D80                     _setMotorPWM:
  1058                           	opt stack 27
  1059                           
  1060                           ;dc_motor.c: 22: int PWMduty;
  1061                           ;dc_motor.c: 24: PWMduty = (m->power*m->PWMperiod)/100;
  1062                           
  1063                           ;incstack = 0
  1064  001D80  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1065  001D84  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1066  001D88  50DF               	movf	indf2,w,c
  1067  001D8A  6E11               	movwf	??_setMotorPWM& (0+255),c
  1068  001D8C  5011               	movf	??_setMotorPWM,w,c
  1069  001D8E  6E01               	movwf	___wmul@multiplier,c
  1070  001D90  6A02               	clrf	___wmul@multiplier+1,c
  1071  001D92  EE20 F007          	lfsr	2,7
  1072  001D96  500F               	movf	setMotorPWM@m,w,c
  1073  001D98  26D9               	addwf	fsr2l,f,c
  1074  001D9A  5010               	movf	setMotorPWM@m+1,w,c
  1075  001D9C  22DA               	addwfc	fsr2h,f,c
  1076  001D9E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1077  001DA2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1078  001DA6  EC7E  F00C         	call	___wmul	;wreg free
  1079  001DAA  C001  F007         	movff	?___wmul,___awdiv@dividend
  1080  001DAE  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  1081  001DB2  0E00               	movlw	0
  1082  001DB4  6E0A               	movwf	___awdiv@divisor+1,c
  1083  001DB6  0E64               	movlw	100
  1084  001DB8  6E09               	movwf	___awdiv@divisor,c
  1085  001DBA  EC75  F00D         	call	___awdiv	;wreg free
  1086  001DBE  C007  F016         	movff	?___awdiv,setMotorPWM@PWMduty
  1087  001DC2  C008  F017         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1088                           
  1089                           ;dc_motor.c: 26: if (m->direction)
  1090  001DC6  EE20 F001          	lfsr	2,1
  1091  001DCA  500F               	movf	setMotorPWM@m,w,c
  1092  001DCC  26D9               	addwf	fsr2l,f,c
  1093  001DCE  5010               	movf	setMotorPWM@m+1,w,c
  1094  001DD0  22DA               	addwfc	fsr2h,f,c
  1095  001DD2  50DF               	movf	indf2,w,c
  1096  001DD4  B4D8               	btfsc	status,2,c
  1097  001DD6  D02C               	goto	l1110
  1098                           
  1099                           ;dc_motor.c: 27: {
  1100                           ;dc_motor.c: 28: LATB=LATB|(1<<(m->dir_pin));
  1101  001DD8  EE20 F006          	lfsr	2,6
  1102  001DDC  500F               	movf	setMotorPWM@m,w,c
  1103  001DDE  26D9               	addwf	fsr2l,f,c
  1104  001DE0  5010               	movf	setMotorPWM@m+1,w,c
  1105  001DE2  22DA               	addwfc	fsr2h,f,c
  1106  001DE4  50DF               	movf	indf2,w,c
  1107  001DE6  6E11               	movwf	??_setMotorPWM& (0+255),c
  1108  001DE8  0E01               	movlw	1
  1109  001DEA  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
  1110  001DEC  2A11               	incf	??_setMotorPWM,f,c
  1111  001DEE  D002               	goto	u434
  1112  001DF0                     u435:
  1113  001DF0  90D8               	bcf	status,0,c
  1114  001DF2  3612               	rlcf	??_setMotorPWM+1,f,c
  1115  001DF4                     u434:
  1116  001DF4  2E11               	decfsz	??_setMotorPWM,f,c
  1117  001DF6  D7FC               	goto	u435
  1118  001DF8  5012               	movf	??_setMotorPWM+1,w,c
  1119  001DFA  108A               	iorwf	3978,w,c	;volatile
  1120  001DFC  6E8A               	movwf	3978,c	;volatile
  1121                           
  1122                           ;dc_motor.c: 29: PWMduty=m->PWMperiod-PWMduty;
  1123  001DFE  EE20 F007          	lfsr	2,7
  1124  001E02  500F               	movf	setMotorPWM@m,w,c
  1125  001E04  26D9               	addwf	fsr2l,f,c
  1126  001E06  5010               	movf	setMotorPWM@m+1,w,c
  1127  001E08  22DA               	addwfc	fsr2h,f,c
  1128  001E0A  CFDE F011          	movff	postinc2,??_setMotorPWM
  1129  001E0E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1130  001E12  C016  F013         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1131  001E16  C017  F014         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1132  001E1A  1E13               	comf	??_setMotorPWM+2,f,c
  1133  001E1C  1E14               	comf	??_setMotorPWM+3,f,c
  1134  001E1E  4A13               	infsnz	??_setMotorPWM+2,f,c
  1135  001E20  2A14               	incf	??_setMotorPWM+3,f,c
  1136  001E22  5011               	movf	??_setMotorPWM,w,c
  1137  001E24  2413               	addwf	??_setMotorPWM+2,w,c
  1138  001E26  6E16               	movwf	setMotorPWM@PWMduty,c
  1139  001E28  5012               	movf	??_setMotorPWM+1,w,c
  1140  001E2A  2014               	addwfc	??_setMotorPWM+3,w,c
  1141  001E2C  6E17               	movwf	setMotorPWM@PWMduty+1,c
  1142                           
  1143                           ;dc_motor.c: 30: }
  1144  001E2E  D014               	goto	l92
  1145  001E30                     l1110:
  1146                           
  1147                           ;dc_motor.c: 31: else
  1148                           ;dc_motor.c: 32: {
  1149                           ;dc_motor.c: 33: LATB=LATB&(~(1<<(m->dir_pin)));
  1150  001E30  EE20 F006          	lfsr	2,6
  1151  001E34  500F               	movf	setMotorPWM@m,w,c
  1152  001E36  26D9               	addwf	fsr2l,f,c
  1153  001E38  5010               	movf	setMotorPWM@m+1,w,c
  1154  001E3A  22DA               	addwfc	fsr2h,f,c
  1155  001E3C  50DF               	movf	indf2,w,c
  1156  001E3E  6E11               	movwf	??_setMotorPWM& (0+255),c
  1157  001E40  0E01               	movlw	1
  1158  001E42  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
  1159  001E44  2A11               	incf	??_setMotorPWM,f,c
  1160  001E46  D002               	goto	u444
  1161  001E48                     u445:
  1162  001E48  90D8               	bcf	status,0,c
  1163  001E4A  3612               	rlcf	??_setMotorPWM+1,f,c
  1164  001E4C                     u444:
  1165  001E4C  2E11               	decfsz	??_setMotorPWM,f,c
  1166  001E4E  D7FC               	goto	u445
  1167  001E50  5012               	movf	??_setMotorPWM+1,w,c
  1168  001E52  0AFF               	xorlw	255
  1169  001E54  148A               	andwf	3978,w,c	;volatile
  1170  001E56  6E8A               	movwf	3978,c	;volatile
  1171  001E58                     l92:
  1172                           
  1173                           ;dc_motor.c: 34: }
  1174                           ;dc_motor.c: 37: *(m->dutyLowByte)=PWMduty<<2;
  1175  001E58  EE20 F002          	lfsr	2,2
  1176  001E5C  500F               	movf	setMotorPWM@m,w,c
  1177  001E5E  26D9               	addwf	fsr2l,f,c
  1178  001E60  5010               	movf	setMotorPWM@m+1,w,c
  1179  001E62  22DA               	addwfc	fsr2h,f,c
  1180  001E64  CFDE F011          	movff	postinc2,??_setMotorPWM
  1181  001E68  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1182  001E6C  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1183  001E70  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1184  001E74  4416               	rlncf	setMotorPWM@PWMduty,w,c
  1185  001E76  46E8               	rlncf	wreg,f,c
  1186  001E78  0BFC               	andlw	252
  1187  001E7A  6EDF               	movwf	indf2,c
  1188                           
  1189                           ;dc_motor.c: 38: *(m->dutyHighByte)=PWMduty>>6;
  1190  001E7C  EE20 F004          	lfsr	2,4
  1191  001E80  500F               	movf	setMotorPWM@m,w,c
  1192  001E82  26D9               	addwf	fsr2l,f,c
  1193  001E84  5010               	movf	setMotorPWM@m+1,w,c
  1194  001E86  22DA               	addwfc	fsr2h,f,c
  1195  001E88  CFDE F011          	movff	postinc2,??_setMotorPWM
  1196  001E8C  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1197  001E90  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1198  001E94  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1199  001E98  C016  F013         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1200  001E9C  C017  F014         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1201  001EA0  0E06               	movlw	6
  1202  001EA2  6E15               	movwf	(??_setMotorPWM+4)& (0+255),c
  1203  001EA4                     u455:
  1204  001EA4  3414               	rlcf	??_setMotorPWM+3,w,c
  1205  001EA6  3214               	rrcf	??_setMotorPWM+3,f,c
  1206  001EA8  3213               	rrcf	??_setMotorPWM+2,f,c
  1207  001EAA  2E15               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1208  001EAC  D7FB               	goto	u455
  1209  001EAE  5013               	movf	??_setMotorPWM+2,w,c
  1210  001EB0  6EDF               	movwf	indf2,c
  1211  001EB2  0012               	return		;funcret
  1212  001EB4                     __end_of_setMotorPWM:
  1213                           	opt stack 0
  1214                           wreg	equ	0xFE8
  1215                           indf2	equ	0xFDF
  1216                           postinc2	equ	0xFDE
  1217                           postdec2	equ	0xFDD
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function ___wmul *****************
  1223 ;; Defined at:
  1224 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  multiplier      2    0[COMRAM] unsigned int 
  1227 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  product         2    4[COMRAM] unsigned int 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  2    0[COMRAM] unsigned int 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0, prodl, prodh
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1239 ;;      Params:         4       0       0       0
  1240 ;;      Locals:         2       0       0       0
  1241 ;;      Temps:          0       0       0       0
  1242 ;;      Totals:         6       0       0       0
  1243 ;;Total ram usage:        6 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_setMotorPWM
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text8
  1253  0018FC                     __ptext8:
  1254                           	opt stack 0
  1255  0018FC                     ___wmul:
  1256                           	opt stack 27
  1257                           
  1258                           ;incstack = 0
  1259  0018FC  5001               	movf	___wmul@multiplier,w,c
  1260  0018FE  0203               	mulwf	___wmul@multiplicand,c
  1261  001900  CFF3 F005          	movff	prodl,___wmul@product
  1262  001904  CFF4 F006          	movff	prodh,___wmul@product+1
  1263  001908  5001               	movf	___wmul@multiplier,w,c
  1264  00190A  0204               	mulwf	___wmul@multiplicand+1,c
  1265  00190C  50F3               	movf	prodl,w,c
  1266  00190E  2606               	addwf	___wmul@product+1,f,c
  1267  001910  5002               	movf	___wmul@multiplier+1,w,c
  1268  001912  0203               	mulwf	___wmul@multiplicand,c
  1269  001914  50F3               	movf	prodl,w,c
  1270  001916  2606               	addwf	___wmul@product+1,f,c
  1271  001918  C005  F001         	movff	___wmul@product,?___wmul
  1272  00191C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1273  001920  0012               	return	
  1274  001922                     __end_of___wmul:
  1275                           	opt stack 0
  1276                           prodh	equ	0xFF4
  1277                           prodl	equ	0xFF3
  1278                           wreg	equ	0xFE8
  1279                           indf2	equ	0xFDF
  1280                           postinc2	equ	0xFDE
  1281                           postdec2	equ	0xFDD
  1282                           fsr2h	equ	0xFDA
  1283                           fsr2l	equ	0xFD9
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function ___awdiv *****************
  1287 ;; Defined at:
  1288 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  dividend        2    6[COMRAM] int 
  1291 ;;  divisor         2    8[COMRAM] int 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  quotient        2   12[COMRAM] int 
  1294 ;;  sign            1   11[COMRAM] unsigned char 
  1295 ;;  counter         1   10[COMRAM] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  2    6[COMRAM] int 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2, status,0
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1305 ;;      Params:         4       0       0       0
  1306 ;;      Locals:         4       0       0       0
  1307 ;;      Temps:          0       0       0       0
  1308 ;;      Totals:         8       0       0       0
  1309 ;;Total ram usage:        8 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; This function calls:
  1312 ;;		Nothing
  1313 ;; This function is called by:
  1314 ;;		_setMotorPWM
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           	psect	text9
  1319  001AEA                     __ptext9:
  1320                           	opt stack 0
  1321  001AEA                     ___awdiv:
  1322                           	opt stack 27
  1323                           
  1324                           ;incstack = 0
  1325  001AEA  0E00               	movlw	0
  1326  001AEC  6E0C               	movwf	___awdiv@sign,c
  1327  001AEE  AE0A               	btfss	___awdiv@divisor+1,7,c
  1328  001AF0  D006               	goto	l1068
  1329  001AF2  6C09               	negf	___awdiv@divisor,c
  1330  001AF4  1E0A               	comf	___awdiv@divisor+1,f,c
  1331  001AF6  B0D8               	btfsc	status,0,c
  1332  001AF8  2A0A               	incf	___awdiv@divisor+1,f,c
  1333  001AFA  0E01               	movlw	1
  1334  001AFC  6E0C               	movwf	___awdiv@sign,c
  1335  001AFE                     l1068:
  1336  001AFE  AE08               	btfss	___awdiv@dividend+1,7,c
  1337  001B00  D006               	goto	l1074
  1338  001B02  6C07               	negf	___awdiv@dividend,c
  1339  001B04  1E08               	comf	___awdiv@dividend+1,f,c
  1340  001B06  B0D8               	btfsc	status,0,c
  1341  001B08  2A08               	incf	___awdiv@dividend+1,f,c
  1342  001B0A  0E01               	movlw	1
  1343  001B0C  1A0C               	xorwf	___awdiv@sign,f,c
  1344  001B0E                     l1074:
  1345  001B0E  0E00               	movlw	0
  1346  001B10  6E0E               	movwf	___awdiv@quotient+1,c
  1347  001B12  0E00               	movlw	0
  1348  001B14  6E0D               	movwf	___awdiv@quotient,c
  1349  001B16  5009               	movf	___awdiv@divisor,w,c
  1350  001B18  100A               	iorwf	___awdiv@divisor+1,w,c
  1351  001B1A  B4D8               	btfsc	status,2,c
  1352  001B1C  D01C               	goto	l1096
  1353  001B1E  0E01               	movlw	1
  1354  001B20  6E0B               	movwf	___awdiv@counter,c
  1355  001B22  D004               	goto	l1082
  1356  001B24                     l1080:
  1357  001B24  90D8               	bcf	status,0,c
  1358  001B26  3609               	rlcf	___awdiv@divisor,f,c
  1359  001B28  360A               	rlcf	___awdiv@divisor+1,f,c
  1360  001B2A  2A0B               	incf	___awdiv@counter,f,c
  1361  001B2C                     l1082:
  1362  001B2C  AE0A               	btfss	___awdiv@divisor+1,7,c
  1363  001B2E  D7FA               	goto	l1080
  1364  001B30                     l1084:
  1365  001B30  90D8               	bcf	status,0,c
  1366  001B32  360D               	rlcf	___awdiv@quotient,f,c
  1367  001B34  360E               	rlcf	___awdiv@quotient+1,f,c
  1368  001B36  5009               	movf	___awdiv@divisor,w,c
  1369  001B38  5C07               	subwf	___awdiv@dividend,w,c
  1370  001B3A  500A               	movf	___awdiv@divisor+1,w,c
  1371  001B3C  5808               	subwfb	___awdiv@dividend+1,w,c
  1372  001B3E  A0D8               	btfss	status,0,c
  1373  001B40  D005               	goto	l1092
  1374  001B42  5009               	movf	___awdiv@divisor,w,c
  1375  001B44  5E07               	subwf	___awdiv@dividend,f,c
  1376  001B46  500A               	movf	___awdiv@divisor+1,w,c
  1377  001B48  5A08               	subwfb	___awdiv@dividend+1,f,c
  1378  001B4A  800D               	bsf	___awdiv@quotient,0,c
  1379  001B4C                     l1092:
  1380  001B4C  90D8               	bcf	status,0,c
  1381  001B4E  320A               	rrcf	___awdiv@divisor+1,f,c
  1382  001B50  3209               	rrcf	___awdiv@divisor,f,c
  1383  001B52  2E0B               	decfsz	___awdiv@counter,f,c
  1384  001B54  D7ED               	goto	l1084
  1385  001B56                     l1096:
  1386  001B56  500C               	movf	___awdiv@sign,w,c
  1387  001B58  B4D8               	btfsc	status,2,c
  1388  001B5A  D004               	goto	l1100
  1389  001B5C  6C0D               	negf	___awdiv@quotient,c
  1390  001B5E  1E0E               	comf	___awdiv@quotient+1,f,c
  1391  001B60  B0D8               	btfsc	status,0,c
  1392  001B62  2A0E               	incf	___awdiv@quotient+1,f,c
  1393  001B64                     l1100:
  1394  001B64  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1395  001B68  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1396  001B6C  0012               	return	
  1397  001B6E                     __end_of___awdiv:
  1398                           	opt stack 0
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           wreg	equ	0xFE8
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _delay_s *****************
  1410 ;; Defined at:
  1411 ;;		line 11 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  seconds         1    wreg     unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  seconds         1    2[COMRAM] unsigned char 
  1416 ;;  j               2    5[COMRAM] unsigned int 
  1417 ;;  i               2    3[COMRAM] unsigned int 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;		None               void
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1427 ;;      Params:         0       0       0       0
  1428 ;;      Locals:         5       0       0       0
  1429 ;;      Temps:          2       0       0       0
  1430 ;;      Totals:         7       0       0       0
  1431 ;;Total ram usage:        7 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text10
  1441  001A1E                     __ptext10:
  1442                           	opt stack 0
  1443  001A1E                     _delay_s:
  1444                           	opt stack 30
  1445                           
  1446                           ;incstack = 0
  1447                           ;delay_s@seconds stored from wreg
  1448  001A1E  6E03               	movwf	delay_s@seconds,c
  1449                           
  1450                           ;main.c: 12: unsigned int i=0;
  1451  001A20  0E00               	movlw	0
  1452  001A22  6E05               	movwf	delay_s@i+1,c
  1453  001A24  0E00               	movlw	0
  1454  001A26  6E04               	movwf	delay_s@i,c
  1455                           
  1456                           ;main.c: 13: unsigned int j=0;
  1457  001A28  0E00               	movlw	0
  1458  001A2A  6E07               	movwf	delay_s@j+1,c
  1459  001A2C  0E00               	movlw	0
  1460  001A2E  6E06               	movwf	delay_s@j,c
  1461                           
  1462                           ;main.c: 14: for (i=1; i<=seconds; i++) {
  1463  001A30  0E00               	movlw	0
  1464  001A32  6E05               	movwf	delay_s@i+1,c
  1465  001A34  0E01               	movlw	1
  1466  001A36  6E04               	movwf	delay_s@i,c
  1467  001A38  D016               	goto	l892
  1468  001A3A                     l880:
  1469                           
  1470                           ;main.c: 15: for (j=1; j<=20; j++) {
  1471  001A3A  0E00               	movlw	0
  1472  001A3C  6E07               	movwf	delay_s@j+1,c
  1473  001A3E  0E01               	movlw	1
  1474  001A40  6E06               	movwf	delay_s@j,c
  1475  001A42                     l882:
  1476  001A42  5007               	movf	delay_s@j+1,w,c
  1477  001A44  E10E               	bnz	l890
  1478  001A46  0E15               	movlw	21
  1479  001A48  5C06               	subwf	delay_s@j,w,c
  1480  001A4A  B0D8               	btfsc	status,0,c
  1481  001A4C  D00A               	goto	l890
  1482                           
  1483                           ;main.c: 16: _delay((unsigned long)((50)*(8000000/4000.0)));
  1484  001A4E  0E82               	movlw	130
  1485  001A50  6E01               	movwf	??_delay_s& (0+255),c
  1486  001A52  0EDE               	movlw	222
  1487  001A54                     u637:
  1488  001A54  2EE8               	decfsz	wreg,f,c
  1489  001A56  D7FE               	goto	u637
  1490  001A58  2E01               	decfsz	??_delay_s& (0+255),f,c
  1491  001A5A  D7FC               	goto	u637
  1492  001A5C  4A06               	infsnz	delay_s@j,f,c
  1493  001A5E  2A07               	incf	delay_s@j+1,f,c
  1494  001A60  D7F0               	goto	l882
  1495  001A62                     l890:
  1496  001A62  4A04               	infsnz	delay_s@i,f,c
  1497  001A64  2A05               	incf	delay_s@i+1,f,c
  1498  001A66                     l892:
  1499  001A66  5003               	movf	delay_s@seconds,w,c
  1500  001A68  6E01               	movwf	??_delay_s& (0+255),c
  1501  001A6A  6A02               	clrf	(??_delay_s+1)& (0+255),c
  1502  001A6C  5004               	movf	delay_s@i,w,c
  1503  001A6E  5C01               	subwf	??_delay_s,w,c
  1504  001A70  5005               	movf	delay_s@i+1,w,c
  1505  001A72  5802               	subwfb	??_delay_s+1,w,c
  1506  001A74  A0D8               	btfss	status,0,c
  1507  001A76  0012               	return	
  1508  001A78  D7E0               	goto	l880
  1509  001A7A                     __end_of_delay_s:
  1510                           	opt stack 0
  1511                           prodh	equ	0xFF4
  1512                           prodl	equ	0xFF3
  1513                           wreg	equ	0xFE8
  1514                           indf2	equ	0xFDF
  1515                           postinc2	equ	0xFDE
  1516                           postdec2	equ	0xFDD
  1517                           fsr2h	equ	0xFDA
  1518                           fsr2l	equ	0xFD9
  1519                           status	equ	0xFD8
  1520                           
  1521 ;; *************** function _LCD_Init *****************
  1522 ;; Defined at:
  1523 ;;		line 38 in file "LCD.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;		None               void
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1537 ;;      Params:         0       0       0       0
  1538 ;;      Locals:         0       0       0       0
  1539 ;;      Temps:          1       0       0       0
  1540 ;;      Totals:         1       0       0       0
  1541 ;;Total ram usage:        1 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    3
  1544 ;; This function calls:
  1545 ;;		_LCDout
  1546 ;;		_SendLCD
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text11
  1553  001BFE                     __ptext11:
  1554                           	opt stack 0
  1555  001BFE                     _LCD_Init:
  1556                           	opt stack 27
  1557                           
  1558                           ;LCD.c: 44: TRISAbits.RA6=0;
  1559                           
  1560                           ;incstack = 0
  1561  001BFE  9C92               	bcf	3986,6,c	;volatile
  1562                           
  1563                           ;LCD.c: 45: TRISCbits.RC0=0;
  1564  001C00  9094               	bcf	3988,0,c	;volatile
  1565                           
  1566                           ;LCD.c: 46: TRISCbits.RC1=0;
  1567  001C02  9294               	bcf	3988,1,c	;volatile
  1568                           
  1569                           ;LCD.c: 47: TRISCbits.RC2=0;
  1570  001C04  9494               	bcf	3988,2,c	;volatile
  1571                           
  1572                           ;LCD.c: 48: TRISDbits.RD0=0;
  1573  001C06  9095               	bcf	3989,0,c	;volatile
  1574                           
  1575                           ;LCD.c: 49: TRISDbits.RD1=0;
  1576  001C08  9295               	bcf	3989,1,c	;volatile
  1577                           
  1578                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1579  001C0A  0E27               	movlw	39
  1580  001C0C  6E07               	movwf	??_LCD_Init& (0+255),c
  1581  001C0E  0EF5               	movlw	245
  1582  001C10                     u647:
  1583  001C10  2EE8               	decfsz	wreg,f,c
  1584  001C12  D7FE               	goto	u647
  1585  001C14  2E07               	decfsz	??_LCD_Init& (0+255),f,c
  1586  001C16  D7FC               	goto	u647
  1587  001C18  F000               	nop	
  1588                           
  1589                           ;LCD.c: 52: LCDout(0b0011);
  1590  001C1A  0E03               	movlw	3
  1591  001C1C  EC5D  F00E         	call	_LCDout
  1592                           
  1593                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1594  001C20  0E0D               	movlw	13
  1595  001C22  6E07               	movwf	??_LCD_Init& (0+255),c
  1596  001C24  0EFC               	movlw	252
  1597  001C26                     u657:
  1598  001C26  2EE8               	decfsz	wreg,f,c
  1599  001C28  D7FE               	goto	u657
  1600  001C2A  2E07               	decfsz	??_LCD_Init& (0+255),f,c
  1601  001C2C  D7FC               	goto	u657
  1602                           
  1603                           ;LCD.c: 54: LCDout(0b0011);
  1604  001C2E  0E03               	movlw	3
  1605  001C30  EC5D  F00E         	call	_LCDout
  1606                           
  1607                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1608  001C34  0E85               	movlw	133
  1609  001C36                     u667:
  1610  001C36  2EE8               	decfsz	wreg,f,c
  1611  001C38  D7FE               	goto	u667
  1612  001C3A  F000               	nop	
  1613                           
  1614                           ;LCD.c: 56: LCDout(0b0011);
  1615  001C3C  0E03               	movlw	3
  1616  001C3E  EC5D  F00E         	call	_LCDout
  1617                           
  1618                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1619  001C42  0E21               	movlw	33
  1620  001C44                     u677:
  1621  001C44  2EE8               	decfsz	wreg,f,c
  1622  001C46  D7FE               	goto	u677
  1623  001C48  F000               	nop	
  1624                           
  1625                           ;LCD.c: 58: LCDout(0b0010);
  1626  001C4A  0E02               	movlw	2
  1627  001C4C  EC5D  F00E         	call	_LCDout
  1628                           
  1629                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1630  001C50  0E21               	movlw	33
  1631  001C52                     u687:
  1632  001C52  2EE8               	decfsz	wreg,f,c
  1633  001C54  D7FE               	goto	u687
  1634  001C56  F000               	nop	
  1635                           
  1636                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1637  001C58  0E00               	movlw	0
  1638  001C5A  6E05               	movwf	SendLCD@type,c
  1639  001C5C  0E28               	movlw	40
  1640  001C5E  ECA6  F00C         	call	_SendLCD
  1641                           
  1642                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1643  001C62  0E21               	movlw	33
  1644  001C64                     u697:
  1645  001C64  2EE8               	decfsz	wreg,f,c
  1646  001C66  D7FE               	goto	u697
  1647  001C68  F000               	nop	
  1648                           
  1649                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1650  001C6A  0E00               	movlw	0
  1651  001C6C  6E05               	movwf	SendLCD@type,c
  1652  001C6E  0E08               	movlw	8
  1653  001C70  ECA6  F00C         	call	_SendLCD
  1654                           
  1655                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1656  001C74  0E21               	movlw	33
  1657  001C76                     u707:
  1658  001C76  2EE8               	decfsz	wreg,f,c
  1659  001C78  D7FE               	goto	u707
  1660  001C7A  F000               	nop	
  1661                           
  1662                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1663  001C7C  0E00               	movlw	0
  1664  001C7E  6E05               	movwf	SendLCD@type,c
  1665  001C80  0E01               	movlw	1
  1666  001C82  ECA6  F00C         	call	_SendLCD
  1667                           
  1668                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1669  001C86  0E0D               	movlw	13
  1670  001C88  6E07               	movwf	??_LCD_Init& (0+255),c
  1671  001C8A  0EFC               	movlw	252
  1672  001C8C                     u717:
  1673  001C8C  2EE8               	decfsz	wreg,f,c
  1674  001C8E  D7FE               	goto	u717
  1675  001C90  2E07               	decfsz	??_LCD_Init& (0+255),f,c
  1676  001C92  D7FC               	goto	u717
  1677                           
  1678                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1679  001C94  0E00               	movlw	0
  1680  001C96  6E05               	movwf	SendLCD@type,c
  1681  001C98  0E06               	movlw	6
  1682  001C9A  ECA6  F00C         	call	_SendLCD
  1683                           
  1684                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1685  001C9E  0E21               	movlw	33
  1686  001CA0                     u727:
  1687  001CA0  2EE8               	decfsz	wreg,f,c
  1688  001CA2  D7FE               	goto	u727
  1689  001CA4  F000               	nop	
  1690                           
  1691                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1692  001CA6  0E00               	movlw	0
  1693  001CA8  6E05               	movwf	SendLCD@type,c
  1694  001CAA  0E0C               	movlw	12
  1695  001CAC  ECA6  F00C         	call	_SendLCD
  1696                           
  1697                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1698  001CB0  0E21               	movlw	33
  1699  001CB2                     u737:
  1700  001CB2  2EE8               	decfsz	wreg,f,c
  1701  001CB4  D7FE               	goto	u737
  1702  001CB6  F000               	nop	
  1703  001CB8  0012               	return		;funcret
  1704  001CBA                     __end_of_LCD_Init:
  1705                           	opt stack 0
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           wreg	equ	0xFE8
  1709                           indf2	equ	0xFDF
  1710                           postinc2	equ	0xFDE
  1711                           postdec2	equ	0xFDD
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716 ;; *************** function _SendLCD *****************
  1717 ;; Defined at:
  1718 ;;		line 27 in file "LCD.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  Byte            1    wreg     unsigned char 
  1721 ;;  type            1    4[COMRAM] unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  Byte            1    5[COMRAM] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1733 ;;      Params:         1       0       0       0
  1734 ;;      Locals:         1       0       0       0
  1735 ;;      Temps:          0       0       0       0
  1736 ;;      Totals:         2       0       0       0
  1737 ;;Total ram usage:        2 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    2
  1740 ;; This function calls:
  1741 ;;		_LCDout
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;;		_LCD_Init
  1745 ;;		_SetLine
  1746 ;;		_LCD_String
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text12
  1751  00194C                     __ptext12:
  1752                           	opt stack 0
  1753  00194C                     _SendLCD:
  1754                           	opt stack 28
  1755                           
  1756                           ;incstack = 0
  1757                           ;SendLCD@Byte stored from wreg
  1758  00194C  6E06               	movwf	SendLCD@Byte,c
  1759                           
  1760                           ;LCD.c: 30: LATAbits.LATA6=type;
  1761  00194E  B005               	btfsc	SendLCD@type,0,c
  1762  001950  D002               	bra	u465
  1763  001952  9C89               	bcf	3977,6,c	;volatile
  1764  001954  D001               	bra	u466
  1765  001956                     u465:
  1766  001956  8C89               	bsf	3977,6,c	;volatile
  1767  001958                     u466:
  1768                           
  1769                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1770  001958  3806               	swapf	SendLCD@Byte,w,c
  1771  00195A  0B0F               	andlw	15
  1772  00195C  0B0F               	andlw	15
  1773  00195E  EC5D  F00E         	call	_LCDout
  1774                           
  1775                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1776  001962  0E06               	movlw	6
  1777  001964                     u747:
  1778  001964  2EE8               	decfsz	wreg,f,c
  1779  001966  D7FE               	goto	u747
  1780  001968  D000               	nop2		;nop
  1781                           
  1782                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1783  00196A  5006               	movf	SendLCD@Byte,w,c
  1784  00196C  0B0F               	andlw	15
  1785  00196E  EC5D  F00E         	call	_LCDout
  1786                           
  1787                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1788  001972  0E21               	movlw	33
  1789  001974                     u757:
  1790  001974  2EE8               	decfsz	wreg,f,c
  1791  001976  D7FE               	goto	u757
  1792  001978  F000               	nop	
  1793  00197A  0012               	return		;funcret
  1794  00197C                     __end_of_SendLCD:
  1795                           	opt stack 0
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           wreg	equ	0xFE8
  1799                           indf2	equ	0xFDF
  1800                           postinc2	equ	0xFDE
  1801                           postdec2	equ	0xFDD
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _LCDout *****************
  1807 ;; Defined at:
  1808 ;;		line 14 in file "LCD.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  number          1    wreg     unsigned char 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  number          1    3[COMRAM] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;		None               void
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1822 ;;      Params:         0       0       0       0
  1823 ;;      Locals:         1       0       0       0
  1824 ;;      Temps:          3       0       0       0
  1825 ;;      Totals:         4       0       0       0
  1826 ;;Total ram usage:        4 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    1
  1829 ;; This function calls:
  1830 ;;		_E_TOG
  1831 ;; This function is called by:
  1832 ;;		_SendLCD
  1833 ;;		_LCD_Init
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text13
  1838  001CBA                     __ptext13:
  1839                           	opt stack 0
  1840  001CBA                     _LCDout:
  1841                           	opt stack 28
  1842                           
  1843                           ;incstack = 0
  1844                           ;LCDout@number stored from wreg
  1845  001CBA  6E04               	movwf	LCDout@number,c
  1846                           
  1847                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1848  001CBC  5004               	movf	LCDout@number,w,c
  1849  001CBE  6E01               	movwf	??_LCDout& (0+255),c
  1850  001CC0  6A02               	clrf	(??_LCDout+1)& (0+255),c
  1851  001CC2  0E07               	movlw	7
  1852  001CC4                     u115:
  1853  001CC4  90D8               	bcf	status,0,c
  1854  001CC6  3601               	rlcf	??_LCDout,f,c
  1855  001CC8  3602               	rlcf	??_LCDout+1,f,c
  1856  001CCA  2EE8               	decfsz	wreg,f,c
  1857  001CCC  D7FB               	goto	u115
  1858  001CCE  0E07               	movlw	7
  1859  001CD0  6E03               	movwf	(??_LCDout+2)& (0+255),c
  1860  001CD2                     u125:
  1861  001CD2  3402               	rlcf	??_LCDout+1,w,c
  1862  001CD4  3202               	rrcf	??_LCDout+1,f,c
  1863  001CD6  3201               	rrcf	??_LCDout,f,c
  1864  001CD8  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
  1865  001CDA  D7FB               	goto	u125
  1866  001CDC  4601               	rlncf	??_LCDout,f,c
  1867  001CDE  508B               	movf	3979,w,c	;volatile
  1868  001CE0  1801               	xorwf	??_LCDout,w,c
  1869  001CE2  0BFD               	andlw	-3
  1870  001CE4  1801               	xorwf	??_LCDout,w,c
  1871  001CE6  6E8B               	movwf	3979,c	;volatile
  1872                           
  1873                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1874  001CE8  5004               	movf	LCDout@number,w,c
  1875  001CEA  6E01               	movwf	??_LCDout& (0+255),c
  1876  001CEC  6A02               	clrf	(??_LCDout+1)& (0+255),c
  1877  001CEE  0E06               	movlw	6
  1878  001CF0                     u135:
  1879  001CF0  90D8               	bcf	status,0,c
  1880  001CF2  3601               	rlcf	??_LCDout,f,c
  1881  001CF4  3602               	rlcf	??_LCDout+1,f,c
  1882  001CF6  2EE8               	decfsz	wreg,f,c
  1883  001CF8  D7FB               	goto	u135
  1884  001CFA  0E07               	movlw	7
  1885  001CFC  6E03               	movwf	(??_LCDout+2)& (0+255),c
  1886  001CFE                     u145:
  1887  001CFE  3402               	rlcf	??_LCDout+1,w,c
  1888  001D00  3202               	rrcf	??_LCDout+1,f,c
  1889  001D02  3201               	rrcf	??_LCDout,f,c
  1890  001D04  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
  1891  001D06  D7FB               	goto	u145
  1892  001D08  4601               	rlncf	??_LCDout,f,c
  1893  001D0A  4601               	rlncf	??_LCDout,f,c
  1894  001D0C  508B               	movf	3979,w,c	;volatile
  1895  001D0E  1801               	xorwf	??_LCDout,w,c
  1896  001D10  0BFB               	andlw	-5
  1897  001D12  1801               	xorwf	??_LCDout,w,c
  1898  001D14  6E8B               	movwf	3979,c	;volatile
  1899                           
  1900                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1901  001D16  5004               	movf	LCDout@number,w,c
  1902  001D18  6E01               	movwf	??_LCDout& (0+255),c
  1903  001D1A  6A02               	clrf	(??_LCDout+1)& (0+255),c
  1904  001D1C  0E05               	movlw	5
  1905  001D1E                     u155:
  1906  001D1E  90D8               	bcf	status,0,c
  1907  001D20  3601               	rlcf	??_LCDout,f,c
  1908  001D22  3602               	rlcf	??_LCDout+1,f,c
  1909  001D24  2EE8               	decfsz	wreg,f,c
  1910  001D26  D7FB               	goto	u155
  1911  001D28  0E07               	movlw	7
  1912  001D2A  6E03               	movwf	(??_LCDout+2)& (0+255),c
  1913  001D2C                     u165:
  1914  001D2C  3402               	rlcf	??_LCDout+1,w,c
  1915  001D2E  3202               	rrcf	??_LCDout+1,f,c
  1916  001D30  3201               	rrcf	??_LCDout,f,c
  1917  001D32  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
  1918  001D34  D7FB               	goto	u165
  1919  001D36  508C               	movf	3980,w,c	;volatile
  1920  001D38  1801               	xorwf	??_LCDout,w,c
  1921  001D3A  0BFE               	andlw	-2
  1922  001D3C  1801               	xorwf	??_LCDout,w,c
  1923  001D3E  6E8C               	movwf	3980,c	;volatile
  1924                           
  1925                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1926  001D40  5004               	movf	LCDout@number,w,c
  1927  001D42  6E01               	movwf	??_LCDout& (0+255),c
  1928  001D44  6A02               	clrf	(??_LCDout+1)& (0+255),c
  1929  001D46  3A01               	swapf	??_LCDout,f,c
  1930  001D48  3A02               	swapf	??_LCDout+1,f,c
  1931  001D4A  0EF0               	movlw	240
  1932  001D4C  1602               	andwf	??_LCDout+1,f,c
  1933  001D4E  5001               	movf	??_LCDout,w,c
  1934  001D50  0B0F               	andlw	15
  1935  001D52  1202               	iorwf	??_LCDout+1,f,c
  1936  001D54  0EF0               	movlw	240
  1937  001D56  1601               	andwf	??_LCDout,f,c
  1938  001D58  0E07               	movlw	7
  1939  001D5A  6E03               	movwf	(??_LCDout+2)& (0+255),c
  1940  001D5C                     u175:
  1941  001D5C  3402               	rlcf	??_LCDout+1,w,c
  1942  001D5E  3202               	rrcf	??_LCDout+1,f,c
  1943  001D60  3201               	rrcf	??_LCDout,f,c
  1944  001D62  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
  1945  001D64  D7FB               	goto	u175
  1946  001D66  4601               	rlncf	??_LCDout,f,c
  1947  001D68  508C               	movf	3980,w,c	;volatile
  1948  001D6A  1801               	xorwf	??_LCDout,w,c
  1949  001D6C  0BFD               	andlw	-3
  1950  001D6E  1801               	xorwf	??_LCDout,w,c
  1951  001D70  6E8C               	movwf	3980,c	;volatile
  1952                           
  1953                           ;LCD.c: 21: E_TOG();
  1954  001D72  EC77  F00C         	call	_E_TOG	;wreg free
  1955                           
  1956                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1957  001D76  0E03               	movlw	3
  1958  001D78                     u767:
  1959  001D78  2EE8               	decfsz	wreg,f,c
  1960  001D7A  D7FE               	goto	u767
  1961  001D7C  F000               	nop	
  1962  001D7E  0012               	return		;funcret
  1963  001D80                     __end_of_LCDout:
  1964                           	opt stack 0
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           wreg	equ	0xFE8
  1968                           indf2	equ	0xFDF
  1969                           postinc2	equ	0xFDE
  1970                           postdec2	equ	0xFDD
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _E_TOG *****************
  1976 ;; Defined at:
  1977 ;;		line 5 in file "LCD.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;		None               void
  1984 ;; Registers used:
  1985 ;;		wreg
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1991 ;;      Params:         0       0       0       0
  1992 ;;      Locals:         0       0       0       0
  1993 ;;      Temps:          0       0       0       0
  1994 ;;      Totals:         0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_LCDout
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text14
  2005  0018EE                     __ptext14:
  2006                           	opt stack 0
  2007  0018EE                     _E_TOG:
  2008                           	opt stack 28
  2009                           
  2010                           ;LCD.c: 8: LATCbits.LATC0=1;
  2011                           
  2012                           ;incstack = 0
  2013  0018EE  808B               	bsf	3979,0,c	;volatile
  2014                           
  2015                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2016  0018F0  0E03               	movlw	3
  2017  0018F2                     u777:
  2018  0018F2  2EE8               	decfsz	wreg,f,c
  2019  0018F4  D7FE               	goto	u777
  2020  0018F6  F000               	nop	
  2021                           
  2022                           ;LCD.c: 10: LATCbits.LATC0=0;
  2023  0018F8  908B               	bcf	3979,0,c	;volatile
  2024  0018FA  0012               	return		;funcret
  2025  0018FC                     __end_of_E_TOG:
  2026                           	opt stack 0
  2027  0000                     prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           wreg	equ	0xFE8
  2030                           indf2	equ	0xFDF
  2031                           postinc2	equ	0xFDE
  2032                           postdec2	equ	0xFDD
  2033                           fsr2h	equ	0xFDA
  2034                           fsr2l	equ	0xFD9
  2035                           status	equ	0xFD8
  2036                           prodh	equ	0xFF4
  2037                           prodl	equ	0xFF3
  2038                           wreg	equ	0xFE8
  2039                           indf2	equ	0xFDF
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046                           	psect	rparam
  2047  0000                     prodh	equ	0xFF4
  2048                           prodl	equ	0xFF3
  2049                           wreg	equ	0xFE8
  2050                           indf2	equ	0xFDF
  2051                           postinc2	equ	0xFDE
  2052                           postdec2	equ	0xFDD
  2053                           fsr2h	equ	0xFDA
  2054                           fsr2l	equ	0xFD9
  2055                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     50      50
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S27DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S27DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedBack
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedBack->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   12673
                                             32 COMRAM    18    18      0
                           _LCD_Init
                            _SendLCD
                            _delay_s
                     _fullSpeedAhead
                      _fullSpeedBack
                            _initPWM
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2179
                                             28 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2179
                                             28 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    2007
                                             23 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2179
                                             28 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    1963
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1275
                                             14 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     253
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     394
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     7      0      60
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     762
                                              6 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _SendLCD                                              2     1      1     702
                                              4 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (2) _LCDout                                               4     4      0      60
                                              0 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (3) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _SendLCD
     _LCDout
       _E_TOG
   _delay_s
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     32      32       1       52.6%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 06 15:48:24 2018

                     l53 1F18                       l92 1E58             ___awdiv@sign 000C  
    ___wmul@multiplicand 0003                      l122 1ACC                      l880 1A3A  
                    l890 1A62                      l882 1A42                      l892 1A66  
                    u115 1CC4                      u125 1CD2                      u135 1CF0  
                    u145 1CFE                      u155 1D1E                      u165 1D2C  
                    u175 1D5C                      u434 1DF4                      u435 1DF0  
                    u444 1E4C                      u445 1E48                      u455 1EA4  
                    u465 1956                      u617 1BBA                      u466 1958  
                    u707 1C76                      u627 1AC6                      u717 1C8C  
                    u637 1A54                      u727 1CA0                      u647 1C10  
                    u737 1CB2                      u657 1C26                      u747 1964  
                    u667 1C36                      u757 1974                      u677 1C44  
                    u767 1D78                      u687 1C52                      u777 18F2  
                    u697 1C64                      wreg 000FE8                     l1100 1B64  
                   l1110 1E30                     l1130 1AAC                     l1122 1A7C  
                   l1126 1A94                     l1080 1B24                     l1082 1B2C  
                   l1074 1B0E                     l1226 1F24                     l1092 1B4C  
                   l1084 1B30                     l1068 1AFE                     l1172 1B88  
                   l1182 1BC0                     l1096 1B56                     l1176 1BA0  
                   l1168 1B70                     _LATB 000F8A                     _main 1EB4  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   _stop 1B6E                     prodh 000FF4                     prodl 000FF3  
                   start 0000           delay_s@seconds 0003             ___param_bank 000010  
        __end_of_SendLCD 197C         __end_of_LCD_Init 1CBA                    ?_main 0001  
        __end_of___awdiv 1B6E                    ?_stop 0018          ___awdiv@divisor 0009  
                  _PDC0H 000F78                    _PDC1H 000F76                    _PDC0L 000F79  
                  _PDC1L 000F77          ___awdiv@counter 000B                    _E_TOG 18EE  
        __end_of_delay_s 1A7A          __end_of_initPWM 194C                    status 000FD8  
        __initialization 18E8             __end_of_main 2000             __end_of_stop 1BFE  
         __CFG_OSC$IRCIO 000000                   ??_main 0021                   ??_stop 001C  
          __activetblptr 000000                   ?_E_TOG 0001             ?_setMotorPWM 000F  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
 __size_of_fullSpeedBack 0036         ___awdiv@dividend 0007           __CFG_WDTEN$OFF 000000  
                 _LCDout 1CBA              SendLCD@Byte 0006                   _OSCCON 000FD3  
                 _PTCON0 000F7F                   _PTCON1 000F7E                   _PTPERH 000F7A  
                 _PTPERL 000F7B              SendLCD@type 0005                ??_SendLCD 0006  
                 ___wmul 18FC                ??___awdiv 000B         ___awdiv@quotient 000D  
              ??_delay_s 0001                ??_initPWM 0001                   stop@mL 0018  
                 stop@mR 001A         __end_of_turnLeft 19E8          fullSpeedBack@mL 001D  
        fullSpeedBack@mR 001F               __accesstop 0060  __end_of__initialization 18E8  
              ?_LCD_Init 0001            ___rparam_used 000001            __end_of_E_TOG 18FC  
         __pcstackCOMRAM 0001            _fullSpeedBack 197C                  ??_E_TOG 0001  
                ?_LCDout 0001               ??_LCD_Init 0007           ?_fullSpeedBack 001D  
                ?___wmul 0001  __size_of_fullSpeedAhead 0070                  _PWMCON0 000F6F  
                _PWMCON1 000F6E     __size_of_setMotorPWM 0134          __size_of_LCDout 00C6  
     __size_of_turnRight 0036                  _SendLCD 194C                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 1AEA          __size_of___wmul 0026  
                __pcinit 18E8                  _delay_s 1A1E                  __ramtop 0300  
              ?_turnLeft 001D                  __ptext0 1EB4                  __ptext1 19E8  
                __ptext2 19B2                  __ptext3 1B6E                  __ptext4 1922  
                __ptext5 197C                  __ptext6 1A7A                  __ptext7 1D80  
                __ptext8 18FC                  __ptext9 1AEA                  _initPWM 1922  
           LCDout@number 0004     end_of_initialization 18E8       setMotorPWM@PWMduty 0016  
        ??_fullSpeedBack 0021                  postdec2 000FDD                  postinc2 000FDE  
             ??_turnLeft 0021        __end_of_turnRight 1A1E                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94                _TRISDbits 000F95  
       fullSpeedAhead@mL 0018         fullSpeedAhead@mR 001A           __end_of_LCDout 1D80  
             main@motorL 0021               main@motorR 002A        __size_of_LCD_Init 00BC  
         _fullSpeedAhead 1A7A           __end_of___wmul 1922      start_initialization 18E8  
               ??_LCDout 0001   __end_of_fullSpeedAhead 1AEA                 ??___wmul 0005  
               ?_SendLCD 0005          ?_fullSpeedAhead 0018                 ?___awdiv 0007  
               ?_delay_s 0001                 ?_initPWM 0001           __size_of_E_TOG 000E  
      __size_of_turnLeft 0036            ??_setMotorPWM 0011                 _LCD_Init 1BFE  
         ___wmul@product 0005                 _LATAbits 000F89                 _LATCbits 000F8B  
               _LATDbits 000F8C              turnRight@mL 001D              turnRight@mR 001F  
      ___wmul@multiplier 0001             setMotorPWM@m 000F                _turnRight 19E8  
    __end_of_setMotorPWM 1EB4                 __Hrparam 0000         __size_of_SendLCD 0030  
               __Lrparam 0000    __end_of_fullSpeedBack 19B2         __size_of___awdiv 0084  
             _ANSEL0bits 000FB8         __size_of_delay_s 005C         __size_of_initPWM 002A  
             ?_turnRight 001D                 __ptext10 1A1E                 __ptext11 1BFE  
               __ptext12 194C                 __ptext13 1CBA                 __ptext14 18EE  
          __size_of_main 014C            __size_of_stop 0090               turnLeft@mL 001D  
             turnLeft@mR 001F                 delay_s@i 0004                 delay_s@j 0006  
               _turnLeft 19B2              _setMotorPWM 1D80         ??_fullSpeedAhead 001C  
             _OSCCONbits 000FD3              ??_turnRight 0021  
