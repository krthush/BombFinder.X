

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Mar 15 21:13:56 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18  0000                     _ANSEL0bits	set	4024
    19  0000                     _BAUDCONbits	set	4010
    20  0000                     _CAP1BUFH	set	3945
    21  0000                     _CAP1BUFL	set	3944
    22  0000                     _CAP1CON	set	3939
    23  0000                     _CAP2BUFH	set	3943
    24  0000                     _CAP2BUFL	set	3942
    25  0000                     _CAP2CON	set	3938
    26  0000                     _INTCONbits	set	4082
    27  0000                     _IPR1bits	set	3999
    28  0000                     _LATAbits	set	3977
    29  0000                     _LATB	set	3978
    30  0000                     _LATCbits	set	3979
    31  0000                     _LATDbits	set	3980
    32  0000                     _LATEbits	set	3981
    33  0000                     _OSCCON	set	4051
    34  0000                     _OSCCONbits	set	4051
    35  0000                     _PIE1bits	set	3997
    36  0000                     _PIR1bits	set	3998
    37  0000                     _PTCON0	set	3967
    38  0000                     _PTCON1	set	3966
    39  0000                     _PTPERH	set	3962
    40  0000                     _PTPERL	set	3963
    41  0000                     _PWMCON0	set	3951
    42  0000                     _PWMCON1	set	3950
    43  0000                     _RCONbits	set	4048
    44  0000                     _RCREG	set	4014
    45  0000                     _RCSTAbits	set	4011
    46  0000                     _SPBRG	set	4015
    47  0000                     _SPBRGH	set	4016
    48  0000                     _T5CON	set	4023
    49  0000                     _TRISAbits	set	3986
    50  0000                     _TRISBbits	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TRISCbits	set	3988
    53  0000                     _TRISDbits	set	3989
    54  0000                     _TRISEbits	set	3990
    55  0000                     _TXREG	set	4013
    56  0000                     _TXSTAbits	set	4012
    57  0000                     _PDC0H	set	3960
    58  0000                     _PDC0L	set	3961
    59  0000                     _PDC1H	set	3958
    60  0000                     _PDC1L	set	3959
    61                           
    62                           ; #config settings
    63  0000                     
    64                           	psect	cinit
    65  000242                     __pcinit:
    66                           	opt stack 0
    67  000242                     start_initialization:
    68                           	opt stack 0
    69  000242                     __initialization:
    70                           	opt stack 0
    71                           
    72                           ; Clear objects allocated to COMRAM (17 bytes)
    73  000242  EE00  F02B         	lfsr	0,__pbssCOMRAM
    74  000246  0E11               	movlw	17
    75  000248                     clear_0:
    76  000248  6AEE               	clrf	postinc0,c
    77  00024A  06E8               	decf	wreg,f,c
    78  00024C  E1FD               	bnz	clear_0
    79  00024E                     end_of_initialization:
    80                           	opt stack 0
    81  00024E                     __end_of__initialization:
    82                           	opt stack 0
    83  00024E  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    84  000250  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    85  000252  0E00               	movlw	low (__Lmediumconst shr (0+16))
    86  000254  6EF8               	movwf	tblptru,c
    87  000256  0100               	movlb	0
    88  000258  EF56  F000         	goto	_main	;jump to C main() function
    89                           tblptru	equ	0xFF8
    90                           postinc0	equ	0xFEE
    91                           wreg	equ	0xFE8
    92                           
    93                           	psect	bssCOMRAM
    94  00002B                     __pbssCOMRAM:
    95                           	opt stack 0
    96  00002B                     _ReceivedString:
    97                           	opt stack 0
    98  00002B                     	ds	16
    99  00003B                     _i:
   100                           	opt stack 0
   101  00003B                     	ds	1
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	cstackCOMRAM
   107  000001                     __pcstackCOMRAM:
   108                           	opt stack 0
   109  000001                     ??_InterruptHandlerHigh:
   110  000001                     
   111                           ; 0 bytes @ 0x0
   112  000001                     	ds	14
   113  00000F                     ??_delay_s:
   114  00000F                     _initRFID$1269:
   115                           	opt stack 0
   116  00000F                     enableSensor@status:
   117                           	opt stack 0
   118                           
   119                           ; 1 bytes @ 0xE
   120  00000F                     	ds	1
   121  000010                     delay_s@seconds:
   122                           	opt stack 0
   123  000010                     enableSensor@sensor:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0xF
   127  000010                     	ds	1
   128  000011                     delay_s@i:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0x10
   132  000011                     	ds	2
   133  000013                     main@test:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x12
   137  000013                     	ds	2
   138  000015                     main@i:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0x14
   142  000015                     	ds	1
   143  000016                     main@ScanAngle:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x15
   147  000016                     	ds	1
   148  000017                     main@DirectionFound:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x16
   152  000017                     	ds	1
   153  000018                     main@mode:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x17
   157  000018                     	ds	1
   158  000019                     main@motorL:
   159                           	opt stack 0
   160                           
   161                           ; 9 bytes @ 0x18
   162  000019                     	ds	9
   163  000022                     main@motorR:
   164                           	opt stack 0
   165                           
   166                           ; 9 bytes @ 0x21
   167  000022                     	ds	9
   168                           tblptru	equ	0xFF8
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 29 in file "main.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;  PathTaken     100    0        unsigned char [100]
   182 ;;  Message        10    0        unsigned char [10]
   183 ;;  motorR          9   33[COMRAM] struct DC_motor
   184 ;;  motorL          9   24[COMRAM] struct DC_motor
   185 ;;  SignalStreng    3    0        unsigned char [3]
   186 ;;  test            2   18[COMRAM] unsigned int 
   187 ;;  mode            1   23[COMRAM] unsigned char 
   188 ;;  DirectionFou    1   22[COMRAM] unsigned char 
   189 ;;  ScanAngle       1   21[COMRAM] unsigned char 
   190 ;;  i               1   20[COMRAM] unsigned char 
   191 ;; Return value:  Size  Location     Type
   192 ;;		None               void
   193 ;; Registers used:
   194 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   195 ;; Tracked objects:
   196 ;;		On entry : 0/0
   197 ;;		On exit  : 0/0
   198 ;;		Unchanged: 0/0
   199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   200 ;;      Params:         0       0       0       0
   201 ;;      Locals:        24       0       0       0
   202 ;;      Temps:          0       0       0       0
   203 ;;      Totals:        24       0       0       0
   204 ;;Total ram usage:       24 bytes
   205 ;; Hardware stack levels required when called:    2
   206 ;; This function calls:
   207 ;;		_delay_s
   208 ;;		_enableSensor
   209 ;;		_initIR
   210 ;;		_initMotorPWM
   211 ;;		_initRFID
   212 ;; This function is called by:
   213 ;;		Startup code after reset
   214 ;; This function uses a non-reentrant model
   215 ;;
   216                           
   217                           	psect	text0
   218  0000AC                     __ptext0:
   219                           	opt stack 0
   220  0000AC                     _main:
   221                           	opt stack 29
   222                           
   223                           ;main.c: 32: unsigned char Message[10];
   224                           ;main.c: 33: unsigned char i=0;
   225                           
   226                           ;incstack = 0
   227  0000AC  0E00               	movlw	0
   228  0000AE  6E15               	movwf	main@i,c
   229                           
   230                           ;main.c: 34: unsigned char mode=0;
   231  0000B0  0E00               	movlw	0
   232  0000B2  6E18               	movwf	main@mode,c
   233                           
   234                           ;main.c: 35: char DirectionFound=0;
   235  0000B4  0E00               	movlw	0
   236  0000B6  6E17               	movwf	main@DirectionFound,c
   237                           
   238                           ;main.c: 36: unsigned char SignalStrength[3];
   239                           ;main.c: 37: char PathTaken[100];
   240                           ;main.c: 38: unsigned int test=0;
   241  0000B8  0E00               	movlw	0
   242  0000BA  6E14               	movwf	main@test+1,c
   243  0000BC  0E00               	movlw	0
   244  0000BE  6E13               	movwf	main@test,c
   245                           
   246                           ;main.c: 40: unsigned char ScanAngle=6;
   247  0000C0  0E06               	movlw	6
   248  0000C2  6E16               	movwf	main@ScanAngle,c
   249                           
   250                           ;main.c: 43: INTCONbits.GIEH = 1;
   251  0000C4  8EF2               	bsf	intcon,7,c	;volatile
   252                           
   253                           ;main.c: 44: RCONbits.IPEN = 1;
   254  0000C6  8ED0               	bsf	4048,7,c	;volatile
   255                           
   256                           ;main.c: 45: INTCONbits.GIEL = 1;
   257  0000C8  8CF2               	bsf	intcon,6,c	;volatile
   258                           
   259                           ;main.c: 46: INTCONbits.INT0IE = 1;
   260  0000CA  88F2               	bsf	intcon,4,c	;volatile
   261                           
   262                           ;main.c: 47: INTCONbits.PEIE = 1;
   263  0000CC  8CF2               	bsf	intcon,6,c	;volatile
   264                           
   265                           ;main.c: 49: IPR1bits.RCIP=1;
   266  0000CE  8A9F               	bsf	3999,5,c	;volatile
   267                           
   268                           ;main.c: 50: PIE1bits.RCIE=1;
   269  0000D0  8A9D               	bsf	3997,5,c	;volatile
   270                           
   271                           ;main.c: 53: struct DC_motor motorL, motorR;
   272                           ;main.c: 54: motorL.power=0;
   273  0000D2  0E00               	movlw	0
   274  0000D4  6E19               	movwf	main@motorL,c
   275                           
   276                           ;main.c: 55: motorL.direction=1;
   277  0000D6  0E01               	movlw	1
   278  0000D8  6E1A               	movwf	main@motorL+1,c
   279                           
   280                           ;main.c: 56: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   281  0000DA  0E79               	movlw	121
   282  0000DC  6E1B               	movwf	main@motorL+2,c
   283  0000DE  0E0F               	movlw	15
   284  0000E0  6E1C               	movwf	main@motorL+3,c
   285                           
   286                           ;main.c: 57: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   287  0000E2  0E78               	movlw	120
   288  0000E4  6E1D               	movwf	main@motorL+4,c
   289  0000E6  0E0F               	movlw	15
   290  0000E8  6E1E               	movwf	main@motorL+5,c
   291                           
   292                           ;main.c: 58: motorL.dir_pin=0;
   293  0000EA  0E00               	movlw	0
   294  0000EC  6E1F               	movwf	main@motorL+6,c
   295                           
   296                           ;main.c: 59: motorL.PWMperiod=199;
   297  0000EE  0E00               	movlw	0
   298  0000F0  6E21               	movwf	main@motorL+8,c
   299  0000F2  0EC7               	movlw	199
   300  0000F4  6E20               	movwf	main@motorL+7,c
   301                           
   302                           ;main.c: 61: motorR.power=0;
   303  0000F6  0E00               	movlw	0
   304  0000F8  6E22               	movwf	main@motorR,c
   305                           
   306                           ;main.c: 62: motorR.direction=1;
   307  0000FA  0E01               	movlw	1
   308  0000FC  6E23               	movwf	main@motorR+1,c
   309                           
   310                           ;main.c: 63: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   311  0000FE  0E77               	movlw	119
   312  000100  6E24               	movwf	main@motorR+2,c
   313  000102  0E0F               	movlw	15
   314  000104  6E25               	movwf	main@motorR+3,c
   315                           
   316                           ;main.c: 64: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   317  000106  0E76               	movlw	118
   318  000108  6E26               	movwf	main@motorR+4,c
   319  00010A  0E0F               	movlw	15
   320  00010C  6E27               	movwf	main@motorR+5,c
   321                           
   322                           ;main.c: 65: motorR.dir_pin=2;
   323  00010E  0E02               	movlw	2
   324  000110  6E28               	movwf	main@motorR+6,c
   325                           
   326                           ;main.c: 66: motorR.PWMperiod=199;
   327  000112  0E00               	movlw	0
   328  000114  6E2A               	movwf	main@motorR+8,c
   329  000116  0EC7               	movlw	199
   330  000118  6E29               	movwf	main@motorR+7,c
   331                           
   332                           ;main.c: 68: OSCCON = 0x72;
   333  00011A  0E72               	movlw	114
   334  00011C  6ED3               	movwf	4051,c	;volatile
   335  00011E                     l47:
   336  00011E  B4D3               	btfsc	4051,2,c	;volatile
   337  000120  D01B               	goto	l1456
   338  000122  D7FD               	goto	l47
   339  000124                     l1440:
   340                           
   341                           ;main.c: 76: initMotorPWM();
   342  000124  ECD4  F000         	call	_initMotorPWM	;wreg free
   343                           
   344                           ;main.c: 77: initRFID();
   345  000128  EC11  F001         	call	_initRFID	;wreg free
   346                           
   347                           ;main.c: 78: initIR();
   348  00012C  EC00  F001         	call	_initIR	;wreg free
   349                           
   350                           ;main.c: 80: mode = 1;
   351  000130  0E01               	movlw	1
   352  000132  6E18               	movwf	main@mode,c
   353                           
   354                           ;main.c: 81: enableSensor(0, 1);
   355  000134  0E01               	movlw	1
   356  000136  6E0F               	movwf	enableSensor@status,c
   357  000138  0E00               	movlw	0
   358  00013A  ECED  F000         	call	_enableSensor
   359                           
   360                           ;main.c: 82: enableSensor(1, 1);
   361  00013E  0E01               	movlw	1
   362  000140  6E0F               	movwf	enableSensor@status,c
   363  000142  0E01               	movlw	1
   364  000144  ECED  F000         	call	_enableSensor
   365                           
   366                           ;main.c: 97: break;
   367                           
   368                           ;main.c: 85: case 1 :
   369                           
   370                           ;main.c: 83: break;
   371  000148  D007               	goto	l1456
   372  00014A                     l1448:
   373                           
   374                           ;main.c: 102: delay_s(3);
   375  00014A  0E03               	movlw	3
   376  00014C  ECB8  F000         	call	_delay_s
   377                           
   378                           ;main.c: 103: DirectionFound=1;
   379  000150  0E01               	movlw	1
   380  000152  6E17               	movwf	main@DirectionFound,c
   381                           
   382                           ;main.c: 104: mode = 1;
   383  000154  0E01               	movlw	1
   384  000156  6E18               	movwf	main@mode,c
   385  000158                     l1456:
   386  000158  5018               	movf	main@mode,w,c
   387                           
   388                           ; Switch size 1, requested type "space"
   389                           ; Number of cases is 4, Range of values is 0 to 3
   390                           ; switch strategies available:
   391                           ; Name         Instructions Cycles
   392                           ; simple_byte           13     7 (average)
   393                           ;	Chosen strategy is simple_byte
   394  00015A  0A00               	xorlw	0	; case 0
   395  00015C  B4D8               	btfsc	status,2,c
   396  00015E  D7E2               	goto	l1440
   397  000160  0A01               	xorlw	1	; case 1
   398  000162  B4D8               	btfsc	status,2,c
   399  000164  D7F9               	goto	l1456
   400  000166  0A03               	xorlw	3	; case 2
   401  000168  B4D8               	btfsc	status,2,c
   402  00016A  D7EF               	goto	l1448
   403  00016C  0A01               	xorlw	1	; case 3
   404  00016E  D7F4               	goto	l1456
   405  000170                     __end_of_main:
   406                           	opt stack 0
   407                           tblptru	equ	0xFF8
   408                           intcon	equ	0xFF2
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           status	equ	0xFD8
   412                           
   413 ;; *************** function _initRFID *****************
   414 ;; Defined at:
   415 ;;		line 5 in file "RFID_Reader.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;		None               void
   422 ;; Registers used:
   423 ;;		wreg, status,2
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   429 ;;      Params:         0       0       0       0
   430 ;;      Locals:         1       0       0       0
   431 ;;      Temps:          0       0       0       0
   432 ;;      Totals:         1       0       0       0
   433 ;;Total ram usage:        1 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; Hardware stack levels required when called:    1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text1
   444  000222                     __ptext1:
   445                           	opt stack 0
   446  000222                     _initRFID:
   447                           	opt stack 29
   448                           
   449                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   450                           
   451                           ;incstack = 0
   452  000222  0E01               	movlw	1
   453  000224  6E0F               	movwf	_initRFID$1269,c
   454  000226  5094               	movf	3988,w,c	;volatile
   455  000228  C00F  FF94         	movff	_initRFID$1269,3988	;volatile
   456                           
   457                           ;RFID_Reader.c: 10: SPBRG=205;
   458  00022C  0ECD               	movlw	205
   459  00022E  6EAF               	movwf	4015,c	;volatile
   460                           
   461                           ;RFID_Reader.c: 11: SPBRGH=0;
   462  000230  0E00               	movlw	0
   463  000232  6EB0               	movwf	4016,c	;volatile
   464                           
   465                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   466  000234  86AA               	bsf	4010,3,c	;volatile
   467                           
   468                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   469  000236  84AC               	bsf	4012,2,c	;volatile
   470                           
   471                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   472  000238  88AB               	bsf	4011,4,c	;volatile
   473                           
   474                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   475  00023A  8EAB               	bsf	4011,7,c	;volatile
   476                           
   477                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   478  00023C  98AC               	bcf	4012,4,c	;volatile
   479                           
   480                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   481  00023E  9CAB               	bcf	4011,6,c	;volatile
   482  000240  0012               	return		;funcret
   483  000242                     __end_of_initRFID:
   484                           	opt stack 0
   485                           tblptru	equ	0xFF8
   486                           intcon	equ	0xFF2
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           status	equ	0xFD8
   490                           
   491 ;; *************** function _initMotorPWM *****************
   492 ;; Defined at:
   493 ;;		line 4 in file "dc_motor.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;		None               void
   500 ;; Registers used:
   501 ;;		wreg, status,2
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   507 ;;      Params:         0       0       0       0
   508 ;;      Locals:         0       0       0       0
   509 ;;      Temps:          0       0       0       0
   510 ;;      Totals:         0       0       0       0
   511 ;;Total ram usage:        0 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    1
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_main
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text2
   522  0001A8                     __ptext2:
   523                           	opt stack 0
   524  0001A8                     _initMotorPWM:
   525                           	opt stack 29
   526                           
   527                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   528                           
   529                           ;incstack = 0
   530  0001A8  0E00               	movlw	0
   531  0001AA  6E7F               	movwf	3967,c	;volatile
   532                           
   533                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   534  0001AC  0E80               	movlw	128
   535  0001AE  6E7E               	movwf	3966,c	;volatile
   536                           
   537                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   538  0001B0  0E6F               	movlw	111
   539  0001B2  6E6F               	movwf	3951,c	;volatile
   540                           
   541                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   542  0001B4  0E00               	movlw	0
   543  0001B6  6E6E               	movwf	3950,c	;volatile
   544                           
   545                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   546  0001B8  0EC7               	movlw	199
   547  0001BA  6E7B               	movwf	3963,c	;volatile
   548                           
   549                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   550  0001BC  0E00               	movlw	0
   551  0001BE  6E7A               	movwf	3962,c	;volatile
   552                           
   553                           ;dc_motor.c: 13: PDC0L = 0<<2;
   554  0001C0  0E00               	movlw	0
   555  0001C2  6E79               	movwf	3961,c	;volatile
   556                           
   557                           ;dc_motor.c: 14: PDC0H = 0>>6;
   558  0001C4  0E00               	movlw	0
   559  0001C6  6E78               	movwf	3960,c	;volatile
   560                           
   561                           ;dc_motor.c: 15: PDC1L = 0<<2;
   562  0001C8  0E00               	movlw	0
   563  0001CA  6E77               	movwf	3959,c	;volatile
   564                           
   565                           ;dc_motor.c: 16: PDC1H = 0>>6;
   566  0001CC  0E00               	movlw	0
   567  0001CE  6E76               	movwf	3958,c	;volatile
   568                           
   569                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   570  0001D0  9093               	bcf	3987,0,c	;volatile
   571                           
   572                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   573  0001D2  9293               	bcf	3987,1,c	;volatile
   574                           
   575                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   576  0001D4  9493               	bcf	3987,2,c	;volatile
   577                           
   578                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   579  0001D6  9693               	bcf	3987,3,c	;volatile
   580  0001D8  0012               	return		;funcret
   581  0001DA                     __end_of_initMotorPWM:
   582                           	opt stack 0
   583                           tblptru	equ	0xFF8
   584                           intcon	equ	0xFF2
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           status	equ	0xFD8
   588                           
   589 ;; *************** function _initIR *****************
   590 ;; Defined at:
   591 ;;		line 30 in file "IR_Reading.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;		None
   596 ;; Return value:  Size  Location     Type
   597 ;;		None               void
   598 ;; Registers used:
   599 ;;		wreg, status,2
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   605 ;;      Params:         0       0       0       0
   606 ;;      Locals:         0       0       0       0
   607 ;;      Temps:          0       0       0       0
   608 ;;      Totals:         0       0       0       0
   609 ;;Total ram usage:        0 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    1
   612 ;; This function calls:
   613 ;;		Nothing
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text3
   620  000200                     __ptext3:
   621                           	opt stack 0
   622  000200                     _initIR:
   623                           	opt stack 29
   624                           
   625                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   626                           
   627                           ;incstack = 0
   628  000200  9489               	bcf	3977,2,c	;volatile
   629                           
   630                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   631  000202  9689               	bcf	3977,3,c	;volatile
   632                           
   633                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   634  000204  8492               	bsf	3986,2,c	;volatile
   635                           
   636                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   637  000206  8692               	bsf	3986,3,c	;volatile
   638                           
   639                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   640  000208  94B8               	bcf	4024,2,c	;volatile
   641                           
   642                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   643  00020A  96B8               	bcf	4024,3,c	;volatile
   644                           
   645                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   646  00020C  9CB8               	bcf	4024,6,c	;volatile
   647                           
   648                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   649  00020E  9EB8               	bcf	4024,7,c	;volatile
   650                           
   651                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   652  000210  0E06               	movlw	6
   653  000212  6E63               	movwf	3939,c	;volatile
   654                           
   655                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   656  000214  0E06               	movlw	6
   657  000216  6E62               	movwf	3938,c	;volatile
   658                           
   659                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   660  000218  9096               	bcf	3990,0,c	;volatile
   661                           
   662                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   663  00021A  9296               	bcf	3990,1,c	;volatile
   664                           
   665                           ;IR_Reading.c: 69: T5CON=0b01011001;
   666  00021C  0E59               	movlw	89
   667  00021E  6EB7               	movwf	4023,c	;volatile
   668  000220  0012               	return		;funcret
   669  000222                     __end_of_initIR:
   670                           	opt stack 0
   671                           tblptru	equ	0xFF8
   672                           intcon	equ	0xFF2
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function _enableSensor *****************
   678 ;; Defined at:
   679 ;;		line 106 in file "IR_Reading.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  sensor          1    wreg     unsigned char 
   682 ;;  status          1   14[COMRAM] unsigned char 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  sensor          1   15[COMRAM] unsigned char 
   685 ;; Return value:  Size  Location     Type
   686 ;;		None               void
   687 ;; Registers used:
   688 ;;		wreg, status,2, status,0
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   694 ;;      Params:         1       0       0       0
   695 ;;      Locals:         1       0       0       0
   696 ;;      Temps:          0       0       0       0
   697 ;;      Totals:         2       0       0       0
   698 ;;Total ram usage:        2 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    1
   701 ;; This function calls:
   702 ;;		Nothing
   703 ;; This function is called by:
   704 ;;		_main
   705 ;;		_ScanWithRange
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text4
   710  0001DA                     __ptext4:
   711                           	opt stack 0
   712  0001DA                     _enableSensor:
   713                           	opt stack 29
   714                           
   715                           ;incstack = 0
   716                           ;enableSensor@sensor stored from wreg
   717  0001DA  6E10               	movwf	enableSensor@sensor,c
   718                           
   719                           ;IR_Reading.c: 108: if (sensor==0){
   720  0001DC  5010               	movf	enableSensor@sensor,w,c
   721  0001DE  A4D8               	btfss	status,2,c
   722  0001E0  D006               	goto	l1412
   723                           
   724                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
   725  0001E2  B00F               	btfsc	enableSensor@status,0,c
   726  0001E4  D002               	bra	u545
   727  0001E6  908D               	bcf	3981,0,c	;volatile
   728  0001E8  D001               	bra	u546
   729  0001EA                     u545:
   730  0001EA  808D               	bsf	3981,0,c	;volatile
   731  0001EC                     u546:
   732                           
   733                           ;IR_Reading.c: 110: } else if (sensor==1){
   734  0001EC  0012               	return	
   735  0001EE                     l1412:
   736  0001EE  0410               	decf	enableSensor@sensor,w,c
   737  0001F0  A4D8               	btfss	status,2,c
   738  0001F2  0012               	return	
   739                           
   740                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
   741  0001F4  B00F               	btfsc	enableSensor@status,0,c
   742  0001F6  D002               	bra	u565
   743  0001F8  928D               	bcf	3981,1,c	;volatile
   744  0001FA  D001               	bra	u566
   745  0001FC                     u565:
   746  0001FC  828D               	bsf	3981,1,c	;volatile
   747  0001FE                     u566:
   748  0001FE  0012               	return	
   749  000200                     __end_of_enableSensor:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           intcon	equ	0xFF2
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           status	equ	0xFD8
   756                           
   757 ;; *************** function _delay_s *****************
   758 ;; Defined at:
   759 ;;		line 10 in file "Movement.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  seconds         1    wreg     unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  seconds         1   15[COMRAM] unsigned char 
   764 ;;  i               2   16[COMRAM] unsigned int 
   765 ;; Return value:  Size  Location     Type
   766 ;;		None               void
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   774 ;;      Params:         0       0       0       0
   775 ;;      Locals:         3       0       0       0
   776 ;;      Temps:          1       0       0       0
   777 ;;      Totals:         4       0       0       0
   778 ;;Total ram usage:        4 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; Hardware stack levels required when called:    1
   781 ;; This function calls:
   782 ;;		Nothing
   783 ;; This function is called by:
   784 ;;		_main
   785 ;;		_ScanIR
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           	psect	text5
   790  000170                     __ptext5:
   791                           	opt stack 0
   792  000170                     _delay_s:
   793                           	opt stack 29
   794                           
   795                           ;incstack = 0
   796                           ;delay_s@seconds stored from wreg
   797  000170  6E10               	movwf	delay_s@seconds,c
   798                           
   799                           ;Movement.c: 11: unsigned int i=0;
   800  000172  0E00               	movlw	0
   801  000174  6E12               	movwf	delay_s@i+1,c
   802  000176  0E00               	movlw	0
   803  000178  6E11               	movwf	delay_s@i,c
   804                           
   805                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
   806  00017A  0E00               	movlw	0
   807  00017C  6E12               	movwf	delay_s@i+1,c
   808  00017E  0E01               	movlw	1
   809  000180  6E11               	movwf	delay_s@i,c
   810  000182  D009               	goto	l1028
   811  000184                     l1024:
   812                           
   813                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
   814  000184  0E82               	movlw	130
   815  000186  6E0F               	movwf	??_delay_s& (0+255),c
   816  000188  0EDE               	movlw	222
   817  00018A                     u727:
   818  00018A  2EE8               	decfsz	wreg,f,c
   819  00018C  D7FE               	goto	u727
   820  00018E  2E0F               	decfsz	??_delay_s& (0+255),f,c
   821  000190  D7FC               	goto	u727
   822  000192  4A11               	infsnz	delay_s@i,f,c
   823  000194  2A12               	incf	delay_s@i+1,f,c
   824  000196                     l1028:
   825  000196  5010               	movf	delay_s@seconds,w,c
   826  000198  0D14               	mullw	20
   827  00019A  5011               	movf	delay_s@i,w,c
   828  00019C  5CF3               	subwf	prodl,w,c
   829  00019E  5012               	movf	delay_s@i+1,w,c
   830  0001A0  58F4               	subwfb	prodh,w,c
   831  0001A2  A0D8               	btfss	status,0,c
   832  0001A4  0012               	return	
   833  0001A6  D7EE               	goto	l1024
   834  0001A8                     __end_of_delay_s:
   835                           	opt stack 0
   836                           tblptru	equ	0xFF8
   837                           prodh	equ	0xFF4
   838                           prodl	equ	0xFF3
   839                           intcon	equ	0xFF2
   840                           postinc0	equ	0xFEE
   841                           wreg	equ	0xFE8
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _InterruptHandlerHigh *****************
   845 ;; Defined at:
   846 ;;		line 16 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;		None               void
   853 ;; Registers used:
   854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   860 ;;      Params:         0       0       0       0
   861 ;;      Locals:         0       0       0       0
   862 ;;      Temps:         14       0       0       0
   863 ;;      Totals:        14       0       0       0
   864 ;;Total ram usage:       14 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		Interrupt level 2
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	intcode
   874  000008                     __pintcode:
   875                           	opt stack 0
   876  000008                     _InterruptHandlerHigh:
   877                           	opt stack 29
   878                           
   879                           ;incstack = 0
   880  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   881  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
   882  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
   883  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
   884  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
   885  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
   886  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
   887  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
   888  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
   889  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
   890  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
   891  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
   892  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
   893  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
   894  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
   895                           
   896                           ;main.c: 18: if (PIR1bits.RCIF) {
   897  000042  AA9E               	btfss	3998,5,c	;volatile
   898  000044  D013               	goto	i2l44
   899                           
   900                           ;main.c: 19: ReceivedString[i]=RCREG;
   901  000046  503B               	movf	_i,w,c	;volatile
   902  000048  0D01               	mullw	1
   903  00004A  0E2B               	movlw	low _ReceivedString
   904  00004C  24F3               	addwf	prodl,w,c
   905  00004E  6ED9               	movwf	fsr2l,c
   906  000050  0E00               	movlw	high _ReceivedString
   907  000052  20F4               	addwfc	prodh,w,c
   908  000054  6EDA               	movwf	fsr2h,c
   909  000056  CFAE FFDF          	movff	4014,indf2	;volatile
   910                           
   911                           ;main.c: 20: if (i==15){
   912  00005A  0E0F               	movlw	15
   913  00005C  183B               	xorwf	_i,w,c	;volatile
   914  00005E  A4D8               	btfss	status,2,c
   915  000060  D003               	goto	i2l1062
   916                           
   917                           ;main.c: 21: i=0;
   918  000062  0E00               	movlw	0
   919  000064  6E3B               	movwf	_i,c	;volatile
   920                           
   921                           ;main.c: 22: }else{
   922  000066  D001               	goto	i2l1064
   923  000068                     i2l1062:
   924                           
   925                           ;main.c: 23: i++;
   926  000068  2A3B               	incf	_i,f,c	;volatile
   927  00006A                     i2l1064:
   928                           
   929                           ;main.c: 24: }
   930                           ;main.c: 25: PIR1bits.RCIF=0;
   931  00006A  9A9E               	bcf	3998,5,c	;volatile
   932  00006C                     i2l44:
   933  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
   934  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
   935  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
   936  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
   937  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
   938  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
   939  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
   940  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
   941  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
   942  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
   943  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
   944  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
   945  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
   946  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
   947  0000A4  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   948  0000A6  0011               	retfie		f
   949  0000A8                     __end_of_InterruptHandlerHigh:
   950                           	opt stack 0
   951  0000                     pclatu	equ	0xFFB
   952                           pclath	equ	0xFFA
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           prodh	equ	0xFF4
   958                           prodl	equ	0xFF3
   959                           intcon	equ	0xFF2
   960                           postinc0	equ	0xFEE
   961                           fsr0h	equ	0xFEA
   962                           fsr0l	equ	0xFE9
   963                           wreg	equ	0xFE8
   964                           fsr1h	equ	0xFE2
   965                           fsr1l	equ	0xFE1
   966                           indf2	equ	0xFDF
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           pclatu	equ	0xFFB
   971                           pclath	equ	0xFFA
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           prodh	equ	0xFF4
   977                           prodl	equ	0xFF3
   978                           intcon	equ	0xFF2
   979                           postinc0	equ	0xFEE
   980                           fsr0h	equ	0xFEA
   981                           fsr0l	equ	0xFE9
   982                           wreg	equ	0xFE8
   983                           fsr1h	equ	0xFE2
   984                           fsr1l	equ	0xFE1
   985                           indf2	equ	0xFDF
   986                           fsr2h	equ	0xFDA
   987                           fsr2l	equ	0xFD9
   988                           status	equ	0xFD8
   989                           
   990                           	psect	rparam
   991  0000                     pclatu	equ	0xFFB
   992                           pclath	equ	0xFFA
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           prodh	equ	0xFF4
   998                           prodl	equ	0xFF3
   999                           intcon	equ	0xFF2
  1000                           postinc0	equ	0xFEE
  1001                           fsr0h	equ	0xFEA
  1002                           fsr0l	equ	0xFE9
  1003                           wreg	equ	0xFE8
  1004                           fsr1h	equ	0xFE2
  1005                           fsr1l	equ	0xFE1
  1006                           indf2	equ	0xFDF
  1007                           fsr2h	equ	0xFDA
  1008                           fsr2l	equ	0xFD9
  1009                           status	equ	0xFD8
  1010                           
  1011                           	psect	temp
  1012  00003C                     btemp:
  1013                           	opt stack 0
  1014  00003C                     	ds	1
  1015  0000                     int$flags	set	btemp
  1016                           pclatu	equ	0xFFB
  1017                           pclath	equ	0xFFA
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           prodh	equ	0xFF4
  1023                           prodl	equ	0xFF3
  1024                           intcon	equ	0xFF2
  1025                           postinc0	equ	0xFEE
  1026                           fsr0h	equ	0xFEA
  1027                           fsr0l	equ	0xFE9
  1028                           wreg	equ	0xFE8
  1029                           fsr1h	equ	0xFE2
  1030                           fsr1l	equ	0xFE1
  1031                           indf2	equ	0xFDF
  1032                           fsr2h	equ	0xFDA
  1033                           fsr2l	equ	0xFD9
  1034                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_delay_s

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0     798
                                             18 COMRAM    24    24      0
                            _delay_s
                       _enableSensor
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     472
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      30
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_s
   _enableSensor
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B       3        0.0%
DATA                 0      0      3B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Mar 15 21:13:56 2018

                            _i 003B                             l47 011E                            u545 01EA  
                          u546 01EC                            u565 01FC                            u566 01FE  
                          u727 018A                            prod 000FF3                            wreg 000FE8  
                         l1024 0184                           l1028 0196                           l1412 01EE  
                         l1440 0124                           l1448 014A                           l1456 0158  
                         _LATB 000F8A                           i2l44 006C                           _main 00AC  
                main@ScanAngle 0016                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 003C  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 00A8                 delay_s@seconds 0010                   ___param_bank 000010  
                        ?_main 0001                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
                _initRFID$1269 000F                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                __end_of_delay_s 01A8  
                        main@i 0015                          tablat 000FF5                          status 000FD8  
              __initialization 0242                   __end_of_main 0170                 __CFG_OSC$IRCIO 000000  
         __end_of_enableSensor 0200                         ??_main 0013                  __activetblptr 000002  
                ?_initMotorPWM 0001                         i2l1062 0068                         i2l1064 006A  
               __CFG_WDTEN$OFF 000000                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B               __end_of_initRFID 0242                         _initIR 0200  
                       clear_0 0248                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                   __accesstop 0060        __end_of__initialization 024E                  ___rparam_used 000001  
               __pcstackCOMRAM 0001  __size_of_InterruptHandlerHigh 00A0          __size_of_enableSensor 0026  
                      _CAP1CON 000F63                        _CAP2CON 000F62                        ?_initIR 0001  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                      ?_initRFID 0001  
                 _enableSensor 01DA           __end_of_initMotorPWM 01DA                        __Hparam 0000  
                      __Lparam 0000                __size_of_initIR 0022                        __pcinit 0242  
                      _delay_s 0170                        __ramtop 0300                        __ptext0 00AC  
                      __ptext1 0222                        __ptext2 01A8                        __ptext3 0200  
                      __ptext4 01DA                        __ptext5 0170           end_of_initialization 024E  
                   ??_initRFID 000F                  __Lmediumconst 0000                      _RCSTAbits 000FAB  
                      postinc0 000FEE                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                      _TRISEbits 000F96  
                    _TXSTAbits 000FAC                     main@motorL 0019                     main@motorR 0022  
               _ReceivedString 002B                    _BAUDCONbits 000FAA                 __end_of_initIR 0222  
          start_initialization 0242          __size_of_initMotorPWM 0032   __end_of_InterruptHandlerHigh 00A8  
                     ??_initIR 000F                   _initMotorPWM 01A8                    __pbssCOMRAM 002B  
            __size_of_initRFID 0020                      __pintcode 0008                       ?_delay_s 0001  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _LATEbits 000F8D                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
         _InterruptHandlerHigh 0008                       __Hrparam 0000                       __Lrparam 0000  
                   _ANSEL0bits 000FB8               __size_of_delay_s 0038          ?_InterruptHandlerHigh 0001  
                     _initRFID 0222                  __size_of_main 00C4             main@DirectionFound 0017  
                     delay_s@i 0011                       int$flags 003C                       main@mode 0018  
                     main@test 0013             enableSensor@sensor 0010             enableSensor@status 000F  
                   _INTCONbits 000FF2                       intlevel2 0000                  ?_enableSensor 000F  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001                 ??_enableSensor 0010  
