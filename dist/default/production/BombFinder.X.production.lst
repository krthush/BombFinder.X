

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Mar 15 23:31:57 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     _ANSEL0bits	set	4024
    32  0000                     _BAUDCONbits	set	4010
    33  0000                     _CAP1BUFH	set	3945
    34  0000                     _CAP1BUFL	set	3944
    35  0000                     _CAP1CON	set	3939
    36  0000                     _CAP2BUFH	set	3943
    37  0000                     _CAP2BUFL	set	3942
    38  0000                     _CAP2CON	set	3938
    39  0000                     _INTCONbits	set	4082
    40  0000                     _IPR1bits	set	3999
    41  0000                     _LATAbits	set	3977
    42  0000                     _LATB	set	3978
    43  0000                     _LATCbits	set	3979
    44  0000                     _LATDbits	set	3980
    45  0000                     _LATEbits	set	3981
    46  0000                     _OSCCON	set	4051
    47  0000                     _OSCCONbits	set	4051
    48  0000                     _PIE1bits	set	3997
    49  0000                     _PIR1bits	set	3998
    50  0000                     _PTCON0	set	3967
    51  0000                     _PTCON1	set	3966
    52  0000                     _PTPERH	set	3962
    53  0000                     _PTPERL	set	3963
    54  0000                     _PWMCON0	set	3951
    55  0000                     _PWMCON1	set	3950
    56  0000                     _RCONbits	set	4048
    57  0000                     _RCREG	set	4014
    58  0000                     _RCSTAbits	set	4011
    59  0000                     _SPBRG	set	4015
    60  0000                     _SPBRGH	set	4016
    61  0000                     _T5CON	set	4023
    62  0000                     _TRISAbits	set	3986
    63  0000                     _TRISBbits	set	3987
    64  0000                     _TRISC	set	3988
    65  0000                     _TRISCbits	set	3988
    66  0000                     _TRISDbits	set	3989
    67  0000                     _TRISEbits	set	3990
    68  0000                     _TXREG	set	4013
    69  0000                     _TXSTAbits	set	4012
    70  0000                     _PDC0H	set	3960
    71  0000                     _PDC0L	set	3961
    72  0000                     _PDC1H	set	3958
    73  0000                     _PDC1L	set	3959
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  0008D0                     __pcinit:
    79                           	opt stack 0
    80  0008D0                     start_initialization:
    81                           	opt stack 0
    82  0008D0                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (17 bytes)
    86  0008D0  EE00  F03B         	lfsr	0,__pbssCOMRAM
    87  0008D4  0E11               	movlw	17
    88  0008D6                     clear_0:
    89  0008D6  6AEE               	clrf	postinc0,c
    90  0008D8  06E8               	decf	wreg,f,c
    91  0008DA  E1FD               	bnz	clear_0
    92  0008DC                     end_of_initialization:
    93                           	opt stack 0
    94  0008DC                     __end_of__initialization:
    95                           	opt stack 0
    96  0008DC  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    97  0008DE  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    98  0008E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  0008E2  6EF8               	movwf	tblptru,c
   100  0008E4  0100               	movlb	0
   101  0008E6  EF56  F000         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssCOMRAM
   107  00003B                     __pbssCOMRAM:
   108                           	opt stack 0
   109  00003B                     _ReceivedString:
   110                           	opt stack 0
   111  00003B                     	ds	16
   112  00004B                     _i:
   113                           	opt stack 0
   114  00004B                     	ds	1
   115                           tblptru	equ	0xFF8
   116                           postinc0	equ	0xFEE
   117                           wreg	equ	0xFE8
   118                           
   119                           	psect	cstackBANK0
   120  000060                     __pcstackBANK0:
   121                           	opt stack 0
   122  000060                     main@test:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x0
   126  000060                     	ds	2
   127  000062                     main@i:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x2
   131  000062                     	ds	1
   132  000063                     main@ScanAngle:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x3
   136  000063                     	ds	1
   137  000064                     main@mode:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x4
   141  000064                     	ds	1
   142  000065                     main@DirectionFound:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x5
   146  000065                     	ds	1
   147  000066                     main@motorL:
   148                           	opt stack 0
   149                           
   150                           ; 9 bytes @ 0x6
   151  000066                     	ds	9
   152  00006F                     main@motorR:
   153                           	opt stack 0
   154                           
   155                           ; 9 bytes @ 0xF
   156  00006F                     	ds	9
   157                           tblptru	equ	0xFF8
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt stack 0
   164  000001                     ??_InterruptHandlerHigh:
   165  000001                     
   166                           ; 0 bytes @ 0x0
   167  000001                     	ds	14
   168  00000F                     ??_delay_s:
   169  00000F                     ??_delay_tenth_s:
   170  00000F                     ?_grabLeftIR:
   171                           	opt stack 0
   172  00000F                     ?_grabRightIR:
   173                           	opt stack 0
   174  00000F                     ?___wmul:
   175                           	opt stack 0
   176  00000F                     _initRFID$1287:
   177                           	opt stack 0
   178  00000F                     enableSensor@status:
   179                           	opt stack 0
   180  00000F                     ___wmul@multiplier:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xE
   184  00000F                     	ds	1
   185  000010                     delay_s@seconds:
   186                           	opt stack 0
   187  000010                     delay_tenth_s@tenth_seconds:
   188                           	opt stack 0
   189  000010                     enableSensor@sensor:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0xF
   193  000010                     	ds	1
   194  000011                     ??_grabLeftIR:
   195  000011                     ??_grabRightIR:
   196  000011                     delay_s@i:
   197                           	opt stack 0
   198  000011                     delay_tenth_s@i:
   199                           	opt stack 0
   200  000011                     ___wmul@multiplicand:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x10
   204  000011                     	ds	2
   205  000013                     grabRightIR@IR_signal:
   206                           	opt stack 0
   207  000013                     grabLeftIR@IR_signal:
   208                           	opt stack 0
   209  000013                     ___wmul@product:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x12
   213  000013                     	ds	2
   214  000015                     ?___awdiv:
   215                           	opt stack 0
   216  000015                     grabRightIR@i:
   217                           	opt stack 0
   218  000015                     grabLeftIR@i:
   219                           	opt stack 0
   220  000015                     ___awdiv@dividend:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x14
   224  000015                     	ds	2
   225  000017                     ___awdiv@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x16
   229  000017                     	ds	2
   230  000019                     ___awdiv@counter:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x18
   234  000019                     	ds	1
   235  00001A                     ___awdiv@sign:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x19
   239  00001A                     	ds	1
   240  00001B                     ___awdiv@quotient:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x1A
   244  00001B                     	ds	2
   245  00001D                     setMotorPWM@m:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x1C
   249  00001D                     	ds	2
   250  00001F                     ??_setMotorPWM:
   251                           
   252                           ; 0 bytes @ 0x1E
   253  00001F                     	ds	5
   254  000024                     setMotorPWM@PWMduty:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x23
   258  000024                     	ds	2
   259  000026                     stop@mL:
   260                           	opt stack 0
   261  000026                     fullSpeedAhead@mL:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x25
   265  000026                     	ds	2
   266  000028                     stop@mR:
   267                           	opt stack 0
   268  000028                     fullSpeedAhead@mR:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x27
   272  000028                     	ds	2
   273  00002A                     
   274                           ; 0 bytes @ 0x29
   275  00002A                     	ds	1
   276  00002B                     turnLeft@mL:
   277                           	opt stack 0
   278  00002B                     turnRight@mL:
   279                           	opt stack 0
   280  00002B                     fullSpeedBack@mL:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x2A
   284  00002B                     	ds	2
   285  00002D                     turnLeft@mR:
   286                           	opt stack 0
   287  00002D                     turnRight@mR:
   288                           	opt stack 0
   289  00002D                     fullSpeedBack@mR:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x2C
   293  00002D                     	ds	2
   294  00002F                     ScanIR@mL:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x2E
   298  00002F                     	ds	2
   299  000031                     ScanIR@mR:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x30
   303  000031                     	ds	2
   304  000033                     ??_ScanIR:
   305                           
   306                           ; 0 bytes @ 0x32
   307  000033                     	ds	2
   308  000035                     ScanIR@DirectionFoundTolerance:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x34
   312  000035                     	ds	2
   313  000037                     ScanIR@SensorResult:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0x36
   317  000037                     	ds	4
   318  00003B                     tblptru	equ	0xFF8
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           ; 0 bytes @ 0x3A
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 29 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  PathTaken     100    0        unsigned char [100]
   333 ;;  Message        10    0        unsigned char [10]
   334 ;;  motorR          9   15[BANK0 ] struct DC_motor
   335 ;;  motorL          9    6[BANK0 ] struct DC_motor
   336 ;;  SignalStreng    3    0        unsigned char [3]
   337 ;;  test            2    0[BANK0 ] unsigned int 
   338 ;;  DirectionFou    1    5[BANK0 ] unsigned char 
   339 ;;  mode            1    4[BANK0 ] unsigned char 
   340 ;;  ScanAngle       1    3[BANK0 ] unsigned char 
   341 ;;  i               1    2[BANK0 ] unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;		None               void
   344 ;; Registers used:
   345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   351 ;;      Params:         0       0       0       0
   352 ;;      Locals:         0      24       0       0
   353 ;;      Temps:          0       0       0       0
   354 ;;      Totals:         0      24       0       0
   355 ;;Total ram usage:       24 bytes
   356 ;; Hardware stack levels required when called:    6
   357 ;; This function calls:
   358 ;;		_ScanIR
   359 ;;		_delay_s
   360 ;;		_enableSensor
   361 ;;		_fullSpeedAhead
   362 ;;		_fullSpeedBack
   363 ;;		_initIR
   364 ;;		_initMotorPWM
   365 ;;		_initRFID
   366 ;;		_stop
   367 ;; This function is called by:
   368 ;;		Startup code after reset
   369 ;; This function uses a non-reentrant model
   370 ;;
   371                           
   372                           	psect	text0
   373  0000AC                     __ptext0:
   374                           	opt stack 0
   375  0000AC                     _main:
   376                           	opt stack 25
   377                           
   378                           ;main.c: 32: unsigned char Message[10];
   379                           ;main.c: 33: unsigned char i=0;
   380                           
   381                           ;incstack = 0
   382  0000AC  0E00               	movlw	0
   383  0000AE  0100               	movlb	0	; () banked
   384  0000B0  6F62               	movwf	main@i& (0+255),b
   385                           
   386                           ;main.c: 34: unsigned char mode=0;
   387  0000B2  0E00               	movlw	0
   388  0000B4  0100               	movlb	0	; () banked
   389  0000B6  6F64               	movwf	main@mode& (0+255),b
   390                           
   391                           ;main.c: 35: char DirectionFound=0;
   392  0000B8  0E00               	movlw	0
   393  0000BA  0100               	movlb	0	; () banked
   394  0000BC  6F65               	movwf	main@DirectionFound& (0+255),b
   395                           
   396                           ;main.c: 36: unsigned char SignalStrength[3];
   397                           ;main.c: 37: char PathTaken[100];
   398                           ;main.c: 38: unsigned int test=0;
   399  0000BE  0E00               	movlw	0
   400  0000C0  0100               	movlb	0	; () banked
   401  0000C2  6F61               	movwf	(main@test+1)& (0+255),b
   402  0000C4  0E00               	movlw	0
   403  0000C6  6F60               	movwf	main@test& (0+255),b
   404                           
   405                           ;main.c: 40: unsigned char ScanAngle=6;
   406  0000C8  0E06               	movlw	6
   407  0000CA  0100               	movlb	0	; () banked
   408  0000CC  6F63               	movwf	main@ScanAngle& (0+255),b
   409                           
   410                           ; BSR set to: 0
   411                           ;main.c: 43: INTCONbits.GIEH = 1;
   412  0000CE  8EF2               	bsf	intcon,7,c	;volatile
   413                           
   414                           ; BSR set to: 0
   415                           ;main.c: 44: RCONbits.IPEN = 1;
   416  0000D0  8ED0               	bsf	4048,7,c	;volatile
   417                           
   418                           ; BSR set to: 0
   419                           ;main.c: 45: INTCONbits.GIEL = 1;
   420  0000D2  8CF2               	bsf	intcon,6,c	;volatile
   421                           
   422                           ; BSR set to: 0
   423                           ;main.c: 46: INTCONbits.INT0IE = 1;
   424  0000D4  88F2               	bsf	intcon,4,c	;volatile
   425                           
   426                           ; BSR set to: 0
   427                           ;main.c: 47: INTCONbits.PEIE = 1;
   428  0000D6  8CF2               	bsf	intcon,6,c	;volatile
   429                           
   430                           ; BSR set to: 0
   431                           ;main.c: 49: IPR1bits.RCIP=1;
   432  0000D8  8A9F               	bsf	3999,5,c	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 50: PIE1bits.RCIE=1;
   436  0000DA  8A9D               	bsf	3997,5,c	;volatile
   437                           
   438                           ;main.c: 53: struct DC_motor motorL, motorR;
   439                           ;main.c: 54: motorL.power=0;
   440  0000DC  0E00               	movlw	0
   441  0000DE  0100               	movlb	0	; () banked
   442  0000E0  6F66               	movwf	main@motorL& (0+255),b
   443                           
   444                           ;main.c: 55: motorL.direction=1;
   445  0000E2  0E01               	movlw	1
   446  0000E4  0100               	movlb	0	; () banked
   447  0000E6  6F67               	movwf	(main@motorL+1)& (0+255),b
   448                           
   449                           ; BSR set to: 0
   450                           ;main.c: 56: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   451  0000E8  0E79               	movlw	121
   452  0000EA  0100               	movlb	0	; () banked
   453  0000EC  6F68               	movwf	(main@motorL+2)& (0+255),b
   454  0000EE  0E0F               	movlw	15
   455  0000F0  0100               	movlb	0	; () banked
   456  0000F2  6F69               	movwf	(main@motorL+3)& (0+255),b
   457                           
   458                           ; BSR set to: 0
   459                           ;main.c: 57: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   460  0000F4  0E78               	movlw	120
   461  0000F6  0100               	movlb	0	; () banked
   462  0000F8  6F6A               	movwf	(main@motorL+4)& (0+255),b
   463  0000FA  0E0F               	movlw	15
   464  0000FC  0100               	movlb	0	; () banked
   465  0000FE  6F6B               	movwf	(main@motorL+5)& (0+255),b
   466                           
   467                           ;main.c: 58: motorL.dir_pin=0;
   468  000100  0E00               	movlw	0
   469  000102  0100               	movlb	0	; () banked
   470  000104  6F6C               	movwf	(main@motorL+6)& (0+255),b
   471                           
   472                           ;main.c: 59: motorL.PWMperiod=199;
   473  000106  0E00               	movlw	0
   474  000108  0100               	movlb	0	; () banked
   475  00010A  6F6E               	movwf	(main@motorL+8)& (0+255),b
   476  00010C  0EC7               	movlw	199
   477  00010E  6F6D               	movwf	(main@motorL+7)& (0+255),b
   478                           
   479                           ;main.c: 61: motorR.power=0;
   480  000110  0E00               	movlw	0
   481  000112  0100               	movlb	0	; () banked
   482  000114  6F6F               	movwf	main@motorR& (0+255),b
   483                           
   484                           ;main.c: 62: motorR.direction=1;
   485  000116  0E01               	movlw	1
   486  000118  0100               	movlb	0	; () banked
   487  00011A  6F70               	movwf	(main@motorR+1)& (0+255),b
   488                           
   489                           ; BSR set to: 0
   490                           ;main.c: 63: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   491  00011C  0E77               	movlw	119
   492  00011E  0100               	movlb	0	; () banked
   493  000120  6F71               	movwf	(main@motorR+2)& (0+255),b
   494  000122  0E0F               	movlw	15
   495  000124  0100               	movlb	0	; () banked
   496  000126  6F72               	movwf	(main@motorR+3)& (0+255),b
   497                           
   498                           ; BSR set to: 0
   499                           ;main.c: 64: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   500  000128  0E76               	movlw	118
   501  00012A  0100               	movlb	0	; () banked
   502  00012C  6F73               	movwf	(main@motorR+4)& (0+255),b
   503  00012E  0E0F               	movlw	15
   504  000130  0100               	movlb	0	; () banked
   505  000132  6F74               	movwf	(main@motorR+5)& (0+255),b
   506                           
   507                           ;main.c: 65: motorR.dir_pin=2;
   508  000134  0E02               	movlw	2
   509  000136  0100               	movlb	0	; () banked
   510  000138  6F75               	movwf	(main@motorR+6)& (0+255),b
   511                           
   512                           ;main.c: 66: motorR.PWMperiod=199;
   513  00013A  0E00               	movlw	0
   514  00013C  0100               	movlb	0	; () banked
   515  00013E  6F77               	movwf	(main@motorR+8)& (0+255),b
   516  000140  0EC7               	movlw	199
   517  000142  6F76               	movwf	(main@motorR+7)& (0+255),b
   518                           
   519                           ;main.c: 68: OSCCON = 0x72;
   520  000144  0E72               	movlw	114
   521  000146  6ED3               	movwf	4051,c	;volatile
   522  000148                     l55:
   523  000148  B4D3               	btfsc	4051,2,c	;volatile
   524  00014A  D06A               	goto	l1856
   525  00014C  D7FD               	goto	l55
   526  00014E                     l1818:
   527                           
   528                           ;main.c: 76: initMotorPWM();
   529  00014E  EC08  F004         	call	_initMotorPWM	;wreg free
   530                           
   531                           ;main.c: 77: initRFID();
   532  000152  EC58  F004         	call	_initRFID	;wreg free
   533                           
   534                           ;main.c: 78: initIR();
   535  000156  EC47  F004         	call	_initIR	;wreg free
   536                           
   537                           ;main.c: 80: mode = 1;
   538  00015A  0E01               	movlw	1
   539  00015C  0100               	movlb	0	; () banked
   540  00015E  6F64               	movwf	main@mode& (0+255),b
   541                           
   542                           ; BSR set to: 0
   543                           ;main.c: 81: enableSensor(0, 1);
   544  000160  0E01               	movlw	1
   545  000162  6E0F               	movwf	enableSensor@status,c
   546  000164  0E00               	movlw	0
   547  000166  EC21  F004         	call	_enableSensor
   548                           
   549                           ;main.c: 82: enableSensor(1, 1);
   550  00016A  0E01               	movlw	1
   551  00016C  6E0F               	movwf	enableSensor@status,c
   552  00016E  0E01               	movlw	1
   553  000170  EC21  F004         	call	_enableSensor
   554                           
   555                           ;main.c: 84: fullSpeedBack(&motorL, &motorR);
   556  000174  0E66               	movlw	low main@motorL
   557  000176  6E2B               	movwf	fullSpeedBack@mL,c
   558  000178  0E00               	movlw	high main@motorL
   559  00017A  6E2C               	movwf	fullSpeedBack@mL+1,c
   560  00017C  0E6F               	movlw	low main@motorR
   561  00017E  6E2D               	movwf	fullSpeedBack@mR,c
   562  000180  0E00               	movlw	high main@motorR
   563  000182  6E2E               	movwf	fullSpeedBack@mR+1,c
   564  000184  ECED  F003         	call	_fullSpeedBack	;wreg free
   565                           
   566                           ;main.c: 85: delay_s(1);
   567  000188  0E01               	movlw	1
   568  00018A  ECD1  F003         	call	_delay_s
   569                           
   570                           ;main.c: 86: stop(&motorL, &motorR);
   571  00018E  0E66               	movlw	low main@motorL
   572  000190  6E26               	movwf	stop@mL,c
   573  000192  0E00               	movlw	high main@motorL
   574  000194  6E27               	movwf	stop@mL+1,c
   575  000196  0E6F               	movlw	low main@motorR
   576  000198  6E28               	movwf	stop@mR,c
   577  00019A  0E00               	movlw	high main@motorR
   578  00019C  6E29               	movwf	stop@mR+1,c
   579  00019E  EC45  F002         	call	_stop	;wreg free
   580                           
   581                           ;main.c: 88: break;
   582  0001A2  D03E               	goto	l1856
   583  0001A4                     l1832:
   584                           
   585                           ;main.c: 102: if (DirectionFound==0) {
   586  0001A4  0100               	movlb	0	; () banked
   587  0001A6  5165               	movf	main@DirectionFound& (0+255),w,b
   588  0001A8  0100               	movlb	0	; () banked
   589  0001AA  A4D8               	btfss	status,2,c
   590  0001AC  D00B               	goto	l1836
   591                           
   592                           ; BSR set to: 0
   593                           ;main.c: 104: DirectionFound = ScanIR(&motorL, &motorR);
   594  0001AE  0E66               	movlw	low main@motorL
   595  0001B0  6E2F               	movwf	ScanIR@mL,c
   596  0001B2  0E00               	movlw	high main@motorL
   597  0001B4  6E30               	movwf	ScanIR@mL+1,c
   598  0001B6  0E6F               	movlw	low main@motorR
   599  0001B8  6E31               	movwf	ScanIR@mR,c
   600  0001BA  0E00               	movlw	high main@motorR
   601  0001BC  6E32               	movwf	ScanIR@mR+1,c
   602  0001BE  ECB7  F001         	call	_ScanIR	;wreg free
   603  0001C2  D00E               	goto	L1
   604  0001C4                     l1836:
   605                           
   606                           ; BSR set to: 0
   607  0001C4  0100               	movlb	0	; () banked
   608  0001C6  0565               	decf	main@DirectionFound& (0+255),w,b
   609  0001C8  A4D8               	btfss	status,2,c
   610  0001CA  D00D               	goto	l1840
   611                           
   612                           ; BSR set to: 0
   613                           ;main.c: 107: DirectionFound = ScanIR(&motorL, &motorR);
   614  0001CC  0E66               	movlw	low main@motorL
   615  0001CE  6E2F               	movwf	ScanIR@mL,c
   616  0001D0  0E00               	movlw	high main@motorL
   617  0001D2  6E30               	movwf	ScanIR@mL+1,c
   618  0001D4  0E6F               	movlw	low main@motorR
   619  0001D6  6E31               	movwf	ScanIR@mR,c
   620  0001D8  0E00               	movlw	high main@motorR
   621  0001DA  6E32               	movwf	ScanIR@mR+1,c
   622  0001DC  ECB7  F001         	call	_ScanIR	;wreg free
   623  0001E0                     L1:
   624  0001E0  0100               	movlb	0	; () banked
   625  0001E2  6F65               	movwf	main@DirectionFound& (0+255),b
   626                           
   627                           ;main.c: 108: } else if (DirectionFound==2) {
   628  0001E4  D01D               	goto	l1856
   629  0001E6                     l1840:
   630                           
   631                           ; BSR set to: 0
   632  0001E6  0E02               	movlw	2
   633  0001E8  0100               	movlb	0	; () banked
   634  0001EA  1965               	xorwf	main@DirectionFound& (0+255),w,b
   635  0001EC  A4D8               	btfss	status,2,c
   636  0001EE  D018               	goto	l1856
   637                           
   638                           ; BSR set to: 0
   639                           ;main.c: 109: mode=2;
   640  0001F0  0E02               	movlw	2
   641  0001F2  D014               	goto	L2
   642  0001F4                     l1844:
   643                           
   644                           ; BSR set to: 0
   645                           ;main.c: 117: delay_s(3);
   646  0001F4  0E03               	movlw	3
   647  0001F6  ECD1  F003         	call	_delay_s
   648                           
   649                           ;main.c: 118: fullSpeedAhead(&motorL, &motorR);
   650  0001FA  0E66               	movlw	low main@motorL
   651  0001FC  6E26               	movwf	fullSpeedAhead@mL,c
   652  0001FE  0E00               	movlw	high main@motorL
   653  000200  6E27               	movwf	fullSpeedAhead@mL+1,c
   654  000202  0E6F               	movlw	low main@motorR
   655  000204  6E28               	movwf	fullSpeedAhead@mR,c
   656  000206  0E00               	movlw	high main@motorR
   657  000208  6E29               	movwf	fullSpeedAhead@mR+1,c
   658  00020A  ECCF  F002         	call	_fullSpeedAhead	;wreg free
   659                           
   660                           ;main.c: 119: delay_s(1);
   661  00020E  0E01               	movlw	1
   662  000210  ECD1  F003         	call	_delay_s
   663                           
   664                           ;main.c: 120: DirectionFound=1;
   665  000214  0E01               	movlw	1
   666  000216  0100               	movlb	0	; () banked
   667  000218  6F65               	movwf	main@DirectionFound& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 121: mode = 1;
   671  00021A  0E01               	movlw	1
   672  00021C                     L2:
   673  00021C  0100               	movlb	0	; () banked
   674  00021E  6F64               	movwf	main@mode& (0+255),b
   675  000220                     l1856:
   676  000220  0100               	movlb	0	; () banked
   677  000222  5164               	movf	main@mode& (0+255),w,b
   678                           
   679                           ; Switch size 1, requested type "space"
   680                           ; Number of cases is 4, Range of values is 0 to 3
   681                           ; switch strategies available:
   682                           ; Name         Instructions Cycles
   683                           ; simple_byte           13     7 (average)
   684                           ;	Chosen strategy is simple_byte
   685  000224  0A00               	xorlw	0	; case 0
   686  000226  B4D8               	btfsc	status,2,c
   687  000228  D792               	goto	l1818
   688  00022A  0A01               	xorlw	1	; case 1
   689  00022C  B4D8               	btfsc	status,2,c
   690  00022E  D7BA               	goto	l1832
   691  000230  0A03               	xorlw	3	; case 2
   692  000232  B4D8               	btfsc	status,2,c
   693  000234  D7DF               	goto	l1844
   694  000236  0A01               	xorlw	1	; case 3
   695                           
   696                           ; BSR set to: 0
   697                           
   698                           ; BSR set to: 0
   699  000238  D7F3               	goto	l1856
   700  00023A                     __end_of_main:
   701                           	opt stack 0
   702                           tblptru	equ	0xFF8
   703                           intcon	equ	0xFF2
   704                           postinc0	equ	0xFEE
   705                           wreg	equ	0xFE8
   706                           status	equ	0xFD8
   707                           
   708 ;; *************** function _initRFID *****************
   709 ;; Defined at:
   710 ;;		line 5 in file "RFID_Reader.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;		None
   713 ;; Auto vars:     Size  Location     Type
   714 ;;		None
   715 ;; Return value:  Size  Location     Type
   716 ;;		None               void
   717 ;; Registers used:
   718 ;;		wreg, status,2
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   724 ;;      Params:         0       0       0       0
   725 ;;      Locals:         1       0       0       0
   726 ;;      Temps:          0       0       0       0
   727 ;;      Totals:         1       0       0       0
   728 ;;Total ram usage:        1 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    1
   731 ;; This function calls:
   732 ;;		Nothing
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text1
   739  0008B0                     __ptext1:
   740                           	opt stack 0
   741  0008B0                     _initRFID:
   742                           	opt stack 29
   743                           
   744                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   745                           
   746                           ; BSR set to: 0
   747                           ;incstack = 0
   748  0008B0  0E01               	movlw	1
   749  0008B2  6E0F               	movwf	_initRFID$1287,c
   750  0008B4  5094               	movf	3988,w,c	;volatile
   751  0008B6  C00F  FF94         	movff	_initRFID$1287,3988	;volatile
   752                           
   753                           ;RFID_Reader.c: 10: SPBRG=205;
   754  0008BA  0ECD               	movlw	205
   755  0008BC  6EAF               	movwf	4015,c	;volatile
   756                           
   757                           ;RFID_Reader.c: 11: SPBRGH=0;
   758  0008BE  0E00               	movlw	0
   759  0008C0  6EB0               	movwf	4016,c	;volatile
   760                           
   761                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   762  0008C2  86AA               	bsf	4010,3,c	;volatile
   763                           
   764                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   765  0008C4  84AC               	bsf	4012,2,c	;volatile
   766                           
   767                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   768  0008C6  88AB               	bsf	4011,4,c	;volatile
   769                           
   770                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   771  0008C8  8EAB               	bsf	4011,7,c	;volatile
   772                           
   773                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   774  0008CA  98AC               	bcf	4012,4,c	;volatile
   775                           
   776                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   777  0008CC  9CAB               	bcf	4011,6,c	;volatile
   778  0008CE  0012               	return		;funcret
   779  0008D0                     __end_of_initRFID:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           intcon	equ	0xFF2
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _initMotorPWM *****************
   788 ;; Defined at:
   789 ;;		line 4 in file "dc_motor.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;		None               void
   796 ;; Registers used:
   797 ;;		wreg, status,2
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   803 ;;      Params:         0       0       0       0
   804 ;;      Locals:         0       0       0       0
   805 ;;      Temps:          0       0       0       0
   806 ;;      Totals:         0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text2
   818  000810                     __ptext2:
   819                           	opt stack 0
   820  000810                     _initMotorPWM:
   821                           	opt stack 29
   822                           
   823                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   824                           
   825                           ;incstack = 0
   826  000810  0E00               	movlw	0
   827  000812  6E7F               	movwf	3967,c	;volatile
   828                           
   829                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   830  000814  0E80               	movlw	128
   831  000816  6E7E               	movwf	3966,c	;volatile
   832                           
   833                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   834  000818  0E6F               	movlw	111
   835  00081A  6E6F               	movwf	3951,c	;volatile
   836                           
   837                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   838  00081C  0E00               	movlw	0
   839  00081E  6E6E               	movwf	3950,c	;volatile
   840                           
   841                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   842  000820  0EC7               	movlw	199
   843  000822  6E7B               	movwf	3963,c	;volatile
   844                           
   845                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   846  000824  0E00               	movlw	0
   847  000826  6E7A               	movwf	3962,c	;volatile
   848                           
   849                           ;dc_motor.c: 13: PDC0L = 0<<2;
   850  000828  0E00               	movlw	0
   851  00082A  6E79               	movwf	3961,c	;volatile
   852                           
   853                           ;dc_motor.c: 14: PDC0H = 0>>6;
   854  00082C  0E00               	movlw	0
   855  00082E  6E78               	movwf	3960,c	;volatile
   856                           
   857                           ;dc_motor.c: 15: PDC1L = 0<<2;
   858  000830  0E00               	movlw	0
   859  000832  6E77               	movwf	3959,c	;volatile
   860                           
   861                           ;dc_motor.c: 16: PDC1H = 0>>6;
   862  000834  0E00               	movlw	0
   863  000836  6E76               	movwf	3958,c	;volatile
   864                           
   865                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   866  000838  9093               	bcf	3987,0,c	;volatile
   867                           
   868                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   869  00083A  9293               	bcf	3987,1,c	;volatile
   870                           
   871                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   872  00083C  9493               	bcf	3987,2,c	;volatile
   873                           
   874                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   875  00083E  9693               	bcf	3987,3,c	;volatile
   876  000840  0012               	return		;funcret
   877  000842                     __end_of_initMotorPWM:
   878                           	opt stack 0
   879                           tblptru	equ	0xFF8
   880                           intcon	equ	0xFF2
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           status	equ	0xFD8
   884                           
   885 ;; *************** function _initIR *****************
   886 ;; Defined at:
   887 ;;		line 30 in file "IR_Reading.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;		None               void
   894 ;; Registers used:
   895 ;;		wreg, status,2
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   901 ;;      Params:         0       0       0       0
   902 ;;      Locals:         0       0       0       0
   903 ;;      Temps:          0       0       0       0
   904 ;;      Totals:         0       0       0       0
   905 ;;Total ram usage:        0 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    1
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text3
   916  00088E                     __ptext3:
   917                           	opt stack 0
   918  00088E                     _initIR:
   919                           	opt stack 29
   920                           
   921                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   922                           
   923                           ;incstack = 0
   924  00088E  9489               	bcf	3977,2,c	;volatile
   925                           
   926                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   927  000890  9689               	bcf	3977,3,c	;volatile
   928                           
   929                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   930  000892  8492               	bsf	3986,2,c	;volatile
   931                           
   932                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   933  000894  8692               	bsf	3986,3,c	;volatile
   934                           
   935                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   936  000896  94B8               	bcf	4024,2,c	;volatile
   937                           
   938                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   939  000898  96B8               	bcf	4024,3,c	;volatile
   940                           
   941                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   942  00089A  9CB8               	bcf	4024,6,c	;volatile
   943                           
   944                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   945  00089C  9EB8               	bcf	4024,7,c	;volatile
   946                           
   947                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   948  00089E  0E06               	movlw	6
   949  0008A0  6E63               	movwf	3939,c	;volatile
   950                           
   951                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   952  0008A2  0E06               	movlw	6
   953  0008A4  6E62               	movwf	3938,c	;volatile
   954                           
   955                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   956  0008A6  9096               	bcf	3990,0,c	;volatile
   957                           
   958                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   959  0008A8  9296               	bcf	3990,1,c	;volatile
   960                           
   961                           ;IR_Reading.c: 69: T5CON=0b01011001;
   962  0008AA  0E59               	movlw	89
   963  0008AC  6EB7               	movwf	4023,c	;volatile
   964  0008AE  0012               	return		;funcret
   965  0008B0                     __end_of_initIR:
   966                           	opt stack 0
   967                           tblptru	equ	0xFF8
   968                           intcon	equ	0xFF2
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           status	equ	0xFD8
   972                           
   973 ;; *************** function _fullSpeedBack *****************
   974 ;; Defined at:
   975 ;;		line 125 in file "dc_motor.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   978 ;;		 -> main@motorL(9), 
   979 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   980 ;;		 -> main@motorR(9), 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;		None               void
   985 ;; Registers used:
   986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   992 ;;      Params:         4       0       0       0
   993 ;;      Locals:         0       0       0       0
   994 ;;      Temps:          0       0       0       0
   995 ;;      Totals:         4       0       0       0
   996 ;;Total ram usage:        4 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    4
   999 ;; This function calls:
  1000 ;;		_fullSpeedAhead
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text4
  1007  0007DA                     __ptext4:
  1008                           	opt stack 0
  1009  0007DA                     _fullSpeedBack:
  1010                           	opt stack 26
  1011                           
  1012                           ;dc_motor.c: 128: mL->direction=0;
  1013                           
  1014                           ;incstack = 0
  1015  0007DA  EE20 F001          	lfsr	2,1
  1016  0007DE  502B               	movf	fullSpeedBack@mL,w,c
  1017  0007E0  26D9               	addwf	fsr2l,f,c
  1018  0007E2  502C               	movf	fullSpeedBack@mL+1,w,c
  1019  0007E4  22DA               	addwfc	fsr2h,f,c
  1020  0007E6  0E00               	movlw	0
  1021  0007E8  6EDF               	movwf	indf2,c
  1022                           
  1023                           ;dc_motor.c: 129: mR->direction=0;
  1024  0007EA  EE20 F001          	lfsr	2,1
  1025  0007EE  502D               	movf	fullSpeedBack@mR,w,c
  1026  0007F0  26D9               	addwf	fsr2l,f,c
  1027  0007F2  502E               	movf	fullSpeedBack@mR+1,w,c
  1028  0007F4  22DA               	addwfc	fsr2h,f,c
  1029  0007F6  0E00               	movlw	0
  1030  0007F8  6EDF               	movwf	indf2,c
  1031                           
  1032                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1033  0007FA  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1034  0007FE  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1035  000802  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1036  000806  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1037  00080A  ECCF  F002         	call	_fullSpeedAhead	;wreg free
  1038  00080E  0012               	return		;funcret
  1039  000810                     __end_of_fullSpeedBack:
  1040                           	opt stack 0
  1041                           tblptru	equ	0xFF8
  1042                           intcon	equ	0xFF2
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           indf2	equ	0xFDF
  1046                           fsr2h	equ	0xFDA
  1047                           fsr2l	equ	0xFD9
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _enableSensor *****************
  1051 ;; Defined at:
  1052 ;;		line 106 in file "IR_Reading.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  sensor          1    wreg     unsigned char 
  1055 ;;  status          1   14[COMRAM] unsigned char 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  sensor          1   15[COMRAM] unsigned char 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;		None               void
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1067 ;;      Params:         1       0       0       0
  1068 ;;      Locals:         1       0       0       0
  1069 ;;      Temps:          0       0       0       0
  1070 ;;      Totals:         2       0       0       0
  1071 ;;Total ram usage:        2 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;;		_ScanWithRange
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text5
  1083  000842                     __ptext5:
  1084                           	opt stack 0
  1085  000842                     _enableSensor:
  1086                           	opt stack 29
  1087                           
  1088                           ;incstack = 0
  1089                           ;enableSensor@sensor stored from wreg
  1090  000842  6E10               	movwf	enableSensor@sensor,c
  1091                           
  1092                           ;IR_Reading.c: 108: if (sensor==0){
  1093  000844  5010               	movf	enableSensor@sensor,w,c
  1094  000846  A4D8               	btfss	status,2,c
  1095  000848  D006               	goto	l1734
  1096                           
  1097                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1098  00084A  B00F               	btfsc	enableSensor@status,0,c
  1099  00084C  D002               	bra	u965
  1100  00084E  908D               	bcf	3981,0,c	;volatile
  1101  000850  D001               	bra	u966
  1102  000852                     u965:
  1103  000852  808D               	bsf	3981,0,c	;volatile
  1104  000854                     u966:
  1105                           
  1106                           ;IR_Reading.c: 110: } else if (sensor==1){
  1107  000854  0012               	return	
  1108  000856                     l1734:
  1109  000856  0410               	decf	enableSensor@sensor,w,c
  1110  000858  A4D8               	btfss	status,2,c
  1111  00085A  0012               	return	
  1112                           
  1113                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1114  00085C  B00F               	btfsc	enableSensor@status,0,c
  1115  00085E  D002               	bra	u985
  1116  000860  928D               	bcf	3981,1,c	;volatile
  1117  000862  D001               	bra	u986
  1118  000864                     u985:
  1119  000864  828D               	bsf	3981,1,c	;volatile
  1120  000866                     u986:
  1121  000866  0012               	return	
  1122  000868                     __end_of_enableSensor:
  1123                           	opt stack 0
  1124                           tblptru	equ	0xFF8
  1125                           intcon	equ	0xFF2
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           indf2	equ	0xFDF
  1129                           fsr2h	equ	0xFDA
  1130                           fsr2l	equ	0xFD9
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function _ScanIR *****************
  1134 ;; Defined at:
  1135 ;;		line 27 in file "Movement.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1138 ;;		 -> main@motorL(9), 
  1139 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1140 ;;		 -> main@motorR(9), 
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;  SensorResult    4   54[COMRAM] unsigned int [2]
  1143 ;;  DirectionFou    2   52[COMRAM] unsigned int 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      unsigned char 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1153 ;;      Params:         4       0       0       0
  1154 ;;      Locals:         6       0       0       0
  1155 ;;      Temps:          2       0       0       0
  1156 ;;      Totals:        12       0       0       0
  1157 ;;Total ram usage:       12 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    5
  1160 ;; This function calls:
  1161 ;;		_delay_s
  1162 ;;		_delay_tenth_s
  1163 ;;		_grabLeftIR
  1164 ;;		_grabRightIR
  1165 ;;		_stop
  1166 ;;		_turnLeft
  1167 ;;		_turnRight
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text6
  1174  00036E                     __ptext6:
  1175                           	opt stack 0
  1176  00036E                     _ScanIR:
  1177                           	opt stack 25
  1178                           
  1179                           ;Movement.c: 29: unsigned int SensorResult[2];
  1180                           ;Movement.c: 31: unsigned int DirectionFoundTolerance=100;
  1181                           
  1182                           ;incstack = 0
  1183  00036E  0E00               	movlw	0
  1184  000370  6E36               	movwf	ScanIR@DirectionFoundTolerance+1,c
  1185  000372  0E64               	movlw	100
  1186  000374  6E35               	movwf	ScanIR@DirectionFoundTolerance,c
  1187                           
  1188                           ;Movement.c: 34: stop(mL,mR);
  1189  000376  C02F  F026         	movff	ScanIR@mL,stop@mL
  1190  00037A  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1191  00037E  C031  F028         	movff	ScanIR@mR,stop@mR
  1192  000382  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1193  000386  EC45  F002         	call	_stop	;wreg free
  1194                           
  1195                           ;Movement.c: 35: delay_s(2);
  1196  00038A  0E02               	movlw	2
  1197  00038C  ECD1  F003         	call	_delay_s
  1198                           
  1199                           ;Movement.c: 36: SensorResult[0]=grabLeftIR();
  1200  000390  EC39  F003         	call	_grabLeftIR	;wreg free
  1201  000394  C00F  F037         	movff	?_grabLeftIR,ScanIR@SensorResult
  1202  000398  C010  F038         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  1203                           
  1204                           ;Movement.c: 37: SensorResult[1]=grabRightIR();
  1205  00039C  EC07  F003         	call	_grabRightIR	;wreg free
  1206  0003A0  C00F  F039         	movff	?_grabRightIR,ScanIR@SensorResult+2
  1207  0003A4  C010  F03A         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  1208                           
  1209                           ;Movement.c: 38: stop(mL,mR);
  1210  0003A8  C02F  F026         	movff	ScanIR@mL,stop@mL
  1211  0003AC  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1212  0003B0  C031  F028         	movff	ScanIR@mR,stop@mR
  1213  0003B4  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1214  0003B8  EC45  F002         	call	_stop	;wreg free
  1215                           
  1216                           ;Movement.c: 40: if (((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)
  1217                           ;Movement.c: 41: ||((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)) {
  1218  0003BC  C037  F033         	movff	ScanIR@SensorResult,??_ScanIR
  1219  0003C0  C038  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  1220  0003C4  1E33               	comf	??_ScanIR,f,c
  1221  0003C6  1E34               	comf	??_ScanIR+1,f,c
  1222  0003C8  4A33               	infsnz	??_ScanIR,f,c
  1223  0003CA  2A34               	incf	??_ScanIR+1,f,c
  1224  0003CC  5039               	movf	ScanIR@SensorResult+2,w,c
  1225  0003CE  2633               	addwf	??_ScanIR,f,c
  1226  0003D0  503A               	movf	ScanIR@SensorResult+3,w,c
  1227  0003D2  2234               	addwfc	??_ScanIR+1,f,c
  1228  0003D4  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1229  0003D6  5C33               	subwf	??_ScanIR,w,c
  1230  0003D8  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1231  0003DA  5834               	subwfb	??_ScanIR+1,w,c
  1232  0003DC  A0D8               	btfss	status,0,c
  1233  0003DE  D014               	goto	l1758
  1234  0003E0  EE20  F039         	lfsr	2,ScanIR@SensorResult+2
  1235  0003E4  CFDE F033          	movff	postinc2,??_ScanIR
  1236  0003E8  CFDD F034          	movff	postdec2,??_ScanIR+1
  1237  0003EC  1E33               	comf	??_ScanIR,f,c
  1238  0003EE  1E34               	comf	??_ScanIR+1,f,c
  1239  0003F0  4A33               	infsnz	??_ScanIR,f,c
  1240  0003F2  2A34               	incf	??_ScanIR+1,f,c
  1241  0003F4  5037               	movf	ScanIR@SensorResult,w,c
  1242  0003F6  2633               	addwf	??_ScanIR,f,c
  1243  0003F8  5038               	movf	ScanIR@SensorResult+1,w,c
  1244  0003FA  2234               	addwfc	??_ScanIR+1,f,c
  1245  0003FC  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1246  0003FE  5C33               	subwf	??_ScanIR,w,c
  1247  000400  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1248  000402  5834               	subwfb	??_ScanIR+1,w,c
  1249  000404  B0D8               	btfsc	status,0,c
  1250  000406  D002               	goto	l1764
  1251  000408                     l1758:
  1252                           
  1253                           ;Movement.c: 43: return 2;
  1254  000408  0E02               	movlw	2
  1255  00040A  0012               	return	
  1256  00040C                     l1764:
  1257  00040C  5039               	movf	ScanIR@SensorResult+2,w,c
  1258  00040E  5C37               	subwf	ScanIR@SensorResult,w,c
  1259  000410  503A               	movf	ScanIR@SensorResult+3,w,c
  1260  000412  5838               	subwfb	ScanIR@SensorResult+1,w,c
  1261  000414  B0D8               	btfsc	status,0,c
  1262  000416  D019               	goto	l1778
  1263                           
  1264                           ;Movement.c: 47: turnLeft(mL,mR);
  1265  000418  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1266  00041C  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1267  000420  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1268  000424  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1269  000428  EC90  F003         	call	_turnLeft	;wreg free
  1270                           
  1271                           ;Movement.c: 48: delay_tenth_s(4);
  1272  00042C  0E04               	movlw	4
  1273  00042E  ECB5  F003         	call	_delay_tenth_s
  1274                           
  1275                           ;Movement.c: 49: stop(mL,mR);
  1276  000432  C02F  F026         	movff	ScanIR@mL,stop@mL
  1277  000436  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1278  00043A  C031  F028         	movff	ScanIR@mR,stop@mR
  1279  00043E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1280  000442  EC45  F002         	call	_stop	;wreg free
  1281  000446                     l1772:
  1282                           
  1283                           ;Movement.c: 50: return 0;
  1284  000446  0E00               	movlw	0
  1285  000448  0012               	return	
  1286  00044A                     l1778:
  1287  00044A  5037               	movf	ScanIR@SensorResult,w,c
  1288  00044C  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1289  00044E  5038               	movf	ScanIR@SensorResult+1,w,c
  1290  000450  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1291  000452  B0D8               	btfsc	status,0,c
  1292  000454  D018               	goto	l1790
  1293                           
  1294                           ;Movement.c: 54: turnRight(mL,mR);
  1295  000456  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  1296  00045A  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  1297  00045E  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  1298  000462  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  1299  000466  EC6B  F003         	call	_turnRight	;wreg free
  1300                           
  1301                           ;Movement.c: 55: delay_tenth_s(4);
  1302  00046A  0E04               	movlw	4
  1303  00046C  ECB5  F003         	call	_delay_tenth_s
  1304                           
  1305                           ;Movement.c: 56: stop(mL,mR);
  1306  000470  C02F  F026         	movff	ScanIR@mL,stop@mL
  1307  000474  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1308  000478  C031  F028         	movff	ScanIR@mR,stop@mR
  1309  00047C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1310  000480  EC45  F002         	call	_stop	;wreg free
  1311  000484  D7E0               	goto	l1772
  1312  000486                     l1790:
  1313                           
  1314                           ;Movement.c: 58: }
  1315                           ;Movement.c: 59: return 0;
  1316  000486  0E00               	movlw	0
  1317  000488  0012               	return	
  1318  00048A                     __end_of_ScanIR:
  1319                           	opt stack 0
  1320                           tblptru	equ	0xFF8
  1321                           intcon	equ	0xFF2
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           indf2	equ	0xFDF
  1325                           postinc2	equ	0xFDE
  1326                           postdec2	equ	0xFDD
  1327                           fsr2h	equ	0xFDA
  1328                           fsr2l	equ	0xFD9
  1329                           status	equ	0xFD8
  1330                           
  1331 ;; *************** function _turnRight *****************
  1332 ;; Defined at:
  1333 ;;		line 98 in file "dc_motor.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1336 ;;		 -> main@motorL(9), 
  1337 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1338 ;;		 -> main@motorR(9), 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;		None               void
  1343 ;; Registers used:
  1344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1350 ;;      Params:         4       0       0       0
  1351 ;;      Locals:         0       0       0       0
  1352 ;;      Temps:          0       0       0       0
  1353 ;;      Totals:         4       0       0       0
  1354 ;;Total ram usage:        4 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    4
  1357 ;; This function calls:
  1358 ;;		_fullSpeedAhead
  1359 ;;		_stop
  1360 ;; This function is called by:
  1361 ;;		_ScanIR
  1362 ;;		_ScanWithRange
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text7
  1367  0006D6                     __ptext7:
  1368                           	opt stack 0
  1369  0006D6                     _turnRight:
  1370                           	opt stack 25
  1371                           
  1372                           ;dc_motor.c: 100: stop(mL, mR);
  1373                           
  1374                           ;incstack = 0
  1375  0006D6  C02B  F026         	movff	turnRight@mL,stop@mL
  1376  0006DA  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1377  0006DE  C02D  F028         	movff	turnRight@mR,stop@mR
  1378  0006E2  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1379  0006E6  EC45  F002         	call	_stop	;wreg free
  1380                           
  1381                           ;dc_motor.c: 102: mL->direction=1;
  1382  0006EA  EE20 F001          	lfsr	2,1
  1383  0006EE  502B               	movf	turnRight@mL,w,c
  1384  0006F0  26D9               	addwf	fsr2l,f,c
  1385  0006F2  502C               	movf	turnRight@mL+1,w,c
  1386  0006F4  22DA               	addwfc	fsr2h,f,c
  1387  0006F6  0E01               	movlw	1
  1388  0006F8  6EDF               	movwf	indf2,c
  1389                           
  1390                           ;dc_motor.c: 103: mR->direction=0;
  1391  0006FA  EE20 F001          	lfsr	2,1
  1392  0006FE  502D               	movf	turnRight@mR,w,c
  1393  000700  26D9               	addwf	fsr2l,f,c
  1394  000702  502E               	movf	turnRight@mR+1,w,c
  1395  000704  22DA               	addwfc	fsr2h,f,c
  1396  000706  0E00               	movlw	0
  1397  000708  6EDF               	movwf	indf2,c
  1398                           
  1399                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1400  00070A  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1401  00070E  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1402  000712  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1403  000716  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1404  00071A  ECCF  F002         	call	_fullSpeedAhead	;wreg free
  1405  00071E  0012               	return		;funcret
  1406  000720                     __end_of_turnRight:
  1407                           	opt stack 0
  1408                           tblptru	equ	0xFF8
  1409                           intcon	equ	0xFF2
  1410                           postinc0	equ	0xFEE
  1411                           wreg	equ	0xFE8
  1412                           indf2	equ	0xFDF
  1413                           postinc2	equ	0xFDE
  1414                           postdec2	equ	0xFDD
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _turnLeft *****************
  1420 ;; Defined at:
  1421 ;;		line 87 in file "dc_motor.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1424 ;;		 -> main@motorL(9), 
  1425 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1426 ;;		 -> main@motorR(9), 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;		None               void
  1431 ;; Registers used:
  1432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1438 ;;      Params:         4       0       0       0
  1439 ;;      Locals:         0       0       0       0
  1440 ;;      Temps:          0       0       0       0
  1441 ;;      Totals:         4       0       0       0
  1442 ;;Total ram usage:        4 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    4
  1445 ;; This function calls:
  1446 ;;		_fullSpeedAhead
  1447 ;;		_stop
  1448 ;; This function is called by:
  1449 ;;		_ScanIR
  1450 ;;		_ScanWithRange
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text8
  1455  000720                     __ptext8:
  1456                           	opt stack 0
  1457  000720                     _turnLeft:
  1458                           	opt stack 25
  1459                           
  1460                           ;dc_motor.c: 89: stop(mL, mR);
  1461                           
  1462                           ;incstack = 0
  1463  000720  C02B  F026         	movff	turnLeft@mL,stop@mL
  1464  000724  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1465  000728  C02D  F028         	movff	turnLeft@mR,stop@mR
  1466  00072C  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1467  000730  EC45  F002         	call	_stop	;wreg free
  1468                           
  1469                           ;dc_motor.c: 91: mL->direction=0;
  1470  000734  EE20 F001          	lfsr	2,1
  1471  000738  502B               	movf	turnLeft@mL,w,c
  1472  00073A  26D9               	addwf	fsr2l,f,c
  1473  00073C  502C               	movf	turnLeft@mL+1,w,c
  1474  00073E  22DA               	addwfc	fsr2h,f,c
  1475  000740  0E00               	movlw	0
  1476  000742  6EDF               	movwf	indf2,c
  1477                           
  1478                           ;dc_motor.c: 92: mR->direction=1;
  1479  000744  EE20 F001          	lfsr	2,1
  1480  000748  502D               	movf	turnLeft@mR,w,c
  1481  00074A  26D9               	addwf	fsr2l,f,c
  1482  00074C  502E               	movf	turnLeft@mR+1,w,c
  1483  00074E  22DA               	addwfc	fsr2h,f,c
  1484  000750  0E01               	movlw	1
  1485  000752  6EDF               	movwf	indf2,c
  1486                           
  1487                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1488  000754  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1489  000758  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1490  00075C  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1491  000760  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1492  000764  ECCF  F002         	call	_fullSpeedAhead	;wreg free
  1493  000768  0012               	return		;funcret
  1494  00076A                     __end_of_turnLeft:
  1495                           	opt stack 0
  1496                           tblptru	equ	0xFF8
  1497                           intcon	equ	0xFF2
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           indf2	equ	0xFDF
  1501                           postinc2	equ	0xFDE
  1502                           postdec2	equ	0xFDD
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _stop *****************
  1508 ;; Defined at:
  1509 ;;		line 67 in file "dc_motor.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1512 ;;		 -> main@motorL(9), 
  1513 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1514 ;;		 -> main@motorR(9), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;		None               void
  1519 ;; Registers used:
  1520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1526 ;;      Params:         4       0       0       0
  1527 ;;      Locals:         0       0       0       0
  1528 ;;      Temps:          0       0       0       0
  1529 ;;      Totals:         4       0       0       0
  1530 ;;Total ram usage:        4 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    3
  1533 ;; This function calls:
  1534 ;;		_setMotorPWM
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;;		_turnLeft
  1538 ;;		_turnRight
  1539 ;;		_ScanIR
  1540 ;;		_ScanWithRange
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text9
  1545  00048A                     __ptext9:
  1546                           	opt stack 0
  1547  00048A                     _stop:
  1548                           	opt stack 27
  1549                           
  1550                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1551                           
  1552                           ;incstack = 0
  1553  00048A  D028               	goto	l1608
  1554  00048C                     l1594:
  1555                           
  1556                           ;dc_motor.c: 71: if(mL->power>0){
  1557  00048C  C026  FFD9         	movff	stop@mL,fsr2l
  1558  000490  C027  FFDA         	movff	stop@mL+1,fsr2h
  1559  000494  50DF               	movf	indf2,w,c
  1560  000496  B4D8               	btfsc	status,2,c
  1561  000498  D005               	goto	l1598
  1562                           
  1563                           ;dc_motor.c: 72: mL->power--;
  1564  00049A  C026  FFD9         	movff	stop@mL,fsr2l
  1565  00049E  C027  FFDA         	movff	stop@mL+1,fsr2h
  1566  0004A2  06DF               	decf	indf2,f,c
  1567  0004A4                     l1598:
  1568                           
  1569                           ;dc_motor.c: 73: }
  1570                           ;dc_motor.c: 74: if(mR->power>0){
  1571  0004A4  C028  FFD9         	movff	stop@mR,fsr2l
  1572  0004A8  C029  FFDA         	movff	stop@mR+1,fsr2h
  1573  0004AC  50DF               	movf	indf2,w,c
  1574  0004AE  B4D8               	btfsc	status,2,c
  1575  0004B0  D005               	goto	l1602
  1576                           
  1577                           ;dc_motor.c: 75: mR->power--;
  1578  0004B2  C028  FFD9         	movff	stop@mR,fsr2l
  1579  0004B6  C029  FFDA         	movff	stop@mR+1,fsr2h
  1580  0004BA  06DF               	decf	indf2,f,c
  1581  0004BC                     l1602:
  1582                           
  1583                           ;dc_motor.c: 76: }
  1584                           ;dc_motor.c: 77: setMotorPWM(mL);
  1585  0004BC  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1586  0004C0  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1587  0004C4  EC1D  F001         	call	_setMotorPWM	;wreg free
  1588                           
  1589                           ;dc_motor.c: 78: setMotorPWM(mR);
  1590  0004C8  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1591  0004CC  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1592  0004D0  EC1D  F001         	call	_setMotorPWM	;wreg free
  1593                           
  1594                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1595  0004D4  0E21               	movlw	33
  1596  0004D6                     u1237:
  1597  0004D6  2EE8               	decfsz	wreg,f,c
  1598  0004D8  D7FE               	goto	u1237
  1599  0004DA  F000               	nop	
  1600  0004DC                     l1608:
  1601  0004DC  C026  FFD9         	movff	stop@mL,fsr2l
  1602  0004E0  C027  FFDA         	movff	stop@mL+1,fsr2h
  1603  0004E4  50DF               	movf	indf2,w,c
  1604  0004E6  A4D8               	btfss	status,2,c
  1605  0004E8  D7D1               	goto	l1594
  1606  0004EA  C028  FFD9         	movff	stop@mR,fsr2l
  1607  0004EE  C029  FFDA         	movff	stop@mR+1,fsr2h
  1608  0004F2  50DF               	movf	indf2,w,c
  1609  0004F4  A4D8               	btfss	status,2,c
  1610  0004F6  D7CA               	goto	l1594
  1611                           
  1612                           ;dc_motor.c: 80: }
  1613                           ;dc_motor.c: 81: mL->direction=1;
  1614  0004F8  EE20 F001          	lfsr	2,1
  1615  0004FC  5026               	movf	stop@mL,w,c
  1616  0004FE  26D9               	addwf	fsr2l,f,c
  1617  000500  5027               	movf	stop@mL+1,w,c
  1618  000502  22DA               	addwfc	fsr2h,f,c
  1619  000504  0E01               	movlw	1
  1620  000506  6EDF               	movwf	indf2,c
  1621                           
  1622                           ;dc_motor.c: 82: mR->direction=1;
  1623  000508  EE20 F001          	lfsr	2,1
  1624  00050C  5028               	movf	stop@mR,w,c
  1625  00050E  26D9               	addwf	fsr2l,f,c
  1626  000510  5029               	movf	stop@mR+1,w,c
  1627  000512  22DA               	addwfc	fsr2h,f,c
  1628  000514  0E01               	movlw	1
  1629  000516  6EDF               	movwf	indf2,c
  1630  000518  0012               	return		;funcret
  1631  00051A                     __end_of_stop:
  1632                           	opt stack 0
  1633                           tblptru	equ	0xFF8
  1634                           intcon	equ	0xFF2
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           indf2	equ	0xFDF
  1638                           postinc2	equ	0xFDE
  1639                           postdec2	equ	0xFDD
  1640                           fsr2h	equ	0xFDA
  1641                           fsr2l	equ	0xFD9
  1642                           status	equ	0xFD8
  1643                           
  1644 ;; *************** function _fullSpeedAhead *****************
  1645 ;; Defined at:
  1646 ;;		line 108 in file "dc_motor.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1649 ;;		 -> main@motorL(9), 
  1650 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1651 ;;		 -> main@motorR(9), 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;		None               void
  1656 ;; Registers used:
  1657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1663 ;;      Params:         4       0       0       0
  1664 ;;      Locals:         0       0       0       0
  1665 ;;      Temps:          1       0       0       0
  1666 ;;      Totals:         5       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    3
  1670 ;; This function calls:
  1671 ;;		_setMotorPWM
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;;		_turnLeft
  1675 ;;		_turnRight
  1676 ;;		_fullSpeedBack
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text10
  1681  00059E                     __ptext10:
  1682                           	opt stack 0
  1683  00059E                     _fullSpeedAhead:
  1684                           	opt stack 26
  1685                           
  1686                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  1687                           
  1688                           ;incstack = 0
  1689  00059E  D028               	goto	l137
  1690  0005A0                     l1616:
  1691                           
  1692                           ;dc_motor.c: 112: if(mL->power<100){
  1693  0005A0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1694  0005A4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1695  0005A8  0E64               	movlw	100
  1696  0005AA  60DF               	cpfslt	indf2,c
  1697  0005AC  D005               	goto	l1620
  1698                           
  1699                           ;dc_motor.c: 113: mL->power++;
  1700  0005AE  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1701  0005B2  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1702  0005B6  2ADF               	incf	indf2,f,c
  1703  0005B8                     l1620:
  1704                           
  1705                           ;dc_motor.c: 114: }
  1706                           ;dc_motor.c: 115: if(mR->power<100){
  1707  0005B8  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1708  0005BC  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1709  0005C0  0E64               	movlw	100
  1710  0005C2  60DF               	cpfslt	indf2,c
  1711  0005C4  D005               	goto	l1624
  1712                           
  1713                           ;dc_motor.c: 116: mR->power++;
  1714  0005C6  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1715  0005CA  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1716  0005CE  2ADF               	incf	indf2,f,c
  1717  0005D0                     l1624:
  1718                           
  1719                           ;dc_motor.c: 117: }
  1720                           ;dc_motor.c: 118: setMotorPWM(mL);
  1721  0005D0  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1722  0005D4  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1723  0005D8  EC1D  F001         	call	_setMotorPWM	;wreg free
  1724                           
  1725                           ;dc_motor.c: 119: setMotorPWM(mR);
  1726  0005DC  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1727  0005E0  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1728  0005E4  EC1D  F001         	call	_setMotorPWM	;wreg free
  1729                           
  1730                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1731  0005E8  0E21               	movlw	33
  1732  0005EA                     u1247:
  1733  0005EA  2EE8               	decfsz	wreg,f,c
  1734  0005EC  D7FE               	goto	u1247
  1735  0005EE  F000               	nop	
  1736  0005F0                     l137:
  1737  0005F0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1738  0005F4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1739  0005F8  0E63               	movlw	99
  1740  0005FA  64DF               	cpfsgt	indf2,c
  1741  0005FC  D7D1               	goto	l1616
  1742  0005FE  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1743  000602  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1744  000606  0E63               	movlw	99
  1745  000608  64DF               	cpfsgt	indf2,c
  1746  00060A  D7CA               	goto	l1616
  1747  00060C  0012               	return	
  1748  00060E                     __end_of_fullSpeedAhead:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           intcon	equ	0xFF2
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           indf2	equ	0xFDF
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _setMotorPWM *****************
  1762 ;; Defined at:
  1763 ;;		line 26 in file "dc_motor.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1766 ;;		 -> main@motorR(9), main@motorL(9), 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  PWMduty         2   35[COMRAM] int 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;		None               void
  1771 ;; Registers used:
  1772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1778 ;;      Params:         2       0       0       0
  1779 ;;      Locals:         2       0       0       0
  1780 ;;      Temps:          5       0       0       0
  1781 ;;      Totals:         9       0       0       0
  1782 ;;Total ram usage:        9 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    2
  1785 ;; This function calls:
  1786 ;;		___awdiv
  1787 ;;		___wmul
  1788 ;; This function is called by:
  1789 ;;		_stop
  1790 ;;		_fullSpeedAhead
  1791 ;;		_setMotorFullSpeed
  1792 ;;		_stopMotor
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text11
  1797  00023A                     __ptext11:
  1798                           	opt stack 0
  1799  00023A                     _setMotorPWM:
  1800                           	opt stack 27
  1801                           
  1802                           ;dc_motor.c: 28: int PWMduty;
  1803                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1804                           
  1805                           ;incstack = 0
  1806  00023A  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1807  00023E  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1808  000242  50DF               	movf	indf2,w,c
  1809  000244  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1810  000246  501F               	movf	??_setMotorPWM,w,c
  1811  000248  6E0F               	movwf	___wmul@multiplier,c
  1812  00024A  6A10               	clrf	___wmul@multiplier+1,c
  1813  00024C  EE20 F007          	lfsr	2,7
  1814  000250  501D               	movf	setMotorPWM@m,w,c
  1815  000252  26D9               	addwf	fsr2l,f,c
  1816  000254  501E               	movf	setMotorPWM@m+1,w,c
  1817  000256  22DA               	addwfc	fsr2h,f,c
  1818  000258  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1819  00025C  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1820  000260  EC34  F004         	call	___wmul	;wreg free
  1821  000264  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1822  000268  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1823  00026C  0E00               	movlw	0
  1824  00026E  6E18               	movwf	___awdiv@divisor+1,c
  1825  000270  0E64               	movlw	100
  1826  000272  6E17               	movwf	___awdiv@divisor,c
  1827  000274  EC8D  F002         	call	___awdiv	;wreg free
  1828  000278  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1829  00027C  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1830                           
  1831                           ;dc_motor.c: 32: if (m->direction)
  1832  000280  EE20 F001          	lfsr	2,1
  1833  000284  501D               	movf	setMotorPWM@m,w,c
  1834  000286  26D9               	addwf	fsr2l,f,c
  1835  000288  501E               	movf	setMotorPWM@m+1,w,c
  1836  00028A  22DA               	addwfc	fsr2h,f,c
  1837  00028C  50DF               	movf	indf2,w,c
  1838  00028E  B4D8               	btfsc	status,2,c
  1839  000290  D02C               	goto	l1590
  1840                           
  1841                           ;dc_motor.c: 33: {
  1842                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1843  000292  EE20 F006          	lfsr	2,6
  1844  000296  501D               	movf	setMotorPWM@m,w,c
  1845  000298  26D9               	addwf	fsr2l,f,c
  1846  00029A  501E               	movf	setMotorPWM@m+1,w,c
  1847  00029C  22DA               	addwfc	fsr2h,f,c
  1848  00029E  50DF               	movf	indf2,w,c
  1849  0002A0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1850  0002A2  0E01               	movlw	1
  1851  0002A4  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1852  0002A6  2A1F               	incf	??_setMotorPWM,f,c
  1853  0002A8  D002               	goto	u784
  1854  0002AA                     u785:
  1855  0002AA  90D8               	bcf	status,0,c
  1856  0002AC  3620               	rlcf	??_setMotorPWM+1,f,c
  1857  0002AE                     u784:
  1858  0002AE  2E1F               	decfsz	??_setMotorPWM,f,c
  1859  0002B0  D7FC               	goto	u785
  1860  0002B2  5020               	movf	??_setMotorPWM+1,w,c
  1861  0002B4  108A               	iorwf	3978,w,c	;volatile
  1862  0002B6  6E8A               	movwf	3978,c	;volatile
  1863                           
  1864                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1865  0002B8  EE20 F007          	lfsr	2,7
  1866  0002BC  501D               	movf	setMotorPWM@m,w,c
  1867  0002BE  26D9               	addwf	fsr2l,f,c
  1868  0002C0  501E               	movf	setMotorPWM@m+1,w,c
  1869  0002C2  22DA               	addwfc	fsr2h,f,c
  1870  0002C4  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1871  0002C8  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1872  0002CC  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1873  0002D0  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1874  0002D4  1E21               	comf	??_setMotorPWM+2,f,c
  1875  0002D6  1E22               	comf	??_setMotorPWM+3,f,c
  1876  0002D8  4A21               	infsnz	??_setMotorPWM+2,f,c
  1877  0002DA  2A22               	incf	??_setMotorPWM+3,f,c
  1878  0002DC  501F               	movf	??_setMotorPWM,w,c
  1879  0002DE  2421               	addwf	??_setMotorPWM+2,w,c
  1880  0002E0  6E24               	movwf	setMotorPWM@PWMduty,c
  1881  0002E2  5020               	movf	??_setMotorPWM+1,w,c
  1882  0002E4  2022               	addwfc	??_setMotorPWM+3,w,c
  1883  0002E6  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1884                           
  1885                           ;dc_motor.c: 36: }
  1886  0002E8  D014               	goto	l107
  1887  0002EA                     l1590:
  1888                           
  1889                           ;dc_motor.c: 37: else
  1890                           ;dc_motor.c: 38: {
  1891                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  1892  0002EA  EE20 F006          	lfsr	2,6
  1893  0002EE  501D               	movf	setMotorPWM@m,w,c
  1894  0002F0  26D9               	addwf	fsr2l,f,c
  1895  0002F2  501E               	movf	setMotorPWM@m+1,w,c
  1896  0002F4  22DA               	addwfc	fsr2h,f,c
  1897  0002F6  50DF               	movf	indf2,w,c
  1898  0002F8  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1899  0002FA  0E01               	movlw	1
  1900  0002FC  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1901  0002FE  2A1F               	incf	??_setMotorPWM,f,c
  1902  000300  D002               	goto	u794
  1903  000302                     u795:
  1904  000302  90D8               	bcf	status,0,c
  1905  000304  3620               	rlcf	??_setMotorPWM+1,f,c
  1906  000306                     u794:
  1907  000306  2E1F               	decfsz	??_setMotorPWM,f,c
  1908  000308  D7FC               	goto	u795
  1909  00030A  5020               	movf	??_setMotorPWM+1,w,c
  1910  00030C  0AFF               	xorlw	255
  1911  00030E  148A               	andwf	3978,w,c	;volatile
  1912  000310  6E8A               	movwf	3978,c	;volatile
  1913  000312                     l107:
  1914                           
  1915                           ;dc_motor.c: 40: }
  1916                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  1917  000312  EE20 F002          	lfsr	2,2
  1918  000316  501D               	movf	setMotorPWM@m,w,c
  1919  000318  26D9               	addwf	fsr2l,f,c
  1920  00031A  501E               	movf	setMotorPWM@m+1,w,c
  1921  00031C  22DA               	addwfc	fsr2h,f,c
  1922  00031E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1923  000322  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1924  000326  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1925  00032A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1926  00032E  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1927  000330  46E8               	rlncf	wreg,f,c
  1928  000332  0BFC               	andlw	252
  1929  000334  6EDF               	movwf	indf2,c
  1930                           
  1931                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  1932  000336  EE20 F004          	lfsr	2,4
  1933  00033A  501D               	movf	setMotorPWM@m,w,c
  1934  00033C  26D9               	addwf	fsr2l,f,c
  1935  00033E  501E               	movf	setMotorPWM@m+1,w,c
  1936  000340  22DA               	addwfc	fsr2h,f,c
  1937  000342  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1938  000346  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1939  00034A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1940  00034E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1941  000352  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1942  000356  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1943  00035A  0E06               	movlw	6
  1944  00035C  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  1945  00035E                     u805:
  1946  00035E  3422               	rlcf	??_setMotorPWM+3,w,c
  1947  000360  3222               	rrcf	??_setMotorPWM+3,f,c
  1948  000362  3221               	rrcf	??_setMotorPWM+2,f,c
  1949  000364  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1950  000366  D7FB               	goto	u805
  1951  000368  5021               	movf	??_setMotorPWM+2,w,c
  1952  00036A  6EDF               	movwf	indf2,c
  1953  00036C  0012               	return		;funcret
  1954  00036E                     __end_of_setMotorPWM:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           intcon	equ	0xFF2
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           indf2	equ	0xFDF
  1961                           postinc2	equ	0xFDE
  1962                           postdec2	equ	0xFDD
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function ___wmul *****************
  1968 ;; Defined at:
  1969 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  multiplier      2   14[COMRAM] unsigned int 
  1972 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  product         2   18[COMRAM] unsigned int 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  2   14[COMRAM] unsigned int 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0, prodl, prodh
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1984 ;;      Params:         4       0       0       0
  1985 ;;      Locals:         2       0       0       0
  1986 ;;      Temps:          0       0       0       0
  1987 ;;      Totals:         6       0       0       0
  1988 ;;Total ram usage:        6 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    1
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_setMotorPWM
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text12
  1999  000868                     __ptext12:
  2000                           	opt stack 0
  2001  000868                     ___wmul:
  2002                           	opt stack 27
  2003                           
  2004                           ;incstack = 0
  2005  000868  500F               	movf	___wmul@multiplier,w,c
  2006  00086A  0211               	mulwf	___wmul@multiplicand,c
  2007  00086C  CFF3 F013          	movff	prodl,___wmul@product
  2008  000870  CFF4 F014          	movff	prodh,___wmul@product+1
  2009  000874  500F               	movf	___wmul@multiplier,w,c
  2010  000876  0212               	mulwf	___wmul@multiplicand+1,c
  2011  000878  50F3               	movf	prodl,w,c
  2012  00087A  2614               	addwf	___wmul@product+1,f,c
  2013  00087C  5010               	movf	___wmul@multiplier+1,w,c
  2014  00087E  0211               	mulwf	___wmul@multiplicand,c
  2015  000880  50F3               	movf	prodl,w,c
  2016  000882  2614               	addwf	___wmul@product+1,f,c
  2017  000884  C013  F00F         	movff	___wmul@product,?___wmul
  2018  000888  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2019  00088C  0012               	return	
  2020  00088E                     __end_of___wmul:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           prodh	equ	0xFF4
  2024                           prodl	equ	0xFF3
  2025                           intcon	equ	0xFF2
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           indf2	equ	0xFDF
  2029                           postinc2	equ	0xFDE
  2030                           postdec2	equ	0xFDD
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function ___awdiv *****************
  2036 ;; Defined at:
  2037 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  dividend        2   20[COMRAM] int 
  2040 ;;  divisor         2   22[COMRAM] int 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  quotient        2   26[COMRAM] int 
  2043 ;;  sign            1   25[COMRAM] unsigned char 
  2044 ;;  counter         1   24[COMRAM] unsigned char 
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  2   20[COMRAM] int 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2054 ;;      Params:         4       0       0       0
  2055 ;;      Locals:         4       0       0       0
  2056 ;;      Temps:          0       0       0       0
  2057 ;;      Totals:         8       0       0       0
  2058 ;;Total ram usage:        8 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    1
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_setMotorPWM
  2065 ;;		_ScanWithRange
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text13
  2070  00051A                     __ptext13:
  2071                           	opt stack 0
  2072  00051A                     ___awdiv:
  2073                           	opt stack 27
  2074                           
  2075                           ;incstack = 0
  2076  00051A  0E00               	movlw	0
  2077  00051C  6E1A               	movwf	___awdiv@sign,c
  2078  00051E  AE18               	btfss	___awdiv@divisor+1,7,c
  2079  000520  D006               	goto	l1548
  2080  000522  6C17               	negf	___awdiv@divisor,c
  2081  000524  1E18               	comf	___awdiv@divisor+1,f,c
  2082  000526  B0D8               	btfsc	status,0,c
  2083  000528  2A18               	incf	___awdiv@divisor+1,f,c
  2084  00052A  0E01               	movlw	1
  2085  00052C  6E1A               	movwf	___awdiv@sign,c
  2086  00052E                     l1548:
  2087  00052E  AE16               	btfss	___awdiv@dividend+1,7,c
  2088  000530  D006               	goto	l1554
  2089  000532  6C15               	negf	___awdiv@dividend,c
  2090  000534  1E16               	comf	___awdiv@dividend+1,f,c
  2091  000536  B0D8               	btfsc	status,0,c
  2092  000538  2A16               	incf	___awdiv@dividend+1,f,c
  2093  00053A  0E01               	movlw	1
  2094  00053C  1A1A               	xorwf	___awdiv@sign,f,c
  2095  00053E                     l1554:
  2096  00053E  0E00               	movlw	0
  2097  000540  6E1C               	movwf	___awdiv@quotient+1,c
  2098  000542  0E00               	movlw	0
  2099  000544  6E1B               	movwf	___awdiv@quotient,c
  2100  000546  5017               	movf	___awdiv@divisor,w,c
  2101  000548  1018               	iorwf	___awdiv@divisor+1,w,c
  2102  00054A  B4D8               	btfsc	status,2,c
  2103  00054C  D01C               	goto	l1576
  2104  00054E  0E01               	movlw	1
  2105  000550  6E19               	movwf	___awdiv@counter,c
  2106  000552  D004               	goto	l1562
  2107  000554                     l1560:
  2108  000554  90D8               	bcf	status,0,c
  2109  000556  3617               	rlcf	___awdiv@divisor,f,c
  2110  000558  3618               	rlcf	___awdiv@divisor+1,f,c
  2111  00055A  2A19               	incf	___awdiv@counter,f,c
  2112  00055C                     l1562:
  2113  00055C  AE18               	btfss	___awdiv@divisor+1,7,c
  2114  00055E  D7FA               	goto	l1560
  2115  000560                     l1564:
  2116  000560  90D8               	bcf	status,0,c
  2117  000562  361B               	rlcf	___awdiv@quotient,f,c
  2118  000564  361C               	rlcf	___awdiv@quotient+1,f,c
  2119  000566  5017               	movf	___awdiv@divisor,w,c
  2120  000568  5C15               	subwf	___awdiv@dividend,w,c
  2121  00056A  5018               	movf	___awdiv@divisor+1,w,c
  2122  00056C  5816               	subwfb	___awdiv@dividend+1,w,c
  2123  00056E  A0D8               	btfss	status,0,c
  2124  000570  D005               	goto	l1572
  2125  000572  5017               	movf	___awdiv@divisor,w,c
  2126  000574  5E15               	subwf	___awdiv@dividend,f,c
  2127  000576  5018               	movf	___awdiv@divisor+1,w,c
  2128  000578  5A16               	subwfb	___awdiv@dividend+1,f,c
  2129  00057A  801B               	bsf	___awdiv@quotient,0,c
  2130  00057C                     l1572:
  2131  00057C  90D8               	bcf	status,0,c
  2132  00057E  3218               	rrcf	___awdiv@divisor+1,f,c
  2133  000580  3217               	rrcf	___awdiv@divisor,f,c
  2134  000582  2E19               	decfsz	___awdiv@counter,f,c
  2135  000584  D7ED               	goto	l1564
  2136  000586                     l1576:
  2137  000586  501A               	movf	___awdiv@sign,w,c
  2138  000588  B4D8               	btfsc	status,2,c
  2139  00058A  D004               	goto	l1580
  2140  00058C  6C1B               	negf	___awdiv@quotient,c
  2141  00058E  1E1C               	comf	___awdiv@quotient+1,f,c
  2142  000590  B0D8               	btfsc	status,0,c
  2143  000592  2A1C               	incf	___awdiv@quotient+1,f,c
  2144  000594                     l1580:
  2145  000594  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2146  000598  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2147  00059C  0012               	return	
  2148  00059E                     __end_of___awdiv:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           prodh	equ	0xFF4
  2152                           prodl	equ	0xFF3
  2153                           intcon	equ	0xFF2
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           indf2	equ	0xFDF
  2157                           postinc2	equ	0xFDE
  2158                           postdec2	equ	0xFDD
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _grabRightIR *****************
  2164 ;; Defined at:
  2165 ;;		line 74 in file "IR_Reading.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2170 ;;  i               1   20[COMRAM] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  2   14[COMRAM] unsigned int 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:         2       0       0       0
  2181 ;;      Locals:         3       0       0       0
  2182 ;;      Temps:          2       0       0       0
  2183 ;;      Totals:         7       0       0       0
  2184 ;;Total ram usage:        7 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    1
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_ScanIR
  2191 ;;		_ScanWithRange
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text14
  2196  00060E                     __ptext14:
  2197                           	opt stack 0
  2198  00060E                     _grabRightIR:
  2199                           	opt stack 28
  2200                           
  2201                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2202                           
  2203                           ;incstack = 0
  2204  00060E  0E00               	movlw	0
  2205  000610  6E14               	movwf	grabRightIR@IR_signal+1,c
  2206  000612  0E00               	movlw	0
  2207  000614  6E13               	movwf	grabRightIR@IR_signal,c
  2208                           
  2209                           ;IR_Reading.c: 77: unsigned char i=0;
  2210  000616  0E00               	movlw	0
  2211  000618  6E15               	movwf	grabRightIR@i,c
  2212                           
  2213                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  2214  00061A  0E00               	movlw	0
  2215  00061C  6E15               	movwf	grabRightIR@i,c
  2216  00061E                     l1678:
  2217  00061E  0E03               	movlw	3
  2218  000620  6415               	cpfsgt	grabRightIR@i,c
  2219  000622  D001               	goto	l1682
  2220  000624  D017               	goto	l1688
  2221  000626                     l1682:
  2222                           
  2223                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2224  000626  5068               	movf	3944,w,c	;volatile
  2225  000628  CF69 F011          	movff	3945,??_grabRightIR	;volatile
  2226  00062C  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2227  00062E  C011  F012         	movff	??_grabRightIR,??_grabRightIR+1
  2228  000632  6A11               	clrf	??_grabRightIR,c
  2229  000634  1211               	iorwf	??_grabRightIR,f,c
  2230  000636  0E00               	movlw	0
  2231  000638  1212               	iorwf	??_grabRightIR+1,f,c
  2232  00063A  5011               	movf	??_grabRightIR,w,c
  2233  00063C  2613               	addwf	grabRightIR@IR_signal,f,c
  2234  00063E  5012               	movf	??_grabRightIR+1,w,c
  2235  000640  2214               	addwfc	grabRightIR@IR_signal+1,f,c
  2236                           
  2237                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  2238  000642  0E82               	movlw	130
  2239  000644  6E11               	movwf	??_grabRightIR& (0+255),c
  2240  000646  0EDE               	movlw	222
  2241  000648                     u1257:
  2242  000648  2EE8               	decfsz	wreg,f,c
  2243  00064A  D7FE               	goto	u1257
  2244  00064C  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2245  00064E  D7FC               	goto	u1257
  2246  000650  2A15               	incf	grabRightIR@i,f,c
  2247  000652  D7E5               	goto	l1678
  2248  000654                     l1688:
  2249                           
  2250                           ;IR_Reading.c: 83: }
  2251                           ;IR_Reading.c: 85: return IR_signal>>2;
  2252  000654  C013  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2253  000658  C014  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2254  00065C  90D8               	bcf	status,0,c
  2255  00065E  3212               	rrcf	??_grabRightIR+1,f,c
  2256  000660  3211               	rrcf	??_grabRightIR,f,c
  2257  000662  90D8               	bcf	status,0,c
  2258  000664  3212               	rrcf	??_grabRightIR+1,f,c
  2259  000666  3211               	rrcf	??_grabRightIR,f,c
  2260  000668  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2261  00066C  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2262  000670  0012               	return	
  2263  000672                     __end_of_grabRightIR:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           intcon	equ	0xFF2
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           indf2	equ	0xFDF
  2272                           postinc2	equ	0xFDE
  2273                           postdec2	equ	0xFDD
  2274                           fsr2h	equ	0xFDA
  2275                           fsr2l	equ	0xFD9
  2276                           status	equ	0xFD8
  2277                           
  2278 ;; *************** function _grabLeftIR *****************
  2279 ;; Defined at:
  2280 ;;		line 90 in file "IR_Reading.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2285 ;;  i               1   20[COMRAM] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  2   14[COMRAM] unsigned int 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2295 ;;      Params:         2       0       0       0
  2296 ;;      Locals:         3       0       0       0
  2297 ;;      Temps:          2       0       0       0
  2298 ;;      Totals:         7       0       0       0
  2299 ;;Total ram usage:        7 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_ScanIR
  2306 ;;		_ScanWithRange
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text15
  2311  000672                     __ptext15:
  2312                           	opt stack 0
  2313  000672                     _grabLeftIR:
  2314                           	opt stack 28
  2315                           
  2316                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  2317                           
  2318                           ;incstack = 0
  2319  000672  0E00               	movlw	0
  2320  000674  6E14               	movwf	grabLeftIR@IR_signal+1,c
  2321  000676  0E00               	movlw	0
  2322  000678  6E13               	movwf	grabLeftIR@IR_signal,c
  2323                           
  2324                           ;IR_Reading.c: 93: unsigned char i=0;
  2325  00067A  0E00               	movlw	0
  2326  00067C  6E15               	movwf	grabLeftIR@i,c
  2327                           
  2328                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  2329  00067E  0E00               	movlw	0
  2330  000680  6E15               	movwf	grabLeftIR@i,c
  2331  000682                     l1662:
  2332  000682  0E03               	movlw	3
  2333  000684  6415               	cpfsgt	grabLeftIR@i,c
  2334  000686  D001               	goto	l1666
  2335  000688  D017               	goto	l1672
  2336  00068A                     l1666:
  2337                           
  2338                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 8) | CAP2BUFL);
  2339  00068A  5066               	movf	3942,w,c	;volatile
  2340  00068C  CF67 F011          	movff	3943,??_grabLeftIR	;volatile
  2341  000690  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  2342  000692  C011  F012         	movff	??_grabLeftIR,??_grabLeftIR+1
  2343  000696  6A11               	clrf	??_grabLeftIR,c
  2344  000698  1211               	iorwf	??_grabLeftIR,f,c
  2345  00069A  0E00               	movlw	0
  2346  00069C  1212               	iorwf	??_grabLeftIR+1,f,c
  2347  00069E  5011               	movf	??_grabLeftIR,w,c
  2348  0006A0  2613               	addwf	grabLeftIR@IR_signal,f,c
  2349  0006A2  5012               	movf	??_grabLeftIR+1,w,c
  2350  0006A4  2214               	addwfc	grabLeftIR@IR_signal+1,f,c
  2351                           
  2352                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  2353  0006A6  0E82               	movlw	130
  2354  0006A8  6E11               	movwf	??_grabLeftIR& (0+255),c
  2355  0006AA  0EDE               	movlw	222
  2356  0006AC                     u1267:
  2357  0006AC  2EE8               	decfsz	wreg,f,c
  2358  0006AE  D7FE               	goto	u1267
  2359  0006B0  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  2360  0006B2  D7FC               	goto	u1267
  2361  0006B4  2A15               	incf	grabLeftIR@i,f,c
  2362  0006B6  D7E5               	goto	l1662
  2363  0006B8                     l1672:
  2364                           
  2365                           ;IR_Reading.c: 99: }
  2366                           ;IR_Reading.c: 101: return IR_signal>>2;
  2367  0006B8  C013  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  2368  0006BC  C014  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  2369  0006C0  90D8               	bcf	status,0,c
  2370  0006C2  3212               	rrcf	??_grabLeftIR+1,f,c
  2371  0006C4  3211               	rrcf	??_grabLeftIR,f,c
  2372  0006C6  90D8               	bcf	status,0,c
  2373  0006C8  3212               	rrcf	??_grabLeftIR+1,f,c
  2374  0006CA  3211               	rrcf	??_grabLeftIR,f,c
  2375  0006CC  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  2376  0006D0  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  2377  0006D4  0012               	return	
  2378  0006D6                     __end_of_grabLeftIR:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           prodh	equ	0xFF4
  2382                           prodl	equ	0xFF3
  2383                           intcon	equ	0xFF2
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           indf2	equ	0xFDF
  2387                           postinc2	equ	0xFDE
  2388                           postdec2	equ	0xFDD
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _delay_tenth_s *****************
  2394 ;; Defined at:
  2395 ;;		line 19 in file "Movement.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  tenth_second    1    wreg     unsigned char 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2400 ;;  i               2   16[COMRAM] unsigned int 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;		None               void
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2410 ;;      Params:         0       0       0       0
  2411 ;;      Locals:         3       0       0       0
  2412 ;;      Temps:          1       0       0       0
  2413 ;;      Totals:         4       0       0       0
  2414 ;;Total ram usage:        4 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    1
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_ScanIR
  2421 ;;		_ScanWithRange
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text16
  2426  00076A                     __ptext16:
  2427                           	opt stack 0
  2428  00076A                     _delay_tenth_s:
  2429                           	opt stack 28
  2430                           
  2431                           ;incstack = 0
  2432                           ;delay_tenth_s@tenth_seconds stored from wreg
  2433  00076A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2434                           
  2435                           ;Movement.c: 20: unsigned int i=0;
  2436  00076C  0E00               	movlw	0
  2437  00076E  6E12               	movwf	delay_tenth_s@i+1,c
  2438  000770  0E00               	movlw	0
  2439  000772  6E11               	movwf	delay_tenth_s@i,c
  2440                           
  2441                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2442  000774  0E00               	movlw	0
  2443  000776  6E12               	movwf	delay_tenth_s@i+1,c
  2444  000778  0E01               	movlw	1
  2445  00077A  6E11               	movwf	delay_tenth_s@i,c
  2446  00077C  D009               	goto	l1658
  2447  00077E                     l1654:
  2448                           
  2449                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2450  00077E  0E82               	movlw	130
  2451  000780  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2452  000782  0EDE               	movlw	222
  2453  000784                     u1277:
  2454  000784  2EE8               	decfsz	wreg,f,c
  2455  000786  D7FE               	goto	u1277
  2456  000788  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2457  00078A  D7FC               	goto	u1277
  2458  00078C  4A11               	infsnz	delay_tenth_s@i,f,c
  2459  00078E  2A12               	incf	delay_tenth_s@i+1,f,c
  2460  000790                     l1658:
  2461  000790  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2462  000792  0D02               	mullw	2
  2463  000794  5011               	movf	delay_tenth_s@i,w,c
  2464  000796  5CF3               	subwf	prodl,w,c
  2465  000798  5012               	movf	delay_tenth_s@i+1,w,c
  2466  00079A  58F4               	subwfb	prodh,w,c
  2467  00079C  A0D8               	btfss	status,0,c
  2468  00079E  0012               	return	
  2469  0007A0  D7EE               	goto	l1654
  2470  0007A2                     __end_of_delay_tenth_s:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           intcon	equ	0xFF2
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           indf2	equ	0xFDF
  2479                           postinc2	equ	0xFDE
  2480                           postdec2	equ	0xFDD
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function _delay_s *****************
  2486 ;; Defined at:
  2487 ;;		line 10 in file "Movement.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  seconds         1    wreg     unsigned char 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  seconds         1   15[COMRAM] unsigned char 
  2492 ;;  i               2   16[COMRAM] unsigned int 
  2493 ;; Return value:  Size  Location     Type
  2494 ;;		None               void
  2495 ;; Registers used:
  2496 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2502 ;;      Params:         0       0       0       0
  2503 ;;      Locals:         3       0       0       0
  2504 ;;      Temps:          1       0       0       0
  2505 ;;      Totals:         4       0       0       0
  2506 ;;Total ram usage:        4 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    1
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_main
  2513 ;;		_ScanIR
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text17
  2518  0007A2                     __ptext17:
  2519                           	opt stack 0
  2520  0007A2                     _delay_s:
  2521                           	opt stack 29
  2522                           
  2523                           ;incstack = 0
  2524                           ;delay_s@seconds stored from wreg
  2525  0007A2  6E10               	movwf	delay_s@seconds,c
  2526                           
  2527                           ;Movement.c: 11: unsigned int i=0;
  2528  0007A4  0E00               	movlw	0
  2529  0007A6  6E12               	movwf	delay_s@i+1,c
  2530  0007A8  0E00               	movlw	0
  2531  0007AA  6E11               	movwf	delay_s@i,c
  2532                           
  2533                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2534  0007AC  0E00               	movlw	0
  2535  0007AE  6E12               	movwf	delay_s@i+1,c
  2536  0007B0  0E01               	movlw	1
  2537  0007B2  6E11               	movwf	delay_s@i,c
  2538  0007B4  D009               	goto	l1638
  2539  0007B6                     l1634:
  2540                           
  2541                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2542  0007B6  0E82               	movlw	130
  2543  0007B8  6E0F               	movwf	??_delay_s& (0+255),c
  2544  0007BA  0EDE               	movlw	222
  2545  0007BC                     u1287:
  2546  0007BC  2EE8               	decfsz	wreg,f,c
  2547  0007BE  D7FE               	goto	u1287
  2548  0007C0  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2549  0007C2  D7FC               	goto	u1287
  2550  0007C4  4A11               	infsnz	delay_s@i,f,c
  2551  0007C6  2A12               	incf	delay_s@i+1,f,c
  2552  0007C8                     l1638:
  2553  0007C8  5010               	movf	delay_s@seconds,w,c
  2554  0007CA  0D14               	mullw	20
  2555  0007CC  5011               	movf	delay_s@i,w,c
  2556  0007CE  5CF3               	subwf	prodl,w,c
  2557  0007D0  5012               	movf	delay_s@i+1,w,c
  2558  0007D2  58F4               	subwfb	prodh,w,c
  2559  0007D4  A0D8               	btfss	status,0,c
  2560  0007D6  0012               	return	
  2561  0007D8  D7EE               	goto	l1634
  2562  0007DA                     __end_of_delay_s:
  2563                           	opt stack 0
  2564                           tblptru	equ	0xFF8
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _InterruptHandlerHigh *****************
  2578 ;; Defined at:
  2579 ;;		line 16 in file "main.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;		None               void
  2586 ;; Registers used:
  2587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2593 ;;      Params:         0       0       0       0
  2594 ;;      Locals:         0       0       0       0
  2595 ;;      Temps:         14       0       0       0
  2596 ;;      Totals:        14       0       0       0
  2597 ;;Total ram usage:       14 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		Interrupt level 2
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	intcode
  2607  000008                     __pintcode:
  2608                           	opt stack 0
  2609  000008                     _InterruptHandlerHigh:
  2610                           	opt stack 25
  2611                           
  2612                           ;incstack = 0
  2613  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2614  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2615  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2616  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2617  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2618  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2619  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2620  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2621  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2622  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2623  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2624  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2625  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2626  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2627  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2628                           
  2629                           ;main.c: 18: if (PIR1bits.RCIF) {
  2630  000042  AA9E               	btfss	3998,5,c	;volatile
  2631  000044  D013               	goto	i2l52
  2632                           
  2633                           ;main.c: 19: ReceivedString[i]=RCREG;
  2634  000046  504B               	movf	_i,w,c	;volatile
  2635  000048  0D01               	mullw	1
  2636  00004A  0E3B               	movlw	low _ReceivedString
  2637  00004C  24F3               	addwf	prodl,w,c
  2638  00004E  6ED9               	movwf	fsr2l,c
  2639  000050  0E00               	movlw	high _ReceivedString
  2640  000052  20F4               	addwfc	prodh,w,c
  2641  000054  6EDA               	movwf	fsr2h,c
  2642  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2643                           
  2644                           ;main.c: 20: if (i==15){
  2645  00005A  0E0F               	movlw	15
  2646  00005C  184B               	xorwf	_i,w,c	;volatile
  2647  00005E  A4D8               	btfss	status,2,c
  2648  000060  D003               	goto	i2l1240
  2649                           
  2650                           ;main.c: 21: i=0;
  2651  000062  0E00               	movlw	0
  2652  000064  6E4B               	movwf	_i,c	;volatile
  2653                           
  2654                           ;main.c: 22: }else{
  2655  000066  D001               	goto	i2l1242
  2656  000068                     i2l1240:
  2657                           
  2658                           ;main.c: 23: i++;
  2659  000068  2A4B               	incf	_i,f,c	;volatile
  2660  00006A                     i2l1242:
  2661                           
  2662                           ;main.c: 24: }
  2663                           ;main.c: 25: PIR1bits.RCIF=0;
  2664  00006A  9A9E               	bcf	3998,5,c	;volatile
  2665  00006C                     i2l52:
  2666  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2667  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2668  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2669  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2670  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2671  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2672  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2673  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2674  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2675  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2676  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2677  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2678  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2679  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2680  0000A4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2681  0000A6  0011               	retfie		f
  2682  0000A8                     __end_of_InterruptHandlerHigh:
  2683                           	opt stack 0
  2684  0000                     pclatu	equ	0xFFB
  2685                           pclath	equ	0xFFA
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           intcon	equ	0xFF2
  2693                           postinc0	equ	0xFEE
  2694                           fsr0h	equ	0xFEA
  2695                           fsr0l	equ	0xFE9
  2696                           wreg	equ	0xFE8
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           pclatu	equ	0xFFB
  2706                           pclath	equ	0xFFA
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           postinc0	equ	0xFEE
  2715                           fsr0h	equ	0xFEA
  2716                           fsr0l	equ	0xFE9
  2717                           wreg	equ	0xFE8
  2718                           fsr1h	equ	0xFE2
  2719                           fsr1l	equ	0xFE1
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727                           	psect	rparam
  2728  0000                     pclatu	equ	0xFFB
  2729                           pclath	equ	0xFFA
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           intcon	equ	0xFF2
  2737                           postinc0	equ	0xFEE
  2738                           fsr0h	equ	0xFEA
  2739                           fsr0l	equ	0xFE9
  2740                           wreg	equ	0xFE8
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750                           	psect	temp
  2751  00004C                     btemp:
  2752                           	opt stack 0
  2753  00004C                     	ds	1
  2754  0000                     int$flags	set	btemp
  2755                           pclatu	equ	0xFFB
  2756                           pclath	equ	0xFFA
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           postinc0	equ	0xFEE
  2765                           fsr0h	equ	0xFEA
  2766                           fsr0l	equ	0xFE9
  2767                           wreg	equ	0xFE8
  2768                           fsr1h	equ	0xFE2
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      75
    BANK0           160     24      24
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   28502
                                              0 BANK0     24    24      0
                             _ScanIR
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2435
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     472
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              12     8      4   18769
                                             46 COMRAM    12     8      4
                            _delay_s
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    6662
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    7174
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3927
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2219
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1531
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     650
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_s
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      18       5       15.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4B       1       79.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       3        0.0%
DATA                 0      0      63      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Mar 15 23:31:57 2018

                 ?_grabRightIR 000F                              _i 004B                             l55 0148  
                 ___awdiv@sign 001A            ___wmul@multiplicand 0011                            l107 0312  
                          l137 05F0                            u805 035E                            u784 02AE  
                          u785 02AA                            u794 0306                            u795 0302  
                          u965 0852                            u966 0854                            u985 0864  
                          u986 0866                    grabLeftIR@i 0015                            prod 000FF3  
                          wreg 000FE8                           l1602 04BC                           l1620 05B8  
                         l1560 0554                           l1624 05D0                           l1616 05A0  
                         l1608 04DC                           l1634 07B6                           l1562 055C  
                         l1554 053E                           l1580 0594                           l1572 057C  
                         l1564 0560                           l1548 052E                           l1638 07C8  
                         l1654 077E                           l1662 0682                           l1590 02EA  
                         l1734 0856                           l1672 06B8                           l1576 0586  
                         l1840 01E6                           l1832 01A4                           l1658 0790  
                         l1666 068A                           l1682 0626                           l1594 048C  
                         l1818 014E                           l1772 0446                           l1764 040C  
                         l1844 01F4                           l1836 01C4                           l1678 061E  
                         l1598 04A4                           l1790 0486                           l1758 0408  
                         l1688 0654                           l1856 0220                           l1778 044A  
                         u1237 04D6                           _LATB 000F8A                           u1247 05EA  
                         u1257 0648                           u1267 06AC                           u1277 0784  
                         u1287 07BC                           i2l52 006C                           _main 00AC  
                main@ScanAngle 0063                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 004C  
                         _stop 048A                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00A8                 delay_s@seconds 0010  
                 ___param_bank 000010                          ?_main 0001                __end_of___awdiv 059E  
                        ?_stop 0026                ___awdiv@divisor 0017                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                   grabRightIR@i 0015                  _initRFID$1287 000F  
              ___awdiv@counter 0019                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                __end_of_delay_s 07DA  
                        main@i 0062                          tablat 000FF5                          status 000FD8  
              __initialization 08D0                   __end_of_main 023A                   __end_of_stop 051A  
               delay_tenth_s@i 0011                 __CFG_OSC$IRCIO 000000           __end_of_enableSensor 0868  
                       ??_main 003B                         ??_stop 002A                  __activetblptr 000002  
                ?_initMotorPWM 0001                   ?_setMotorPWM 001D         __size_of_fullSpeedBack 0036  
             ___awdiv@dividend 0015                         i2l1240 0068                         i2l1242 006A  
               __CFG_WDTEN$OFF 000000          __end_of_delay_tenth_s 07A2                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         _ScanIR 036E  
                       ___wmul 0868                      ??___awdiv 0019               __end_of_initRFID 08D0  
                       _initIR 088E           __size_of_grabRightIR 0064                         clear_0 08D6  
             ___awdiv@quotient 001B                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0026                         stop@mR 0028               __end_of_turnLeft 076A  
              fullSpeedBack@mL 002B                fullSpeedBack@mR 002D                     __accesstop 0060  
      __end_of__initialization 08DC                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
                _fullSpeedBack 07DA  __size_of_InterruptHandlerHigh 00A0     delay_tenth_s@tenth_seconds 0010  
                      ?_ScanIR 002F                 ?_fullSpeedBack 002B          __size_of_enableSensor 0026  
                      ?___wmul 000F            grabLeftIR@IR_signal 0013                        _CAP1CON 000F63  
                      _CAP2CON 000F62                        ?_initIR 0001        __size_of_fullSpeedAhead 0070  
                   _grabLeftIR 0672                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initRFID 0001           __size_of_setMotorPWM 0134                   _enableSensor 0842  
           __size_of_turnRight 004A           __end_of_initMotorPWM 0842                        __Hparam 0000  
                      __Lparam 0000                __size_of_ScanIR 011C                        ___awdiv 051A  
              __size_of___wmul 0026                __size_of_initIR 0022                        __pcinit 08D0  
                      _delay_s 07A2                        __ramtop 0300                      ?_turnLeft 002B  
                      __ptext0 00AC                        __ptext1 08B0                        __ptext2 0810  
                      __ptext3 088E                        __ptext4 07DA                        __ptext5 0842  
                      __ptext6 036E                        __ptext7 06D6                        __ptext8 0720  
                      __ptext9 048A           end_of_initialization 08DC             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000             ScanIR@SensorResult 0037  
              ??_fullSpeedBack 002F                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     ??_turnLeft 002F  
            __end_of_turnRight 0720                    ?_grabLeftIR 000F                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
                    _TRISEbits 000F96               fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028  
ScanIR@DirectionFoundTolerance 0035                      _TXSTAbits 000FAC                     main@motorL 0066  
                   main@motorR 006F                  ??_grabRightIR 0011                 __end_of_ScanIR 048A  
               _fullSpeedAhead 059E                 _ReceivedString 003B                 __end_of___wmul 088E  
                  _BAUDCONbits 000FAA                 __end_of_initIR 08B0         __size_of_delay_tenth_s 0038  
          start_initialization 08D0          __size_of_initMotorPWM 0032   __end_of_InterruptHandlerHigh 00A8  
                     ??_ScanIR 0033         __end_of_fullSpeedAhead 060E            __size_of_grabLeftIR 0064  
                     ??___wmul 0013                       ??_initIR 000F            __end_of_grabRightIR 0672  
                 _initMotorPWM 0810                    __pbssCOMRAM 003B                  __pcstackBANK0 0060  
                _delay_tenth_s 076A              __size_of_initRFID 0020                ?_fullSpeedAhead 0026  
                    __pintcode 0008                       ?___awdiv 0015                       ?_delay_s 0001  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66              __size_of_turnLeft 004A                  ??_setMotorPWM 001F  
               ?_delay_tenth_s 0001                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 002B  
                  turnRight@mR 002D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                  _grabRightIR 060E           grabRightIR@IR_signal 0013              ___wmul@multiplier 000F  
                 setMotorPWM@m 001D           _InterruptHandlerHigh 0008                       ScanIR@mL 002F  
                     ScanIR@mR 0031                   ??_grabLeftIR 0011                      _turnRight 06D6  
          __end_of_setMotorPWM 036E                       __Hrparam 0000                       __Lrparam 0000  
        __end_of_fullSpeedBack 0810             __end_of_grabLeftIR 06D6               __size_of___awdiv 0084  
                   _ANSEL0bits 000FB8               __size_of_delay_s 0038          ?_InterruptHandlerHigh 0001  
                   ?_turnRight 002B                       __ptext10 059E                       __ptext11 023A  
                     __ptext12 0868                       __ptext13 051A                       __ptext14 060E  
                     __ptext15 0672                       __ptext16 076A                       __ptext17 07A2  
              ??_delay_tenth_s 000F                       _initRFID 08B0                  __size_of_main 018E  
           main@DirectionFound 0065                  __size_of_stop 0090                     turnLeft@mL 002B  
                   turnLeft@mR 002D                       delay_s@i 0011                       int$flags 004C  
                     main@mode 0064                       main@test 0060                       _turnLeft 0720  
           enableSensor@sensor 0010             enableSensor@status 000F                     _INTCONbits 000FF2  
                  _setMotorPWM 023A                       intlevel2 0000                  ?_enableSensor 000F  
             ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001  
                  ??_turnRight 002F                 ??_enableSensor 0010  
