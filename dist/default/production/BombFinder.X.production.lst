

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 16:44:10 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	smallconst
    45  000300                     __psmallconst:
    46                           	opt stack 0
    47  000300  00                 	db	0
    48  000301                     _ClearSignalThreshold:
    49                           	opt stack 0
    50  000301  01F4               	dw	500
    51  000303                     __end_of_ClearSignalThreshold:
    52                           	opt stack 0
    53  000303                     _DirectionFoundThreshold:
    54                           	opt stack 0
    55  000303  07D0               	dw	2000
    56  000305                     __end_of_DirectionFoundThreshold:
    57                           	opt stack 0
    58  000305                     _DirectionFoundTolerance:
    59                           	opt stack 0
    60  000305  03E8               	dw	1000
    61  000307                     __end_of_DirectionFoundTolerance:
    62                           	opt stack 0
    63  0000                     _ANSEL0bits	set	4024
    64  0000                     _BAUDCONbits	set	4010
    65  0000                     _CAP1BUFH	set	3945
    66  0000                     _CAP1BUFL	set	3944
    67  0000                     _CAP1CON	set	3939
    68  0000                     _CAP2BUFH	set	3943
    69  0000                     _CAP2BUFL	set	3942
    70  0000                     _CAP2CON	set	3938
    71  0000                     _INTCONbits	set	4082
    72  0000                     _IPR1bits	set	3999
    73  0000                     _LATAbits	set	3977
    74  0000                     _LATB	set	3978
    75  0000                     _LATCbits	set	3979
    76  0000                     _LATDbits	set	3980
    77  0000                     _LATEbits	set	3981
    78  0000                     _OSCCON	set	4051
    79  0000                     _OSCCONbits	set	4051
    80  0000                     _PIE1bits	set	3997
    81  0000                     _PIR1bits	set	3998
    82  0000                     _PTCON0	set	3967
    83  0000                     _PTCON1	set	3966
    84  0000                     _PTPERH	set	3962
    85  0000                     _PTPERL	set	3963
    86  0000                     _PWMCON0	set	3951
    87  0000                     _PWMCON1	set	3950
    88  0000                     _RCONbits	set	4048
    89  0000                     _RCREG	set	4014
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _SPBRG	set	4015
    92  0000                     _SPBRGH	set	4016
    93  0000                     _T5CON	set	4023
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISBbits	set	3987
    96  0000                     _TRISC	set	3988
    97  0000                     _TRISCbits	set	3988
    98  0000                     _TRISDbits	set	3989
    99  0000                     _TRISEbits	set	3990
   100  0000                     _TXREG	set	4013
   101  0000                     _TXSTAbits	set	4012
   102  0000                     _PDC0H	set	3960
   103  0000                     _PDC0L	set	3961
   104  0000                     _PDC1H	set	3958
   105  0000                     _PDC1L	set	3959
   106                           
   107                           ; #config settings
   108  000307  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  0017D6                     __pcinit:
   112                           	opt stack 0
   113  0017D6                     start_initialization:
   114                           	opt stack 0
   115  0017D6                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to BANK1 (17 bytes)
   119  0017D6  EE01  F0E9         	lfsr	0,__pbssBANK1
   120  0017DA  0E11               	movlw	17
   121  0017DC                     clear_0:
   122  0017DC  6AEE               	clrf	postinc0,c
   123  0017DE  06E8               	decf	wreg,f,c
   124  0017E0  E1FD               	bnz	clear_0
   125                           
   126                           ; Clear objects allocated to BANK0 (16 bytes)
   127  0017E2  EE00  F07C         	lfsr	0,__pbssBANK0
   128  0017E6  0E10               	movlw	16
   129  0017E8                     clear_1:
   130  0017E8  6AEE               	clrf	postinc0,c
   131  0017EA  06E8               	decf	wreg,f,c
   132  0017EC  E1FD               	bnz	clear_1
   133                           
   134                           ; Clear objects allocated to COMRAM (2 bytes)
   135  0017EE  6A3F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   136  0017F0  6A3E               	clrf	__pbssCOMRAM& (0+255),c
   137  0017F2                     end_of_initialization:
   138                           	opt stack 0
   139  0017F2                     __end_of__initialization:
   140                           	opt stack 0
   141  0017F2  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   142  0017F4  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   143  0017F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144  0017F8  6EF8               	movwf	tblptru,c
   145  0017FA  0100               	movlb	0
   146  0017FC  EFFF  F004         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           
   151                           	psect	bssCOMRAM
   152  00003E                     __pbssCOMRAM:
   153                           	opt stack 0
   154  00003E                     _i:
   155                           	opt stack 0
   156  00003E                     	ds	1
   157  00003F                     _start:
   158                           	opt stack 0
   159  00003F                     	ds	1
   160                           tblptru	equ	0xFF8
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	bssBANK0
   165  00007C                     __pbssBANK0:
   166                           	opt stack 0
   167  00007C                     ScanIR@F3713:
   168                           	opt stack 0
   169  00007C                     	ds	4
   170  000080                     ScanWithRange@F3719:
   171                           	opt stack 0
   172  000080                     	ds	4
   173  000084                     ScanWithRange@F3721:
   174                           	opt stack 0
   175  000084                     	ds	4
   176  000088                     ScanWithRange@F3723:
   177                           	opt stack 0
   178  000088                     	ds	4
   179                           tblptru	equ	0xFF8
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           
   183                           	psect	bssBANK1
   184  0001E9                     __pbssBANK1:
   185                           	opt stack 0
   186  0001E9                     _RFID_Read:
   187                           	opt stack 0
   188  0001E9                     	ds	1
   189  0001EA                     _ReceivedString:
   190                           	opt stack 0
   191  0001EA                     	ds	16
   192                           tblptru	equ	0xFF8
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	cstackBANK1
   197  000100                     __pcstackBANK1:
   198                           	opt stack 0
   199  000100                     main@MoveType:
   200                           	opt stack 0
   201                           
   202                           ; 100 bytes @ 0x0
   203  000100                     	ds	100
   204  000164                     main@MoveTime:
   205                           	opt stack 0
   206                           
   207                           ; 100 bytes @ 0x64
   208  000164                     	ds	100
   209  0001C8                     main@Message:
   210                           	opt stack 0
   211                           
   212                           ; 10 bytes @ 0xC8
   213  0001C8                     	ds	10
   214  0001D2                     main@ScanAngle:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0xD2
   218  0001D2                     	ds	1
   219  0001D3                     main@mode:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xD3
   223  0001D3                     	ds	1
   224  0001D4                     main@Move:
   225                           	opt stack 0
   226                           
   227                           ; 1 bytes @ 0xD4
   228  0001D4                     	ds	1
   229  0001D5                     main@DirectionFound:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0xD5
   233  0001D5                     	ds	1
   234  0001D6                     main@i:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0xD6
   238  0001D6                     	ds	1
   239  0001D7                     main@mL:
   240                           	opt stack 0
   241                           
   242                           ; 9 bytes @ 0xD7
   243  0001D7                     	ds	9
   244  0001E0                     main@mR:
   245                           	opt stack 0
   246                           
   247                           ; 9 bytes @ 0xE0
   248  0001E0                     	ds	9
   249                           tblptru	equ	0xFF8
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	cstackBANK0
   254  000060                     __pcstackBANK0:
   255                           	opt stack 0
   256  000060                     turnLeft@mL:
   257                           	opt stack 0
   258  000060                     turnRight@mL:
   259                           	opt stack 0
   260  000060                     fullSpeedBack@mL:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x0
   264  000060                     	ds	2
   265  000062                     turnLeft@mR:
   266                           	opt stack 0
   267  000062                     turnRight@mR:
   268                           	opt stack 0
   269  000062                     fullSpeedBack@mR:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x2
   273  000062                     	ds	2
   274  000064                     ScanIR@mL:
   275                           	opt stack 0
   276  000064                     ScanWithRange@mL:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x4
   280  000064                     	ds	2
   281  000066                     ScanIR@mR:
   282                           	opt stack 0
   283  000066                     ScanWithRange@mR:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x6
   287  000066                     	ds	2
   288  000068                     ScanWithRange@tenth_seconds:
   289                           	opt stack 0
   290  000068                     ScanIR@SensorResult:
   291                           	opt stack 0
   292                           
   293                           ; 4 bytes @ 0x8
   294  000068                     	ds	1
   295  000069                     ScanWithRange@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x9
   299  000069                     	ds	2
   300  00006B                     ScanWithRange@ResultFalseL:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0xB
   304  00006B                     	ds	1
   305  00006C                     ScanWithRange@ResultFalseC:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0xC
   309  00006C                     	ds	1
   310  00006D                     ScanWithRange@ResultFalseR:
   311                           	opt stack 0
   312                           
   313                           ; 1 bytes @ 0xD
   314  00006D                     	ds	1
   315  00006E                     ScanWithRange@SensorResultL:
   316                           	opt stack 0
   317                           
   318                           ; 4 bytes @ 0xE
   319  00006E                     	ds	4
   320  000072                     ScanWithRange@SensorResultC:
   321                           	opt stack 0
   322                           
   323                           ; 4 bytes @ 0x12
   324  000072                     	ds	4
   325  000076                     ScanWithRange@SensorResultR:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x16
   329  000076                     	ds	4
   330  00007A                     ??_main:
   331                           
   332                           ; 0 bytes @ 0x1A
   333  00007A                     	ds	2
   334                           tblptru	equ	0xFF8
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackCOMRAM
   339  000001                     __pcstackCOMRAM:
   340                           	opt stack 0
   341  000001                     ??_InterruptHandlerHigh:
   342  000001                     
   343                           ; 2 bytes @ 0x0
   344  000001                     	ds	14
   345  00000F                     ??_InterruptHandlerLow:
   346                           
   347                           ; 0 bytes @ 0xE
   348  00000F                     	ds	17
   349  000020                     ??_delay_s:
   350  000020                     ??_delay_tenth_s:
   351  000020                     ??_LCDout:
   352  000020                     ?_grabLeftIR:
   353                           	opt stack 0
   354  000020                     ?_grabRightIR:
   355                           	opt stack 0
   356  000020                     ?___wmul:
   357                           	opt stack 0
   358  000020                     enableSensor@status:
   359                           	opt stack 0
   360  000020                     VerifySignal@Signal:
   361                           	opt stack 0
   362  000020                     ___wmul@multiplier:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x1F
   366  000020                     	ds	1
   367  000021                     delay_s@seconds:
   368                           	opt stack 0
   369  000021                     delay_tenth_s@tenth_seconds:
   370                           	opt stack 0
   371  000021                     enableSensor@sensor:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x20
   375  000021                     	ds	1
   376  000022                     ??_VerifySignal:
   377  000022                     ??_grabLeftIR:
   378  000022                     ??_grabRightIR:
   379  000022                     delay_s@i:
   380                           	opt stack 0
   381  000022                     delay_tenth_s@i:
   382                           	opt stack 0
   383  000022                     ___wmul@multiplicand:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x21
   387  000022                     	ds	1
   388  000023                     LCDout@number:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x22
   392  000023                     	ds	1
   393  000024                     SendLCD@type:
   394                           	opt stack 0
   395  000024                     ___wmul@product:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x23
   399  000024                     	ds	1
   400  000025                     SendLCD@Byte:
   401                           	opt stack 0
   402  000025                     grabRightIR@IR_signal:
   403                           	opt stack 0
   404  000025                     grabLeftIR@IR_signal:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x24
   408  000025                     	ds	1
   409  000026                     ??_initLCD:
   410  000026                     ?___awdiv:
   411                           	opt stack 0
   412  000026                     ___awdiv@dividend:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x25
   416  000026                     	ds	1
   417  000027                     grabRightIR@i:
   418                           	opt stack 0
   419  000027                     grabLeftIR@i:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x26
   423  000027                     	ds	1
   424  000028                     VerifySignal@checksum:
   425                           	opt stack 0
   426  000028                     ___awdiv@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x27
   430  000028                     	ds	1
   431  000029                     VerifySignal@hexByte:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x28
   435  000029                     	ds	1
   436  00002A                     ___awdiv@counter:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x29
   440  00002A                     	ds	1
   441  00002B                     VerifySignal@i:
   442                           	opt stack 0
   443  00002B                     ___awdiv@sign:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x2A
   447  00002B                     	ds	1
   448  00002C                     ___awdiv@quotient:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2B
   452  00002C                     	ds	2
   453  00002E                     setMotorPWM@m:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x2D
   457  00002E                     	ds	2
   458  000030                     ??_setMotorPWM:
   459                           
   460                           ; 0 bytes @ 0x2F
   461  000030                     	ds	5
   462  000035                     setMotorPWM@PWMduty:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x34
   466  000035                     	ds	2
   467  000037                     stop@mL:
   468                           	opt stack 0
   469  000037                     fullSpeedAhead@mL:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x36
   473  000037                     	ds	2
   474  000039                     stop@mR:
   475                           	opt stack 0
   476  000039                     fullSpeedAhead@mR:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x38
   480  000039                     	ds	2
   481  00003B                     
   482                           ; 0 bytes @ 0x3A
   483  00003B                     	ds	1
   484  00003C                     ??_ScanWithRange:
   485  00003C                     ??_ScanIR:
   486  00003C                     
   487                           ; 0 bytes @ 0x3B
   488  00003C                     	ds	2
   489                           tblptru	equ	0xFF8
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 41 in file "main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   503 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   504 ;;  Message        10  200[BANK1 ] unsigned char [10]
   505 ;;  mR              9  224[BANK1 ] struct DC_motor
   506 ;;  mL              9  215[BANK1 ] struct DC_motor
   507 ;;  i               1  214[BANK1 ] unsigned char 
   508 ;;  DirectionFou    1  213[BANK1 ] char 
   509 ;;  Move            1  212[BANK1 ] unsigned char 
   510 ;;  mode            1  211[BANK1 ] unsigned char 
   511 ;;  ScanAngle       1  210[BANK1 ] unsigned char 
   512 ;; Return value:  Size  Location     Type
   513 ;;		None               void
   514 ;; Registers used:
   515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   521 ;;      Params:         0       0       0       0
   522 ;;      Locals:         0       0     233       0
   523 ;;      Temps:          0       2       0       0
   524 ;;      Totals:         0       2     233       0
   525 ;;Total ram usage:      235 bytes
   526 ;; Hardware stack levels required when called:    7
   527 ;; This function calls:
   528 ;;		_ScanIR
   529 ;;		_ScanWithRange
   530 ;;		_VerifySignal
   531 ;;		_delay_s
   532 ;;		_delay_tenth_s
   533 ;;		_enableSensor
   534 ;;		_fullSpeedAhead
   535 ;;		_fullSpeedBack
   536 ;;		_initIR
   537 ;;		_initLCD
   538 ;;		_initMotorPWM
   539 ;;		_initRFID
   540 ;;		_stop
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text0
   547  0009FE                     __ptext0:
   548                           	opt stack 0
   549  0009FE                     _main:
   550                           	opt stack 24
   551                           
   552                           ;main.c: 44: unsigned char Message[10];
   553                           ;main.c: 45: unsigned char i=0;
   554                           
   555                           ;incstack = 0
   556  0009FE  0E00               	movlw	0
   557  000A00  0101               	movlb	1	; () banked
   558  000A02  6FD6               	movwf	main@i& (0+255),b
   559                           
   560                           ;main.c: 46: unsigned char mode=0;
   561  000A04  0E00               	movlw	0
   562  000A06  0101               	movlb	1	; () banked
   563  000A08  6FD3               	movwf	main@mode& (0+255),b
   564                           
   565                           ;main.c: 47: signed char DirectionFound=0;
   566  000A0A  0E00               	movlw	0
   567  000A0C  0101               	movlb	1	; () banked
   568  000A0E  6FD5               	movwf	main@DirectionFound& (0+255),b
   569                           
   570                           ;main.c: 48: char MoveTime[100];
   571                           ;main.c: 49: char MoveType[100];
   572                           ;main.c: 50: char Move=0;
   573  000A10  0E00               	movlw	0
   574  000A12  0101               	movlb	1	; () banked
   575  000A14  6FD4               	movwf	main@Move& (0+255),b
   576                           
   577                           ;main.c: 52: unsigned char ScanAngle=6;
   578  000A16  0E06               	movlw	6
   579  000A18  0101               	movlb	1	; () banked
   580  000A1A  6FD2               	movwf	main@ScanAngle& (0+255),b
   581                           
   582                           ; BSR set to: 1
   583                           ;main.c: 55: INTCONbits.GIEH=1;
   584  000A1C  8EF2               	bsf	intcon,7,c	;volatile
   585                           
   586                           ; BSR set to: 1
   587                           ;main.c: 56: INTCONbits.GIEL=1;
   588  000A1E  8CF2               	bsf	intcon,6,c	;volatile
   589                           
   590                           ; BSR set to: 1
   591                           ;main.c: 57: INTCONbits.PEIE=1;
   592  000A20  8CF2               	bsf	intcon,6,c	;volatile
   593                           
   594                           ; BSR set to: 1
   595                           ;main.c: 58: RCONbits.IPEN=1;
   596  000A22  8ED0               	bsf	4048,7,c	;volatile
   597                           
   598                           ; BSR set to: 1
   599                           ;main.c: 61: IPR1bits.RCIP=0;
   600  000A24  9A9F               	bcf	3999,5,c	;volatile
   601                           
   602                           ; BSR set to: 1
   603                           ;main.c: 62: PIE1bits.RCIE=1;
   604  000A26  8A9D               	bsf	3997,5,c	;volatile
   605                           
   606                           ; BSR set to: 1
   607                           ;main.c: 65: TRISCbits.RC3=1;
   608  000A28  8694               	bsf	3988,3,c	;volatile
   609                           
   610                           ; BSR set to: 1
   611                           ;main.c: 66: INTCONbits.INT0IE=1;
   612  000A2A  88F2               	bsf	intcon,4,c	;volatile
   613                           
   614                           ; BSR set to: 1
   615                           ;main.c: 69: PIR1bits.RC1IF=0;
   616  000A2C  9A9E               	bcf	3998,5,c	;volatile
   617                           
   618                           ; BSR set to: 1
   619                           ;main.c: 70: INTCONbits.INT0IF=0;
   620  000A2E  92F2               	bcf	intcon,1,c	;volatile
   621                           
   622                           ;main.c: 73: struct DC_motor mL, mR;
   623                           ;main.c: 74: mL.power=0;
   624  000A30  0E00               	movlw	0
   625  000A32  0101               	movlb	1	; () banked
   626  000A34  6FD7               	movwf	main@mL& (0+255),b
   627                           
   628                           ;main.c: 75: mL.direction=1;
   629  000A36  0E01               	movlw	1
   630  000A38  0101               	movlb	1	; () banked
   631  000A3A  6FD8               	movwf	(main@mL+1)& (0+255),b
   632                           
   633                           ; BSR set to: 1
   634                           ;main.c: 76: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   635  000A3C  0E79               	movlw	121
   636  000A3E  0101               	movlb	1	; () banked
   637  000A40  6FD9               	movwf	(main@mL+2)& (0+255),b
   638  000A42  0E0F               	movlw	15
   639  000A44  0101               	movlb	1	; () banked
   640  000A46  6FDA               	movwf	(main@mL+3)& (0+255),b
   641                           
   642                           ; BSR set to: 1
   643                           ;main.c: 77: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   644  000A48  0E78               	movlw	120
   645  000A4A  0101               	movlb	1	; () banked
   646  000A4C  6FDB               	movwf	(main@mL+4)& (0+255),b
   647  000A4E  0E0F               	movlw	15
   648  000A50  0101               	movlb	1	; () banked
   649  000A52  6FDC               	movwf	(main@mL+5)& (0+255),b
   650                           
   651                           ;main.c: 78: mL.dir_pin=0;
   652  000A54  0E00               	movlw	0
   653  000A56  0101               	movlb	1	; () banked
   654  000A58  6FDD               	movwf	(main@mL+6)& (0+255),b
   655                           
   656                           ;main.c: 79: mL.PWMperiod=199;
   657  000A5A  0E00               	movlw	0
   658  000A5C  0101               	movlb	1	; () banked
   659  000A5E  6FDF               	movwf	(main@mL+8)& (0+255),b
   660  000A60  0EC7               	movlw	199
   661  000A62  6FDE               	movwf	(main@mL+7)& (0+255),b
   662                           
   663                           ;main.c: 81: mR.power=0;
   664  000A64  0E00               	movlw	0
   665  000A66  0101               	movlb	1	; () banked
   666  000A68  6FE0               	movwf	main@mR& (0+255),b
   667                           
   668                           ;main.c: 82: mR.direction=1;
   669  000A6A  0E01               	movlw	1
   670  000A6C  0101               	movlb	1	; () banked
   671  000A6E  6FE1               	movwf	(main@mR+1)& (0+255),b
   672                           
   673                           ; BSR set to: 1
   674                           ;main.c: 83: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   675  000A70  0E77               	movlw	119
   676  000A72  0101               	movlb	1	; () banked
   677  000A74  6FE2               	movwf	(main@mR+2)& (0+255),b
   678  000A76  0E0F               	movlw	15
   679  000A78  0101               	movlb	1	; () banked
   680  000A7A  6FE3               	movwf	(main@mR+3)& (0+255),b
   681                           
   682                           ; BSR set to: 1
   683                           ;main.c: 84: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   684  000A7C  0E76               	movlw	118
   685  000A7E  0101               	movlb	1	; () banked
   686  000A80  6FE4               	movwf	(main@mR+4)& (0+255),b
   687  000A82  0E0F               	movlw	15
   688  000A84  0101               	movlb	1	; () banked
   689  000A86  6FE5               	movwf	(main@mR+5)& (0+255),b
   690                           
   691                           ;main.c: 85: mR.dir_pin=2;
   692  000A88  0E02               	movlw	2
   693  000A8A  0101               	movlb	1	; () banked
   694  000A8C  6FE6               	movwf	(main@mR+6)& (0+255),b
   695                           
   696                           ;main.c: 86: mR.PWMperiod=199;
   697  000A8E  0E00               	movlw	0
   698  000A90  0101               	movlb	1	; () banked
   699  000A92  6FE8               	movwf	(main@mR+8)& (0+255),b
   700  000A94  0EC7               	movlw	199
   701  000A96  6FE7               	movwf	(main@mR+7)& (0+255),b
   702                           
   703                           ;main.c: 88: OSCCON = 0x72;
   704  000A98  0E72               	movlw	114
   705  000A9A  6ED3               	movwf	4051,c	;volatile
   706  000A9C                     l73:
   707  000A9C  B4D3               	btfsc	4051,2,c	;volatile
   708  000A9E  D164               	goto	l3005
   709  000AA0  D7FD               	goto	l73
   710  000AA2                     l2903:
   711                           
   712                           ;main.c: 96: initMotorPWM();
   713  000AA2  ECBA  F00B         	call	_initMotorPWM	;wreg free
   714                           
   715                           ;main.c: 97: initRFID();
   716  000AA6  EC37  F00C         	call	_initRFID	;wreg free
   717                           
   718                           ;main.c: 98: initLCD();
   719  000AAA  ECF0  F008         	call	_initLCD	;wreg free
   720                           
   721                           ;main.c: 99: initIR();
   722  000AAE  EC26  F00C         	call	_initIR	;wreg free
   723                           
   724                           ;main.c: 103: fullSpeedAhead(&mL, &mR);
   725  000AB2  0ED7               	movlw	low main@mL
   726  000AB4  6E37               	movwf	fullSpeedAhead@mL,c
   727  000AB6  0E01               	movlw	high main@mL
   728  000AB8  6E38               	movwf	fullSpeedAhead@mL+1,c
   729  000ABA  0EE0               	movlw	low main@mR
   730  000ABC  6E39               	movwf	fullSpeedAhead@mR,c
   731  000ABE  0E01               	movlw	high main@mR
   732  000AC0  6E3A               	movwf	fullSpeedAhead@mR+1,c
   733  000AC2  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
   734                           
   735                           ;main.c: 104: delay_s(1);
   736  000AC6  0E01               	movlw	1
   737  000AC8  EC82  F00B         	call	_delay_s
   738                           
   739                           ;main.c: 105: stop(&mL, &mR);
   740  000ACC  0ED7               	movlw	low main@mL
   741  000ACE  6E37               	movwf	stop@mL,c
   742  000AD0  0E01               	movlw	high main@mL
   743  000AD2  6E38               	movwf	stop@mL+1,c
   744  000AD4  0EE0               	movlw	low main@mR
   745  000AD6  6E39               	movwf	stop@mR,c
   746  000AD8  0E01               	movlw	high main@mR
   747  000ADA  6E3A               	movwf	stop@mR+1,c
   748  000ADC  ECA8  F009         	call	_stop	;wreg free
   749                           
   750                           ;main.c: 106: fullSpeedBack(&mL, &mR);
   751  000AE0  0ED7               	movlw	low main@mL
   752  000AE2  0100               	movlb	0	; () banked
   753  000AE4  6F60               	movwf	fullSpeedBack@mL& (0+255),b
   754  000AE6  0E01               	movlw	high main@mL
   755  000AE8  0100               	movlb	0	; () banked
   756  000AEA  6F61               	movwf	(fullSpeedBack@mL+1)& (0+255),b
   757  000AEC  0EE0               	movlw	low main@mR
   758  000AEE  0100               	movlb	0	; () banked
   759  000AF0  6F62               	movwf	fullSpeedBack@mR& (0+255),b
   760  000AF2  0E01               	movlw	high main@mR
   761  000AF4  0100               	movlb	0	; () banked
   762  000AF6  6F63               	movwf	(fullSpeedBack@mR+1)& (0+255),b
   763  000AF8  EC65  F00B         	call	_fullSpeedBack	;wreg free
   764                           
   765                           ;main.c: 107: delay_s(1);
   766  000AFC  0E01               	movlw	1
   767  000AFE  EC82  F00B         	call	_delay_s
   768                           
   769                           ;main.c: 108: stop(&mL, &mR);
   770  000B02  0ED7               	movlw	low main@mL
   771  000B04  6E37               	movwf	stop@mL,c
   772  000B06  0E01               	movlw	high main@mL
   773  000B08  6E38               	movwf	stop@mL+1,c
   774  000B0A  0EE0               	movlw	low main@mR
   775  000B0C  6E39               	movwf	stop@mR,c
   776  000B0E  0E01               	movlw	high main@mR
   777  000B10  6E3A               	movwf	stop@mR+1,c
   778  000B12  ECA8  F009         	call	_stop	;wreg free
   779                           
   780                           ;main.c: 110: enableSensor(0, 1);
   781  000B16  0E01               	movlw	1
   782  000B18  6E20               	movwf	enableSensor@status,c
   783  000B1A  0E00               	movlw	0
   784  000B1C  EC00  F00C         	call	_enableSensor
   785                           
   786                           ;main.c: 111: enableSensor(1, 1);
   787  000B20  0E01               	movlw	1
   788  000B22  6E20               	movwf	enableSensor@status,c
   789  000B24  0E01               	movlw	1
   790  000B26  EC00  F00C         	call	_enableSensor
   791                           
   792                           ;main.c: 112: mode = 1;
   793  000B2A  0E01               	movlw	1
   794  000B2C  D0D6               	goto	L1
   795  000B2E                     l2927:
   796                           
   797                           ; BSR set to: 1
   798                           ;main.c: 118: if (DirectionFound==-1) {
   799  000B2E  0101               	movlb	1	; () banked
   800  000B30  29D5               	incf	main@DirectionFound& (0+255),w,b
   801  000B32  A4D8               	btfss	status,2,c
   802  000B34  D01A               	goto	l2937
   803                           
   804                           ; BSR set to: 1
   805                           ;main.c: 123: fullSpeedAhead(&mL, &mR);
   806  000B36  0ED7               	movlw	low main@mL
   807  000B38  6E37               	movwf	fullSpeedAhead@mL,c
   808  000B3A  0E01               	movlw	high main@mL
   809  000B3C  6E38               	movwf	fullSpeedAhead@mL+1,c
   810  000B3E  0EE0               	movlw	low main@mR
   811  000B40  6E39               	movwf	fullSpeedAhead@mR,c
   812  000B42  0E01               	movlw	high main@mR
   813  000B44  6E3A               	movwf	fullSpeedAhead@mR+1,c
   814  000B46  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
   815                           
   816                           ;main.c: 124: delay_tenth_s(ScanAngle);
   817  000B4A  0101               	movlb	1	; () banked
   818  000B4C  51D2               	movf	main@ScanAngle& (0+255),w,b
   819  000B4E  EC9E  F00B         	call	_delay_tenth_s
   820                           
   821                           ;main.c: 125: stop(&mL,&mR);
   822  000B52  0ED7               	movlw	low main@mL
   823  000B54  6E37               	movwf	stop@mL,c
   824  000B56  0E01               	movlw	high main@mL
   825  000B58  6E38               	movwf	stop@mL+1,c
   826  000B5A  0EE0               	movlw	low main@mR
   827  000B5C  6E39               	movwf	stop@mR,c
   828  000B5E  0E01               	movlw	high main@mR
   829  000B60  6E3A               	movwf	stop@mR+1,c
   830  000B62  ECA8  F009         	call	_stop	;wreg free
   831                           
   832                           ;main.c: 126: DirectionFound=0;
   833  000B66  0E00               	movlw	0
   834  000B68  D033               	goto	L3
   835  000B6A                     l2937:
   836                           
   837                           ; BSR set to: 1
   838  000B6A  0101               	movlb	1	; () banked
   839  000B6C  51D5               	movf	main@DirectionFound& (0+255),w,b
   840  000B6E  0101               	movlb	1	; () banked
   841  000B70  A4D8               	btfss	status,2,c
   842  000B72  D01C               	goto	l2941
   843                           
   844                           ; BSR set to: 1
   845                           ;main.c: 129: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   846  000B74  0ED7               	movlw	low main@mL
   847  000B76  0100               	movlb	0	; () banked
   848  000B78  6F64               	movwf	ScanWithRange@mL& (0+255),b
   849  000B7A  0E01               	movlw	high main@mL
   850  000B7C  0100               	movlb	0	; () banked
   851  000B7E  6F65               	movwf	(ScanWithRange@mL+1)& (0+255),b
   852  000B80  0EE0               	movlw	low main@mR
   853  000B82  0100               	movlb	0	; () banked
   854  000B84  6F66               	movwf	ScanWithRange@mR& (0+255),b
   855  000B86  0E01               	movlw	high main@mR
   856  000B88  0100               	movlb	0	; () banked
   857  000B8A  6F67               	movwf	(ScanWithRange@mR+1)& (0+255),b
   858  000B8C  C1D2  F068         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   859  000B90  0101               	movlb	1	; () banked
   860  000B92  51D4               	movf	main@Move& (0+255),w,b
   861  000B94  0D01               	mullw	1
   862  000B96  0E64               	movlw	low main@MoveTime
   863  000B98  24F3               	addwf	prodl,w,c
   864  000B9A  0100               	movlb	0	; () banked
   865  000B9C  6F69               	movwf	ScanWithRange@MoveTime& (0+255),b
   866  000B9E  0E01               	movlw	high main@MoveTime
   867  000BA0  20F4               	addwfc	prodh,w,c
   868  000BA2  0100               	movlb	0	; () banked
   869  000BA4  6F6A               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
   870  000BA6  EC84  F001         	call	_ScanWithRange	;wreg free
   871  000BAA  D012               	goto	L3
   872  000BAC                     l2941:
   873                           
   874                           ; BSR set to: 1
   875  000BAC  0101               	movlb	1	; () banked
   876  000BAE  05D5               	decf	main@DirectionFound& (0+255),w,b
   877  000BB0  A4D8               	btfss	status,2,c
   878  000BB2  D011               	goto	l2945
   879                           
   880                           ; BSR set to: 1
   881                           ;main.c: 132: DirectionFound = ScanIR(&mL, &mR);
   882  000BB4  0ED7               	movlw	low main@mL
   883  000BB6  0100               	movlb	0	; () banked
   884  000BB8  6F64               	movwf	ScanIR@mL& (0+255),b
   885  000BBA  0E01               	movlw	high main@mL
   886  000BBC  0100               	movlb	0	; () banked
   887  000BBE  6F65               	movwf	(ScanIR@mL+1)& (0+255),b
   888  000BC0  0EE0               	movlw	low main@mR
   889  000BC2  0100               	movlb	0	; () banked
   890  000BC4  6F66               	movwf	ScanIR@mR& (0+255),b
   891  000BC6  0E01               	movlw	high main@mR
   892  000BC8  0100               	movlb	0	; () banked
   893  000BCA  6F67               	movwf	(ScanIR@mR+1)& (0+255),b
   894  000BCC  ECC3  F006         	call	_ScanIR	;wreg free
   895  000BD0                     L3:
   896  000BD0  0101               	movlb	1	; () banked
   897  000BD2  6FD5               	movwf	main@DirectionFound& (0+255),b
   898                           
   899                           ;main.c: 133: } else if (DirectionFound==2) {
   900  000BD4  D008               	goto	l2949
   901  000BD6                     l2945:
   902                           
   903                           ; BSR set to: 1
   904  000BD6  0E02               	movlw	2
   905  000BD8  0101               	movlb	1	; () banked
   906  000BDA  19D5               	xorwf	main@DirectionFound& (0+255),w,b
   907  000BDC  A4D8               	btfss	status,2,c
   908  000BDE  D003               	goto	l2949
   909                           
   910                           ; BSR set to: 1
   911                           ;main.c: 135: mode=2;
   912  000BE0  0E02               	movlw	2
   913  000BE2  0101               	movlb	1	; () banked
   914  000BE4  6FD3               	movwf	main@mode& (0+255),b
   915  000BE6                     l2949:
   916                           
   917                           ; BSR set to: 1
   918                           ;main.c: 136: }
   919                           ;main.c: 138: MoveType[Move] = 1;
   920  000BE6  0101               	movlb	1	; () banked
   921  000BE8  51D4               	movf	main@Move& (0+255),w,b
   922  000BEA  0D01               	mullw	1
   923  000BEC  0E00               	movlw	low main@MoveType
   924  000BEE  24F3               	addwf	prodl,w,c
   925  000BF0  6ED9               	movwf	fsr2l,c
   926  000BF2  0E01               	movlw	high main@MoveType
   927  000BF4  20F4               	addwfc	prodh,w,c
   928  000BF6  6EDA               	movwf	fsr2h,c
   929  000BF8  0E01               	movlw	1
   930  000BFA  6EDF               	movwf	indf2,c
   931                           
   932                           ; BSR set to: 1
   933                           ;main.c: 139: Move++;
   934  000BFC  0101               	movlb	1	; () banked
   935  000BFE  2BD4               	incf	main@Move& (0+255),f,b
   936                           
   937                           ;main.c: 141: break;
   938  000C00  D0B3               	goto	l3005
   939  000C02                     l2953:
   940                           
   941                           ; BSR set to: 1
   942                           ;main.c: 147: if (RFID_Read) {
   943  000C02  0101               	movlb	1	; () banked
   944  000C04  51E9               	movf	_RFID_Read& (0+255),w,b	;volatile
   945  000C06  B4D8               	btfsc	status,2,c
   946  000C08  D091               	goto	l2995
   947                           
   948                           ; BSR set to: 1
   949                           ;main.c: 148: stop(&mL, &mR);
   950  000C0A  0ED7               	movlw	low main@mL
   951  000C0C  6E37               	movwf	stop@mL,c
   952  000C0E  0E01               	movlw	high main@mL
   953  000C10  6E38               	movwf	stop@mL+1,c
   954  000C12  0EE0               	movlw	low main@mR
   955  000C14  6E39               	movwf	stop@mR,c
   956  000C16  0E01               	movlw	high main@mR
   957  000C18  6E3A               	movwf	stop@mR+1,c
   958  000C1A  ECA8  F009         	call	_stop	;wreg free
   959                           
   960                           ;main.c: 149: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   961  000C1E  0E03               	movlw	3
   962  000C20  0101               	movlb	1	; () banked
   963  000C22  19F9               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   964  000C24  A4D8               	btfss	status,2,c
   965  000C26  D002               	goto	u2260
   966  000C28  0E01               	movlw	1
   967  000C2A  D001               	goto	u2262
   968  000C2C                     u2260:
   969  000C2C  0E00               	movlw	0
   970  000C2E                     u2262:
   971  000C2E  0100               	movlb	0	; () banked
   972  000C30  6F7A               	movwf	??_main& (0+255),b
   973  000C32  0E02               	movlw	2
   974  000C34  0101               	movlb	1	; () banked
   975  000C36  19EA               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   976  000C38  A4D8               	btfss	status,2,c
   977  000C3A  D002               	goto	u2270
   978  000C3C  0E01               	movlw	1
   979  000C3E  D001               	goto	u2272
   980  000C40                     u2270:
   981  000C40  0E00               	movlw	0
   982  000C42                     u2272:
   983  000C42  0100               	movlb	0	; () banked
   984  000C44  157A               	andwf	??_main& (0+255),w,b
   985  000C46  A0E8               	btfss	wreg,0,c
   986  000C48  D08F               	goto	l3005
   987                           
   988                           ; BSR set to: 0
   989                           ;main.c: 150: if (VerifySignal(ReceivedString)){
   990  000C4A  0EEA               	movlw	low _ReceivedString
   991  000C4C  6E20               	movwf	VerifySignal@Signal,c
   992  000C4E  0E01               	movlw	high _ReceivedString
   993  000C50  6E21               	movwf	VerifySignal@Signal+1,c
   994  000C52  EC4E  F009         	call	_VerifySignal	;wreg free
   995  000C56  0900               	iorlw	0
   996  000C58  B4D8               	btfsc	status,2,c
   997  000C5A  D042               	goto	l2987
   998                           
   999                           ;main.c: 152: for (i=0; i<10; i++){
  1000  000C5C  0E00               	movlw	0
  1001  000C5E  0101               	movlb	1	; () banked
  1002  000C60  6FD6               	movwf	main@i& (0+255),b
  1003  000C62                     l2963:
  1004                           
  1005                           ; BSR set to: 1
  1006  000C62  0E09               	movlw	9
  1007  000C64  0101               	movlb	1	; () banked
  1008  000C66  65D6               	cpfsgt	main@i& (0+255),b
  1009  000C68  D001               	goto	l2967
  1010  000C6A  D020               	goto	l2973
  1011  000C6C                     l2967:
  1012                           
  1013                           ; BSR set to: 1
  1014                           ;main.c: 153: Message[i] = ReceivedString[i+1];
  1015  000C6C  0101               	movlb	1	; () banked
  1016  000C6E  51D6               	movf	main@i& (0+255),w,b
  1017  000C70  0100               	movlb	0	; () banked
  1018  000C72  6F7A               	movwf	??_main& (0+255),b
  1019  000C74  6B7B               	clrf	(??_main+1)& (0+255),b
  1020  000C76  0E01               	movlw	1
  1021  000C78  0100               	movlb	0	; () banked
  1022  000C7A  277A               	addwf	??_main& (0+255),f,b
  1023  000C7C  0E00               	movlw	0
  1024  000C7E  237B               	addwfc	(??_main+1)& (0+255),f,b
  1025  000C80  0EEA               	movlw	low _ReceivedString
  1026  000C82  0100               	movlb	0	; () banked
  1027  000C84  257A               	addwf	??_main& (0+255),w,b
  1028  000C86  6ED9               	movwf	fsr2l,c
  1029  000C88  0E01               	movlw	high _ReceivedString
  1030  000C8A  0100               	movlb	0	; () banked
  1031  000C8C  217B               	addwfc	(??_main+1)& (0+255),w,b
  1032  000C8E  6EDA               	movwf	fsr2h,c
  1033  000C90  0101               	movlb	1	; () banked
  1034  000C92  51D6               	movf	main@i& (0+255),w,b
  1035  000C94  0D01               	mullw	1
  1036  000C96  0EC8               	movlw	low main@Message
  1037  000C98  24F3               	addwf	prodl,w,c
  1038  000C9A  6EE1               	movwf	fsr1l,c
  1039  000C9C  0E01               	movlw	high main@Message
  1040  000C9E  20F4               	addwfc	prodh,w,c
  1041  000CA0  6EE2               	movwf	fsr1h,c
  1042  000CA2  CFDF FFE7          	movff	indf2,indf1
  1043                           
  1044                           ; BSR set to: 1
  1045  000CA6  0101               	movlb	1	; () banked
  1046  000CA8  2BD6               	incf	main@i& (0+255),f,b
  1047  000CAA  D7DB               	goto	l2963
  1048  000CAC                     l2973:
  1049                           
  1050                           ; BSR set to: 1
  1051                           ;main.c: 154: }
  1052                           ;main.c: 157: for (i=0; i<16; i++) {
  1053  000CAC  0E00               	movlw	0
  1054  000CAE  0101               	movlb	1	; () banked
  1055  000CB0  6FD6               	movwf	main@i& (0+255),b
  1056  000CB2                     l2975:
  1057                           
  1058                           ; BSR set to: 1
  1059  000CB2  0E0F               	movlw	15
  1060  000CB4  0101               	movlb	1	; () banked
  1061  000CB6  65D6               	cpfsgt	main@i& (0+255),b
  1062  000CB8  D001               	goto	l2979
  1063  000CBA  D00E               	goto	l2985
  1064  000CBC                     l2979:
  1065                           
  1066                           ; BSR set to: 1
  1067                           ;main.c: 158: ReceivedString[i]=0;
  1068  000CBC  0101               	movlb	1	; () banked
  1069  000CBE  51D6               	movf	main@i& (0+255),w,b
  1070  000CC0  0D01               	mullw	1
  1071  000CC2  0EEA               	movlw	low _ReceivedString
  1072  000CC4  24F3               	addwf	prodl,w,c
  1073  000CC6  6ED9               	movwf	fsr2l,c
  1074  000CC8  0E01               	movlw	high _ReceivedString
  1075  000CCA  20F4               	addwfc	prodh,w,c
  1076  000CCC  6EDA               	movwf	fsr2h,c
  1077  000CCE  0E00               	movlw	0
  1078  000CD0  6EDF               	movwf	indf2,c
  1079                           
  1080                           ; BSR set to: 1
  1081  000CD2  0101               	movlb	1	; () banked
  1082  000CD4  2BD6               	incf	main@i& (0+255),f,b
  1083  000CD6  D7ED               	goto	l2975
  1084  000CD8                     l2985:
  1085                           
  1086                           ; BSR set to: 1
  1087                           ;main.c: 159: }
  1088                           ;main.c: 160: mode = 3;
  1089  000CD8  0E03               	movlw	3
  1090  000CDA                     L1:
  1091  000CDA  0101               	movlb	1	; () banked
  1092  000CDC  6FD3               	movwf	main@mode& (0+255),b
  1093                           
  1094                           ;main.c: 162: } else {
  1095  000CDE  D044               	goto	l3005
  1096  000CE0                     l2987:
  1097                           
  1098                           ;main.c: 163: fullSpeedBack(&mL,&mR);
  1099  000CE0  0ED7               	movlw	low main@mL
  1100  000CE2  0100               	movlb	0	; () banked
  1101  000CE4  6F60               	movwf	fullSpeedBack@mL& (0+255),b
  1102  000CE6  0E01               	movlw	high main@mL
  1103  000CE8  0100               	movlb	0	; () banked
  1104  000CEA  6F61               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1105  000CEC  0EE0               	movlw	low main@mR
  1106  000CEE  0100               	movlb	0	; () banked
  1107  000CF0  6F62               	movwf	fullSpeedBack@mR& (0+255),b
  1108  000CF2  0E01               	movlw	high main@mR
  1109  000CF4  0100               	movlb	0	; () banked
  1110  000CF6  6F63               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1111  000CF8  EC65  F00B         	call	_fullSpeedBack	;wreg free
  1112                           
  1113                           ;main.c: 164: delay_tenth_s(5);
  1114  000CFC  0E05               	movlw	5
  1115  000CFE  EC9E  F00B         	call	_delay_tenth_s
  1116                           
  1117                           ;main.c: 165: stop(&mL,&mR);
  1118  000D02  0ED7               	movlw	low main@mL
  1119  000D04  6E37               	movwf	stop@mL,c
  1120  000D06  0E01               	movlw	high main@mL
  1121  000D08  6E38               	movwf	stop@mL+1,c
  1122  000D0A  0EE0               	movlw	low main@mR
  1123  000D0C  6E39               	movwf	stop@mR,c
  1124  000D0E  0E01               	movlw	high main@mR
  1125  000D10  6E3A               	movwf	stop@mR+1,c
  1126  000D12  ECA8  F009         	call	_stop	;wreg free
  1127                           
  1128                           ;main.c: 166: fullSpeedAhead(&mL,&mR);
  1129  000D16  0ED7               	movlw	low main@mL
  1130  000D18  6E37               	movwf	fullSpeedAhead@mL,c
  1131  000D1A  0E01               	movlw	high main@mL
  1132  000D1C  6E38               	movwf	fullSpeedAhead@mL+1,c
  1133  000D1E  0EE0               	movlw	low main@mR
  1134  000D20  6E39               	movwf	fullSpeedAhead@mR,c
  1135  000D22  0E01               	movlw	high main@mR
  1136  000D24  6E3A               	movwf	fullSpeedAhead@mR+1,c
  1137  000D26  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
  1138                           
  1139                           ;main.c: 167: }
  1140                           ;main.c: 168: }
  1141                           ;main.c: 169: } else {
  1142  000D2A  D01E               	goto	l3005
  1143  000D2C                     l2995:
  1144                           
  1145                           ;main.c: 170: DirectionFound=1;
  1146  000D2C  0E01               	movlw	1
  1147  000D2E  0101               	movlb	1	; () banked
  1148  000D30  6FD5               	movwf	main@DirectionFound& (0+255),b
  1149                           
  1150                           ;main.c: 171: mode=1;
  1151  000D32  0E01               	movlw	1
  1152  000D34  0101               	movlb	1	; () banked
  1153  000D36  6FD3               	movwf	main@mode& (0+255),b
  1154                           
  1155                           ; BSR set to: 1
  1156                           ;main.c: 172: fullSpeedAhead(&mL,&mR);
  1157  000D38  0ED7               	movlw	low main@mL
  1158  000D3A  6E37               	movwf	fullSpeedAhead@mL,c
  1159  000D3C  0E01               	movlw	high main@mL
  1160  000D3E  6E38               	movwf	fullSpeedAhead@mL+1,c
  1161  000D40  0EE0               	movlw	low main@mR
  1162  000D42  6E39               	movwf	fullSpeedAhead@mR,c
  1163  000D44  0E01               	movlw	high main@mR
  1164  000D46  6E3A               	movwf	fullSpeedAhead@mR+1,c
  1165  000D48  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
  1166                           
  1167                           ;main.c: 173: delay_tenth_s(5);
  1168  000D4C  0E05               	movlw	5
  1169  000D4E  EC9E  F00B         	call	_delay_tenth_s
  1170                           
  1171                           ;main.c: 174: }
  1172                           ;main.c: 176: break;
  1173  000D52  D00A               	goto	l3005
  1174  000D54                     l3001:
  1175                           
  1176                           ;main.c: 180: stop(&mL,&mR);
  1177  000D54  0ED7               	movlw	low main@mL
  1178  000D56  6E37               	movwf	stop@mL,c
  1179  000D58  0E01               	movlw	high main@mL
  1180  000D5A  6E38               	movwf	stop@mL+1,c
  1181  000D5C  0EE0               	movlw	low main@mR
  1182  000D5E  6E39               	movwf	stop@mR,c
  1183  000D60  0E01               	movlw	high main@mR
  1184  000D62  6E3A               	movwf	stop@mR+1,c
  1185  000D64  ECA8  F009         	call	_stop	;wreg free
  1186  000D68                     l3005:
  1187  000D68  0101               	movlb	1	; () banked
  1188  000D6A  51D3               	movf	main@mode& (0+255),w,b
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 4, Range of values is 0 to 3
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           13     7 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  000D6C  0A00               	xorlw	0	; case 0
  1197  000D6E  B4D8               	btfsc	status,2,c
  1198  000D70  D698               	goto	l2903
  1199  000D72  0A01               	xorlw	1	; case 1
  1200  000D74  B4D8               	btfsc	status,2,c
  1201  000D76  D6DB               	goto	l2927
  1202  000D78  0A03               	xorlw	3	; case 2
  1203  000D7A  B4D8               	btfsc	status,2,c
  1204  000D7C  D742               	goto	l2953
  1205  000D7E  0A01               	xorlw	1	; case 3
  1206  000D80  B4D8               	btfsc	status,2,c
  1207  000D82  D7E8               	goto	l3001
  1208                           
  1209                           ; BSR set to: 1
  1210                           
  1211                           ; BSR set to: 1
  1212  000D84  D7F1               	goto	l3005
  1213  000D86                     __end_of_main:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf1	equ	0xFE7
  1222                           fsr1h	equ	0xFE2
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           fsr2h	equ	0xFDA
  1226                           fsr2l	equ	0xFD9
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _initRFID *****************
  1230 ;; Defined at:
  1231 ;;		line 5 in file "RFID_Reader.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;		None               void
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1245 ;;      Params:         0       0       0       0
  1246 ;;      Locals:         0       0       0       0
  1247 ;;      Temps:          0       0       0       0
  1248 ;;      Totals:         0       0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    2
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text1
  1260  00186E                     __ptext1:
  1261                           	opt stack 0
  1262  00186E                     _initRFID:
  1263                           	opt stack 28
  1264                           
  1265                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1266                           
  1267                           ; BSR set to: 1
  1268                           ;incstack = 0
  1269  00186E  5094               	movf	3988,w,c	;volatile
  1270  001870  09C0               	iorlw	192
  1271  001872  6E94               	movwf	3988,c	;volatile
  1272                           
  1273                           ;RFID_Reader.c: 10: SPBRG=205;
  1274  001874  0ECD               	movlw	205
  1275  001876  6EAF               	movwf	4015,c	;volatile
  1276                           
  1277                           ;RFID_Reader.c: 11: SPBRGH=0;
  1278  001878  0E00               	movlw	0
  1279  00187A  6EB0               	movwf	4016,c	;volatile
  1280                           
  1281                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1282  00187C  86AA               	bsf	4010,3,c	;volatile
  1283                           
  1284                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1285  00187E  84AC               	bsf	4012,2,c	;volatile
  1286                           
  1287                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1288  001880  88AB               	bsf	4011,4,c	;volatile
  1289                           
  1290                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1291  001882  8EAB               	bsf	4011,7,c	;volatile
  1292                           
  1293                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1294  001884  98AC               	bcf	4012,4,c	;volatile
  1295                           
  1296                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1297  001886  9CAB               	bcf	4011,6,c	;volatile
  1298  001888  0012               	return		;funcret
  1299  00188A                     __end_of_initRFID:
  1300                           	opt stack 0
  1301                           tblptru	equ	0xFF8
  1302                           prodh	equ	0xFF4
  1303                           prodl	equ	0xFF3
  1304                           intcon	equ	0xFF2
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           indf1	equ	0xFE7
  1308                           fsr1h	equ	0xFE2
  1309                           fsr1l	equ	0xFE1
  1310                           indf2	equ	0xFDF
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _initMotorPWM *****************
  1316 ;; Defined at:
  1317 ;;		line 4 in file "dc_motor.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;		None               void
  1324 ;; Registers used:
  1325 ;;		wreg, status,2
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1331 ;;      Params:         0       0       0       0
  1332 ;;      Locals:         0       0       0       0
  1333 ;;      Temps:          0       0       0       0
  1334 ;;      Totals:         0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    2
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text2
  1346  001774                     __ptext2:
  1347                           	opt stack 0
  1348  001774                     _initMotorPWM:
  1349                           	opt stack 28
  1350                           
  1351                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1352                           
  1353                           ;incstack = 0
  1354  001774  0E00               	movlw	0
  1355  001776  6E7F               	movwf	3967,c	;volatile
  1356                           
  1357                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1358  001778  0E80               	movlw	128
  1359  00177A  6E7E               	movwf	3966,c	;volatile
  1360                           
  1361                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1362  00177C  0E6F               	movlw	111
  1363  00177E  6E6F               	movwf	3951,c	;volatile
  1364                           
  1365                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1366  001780  0E00               	movlw	0
  1367  001782  6E6E               	movwf	3950,c	;volatile
  1368                           
  1369                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1370  001784  0EC7               	movlw	199
  1371  001786  6E7B               	movwf	3963,c	;volatile
  1372                           
  1373                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1374  001788  0E00               	movlw	0
  1375  00178A  6E7A               	movwf	3962,c	;volatile
  1376                           
  1377                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1378  00178C  0E00               	movlw	0
  1379  00178E  6E79               	movwf	3961,c	;volatile
  1380                           
  1381                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1382  001790  0E00               	movlw	0
  1383  001792  6E78               	movwf	3960,c	;volatile
  1384                           
  1385                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1386  001794  0E00               	movlw	0
  1387  001796  6E77               	movwf	3959,c	;volatile
  1388                           
  1389                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1390  001798  0E00               	movlw	0
  1391  00179A  6E76               	movwf	3958,c	;volatile
  1392                           
  1393                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1394  00179C  9093               	bcf	3987,0,c	;volatile
  1395                           
  1396                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1397  00179E  9293               	bcf	3987,1,c	;volatile
  1398                           
  1399                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1400  0017A0  9493               	bcf	3987,2,c	;volatile
  1401                           
  1402                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1403  0017A2  9693               	bcf	3987,3,c	;volatile
  1404  0017A4  0012               	return		;funcret
  1405  0017A6                     __end_of_initMotorPWM:
  1406                           	opt stack 0
  1407                           tblptru	equ	0xFF8
  1408                           prodh	equ	0xFF4
  1409                           prodl	equ	0xFF3
  1410                           intcon	equ	0xFF2
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           indf1	equ	0xFE7
  1414                           fsr1h	equ	0xFE2
  1415                           fsr1l	equ	0xFE1
  1416                           indf2	equ	0xFDF
  1417                           fsr2h	equ	0xFDA
  1418                           fsr2l	equ	0xFD9
  1419                           status	equ	0xFD8
  1420                           
  1421 ;; *************** function _initLCD *****************
  1422 ;; Defined at:
  1423 ;;		line 38 in file "LCD.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  2   32[None  ] int 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1437 ;;      Params:         0       0       0       0
  1438 ;;      Locals:         0       0       0       0
  1439 ;;      Temps:          1       0       0       0
  1440 ;;      Totals:         1       0       0       0
  1441 ;;Total ram usage:        1 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    5
  1444 ;; This function calls:
  1445 ;;		_LCDout
  1446 ;;		_SendLCD
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text3
  1453  0011E0                     __ptext3:
  1454                           	opt stack 0
  1455  0011E0                     _initLCD:
  1456                           	opt stack 25
  1457                           
  1458                           ;LCD.c: 44: TRISAbits.RA6=0;
  1459                           
  1460                           ;incstack = 0
  1461  0011E0  9C92               	bcf	3986,6,c	;volatile
  1462                           
  1463                           ;LCD.c: 45: TRISCbits.RC0=0;
  1464  0011E2  9094               	bcf	3988,0,c	;volatile
  1465                           
  1466                           ;LCD.c: 46: TRISCbits.RC1=0;
  1467  0011E4  9294               	bcf	3988,1,c	;volatile
  1468                           
  1469                           ;LCD.c: 47: TRISCbits.RC2=0;
  1470  0011E6  9494               	bcf	3988,2,c	;volatile
  1471                           
  1472                           ;LCD.c: 48: TRISDbits.RD0=0;
  1473  0011E8  9095               	bcf	3989,0,c	;volatile
  1474                           
  1475                           ;LCD.c: 49: TRISDbits.RD1=0;
  1476  0011EA  9295               	bcf	3989,1,c	;volatile
  1477                           
  1478                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1479  0011EC  0E27               	movlw	39
  1480  0011EE  6E26               	movwf	??_initLCD& (0+255),c
  1481  0011F0  0EF5               	movlw	245
  1482  0011F2                     u2347:
  1483  0011F2  2EE8               	decfsz	wreg,f,c
  1484  0011F4  D7FE               	goto	u2347
  1485  0011F6  2E26               	decfsz	??_initLCD& (0+255),f,c
  1486  0011F8  D7FC               	goto	u2347
  1487  0011FA  F000               	nop	
  1488                           
  1489                           ;LCD.c: 52: LCDout(0b0011);
  1490  0011FC  0E03               	movlw	3
  1491  0011FE  EC8D  F008         	call	_LCDout
  1492                           
  1493                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1494  001202  0E0D               	movlw	13
  1495  001204  6E26               	movwf	??_initLCD& (0+255),c
  1496  001206  0EFC               	movlw	252
  1497  001208                     u2357:
  1498  001208  2EE8               	decfsz	wreg,f,c
  1499  00120A  D7FE               	goto	u2357
  1500  00120C  2E26               	decfsz	??_initLCD& (0+255),f,c
  1501  00120E  D7FC               	goto	u2357
  1502                           
  1503                           ;LCD.c: 54: LCDout(0b0011);
  1504  001210  0E03               	movlw	3
  1505  001212  EC8D  F008         	call	_LCDout
  1506                           
  1507                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1508  001216  0E85               	movlw	133
  1509  001218                     u2367:
  1510  001218  2EE8               	decfsz	wreg,f,c
  1511  00121A  D7FE               	goto	u2367
  1512  00121C  F000               	nop	
  1513                           
  1514                           ;LCD.c: 56: LCDout(0b0011);
  1515  00121E  0E03               	movlw	3
  1516  001220  EC8D  F008         	call	_LCDout
  1517                           
  1518                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1519  001224  0E21               	movlw	33
  1520  001226                     u2377:
  1521  001226  2EE8               	decfsz	wreg,f,c
  1522  001228  D7FE               	goto	u2377
  1523  00122A  F000               	nop	
  1524                           
  1525                           ;LCD.c: 58: LCDout(0b0010);
  1526  00122C  0E02               	movlw	2
  1527  00122E  EC8D  F008         	call	_LCDout
  1528                           
  1529                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1530  001232  0E21               	movlw	33
  1531  001234                     u2387:
  1532  001234  2EE8               	decfsz	wreg,f,c
  1533  001236  D7FE               	goto	u2387
  1534  001238  F000               	nop	
  1535                           
  1536                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1537  00123A  0E00               	movlw	0
  1538  00123C  6E24               	movwf	SendLCD@type,c
  1539  00123E  0E28               	movlw	40
  1540  001240  ECD3  F00B         	call	_SendLCD
  1541                           
  1542                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1543  001244  0E21               	movlw	33
  1544  001246                     u2397:
  1545  001246  2EE8               	decfsz	wreg,f,c
  1546  001248  D7FE               	goto	u2397
  1547  00124A  F000               	nop	
  1548                           
  1549                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1550  00124C  0E00               	movlw	0
  1551  00124E  6E24               	movwf	SendLCD@type,c
  1552  001250  0E08               	movlw	8
  1553  001252  ECD3  F00B         	call	_SendLCD
  1554                           
  1555                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1556  001256  0E21               	movlw	33
  1557  001258                     u2407:
  1558  001258  2EE8               	decfsz	wreg,f,c
  1559  00125A  D7FE               	goto	u2407
  1560  00125C  F000               	nop	
  1561                           
  1562                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1563  00125E  0E00               	movlw	0
  1564  001260  6E24               	movwf	SendLCD@type,c
  1565  001262  0E01               	movlw	1
  1566  001264  ECD3  F00B         	call	_SendLCD
  1567                           
  1568                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1569  001268  0E0D               	movlw	13
  1570  00126A  6E26               	movwf	??_initLCD& (0+255),c
  1571  00126C  0EFC               	movlw	252
  1572  00126E                     u2417:
  1573  00126E  2EE8               	decfsz	wreg,f,c
  1574  001270  D7FE               	goto	u2417
  1575  001272  2E26               	decfsz	??_initLCD& (0+255),f,c
  1576  001274  D7FC               	goto	u2417
  1577                           
  1578                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1579  001276  0E00               	movlw	0
  1580  001278  6E24               	movwf	SendLCD@type,c
  1581  00127A  0E06               	movlw	6
  1582  00127C  ECD3  F00B         	call	_SendLCD
  1583                           
  1584                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1585  001280  0E21               	movlw	33
  1586  001282                     u2427:
  1587  001282  2EE8               	decfsz	wreg,f,c
  1588  001284  D7FE               	goto	u2427
  1589  001286  F000               	nop	
  1590                           
  1591                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1592  001288  0E00               	movlw	0
  1593  00128A  6E24               	movwf	SendLCD@type,c
  1594  00128C  0E0C               	movlw	12
  1595  00128E  ECD3  F00B         	call	_SendLCD
  1596                           
  1597                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1598  001292  0E21               	movlw	33
  1599  001294                     u2437:
  1600  001294  2EE8               	decfsz	wreg,f,c
  1601  001296  D7FE               	goto	u2437
  1602  001298  F000               	nop	
  1603  00129A  0012               	return		;funcret
  1604  00129C                     __end_of_initLCD:
  1605                           	opt stack 0
  1606                           tblptru	equ	0xFF8
  1607                           prodh	equ	0xFF4
  1608                           prodl	equ	0xFF3
  1609                           intcon	equ	0xFF2
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           indf1	equ	0xFE7
  1613                           fsr1h	equ	0xFE2
  1614                           fsr1l	equ	0xFE1
  1615                           indf2	equ	0xFDF
  1616                           fsr2h	equ	0xFDA
  1617                           fsr2l	equ	0xFD9
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _SendLCD *****************
  1621 ;; Defined at:
  1622 ;;		line 27 in file "LCD.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  Byte            1    wreg     unsigned char 
  1625 ;;  type            1   35[COMRAM] unsigned char 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  Byte            1   36[COMRAM] unsigned char 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;		None               void
  1630 ;; Registers used:
  1631 ;;		wreg, status,2, status,0, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1637 ;;      Params:         1       0       0       0
  1638 ;;      Locals:         1       0       0       0
  1639 ;;      Temps:          0       0       0       0
  1640 ;;      Totals:         2       0       0       0
  1641 ;;Total ram usage:        2 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    4
  1644 ;; This function calls:
  1645 ;;		_LCDout
  1646 ;; This function is called by:
  1647 ;;		_initLCD
  1648 ;;		_SetLine
  1649 ;;		_LCD_String
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text4
  1654  0017A6                     __ptext4:
  1655                           	opt stack 0
  1656  0017A6                     _SendLCD:
  1657                           	opt stack 25
  1658                           
  1659                           ;incstack = 0
  1660                           ;SendLCD@Byte stored from wreg
  1661  0017A6  6E25               	movwf	SendLCD@Byte,c
  1662                           
  1663                           ;LCD.c: 30: LATAbits.LATA6=type;
  1664  0017A8  B024               	btfsc	SendLCD@type,0,c
  1665  0017AA  D002               	bra	u1235
  1666  0017AC  9C89               	bcf	3977,6,c	;volatile
  1667  0017AE  D001               	bra	u1236
  1668  0017B0                     u1235:
  1669  0017B0  8C89               	bsf	3977,6,c	;volatile
  1670  0017B2                     u1236:
  1671                           
  1672                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1673  0017B2  3825               	swapf	SendLCD@Byte,w,c
  1674  0017B4  0B0F               	andlw	15
  1675  0017B6  0B0F               	andlw	15
  1676  0017B8  EC8D  F008         	call	_LCDout
  1677                           
  1678                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1679  0017BC  0E06               	movlw	6
  1680  0017BE                     u2447:
  1681  0017BE  2EE8               	decfsz	wreg,f,c
  1682  0017C0  D7FE               	goto	u2447
  1683  0017C2  D000               	nop2		;nop
  1684                           
  1685                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1686  0017C4  5025               	movf	SendLCD@Byte,w,c
  1687  0017C6  0B0F               	andlw	15
  1688  0017C8  EC8D  F008         	call	_LCDout
  1689                           
  1690                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1691  0017CC  0E21               	movlw	33
  1692  0017CE                     u2457:
  1693  0017CE  2EE8               	decfsz	wreg,f,c
  1694  0017D0  D7FE               	goto	u2457
  1695  0017D2  F000               	nop	
  1696  0017D4  0012               	return		;funcret
  1697  0017D6                     __end_of_SendLCD:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           indf1	equ	0xFE7
  1706                           fsr1h	equ	0xFE2
  1707                           fsr1l	equ	0xFE1
  1708                           indf2	equ	0xFDF
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _LCDout *****************
  1714 ;; Defined at:
  1715 ;;		line 14 in file "LCD.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  number          1    wreg     unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  number          1   34[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;		None               void
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1729 ;;      Params:         0       0       0       0
  1730 ;;      Locals:         1       0       0       0
  1731 ;;      Temps:          3       0       0       0
  1732 ;;      Totals:         4       0       0       0
  1733 ;;Total ram usage:        4 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    3
  1736 ;; This function calls:
  1737 ;;		_E_TOG
  1738 ;; This function is called by:
  1739 ;;		_SendLCD
  1740 ;;		_initLCD
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text5
  1745  00111A                     __ptext5:
  1746                           	opt stack 0
  1747  00111A                     _LCDout:
  1748                           	opt stack 25
  1749                           
  1750                           ;incstack = 0
  1751                           ;LCDout@number stored from wreg
  1752  00111A  6E23               	movwf	LCDout@number,c
  1753                           
  1754                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1755  00111C  5023               	movf	LCDout@number,w,c
  1756  00111E  6E20               	movwf	??_LCDout& (0+255),c
  1757  001120  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1758  001122  0E07               	movlw	7
  1759  001124                     u1155:
  1760  001124  90D8               	bcf	status,0,c
  1761  001126  3620               	rlcf	??_LCDout,f,c
  1762  001128  3621               	rlcf	??_LCDout+1,f,c
  1763  00112A  2EE8               	decfsz	wreg,f,c
  1764  00112C  D7FB               	goto	u1155
  1765  00112E  0E07               	movlw	7
  1766  001130  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1767  001132                     u1165:
  1768  001132  3421               	rlcf	??_LCDout+1,w,c
  1769  001134  3221               	rrcf	??_LCDout+1,f,c
  1770  001136  3220               	rrcf	??_LCDout,f,c
  1771  001138  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1772  00113A  D7FB               	goto	u1165
  1773  00113C  4620               	rlncf	??_LCDout,f,c
  1774  00113E  508B               	movf	3979,w,c	;volatile
  1775  001140  1820               	xorwf	??_LCDout,w,c
  1776  001142  0BFD               	andlw	-3
  1777  001144  1820               	xorwf	??_LCDout,w,c
  1778  001146  6E8B               	movwf	3979,c	;volatile
  1779                           
  1780                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1781  001148  5023               	movf	LCDout@number,w,c
  1782  00114A  6E20               	movwf	??_LCDout& (0+255),c
  1783  00114C  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1784  00114E  0E06               	movlw	6
  1785  001150                     u1175:
  1786  001150  90D8               	bcf	status,0,c
  1787  001152  3620               	rlcf	??_LCDout,f,c
  1788  001154  3621               	rlcf	??_LCDout+1,f,c
  1789  001156  2EE8               	decfsz	wreg,f,c
  1790  001158  D7FB               	goto	u1175
  1791  00115A  0E07               	movlw	7
  1792  00115C  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1793  00115E                     u1185:
  1794  00115E  3421               	rlcf	??_LCDout+1,w,c
  1795  001160  3221               	rrcf	??_LCDout+1,f,c
  1796  001162  3220               	rrcf	??_LCDout,f,c
  1797  001164  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1798  001166  D7FB               	goto	u1185
  1799  001168  4620               	rlncf	??_LCDout,f,c
  1800  00116A  4620               	rlncf	??_LCDout,f,c
  1801  00116C  508B               	movf	3979,w,c	;volatile
  1802  00116E  1820               	xorwf	??_LCDout,w,c
  1803  001170  0BFB               	andlw	-5
  1804  001172  1820               	xorwf	??_LCDout,w,c
  1805  001174  6E8B               	movwf	3979,c	;volatile
  1806                           
  1807                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1808  001176  5023               	movf	LCDout@number,w,c
  1809  001178  6E20               	movwf	??_LCDout& (0+255),c
  1810  00117A  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1811  00117C  0E05               	movlw	5
  1812  00117E                     u1195:
  1813  00117E  90D8               	bcf	status,0,c
  1814  001180  3620               	rlcf	??_LCDout,f,c
  1815  001182  3621               	rlcf	??_LCDout+1,f,c
  1816  001184  2EE8               	decfsz	wreg,f,c
  1817  001186  D7FB               	goto	u1195
  1818  001188  0E07               	movlw	7
  1819  00118A  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1820  00118C                     u1205:
  1821  00118C  3421               	rlcf	??_LCDout+1,w,c
  1822  00118E  3221               	rrcf	??_LCDout+1,f,c
  1823  001190  3220               	rrcf	??_LCDout,f,c
  1824  001192  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1825  001194  D7FB               	goto	u1205
  1826  001196  508C               	movf	3980,w,c	;volatile
  1827  001198  1820               	xorwf	??_LCDout,w,c
  1828  00119A  0BFE               	andlw	-2
  1829  00119C  1820               	xorwf	??_LCDout,w,c
  1830  00119E  6E8C               	movwf	3980,c	;volatile
  1831                           
  1832                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1833  0011A0  5023               	movf	LCDout@number,w,c
  1834  0011A2  6E20               	movwf	??_LCDout& (0+255),c
  1835  0011A4  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1836  0011A6  3A20               	swapf	??_LCDout,f,c
  1837  0011A8  3A21               	swapf	??_LCDout+1,f,c
  1838  0011AA  0EF0               	movlw	240
  1839  0011AC  1621               	andwf	??_LCDout+1,f,c
  1840  0011AE  5020               	movf	??_LCDout,w,c
  1841  0011B0  0B0F               	andlw	15
  1842  0011B2  1221               	iorwf	??_LCDout+1,f,c
  1843  0011B4  0EF0               	movlw	240
  1844  0011B6  1620               	andwf	??_LCDout,f,c
  1845  0011B8  0E07               	movlw	7
  1846  0011BA  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1847  0011BC                     u1215:
  1848  0011BC  3421               	rlcf	??_LCDout+1,w,c
  1849  0011BE  3221               	rrcf	??_LCDout+1,f,c
  1850  0011C0  3220               	rrcf	??_LCDout,f,c
  1851  0011C2  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1852  0011C4  D7FB               	goto	u1215
  1853  0011C6  4620               	rlncf	??_LCDout,f,c
  1854  0011C8  508C               	movf	3980,w,c	;volatile
  1855  0011CA  1820               	xorwf	??_LCDout,w,c
  1856  0011CC  0BFD               	andlw	-3
  1857  0011CE  1820               	xorwf	??_LCDout,w,c
  1858  0011D0  6E8C               	movwf	3980,c	;volatile
  1859                           
  1860                           ;LCD.c: 21: E_TOG();
  1861  0011D2  EC45  F00C         	call	_E_TOG	;wreg free
  1862                           
  1863                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1864  0011D6  0E03               	movlw	3
  1865  0011D8                     u2467:
  1866  0011D8  2EE8               	decfsz	wreg,f,c
  1867  0011DA  D7FE               	goto	u2467
  1868  0011DC  F000               	nop	
  1869  0011DE  0012               	return		;funcret
  1870  0011E0                     __end_of_LCDout:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon	equ	0xFF2
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           indf1	equ	0xFE7
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           indf2	equ	0xFDF
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _E_TOG *****************
  1887 ;; Defined at:
  1888 ;;		line 5 in file "LCD.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1902 ;;      Params:         0       0       0       0
  1903 ;;      Locals:         0       0       0       0
  1904 ;;      Temps:          0       0       0       0
  1905 ;;      Totals:         0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    2
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_LCDout
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text6
  1917  00188A                     __ptext6:
  1918                           	opt stack 0
  1919  00188A                     _E_TOG:
  1920                           	opt stack 25
  1921                           
  1922                           ;LCD.c: 8: LATCbits.LATC0=1;
  1923                           
  1924                           ;incstack = 0
  1925  00188A  808B               	bsf	3979,0,c	;volatile
  1926                           
  1927                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1928  00188C  0E03               	movlw	3
  1929  00188E                     u2477:
  1930  00188E  2EE8               	decfsz	wreg,f,c
  1931  001890  D7FE               	goto	u2477
  1932  001892  F000               	nop	
  1933                           
  1934                           ;LCD.c: 10: LATCbits.LATC0=0;
  1935  001894  908B               	bcf	3979,0,c	;volatile
  1936  001896  0012               	return		;funcret
  1937  001898                     __end_of_E_TOG:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           prodh	equ	0xFF4
  1941                           prodl	equ	0xFF3
  1942                           intcon	equ	0xFF2
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           indf1	equ	0xFE7
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _initIR *****************
  1954 ;; Defined at:
  1955 ;;		line 30 in file "IR_Reading.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		wreg, status,2
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1969 ;;      Params:         0       0       0       0
  1970 ;;      Locals:         0       0       0       0
  1971 ;;      Temps:          0       0       0       0
  1972 ;;      Totals:         0       0       0       0
  1973 ;;Total ram usage:        0 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    2
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text7
  1984  00184C                     __ptext7:
  1985                           	opt stack 0
  1986  00184C                     _initIR:
  1987                           	opt stack 28
  1988                           
  1989                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  1990                           
  1991                           ;incstack = 0
  1992  00184C  9489               	bcf	3977,2,c	;volatile
  1993                           
  1994                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  1995  00184E  9689               	bcf	3977,3,c	;volatile
  1996                           
  1997                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  1998  001850  8492               	bsf	3986,2,c	;volatile
  1999                           
  2000                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2001  001852  8692               	bsf	3986,3,c	;volatile
  2002                           
  2003                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2004  001854  94B8               	bcf	4024,2,c	;volatile
  2005                           
  2006                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2007  001856  96B8               	bcf	4024,3,c	;volatile
  2008                           
  2009                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2010  001858  9CB8               	bcf	4024,6,c	;volatile
  2011                           
  2012                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2013  00185A  9EB8               	bcf	4024,7,c	;volatile
  2014                           
  2015                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2016  00185C  0E06               	movlw	6
  2017  00185E  6E63               	movwf	3939,c	;volatile
  2018                           
  2019                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2020  001860  0E06               	movlw	6
  2021  001862  6E62               	movwf	3938,c	;volatile
  2022                           
  2023                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2024  001864  9096               	bcf	3990,0,c	;volatile
  2025                           
  2026                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2027  001866  9296               	bcf	3990,1,c	;volatile
  2028                           
  2029                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2030  001868  0E59               	movlw	89
  2031  00186A  6EB7               	movwf	4023,c	;volatile
  2032  00186C  0012               	return		;funcret
  2033  00186E                     __end_of_initIR:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           prodh	equ	0xFF4
  2037                           prodl	equ	0xFF3
  2038                           intcon	equ	0xFF2
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           indf1	equ	0xFE7
  2042                           fsr1h	equ	0xFE2
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _fullSpeedBack *****************
  2050 ;; Defined at:
  2051 ;;		line 125 in file "dc_motor.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2054 ;;		 -> main@mL(9), 
  2055 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2056 ;;		 -> main@mR(9), 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;		None               void
  2061 ;; Registers used:
  2062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2068 ;;      Params:         0       4       0       0
  2069 ;;      Locals:         0       0       0       0
  2070 ;;      Temps:          0       0       0       0
  2071 ;;      Totals:         0       4       0       0
  2072 ;;Total ram usage:        4 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    5
  2075 ;; This function calls:
  2076 ;;		_fullSpeedAhead
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text8
  2083  0016CA                     __ptext8:
  2084                           	opt stack 0
  2085  0016CA                     _fullSpeedBack:
  2086                           	opt stack 25
  2087                           
  2088                           ;dc_motor.c: 128: mL->direction=0;
  2089                           
  2090                           ;incstack = 0
  2091  0016CA  0100               	movlb	0	; () banked
  2092  0016CC  EE20 F001          	lfsr	2,1
  2093  0016D0  5160               	movf	fullSpeedBack@mL& (0+255),w,b
  2094  0016D2  26D9               	addwf	fsr2l,f,c
  2095  0016D4  5161               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2096  0016D6  22DA               	addwfc	fsr2h,f,c
  2097  0016D8  0E00               	movlw	0
  2098  0016DA  6EDF               	movwf	indf2,c
  2099                           
  2100                           ;dc_motor.c: 129: mR->direction=0;
  2101  0016DC  0100               	movlb	0	; () banked
  2102  0016DE  EE20 F001          	lfsr	2,1
  2103  0016E2  5162               	movf	fullSpeedBack@mR& (0+255),w,b
  2104  0016E4  26D9               	addwf	fsr2l,f,c
  2105  0016E6  5163               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2106  0016E8  22DA               	addwfc	fsr2h,f,c
  2107  0016EA  0E00               	movlw	0
  2108  0016EC  6EDF               	movwf	indf2,c
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2112  0016EE  C060  F037         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2113  0016F2  C061  F038         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2114  0016F6  C062  F039         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2115  0016FA  C063  F03A         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2116  0016FE  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
  2117  001702  0012               	return		;funcret
  2118  001704                     __end_of_fullSpeedBack:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _enableSensor *****************
  2135 ;; Defined at:
  2136 ;;		line 106 in file "IR_Reading.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  sensor          1    wreg     unsigned char 
  2139 ;;  status          1   31[COMRAM] unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  sensor          1   32[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2151 ;;      Params:         1       0       0       0
  2152 ;;      Locals:         1       0       0       0
  2153 ;;      Temps:          0       0       0       0
  2154 ;;      Totals:         2       0       0       0
  2155 ;;Total ram usage:        2 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    2
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text9
  2166  001800                     __ptext9:
  2167                           	opt stack 0
  2168  001800                     _enableSensor:
  2169                           	opt stack 28
  2170                           
  2171                           ;incstack = 0
  2172                           ;enableSensor@sensor stored from wreg
  2173  001800  6E21               	movwf	enableSensor@sensor,c
  2174                           
  2175                           ;IR_Reading.c: 108: if (sensor==0){
  2176  001802  5021               	movf	enableSensor@sensor,w,c
  2177  001804  A4D8               	btfss	status,2,c
  2178  001806  D006               	goto	l2043
  2179                           
  2180                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2181  001808  B020               	btfsc	enableSensor@status,0,c
  2182  00180A  D002               	bra	u1325
  2183  00180C  908D               	bcf	3981,0,c	;volatile
  2184  00180E  D001               	bra	u1326
  2185  001810                     u1325:
  2186  001810  808D               	bsf	3981,0,c	;volatile
  2187  001812                     u1326:
  2188                           
  2189                           ;IR_Reading.c: 110: } else if (sensor==1){
  2190  001812  0012               	return	
  2191  001814                     l2043:
  2192  001814  0421               	decf	enableSensor@sensor,w,c
  2193  001816  A4D8               	btfss	status,2,c
  2194  001818  0012               	return	
  2195                           
  2196                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2197  00181A  B020               	btfsc	enableSensor@status,0,c
  2198  00181C  D002               	bra	u1345
  2199  00181E  928D               	bcf	3981,1,c	;volatile
  2200  001820  D001               	bra	u1346
  2201  001822                     u1345:
  2202  001822  828D               	bsf	3981,1,c	;volatile
  2203  001824                     u1346:
  2204  001824  0012               	return	
  2205  001826                     __end_of_enableSensor:
  2206                           	opt stack 0
  2207                           tblptru	equ	0xFF8
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           indf1	equ	0xFE7
  2214                           fsr1h	equ	0xFE2
  2215                           fsr1l	equ	0xFE1
  2216                           indf2	equ	0xFDF
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _delay_s *****************
  2222 ;; Defined at:
  2223 ;;		line 19 in file "Movement.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  seconds         1    wreg     unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  seconds         1   32[COMRAM] unsigned char 
  2228 ;;  i               2   33[COMRAM] unsigned int 
  2229 ;; Return value:  Size  Location     Type
  2230 ;;		None               void
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2238 ;;      Params:         0       0       0       0
  2239 ;;      Locals:         3       0       0       0
  2240 ;;      Temps:          1       0       0       0
  2241 ;;      Totals:         4       0       0       0
  2242 ;;Total ram usage:        4 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    2
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text10
  2253  001704                     __ptext10:
  2254                           	opt stack 0
  2255  001704                     _delay_s:
  2256                           	opt stack 28
  2257                           
  2258                           ;incstack = 0
  2259                           ;delay_s@seconds stored from wreg
  2260  001704  6E21               	movwf	delay_s@seconds,c
  2261                           
  2262                           ;Movement.c: 20: unsigned int i=0;
  2263  001706  0E00               	movlw	0
  2264  001708  6E23               	movwf	delay_s@i+1,c
  2265  00170A  0E00               	movlw	0
  2266  00170C  6E22               	movwf	delay_s@i,c
  2267                           
  2268                           ;Movement.c: 21: for (i=1; i<=seconds*20; i++) {
  2269  00170E  0E00               	movlw	0
  2270  001710  6E23               	movwf	delay_s@i+1,c
  2271  001712  0E01               	movlw	1
  2272  001714  6E22               	movwf	delay_s@i,c
  2273  001716  D009               	goto	l2033
  2274  001718                     l2029:
  2275                           
  2276                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2277  001718  0E82               	movlw	130
  2278  00171A  6E20               	movwf	??_delay_s& (0+255),c
  2279  00171C  0EDE               	movlw	222
  2280  00171E                     u2487:
  2281  00171E  2EE8               	decfsz	wreg,f,c
  2282  001720  D7FE               	goto	u2487
  2283  001722  2E20               	decfsz	??_delay_s& (0+255),f,c
  2284  001724  D7FC               	goto	u2487
  2285  001726  4A22               	infsnz	delay_s@i,f,c
  2286  001728  2A23               	incf	delay_s@i+1,f,c
  2287  00172A                     l2033:
  2288  00172A  5021               	movf	delay_s@seconds,w,c
  2289  00172C  0D14               	mullw	20
  2290  00172E  5022               	movf	delay_s@i,w,c
  2291  001730  5CF3               	subwf	prodl,w,c
  2292  001732  5023               	movf	delay_s@i+1,w,c
  2293  001734  58F4               	subwfb	prodh,w,c
  2294  001736  A0D8               	btfss	status,0,c
  2295  001738  0012               	return	
  2296  00173A  D7EE               	goto	l2029
  2297  00173C                     __end_of_delay_s:
  2298                           	opt stack 0
  2299                           tblptru	equ	0xFF8
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           intcon	equ	0xFF2
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           indf1	equ	0xFE7
  2306                           fsr1h	equ	0xFE2
  2307                           fsr1l	equ	0xFE1
  2308                           indf2	equ	0xFDF
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _VerifySignal *****************
  2314 ;; Defined at:
  2315 ;;		line 55 in file "RFID_Reader.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  Signal          2   31[COMRAM] PTR unsigned char 
  2318 ;;		 -> ReceivedString(16), 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  hexByte         2   40[COMRAM] unsigned int 
  2321 ;;  i               1   42[COMRAM] unsigned char 
  2322 ;;  checksum        1   39[COMRAM] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      unsigned char 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2332 ;;      Params:         2       0       0       0
  2333 ;;      Locals:         4       0       0       0
  2334 ;;      Temps:          6       0       0       0
  2335 ;;      Totals:        12       0       0       0
  2336 ;;Total ram usage:       12 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    2
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text11
  2347  00129C                     __ptext11:
  2348                           	opt stack 0
  2349  00129C                     _VerifySignal:
  2350                           	opt stack 28
  2351                           
  2352                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2353                           
  2354                           ;incstack = 0
  2355  00129C  0E00               	movlw	0
  2356  00129E  6E28               	movwf	VerifySignal@checksum,c
  2357                           
  2358                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2359  0012A0  0E00               	movlw	0
  2360  0012A2  6E2A               	movwf	VerifySignal@hexByte+1,c
  2361  0012A4  0E00               	movlw	0
  2362  0012A6  6E29               	movwf	VerifySignal@hexByte,c
  2363                           
  2364                           ;RFID_Reader.c: 58: unsigned char i=0;
  2365  0012A8  0E00               	movlw	0
  2366  0012AA  6E2B               	movwf	VerifySignal@i,c
  2367                           
  2368                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2369  0012AC  EE20 F004          	lfsr	2,4
  2370  0012B0  5020               	movf	VerifySignal@Signal,w,c
  2371  0012B2  26D9               	addwf	fsr2l,f,c
  2372  0012B4  5021               	movf	VerifySignal@Signal+1,w,c
  2373  0012B6  22DA               	addwfc	fsr2h,f,c
  2374  0012B8  50DF               	movf	indf2,w,c
  2375  0012BA  6E22               	movwf	??_VerifySignal& (0+255),c
  2376  0012BC  EE20 F003          	lfsr	2,3
  2377  0012C0  5020               	movf	VerifySignal@Signal,w,c
  2378  0012C2  26D9               	addwf	fsr2l,f,c
  2379  0012C4  5021               	movf	VerifySignal@Signal+1,w,c
  2380  0012C6  22DA               	addwfc	fsr2h,f,c
  2381  0012C8  50DF               	movf	indf2,w,c
  2382  0012CA  6E23               	movwf	(??_VerifySignal+1)& (0+255),c
  2383  0012CC  5023               	movf	??_VerifySignal+1,w,c
  2384  0012CE  6E25               	movwf	(??_VerifySignal+3)& (0+255),c
  2385  0012D0  6A24               	clrf	(??_VerifySignal+2)& (0+255),c
  2386  0012D2  5022               	movf	??_VerifySignal,w,c
  2387  0012D4  2424               	addwf	??_VerifySignal+2,w,c
  2388  0012D6  6E29               	movwf	VerifySignal@hexByte,c
  2389  0012D8  0E00               	movlw	0
  2390  0012DA  2025               	addwfc	??_VerifySignal+3,w,c
  2391  0012DC  6E2A               	movwf	VerifySignal@hexByte+1,c
  2392                           
  2393                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2394  0012DE  EE20 F002          	lfsr	2,2
  2395  0012E2  5020               	movf	VerifySignal@Signal,w,c
  2396  0012E4  26D9               	addwf	fsr2l,f,c
  2397  0012E6  5021               	movf	VerifySignal@Signal+1,w,c
  2398  0012E8  22DA               	addwfc	fsr2h,f,c
  2399  0012EA  50DF               	movf	indf2,w,c
  2400  0012EC  1829               	xorwf	VerifySignal@hexByte,w,c
  2401  0012EE  6E28               	movwf	VerifySignal@checksum,c
  2402                           
  2403                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2404  0012F0  0E05               	movlw	5
  2405  0012F2  6E2B               	movwf	VerifySignal@i,c
  2406  0012F4                     l2355:
  2407  0012F4  0E09               	movlw	9
  2408  0012F6  642B               	cpfsgt	VerifySignal@i,c
  2409  0012F8  D001               	goto	l2359
  2410  0012FA  D028               	goto	l2367
  2411  0012FC                     l2359:
  2412                           
  2413                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2414  0012FC  502B               	movf	VerifySignal@i,w,c
  2415  0012FE  6E22               	movwf	??_VerifySignal& (0+255),c
  2416  001300  6A23               	clrf	(??_VerifySignal+1)& (0+255),c
  2417  001302  0E01               	movlw	1
  2418  001304  2622               	addwf	??_VerifySignal,f,c
  2419  001306  0E00               	movlw	0
  2420  001308  2223               	addwfc	??_VerifySignal+1,f,c
  2421  00130A  5022               	movf	??_VerifySignal,w,c
  2422  00130C  2420               	addwf	VerifySignal@Signal,w,c
  2423  00130E  6ED9               	movwf	fsr2l,c
  2424  001310  5023               	movf	??_VerifySignal+1,w,c
  2425  001312  2021               	addwfc	VerifySignal@Signal+1,w,c
  2426  001314  6EDA               	movwf	fsr2h,c
  2427  001316  50DF               	movf	indf2,w,c
  2428  001318  6E24               	movwf	(??_VerifySignal+2)& (0+255),c
  2429  00131A  502B               	movf	VerifySignal@i,w,c
  2430  00131C  0D01               	mullw	1
  2431  00131E  50F3               	movf	prodl,w,c
  2432  001320  2420               	addwf	VerifySignal@Signal,w,c
  2433  001322  6ED9               	movwf	fsr2l,c
  2434  001324  50F4               	movf	prodh,w,c
  2435  001326  2021               	addwfc	VerifySignal@Signal+1,w,c
  2436  001328  6EDA               	movwf	fsr2h,c
  2437  00132A  50DF               	movf	indf2,w,c
  2438  00132C  6E25               	movwf	(??_VerifySignal+3)& (0+255),c
  2439  00132E  5025               	movf	??_VerifySignal+3,w,c
  2440  001330  6E27               	movwf	(??_VerifySignal+5)& (0+255),c
  2441  001332  6A26               	clrf	(??_VerifySignal+4)& (0+255),c
  2442  001334  5024               	movf	??_VerifySignal+2,w,c
  2443  001336  2426               	addwf	??_VerifySignal+4,w,c
  2444  001338  6E29               	movwf	VerifySignal@hexByte,c
  2445  00133A  0E00               	movlw	0
  2446  00133C  2027               	addwfc	??_VerifySignal+5,w,c
  2447  00133E  6E2A               	movwf	VerifySignal@hexByte+1,c
  2448                           
  2449                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2450  001340  5028               	movf	VerifySignal@checksum,w,c
  2451  001342  1829               	xorwf	VerifySignal@hexByte,w,c
  2452  001344  6E28               	movwf	VerifySignal@checksum,c
  2453  001346  0E02               	movlw	2
  2454  001348  262B               	addwf	VerifySignal@i,f,c
  2455  00134A  D7D4               	goto	l2355
  2456  00134C                     l2367:
  2457                           
  2458                           ;RFID_Reader.c: 68: }
  2459                           ;RFID_Reader.c: 71: return 1;
  2460  00134C  0E01               	movlw	1
  2461  00134E  0012               	return	
  2462  001350                     __end_of_VerifySignal:
  2463                           	opt stack 0
  2464                           tblptru	equ	0xFF8
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           indf1	equ	0xFE7
  2471                           fsr1h	equ	0xFE2
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _ScanWithRange *****************
  2479 ;; Defined at:
  2480 ;;		line 106 in file "Movement.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  mL              2    4[BANK0 ] PTR struct DC_motor
  2483 ;;		 -> main@mL(9), 
  2484 ;;  mR              2    6[BANK0 ] PTR struct DC_motor
  2485 ;;		 -> main@mR(9), 
  2486 ;;  tenth_second    1    8[BANK0 ] unsigned char 
  2487 ;;  MoveTime        2    9[BANK0 ] PTR unsigned char 
  2488 ;;		 -> main@MoveTime(100), 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  SensorResult    4   22[BANK0 ] unsigned int [2]
  2491 ;;  SensorResult    4   18[BANK0 ] unsigned int [2]
  2492 ;;  SensorResult    4   14[BANK0 ] unsigned int [2]
  2493 ;;  ResultFalseR    1   13[BANK0 ] unsigned char 
  2494 ;;  ResultFalseC    1   12[BANK0 ] unsigned char 
  2495 ;;  ResultFalseL    1   11[BANK0 ] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      unsigned char 
  2498 ;; Registers used:
  2499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2505 ;;      Params:         0       7       0       0
  2506 ;;      Locals:         0      15       0       0
  2507 ;;      Temps:          2       0       0       0
  2508 ;;      Totals:         2      22       0       0
  2509 ;;Total ram usage:       24 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    6
  2512 ;; This function calls:
  2513 ;;		___awdiv
  2514 ;;		_delay_tenth_s
  2515 ;;		_grabLeftIR
  2516 ;;		_grabRightIR
  2517 ;;		_stop
  2518 ;;		_turnLeft
  2519 ;;		_turnRight
  2520 ;; This function is called by:
  2521 ;;		_main
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text12
  2526  000308                     __ptext12:
  2527                           	opt stack 0
  2528  000308                     _ScanWithRange:
  2529                           	opt stack 24
  2530                           
  2531                           ;Movement.c: 109: unsigned int SensorResultL[2]={0,0};
  2532                           
  2533                           ;incstack = 0
  2534  000308  C080  F06E         	movff	ScanWithRange@F3719,ScanWithRange@SensorResultL
  2535  00030C  C081  F06F         	movff	ScanWithRange@F3719+1,ScanWithRange@SensorResultL+1
  2536  000310  C082  F070         	movff	ScanWithRange@F3719+2,ScanWithRange@SensorResultL+2
  2537  000314  C083  F071         	movff	ScanWithRange@F3719+3,ScanWithRange@SensorResultL+3
  2538                           
  2539                           ;Movement.c: 110: unsigned int SensorResultC[2]={0,0};
  2540  000318  C084  F072         	movff	ScanWithRange@F3721,ScanWithRange@SensorResultC
  2541  00031C  C085  F073         	movff	ScanWithRange@F3721+1,ScanWithRange@SensorResultC+1
  2542  000320  C086  F074         	movff	ScanWithRange@F3721+2,ScanWithRange@SensorResultC+2
  2543  000324  C087  F075         	movff	ScanWithRange@F3721+3,ScanWithRange@SensorResultC+3
  2544                           
  2545                           ;Movement.c: 111: unsigned int SensorResultR[2]={0,0};
  2546  000328  C088  F076         	movff	ScanWithRange@F3723,ScanWithRange@SensorResultR
  2547  00032C  C089  F077         	movff	ScanWithRange@F3723+1,ScanWithRange@SensorResultR+1
  2548  000330  C08A  F078         	movff	ScanWithRange@F3723+2,ScanWithRange@SensorResultR+2
  2549  000334  C08B  F079         	movff	ScanWithRange@F3723+3,ScanWithRange@SensorResultR+3
  2550                           
  2551                           ;Movement.c: 112: unsigned char ResultFalseL=0;
  2552  000338  0E00               	movlw	0
  2553  00033A  0100               	movlb	0	; () banked
  2554  00033C  6F6B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2555                           
  2556                           ;Movement.c: 113: unsigned char ResultFalseC=0;
  2557  00033E  0E00               	movlw	0
  2558  000340  0100               	movlb	0	; () banked
  2559  000342  6F6C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2560                           
  2561                           ;Movement.c: 114: unsigned char ResultFalseR=0;
  2562  000344  0E00               	movlw	0
  2563  000346  0100               	movlb	0	; () banked
  2564  000348  6F6D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;Movement.c: 121: stop(mL,mR);
  2568  00034A  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2569  00034E  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2570  000352  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2571  000356  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2572  00035A  ECA8  F009         	call	_stop	;wreg free
  2573                           
  2574                           ;Movement.c: 122: SensorResultC[0]=grabLeftIR();
  2575  00035E  ECA6  F00A         	call	_grabLeftIR	;wreg free
  2576  000362  C020  F072         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2577  000366  C021  F073         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2578                           
  2579                           ;Movement.c: 123: SensorResultC[1]=grabRightIR();
  2580  00036A  EC6D  F00A         	call	_grabRightIR	;wreg free
  2581  00036E  C020  F074         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2582  000372  C021  F075         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2583                           
  2584                           ;Movement.c: 127: CAP1BUFH=0;
  2585  000376  0E00               	movlw	0
  2586  000378  6E69               	movwf	3945,c	;volatile
  2587                           
  2588                           ;Movement.c: 128: CAP1BUFL=0;
  2589  00037A  0E00               	movlw	0
  2590  00037C  6E68               	movwf	3944,c	;volatile
  2591                           
  2592                           ;Movement.c: 129: CAP2BUFH=0;
  2593  00037E  0E00               	movlw	0
  2594  000380  6E67               	movwf	3943,c	;volatile
  2595                           
  2596                           ;Movement.c: 130: CAP2BUFL=0;
  2597  000382  0E00               	movlw	0
  2598  000384  6E66               	movwf	3942,c	;volatile
  2599                           
  2600                           ;Movement.c: 133: turnLeft(mL,mR);
  2601  000386  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  2602  00038A  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2603  00038E  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  2604  000392  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2605  000396  EC3E  F00B         	call	_turnLeft	;wreg free
  2606                           
  2607                           ;Movement.c: 134: delay_tenth_s(tenth_seconds);
  2608  00039A  0100               	movlb	0	; () banked
  2609  00039C  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2610  00039E  EC9E  F00B         	call	_delay_tenth_s
  2611                           
  2612                           ;Movement.c: 135: (*MoveTime) += tenth_seconds;
  2613  0003A2  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2614  0003A6  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2615  0003AA  0100               	movlb	0	; () banked
  2616  0003AC  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2617  0003AE  26DF               	addwf	indf2,f,c
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;Movement.c: 137: stop(mL,mR);
  2621  0003B0  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2622  0003B4  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2623  0003B8  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2624  0003BC  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2625  0003C0  ECA8  F009         	call	_stop	;wreg free
  2626                           
  2627                           ;Movement.c: 138: SensorResultL[0]=grabLeftIR();
  2628  0003C4  ECA6  F00A         	call	_grabLeftIR	;wreg free
  2629  0003C8  C020  F06E         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2630  0003CC  C021  F06F         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2631                           
  2632                           ;Movement.c: 139: SensorResultL[1]=grabRightIR();
  2633  0003D0  EC6D  F00A         	call	_grabRightIR	;wreg free
  2634  0003D4  C020  F070         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2635  0003D8  C021  F071         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2636                           
  2637                           ;Movement.c: 143: CAP1BUFH=0;
  2638  0003DC  0E00               	movlw	0
  2639  0003DE  6E69               	movwf	3945,c	;volatile
  2640                           
  2641                           ;Movement.c: 144: CAP1BUFL=0;
  2642  0003E0  0E00               	movlw	0
  2643  0003E2  6E68               	movwf	3944,c	;volatile
  2644                           
  2645                           ;Movement.c: 145: CAP2BUFH=0;
  2646  0003E4  0E00               	movlw	0
  2647  0003E6  6E67               	movwf	3943,c	;volatile
  2648                           
  2649                           ;Movement.c: 146: CAP2BUFL=0;
  2650  0003E8  0E00               	movlw	0
  2651  0003EA  6E66               	movwf	3942,c	;volatile
  2652                           
  2653                           ;Movement.c: 149: turnRight(mL,mR);
  2654  0003EC  C064  F060         	movff	ScanWithRange@mL,turnRight@mL
  2655  0003F0  C065  F061         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2656  0003F4  C066  F062         	movff	ScanWithRange@mR,turnRight@mR
  2657  0003F8  C067  F063         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2658  0003FC  EC17  F00B         	call	_turnRight	;wreg free
  2659                           
  2660                           ;Movement.c: 150: delay_tenth_s(2*tenth_seconds);
  2661  000400  0100               	movlb	0	; () banked
  2662  000402  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2663  000404  0D02               	mullw	2
  2664  000406  50F3               	movf	prodl,w,c
  2665  000408  EC9E  F00B         	call	_delay_tenth_s
  2666                           
  2667                           ;Movement.c: 151: (*MoveTime) -= 2*tenth_seconds;
  2668  00040C  0100               	movlb	0	; () banked
  2669  00040E  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2670  000410  0D02               	mullw	2
  2671  000412  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2672  000416  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2673  00041A  50F3               	movf	prodl,w,c
  2674  00041C  5EDF               	subwf	indf2,f,c
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;Movement.c: 153: stop(mL,mR);
  2678  00041E  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2679  000422  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2680  000426  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2681  00042A  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2682  00042E  ECA8  F009         	call	_stop	;wreg free
  2683                           
  2684                           ;Movement.c: 154: SensorResultR[0]=grabLeftIR();
  2685  000432  ECA6  F00A         	call	_grabLeftIR	;wreg free
  2686  000436  C020  F076         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2687  00043A  C021  F077         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2688                           
  2689                           ;Movement.c: 155: SensorResultR[1]=grabRightIR();
  2690  00043E  EC6D  F00A         	call	_grabRightIR	;wreg free
  2691  000442  C020  F078         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2692  000446  C021  F079         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2693                           
  2694                           ;Movement.c: 159: CAP1BUFH=0;
  2695  00044A  0E00               	movlw	0
  2696  00044C  6E69               	movwf	3945,c	;volatile
  2697                           
  2698                           ;Movement.c: 160: CAP1BUFL=0;
  2699  00044E  0E00               	movlw	0
  2700  000450  6E68               	movwf	3944,c	;volatile
  2701                           
  2702                           ;Movement.c: 161: CAP2BUFH=0;
  2703  000452  0E00               	movlw	0
  2704  000454  6E67               	movwf	3943,c	;volatile
  2705                           
  2706                           ;Movement.c: 162: CAP2BUFL=0;
  2707  000456  0E00               	movlw	0
  2708  000458  6E66               	movwf	3942,c	;volatile
  2709                           
  2710                           ;Movement.c: 173: if((SensorResultL[0]+SensorResultL[1])<ClearSignalThreshold){
  2711  00045A  0E01               	movlw	low _ClearSignalThreshold
  2712  00045C  6EF6               	movwf	tblptrl,c
  2713  00045E                     	if	1	;There is more than 1 active tblptr byte
  2714  00045E  0E03               	movlw	high _ClearSignalThreshold
  2715  000460  6EF7               	movwf	tblptrh,c
  2716  000462                     	endif
  2717  000462                     	if	0	;There are less than 3 active tblptr bytes
  2718  000462                     	endif
  2719  000462  0100               	movlb	0	; () banked
  2720  000464  516E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2721  000466  0100               	movlb	0	; () banked
  2722  000468  2570               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2723  00046A  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2724  00046C  0100               	movlb	0	; () banked
  2725  00046E  516F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2726  000470  0100               	movlb	0	; () banked
  2727  000472  2171               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2728  000474  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2729  000476  0009               	tblrd		*+
  2730  000478  50F5               	movf	tablat,w,c
  2731  00047A  5C3C               	subwf	??_ScanWithRange,w,c
  2732  00047C  0009               	tblrd		*+
  2733  00047E  50F5               	movf	tablat,w,c
  2734  000480  583D               	subwfb	??_ScanWithRange+1,w,c
  2735  000482  B0D8               	btfsc	status,0,c
  2736  000484  D00D               	goto	l2633
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;Movement.c: 174: SensorResultL[0]=0;
  2740  000486  0E00               	movlw	0
  2741  000488  0100               	movlb	0	; () banked
  2742  00048A  6F6F               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2743  00048C  0E00               	movlw	0
  2744  00048E  6F6E               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2745                           
  2746                           ;Movement.c: 175: SensorResultL[1]=0;
  2747  000490  0E00               	movlw	0
  2748  000492  0100               	movlb	0	; () banked
  2749  000494  6F71               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2750  000496  0E00               	movlw	0
  2751  000498  6F70               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2752                           
  2753                           ;Movement.c: 176: ResultFalseL=1;
  2754  00049A  0E01               	movlw	1
  2755  00049C  0100               	movlb	0	; () banked
  2756  00049E  6F6B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2757  0004A0                     l2633:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;Movement.c: 177: }
  2761                           ;Movement.c: 178: if((SensorResultC[0]+SensorResultC[1])<ClearSignalThreshold){
  2762  0004A0  0E01               	movlw	low _ClearSignalThreshold
  2763  0004A2  6EF6               	movwf	tblptrl,c
  2764  0004A4                     	if	1	;There is more than 1 active tblptr byte
  2765  0004A4  0E03               	movlw	high _ClearSignalThreshold
  2766  0004A6  6EF7               	movwf	tblptrh,c
  2767  0004A8                     	endif
  2768  0004A8                     	if	0	;There are less than 3 active tblptr bytes
  2769  0004A8                     	endif
  2770  0004A8  0100               	movlb	0	; () banked
  2771  0004AA  5172               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2772  0004AC  0100               	movlb	0	; () banked
  2773  0004AE  2574               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2774  0004B0  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2775  0004B2  0100               	movlb	0	; () banked
  2776  0004B4  5173               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2777  0004B6  0100               	movlb	0	; () banked
  2778  0004B8  2175               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2779  0004BA  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2780  0004BC  0009               	tblrd		*+
  2781  0004BE  50F5               	movf	tablat,w,c
  2782  0004C0  5C3C               	subwf	??_ScanWithRange,w,c
  2783  0004C2  0009               	tblrd		*+
  2784  0004C4  50F5               	movf	tablat,w,c
  2785  0004C6  583D               	subwfb	??_ScanWithRange+1,w,c
  2786  0004C8  B0D8               	btfsc	status,0,c
  2787  0004CA  D00D               	goto	l2637
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Movement.c: 179: SensorResultC[0]=0;
  2791  0004CC  0E00               	movlw	0
  2792  0004CE  0100               	movlb	0	; () banked
  2793  0004D0  6F73               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2794  0004D2  0E00               	movlw	0
  2795  0004D4  6F72               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2796                           
  2797                           ;Movement.c: 180: SensorResultC[1]=0;
  2798  0004D6  0E00               	movlw	0
  2799  0004D8  0100               	movlb	0	; () banked
  2800  0004DA  6F75               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2801  0004DC  0E00               	movlw	0
  2802  0004DE  6F74               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2803                           
  2804                           ;Movement.c: 181: ResultFalseC=1;
  2805  0004E0  0E01               	movlw	1
  2806  0004E2  0100               	movlb	0	; () banked
  2807  0004E4  6F6C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2808  0004E6                     l2637:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;Movement.c: 182: }
  2812                           ;Movement.c: 183: if((SensorResultR[0]+SensorResultR[1])<ClearSignalThreshold){
  2813  0004E6  0E01               	movlw	low _ClearSignalThreshold
  2814  0004E8  6EF6               	movwf	tblptrl,c
  2815  0004EA                     	if	1	;There is more than 1 active tblptr byte
  2816  0004EA  0E03               	movlw	high _ClearSignalThreshold
  2817  0004EC  6EF7               	movwf	tblptrh,c
  2818  0004EE                     	endif
  2819  0004EE                     	if	0	;There are less than 3 active tblptr bytes
  2820  0004EE                     	endif
  2821  0004EE  0100               	movlb	0	; () banked
  2822  0004F0  5176               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2823  0004F2  0100               	movlb	0	; () banked
  2824  0004F4  2578               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2825  0004F6  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2826  0004F8  0100               	movlb	0	; () banked
  2827  0004FA  5177               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2828  0004FC  0100               	movlb	0	; () banked
  2829  0004FE  2179               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2830  000500  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2831  000502  0009               	tblrd		*+
  2832  000504  50F5               	movf	tablat,w,c
  2833  000506  5C3C               	subwf	??_ScanWithRange,w,c
  2834  000508  0009               	tblrd		*+
  2835  00050A  50F5               	movf	tablat,w,c
  2836  00050C  583D               	subwfb	??_ScanWithRange+1,w,c
  2837  00050E  B0D8               	btfsc	status,0,c
  2838  000510  D00D               	goto	l2641
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;Movement.c: 184: SensorResultR[0]=0;
  2842  000512  0E00               	movlw	0
  2843  000514  0100               	movlb	0	; () banked
  2844  000516  6F77               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2845  000518  0E00               	movlw	0
  2846  00051A  6F76               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2847                           
  2848                           ;Movement.c: 185: SensorResultR[1]=0;
  2849  00051C  0E00               	movlw	0
  2850  00051E  0100               	movlb	0	; () banked
  2851  000520  6F79               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2852  000522  0E00               	movlw	0
  2853  000524  6F78               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2854                           
  2855                           ;Movement.c: 186: ResultFalseR=1;
  2856  000526  0E01               	movlw	1
  2857  000528  0100               	movlb	0	; () banked
  2858  00052A  6F6D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2859  00052C                     l2641:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;Movement.c: 187: }
  2863                           ;Movement.c: 189: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2864  00052C  0100               	movlb	0	; () banked
  2865  00052E  516C               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2866  000530  C06B  F03C         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2867  000534  6A3D               	clrf	(??_ScanWithRange+1)& (0+255),c
  2868  000536  263C               	addwf	??_ScanWithRange,f,c
  2869  000538  0E00               	movlw	0
  2870  00053A  223D               	addwfc	??_ScanWithRange+1,f,c
  2871  00053C  0100               	movlb	0	; () banked
  2872  00053E  516D               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2873  000540  263C               	addwf	??_ScanWithRange,f,c
  2874  000542  0E00               	movlw	0
  2875  000544  223D               	addwfc	??_ScanWithRange+1,f,c
  2876  000546  0E03               	movlw	3
  2877  000548  183C               	xorwf	??_ScanWithRange,w,c
  2878  00054A  103D               	iorwf	??_ScanWithRange+1,w,c
  2879  00054C  A4D8               	btfss	status,2,c
  2880  00054E  D025               	goto	l2657
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;Movement.c: 191: turnLeft(mL,mR);
  2884  000550  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  2885  000554  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2886  000558  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  2887  00055C  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2888  000560  EC3E  F00B         	call	_turnLeft	;wreg free
  2889                           
  2890                           ;Movement.c: 192: delay_tenth_s(5*tenth_seconds);
  2891  000564  0100               	movlb	0	; () banked
  2892  000566  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2893  000568  0D05               	mullw	5
  2894  00056A  50F3               	movf	prodl,w,c
  2895  00056C  EC9E  F00B         	call	_delay_tenth_s
  2896                           
  2897                           ;Movement.c: 193: (*MoveTime) += 5*tenth_seconds;
  2898  000570  0100               	movlb	0	; () banked
  2899  000572  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2900  000574  0D05               	mullw	5
  2901  000576  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2902  00057A  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2903  00057E  50F3               	movf	prodl,w,c
  2904  000580  26DF               	addwf	indf2,f,c
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;Movement.c: 194: stop(mL,mR);
  2908  000582  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2909  000586  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2910  00058A  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2911  00058E  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2912  000592  ECA8  F009         	call	_stop	;wreg free
  2913                           
  2914                           ;Movement.c: 196: return -1;
  2915  000596  0EFF               	movlw	255
  2916  000598  0012               	return	
  2917  00059A                     l2657:
  2918                           
  2919                           ;Movement.c: 199: if (((SensorResultL[0]>DirectionFoundThreshold)&&(SensorResultL[1]>Dir
      +                          ectionFoundThreshold)
  2920                           ;Movement.c: 200: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2921                           ;Movement.c: 201: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2922  00059A  0E03               	movlw	low _DirectionFoundThreshold
  2923  00059C  6EF6               	movwf	tblptrl,c
  2924  00059E                     	if	1	;There is more than 1 active tblptr byte
  2925  00059E  0E03               	movlw	high _DirectionFoundThreshold
  2926  0005A0  6EF7               	movwf	tblptrh,c
  2927  0005A2                     	endif
  2928  0005A2                     	if	0	;There are less than 3 active tblptr bytes
  2929  0005A2                     	endif
  2930  0005A2  0100               	movlb	0	; () banked
  2931  0005A4  516E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2932  0005A6  0009               	tblrd		*+
  2933  0005A8  5CF5               	subwf	tablat,w,c
  2934  0005AA  0100               	movlb	0	; () banked
  2935  0005AC  516F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2936  0005AE  0009               	tblrd		*+
  2937  0005B0  58F5               	subwfb	tablat,w,c
  2938  0005B2  B0D8               	btfsc	status,0,c
  2939  0005B4  D069               	goto	l2679
  2940                           
  2941                           ; BSR set to: 0
  2942  0005B6  0E03               	movlw	low _DirectionFoundThreshold
  2943  0005B8  6EF6               	movwf	tblptrl,c
  2944  0005BA                     	if	1	;There is more than 1 active tblptr byte
  2945  0005BA  0E03               	movlw	high _DirectionFoundThreshold
  2946  0005BC  6EF7               	movwf	tblptrh,c
  2947  0005BE                     	endif
  2948  0005BE                     	if	0	;There are less than 3 active tblptr bytes
  2949  0005BE                     	endif
  2950  0005BE  0100               	movlb	0	; () banked
  2951  0005C0  5170               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2952  0005C2  0009               	tblrd		*+
  2953  0005C4  5CF5               	subwf	tablat,w,c
  2954  0005C6  0100               	movlb	0	; () banked
  2955  0005C8  5171               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2956  0005CA  0009               	tblrd		*+
  2957  0005CC  58F5               	subwfb	tablat,w,c
  2958  0005CE  B0D8               	btfsc	status,0,c
  2959  0005D0  D05B               	goto	l2679
  2960                           
  2961                           ; BSR set to: 0
  2962  0005D2  0E05               	movlw	low _DirectionFoundTolerance
  2963  0005D4  6EF6               	movwf	tblptrl,c
  2964  0005D6                     	if	1	;There is more than 1 active tblptr byte
  2965  0005D6  0E03               	movlw	high _DirectionFoundTolerance
  2966  0005D8  6EF7               	movwf	tblptrh,c
  2967  0005DA                     	endif
  2968  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  2969  0005DA                     	endif
  2970  0005DA  EE20  F070         	lfsr	2,ScanWithRange@SensorResultL+2
  2971  0005DE  CFDE F03C          	movff	postinc2,??_ScanWithRange
  2972  0005E2  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  2973  0005E6  1E3C               	comf	??_ScanWithRange,f,c
  2974  0005E8  1E3D               	comf	??_ScanWithRange+1,f,c
  2975  0005EA  4A3C               	infsnz	??_ScanWithRange,f,c
  2976  0005EC  2A3D               	incf	??_ScanWithRange+1,f,c
  2977  0005EE  0100               	movlb	0	; () banked
  2978  0005F0  516E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2979  0005F2  263C               	addwf	??_ScanWithRange,f,c
  2980  0005F4  0100               	movlb	0	; () banked
  2981  0005F6  516F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2982  0005F8  223D               	addwfc	??_ScanWithRange+1,f,c
  2983  0005FA  0009               	tblrd		*+
  2984  0005FC  50F5               	movf	tablat,w,c
  2985  0005FE  5C3C               	subwf	??_ScanWithRange,w,c
  2986  000600  0009               	tblrd		*+
  2987  000602  50F5               	movf	tablat,w,c
  2988  000604  583D               	subwfb	??_ScanWithRange+1,w,c
  2989  000606  A0D8               	btfss	status,0,c
  2990  000608  D01A               	goto	l2665
  2991                           
  2992                           ; BSR set to: 0
  2993  00060A  0E05               	movlw	low _DirectionFoundTolerance
  2994  00060C  6EF6               	movwf	tblptrl,c
  2995  00060E                     	if	1	;There is more than 1 active tblptr byte
  2996  00060E  0E03               	movlw	high _DirectionFoundTolerance
  2997  000610  6EF7               	movwf	tblptrh,c
  2998  000612                     	endif
  2999  000612                     	if	0	;There are less than 3 active tblptr bytes
  3000  000612                     	endif
  3001  000612  C06E  F03C         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  3002  000616  C06F  F03D         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  3003  00061A  1E3C               	comf	??_ScanWithRange,f,c
  3004  00061C  1E3D               	comf	??_ScanWithRange+1,f,c
  3005  00061E  4A3C               	infsnz	??_ScanWithRange,f,c
  3006  000620  2A3D               	incf	??_ScanWithRange+1,f,c
  3007  000622  0100               	movlb	0	; () banked
  3008  000624  5170               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3009  000626  263C               	addwf	??_ScanWithRange,f,c
  3010  000628  0100               	movlb	0	; () banked
  3011  00062A  5171               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3012  00062C  223D               	addwfc	??_ScanWithRange+1,f,c
  3013  00062E  0009               	tblrd		*+
  3014  000630  50F5               	movf	tablat,w,c
  3015  000632  5C3C               	subwf	??_ScanWithRange,w,c
  3016  000634  0009               	tblrd		*+
  3017  000636  50F5               	movf	tablat,w,c
  3018  000638  583D               	subwfb	??_ScanWithRange+1,w,c
  3019  00063A  B0D8               	btfsc	status,0,c
  3020  00063C  D025               	goto	l2679
  3021  00063E                     l2665:
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;Movement.c: 203: turnLeft(mL,mR);
  3025  00063E  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3026  000642  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3027  000646  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3028  00064A  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3029  00064E  EC3E  F00B         	call	_turnLeft	;wreg free
  3030                           
  3031                           ;Movement.c: 204: delay_tenth_s(2*(tenth_seconds));
  3032  000652  0100               	movlb	0	; () banked
  3033  000654  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3034  000656  0D02               	mullw	2
  3035  000658  50F3               	movf	prodl,w,c
  3036  00065A  EC9E  F00B         	call	_delay_tenth_s
  3037                           
  3038                           ;Movement.c: 205: (*MoveTime) += 2*tenth_seconds;
  3039  00065E  0100               	movlb	0	; () banked
  3040  000660  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3041  000662  0D02               	mullw	2
  3042  000664  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3043  000668  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3044  00066C  50F3               	movf	prodl,w,c
  3045  00066E  26DF               	addwf	indf2,f,c
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;Movement.c: 206: stop(mL,mR);
  3049  000670  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3050  000674  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3051  000678  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3052  00067C  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3053  000680  ECA8  F009         	call	_stop	;wreg free
  3054  000684                     l2673:
  3055                           
  3056                           ;Movement.c: 207: return 2;
  3057  000684  0E02               	movlw	2
  3058  000686  0012               	return	
  3059  000688                     l2679:
  3060                           
  3061                           ;Movement.c: 209: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3062                           ;Movement.c: 210: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3063  000688  0E03               	movlw	low _DirectionFoundThreshold
  3064  00068A  6EF6               	movwf	tblptrl,c
  3065  00068C                     	if	1	;There is more than 1 active tblptr byte
  3066  00068C  0E03               	movlw	high _DirectionFoundThreshold
  3067  00068E  6EF7               	movwf	tblptrh,c
  3068  000690                     	endif
  3069  000690                     	if	0	;There are less than 3 active tblptr bytes
  3070  000690                     	endif
  3071  000690  0100               	movlb	0	; () banked
  3072  000692  5172               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3073  000694  0009               	tblrd		*+
  3074  000696  5CF5               	subwf	tablat,w,c
  3075  000698  0100               	movlb	0	; () banked
  3076  00069A  5173               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3077  00069C  0009               	tblrd		*+
  3078  00069E  58F5               	subwfb	tablat,w,c
  3079  0006A0  B0D8               	btfsc	status,0,c
  3080  0006A2  D064               	goto	l2701
  3081                           
  3082                           ; BSR set to: 0
  3083  0006A4  0E03               	movlw	low _DirectionFoundThreshold
  3084  0006A6  6EF6               	movwf	tblptrl,c
  3085  0006A8                     	if	1	;There is more than 1 active tblptr byte
  3086  0006A8  0E03               	movlw	high _DirectionFoundThreshold
  3087  0006AA  6EF7               	movwf	tblptrh,c
  3088  0006AC                     	endif
  3089  0006AC                     	if	0	;There are less than 3 active tblptr bytes
  3090  0006AC                     	endif
  3091  0006AC  0100               	movlb	0	; () banked
  3092  0006AE  5174               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3093  0006B0  0009               	tblrd		*+
  3094  0006B2  5CF5               	subwf	tablat,w,c
  3095  0006B4  0100               	movlb	0	; () banked
  3096  0006B6  5175               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3097  0006B8  0009               	tblrd		*+
  3098  0006BA  58F5               	subwfb	tablat,w,c
  3099  0006BC  B0D8               	btfsc	status,0,c
  3100  0006BE  D056               	goto	l2701
  3101                           
  3102                           ; BSR set to: 0
  3103  0006C0  0E05               	movlw	low _DirectionFoundTolerance
  3104  0006C2  6EF6               	movwf	tblptrl,c
  3105  0006C4                     	if	1	;There is more than 1 active tblptr byte
  3106  0006C4  0E03               	movlw	high _DirectionFoundTolerance
  3107  0006C6  6EF7               	movwf	tblptrh,c
  3108  0006C8                     	endif
  3109  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  3110  0006C8                     	endif
  3111  0006C8  EE20  F074         	lfsr	2,ScanWithRange@SensorResultC+2
  3112  0006CC  CFDE F03C          	movff	postinc2,??_ScanWithRange
  3113  0006D0  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  3114  0006D4  1E3C               	comf	??_ScanWithRange,f,c
  3115  0006D6  1E3D               	comf	??_ScanWithRange+1,f,c
  3116  0006D8  4A3C               	infsnz	??_ScanWithRange,f,c
  3117  0006DA  2A3D               	incf	??_ScanWithRange+1,f,c
  3118  0006DC  0100               	movlb	0	; () banked
  3119  0006DE  5172               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3120  0006E0  263C               	addwf	??_ScanWithRange,f,c
  3121  0006E2  0100               	movlb	0	; () banked
  3122  0006E4  5173               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3123  0006E6  223D               	addwfc	??_ScanWithRange+1,f,c
  3124  0006E8  0009               	tblrd		*+
  3125  0006EA  50F5               	movf	tablat,w,c
  3126  0006EC  5C3C               	subwf	??_ScanWithRange,w,c
  3127  0006EE  0009               	tblrd		*+
  3128  0006F0  50F5               	movf	tablat,w,c
  3129  0006F2  583D               	subwfb	??_ScanWithRange+1,w,c
  3130  0006F4  A0D8               	btfss	status,0,c
  3131  0006F6  D01A               	goto	l2687
  3132                           
  3133                           ; BSR set to: 0
  3134  0006F8  0E05               	movlw	low _DirectionFoundTolerance
  3135  0006FA  6EF6               	movwf	tblptrl,c
  3136  0006FC                     	if	1	;There is more than 1 active tblptr byte
  3137  0006FC  0E03               	movlw	high _DirectionFoundTolerance
  3138  0006FE  6EF7               	movwf	tblptrh,c
  3139  000700                     	endif
  3140  000700                     	if	0	;There are less than 3 active tblptr bytes
  3141  000700                     	endif
  3142  000700  C072  F03C         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3143  000704  C073  F03D         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3144  000708  1E3C               	comf	??_ScanWithRange,f,c
  3145  00070A  1E3D               	comf	??_ScanWithRange+1,f,c
  3146  00070C  4A3C               	infsnz	??_ScanWithRange,f,c
  3147  00070E  2A3D               	incf	??_ScanWithRange+1,f,c
  3148  000710  0100               	movlb	0	; () banked
  3149  000712  5174               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3150  000714  263C               	addwf	??_ScanWithRange,f,c
  3151  000716  0100               	movlb	0	; () banked
  3152  000718  5175               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3153  00071A  223D               	addwfc	??_ScanWithRange+1,f,c
  3154  00071C  0009               	tblrd		*+
  3155  00071E  50F5               	movf	tablat,w,c
  3156  000720  5C3C               	subwf	??_ScanWithRange,w,c
  3157  000722  0009               	tblrd		*+
  3158  000724  50F5               	movf	tablat,w,c
  3159  000726  583D               	subwfb	??_ScanWithRange+1,w,c
  3160  000728  B0D8               	btfsc	status,0,c
  3161  00072A  D020               	goto	l2701
  3162  00072C                     l2687:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;Movement.c: 212: turnLeft(mL,mR);
  3166  00072C  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3167  000730  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3168  000734  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3169  000738  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3170  00073C  EC3E  F00B         	call	_turnLeft	;wreg free
  3171                           
  3172                           ;Movement.c: 213: delay_tenth_s(tenth_seconds);
  3173  000740  0100               	movlb	0	; () banked
  3174  000742  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3175  000744  EC9E  F00B         	call	_delay_tenth_s
  3176                           
  3177                           ;Movement.c: 214: (*MoveTime) += tenth_seconds;
  3178  000748  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3179  00074C  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3180  000750  0100               	movlb	0	; () banked
  3181  000752  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3182  000754  26DF               	addwf	indf2,f,c
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;Movement.c: 215: stop(mL,mR);
  3186  000756  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3187  00075A  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3188  00075E  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3189  000762  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3190  000766  ECA8  F009         	call	_stop	;wreg free
  3191  00076A  D78C               	goto	l2673
  3192  00076C                     l2701:
  3193                           
  3194                           ;Movement.c: 218: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3195                           ;Movement.c: 219: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3196  00076C  0E03               	movlw	low _DirectionFoundThreshold
  3197  00076E  6EF6               	movwf	tblptrl,c
  3198  000770                     	if	1	;There is more than 1 active tblptr byte
  3199  000770  0E03               	movlw	high _DirectionFoundThreshold
  3200  000772  6EF7               	movwf	tblptrh,c
  3201  000774                     	endif
  3202  000774                     	if	0	;There are less than 3 active tblptr bytes
  3203  000774                     	endif
  3204  000774  0100               	movlb	0	; () banked
  3205  000776  5176               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3206  000778  0009               	tblrd		*+
  3207  00077A  5CF5               	subwf	tablat,w,c
  3208  00077C  0100               	movlb	0	; () banked
  3209  00077E  5177               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3210  000780  0009               	tblrd		*+
  3211  000782  58F5               	subwfb	tablat,w,c
  3212  000784  B0D8               	btfsc	status,0,c
  3213  000786  D04F               	goto	l2717
  3214                           
  3215                           ; BSR set to: 0
  3216  000788  0E03               	movlw	low _DirectionFoundThreshold
  3217  00078A  6EF6               	movwf	tblptrl,c
  3218  00078C                     	if	1	;There is more than 1 active tblptr byte
  3219  00078C  0E03               	movlw	high _DirectionFoundThreshold
  3220  00078E  6EF7               	movwf	tblptrh,c
  3221  000790                     	endif
  3222  000790                     	if	0	;There are less than 3 active tblptr bytes
  3223  000790                     	endif
  3224  000790  0100               	movlb	0	; () banked
  3225  000792  5178               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3226  000794  0009               	tblrd		*+
  3227  000796  5CF5               	subwf	tablat,w,c
  3228  000798  0100               	movlb	0	; () banked
  3229  00079A  5179               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3230  00079C  0009               	tblrd		*+
  3231  00079E  58F5               	subwfb	tablat,w,c
  3232  0007A0  B0D8               	btfsc	status,0,c
  3233  0007A2  D041               	goto	l2717
  3234                           
  3235                           ; BSR set to: 0
  3236  0007A4  0E05               	movlw	low _DirectionFoundTolerance
  3237  0007A6  6EF6               	movwf	tblptrl,c
  3238  0007A8                     	if	1	;There is more than 1 active tblptr byte
  3239  0007A8  0E03               	movlw	high _DirectionFoundTolerance
  3240  0007AA  6EF7               	movwf	tblptrh,c
  3241  0007AC                     	endif
  3242  0007AC                     	if	0	;There are less than 3 active tblptr bytes
  3243  0007AC                     	endif
  3244  0007AC  EE20  F078         	lfsr	2,ScanWithRange@SensorResultR+2
  3245  0007B0  CFDE F03C          	movff	postinc2,??_ScanWithRange
  3246  0007B4  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  3247  0007B8  1E3C               	comf	??_ScanWithRange,f,c
  3248  0007BA  1E3D               	comf	??_ScanWithRange+1,f,c
  3249  0007BC  4A3C               	infsnz	??_ScanWithRange,f,c
  3250  0007BE  2A3D               	incf	??_ScanWithRange+1,f,c
  3251  0007C0  0100               	movlb	0	; () banked
  3252  0007C2  5176               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3253  0007C4  263C               	addwf	??_ScanWithRange,f,c
  3254  0007C6  0100               	movlb	0	; () banked
  3255  0007C8  5177               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3256  0007CA  223D               	addwfc	??_ScanWithRange+1,f,c
  3257  0007CC  0009               	tblrd		*+
  3258  0007CE  50F5               	movf	tablat,w,c
  3259  0007D0  5C3C               	subwf	??_ScanWithRange,w,c
  3260  0007D2  0009               	tblrd		*+
  3261  0007D4  50F5               	movf	tablat,w,c
  3262  0007D6  583D               	subwfb	??_ScanWithRange+1,w,c
  3263  0007D8  A0D8               	btfss	status,0,c
  3264  0007DA  D01A               	goto	l2709
  3265                           
  3266                           ; BSR set to: 0
  3267  0007DC  0E05               	movlw	low _DirectionFoundTolerance
  3268  0007DE  6EF6               	movwf	tblptrl,c
  3269  0007E0                     	if	1	;There is more than 1 active tblptr byte
  3270  0007E0  0E03               	movlw	high _DirectionFoundTolerance
  3271  0007E2  6EF7               	movwf	tblptrh,c
  3272  0007E4                     	endif
  3273  0007E4                     	if	0	;There are less than 3 active tblptr bytes
  3274  0007E4                     	endif
  3275  0007E4  C076  F03C         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3276  0007E8  C077  F03D         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3277  0007EC  1E3C               	comf	??_ScanWithRange,f,c
  3278  0007EE  1E3D               	comf	??_ScanWithRange+1,f,c
  3279  0007F0  4A3C               	infsnz	??_ScanWithRange,f,c
  3280  0007F2  2A3D               	incf	??_ScanWithRange+1,f,c
  3281  0007F4  0100               	movlb	0	; () banked
  3282  0007F6  5178               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3283  0007F8  263C               	addwf	??_ScanWithRange,f,c
  3284  0007FA  0100               	movlb	0	; () banked
  3285  0007FC  5179               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3286  0007FE  223D               	addwfc	??_ScanWithRange+1,f,c
  3287  000800  0009               	tblrd		*+
  3288  000802  50F5               	movf	tablat,w,c
  3289  000804  5C3C               	subwf	??_ScanWithRange,w,c
  3290  000806  0009               	tblrd		*+
  3291  000808  50F5               	movf	tablat,w,c
  3292  00080A  583D               	subwfb	??_ScanWithRange+1,w,c
  3293  00080C  B0D8               	btfsc	status,0,c
  3294  00080E  D00B               	goto	l2717
  3295  000810                     l2709:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;Movement.c: 221: stop(mL,mR);
  3299  000810  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3300  000814  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3301  000818  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3302  00081C  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3303  000820  ECA8  F009         	call	_stop	;wreg free
  3304  000824  D72F               	goto	l2673
  3305  000826                     l2717:
  3306  000826  0100               	movlb	0	; () banked
  3307  000828  516E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3308  00082A  0100               	movlb	0	; () banked
  3309  00082C  5D70               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3310  00082E  0100               	movlb	0	; () banked
  3311  000830  516F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3312  000832  0100               	movlb	0	; () banked
  3313  000834  5971               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3314  000836  B0D8               	btfsc	status,0,c
  3315  000838  D025               	goto	l2733
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Movement.c: 227: turnLeft(mL,mR);
  3319  00083A  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3320  00083E  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3321  000842  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3322  000846  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3323  00084A  EC3E  F00B         	call	_turnLeft	;wreg free
  3324                           
  3325                           ;Movement.c: 228: delay_tenth_s(3*tenth_seconds);
  3326  00084E  0100               	movlb	0	; () banked
  3327  000850  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3328  000852  0D03               	mullw	3
  3329  000854  50F3               	movf	prodl,w,c
  3330  000856  EC9E  F00B         	call	_delay_tenth_s
  3331                           
  3332                           ;Movement.c: 229: (*MoveTime) += 3*tenth_seconds;
  3333  00085A  0100               	movlb	0	; () banked
  3334  00085C  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3335  00085E  0D03               	mullw	3
  3336  000860  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3337  000864  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3338  000868  50F3               	movf	prodl,w,c
  3339  00086A  26DF               	addwf	indf2,f,c
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;Movement.c: 230: stop(mL,mR);
  3343  00086C  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3344  000870  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3345  000874  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3346  000878  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3347  00087C  ECA8  F009         	call	_stop	;wreg free
  3348  000880                     l2727:
  3349                           
  3350                           ;Movement.c: 231: return 0;
  3351  000880  0E00               	movlw	0
  3352  000882  0012               	return	
  3353  000884                     l2733:
  3354  000884  0100               	movlb	0	; () banked
  3355  000886  5178               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3356  000888  0100               	movlb	0	; () banked
  3357  00088A  5D76               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3358  00088C  0100               	movlb	0	; () banked
  3359  00088E  5179               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3360  000890  0100               	movlb	0	; () banked
  3361  000892  5977               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3362  000894  B0D8               	btfsc	status,0,c
  3363  000896  D020               	goto	l2749
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;Movement.c: 234: turnRight(mL,mR);
  3367  000898  C064  F060         	movff	ScanWithRange@mL,turnRight@mL
  3368  00089C  C065  F061         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3369  0008A0  C066  F062         	movff	ScanWithRange@mR,turnRight@mR
  3370  0008A4  C067  F063         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3371  0008A8  EC17  F00B         	call	_turnRight	;wreg free
  3372                           
  3373                           ;Movement.c: 235: delay_tenth_s(tenth_seconds);
  3374  0008AC  0100               	movlb	0	; () banked
  3375  0008AE  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3376  0008B0  EC9E  F00B         	call	_delay_tenth_s
  3377                           
  3378                           ;Movement.c: 236: (*MoveTime) -= tenth_seconds;
  3379  0008B4  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3380  0008B8  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3381  0008BC  0100               	movlb	0	; () banked
  3382  0008BE  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3383  0008C0  5EDF               	subwf	indf2,f,c
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;Movement.c: 237: stop(mL,mR);
  3387  0008C2  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3388  0008C6  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3389  0008CA  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3390  0008CE  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3391  0008D2  ECA8  F009         	call	_stop	;wreg free
  3392  0008D6  D7D4               	goto	l2727
  3393  0008D8                     l2749:
  3394  0008D8  0100               	movlb	0	; () banked
  3395  0008DA  5170               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3396  0008DC  0100               	movlb	0	; () banked
  3397  0008DE  5D6E               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3398  0008E0  0100               	movlb	0	; () banked
  3399  0008E2  5171               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3400  0008E4  0100               	movlb	0	; () banked
  3401  0008E6  596F               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3402  0008E8  B0D8               	btfsc	status,0,c
  3403  0008EA  D043               	goto	l2767
  3404                           
  3405                           ; BSR set to: 0
  3406  0008EC  0100               	movlb	0	; () banked
  3407  0008EE  5172               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3408  0008F0  0100               	movlb	0	; () banked
  3409  0008F2  5D74               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3410  0008F4  0100               	movlb	0	; () banked
  3411  0008F6  5173               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3412  0008F8  0100               	movlb	0	; () banked
  3413  0008FA  5975               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3414  0008FC  B0D8               	btfsc	status,0,c
  3415  0008FE  D039               	goto	l2767
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Movement.c: 243: turnLeft(mL,mR);
  3419  000900  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3420  000904  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3421  000908  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3422  00090C  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3423  000910  EC3E  F00B         	call	_turnLeft	;wreg free
  3424                           
  3425                           ;Movement.c: 244: delay_tenth_s((3*tenth_seconds)/2);
  3426  000914  0100               	movlb	0	; () banked
  3427  000916  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3428  000918  0D03               	mullw	3
  3429  00091A  CFF3 F026          	movff	prodl,___awdiv@dividend
  3430  00091E  CFF4 F027          	movff	prodh,___awdiv@dividend+1
  3431  000922  0E00               	movlw	0
  3432  000924  6E29               	movwf	___awdiv@divisor+1,c
  3433  000926  0E02               	movlw	2
  3434  000928  6E28               	movwf	___awdiv@divisor,c
  3435  00092A  ECF0  F009         	call	___awdiv	;wreg free
  3436  00092E  5026               	movf	?___awdiv,w,c
  3437  000930  EC9E  F00B         	call	_delay_tenth_s
  3438                           
  3439                           ;Movement.c: 245: (*MoveTime) += 3*tenth_seconds/2;
  3440  000934  0100               	movlb	0	; () banked
  3441  000936  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3442  000938  0D03               	mullw	3
  3443  00093A  CFF3 F026          	movff	prodl,___awdiv@dividend
  3444  00093E  CFF4 F027          	movff	prodh,___awdiv@dividend+1
  3445  000942  0E00               	movlw	0
  3446  000944  6E29               	movwf	___awdiv@divisor+1,c
  3447  000946  0E02               	movlw	2
  3448  000948  6E28               	movwf	___awdiv@divisor,c
  3449  00094A  ECF0  F009         	call	___awdiv	;wreg free
  3450  00094E  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3451  000952  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3452  000956  5026               	movf	?___awdiv,w,c
  3453  000958  26DF               	addwf	indf2,f,c
  3454                           
  3455                           ;Movement.c: 246: stop(mL,mR);
  3456  00095A  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3457  00095E  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3458  000962  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3459  000966  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3460  00096A  ECA8  F009         	call	_stop	;wreg free
  3461  00096E                     l2761:
  3462                           
  3463                           ;Movement.c: 247: return 1;
  3464  00096E  0E01               	movlw	1
  3465  000970  0012               	return	
  3466  000972                     l2767:
  3467  000972  0100               	movlb	0	; () banked
  3468  000974  5176               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3469  000976  0100               	movlb	0	; () banked
  3470  000978  5D78               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3471  00097A  0100               	movlb	0	; () banked
  3472  00097C  5177               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3473  00097E  0100               	movlb	0	; () banked
  3474  000980  5979               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3475  000982  B0D8               	btfsc	status,0,c
  3476  000984  D03A               	goto	l2783
  3477                           
  3478                           ; BSR set to: 0
  3479  000986  0100               	movlb	0	; () banked
  3480  000988  5174               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3481  00098A  0100               	movlb	0	; () banked
  3482  00098C  5D72               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3483  00098E  0100               	movlb	0	; () banked
  3484  000990  5175               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3485  000992  0100               	movlb	0	; () banked
  3486  000994  5973               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3487  000996  B0D8               	btfsc	status,0,c
  3488  000998  D030               	goto	l2783
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;Movement.c: 250: turnLeft(mL,mR);
  3492  00099A  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3493  00099E  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3494  0009A2  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3495  0009A6  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3496  0009AA  EC3E  F00B         	call	_turnLeft	;wreg free
  3497                           
  3498                           ;Movement.c: 251: delay_tenth_s((tenth_seconds)/2);
  3499  0009AE  C068  F026         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3500  0009B2  6A27               	clrf	___awdiv@dividend+1,c
  3501  0009B4  0E00               	movlw	0
  3502  0009B6  6E29               	movwf	___awdiv@divisor+1,c
  3503  0009B8  0E02               	movlw	2
  3504  0009BA  6E28               	movwf	___awdiv@divisor,c
  3505  0009BC  ECF0  F009         	call	___awdiv	;wreg free
  3506  0009C0  5026               	movf	?___awdiv,w,c
  3507  0009C2  EC9E  F00B         	call	_delay_tenth_s
  3508                           
  3509                           ;Movement.c: 252: (*MoveTime) += tenth_seconds/2;
  3510  0009C6  C068  F026         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3511  0009CA  6A27               	clrf	___awdiv@dividend+1,c
  3512  0009CC  0E00               	movlw	0
  3513  0009CE  6E29               	movwf	___awdiv@divisor+1,c
  3514  0009D0  0E02               	movlw	2
  3515  0009D2  6E28               	movwf	___awdiv@divisor,c
  3516  0009D4  ECF0  F009         	call	___awdiv	;wreg free
  3517  0009D8  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3518  0009DC  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3519  0009E0  5026               	movf	?___awdiv,w,c
  3520  0009E2  26DF               	addwf	indf2,f,c
  3521                           
  3522                           ;Movement.c: 253: stop(mL,mR);
  3523  0009E4  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3524  0009E8  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3525  0009EC  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3526  0009F0  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3527  0009F4  ECA8  F009         	call	_stop	;wreg free
  3528  0009F8  D7BA               	goto	l2761
  3529  0009FA                     l2783:
  3530                           
  3531                           ;Movement.c: 255: }
  3532                           ;Movement.c: 256: }
  3533                           ;Movement.c: 257: return 0;
  3534  0009FA  0E00               	movlw	0
  3535  0009FC  0012               	return	
  3536  0009FE                     __end_of_ScanWithRange:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           intcon	equ	0xFF2
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           indf1	equ	0xFE7
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           indf2	equ	0xFDF
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _ScanIR *****************
  3558 ;; Defined at:
  3559 ;;		line 41 in file "Movement.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  mL              2    4[BANK0 ] PTR struct DC_motor
  3562 ;;		 -> main@mL(9), 
  3563 ;;  mR              2    6[BANK0 ] PTR struct DC_motor
  3564 ;;		 -> main@mR(9), 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  SensorResult    4    8[BANK0 ] unsigned int [2]
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      unsigned char 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3576 ;;      Params:         0       4       0       0
  3577 ;;      Locals:         0       4       0       0
  3578 ;;      Temps:          2       0       0       0
  3579 ;;      Totals:         2       8       0       0
  3580 ;;Total ram usage:       10 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    6
  3583 ;; This function calls:
  3584 ;;		_delay_tenth_s
  3585 ;;		_grabLeftIR
  3586 ;;		_grabRightIR
  3587 ;;		_stop
  3588 ;;		_turnLeft
  3589 ;;		_turnRight
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text13
  3596  000D86                     __ptext13:
  3597                           	opt stack 0
  3598  000D86                     _ScanIR:
  3599                           	opt stack 24
  3600                           
  3601                           ;Movement.c: 43: unsigned int SensorResult[2]={0,0};
  3602                           
  3603                           ;incstack = 0
  3604  000D86  C07C  F068         	movff	ScanIR@F3713,ScanIR@SensorResult
  3605  000D8A  C07D  F069         	movff	ScanIR@F3713+1,ScanIR@SensorResult+1
  3606  000D8E  C07E  F06A         	movff	ScanIR@F3713+2,ScanIR@SensorResult+2
  3607  000D92  C07F  F06B         	movff	ScanIR@F3713+3,ScanIR@SensorResult+3
  3608                           
  3609                           ;Movement.c: 47: SensorResult[0]=grabLeftIR();
  3610  000D96  ECA6  F00A         	call	_grabLeftIR	;wreg free
  3611  000D9A  C020  F068         	movff	?_grabLeftIR,ScanIR@SensorResult
  3612  000D9E  C021  F069         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3613                           
  3614                           ;Movement.c: 48: SensorResult[1]=grabRightIR();
  3615  000DA2  EC6D  F00A         	call	_grabRightIR	;wreg free
  3616  000DA6  C020  F06A         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3617  000DAA  C021  F06B         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3618                           
  3619                           ;Movement.c: 52: CAP1BUFH=0;
  3620  000DAE  0E00               	movlw	0
  3621  000DB0  6E69               	movwf	3945,c	;volatile
  3622                           
  3623                           ;Movement.c: 53: CAP1BUFL=0;
  3624  000DB2  0E00               	movlw	0
  3625  000DB4  6E68               	movwf	3944,c	;volatile
  3626                           
  3627                           ;Movement.c: 54: CAP2BUFH=0;
  3628  000DB6  0E00               	movlw	0
  3629  000DB8  6E67               	movwf	3943,c	;volatile
  3630                           
  3631                           ;Movement.c: 55: CAP2BUFL=0;
  3632  000DBA  0E00               	movlw	0
  3633  000DBC  6E66               	movwf	3942,c	;volatile
  3634                           
  3635                           ;Movement.c: 59: if ((SensorResult[0]+SensorResult[1])>ClearSignalThreshold) {
  3636  000DBE  0100               	movlb	0	; () banked
  3637  000DC0  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3638  000DC2  0100               	movlb	0	; () banked
  3639  000DC4  256A               	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3640  000DC6  6E3C               	movwf	??_ScanIR& (0+255),c
  3641  000DC8  0100               	movlb	0	; () banked
  3642  000DCA  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3643  000DCC  0100               	movlb	0	; () banked
  3644  000DCE  216B               	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  3645  000DD0  6E3D               	movwf	(??_ScanIR+1)& (0+255),c
  3646  000DD2  0E01               	movlw	low _ClearSignalThreshold
  3647  000DD4  6EF6               	movwf	tblptrl,c
  3648  000DD6                     	if	1	;There is more than 1 active tblptr byte
  3649  000DD6  0E03               	movlw	high _ClearSignalThreshold
  3650  000DD8  6EF7               	movwf	tblptrh,c
  3651  000DDA                     	endif
  3652  000DDA                     	if	0	;There are less than 3 active tblptr bytes
  3653  000DDA                     	endif
  3654  000DDA  503C               	movf	??_ScanIR,w,c
  3655  000DDC  0009               	tblrd		*+
  3656  000DDE  5CF5               	subwf	tablat,w,c
  3657  000DE0  503D               	movf	??_ScanIR+1,w,c
  3658  000DE2  0009               	tblrd		*+
  3659  000DE4  58F5               	subwfb	tablat,w,c
  3660  000DE6  B0D8               	btfsc	status,0,c
  3661  000DE8  D0AD               	goto	l2841
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;Movement.c: 62: if (((SensorResult[0]>DirectionFoundThreshold)&&(SensorResult[1]>Direct
      +                          ionFoundThreshold)
  3665                           ;Movement.c: 63: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3666                           ;Movement.c: 64: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3667  000DEA  0E03               	movlw	low _DirectionFoundThreshold
  3668  000DEC  6EF6               	movwf	tblptrl,c
  3669  000DEE                     	if	1	;There is more than 1 active tblptr byte
  3670  000DEE  0E03               	movlw	high _DirectionFoundThreshold
  3671  000DF0  6EF7               	movwf	tblptrh,c
  3672  000DF2                     	endif
  3673  000DF2                     	if	0	;There are less than 3 active tblptr bytes
  3674  000DF2                     	endif
  3675  000DF2  0100               	movlb	0	; () banked
  3676  000DF4  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3677  000DF6  0009               	tblrd		*+
  3678  000DF8  5CF5               	subwf	tablat,w,c
  3679  000DFA  0100               	movlb	0	; () banked
  3680  000DFC  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3681  000DFE  0009               	tblrd		*+
  3682  000E00  58F5               	subwfb	tablat,w,c
  3683  000E02  B0D8               	btfsc	status,0,c
  3684  000E04  D046               	goto	l2815
  3685                           
  3686                           ; BSR set to: 0
  3687  000E06  0E03               	movlw	low _DirectionFoundThreshold
  3688  000E08  6EF6               	movwf	tblptrl,c
  3689  000E0A                     	if	1	;There is more than 1 active tblptr byte
  3690  000E0A  0E03               	movlw	high _DirectionFoundThreshold
  3691  000E0C  6EF7               	movwf	tblptrh,c
  3692  000E0E                     	endif
  3693  000E0E                     	if	0	;There are less than 3 active tblptr bytes
  3694  000E0E                     	endif
  3695  000E0E  0100               	movlb	0	; () banked
  3696  000E10  516A               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3697  000E12  0009               	tblrd		*+
  3698  000E14  5CF5               	subwf	tablat,w,c
  3699  000E16  0100               	movlb	0	; () banked
  3700  000E18  516B               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3701  000E1A  0009               	tblrd		*+
  3702  000E1C  58F5               	subwfb	tablat,w,c
  3703  000E1E  B0D8               	btfsc	status,0,c
  3704  000E20  D038               	goto	l2815
  3705                           
  3706                           ; BSR set to: 0
  3707  000E22  0E05               	movlw	low _DirectionFoundTolerance
  3708  000E24  6EF6               	movwf	tblptrl,c
  3709  000E26                     	if	1	;There is more than 1 active tblptr byte
  3710  000E26  0E03               	movlw	high _DirectionFoundTolerance
  3711  000E28  6EF7               	movwf	tblptrh,c
  3712  000E2A                     	endif
  3713  000E2A                     	if	0	;There are less than 3 active tblptr bytes
  3714  000E2A                     	endif
  3715  000E2A  EE20  F06A         	lfsr	2,ScanIR@SensorResult+2
  3716  000E2E  CFDE F03C          	movff	postinc2,??_ScanIR
  3717  000E32  CFDD F03D          	movff	postdec2,??_ScanIR+1
  3718  000E36  1E3C               	comf	??_ScanIR,f,c
  3719  000E38  1E3D               	comf	??_ScanIR+1,f,c
  3720  000E3A  4A3C               	infsnz	??_ScanIR,f,c
  3721  000E3C  2A3D               	incf	??_ScanIR+1,f,c
  3722  000E3E  0100               	movlb	0	; () banked
  3723  000E40  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3724  000E42  263C               	addwf	??_ScanIR,f,c
  3725  000E44  0100               	movlb	0	; () banked
  3726  000E46  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3727  000E48  223D               	addwfc	??_ScanIR+1,f,c
  3728  000E4A  0009               	tblrd		*+
  3729  000E4C  50F5               	movf	tablat,w,c
  3730  000E4E  5C3C               	subwf	??_ScanIR,w,c
  3731  000E50  0009               	tblrd		*+
  3732  000E52  50F5               	movf	tablat,w,c
  3733  000E54  583D               	subwfb	??_ScanIR+1,w,c
  3734  000E56  A0D8               	btfss	status,0,c
  3735  000E58  D01A               	goto	l2809
  3736                           
  3737                           ; BSR set to: 0
  3738  000E5A  0E05               	movlw	low _DirectionFoundTolerance
  3739  000E5C  6EF6               	movwf	tblptrl,c
  3740  000E5E                     	if	1	;There is more than 1 active tblptr byte
  3741  000E5E  0E03               	movlw	high _DirectionFoundTolerance
  3742  000E60  6EF7               	movwf	tblptrh,c
  3743  000E62                     	endif
  3744  000E62                     	if	0	;There are less than 3 active tblptr bytes
  3745  000E62                     	endif
  3746  000E62  C068  F03C         	movff	ScanIR@SensorResult,??_ScanIR
  3747  000E66  C069  F03D         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3748  000E6A  1E3C               	comf	??_ScanIR,f,c
  3749  000E6C  1E3D               	comf	??_ScanIR+1,f,c
  3750  000E6E  4A3C               	infsnz	??_ScanIR,f,c
  3751  000E70  2A3D               	incf	??_ScanIR+1,f,c
  3752  000E72  0100               	movlb	0	; () banked
  3753  000E74  516A               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3754  000E76  263C               	addwf	??_ScanIR,f,c
  3755  000E78  0100               	movlb	0	; () banked
  3756  000E7A  516B               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3757  000E7C  223D               	addwfc	??_ScanIR+1,f,c
  3758  000E7E  0009               	tblrd		*+
  3759  000E80  50F5               	movf	tablat,w,c
  3760  000E82  5C3C               	subwf	??_ScanIR,w,c
  3761  000E84  0009               	tblrd		*+
  3762  000E86  50F5               	movf	tablat,w,c
  3763  000E88  583D               	subwfb	??_ScanIR+1,w,c
  3764  000E8A  B0D8               	btfsc	status,0,c
  3765  000E8C  D002               	goto	l2815
  3766  000E8E                     l2809:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;Movement.c: 65: return 2;
  3770  000E8E  0E02               	movlw	2
  3771                           
  3772                           ; BSR set to: 0
  3773  000E90  0012               	return	
  3774  000E92                     l2815:
  3775                           
  3776                           ; BSR set to: 0
  3777  000E92  0100               	movlb	0	; () banked
  3778  000E94  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3779  000E96  0100               	movlb	0	; () banked
  3780  000E98  5D6A               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3781  000E9A  0100               	movlb	0	; () banked
  3782  000E9C  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3783  000E9E  0100               	movlb	0	; () banked
  3784  000EA0  596B               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3785  000EA2  A0D8               	btfss	status,0,c
  3786  000EA4  D023               	goto	l2829
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Movement.c: 68: stop(mL,mR);
  3790  000EA6  C064  F037         	movff	ScanIR@mL,stop@mL
  3791  000EAA  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3792  000EAE  C066  F039         	movff	ScanIR@mR,stop@mR
  3793  000EB2  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3794  000EB6  ECA8  F009         	call	_stop	;wreg free
  3795                           
  3796                           ;Movement.c: 69: turnLeft(mL,mR);
  3797  000EBA  C064  F060         	movff	ScanIR@mL,turnLeft@mL
  3798  000EBE  C065  F061         	movff	ScanIR@mL+1,turnLeft@mL+1
  3799  000EC2  C066  F062         	movff	ScanIR@mR,turnLeft@mR
  3800  000EC6  C067  F063         	movff	ScanIR@mR+1,turnLeft@mR+1
  3801  000ECA  EC3E  F00B         	call	_turnLeft	;wreg free
  3802                           
  3803                           ;Movement.c: 70: delay_tenth_s(3);
  3804  000ECE  0E03               	movlw	3
  3805  000ED0  EC9E  F00B         	call	_delay_tenth_s
  3806                           
  3807                           ;Movement.c: 71: stop(mL,mR);
  3808  000ED4  C064  F037         	movff	ScanIR@mL,stop@mL
  3809  000ED8  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3810  000EDC  C066  F039         	movff	ScanIR@mR,stop@mR
  3811  000EE0  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3812  000EE4  ECA8  F009         	call	_stop	;wreg free
  3813  000EE8                     l2823:
  3814                           
  3815                           ;Movement.c: 72: return 1;
  3816  000EE8  0E01               	movlw	1
  3817  000EEA  0012               	return	
  3818  000EEC                     l2829:
  3819  000EEC  0100               	movlb	0	; () banked
  3820  000EEE  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3821  000EF0  0100               	movlb	0	; () banked
  3822  000EF2  5D6A               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3823  000EF4  0100               	movlb	0	; () banked
  3824  000EF6  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3825  000EF8  0100               	movlb	0	; () banked
  3826  000EFA  596B               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3827  000EFC  B0D8               	btfsc	status,0,c
  3828  000EFE  D071               	goto	l2869
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Movement.c: 75: stop(mL,mR);
  3832  000F00  C064  F037         	movff	ScanIR@mL,stop@mL
  3833  000F04  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3834  000F08  C066  F039         	movff	ScanIR@mR,stop@mR
  3835  000F0C  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3836  000F10  ECA8  F009         	call	_stop	;wreg free
  3837                           
  3838                           ;Movement.c: 76: turnRight(mL,mR);
  3839  000F14  C064  F060         	movff	ScanIR@mL,turnRight@mL
  3840  000F18  C065  F061         	movff	ScanIR@mL+1,turnRight@mL+1
  3841  000F1C  C066  F062         	movff	ScanIR@mR,turnRight@mR
  3842  000F20  C067  F063         	movff	ScanIR@mR+1,turnRight@mR+1
  3843  000F24  EC17  F00B         	call	_turnRight	;wreg free
  3844                           
  3845                           ;Movement.c: 77: delay_tenth_s(3);
  3846  000F28  0E03               	movlw	3
  3847  000F2A  EC9E  F00B         	call	_delay_tenth_s
  3848                           
  3849                           ;Movement.c: 78: stop(mL,mR);
  3850  000F2E  C064  F037         	movff	ScanIR@mL,stop@mL
  3851  000F32  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3852  000F36  C066  F039         	movff	ScanIR@mR,stop@mR
  3853  000F3A  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3854  000F3E  ECA8  F009         	call	_stop	;wreg free
  3855  000F42  D7D2               	goto	l2823
  3856  000F44                     l2841:
  3857                           
  3858                           ;Movement.c: 83: stop(mL,mR);
  3859  000F44  C064  F037         	movff	ScanIR@mL,stop@mL
  3860  000F48  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3861  000F4C  C066  F039         	movff	ScanIR@mR,stop@mR
  3862  000F50  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3863  000F54  ECA8  F009         	call	_stop	;wreg free
  3864                           
  3865                           ;Movement.c: 86: if (SensorResult[0]<=SensorResult[1]) {
  3866  000F58  0100               	movlb	0	; () banked
  3867  000F5A  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3868  000F5C  0100               	movlb	0	; () banked
  3869  000F5E  5D6A               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3870  000F60  0100               	movlb	0	; () banked
  3871  000F62  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3872  000F64  0100               	movlb	0	; () banked
  3873  000F66  596B               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3874  000F68  A0D8               	btfss	status,0,c
  3875  000F6A  D019               	goto	l2857
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;Movement.c: 87: turnLeft(mL,mR);
  3879  000F6C  C064  F060         	movff	ScanIR@mL,turnLeft@mL
  3880  000F70  C065  F061         	movff	ScanIR@mL+1,turnLeft@mL+1
  3881  000F74  C066  F062         	movff	ScanIR@mR,turnLeft@mR
  3882  000F78  C067  F063         	movff	ScanIR@mR+1,turnLeft@mR+1
  3883  000F7C  EC3E  F00B         	call	_turnLeft	;wreg free
  3884                           
  3885                           ;Movement.c: 88: delay_tenth_s(5);
  3886  000F80  0E05               	movlw	5
  3887  000F82  EC9E  F00B         	call	_delay_tenth_s
  3888                           
  3889                           ;Movement.c: 89: stop(mL,mR);
  3890  000F86  C064  F037         	movff	ScanIR@mL,stop@mL
  3891  000F8A  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3892  000F8E  C066  F039         	movff	ScanIR@mR,stop@mR
  3893  000F92  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3894  000F96  ECA8  F009         	call	_stop	;wreg free
  3895  000F9A                     l2851:
  3896                           
  3897                           ;Movement.c: 90: return 0;
  3898  000F9A  0E00               	movlw	0
  3899  000F9C  0012               	return	
  3900  000F9E                     l2857:
  3901  000F9E  0100               	movlb	0	; () banked
  3902  000FA0  5168               	movf	ScanIR@SensorResult& (0+255),w,b
  3903  000FA2  0100               	movlb	0	; () banked
  3904  000FA4  5D6A               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3905  000FA6  0100               	movlb	0	; () banked
  3906  000FA8  5169               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3907  000FAA  0100               	movlb	0	; () banked
  3908  000FAC  596B               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3909  000FAE  B0D8               	btfsc	status,0,c
  3910  000FB0  D018               	goto	l2869
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;Movement.c: 93: turnRight(mL,mR);
  3914  000FB2  C064  F060         	movff	ScanIR@mL,turnRight@mL
  3915  000FB6  C065  F061         	movff	ScanIR@mL+1,turnRight@mL+1
  3916  000FBA  C066  F062         	movff	ScanIR@mR,turnRight@mR
  3917  000FBE  C067  F063         	movff	ScanIR@mR+1,turnRight@mR+1
  3918  000FC2  EC17  F00B         	call	_turnRight	;wreg free
  3919                           
  3920                           ;Movement.c: 94: delay_tenth_s(5);
  3921  000FC6  0E05               	movlw	5
  3922  000FC8  EC9E  F00B         	call	_delay_tenth_s
  3923                           
  3924                           ;Movement.c: 95: stop(mL,mR);
  3925  000FCC  C064  F037         	movff	ScanIR@mL,stop@mL
  3926  000FD0  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3927  000FD4  C066  F039         	movff	ScanIR@mR,stop@mR
  3928  000FD8  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3929  000FDC  ECA8  F009         	call	_stop	;wreg free
  3930  000FE0  D7DC               	goto	l2851
  3931  000FE2                     l2869:
  3932                           
  3933                           ;Movement.c: 97: }
  3934                           ;Movement.c: 98: }
  3935                           ;Movement.c: 99: return 0;
  3936  000FE2  0E00               	movlw	0
  3937  000FE4  0012               	return	
  3938  000FE6                     __end_of_ScanIR:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           indf1	equ	0xFE7
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _turnRight *****************
  3960 ;; Defined at:
  3961 ;;		line 98 in file "dc_motor.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  3964 ;;		 -> main@mL(9), 
  3965 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  3966 ;;		 -> main@mR(9), 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;		None               void
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3978 ;;      Params:         0       4       0       0
  3979 ;;      Locals:         0       0       0       0
  3980 ;;      Temps:          0       0       0       0
  3981 ;;      Totals:         0       4       0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    5
  3985 ;; This function calls:
  3986 ;;		_fullSpeedAhead
  3987 ;;		_stop
  3988 ;; This function is called by:
  3989 ;;		_ScanIR
  3990 ;;		_ScanWithRange
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text14
  3995  00162E                     __ptext14:
  3996                           	opt stack 0
  3997  00162E                     _turnRight:
  3998                           	opt stack 24
  3999                           
  4000                           ;dc_motor.c: 100: stop(mL, mR);
  4001                           
  4002                           ;incstack = 0
  4003  00162E  C060  F037         	movff	turnRight@mL,stop@mL
  4004  001632  C061  F038         	movff	turnRight@mL+1,stop@mL+1
  4005  001636  C062  F039         	movff	turnRight@mR,stop@mR
  4006  00163A  C063  F03A         	movff	turnRight@mR+1,stop@mR+1
  4007  00163E  ECA8  F009         	call	_stop	;wreg free
  4008                           
  4009                           ;dc_motor.c: 102: mL->direction=1;
  4010  001642  0100               	movlb	0	; () banked
  4011  001644  EE20 F001          	lfsr	2,1
  4012  001648  5160               	movf	turnRight@mL& (0+255),w,b
  4013  00164A  26D9               	addwf	fsr2l,f,c
  4014  00164C  5161               	movf	(turnRight@mL+1)& (0+255),w,b
  4015  00164E  22DA               	addwfc	fsr2h,f,c
  4016  001650  0E01               	movlw	1
  4017  001652  6EDF               	movwf	indf2,c
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;dc_motor.c: 103: mR->direction=0;
  4021  001654  0100               	movlb	0	; () banked
  4022  001656  EE20 F001          	lfsr	2,1
  4023  00165A  5162               	movf	turnRight@mR& (0+255),w,b
  4024  00165C  26D9               	addwf	fsr2l,f,c
  4025  00165E  5163               	movf	(turnRight@mR+1)& (0+255),w,b
  4026  001660  22DA               	addwfc	fsr2h,f,c
  4027  001662  0E00               	movlw	0
  4028  001664  6EDF               	movwf	indf2,c
  4029                           
  4030                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  4031  001666  C060  F037         	movff	turnRight@mL,fullSpeedAhead@mL
  4032  00166A  C061  F038         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  4033  00166E  C062  F039         	movff	turnRight@mR,fullSpeedAhead@mR
  4034  001672  C063  F03A         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  4035  001676  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
  4036  00167A  0012               	return		;funcret
  4037  00167C                     __end_of_turnRight:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           indf1	equ	0xFE7
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _turnLeft *****************
  4059 ;; Defined at:
  4060 ;;		line 87 in file "dc_motor.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  4063 ;;		 -> main@mL(9), 
  4064 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  4065 ;;		 -> main@mR(9), 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4077 ;;      Params:         0       4       0       0
  4078 ;;      Locals:         0       0       0       0
  4079 ;;      Temps:          0       0       0       0
  4080 ;;      Totals:         0       4       0       0
  4081 ;;Total ram usage:        4 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    5
  4084 ;; This function calls:
  4085 ;;		_fullSpeedAhead
  4086 ;;		_stop
  4087 ;; This function is called by:
  4088 ;;		_ScanIR
  4089 ;;		_ScanWithRange
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text15
  4094  00167C                     __ptext15:
  4095                           	opt stack 0
  4096  00167C                     _turnLeft:
  4097                           	opt stack 24
  4098                           
  4099                           ;dc_motor.c: 89: stop(mL, mR);
  4100                           
  4101                           ;incstack = 0
  4102  00167C  C060  F037         	movff	turnLeft@mL,stop@mL
  4103  001680  C061  F038         	movff	turnLeft@mL+1,stop@mL+1
  4104  001684  C062  F039         	movff	turnLeft@mR,stop@mR
  4105  001688  C063  F03A         	movff	turnLeft@mR+1,stop@mR+1
  4106  00168C  ECA8  F009         	call	_stop	;wreg free
  4107                           
  4108                           ;dc_motor.c: 91: mL->direction=0;
  4109  001690  0100               	movlb	0	; () banked
  4110  001692  EE20 F001          	lfsr	2,1
  4111  001696  5160               	movf	turnLeft@mL& (0+255),w,b
  4112  001698  26D9               	addwf	fsr2l,f,c
  4113  00169A  5161               	movf	(turnLeft@mL+1)& (0+255),w,b
  4114  00169C  22DA               	addwfc	fsr2h,f,c
  4115  00169E  0E00               	movlw	0
  4116  0016A0  6EDF               	movwf	indf2,c
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;dc_motor.c: 92: mR->direction=1;
  4120  0016A2  0100               	movlb	0	; () banked
  4121  0016A4  EE20 F001          	lfsr	2,1
  4122  0016A8  5162               	movf	turnLeft@mR& (0+255),w,b
  4123  0016AA  26D9               	addwf	fsr2l,f,c
  4124  0016AC  5163               	movf	(turnLeft@mR+1)& (0+255),w,b
  4125  0016AE  22DA               	addwfc	fsr2h,f,c
  4126  0016B0  0E01               	movlw	1
  4127  0016B2  6EDF               	movwf	indf2,c
  4128                           
  4129                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4130  0016B4  C060  F037         	movff	turnLeft@mL,fullSpeedAhead@mL
  4131  0016B8  C061  F038         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4132  0016BC  C062  F039         	movff	turnLeft@mR,fullSpeedAhead@mR
  4133  0016C0  C063  F03A         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4134  0016C4  ECDF  F00A         	call	_fullSpeedAhead	;wreg free
  4135  0016C8  0012               	return		;funcret
  4136  0016CA                     __end_of_turnLeft:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           postinc0	equ	0xFEE
  4146                           wreg	equ	0xFE8
  4147                           indf1	equ	0xFE7
  4148                           fsr1h	equ	0xFE2
  4149                           fsr1l	equ	0xFE1
  4150                           indf2	equ	0xFDF
  4151                           postinc2	equ	0xFDE
  4152                           postdec2	equ	0xFDD
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _stop *****************
  4158 ;; Defined at:
  4159 ;;		line 67 in file "dc_motor.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  4162 ;;		 -> main@mL(9), 
  4163 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  4164 ;;		 -> main@mR(9), 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;		None               void
  4169 ;; Registers used:
  4170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4176 ;;      Params:         4       0       0       0
  4177 ;;      Locals:         0       0       0       0
  4178 ;;      Temps:          0       0       0       0
  4179 ;;      Totals:         4       0       0       0
  4180 ;;Total ram usage:        4 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    4
  4183 ;; This function calls:
  4184 ;;		_setMotorPWM
  4185 ;; This function is called by:
  4186 ;;		_main
  4187 ;;		_turnLeft
  4188 ;;		_turnRight
  4189 ;;		_ScanIR
  4190 ;;		_ScanWithRange
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text16
  4195  001350                     __ptext16:
  4196                           	opt stack 0
  4197  001350                     _stop:
  4198                           	opt stack 26
  4199                           
  4200                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4201                           
  4202                           ;incstack = 0
  4203  001350  D028               	goto	l1891
  4204  001352                     l1877:
  4205                           
  4206                           ;dc_motor.c: 71: if(mL->power>0){
  4207  001352  C037  FFD9         	movff	stop@mL,fsr2l
  4208  001356  C038  FFDA         	movff	stop@mL+1,fsr2h
  4209  00135A  50DF               	movf	indf2,w,c
  4210  00135C  B4D8               	btfsc	status,2,c
  4211  00135E  D005               	goto	l1881
  4212                           
  4213                           ;dc_motor.c: 72: mL->power--;
  4214  001360  C037  FFD9         	movff	stop@mL,fsr2l
  4215  001364  C038  FFDA         	movff	stop@mL+1,fsr2h
  4216  001368  06DF               	decf	indf2,f,c
  4217  00136A                     l1881:
  4218                           
  4219                           ;dc_motor.c: 73: }
  4220                           ;dc_motor.c: 74: if(mR->power>0){
  4221  00136A  C039  FFD9         	movff	stop@mR,fsr2l
  4222  00136E  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4223  001372  50DF               	movf	indf2,w,c
  4224  001374  B4D8               	btfsc	status,2,c
  4225  001376  D005               	goto	l1885
  4226                           
  4227                           ;dc_motor.c: 75: mR->power--;
  4228  001378  C039  FFD9         	movff	stop@mR,fsr2l
  4229  00137C  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4230  001380  06DF               	decf	indf2,f,c
  4231  001382                     l1885:
  4232                           
  4233                           ;dc_motor.c: 76: }
  4234                           ;dc_motor.c: 77: setMotorPWM(mL);
  4235  001382  C037  F02E         	movff	stop@mL,setMotorPWM@m
  4236  001386  C038  F02F         	movff	stop@mL+1,setMotorPWM@m+1
  4237  00138A  ECF3  F007         	call	_setMotorPWM	;wreg free
  4238                           
  4239                           ;dc_motor.c: 78: setMotorPWM(mR);
  4240  00138E  C039  F02E         	movff	stop@mR,setMotorPWM@m
  4241  001392  C03A  F02F         	movff	stop@mR+1,setMotorPWM@m+1
  4242  001396  ECF3  F007         	call	_setMotorPWM	;wreg free
  4243                           
  4244                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4245  00139A  0E21               	movlw	33
  4246  00139C                     u2497:
  4247  00139C  2EE8               	decfsz	wreg,f,c
  4248  00139E  D7FE               	goto	u2497
  4249  0013A0  F000               	nop	
  4250  0013A2                     l1891:
  4251  0013A2  C037  FFD9         	movff	stop@mL,fsr2l
  4252  0013A6  C038  FFDA         	movff	stop@mL+1,fsr2h
  4253  0013AA  50DF               	movf	indf2,w,c
  4254  0013AC  A4D8               	btfss	status,2,c
  4255  0013AE  D7D1               	goto	l1877
  4256  0013B0  C039  FFD9         	movff	stop@mR,fsr2l
  4257  0013B4  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4258  0013B8  50DF               	movf	indf2,w,c
  4259  0013BA  A4D8               	btfss	status,2,c
  4260  0013BC  D7CA               	goto	l1877
  4261                           
  4262                           ;dc_motor.c: 80: }
  4263                           ;dc_motor.c: 81: mL->direction=1;
  4264  0013BE  EE20 F001          	lfsr	2,1
  4265  0013C2  5037               	movf	stop@mL,w,c
  4266  0013C4  26D9               	addwf	fsr2l,f,c
  4267  0013C6  5038               	movf	stop@mL+1,w,c
  4268  0013C8  22DA               	addwfc	fsr2h,f,c
  4269  0013CA  0E01               	movlw	1
  4270  0013CC  6EDF               	movwf	indf2,c
  4271                           
  4272                           ;dc_motor.c: 82: mR->direction=1;
  4273  0013CE  EE20 F001          	lfsr	2,1
  4274  0013D2  5039               	movf	stop@mR,w,c
  4275  0013D4  26D9               	addwf	fsr2l,f,c
  4276  0013D6  503A               	movf	stop@mR+1,w,c
  4277  0013D8  22DA               	addwfc	fsr2h,f,c
  4278  0013DA  0E01               	movlw	1
  4279  0013DC  6EDF               	movwf	indf2,c
  4280  0013DE  0012               	return		;funcret
  4281  0013E0                     __end_of_stop:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           indf1	equ	0xFE7
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _fullSpeedAhead *****************
  4303 ;; Defined at:
  4304 ;;		line 108 in file "dc_motor.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  4307 ;;		 -> main@mL(9), 
  4308 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  4309 ;;		 -> main@mR(9), 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;		None               void
  4314 ;; Registers used:
  4315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4321 ;;      Params:         4       0       0       0
  4322 ;;      Locals:         0       0       0       0
  4323 ;;      Temps:          1       0       0       0
  4324 ;;      Totals:         5       0       0       0
  4325 ;;Total ram usage:        5 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    4
  4328 ;; This function calls:
  4329 ;;		_setMotorPWM
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;;		_turnLeft
  4333 ;;		_turnRight
  4334 ;;		_fullSpeedBack
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text17
  4339  0015BE                     __ptext17:
  4340                           	opt stack 0
  4341  0015BE                     _fullSpeedAhead:
  4342                           	opt stack 25
  4343                           
  4344                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4345                           
  4346                           ;incstack = 0
  4347  0015BE  D028               	goto	l166
  4348  0015C0                     l1859:
  4349                           
  4350                           ;dc_motor.c: 112: if(mL->power<100){
  4351  0015C0  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4352  0015C4  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4353  0015C8  0E64               	movlw	100
  4354  0015CA  60DF               	cpfslt	indf2,c
  4355  0015CC  D005               	goto	l1863
  4356                           
  4357                           ;dc_motor.c: 113: mL->power++;
  4358  0015CE  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4359  0015D2  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4360  0015D6  2ADF               	incf	indf2,f,c
  4361  0015D8                     l1863:
  4362                           
  4363                           ;dc_motor.c: 114: }
  4364                           ;dc_motor.c: 115: if(mR->power<100){
  4365  0015D8  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4366  0015DC  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4367  0015E0  0E64               	movlw	100
  4368  0015E2  60DF               	cpfslt	indf2,c
  4369  0015E4  D005               	goto	l1867
  4370                           
  4371                           ;dc_motor.c: 116: mR->power++;
  4372  0015E6  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4373  0015EA  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4374  0015EE  2ADF               	incf	indf2,f,c
  4375  0015F0                     l1867:
  4376                           
  4377                           ;dc_motor.c: 117: }
  4378                           ;dc_motor.c: 118: setMotorPWM(mL);
  4379  0015F0  C037  F02E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4380  0015F4  C038  F02F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4381  0015F8  ECF3  F007         	call	_setMotorPWM	;wreg free
  4382                           
  4383                           ;dc_motor.c: 119: setMotorPWM(mR);
  4384  0015FC  C039  F02E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4385  001600  C03A  F02F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4386  001604  ECF3  F007         	call	_setMotorPWM	;wreg free
  4387                           
  4388                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4389  001608  0E21               	movlw	33
  4390  00160A                     u2507:
  4391  00160A  2EE8               	decfsz	wreg,f,c
  4392  00160C  D7FE               	goto	u2507
  4393  00160E  F000               	nop	
  4394  001610                     l166:
  4395  001610  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4396  001614  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4397  001618  0E63               	movlw	99
  4398  00161A  64DF               	cpfsgt	indf2,c
  4399  00161C  D7D1               	goto	l1859
  4400  00161E  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4401  001622  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4402  001626  0E63               	movlw	99
  4403  001628  64DF               	cpfsgt	indf2,c
  4404  00162A  D7CA               	goto	l1859
  4405  00162C  0012               	return	
  4406  00162E                     __end_of_fullSpeedAhead:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           postinc0	equ	0xFEE
  4416                           wreg	equ	0xFE8
  4417                           indf1	equ	0xFE7
  4418                           fsr1h	equ	0xFE2
  4419                           fsr1l	equ	0xFE1
  4420                           indf2	equ	0xFDF
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           fsr2h	equ	0xFDA
  4424                           fsr2l	equ	0xFD9
  4425                           status	equ	0xFD8
  4426                           
  4427 ;; *************** function _setMotorPWM *****************
  4428 ;; Defined at:
  4429 ;;		line 26 in file "dc_motor.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;  m               2   45[COMRAM] PTR struct DC_motor
  4432 ;;		 -> main@mR(9), main@mL(9), 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  PWMduty         2   52[COMRAM] int 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;		None               void
  4437 ;; Registers used:
  4438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4444 ;;      Params:         2       0       0       0
  4445 ;;      Locals:         2       0       0       0
  4446 ;;      Temps:          5       0       0       0
  4447 ;;      Totals:         9       0       0       0
  4448 ;;Total ram usage:        9 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    3
  4451 ;; This function calls:
  4452 ;;		___awdiv
  4453 ;;		___wmul
  4454 ;; This function is called by:
  4455 ;;		_stop
  4456 ;;		_fullSpeedAhead
  4457 ;;		_setMotorFullSpeed
  4458 ;;		_stopMotor
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text18
  4463  000FE6                     __ptext18:
  4464                           	opt stack 0
  4465  000FE6                     _setMotorPWM:
  4466                           	opt stack 26
  4467                           
  4468                           ;dc_motor.c: 28: int PWMduty;
  4469                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4470                           
  4471                           ;incstack = 0
  4472  000FE6  C02E  FFD9         	movff	setMotorPWM@m,fsr2l
  4473  000FEA  C02F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4474  000FEE  50DF               	movf	indf2,w,c
  4475  000FF0  6E30               	movwf	??_setMotorPWM& (0+255),c
  4476  000FF2  5030               	movf	??_setMotorPWM,w,c
  4477  000FF4  6E20               	movwf	___wmul@multiplier,c
  4478  000FF6  6A21               	clrf	___wmul@multiplier+1,c
  4479  000FF8  EE20 F007          	lfsr	2,7
  4480  000FFC  502E               	movf	setMotorPWM@m,w,c
  4481  000FFE  26D9               	addwf	fsr2l,f,c
  4482  001000  502F               	movf	setMotorPWM@m+1,w,c
  4483  001002  22DA               	addwfc	fsr2h,f,c
  4484  001004  CFDE F022          	movff	postinc2,___wmul@multiplicand
  4485  001008  CFDD F023          	movff	postdec2,___wmul@multiplicand+1
  4486  00100C  EC13  F00C         	call	___wmul	;wreg free
  4487  001010  C020  F026         	movff	?___wmul,___awdiv@dividend
  4488  001014  C021  F027         	movff	?___wmul+1,___awdiv@dividend+1
  4489  001018  0E00               	movlw	0
  4490  00101A  6E29               	movwf	___awdiv@divisor+1,c
  4491  00101C  0E64               	movlw	100
  4492  00101E  6E28               	movwf	___awdiv@divisor,c
  4493  001020  ECF0  F009         	call	___awdiv	;wreg free
  4494  001024  C026  F035         	movff	?___awdiv,setMotorPWM@PWMduty
  4495  001028  C027  F036         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4496                           
  4497                           ;dc_motor.c: 32: if (m->direction)
  4498  00102C  EE20 F001          	lfsr	2,1
  4499  001030  502E               	movf	setMotorPWM@m,w,c
  4500  001032  26D9               	addwf	fsr2l,f,c
  4501  001034  502F               	movf	setMotorPWM@m+1,w,c
  4502  001036  22DA               	addwfc	fsr2h,f,c
  4503  001038  50DF               	movf	indf2,w,c
  4504  00103A  B4D8               	btfsc	status,2,c
  4505  00103C  D02C               	goto	l1849
  4506                           
  4507                           ;dc_motor.c: 33: {
  4508                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4509  00103E  EE20 F006          	lfsr	2,6
  4510  001042  502E               	movf	setMotorPWM@m,w,c
  4511  001044  26D9               	addwf	fsr2l,f,c
  4512  001046  502F               	movf	setMotorPWM@m+1,w,c
  4513  001048  22DA               	addwfc	fsr2h,f,c
  4514  00104A  50DF               	movf	indf2,w,c
  4515  00104C  6E30               	movwf	??_setMotorPWM& (0+255),c
  4516  00104E  0E01               	movlw	1
  4517  001050  6E31               	movwf	(??_setMotorPWM+1)& (0+255),c
  4518  001052  2A30               	incf	??_setMotorPWM,f,c
  4519  001054  D002               	goto	u1044
  4520  001056                     u1045:
  4521  001056  90D8               	bcf	status,0,c
  4522  001058  3631               	rlcf	??_setMotorPWM+1,f,c
  4523  00105A                     u1044:
  4524  00105A  2E30               	decfsz	??_setMotorPWM,f,c
  4525  00105C  D7FC               	goto	u1045
  4526  00105E  5031               	movf	??_setMotorPWM+1,w,c
  4527  001060  108A               	iorwf	3978,w,c	;volatile
  4528  001062  6E8A               	movwf	3978,c	;volatile
  4529                           
  4530                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4531  001064  EE20 F007          	lfsr	2,7
  4532  001068  502E               	movf	setMotorPWM@m,w,c
  4533  00106A  26D9               	addwf	fsr2l,f,c
  4534  00106C  502F               	movf	setMotorPWM@m+1,w,c
  4535  00106E  22DA               	addwfc	fsr2h,f,c
  4536  001070  CFDE F030          	movff	postinc2,??_setMotorPWM
  4537  001074  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4538  001078  C035  F032         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4539  00107C  C036  F033         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4540  001080  1E32               	comf	??_setMotorPWM+2,f,c
  4541  001082  1E33               	comf	??_setMotorPWM+3,f,c
  4542  001084  4A32               	infsnz	??_setMotorPWM+2,f,c
  4543  001086  2A33               	incf	??_setMotorPWM+3,f,c
  4544  001088  5030               	movf	??_setMotorPWM,w,c
  4545  00108A  2432               	addwf	??_setMotorPWM+2,w,c
  4546  00108C  6E35               	movwf	setMotorPWM@PWMduty,c
  4547  00108E  5031               	movf	??_setMotorPWM+1,w,c
  4548  001090  2033               	addwfc	??_setMotorPWM+3,w,c
  4549  001092  6E36               	movwf	setMotorPWM@PWMduty+1,c
  4550                           
  4551                           ;dc_motor.c: 36: }
  4552  001094  D014               	goto	l136
  4553  001096                     l1849:
  4554                           
  4555                           ;dc_motor.c: 37: else
  4556                           ;dc_motor.c: 38: {
  4557                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4558  001096  EE20 F006          	lfsr	2,6
  4559  00109A  502E               	movf	setMotorPWM@m,w,c
  4560  00109C  26D9               	addwf	fsr2l,f,c
  4561  00109E  502F               	movf	setMotorPWM@m+1,w,c
  4562  0010A0  22DA               	addwfc	fsr2h,f,c
  4563  0010A2  50DF               	movf	indf2,w,c
  4564  0010A4  6E30               	movwf	??_setMotorPWM& (0+255),c
  4565  0010A6  0E01               	movlw	1
  4566  0010A8  6E31               	movwf	(??_setMotorPWM+1)& (0+255),c
  4567  0010AA  2A30               	incf	??_setMotorPWM,f,c
  4568  0010AC  D002               	goto	u1054
  4569  0010AE                     u1055:
  4570  0010AE  90D8               	bcf	status,0,c
  4571  0010B0  3631               	rlcf	??_setMotorPWM+1,f,c
  4572  0010B2                     u1054:
  4573  0010B2  2E30               	decfsz	??_setMotorPWM,f,c
  4574  0010B4  D7FC               	goto	u1055
  4575  0010B6  5031               	movf	??_setMotorPWM+1,w,c
  4576  0010B8  0AFF               	xorlw	255
  4577  0010BA  148A               	andwf	3978,w,c	;volatile
  4578  0010BC  6E8A               	movwf	3978,c	;volatile
  4579  0010BE                     l136:
  4580                           
  4581                           ;dc_motor.c: 40: }
  4582                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4583  0010BE  EE20 F002          	lfsr	2,2
  4584  0010C2  502E               	movf	setMotorPWM@m,w,c
  4585  0010C4  26D9               	addwf	fsr2l,f,c
  4586  0010C6  502F               	movf	setMotorPWM@m+1,w,c
  4587  0010C8  22DA               	addwfc	fsr2h,f,c
  4588  0010CA  CFDE F030          	movff	postinc2,??_setMotorPWM
  4589  0010CE  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4590  0010D2  C030  FFD9         	movff	??_setMotorPWM,fsr2l
  4591  0010D6  C031  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4592  0010DA  4435               	rlncf	setMotorPWM@PWMduty,w,c
  4593  0010DC  46E8               	rlncf	wreg,f,c
  4594  0010DE  0BFC               	andlw	252
  4595  0010E0  6EDF               	movwf	indf2,c
  4596                           
  4597                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4598  0010E2  EE20 F004          	lfsr	2,4
  4599  0010E6  502E               	movf	setMotorPWM@m,w,c
  4600  0010E8  26D9               	addwf	fsr2l,f,c
  4601  0010EA  502F               	movf	setMotorPWM@m+1,w,c
  4602  0010EC  22DA               	addwfc	fsr2h,f,c
  4603  0010EE  CFDE F030          	movff	postinc2,??_setMotorPWM
  4604  0010F2  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4605  0010F6  C030  FFD9         	movff	??_setMotorPWM,fsr2l
  4606  0010FA  C031  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4607  0010FE  C035  F032         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4608  001102  C036  F033         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4609  001106  0E06               	movlw	6
  4610  001108  6E34               	movwf	(??_setMotorPWM+4)& (0+255),c
  4611  00110A                     u1065:
  4612  00110A  3433               	rlcf	??_setMotorPWM+3,w,c
  4613  00110C  3233               	rrcf	??_setMotorPWM+3,f,c
  4614  00110E  3232               	rrcf	??_setMotorPWM+2,f,c
  4615  001110  2E34               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4616  001112  D7FB               	goto	u1065
  4617  001114  5032               	movf	??_setMotorPWM+2,w,c
  4618  001116  6EDF               	movwf	indf2,c
  4619  001118  0012               	return		;funcret
  4620  00111A                     __end_of_setMotorPWM:
  4621                           	opt stack 0
  4622                           tblptru	equ	0xFF8
  4623                           tblptrh	equ	0xFF7
  4624                           tblptrl	equ	0xFF6
  4625                           tablat	equ	0xFF5
  4626                           prodh	equ	0xFF4
  4627                           prodl	equ	0xFF3
  4628                           intcon	equ	0xFF2
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           indf1	equ	0xFE7
  4632                           fsr1h	equ	0xFE2
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function ___wmul *****************
  4642 ;; Defined at:
  4643 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  multiplier      2   31[COMRAM] unsigned int 
  4646 ;;  multiplicand    2   33[COMRAM] unsigned int 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  product         2   35[COMRAM] unsigned int 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  2   31[COMRAM] unsigned int 
  4651 ;; Registers used:
  4652 ;;		wreg, status,2, status,0, prodl, prodh
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4658 ;;      Params:         4       0       0       0
  4659 ;;      Locals:         2       0       0       0
  4660 ;;      Temps:          0       0       0       0
  4661 ;;      Totals:         6       0       0       0
  4662 ;;Total ram usage:        6 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    2
  4665 ;; This function calls:
  4666 ;;		Nothing
  4667 ;; This function is called by:
  4668 ;;		_setMotorPWM
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text19
  4673  001826                     __ptext19:
  4674                           	opt stack 0
  4675  001826                     ___wmul:
  4676                           	opt stack 26
  4677                           
  4678                           ;incstack = 0
  4679  001826  5020               	movf	___wmul@multiplier,w,c
  4680  001828  0222               	mulwf	___wmul@multiplicand,c
  4681  00182A  CFF3 F024          	movff	prodl,___wmul@product
  4682  00182E  CFF4 F025          	movff	prodh,___wmul@product+1
  4683  001832  5020               	movf	___wmul@multiplier,w,c
  4684  001834  0223               	mulwf	___wmul@multiplicand+1,c
  4685  001836  50F3               	movf	prodl,w,c
  4686  001838  2625               	addwf	___wmul@product+1,f,c
  4687  00183A  5021               	movf	___wmul@multiplier+1,w,c
  4688  00183C  0222               	mulwf	___wmul@multiplicand,c
  4689  00183E  50F3               	movf	prodl,w,c
  4690  001840  2625               	addwf	___wmul@product+1,f,c
  4691  001842  C024  F020         	movff	___wmul@product,?___wmul
  4692  001846  C025  F021         	movff	___wmul@product+1,?___wmul+1
  4693  00184A  0012               	return	
  4694  00184C                     __end_of___wmul:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           indf1	equ	0xFE7
  4706                           fsr1h	equ	0xFE2
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function ___awdiv *****************
  4716 ;; Defined at:
  4717 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  dividend        2   37[COMRAM] int 
  4720 ;;  divisor         2   39[COMRAM] int 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  quotient        2   43[COMRAM] int 
  4723 ;;  sign            1   42[COMRAM] unsigned char 
  4724 ;;  counter         1   41[COMRAM] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2   37[COMRAM] int 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4734 ;;      Params:         4       0       0       0
  4735 ;;      Locals:         4       0       0       0
  4736 ;;      Temps:          0       0       0       0
  4737 ;;      Totals:         8       0       0       0
  4738 ;;Total ram usage:        8 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    2
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_setMotorPWM
  4745 ;;		_ScanWithRange
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text20
  4750  0013E0                     __ptext20:
  4751                           	opt stack 0
  4752  0013E0                     ___awdiv:
  4753                           	opt stack 26
  4754                           
  4755                           ;incstack = 0
  4756  0013E0  0E00               	movlw	0
  4757  0013E2  6E2B               	movwf	___awdiv@sign,c
  4758  0013E4  AE29               	btfss	___awdiv@divisor+1,7,c
  4759  0013E6  D006               	goto	l1807
  4760  0013E8  6C28               	negf	___awdiv@divisor,c
  4761  0013EA  1E29               	comf	___awdiv@divisor+1,f,c
  4762  0013EC  B0D8               	btfsc	status,0,c
  4763  0013EE  2A29               	incf	___awdiv@divisor+1,f,c
  4764  0013F0  0E01               	movlw	1
  4765  0013F2  6E2B               	movwf	___awdiv@sign,c
  4766  0013F4                     l1807:
  4767  0013F4  AE27               	btfss	___awdiv@dividend+1,7,c
  4768  0013F6  D006               	goto	l1813
  4769  0013F8  6C26               	negf	___awdiv@dividend,c
  4770  0013FA  1E27               	comf	___awdiv@dividend+1,f,c
  4771  0013FC  B0D8               	btfsc	status,0,c
  4772  0013FE  2A27               	incf	___awdiv@dividend+1,f,c
  4773  001400  0E01               	movlw	1
  4774  001402  1A2B               	xorwf	___awdiv@sign,f,c
  4775  001404                     l1813:
  4776  001404  0E00               	movlw	0
  4777  001406  6E2D               	movwf	___awdiv@quotient+1,c
  4778  001408  0E00               	movlw	0
  4779  00140A  6E2C               	movwf	___awdiv@quotient,c
  4780  00140C  5028               	movf	___awdiv@divisor,w,c
  4781  00140E  1029               	iorwf	___awdiv@divisor+1,w,c
  4782  001410  B4D8               	btfsc	status,2,c
  4783  001412  D01C               	goto	l1835
  4784  001414  0E01               	movlw	1
  4785  001416  6E2A               	movwf	___awdiv@counter,c
  4786  001418  D004               	goto	l1821
  4787  00141A                     l1819:
  4788  00141A  90D8               	bcf	status,0,c
  4789  00141C  3628               	rlcf	___awdiv@divisor,f,c
  4790  00141E  3629               	rlcf	___awdiv@divisor+1,f,c
  4791  001420  2A2A               	incf	___awdiv@counter,f,c
  4792  001422                     l1821:
  4793  001422  AE29               	btfss	___awdiv@divisor+1,7,c
  4794  001424  D7FA               	goto	l1819
  4795  001426                     l1823:
  4796  001426  90D8               	bcf	status,0,c
  4797  001428  362C               	rlcf	___awdiv@quotient,f,c
  4798  00142A  362D               	rlcf	___awdiv@quotient+1,f,c
  4799  00142C  5028               	movf	___awdiv@divisor,w,c
  4800  00142E  5C26               	subwf	___awdiv@dividend,w,c
  4801  001430  5029               	movf	___awdiv@divisor+1,w,c
  4802  001432  5827               	subwfb	___awdiv@dividend+1,w,c
  4803  001434  A0D8               	btfss	status,0,c
  4804  001436  D005               	goto	l1831
  4805  001438  5028               	movf	___awdiv@divisor,w,c
  4806  00143A  5E26               	subwf	___awdiv@dividend,f,c
  4807  00143C  5029               	movf	___awdiv@divisor+1,w,c
  4808  00143E  5A27               	subwfb	___awdiv@dividend+1,f,c
  4809  001440  802C               	bsf	___awdiv@quotient,0,c
  4810  001442                     l1831:
  4811  001442  90D8               	bcf	status,0,c
  4812  001444  3229               	rrcf	___awdiv@divisor+1,f,c
  4813  001446  3228               	rrcf	___awdiv@divisor,f,c
  4814  001448  2E2A               	decfsz	___awdiv@counter,f,c
  4815  00144A  D7ED               	goto	l1823
  4816  00144C                     l1835:
  4817  00144C  502B               	movf	___awdiv@sign,w,c
  4818  00144E  B4D8               	btfsc	status,2,c
  4819  001450  D004               	goto	l1839
  4820  001452  6C2C               	negf	___awdiv@quotient,c
  4821  001454  1E2D               	comf	___awdiv@quotient+1,f,c
  4822  001456  B0D8               	btfsc	status,0,c
  4823  001458  2A2D               	incf	___awdiv@quotient+1,f,c
  4824  00145A                     l1839:
  4825  00145A  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  4826  00145E  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  4827  001462  0012               	return	
  4828  001464                     __end_of___awdiv:
  4829                           	opt stack 0
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           indf1	equ	0xFE7
  4840                           fsr1h	equ	0xFE2
  4841                           fsr1l	equ	0xFE1
  4842                           indf2	equ	0xFDF
  4843                           postinc2	equ	0xFDE
  4844                           postdec2	equ	0xFDD
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function _grabRightIR *****************
  4850 ;; Defined at:
  4851 ;;		line 74 in file "IR_Reading.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  IR_signal       2   36[COMRAM] unsigned int 
  4856 ;;  i               1   38[COMRAM] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  2   31[COMRAM] unsigned int 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4866 ;;      Params:         2       0       0       0
  4867 ;;      Locals:         3       0       0       0
  4868 ;;      Temps:          3       0       0       0
  4869 ;;      Totals:         8       0       0       0
  4870 ;;Total ram usage:        8 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    2
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_ScanIR
  4877 ;;		_ScanWithRange
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text21
  4882  0014DA                     __ptext21:
  4883                           	opt stack 0
  4884  0014DA                     _grabRightIR:
  4885                           	opt stack 27
  4886                           
  4887                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4888                           
  4889                           ;incstack = 0
  4890  0014DA  0E00               	movlw	0
  4891  0014DC  6E26               	movwf	grabRightIR@IR_signal+1,c
  4892  0014DE  0E00               	movlw	0
  4893  0014E0  6E25               	movwf	grabRightIR@IR_signal,c
  4894                           
  4895                           ;IR_Reading.c: 77: unsigned char i=0;
  4896  0014E2  0E00               	movlw	0
  4897  0014E4  6E27               	movwf	grabRightIR@i,c
  4898                           
  4899                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4900  0014E6  0E00               	movlw	0
  4901  0014E8  6E27               	movwf	grabRightIR@i,c
  4902  0014EA                     l1949:
  4903  0014EA  0E03               	movlw	3
  4904  0014EC  6427               	cpfsgt	grabRightIR@i,c
  4905  0014EE  D001               	goto	l1953
  4906  0014F0  D01E               	goto	l1959
  4907  0014F2                     l1953:
  4908                           
  4909                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  4910  0014F2  5069               	movf	3945,w,c	;volatile
  4911  0014F4  6E22               	movwf	??_grabRightIR& (0+255),c
  4912  0014F6  6A23               	clrf	(??_grabRightIR+1)& (0+255),c
  4913  0014F8  0E07               	movlw	7
  4914  0014FA                     u1285:
  4915  0014FA  90D8               	bcf	status,0,c
  4916  0014FC  3622               	rlcf	??_grabRightIR,f,c
  4917  0014FE  3623               	rlcf	??_grabRightIR+1,f,c
  4918  001500  2EE8               	decfsz	wreg,f,c
  4919  001502  D7FB               	goto	u1285
  4920  001504  CF68 F024          	movff	3944,??_grabRightIR+2	;volatile
  4921  001508  90D8               	bcf	status,0,c
  4922  00150A  3224               	rrcf	??_grabRightIR+2,f,c
  4923  00150C  5024               	movf	??_grabRightIR+2,w,c
  4924  00150E  1222               	iorwf	??_grabRightIR,f,c
  4925  001510  0E00               	movlw	0
  4926  001512  1223               	iorwf	??_grabRightIR+1,f,c
  4927  001514  5022               	movf	??_grabRightIR,w,c
  4928  001516  2625               	addwf	grabRightIR@IR_signal,f,c
  4929  001518  5023               	movf	??_grabRightIR+1,w,c
  4930  00151A  2226               	addwfc	grabRightIR@IR_signal+1,f,c
  4931                           
  4932                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4933  00151C  0E82               	movlw	130
  4934  00151E  6E22               	movwf	??_grabRightIR& (0+255),c
  4935  001520  0EDE               	movlw	222
  4936  001522                     u2517:
  4937  001522  2EE8               	decfsz	wreg,f,c
  4938  001524  D7FE               	goto	u2517
  4939  001526  2E22               	decfsz	??_grabRightIR& (0+255),f,c
  4940  001528  D7FC               	goto	u2517
  4941  00152A  2A27               	incf	grabRightIR@i,f,c
  4942  00152C  D7DE               	goto	l1949
  4943  00152E                     l1959:
  4944                           
  4945                           ;IR_Reading.c: 83: }
  4946                           ;IR_Reading.c: 85: return IR_signal>>2;
  4947  00152E  C025  F022         	movff	grabRightIR@IR_signal,??_grabRightIR
  4948  001532  C026  F023         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4949  001536  90D8               	bcf	status,0,c
  4950  001538  3223               	rrcf	??_grabRightIR+1,f,c
  4951  00153A  3222               	rrcf	??_grabRightIR,f,c
  4952  00153C  90D8               	bcf	status,0,c
  4953  00153E  3223               	rrcf	??_grabRightIR+1,f,c
  4954  001540  3222               	rrcf	??_grabRightIR,f,c
  4955  001542  C022  F020         	movff	??_grabRightIR,?_grabRightIR
  4956  001546  C023  F021         	movff	??_grabRightIR+1,?_grabRightIR+1
  4957  00154A  0012               	return	
  4958  00154C                     __end_of_grabRightIR:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           prodh	equ	0xFF4
  4965                           prodl	equ	0xFF3
  4966                           intcon	equ	0xFF2
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           indf1	equ	0xFE7
  4970                           fsr1h	equ	0xFE2
  4971                           fsr1l	equ	0xFE1
  4972                           indf2	equ	0xFDF
  4973                           postinc2	equ	0xFDE
  4974                           postdec2	equ	0xFDD
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _grabLeftIR *****************
  4980 ;; Defined at:
  4981 ;;		line 90 in file "IR_Reading.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  IR_signal       2   36[COMRAM] unsigned int 
  4986 ;;  i               1   38[COMRAM] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  2   31[COMRAM] unsigned int 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4996 ;;      Params:         2       0       0       0
  4997 ;;      Locals:         3       0       0       0
  4998 ;;      Temps:          3       0       0       0
  4999 ;;      Totals:         8       0       0       0
  5000 ;;Total ram usage:        8 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    2
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_ScanIR
  5007 ;;		_ScanWithRange
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text22
  5012  00154C                     __ptext22:
  5013                           	opt stack 0
  5014  00154C                     _grabLeftIR:
  5015                           	opt stack 27
  5016                           
  5017                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5018                           
  5019                           ;incstack = 0
  5020  00154C  0E00               	movlw	0
  5021  00154E  6E26               	movwf	grabLeftIR@IR_signal+1,c
  5022  001550  0E00               	movlw	0
  5023  001552  6E25               	movwf	grabLeftIR@IR_signal,c
  5024                           
  5025                           ;IR_Reading.c: 93: unsigned char i=0;
  5026  001554  0E00               	movlw	0
  5027  001556  6E27               	movwf	grabLeftIR@i,c
  5028                           
  5029                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5030  001558  0E00               	movlw	0
  5031  00155A  6E27               	movwf	grabLeftIR@i,c
  5032  00155C                     l1933:
  5033  00155C  0E03               	movlw	3
  5034  00155E  6427               	cpfsgt	grabLeftIR@i,c
  5035  001560  D001               	goto	l1937
  5036  001562  D01E               	goto	l1943
  5037  001564                     l1937:
  5038                           
  5039                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5040  001564  5067               	movf	3943,w,c	;volatile
  5041  001566  6E22               	movwf	??_grabLeftIR& (0+255),c
  5042  001568  6A23               	clrf	(??_grabLeftIR+1)& (0+255),c
  5043  00156A  0E07               	movlw	7
  5044  00156C                     u1255:
  5045  00156C  90D8               	bcf	status,0,c
  5046  00156E  3622               	rlcf	??_grabLeftIR,f,c
  5047  001570  3623               	rlcf	??_grabLeftIR+1,f,c
  5048  001572  2EE8               	decfsz	wreg,f,c
  5049  001574  D7FB               	goto	u1255
  5050  001576  CF66 F024          	movff	3942,??_grabLeftIR+2	;volatile
  5051  00157A  90D8               	bcf	status,0,c
  5052  00157C  3224               	rrcf	??_grabLeftIR+2,f,c
  5053  00157E  5024               	movf	??_grabLeftIR+2,w,c
  5054  001580  1222               	iorwf	??_grabLeftIR,f,c
  5055  001582  0E00               	movlw	0
  5056  001584  1223               	iorwf	??_grabLeftIR+1,f,c
  5057  001586  5022               	movf	??_grabLeftIR,w,c
  5058  001588  2625               	addwf	grabLeftIR@IR_signal,f,c
  5059  00158A  5023               	movf	??_grabLeftIR+1,w,c
  5060  00158C  2226               	addwfc	grabLeftIR@IR_signal+1,f,c
  5061                           
  5062                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5063  00158E  0E82               	movlw	130
  5064  001590  6E22               	movwf	??_grabLeftIR& (0+255),c
  5065  001592  0EDE               	movlw	222
  5066  001594                     u2527:
  5067  001594  2EE8               	decfsz	wreg,f,c
  5068  001596  D7FE               	goto	u2527
  5069  001598  2E22               	decfsz	??_grabLeftIR& (0+255),f,c
  5070  00159A  D7FC               	goto	u2527
  5071  00159C  2A27               	incf	grabLeftIR@i,f,c
  5072  00159E  D7DE               	goto	l1933
  5073  0015A0                     l1943:
  5074                           
  5075                           ;IR_Reading.c: 99: }
  5076                           ;IR_Reading.c: 101: return IR_signal>>2;
  5077  0015A0  C025  F022         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5078  0015A4  C026  F023         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5079  0015A8  90D8               	bcf	status,0,c
  5080  0015AA  3223               	rrcf	??_grabLeftIR+1,f,c
  5081  0015AC  3222               	rrcf	??_grabLeftIR,f,c
  5082  0015AE  90D8               	bcf	status,0,c
  5083  0015B0  3223               	rrcf	??_grabLeftIR+1,f,c
  5084  0015B2  3222               	rrcf	??_grabLeftIR,f,c
  5085  0015B4  C022  F020         	movff	??_grabLeftIR,?_grabLeftIR
  5086  0015B8  C023  F021         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5087  0015BC  0012               	return	
  5088  0015BE                     __end_of_grabLeftIR:
  5089                           	opt stack 0
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           prodh	equ	0xFF4
  5095                           prodl	equ	0xFF3
  5096                           intcon	equ	0xFF2
  5097                           postinc0	equ	0xFEE
  5098                           wreg	equ	0xFE8
  5099                           indf1	equ	0xFE7
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           indf2	equ	0xFDF
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109 ;; *************** function _delay_tenth_s *****************
  5110 ;; Defined at:
  5111 ;;		line 28 in file "Movement.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  tenth_second    1    wreg     unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  tenth_second    1   32[COMRAM] unsigned char 
  5116 ;;  i               2   33[COMRAM] unsigned int 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;		None               void
  5119 ;; Registers used:
  5120 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5126 ;;      Params:         0       0       0       0
  5127 ;;      Locals:         3       0       0       0
  5128 ;;      Temps:          1       0       0       0
  5129 ;;      Totals:         4       0       0       0
  5130 ;;Total ram usage:        4 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    2
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_main
  5137 ;;		_ScanIR
  5138 ;;		_ScanWithRange
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text23
  5143  00173C                     __ptext23:
  5144                           	opt stack 0
  5145  00173C                     _delay_tenth_s:
  5146                           	opt stack 28
  5147                           
  5148                           ;incstack = 0
  5149                           ;delay_tenth_s@tenth_seconds stored from wreg
  5150  00173C  6E21               	movwf	delay_tenth_s@tenth_seconds,c
  5151                           
  5152                           ;Movement.c: 29: unsigned int i=0;
  5153  00173E  0E00               	movlw	0
  5154  001740  6E23               	movwf	delay_tenth_s@i+1,c
  5155  001742  0E00               	movlw	0
  5156  001744  6E22               	movwf	delay_tenth_s@i,c
  5157                           
  5158                           ;Movement.c: 30: for (i=1; i<=tenth_seconds*2; i++) {
  5159  001746  0E00               	movlw	0
  5160  001748  6E23               	movwf	delay_tenth_s@i+1,c
  5161  00174A  0E01               	movlw	1
  5162  00174C  6E22               	movwf	delay_tenth_s@i,c
  5163  00174E  D009               	goto	l1909
  5164  001750                     l1905:
  5165                           
  5166                           ;Movement.c: 32: _delay((unsigned long)((50)*(8000000/4000.0)));
  5167  001750  0E82               	movlw	130
  5168  001752  6E20               	movwf	??_delay_tenth_s& (0+255),c
  5169  001754  0EDE               	movlw	222
  5170  001756                     u2537:
  5171  001756  2EE8               	decfsz	wreg,f,c
  5172  001758  D7FE               	goto	u2537
  5173  00175A  2E20               	decfsz	??_delay_tenth_s& (0+255),f,c
  5174  00175C  D7FC               	goto	u2537
  5175  00175E  4A22               	infsnz	delay_tenth_s@i,f,c
  5176  001760  2A23               	incf	delay_tenth_s@i+1,f,c
  5177  001762                     l1909:
  5178  001762  5021               	movf	delay_tenth_s@tenth_seconds,w,c
  5179  001764  0D02               	mullw	2
  5180  001766  5022               	movf	delay_tenth_s@i,w,c
  5181  001768  5CF3               	subwf	prodl,w,c
  5182  00176A  5023               	movf	delay_tenth_s@i+1,w,c
  5183  00176C  58F4               	subwfb	prodh,w,c
  5184  00176E  A0D8               	btfss	status,0,c
  5185  001770  0012               	return	
  5186  001772  D7EE               	goto	l1905
  5187  001774                     __end_of_delay_tenth_s:
  5188                           	opt stack 0
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           postinc0	equ	0xFEE
  5197                           wreg	equ	0xFE8
  5198                           indf1	equ	0xFE7
  5199                           fsr1h	equ	0xFE2
  5200                           fsr1l	equ	0xFE1
  5201                           indf2	equ	0xFDF
  5202                           postinc2	equ	0xFDE
  5203                           postdec2	equ	0xFDD
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _InterruptHandlerLow *****************
  5209 ;; Defined at:
  5210 ;;		line 18 in file "main.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5224 ;;      Params:         0       0       0       0
  5225 ;;      Locals:         0       0       0       0
  5226 ;;      Temps:         17       0       0       0
  5227 ;;      Totals:        17       0       0       0
  5228 ;;Total ram usage:       17 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    1
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		Interrupt level 1
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	intcodelo
  5239  000018                     __pintcodelo:
  5240                           	opt stack 0
  5241  000018                     _InterruptHandlerLow:
  5242                           	opt stack 24
  5243                           
  5244                           ;incstack = 0
  5245  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5246  00001A  CFD8 F00F          	movff	status,??_InterruptHandlerLow
  5247  00001E  CFE8 F010          	movff	wreg,??_InterruptHandlerLow+1
  5248  000022  CFE0 F011          	movff	bsr,??_InterruptHandlerLow+2
  5249  000026  CFFA F012          	movff	pclath,??_InterruptHandlerLow+3
  5250  00002A  CFFB F013          	movff	pclatu,??_InterruptHandlerLow+4
  5251  00002E  CFE9 F014          	movff	fsr0l,??_InterruptHandlerLow+5
  5252  000032  CFEA F015          	movff	fsr0h,??_InterruptHandlerLow+6
  5253  000036  CFE1 F016          	movff	fsr1l,??_InterruptHandlerLow+7
  5254  00003A  CFE2 F017          	movff	fsr1h,??_InterruptHandlerLow+8
  5255  00003E  CFD9 F018          	movff	fsr2l,??_InterruptHandlerLow+9
  5256  000042  CFDA F019          	movff	fsr2h,??_InterruptHandlerLow+10
  5257  000046  CFF3 F01A          	movff	prodl,??_InterruptHandlerLow+11
  5258  00004A  CFF4 F01B          	movff	prodh,??_InterruptHandlerLow+12
  5259  00004E  CFF6 F01C          	movff	tblptrl,??_InterruptHandlerLow+13
  5260  000052  CFF7 F01D          	movff	tblptrh,??_InterruptHandlerLow+14
  5261  000056  CFF8 F01E          	movff	tblptru,??_InterruptHandlerLow+15
  5262  00005A  CFF5 F01F          	movff	tablat,??_InterruptHandlerLow+16
  5263                           
  5264                           ;main.c: 20: if (PIR1bits.RCIF) {
  5265  00005E  AA9E               	btfss	3998,5,c	;volatile
  5266  000060  D016               	goto	i1l66
  5267                           
  5268                           ;main.c: 21: ReceivedString[i]=RCREG;
  5269  000062  503E               	movf	_i,w,c	;volatile
  5270  000064  0D01               	mullw	1
  5271  000066  0EEA               	movlw	low _ReceivedString
  5272  000068  24F3               	addwf	prodl,w,c
  5273  00006A  6ED9               	movwf	fsr2l,c
  5274  00006C  0E01               	movlw	high _ReceivedString
  5275  00006E  20F4               	addwfc	prodh,w,c
  5276  000070  6EDA               	movwf	fsr2h,c
  5277  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  5278                           
  5279                           ;main.c: 22: RFID_Read=1;
  5280  000076  0E01               	movlw	1
  5281  000078  0101               	movlb	1	; () banked
  5282  00007A  6FE9               	movwf	_RFID_Read& (0+255),b	;volatile
  5283                           
  5284                           ; BSR set to: 1
  5285                           ;main.c: 23: if (i==15){
  5286  00007C  0E0F               	movlw	15
  5287  00007E  183E               	xorwf	_i,w,c	;volatile
  5288  000080  A4D8               	btfss	status,2,c
  5289  000082  D003               	goto	i1l2381
  5290                           
  5291                           ; BSR set to: 1
  5292                           ;main.c: 24: i=0;
  5293  000084  0E00               	movlw	0
  5294  000086  6E3E               	movwf	_i,c	;volatile
  5295                           
  5296                           ;main.c: 25: }else{
  5297  000088  D001               	goto	i1l2383
  5298  00008A                     i1l2381:
  5299                           
  5300                           ; BSR set to: 1
  5301                           ;main.c: 26: i++;
  5302  00008A  2A3E               	incf	_i,f,c	;volatile
  5303  00008C                     i1l2383:
  5304                           
  5305                           ; BSR set to: 1
  5306                           ;main.c: 27: }
  5307                           ;main.c: 28: PIR1bits.RCIF=0;
  5308  00008C  9A9E               	bcf	3998,5,c	;volatile
  5309  00008E                     i1l66:
  5310  00008E  C01F  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  5311  000092  C01E  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  5312  000096  C01D  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  5313  00009A  C01C  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  5314  00009E  C01B  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  5315  0000A2  C01A  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  5316  0000A6  C019  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  5317  0000AA  C018  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  5318  0000AE  C017  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  5319  0000B2  C016  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  5320  0000B6  C015  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  5321  0000BA  C014  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  5322  0000BE  C013  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  5323  0000C2  C012  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  5324  0000C6  C011  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  5325  0000CA  C010  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  5326  0000CE  C00F  FFD8         	movff	??_InterruptHandlerLow,status
  5327  0000D2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5328  0000D4  0010               	retfie	
  5329  0000D6                     __end_of_InterruptHandlerLow:
  5330                           	opt stack 0
  5331                           pclatu	equ	0xFFB
  5332                           pclath	equ	0xFFA
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           postinc0	equ	0xFEE
  5341                           fsr0h	equ	0xFEA
  5342                           fsr0l	equ	0xFE9
  5343                           wreg	equ	0xFE8
  5344                           indf1	equ	0xFE7
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           bsr	equ	0xFE0
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function _InterruptHandlerHigh *****************
  5356 ;; Defined at:
  5357 ;;		line 34 in file "main.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;		None
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;		None               void
  5364 ;; Registers used:
  5365 ;;		wreg, status,2
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5371 ;;      Params:         0       0       0       0
  5372 ;;      Locals:         0       0       0       0
  5373 ;;      Temps:         14       0       0       0
  5374 ;;      Totals:        14       0       0       0
  5375 ;;Total ram usage:       14 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; This function calls:
  5378 ;;		Nothing
  5379 ;; This function is called by:
  5380 ;;		Interrupt level 2
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	intcode
  5385  000008                     __pintcode:
  5386                           	opt stack 0
  5387  000008                     _InterruptHandlerHigh:
  5388                           	opt stack 24
  5389                           
  5390                           ;incstack = 0
  5391  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5392  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  5393  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  5394  000012  EF32  F00A         	goto	int_func
  5395                           pclatu	equ	0xFFB
  5396                           pclath	equ	0xFFA
  5397                           tblptru	equ	0xFF8
  5398                           tblptrh	equ	0xFF7
  5399                           tblptrl	equ	0xFF6
  5400                           tablat	equ	0xFF5
  5401                           prodh	equ	0xFF4
  5402                           prodl	equ	0xFF3
  5403                           intcon	equ	0xFF2
  5404                           postinc0	equ	0xFEE
  5405                           fsr0h	equ	0xFEA
  5406                           fsr0l	equ	0xFE9
  5407                           wreg	equ	0xFE8
  5408                           indf1	equ	0xFE7
  5409                           fsr1h	equ	0xFE2
  5410                           fsr1l	equ	0xFE1
  5411                           bsr	equ	0xFE0
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419                           	psect	intcode_body
  5420  001464                     __pintcode_body:
  5421                           	opt stack 24
  5422  001464                     int_func:
  5423                           	opt stack 24
  5424  001464  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  5425  001468  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  5426  00146C  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  5427  001470  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  5428  001474  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  5429  001478  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  5430  00147C  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  5431  001480  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  5432  001484  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  5433  001488  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  5434  00148C  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  5435  001490  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  5436                           
  5437                           ;main.c: 35: if (INTCONbits.INT0IF) {
  5438  001494  A2F2               	btfss	intcon,1,c	;volatile
  5439  001496  D003               	goto	i2l70
  5440                           
  5441                           ;main.c: 36: start=1;
  5442  001498  0E01               	movlw	1
  5443  00149A  6E3F               	movwf	_start,c	;volatile
  5444                           
  5445                           ;main.c: 37: INTCONbits.INT0IF=0;
  5446  00149C  92F2               	bcf	intcon,1,c	;volatile
  5447  00149E                     i2l70:
  5448  00149E  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  5449  0014A2  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  5450  0014A6  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  5451  0014AA  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  5452  0014AE  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  5453  0014B2  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  5454  0014B6  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  5455  0014BA  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  5456  0014BE  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  5457  0014C2  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  5458  0014C6  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  5459  0014CA  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  5460  0014CE  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  5461  0014D2  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  5462  0014D6  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5463  0014D8  0011               	retfie		f
  5464  0014DA                     __end_of_InterruptHandlerHigh:
  5465                           	opt stack 0
  5466                           pclatu	equ	0xFFB
  5467                           pclath	equ	0xFFA
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           fsr0h	equ	0xFEA
  5477                           fsr0l	equ	0xFE9
  5478                           wreg	equ	0xFE8
  5479                           indf1	equ	0xFE7
  5480                           fsr1h	equ	0xFE2
  5481                           fsr1l	equ	0xFE1
  5482                           bsr	equ	0xFE0
  5483                           indf2	equ	0xFDF
  5484                           postinc2	equ	0xFDE
  5485                           postdec2	equ	0xFDD
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           pclatu	equ	0xFFB
  5490                           pclath	equ	0xFFA
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           prodh	equ	0xFF4
  5496                           prodl	equ	0xFF3
  5497                           intcon	equ	0xFF2
  5498                           postinc0	equ	0xFEE
  5499                           fsr0h	equ	0xFEA
  5500                           fsr0l	equ	0xFE9
  5501                           wreg	equ	0xFE8
  5502                           indf1	equ	0xFE7
  5503                           fsr1h	equ	0xFE2
  5504                           fsr1l	equ	0xFE1
  5505                           bsr	equ	0xFE0
  5506                           indf2	equ	0xFDF
  5507                           postinc2	equ	0xFDE
  5508                           postdec2	equ	0xFDD
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513                           	psect	rparam
  5514  0000                     pclatu	equ	0xFFB
  5515                           pclath	equ	0xFFA
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           fsr0h	equ	0xFEA
  5525                           fsr0l	equ	0xFE9
  5526                           wreg	equ	0xFE8
  5527                           indf1	equ	0xFE7
  5528                           fsr1h	equ	0xFE2
  5529                           fsr1l	equ	0xFE1
  5530                           bsr	equ	0xFE0
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           postdec2	equ	0xFDD
  5534                           fsr2h	equ	0xFDA
  5535                           fsr2l	equ	0xFD9
  5536                           status	equ	0xFD8
  5537                           
  5538                           	psect	temp
  5539  000040                     btemp:
  5540                           	opt stack 0
  5541  000040                     	ds	1
  5542  0000                     int$flags	set	btemp
  5543                           pclatu	equ	0xFFB
  5544                           pclath	equ	0xFFA
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           intcon	equ	0xFF2
  5552                           postinc0	equ	0xFEE
  5553                           fsr0h	equ	0xFEA
  5554                           fsr0l	equ	0xFE9
  5555                           wreg	equ	0xFE8
  5556                           indf1	equ	0xFE7
  5557                           fsr1h	equ	0xFE2
  5558                           fsr1l	equ	0xFE1
  5559                           bsr	equ	0xFE0
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    6
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      63
    BANK0           160     28      44
    BANK1           256    233     250
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S345DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S345DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_ScanWithRange
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               235   235      0   69775
                                             26 BANK0      2     2      0
                                              0 BANK1    233   233      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             37 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             35 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             31 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3291
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             31 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             31 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       24    17      7   29107
                                             59 COMRAM     2     2      0
                                              4 BANK0     22    15      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              10     6      4   25685
                                             59 COMRAM     2     2      0
                                              4 BANK0      8     4      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8996
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    9766
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    5335
                                             54 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2859
                                             54 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1787
                                             45 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     906
                                             37 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             31 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             31 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             31 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E9      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      2C       5       27.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      3F       1       67.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165       3        0.0%
DATA                 0      0     165      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 16:44:10 2018

                   ?_grabRightIR 0020                                _i 003E  
                             l73 0A9C                     ___awdiv@sign 002B  
                             bsr 000FE0              ___wmul@multiplicand 0022  
                    main@Message 01C8                              l136 10BE  
                            l166 1610                      grabLeftIR@i 0027  
                            prod 000FF3                              wreg 000FE8  
                   main@MoveTime 0164                     main@MoveType 0100  
                           l2033 172A                             l3001 0D54  
                           l2043 1814                             l2029 1718  
                           l3005 0D68                             l2355 12F4  
                           l1821 1422                             l1813 1404  
                           l2701 076C                             l1831 1442  
                           l1823 1426                             l1807 13F4  
                           l2367 134C                             l2359 12FC  
                           l1905 1750                             l2641 052C  
                           l2633 04A0                             l1819 141A  
                           l1835 144C                             l1909 1762  
                           l1933 155C                             l2733 0884  
                           l2709 0810                             l2717 0826  
                           l2637 04E6                             l1943 15A0  
                           l1839 145A                             l1863 15D8  
                           l2823 0EE8                             l2815 0E92  
                           l2727 0880                             l2903 0AA2  
                           l1937 1564                             l1953 14F2  
                           l1849 1096                             l1881 136A  
                           l2809 0E8E                             l2841 0F44  
                           l2761 096E                             l2673 0684  
                           l2665 063E                             l2657 059A  
                           l1867 15F0                             l1859 15C0  
                           l1891 13A2                             l2851 0F9A  
                           l1949 14EA                             l1885 1382  
                           l1877 1352                             l2829 0EEC  
                           l2749 08D8                             l2941 0BAC  
                           l1959 152E                             l2767 0972  
                           l2687 072C                             l2679 0688  
                           l2783 09FA                             l2927 0B2E  
                           l2857 0F9E                             l2953 0C02  
                           l2945 0BD6                             l2937 0B6A  
                           l2963 0C62                             l2869 0FE2  
                           l2973 0CAC                             l2949 0BE6  
                           l2975 0CB2                             l2967 0C6C  
                           l2985 0CD8                             l2979 0CBC  
                           l2987 0CE0                             l2995 0D2C  
                           u1044 105A                             u1045 1056  
                           u1205 118C                             u1054 10B2  
                           u1055 10AE                             u1215 11BC  
                           u1065 110A                             u1155 1124  
                           u1235 17B0                             u1236 17B2  
                           u1325 1810                             u1165 1132  
                           u1326 1812                             _LATB 000F8A  
                           u1255 156C                             u1175 1150  
                           u1345 1822                             u1185 115E  
                           u1346 1824                             u1195 117E  
                           u2260 0C2C                             u1285 14FA  
                           u2270 0C40                             u2262 0C2E  
                           u2407 1258                             u2272 0C42  
                           u2417 126E                             u2507 160A  
                           u2427 1282                             u2347 11F2  
                           u2517 1522                             u2437 1294  
                           u2357 1208                             u2527 1594  
                           u2447 17BE                             u2367 1218  
                           u2537 1756                             u2457 17CE  
                           u2377 1226                             u2467 11D8  
                           u2387 1234                             u2477 188E  
                           u2397 1246                             u2487 171E  
                           u2497 139C                             i1l66 008E  
                           i2l70 149E                             _main 09FE  
                  main@ScanAngle 01D2                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 0040  
                           _stop 1350                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 00D6                   delay_s@seconds 0021  
                   ___param_bank 000010                  __end_of_SendLCD 17D6  
             ScanWithRange@F3721 0084               ScanWithRange@F3723 0088  
             ScanWithRange@F3719 0080                      ScanIR@F3713 007C  
                          ?_main 0001                  __end_of___awdiv 1464  
                          ?_stop 0037                  ___awdiv@divisor 0028  
                          _PDC0H 000F78                            _PDC1H 000F76  
                          _PDC0L 000F79                            _PDC1L 000F77  
                          _T5CON 000FB7                     grabRightIR@i 0027  
                ___awdiv@counter 002A                            _RCREG 000FAE  
                          _E_TOG 188A                            _SPBRG 000FAF  
                          _TRISC 000F94                            _TXREG 000FAD  
                __end_of_delay_s 173C                  __end_of_initLCD 129C  
                          _start 003F                            main@i 01D6  
                          tablat 000FF5                            status 000FD8  
         __size_of_ScanWithRange 06F6                  __initialization 17D6  
                   __end_of_main 0D86                     __end_of_stop 13E0  
                 delay_tenth_s@i 0022                   __CFG_OSC$IRCIO 000000  
           __end_of_enableSensor 1826              VerifySignal@hexByte 0029  
                         ??_main 007A                           ??_stop 003B  
                  __activetblptr 000002                    ?_initMotorPWM 0001  
                         ?_E_TOG 0001                     ?_setMotorPWM 002E  
         __size_of_fullSpeedBack 003A                 ___awdiv@dividend 0026  
__end_of_DirectionFoundThreshold 0305                           i1l2381 008A  
                         i1l2383 008C                   __CFG_WDTEN$OFF 000000  
          __end_of_delay_tenth_s 1774                           _LCDout 111A  
                    SendLCD@Byte 0025  __end_of_DirectionFoundTolerance 0307  
                         _OSCCON 000FD3                           _PTCON0 000F7F  
                         _PTCON1 000F7E                           _SPBRGH 000FB0  
                         _PTPERH 000F7A                           _PTPERL 000F7B  
                    SendLCD@type 0024                        ??_SendLCD 0025  
                         _ScanIR 0D86                           ___wmul 1826  
                      ??___awdiv 002A                 __end_of_initRFID 188A  
                         _initIR 184C             __size_of_grabRightIR 0072  
                         clear_0 17DC                           clear_1 17E8  
               ___awdiv@quotient 002C                        ??_delay_s 0020  
                         main@mL 01D7                           main@mR 01E0  
                 ??_initMotorPWM 0020                        ??_initLCD 0026  
                  _ScanWithRange 0308                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           stop@mL 0037  
                         stop@mR 0039                 __end_of_turnLeft 16CA  
                fullSpeedBack@mL 0060                  fullSpeedBack@mR 0062  
                     __accesstop 0060          __end_of__initialization 17F2  
                  ___rparam_used 000001                    __end_of_E_TOG 1898  
                 __pcstackCOMRAM 0001                    _fullSpeedBack 16CA  
                 ?_ScanWithRange 0064             VerifySignal@checksum 0028  
                        ??_E_TOG 0020    __size_of_InterruptHandlerHigh 14D2  
    __end_of_InterruptHandlerLow 00D6       delay_tenth_s@tenth_seconds 0021  
                     __pbssBANK0 007C                       __pbssBANK1 01E9  
                        ?_LCDout 0001                          ?_ScanIR 0064  
                 ?_fullSpeedBack 0060            __size_of_enableSensor 0026  
                        ?___wmul 0020              grabLeftIR@IR_signal 0025  
                        _CAP1CON 000F63                          _CAP2CON 000F62  
                        ?_initIR 0001          __size_of_fullSpeedAhead 0070  
                     _grabLeftIR 154C                          _PWMCON0 000F6F  
                        _PWMCON1 000F6E                        ?_initRFID 0001  
           __size_of_setMotorPWM 0134                  __size_of_LCDout 00C6  
                   _enableSensor 1800               __size_of_turnRight 004E  
           __end_of_initMotorPWM 17A6                          _SendLCD 17A6  
                        __Hparam 0000                          __Lparam 0000  
                __size_of_ScanIR 0260                          ___awdiv 13E0  
                __size_of___wmul 0026                     __psmallconst 0300  
                __size_of_initIR 0022                          __pcinit 17D6  
                ??_ScanWithRange 003C                          _delay_s 1704  
                        __ramtop 0300                        ?_turnLeft 0060  
                        __ptext0 09FE                          __ptext1 186E  
                        __ptext2 1774                          __ptext3 11E0  
                        __ptext4 17A6                          __ptext5 111A  
                        __ptext6 188A                          __ptext7 184C  
                        __ptext8 16CA                          __ptext9 1800  
                        _initLCD 11E0                     LCDout@number 0023  
                  ?_VerifySignal 0020                   __pintcode_body 1464  
           end_of_initialization 17F2               setMotorPWM@PWMduty 0035  
                     ??_initRFID 0020                    __Lmediumconst 0000  
                        int_func 1464               ScanIR@SensorResult 0068  
                ??_fullSpeedBack 003C                        _RFID_Read 01E9  
                      _RCSTAbits 000FAB                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     ??_turnLeft 003C                __end_of_turnRight 167C  
                    ?_grabLeftIR 0020                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
                 ??_VerifySignal 0022                 fullSpeedAhead@mL 0037  
               fullSpeedAhead@mR 0039                   __end_of_LCDout 11E0  
                      _TXSTAbits 000FAC                    ??_grabRightIR 0022  
                 __end_of_ScanIR 0FE6                   _fullSpeedAhead 15BE  
        _DirectionFoundThreshold 0303                   _ReceivedString 01EA  
                 __end_of___wmul 184C                      _BAUDCONbits 000FAA  
        _DirectionFoundTolerance 0305                   __end_of_initIR 186E  
         __size_of_delay_tenth_s 0038              start_initialization 17D6  
             VerifySignal@Signal 0020            __size_of_initMotorPWM 0032  
                       ??_LCDout 0020     __end_of_InterruptHandlerHigh 14DA  
                       ??_ScanIR 003C           __end_of_fullSpeedAhead 162E  
            __size_of_grabLeftIR 0072                         ??___wmul 0024  
                       ??_initIR 0020              __end_of_grabRightIR 154C  
                   _initMotorPWM 1774                      __pbssCOMRAM 003E  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
   __size_of_InterruptHandlerLow 00BE                    _delay_tenth_s 173C  
              __size_of_initRFID 001C                         ?_SendLCD 0024  
                ?_fullSpeedAhead 0037                        __pintcode 0008  
           __end_of_VerifySignal 1350                         ?___awdiv 0026  
   __end_of_ClearSignalThreshold 0303                      __pintcodelo 0018  
                       ?_delay_s 0001                         _CAP1BUFH 000F69  
                       _CAP1BUFL 000F68                         _CAP2BUFH 000F67  
                       _CAP2BUFL 000F66                         ?_initLCD 0001  
                    __smallconst 0300                   __size_of_E_TOG 000E  
              __size_of_turnLeft 004E       ScanWithRange@SensorResultC 0072  
     ScanWithRange@SensorResultL 006E       ScanWithRange@SensorResultR 0076  
                  ??_setMotorPWM 0030                   ?_delay_tenth_s 0001  
                 ___wmul@product 0024                         _LATAbits 000F89  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                       _LATEbits 000F8D                         _IPR1bits 000F9F  
                       _PIE1bits 000F9D                      turnRight@mL 0060  
                    turnRight@mR 0062                         _PIR1bits 000F9E  
                       _RCONbits 000FD0                      _grabRightIR 14DA  
           grabRightIR@IR_signal 0025                ___wmul@multiplier 0020  
          __end_of_ScanWithRange 09FE                     setMotorPWM@m 002E  
          ScanWithRange@MoveTime 0069             _InterruptHandlerHigh 0008  
                       ScanIR@mL 0064                         ScanIR@mR 0066  
                   ??_grabLeftIR 0022                        _turnRight 162E  
            __end_of_setMotorPWM 111A                         __Hrparam 0000  
               __size_of_SendLCD 0030                         __Lrparam 0000  
          __end_of_fullSpeedBack 1704               __end_of_grabLeftIR 15BE  
               __size_of___awdiv 0084                       _ANSEL0bits 000FB8  
               __size_of_delay_s 0038            ?_InterruptHandlerHigh 0001  
               __size_of_initLCD 00BC                       ?_turnRight 0060  
                       __ptext10 1704                         __ptext11 129C  
                       __ptext20 13E0                         __ptext12 0308  
                       __ptext21 14DA                         __ptext13 0D86  
                       __ptext22 154C                         __ptext14 162E  
                       __ptext23 173C                         __ptext15 167C  
                       __ptext16 1350                         __ptext17 15BE  
                       __ptext18 0FE6                         __ptext19 1826  
                ??_delay_tenth_s 0020                         _initRFID 186E  
           _ClearSignalThreshold 0301                    __size_of_main 0388  
      ScanWithRange@ResultFalseC 006C               main@DirectionFound 01D5  
      ScanWithRange@ResultFalseL 006B        ScanWithRange@ResultFalseR 006D  
                  __size_of_stop 0090                       turnLeft@mL 0060  
                     turnLeft@mR 0062            __size_of_VerifySignal 00B4  
                       delay_s@i 0022                         int$flags 0040  
                       main@Move 01D4                         main@mode 01D3  
            _InterruptHandlerLow 0018                         _turnLeft 167C  
                ScanWithRange@mL 0064                  ScanWithRange@mR 0066  
             enableSensor@sensor 0021               enableSensor@status 0020  
                  VerifySignal@i 002B                       _INTCONbits 000FF2  
     ScanWithRange@tenth_seconds 0068                      _setMotorPWM 0FE6  
                   _VerifySignal 129C                         intlevel1 0000  
                       intlevel2 0000             ?_InterruptHandlerLow 0001  
                  ?_enableSensor 0020                 ??_fullSpeedAhead 003B  
                     _OSCCONbits 000FD3           ??_InterruptHandlerHigh 0001  
                    ??_turnRight 003C            ??_InterruptHandlerLow 000F  
                 ??_enableSensor 0021  
