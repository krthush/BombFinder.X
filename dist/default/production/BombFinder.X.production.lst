

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 23:36:21 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           	psect	smallconst
    51  000300                     __psmallconst:
    52                           	opt stack 0
    53  000300  00                 	db	0
    54  000301                     _dpowers:
    55                           	opt stack 0
    56  000301  0001               	dw	1
    57  000303  000A               	dw	10
    58  000305  0064               	dw	100
    59  000307  03E8               	dw	1000
    60  000309  2710               	dw	10000
    61  00030B                     __end_of_dpowers:
    62                           	opt stack 0
    63  00030B                     _ClearSignalThreshold:
    64                           	opt stack 0
    65  00030B  00C8               	dw	200
    66  00030D                     __end_of_ClearSignalThreshold:
    67                           	opt stack 0
    68  00030D                     _DirectionFoundThreshold:
    69                           	opt stack 0
    70  00030D  09C4               	dw	2500
    71  00030F                     __end_of_DirectionFoundThreshold:
    72                           	opt stack 0
    73  00030F                     _DirectionFoundTolerance:
    74                           	opt stack 0
    75  00030F  03E8               	dw	1000
    76  000311                     __end_of_DirectionFoundTolerance:
    77                           	opt stack 0
    78  0000                     _ANSEL0bits	set	4024
    79  0000                     _BAUDCONbits	set	4010
    80  0000                     _CAP1BUFH	set	3945
    81  0000                     _CAP1BUFL	set	3944
    82  0000                     _CAP1CON	set	3939
    83  0000                     _CAP2BUFH	set	3943
    84  0000                     _CAP2BUFL	set	3942
    85  0000                     _CAP2CON	set	3938
    86  0000                     _INTCONbits	set	4082
    87  0000                     _IPR1bits	set	3999
    88  0000                     _LATAbits	set	3977
    89  0000                     _LATB	set	3978
    90  0000                     _LATCbits	set	3979
    91  0000                     _LATDbits	set	3980
    92  0000                     _LATEbits	set	3981
    93  0000                     _OSCCON	set	4051
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _PIE1bits	set	3997
    96  0000                     _PIR1bits	set	3998
    97  0000                     _PTCON0	set	3967
    98  0000                     _PTCON1	set	3966
    99  0000                     _PTPERH	set	3962
   100  0000                     _PTPERL	set	3963
   101  0000                     _PWMCON0	set	3951
   102  0000                     _PWMCON1	set	3950
   103  0000                     _RCONbits	set	4048
   104  0000                     _RCREG	set	4014
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _SPBRG	set	4015
   107  0000                     _SPBRGH	set	4016
   108  0000                     _T5CON	set	4023
   109  0000                     _TRISAbits	set	3986
   110  0000                     _TRISBbits	set	3987
   111  0000                     _TRISC	set	3988
   112  0000                     _TRISCbits	set	3988
   113  0000                     _TRISDbits	set	3989
   114  0000                     _TRISEbits	set	3990
   115  0000                     _TXREG	set	4013
   116  0000                     _TXSTAbits	set	4012
   117  0000                     _PDC0H	set	3960
   118  0000                     _PDC0L	set	3961
   119  0000                     _PDC1H	set	3958
   120  0000                     _PDC1L	set	3959
   121  000311                     STR_8:
   122  000311  20                 	db	32
   123  000312  20                 	db	32
   124  000313  20                 	db	32
   125  000314  20                 	db	32
   126  000315  20                 	db	32
   127  000316  20                 	db	32
   128  000317  53                 	db	83	;'S'
   129  000318  63                 	db	99	;'c'
   130  000319  61                 	db	97	;'a'
   131  00031A  6E                 	db	110	;'n'
   132  00031B  57                 	db	87	;'W'
   133  00031C  69                 	db	105	;'i'
   134  00031D  74                 	db	116	;'t'
   135  00031E  68                 	db	104	;'h'
   136  00031F  52                 	db	82	;'R'
   137  000320  61                 	db	97	;'a'
   138  000321  6E                 	db	110	;'n'
   139  000322  67                 	db	103	;'g'
   140  000323  65                 	db	101	;'e'
   141  000324  00                 	db	0
   142  000325                     STR_4:
   143  000325  20                 	db	32
   144  000326  20                 	db	32
   145  000327  20                 	db	32
   146  000328  20                 	db	32
   147  000329  20                 	db	32
   148  00032A  20                 	db	32
   149  00032B  46                 	db	70	;'F'
   150  00032C  6F                 	db	111	;'o'
   151  00032D  75                 	db	117	;'u'
   152  00032E  6E                 	db	110	;'n'
   153  00032F  64                 	db	100	;'d'
   154  000330  20                 	db	32
   155  000331  42                 	db	66	;'B'
   156  000332  6F                 	db	111	;'o'
   157  000333  6D                 	db	109	;'m'
   158  000334  62                 	db	98	;'b'
   159  000335  21                 	db	33
   160  000336  00                 	db	0
   161  000337                     STR_5:
   162  000337  20                 	db	32
   163  000338  20                 	db	32
   164  000339  20                 	db	32
   165  00033A  20                 	db	32
   166  00033B  20                 	db	32
   167  00033C  20                 	db	32
   168  00033D  47                 	db	71	;'G'
   169  00033E  6F                 	db	111	;'o'
   170  00033F  69                 	db	105	;'i'
   171  000340  6E                 	db	110	;'n'
   172  000341  67                 	db	103	;'g'
   173  000342  20                 	db	32
   174  000343  48                 	db	72	;'H'
   175  000344  6F                 	db	111	;'o'
   176  000345  6D                 	db	109	;'m'
   177  000346  65                 	db	101	;'e'
   178  000347  00                 	db	0
   179  000348                     STR_3:
   180  000348  20                 	db	32
   181  000349  20                 	db	32
   182  00034A  20                 	db	32
   183  00034B  20                 	db	32
   184  00034C  20                 	db	32
   185  00034D  20                 	db	32
   186  00034E  20                 	db	32
   187  00034F  53                 	db	83	;'S'
   188  000350  65                 	db	101	;'e'
   189  000351  61                 	db	97	;'a'
   190  000352  72                 	db	114	;'r'
   191  000353  63                 	db	99	;'c'
   192  000354  68                 	db	104	;'h'
   193  000355  69                 	db	105	;'i'
   194  000356  6E                 	db	110	;'n'
   195  000357  67                 	db	103	;'g'
   196  000358  00                 	db	0
   197  000359                     STR_6:
   198  000359  20                 	db	32
   199  00035A  20                 	db	32
   200  00035B  20                 	db	32
   201  00035C  20                 	db	32
   202  00035D  20                 	db	32
   203  00035E  20                 	db	32
   204  00035F  20                 	db	32
   205  000360  20                 	db	32
   206  000361  20                 	db	32
   207  000362  53                 	db	83	;'S'
   208  000363  63                 	db	99	;'c'
   209  000364  61                 	db	97	;'a'
   210  000365  6E                 	db	110	;'n'
   211  000366  49                 	db	73	;'I'
   212  000367  52                 	db	82	;'R'
   213  000368  00                 	db	0
   214  000369                     STR_2:
   215  000369  20                 	db	32
   216  00036A  20                 	db	32
   217  00036B  20                 	db	32
   218  00036C  20                 	db	32
   219  00036D  20                 	db	32
   220  00036E  20                 	db	32
   221  00036F  20                 	db	32
   222  000370  20                 	db	32
   223  000371  54                 	db	84	;'T'
   224  000372  6F                 	db	111	;'o'
   225  000373  20                 	db	32
   226  000374  47                 	db	71	;'G'
   227  000375  6F                 	db	111	;'o'
   228  000376  21                 	db	33
   229  000377  00                 	db	0
   230  000378                     STR_1:
   231  000378  20                 	db	32
   232  000379  20                 	db	32
   233  00037A  20                 	db	32
   234  00037B  20                 	db	32
   235  00037C  20                 	db	32
   236  00037D  20                 	db	32
   237  00037E  20                 	db	32
   238  00037F  20                 	db	32
   239  000380  52                 	db	82	;'R'
   240  000381  65                 	db	101	;'e'
   241  000382  61                 	db	97	;'a'
   242  000383  64                 	db	100	;'d'
   243  000384  79                 	db	121	;'y'
   244  000385  00                 	db	0
   245  000386                     STR_7:
   246  000386  20                 	db	32
   247  000387  20                 	db	32
   248  000388  20                 	db	32
   249  000389  20                 	db	32
   250  00038A  20                 	db	32
   251  00038B  25                 	db	37
   252  00038C  64                 	db	100	;'d'
   253  00038D  2C                 	db	44
   254  00038E  20                 	db	32
   255  00038F  25                 	db	37
   256  000390  64                 	db	100	;'d'
   257  000391  00                 	db	0
   258  0000                     
   259                           ; #config settings
   260  000392  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           	psect	cinit
   263  001F74                     __pcinit:
   264                           	opt stack 0
   265  001F74                     start_initialization:
   266                           	opt stack 0
   267  001F74                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK1 (17 bytes)
   271  001F74  EE01  F0E8         	lfsr	0,__pbssBANK1
   272  001F78  0E11               	movlw	17
   273  001F7A                     clear_0:
   274  001F7A  6AEE               	clrf	postinc0,c
   275  001F7C  06E8               	decf	wreg,f,c
   276  001F7E  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to BANK0 (16 bytes)
   279  001F80  EE00  F0AC         	lfsr	0,__pbssBANK0
   280  001F84  0E10               	movlw	16
   281  001F86                     clear_1:
   282  001F86  6AEE               	clrf	postinc0,c
   283  001F88  06E8               	decf	wreg,f,c
   284  001F8A  E1FD               	bnz	clear_1
   285                           
   286                           ; Clear objects allocated to COMRAM (2 bytes)
   287  001F8C  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   288  001F8E  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   289  001F90                     end_of_initialization:
   290                           	opt stack 0
   291  001F90                     __end_of__initialization:
   292                           	opt stack 0
   293  001F90  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   294  001F92  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   295  001F94  0E00               	movlw	low (__Lmediumconst shr (0+16))
   296  001F96  6EF8               	movwf	tblptru,c
   297  001F98  0100               	movlb	0
   298  001F9A  EF24  F006         	goto	_main	;jump to C main() function
   299                           tblptru	equ	0xFF8
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           
   303                           	psect	bssCOMRAM
   304  00003A                     __pbssCOMRAM:
   305                           	opt stack 0
   306  00003A                     _i:
   307                           	opt stack 0
   308  00003A                     	ds	1
   309  00003B                     _mode:
   310                           	opt stack 0
   311  00003B                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	bssBANK0
   317  0000AC                     __pbssBANK0:
   318                           	opt stack 0
   319  0000AC                     ScanIR@F3878:
   320                           	opt stack 0
   321  0000AC                     	ds	4
   322  0000B0                     ScanWithRange@F3887:
   323                           	opt stack 0
   324  0000B0                     	ds	4
   325  0000B4                     ScanWithRange@F3889:
   326                           	opt stack 0
   327  0000B4                     	ds	4
   328  0000B8                     ScanWithRange@F3891:
   329                           	opt stack 0
   330  0000B8                     	ds	4
   331                           tblptru	equ	0xFF8
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	bssBANK1
   336  0001E8                     __pbssBANK1:
   337                           	opt stack 0
   338  0001E8                     _RFID_Read:
   339                           	opt stack 0
   340  0001E8                     	ds	1
   341  0001E9                     _ReceivedString:
   342                           	opt stack 0
   343  0001E9                     	ds	16
   344                           tblptru	equ	0xFF8
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           
   348                           	psect	cstackBANK1
   349  000100                     __pcstackBANK1:
   350                           	opt stack 0
   351  000100                     main@MoveType:
   352                           	opt stack 0
   353                           
   354                           ; 100 bytes @ 0x0
   355  000100                     	ds	100
   356  000164                     main@MoveTime:
   357                           	opt stack 0
   358                           
   359                           ; 100 bytes @ 0x64
   360  000164                     	ds	100
   361  0001C8                     main@Message:
   362                           	opt stack 0
   363                           
   364                           ; 10 bytes @ 0xC8
   365  0001C8                     	ds	10
   366  0001D2                     main@ScanAngle:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xD2
   370  0001D2                     	ds	1
   371  0001D3                     main@DirectionFound:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0xD3
   375  0001D3                     	ds	1
   376  0001D4                     main@i:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0xD4
   380  0001D4                     	ds	1
   381  0001D5                     main@Move:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0xD5
   385  0001D5                     	ds	1
   386  0001D6                     main@mL:
   387                           	opt stack 0
   388                           
   389                           ; 9 bytes @ 0xD6
   390  0001D6                     	ds	9
   391  0001DF                     main@mR:
   392                           	opt stack 0
   393                           
   394                           ; 9 bytes @ 0xDF
   395  0001DF                     	ds	9
   396                           tblptru	equ	0xFF8
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400                           	psect	cstackBANK0
   401  000060                     __pcstackBANK0:
   402                           	opt stack 0
   403  000060                     setMotorPWM@PWMduty:
   404                           	opt stack 0
   405  000060                     sprintf@ap:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x0
   409  000060                     	ds	2
   410  000062                     sprintf@flag:
   411                           	opt stack 0
   412  000062                     stop@mL:
   413                           	opt stack 0
   414  000062                     fullSpeedAhead@mL:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x2
   418  000062                     	ds	1
   419  000063                     sprintf@prec:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x3
   423  000063                     	ds	1
   424  000064                     stop@mR:
   425                           	opt stack 0
   426  000064                     fullSpeedAhead@mR:
   427                           	opt stack 0
   428  000064                     sprintf@val:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x4
   432  000064                     	ds	2
   433  000066                     sprintf@c:
   434                           	opt stack 0
   435  000066                     turnLeft@mL:
   436                           	opt stack 0
   437  000066                     turnRight@mL:
   438                           	opt stack 0
   439  000066                     fullSpeedBack@mL:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x6
   443  000066                     	ds	2
   444  000068                     turnLeft@mR:
   445                           	opt stack 0
   446  000068                     turnRight@mR:
   447                           	opt stack 0
   448  000068                     fullSpeedBack@mR:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x8
   452  000068                     	ds	2
   453  00006A                     ScanIR@mL:
   454                           	opt stack 0
   455  00006A                     ScanWithRange@mL:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0xA
   459  00006A                     	ds	2
   460  00006C                     ScanIR@mR:
   461                           	opt stack 0
   462  00006C                     ScanWithRange@mR:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0xC
   466  00006C                     	ds	2
   467  00006E                     ScanWithRange@tenth_seconds:
   468                           	opt stack 0
   469  00006E                     ScanIR@Move:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xE
   473  00006E                     	ds	1
   474  00006F                     ScanWithRange@MoveTimeEntry:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0xF
   478  00006F                     	ds	1
   479  000070                     ScanIR@MoveTime:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x10
   483  000070                     	ds	1
   484  000071                     ??_ScanWithRange:
   485                           
   486                           ; 0 bytes @ 0x11
   487  000071                     	ds	1
   488  000072                     ScanIR@MoveType:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x12
   492  000072                     	ds	1
   493  000073                     ScanWithRange@buf:
   494                           	opt stack 0
   495                           
   496                           ; 40 bytes @ 0x13
   497  000073                     	ds	1
   498  000074                     ??_ScanIR:
   499                           
   500                           ; 0 bytes @ 0x14
   501  000074                     	ds	2
   502  000076                     ScanIR@buf:
   503                           	opt stack 0
   504                           
   505                           ; 40 bytes @ 0x16
   506  000076                     	ds	37
   507  00009B                     ScanWithRange@ResultFalseL:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x3B
   511  00009B                     	ds	1
   512  00009C                     ScanWithRange@ResultFalseC:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x3C
   516  00009C                     	ds	1
   517  00009D                     ScanWithRange@ResultFalseR:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x3D
   521  00009D                     	ds	1
   522  00009E                     ScanIR@SensorResult:
   523                           	opt stack 0
   524  00009E                     ScanWithRange@SensorResultL:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x3E
   528  00009E                     	ds	4
   529  0000A2                     ScanWithRange@SensorResultC:
   530                           	opt stack 0
   531                           
   532                           ; 4 bytes @ 0x42
   533  0000A2                     	ds	4
   534  0000A6                     ScanWithRange@SensorResultR:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x46
   538  0000A6                     	ds	4
   539  0000AA                     ??_main:
   540                           
   541                           ; 0 bytes @ 0x4A
   542  0000AA                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           
   547                           	psect	cstackCOMRAM
   548  000001                     __pcstackCOMRAM:
   549                           	opt stack 0
   550  000001                     ??i2_delay_tenth_s:
   551                           
   552                           ; 0 bytes @ 0x0
   553  000001                     	ds	1
   554  000002                     i2delay_tenth_s@tenth_seconds:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1
   558  000002                     	ds	1
   559  000003                     i2delay_tenth_s@i:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x2
   563  000003                     	ds	2
   564  000005                     ??_InterruptHandlerHigh:
   565                           
   566                           ; 0 bytes @ 0x4
   567  000005                     	ds	14
   568  000013                     ??_InterruptHandlerLow:
   569                           
   570                           ; 0 bytes @ 0x12
   571  000013                     	ds	17
   572  000024                     ??_delay_tenth_s:
   573  000024                     ??_LCDout:
   574  000024                     ??_delay_s:
   575  000024                     ?_grabLeftIR:
   576                           	opt stack 0
   577  000024                     ?_grabRightIR:
   578                           	opt stack 0
   579  000024                     ?___wmul:
   580                           	opt stack 0
   581  000024                     ?___lwdiv:
   582                           	opt stack 0
   583  000024                     enableSensor@status:
   584                           	opt stack 0
   585  000024                     VerifySignal@Signal:
   586                           	opt stack 0
   587  000024                     ___wmul@multiplier:
   588                           	opt stack 0
   589  000024                     ___lwdiv@dividend:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x23
   593  000024                     	ds	1
   594  000025                     delay_s@seconds:
   595                           	opt stack 0
   596  000025                     delay_tenth_s@tenth_seconds:
   597                           	opt stack 0
   598  000025                     enableSensor@sensor:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x24
   602  000025                     	ds	1
   603  000026                     ??_VerifySignal:
   604  000026                     ??_grabLeftIR:
   605  000026                     ??_grabRightIR:
   606  000026                     delay_s@i:
   607                           	opt stack 0
   608  000026                     delay_tenth_s@i:
   609                           	opt stack 0
   610  000026                     ___wmul@multiplicand:
   611                           	opt stack 0
   612  000026                     ___lwdiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x25
   616  000026                     	ds	1
   617  000027                     LCDout@number:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x26
   621  000027                     	ds	1
   622  000028                     SendLCD@type:
   623                           	opt stack 0
   624  000028                     ___wmul@product:
   625                           	opt stack 0
   626  000028                     ___lwdiv@quotient:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x27
   630  000028                     	ds	1
   631  000029                     SendLCD@Byte:
   632                           	opt stack 0
   633  000029                     grabRightIR@IR_signal:
   634                           	opt stack 0
   635  000029                     grabLeftIR@IR_signal:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x28
   639  000029                     	ds	1
   640  00002A                     ??_initLCD:
   641  00002A                     ?___awdiv:
   642                           	opt stack 0
   643  00002A                     SetLine@line:
   644                           	opt stack 0
   645  00002A                     ___lwdiv@counter:
   646                           	opt stack 0
   647  00002A                     LCD_String@string:
   648                           	opt stack 0
   649  00002A                     ___awdiv@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x29
   653  00002A                     	ds	1
   654  00002B                     ?___lwmod:
   655                           	opt stack 0
   656  00002B                     grabRightIR@i:
   657                           	opt stack 0
   658  00002B                     grabLeftIR@i:
   659                           	opt stack 0
   660  00002B                     ___lwmod@dividend:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x2A
   664  00002B                     	ds	1
   665  00002C                     VerifySignal@checksum:
   666                           	opt stack 0
   667  00002C                     ___awdiv@divisor:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x2B
   671  00002C                     	ds	1
   672  00002D                     VerifySignal@hexByte:
   673                           	opt stack 0
   674  00002D                     ___lwmod@divisor:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2C
   678  00002D                     	ds	1
   679  00002E                     ___awdiv@counter:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     VerifySignal@i:
   685                           	opt stack 0
   686  00002F                     ___awdiv@sign:
   687                           	opt stack 0
   688  00002F                     ___lwmod@counter:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x2E
   692  00002F                     	ds	1
   693  000030                     ?_sprintf:
   694                           	opt stack 0
   695  000030                     sprintf@sp:
   696                           	opt stack 0
   697  000030                     ___awdiv@quotient:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x2F
   701  000030                     	ds	2
   702  000032                     setMotorPWM@m:
   703                           	opt stack 0
   704  000032                     sprintf@f:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x31
   708  000032                     	ds	2
   709  000034                     ??_setMotorPWM:
   710                           
   711                           ; 0 bytes @ 0x33
   712  000034                     	ds	4
   713  000038                     ??_sprintf:
   714                           
   715                           ; 0 bytes @ 0x37
   716  000038                     	ds	1
   717  000039                     
   718                           ; 0 bytes @ 0x38
   719  000039                     	ds	1
   720  00003A                     tblptru	equ	0xFF8
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           
   724                           ; 0 bytes @ 0x39
   725 ;;
   726 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   727 ;;
   728 ;; *************** function _main *****************
   729 ;; Defined at:
   730 ;;		line 51 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   735 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   736 ;;  Message        10  200[BANK1 ] unsigned char [10]
   737 ;;  mR              9  223[BANK1 ] struct DC_motor
   738 ;;  mL              9  214[BANK1 ] struct DC_motor
   739 ;;  Move            1  213[BANK1 ] unsigned char 
   740 ;;  i               1  212[BANK1 ] unsigned char 
   741 ;;  DirectionFou    1  211[BANK1 ] char 
   742 ;;  ScanAngle       1  210[BANK1 ] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;		None               void
   745 ;; Registers used:
   746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   752 ;;      Params:         0       0       0       0
   753 ;;      Locals:         0       0     232       0
   754 ;;      Temps:          0       2       0       0
   755 ;;      Totals:         0       2     232       0
   756 ;;Total ram usage:      234 bytes
   757 ;; Hardware stack levels required when called:    8
   758 ;; This function calls:
   759 ;;		_LCD_String
   760 ;;		_ScanIR
   761 ;;		_ScanWithRange
   762 ;;		_SetLine
   763 ;;		_VerifySignal
   764 ;;		_delay_tenth_s
   765 ;;		_enableSensor
   766 ;;		_fullSpeedAhead
   767 ;;		_fullSpeedBack
   768 ;;		_initIR
   769 ;;		_initLCD
   770 ;;		_initMotorPWM
   771 ;;		_initRFID
   772 ;;		_stop
   773 ;; This function is called by:
   774 ;;		Startup code after reset
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text0
   779  000C48                     __ptext0:
   780                           	opt stack 0
   781  000C48                     _main:
   782                           	opt stack 23
   783                           
   784                           ;main.c: 54: unsigned char Message[10];
   785                           ;main.c: 55: unsigned char i=0;
   786                           
   787                           ;incstack = 0
   788  000C48  0E00               	movlw	0
   789  000C4A  0101               	movlb	1	; () banked
   790  000C4C  6FD4               	movwf	main@i& (0+255),b
   791                           
   792                           ;main.c: 56: signed char DirectionFound=0;
   793  000C4E  0E00               	movlw	0
   794  000C50  0101               	movlb	1	; () banked
   795  000C52  6FD3               	movwf	main@DirectionFound& (0+255),b
   796                           
   797                           ;main.c: 57: char MoveTime[100];
   798                           ;main.c: 58: char MoveType[100];
   799                           ;main.c: 59: char Move=0;
   800  000C54  0E00               	movlw	0
   801  000C56  0101               	movlb	1	; () banked
   802  000C58  6FD5               	movwf	main@Move& (0+255),b
   803                           
   804                           ;main.c: 61: unsigned char ScanAngle=6;
   805  000C5A  0E06               	movlw	6
   806  000C5C  0101               	movlb	1	; () banked
   807  000C5E  6FD2               	movwf	main@ScanAngle& (0+255),b
   808                           
   809                           ; BSR set to: 1
   810                           ;main.c: 64: INTCONbits.GIEH=1;
   811  000C60  8EF2               	bsf	intcon,7,c	;volatile
   812                           
   813                           ; BSR set to: 1
   814                           ;main.c: 65: INTCONbits.GIEL=1;
   815  000C62  8CF2               	bsf	intcon,6,c	;volatile
   816                           
   817                           ; BSR set to: 1
   818                           ;main.c: 66: INTCONbits.PEIE=1;
   819  000C64  8CF2               	bsf	intcon,6,c	;volatile
   820                           
   821                           ; BSR set to: 1
   822                           ;main.c: 67: RCONbits.IPEN=1;
   823  000C66  8ED0               	bsf	4048,7,c	;volatile
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 70: IPR1bits.RCIP=0;
   827  000C68  9A9F               	bcf	3999,5,c	;volatile
   828                           
   829                           ; BSR set to: 1
   830                           ;main.c: 71: PIE1bits.RCIE=1;
   831  000C6A  8A9D               	bsf	3997,5,c	;volatile
   832                           
   833                           ; BSR set to: 1
   834                           ;main.c: 74: TRISCbits.RC3=1;
   835  000C6C  8694               	bsf	3988,3,c	;volatile
   836                           
   837                           ; BSR set to: 1
   838                           ;main.c: 75: INTCONbits.INT0IE=1;
   839  000C6E  88F2               	bsf	intcon,4,c	;volatile
   840                           
   841                           ; BSR set to: 1
   842                           ;main.c: 78: PIR1bits.RC1IF=0;
   843  000C70  9A9E               	bcf	3998,5,c	;volatile
   844                           
   845                           ; BSR set to: 1
   846                           ;main.c: 79: INTCONbits.INT0IF=0;
   847  000C72  92F2               	bcf	intcon,1,c	;volatile
   848                           
   849                           ;main.c: 82: struct DC_motor mL, mR;
   850                           ;main.c: 83: mL.power=0;
   851  000C74  0E00               	movlw	0
   852  000C76  0101               	movlb	1	; () banked
   853  000C78  6FD6               	movwf	main@mL& (0+255),b
   854                           
   855                           ;main.c: 84: mL.direction=1;
   856  000C7A  0E01               	movlw	1
   857  000C7C  0101               	movlb	1	; () banked
   858  000C7E  6FD7               	movwf	(main@mL+1)& (0+255),b
   859                           
   860                           ; BSR set to: 1
   861                           ;main.c: 85: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   862  000C80  0E79               	movlw	121
   863  000C82  0101               	movlb	1	; () banked
   864  000C84  6FD8               	movwf	(main@mL+2)& (0+255),b
   865  000C86  0E0F               	movlw	15
   866  000C88  0101               	movlb	1	; () banked
   867  000C8A  6FD9               	movwf	(main@mL+3)& (0+255),b
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 86: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   871  000C8C  0E78               	movlw	120
   872  000C8E  0101               	movlb	1	; () banked
   873  000C90  6FDA               	movwf	(main@mL+4)& (0+255),b
   874  000C92  0E0F               	movlw	15
   875  000C94  0101               	movlb	1	; () banked
   876  000C96  6FDB               	movwf	(main@mL+5)& (0+255),b
   877                           
   878                           ;main.c: 87: mL.dir_pin=0;
   879  000C98  0E00               	movlw	0
   880  000C9A  0101               	movlb	1	; () banked
   881  000C9C  6FDC               	movwf	(main@mL+6)& (0+255),b
   882                           
   883                           ;main.c: 88: mL.PWMperiod=199;
   884  000C9E  0E00               	movlw	0
   885  000CA0  0101               	movlb	1	; () banked
   886  000CA2  6FDE               	movwf	(main@mL+8)& (0+255),b
   887  000CA4  0EC7               	movlw	199
   888  000CA6  6FDD               	movwf	(main@mL+7)& (0+255),b
   889                           
   890                           ;main.c: 90: mR.power=0;
   891  000CA8  0E00               	movlw	0
   892  000CAA  0101               	movlb	1	; () banked
   893  000CAC  6FDF               	movwf	main@mR& (0+255),b
   894                           
   895                           ;main.c: 91: mR.direction=1;
   896  000CAE  0E01               	movlw	1
   897  000CB0  0101               	movlb	1	; () banked
   898  000CB2  6FE0               	movwf	(main@mR+1)& (0+255),b
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 92: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   902  000CB4  0E77               	movlw	119
   903  000CB6  0101               	movlb	1	; () banked
   904  000CB8  6FE1               	movwf	(main@mR+2)& (0+255),b
   905  000CBA  0E0F               	movlw	15
   906  000CBC  0101               	movlb	1	; () banked
   907  000CBE  6FE2               	movwf	(main@mR+3)& (0+255),b
   908                           
   909                           ; BSR set to: 1
   910                           ;main.c: 93: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   911  000CC0  0E76               	movlw	118
   912  000CC2  0101               	movlb	1	; () banked
   913  000CC4  6FE3               	movwf	(main@mR+4)& (0+255),b
   914  000CC6  0E0F               	movlw	15
   915  000CC8  0101               	movlb	1	; () banked
   916  000CCA  6FE4               	movwf	(main@mR+5)& (0+255),b
   917                           
   918                           ;main.c: 94: mR.dir_pin=2;
   919  000CCC  0E02               	movlw	2
   920  000CCE  0101               	movlb	1	; () banked
   921  000CD0  6FE5               	movwf	(main@mR+6)& (0+255),b
   922                           
   923                           ;main.c: 95: mR.PWMperiod=199;
   924  000CD2  0E00               	movlw	0
   925  000CD4  0101               	movlb	1	; () banked
   926  000CD6  6FE7               	movwf	(main@mR+8)& (0+255),b
   927  000CD8  0EC7               	movlw	199
   928  000CDA  6FE6               	movwf	(main@mR+7)& (0+255),b
   929                           
   930                           ;main.c: 97: OSCCON = 0x72;
   931  000CDC  0E72               	movlw	114
   932  000CDE  6ED3               	movwf	4051,c	;volatile
   933  000CE0                     l79:
   934  000CE0  B4D3               	btfsc	4051,2,c	;volatile
   935  000CE2  D1D0               	goto	l3734
   936  000CE4  D7FD               	goto	l79
   937  000CE6                     l3606:
   938                           
   939                           ;main.c: 109: stop(&mL, &mR);
   940  000CE6  0ED6               	movlw	low main@mL
   941  000CE8  0100               	movlb	0	; () banked
   942  000CEA  6F62               	movwf	stop@mL& (0+255),b
   943  000CEC  0E01               	movlw	high main@mL
   944  000CEE  0100               	movlb	0	; () banked
   945  000CF0  6F63               	movwf	(stop@mL+1)& (0+255),b
   946  000CF2  0EDF               	movlw	low main@mR
   947  000CF4  0100               	movlb	0	; () banked
   948  000CF6  6F64               	movwf	stop@mR& (0+255),b
   949  000CF8  0E01               	movlw	high main@mR
   950  000CFA  0100               	movlb	0	; () banked
   951  000CFC  6F65               	movwf	(stop@mR+1)& (0+255),b
   952  000CFE  ECBE  F00C         	call	_stop	;wreg free
   953                           
   954                           ;main.c: 110: RFID_Read=0;
   955  000D02  0E00               	movlw	0
   956  000D04  0101               	movlb	1	; () banked
   957  000D06  6FE8               	movwf	_RFID_Read& (0+255),b	;volatile
   958                           
   959                           ; BSR set to: 1
   960                           ;main.c: 111: SetLine(1);
   961  000D08  0E01               	movlw	1
   962  000D0A  EC8A  F00F         	call	_SetLine
   963                           
   964                           ;main.c: 112: LCD_String("        Ready");
   965  000D0E  0E78               	movlw	low STR_1
   966  000D10  6E2A               	movwf	LCD_String@string,c
   967  000D12  0E03               	movlw	high STR_1
   968  000D14  6E2B               	movwf	LCD_String@string+1,c
   969  000D16  EC39  F00E         	call	_LCD_String	;wreg free
   970                           
   971                           ;main.c: 113: SetLine(2);
   972  000D1A  0E02               	movlw	2
   973  000D1C  EC8A  F00F         	call	_SetLine
   974                           
   975                           ;main.c: 114: LCD_String("        To Go!");
   976  000D20  0E69               	movlw	low STR_2
   977  000D22  6E2A               	movwf	LCD_String@string,c
   978  000D24  0E03               	movlw	high STR_2
   979  000D26  6E2B               	movwf	LCD_String@string+1,c
   980  000D28  EC39  F00E         	call	_LCD_String	;wreg free
   981                           
   982                           ;main.c: 116: break;
   983  000D2C  D1AB               	goto	l3734
   984  000D2E                     l3618:
   985                           
   986                           ;main.c: 121: initMotorPWM();
   987  000D2E  EC71  F00F         	call	_initMotorPWM	;wreg free
   988                           
   989                           ;main.c: 122: initRFID();
   990  000D32  EC7E  F000         	call	_initRFID	;wreg free
   991                           
   992                           ;main.c: 123: initLCD();
   993  000D36  EC06  F00C         	call	_initLCD	;wreg free
   994                           
   995                           ;main.c: 124: initIR();
   996  000D3A  EC6D  F000         	call	_initIR	;wreg free
   997                           
   998                           ;main.c: 126: enableSensor(0, 1);
   999  000D3E  0E01               	movlw	1
  1000  000D40  6E24               	movwf	enableSensor@status,c
  1001  000D42  0E00               	movlw	0
  1002  000D44  ECCF  F00F         	call	_enableSensor
  1003                           
  1004                           ;main.c: 127: enableSensor(1, 1);
  1005  000D48  0E01               	movlw	1
  1006  000D4A  6E24               	movwf	enableSensor@status,c
  1007  000D4C  0E01               	movlw	1
  1008  000D4E  ECCF  F00F         	call	_enableSensor
  1009                           
  1010                           ;main.c: 130: fullSpeedAhead(&mL, &mR);
  1011  000D52  0ED6               	movlw	low main@mL
  1012  000D54  0100               	movlb	0	; () banked
  1013  000D56  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1014  000D58  0E01               	movlw	high main@mL
  1015  000D5A  0100               	movlb	0	; () banked
  1016  000D5C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1017  000D5E  0EDF               	movlw	low main@mR
  1018  000D60  0100               	movlb	0	; () banked
  1019  000D62  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1020  000D64  0E01               	movlw	high main@mR
  1021  000D66  0100               	movlb	0	; () banked
  1022  000D68  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1023  000D6A  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  1024                           
  1025                           ;main.c: 131: delay_tenth_s(1);
  1026  000D6E  0E01               	movlw	1
  1027  000D70  EC39  F00F         	call	_delay_tenth_s
  1028  000D74  D186               	goto	l3730
  1029  000D76                     l3634:
  1030                           
  1031                           ;main.c: 143: SetLine(1);
  1032  000D76  0E01               	movlw	1
  1033  000D78  EC8A  F00F         	call	_SetLine
  1034                           
  1035                           ;main.c: 144: LCD_String("       Searching");
  1036  000D7C  0E48               	movlw	low STR_3
  1037  000D7E  6E2A               	movwf	LCD_String@string,c
  1038  000D80  0E03               	movlw	high STR_3
  1039  000D82  6E2B               	movwf	LCD_String@string+1,c
  1040  000D84  EC39  F00E         	call	_LCD_String	;wreg free
  1041                           
  1042                           ;main.c: 146: if (DirectionFound==-1) {
  1043  000D88  0101               	movlb	1	; () banked
  1044  000D8A  29D3               	incf	main@DirectionFound& (0+255),w,b
  1045  000D8C  A4D8               	btfss	status,2,c
  1046  000D8E  D02E               	goto	l3650
  1047                           
  1048                           ; BSR set to: 1
  1049                           ;main.c: 151: fullSpeedAhead(&mL, &mR);
  1050  000D90  0ED6               	movlw	low main@mL
  1051  000D92  0100               	movlb	0	; () banked
  1052  000D94  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1053  000D96  0E01               	movlw	high main@mL
  1054  000D98  0100               	movlb	0	; () banked
  1055  000D9A  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1056  000D9C  0EDF               	movlw	low main@mR
  1057  000D9E  0100               	movlb	0	; () banked
  1058  000DA0  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1059  000DA2  0E01               	movlw	high main@mR
  1060  000DA4  0100               	movlb	0	; () banked
  1061  000DA6  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1062  000DA8  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  1063                           
  1064                           ;main.c: 152: delay_tenth_s(ScanAngle);
  1065  000DAC  0101               	movlb	1	; () banked
  1066  000DAE  51D2               	movf	main@ScanAngle& (0+255),w,b
  1067  000DB0  EC39  F00F         	call	_delay_tenth_s
  1068                           
  1069                           ;main.c: 153: stop(&mL,&mR);
  1070  000DB4  0ED6               	movlw	low main@mL
  1071  000DB6  0100               	movlb	0	; () banked
  1072  000DB8  6F62               	movwf	stop@mL& (0+255),b
  1073  000DBA  0E01               	movlw	high main@mL
  1074  000DBC  0100               	movlb	0	; () banked
  1075  000DBE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1076  000DC0  0EDF               	movlw	low main@mR
  1077  000DC2  0100               	movlb	0	; () banked
  1078  000DC4  6F64               	movwf	stop@mR& (0+255),b
  1079  000DC6  0E01               	movlw	high main@mR
  1080  000DC8  0100               	movlb	0	; () banked
  1081  000DCA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1082  000DCC  ECBE  F00C         	call	_stop	;wreg free
  1083                           
  1084                           ;main.c: 154: DirectionFound=0;
  1085  000DD0  0E00               	movlw	0
  1086  000DD2  0101               	movlb	1	; () banked
  1087  000DD4  6FD3               	movwf	main@DirectionFound& (0+255),b
  1088                           
  1089                           ; BSR set to: 1
  1090                           ;main.c: 155: MoveType[Move]=0;
  1091  000DD6  0101               	movlb	1	; () banked
  1092  000DD8  51D5               	movf	main@Move& (0+255),w,b
  1093  000DDA  0D01               	mullw	1
  1094  000DDC  0E00               	movlw	low main@MoveType
  1095  000DDE  24F3               	addwf	prodl,w,c
  1096  000DE0  6ED9               	movwf	fsr2l,c
  1097  000DE2  0E01               	movlw	high main@MoveType
  1098  000DE4  20F4               	addwfc	prodh,w,c
  1099  000DE6  6EDA               	movwf	fsr2h,c
  1100  000DE8  0E00               	movlw	0
  1101  000DEA  D127               	goto	L2
  1102  000DEC                     l3650:
  1103                           
  1104                           ; BSR set to: 1
  1105  000DEC  0101               	movlb	1	; () banked
  1106  000DEE  51D3               	movf	main@DirectionFound& (0+255),w,b
  1107  000DF0  0101               	movlb	1	; () banked
  1108  000DF2  A4D8               	btfss	status,2,c
  1109  000DF4  D01E               	goto	l3656
  1110                           
  1111                           ; BSR set to: 1
  1112                           ;main.c: 158: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1113  000DF6  0ED6               	movlw	low main@mL
  1114  000DF8  0100               	movlb	0	; () banked
  1115  000DFA  6F6A               	movwf	ScanWithRange@mL& (0+255),b
  1116  000DFC  0E01               	movlw	high main@mL
  1117  000DFE  0100               	movlb	0	; () banked
  1118  000E00  6F6B               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1119  000E02  0EDF               	movlw	low main@mR
  1120  000E04  0100               	movlb	0	; () banked
  1121  000E06  6F6C               	movwf	ScanWithRange@mR& (0+255),b
  1122  000E08  0E01               	movlw	high main@mR
  1123  000E0A  0100               	movlb	0	; () banked
  1124  000E0C  6F6D               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1125  000E0E  C1D2  F06E         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
  1126  000E12  0101               	movlb	1	; () banked
  1127  000E14  51D5               	movf	main@Move& (0+255),w,b
  1128  000E16  0D01               	mullw	1
  1129  000E18  0E64               	movlw	low main@MoveTime
  1130  000E1A  24F3               	addwf	prodl,w,c
  1131  000E1C  0100               	movlb	0	; () banked
  1132  000E1E  6F6F               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1133  000E20  0E01               	movlw	high main@MoveTime
  1134  000E22  20F4               	addwfc	prodh,w,c
  1135  000E24  0100               	movlb	0	; () banked
  1136  000E26  6F70               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1137  000E28  ECCA  F001         	call	_ScanWithRange	;wreg free
  1138  000E2C  0101               	movlb	1	; () banked
  1139  000E2E  6FD3               	movwf	main@DirectionFound& (0+255),b
  1140  000E30  D02E               	goto	l3664
  1141  000E32                     l3656:
  1142                           
  1143                           ; BSR set to: 1
  1144  000E32  0101               	movlb	1	; () banked
  1145  000E34  05D3               	decf	main@DirectionFound& (0+255),w,b
  1146  000E36  A4D8               	btfss	status,2,c
  1147  000E38  D023               	goto	l3660
  1148                           
  1149                           ; BSR set to: 1
  1150                           ;main.c: 162: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1151  000E3A  0ED6               	movlw	low main@mL
  1152  000E3C  0100               	movlb	0	; () banked
  1153  000E3E  6F6A               	movwf	ScanIR@mL& (0+255),b
  1154  000E40  0E01               	movlw	high main@mL
  1155  000E42  0100               	movlb	0	; () banked
  1156  000E44  6F6B               	movwf	(ScanIR@mL+1)& (0+255),b
  1157  000E46  0EDF               	movlw	low main@mR
  1158  000E48  0100               	movlb	0	; () banked
  1159  000E4A  6F6C               	movwf	ScanIR@mR& (0+255),b
  1160  000E4C  0E01               	movlw	high main@mR
  1161  000E4E  0100               	movlb	0	; () banked
  1162  000E50  6F6D               	movwf	(ScanIR@mR+1)& (0+255),b
  1163  000E52  0ED5               	movlw	low main@Move
  1164  000E54  0100               	movlb	0	; () banked
  1165  000E56  6F6E               	movwf	ScanIR@Move& (0+255),b
  1166  000E58  0E01               	movlw	high main@Move
  1167  000E5A  0100               	movlb	0	; () banked
  1168  000E5C  6F6F               	movwf	(ScanIR@Move+1)& (0+255),b
  1169  000E5E  0E64               	movlw	low main@MoveTime
  1170  000E60  0100               	movlb	0	; () banked
  1171  000E62  6F70               	movwf	ScanIR@MoveTime& (0+255),b
  1172  000E64  0E01               	movlw	high main@MoveTime
  1173  000E66  0100               	movlb	0	; () banked
  1174  000E68  6F71               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1175  000E6A  0E00               	movlw	low main@MoveType
  1176  000E6C  0100               	movlb	0	; () banked
  1177  000E6E  6F72               	movwf	ScanIR@MoveType& (0+255),b
  1178  000E70  0E01               	movlw	high main@MoveType
  1179  000E72  0100               	movlb	0	; () banked
  1180  000E74  6F73               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1181  000E76  EC53  F008         	call	_ScanIR	;wreg free
  1182  000E7A  0101               	movlb	1	; () banked
  1183  000E7C  6FD3               	movwf	main@DirectionFound& (0+255),b
  1184                           
  1185                           ;main.c: 163: } else if (DirectionFound==2) {
  1186  000E7E  D0DE               	goto	l3720
  1187  000E80                     l3660:
  1188                           
  1189                           ; BSR set to: 1
  1190  000E80  0E02               	movlw	2
  1191  000E82  0101               	movlb	1	; () banked
  1192  000E84  19D3               	xorwf	main@DirectionFound& (0+255),w,b
  1193  000E86  A4D8               	btfss	status,2,c
  1194  000E88  D0D9               	goto	l3720
  1195                           
  1196                           ; BSR set to: 1
  1197                           ;main.c: 165: mode=2;
  1198  000E8A  0E02               	movlw	2
  1199  000E8C  6E3B               	movwf	_mode,c	;volatile
  1200  000E8E                     l3664:
  1201                           
  1202                           ; BSR set to: 1
  1203                           ;main.c: 166: MoveType[Move]=1;
  1204  000E8E  0101               	movlb	1	; () banked
  1205  000E90  51D5               	movf	main@Move& (0+255),w,b
  1206  000E92  0D01               	mullw	1
  1207  000E94  0E00               	movlw	low main@MoveType
  1208  000E96  24F3               	addwf	prodl,w,c
  1209  000E98  6ED9               	movwf	fsr2l,c
  1210  000E9A  0E01               	movlw	high main@MoveType
  1211  000E9C  20F4               	addwfc	prodh,w,c
  1212  000E9E  6EDA               	movwf	fsr2h,c
  1213  000EA0  0E01               	movlw	1
  1214  000EA2  D0CB               	goto	L2
  1215  000EA4                     l3668:
  1216                           
  1217                           ;main.c: 177: if (RFID_Read) {
  1218  000EA4  0101               	movlb	1	; () banked
  1219  000EA6  51E8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1220  000EA8  B4D8               	btfsc	status,2,c
  1221  000EAA  D09C               	goto	l3710
  1222                           
  1223                           ; BSR set to: 1
  1224                           ;main.c: 178: stop(&mL, &mR);
  1225  000EAC  0ED6               	movlw	low main@mL
  1226  000EAE  0100               	movlb	0	; () banked
  1227  000EB0  6F62               	movwf	stop@mL& (0+255),b
  1228  000EB2  0E01               	movlw	high main@mL
  1229  000EB4  0100               	movlb	0	; () banked
  1230  000EB6  6F63               	movwf	(stop@mL+1)& (0+255),b
  1231  000EB8  0EDF               	movlw	low main@mR
  1232  000EBA  0100               	movlb	0	; () banked
  1233  000EBC  6F64               	movwf	stop@mR& (0+255),b
  1234  000EBE  0E01               	movlw	high main@mR
  1235  000EC0  0100               	movlb	0	; () banked
  1236  000EC2  6F65               	movwf	(stop@mR+1)& (0+255),b
  1237  000EC4  ECBE  F00C         	call	_stop	;wreg free
  1238                           
  1239                           ;main.c: 179: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1240  000EC8  0E03               	movlw	3
  1241  000ECA  0101               	movlb	1	; () banked
  1242  000ECC  19F8               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1243  000ECE  A4D8               	btfss	status,2,c
  1244  000ED0  D002               	goto	u2830
  1245  000ED2  0E01               	movlw	1
  1246  000ED4  D001               	goto	u2832
  1247  000ED6                     u2830:
  1248  000ED6  0E00               	movlw	0
  1249  000ED8                     u2832:
  1250  000ED8  0100               	movlb	0	; () banked
  1251  000EDA  6FAA               	movwf	??_main& (0+255),b
  1252  000EDC  0E02               	movlw	2
  1253  000EDE  0101               	movlb	1	; () banked
  1254  000EE0  19E9               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1255  000EE2  A4D8               	btfss	status,2,c
  1256  000EE4  D002               	goto	u2840
  1257  000EE6  0E01               	movlw	1
  1258  000EE8  D001               	goto	u2842
  1259  000EEA                     u2840:
  1260  000EEA  0E00               	movlw	0
  1261  000EEC                     u2842:
  1262  000EEC  0100               	movlb	0	; () banked
  1263  000EEE  15AA               	andwf	??_main& (0+255),w,b
  1264  000EF0  A0E8               	btfss	wreg,0,c
  1265  000EF2  D0C8               	goto	l3734
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 180: if (VerifySignal(ReceivedString)){
  1269  000EF4  0EE9               	movlw	low _ReceivedString
  1270  000EF6  6E24               	movwf	VerifySignal@Signal,c
  1271  000EF8  0E01               	movlw	high _ReceivedString
  1272  000EFA  6E25               	movwf	VerifySignal@Signal+1,c
  1273  000EFC  EC64  F00C         	call	_VerifySignal	;wreg free
  1274  000F00  0900               	iorlw	0
  1275  000F02  B4D8               	btfsc	status,2,c
  1276  000F04  D041               	goto	l3702
  1277                           
  1278                           ;main.c: 182: for (i=0; i<10; i++){
  1279  000F06  0E00               	movlw	0
  1280  000F08  0101               	movlb	1	; () banked
  1281  000F0A  6FD4               	movwf	main@i& (0+255),b
  1282  000F0C                     l3678:
  1283                           
  1284                           ; BSR set to: 1
  1285  000F0C  0E09               	movlw	9
  1286  000F0E  0101               	movlb	1	; () banked
  1287  000F10  65D4               	cpfsgt	main@i& (0+255),b
  1288  000F12  D001               	goto	l3682
  1289  000F14  D020               	goto	l3688
  1290  000F16                     l3682:
  1291                           
  1292                           ; BSR set to: 1
  1293                           ;main.c: 183: Message[i] = ReceivedString[i+1];
  1294  000F16  0101               	movlb	1	; () banked
  1295  000F18  51D4               	movf	main@i& (0+255),w,b
  1296  000F1A  0100               	movlb	0	; () banked
  1297  000F1C  6FAA               	movwf	??_main& (0+255),b
  1298  000F1E  6BAB               	clrf	(??_main+1)& (0+255),b
  1299  000F20  0E01               	movlw	1
  1300  000F22  0100               	movlb	0	; () banked
  1301  000F24  27AA               	addwf	??_main& (0+255),f,b
  1302  000F26  0E00               	movlw	0
  1303  000F28  23AB               	addwfc	(??_main+1)& (0+255),f,b
  1304  000F2A  0EE9               	movlw	low _ReceivedString
  1305  000F2C  0100               	movlb	0	; () banked
  1306  000F2E  25AA               	addwf	??_main& (0+255),w,b
  1307  000F30  6ED9               	movwf	fsr2l,c
  1308  000F32  0E01               	movlw	high _ReceivedString
  1309  000F34  0100               	movlb	0	; () banked
  1310  000F36  21AB               	addwfc	(??_main+1)& (0+255),w,b
  1311  000F38  6EDA               	movwf	fsr2h,c
  1312  000F3A  0101               	movlb	1	; () banked
  1313  000F3C  51D4               	movf	main@i& (0+255),w,b
  1314  000F3E  0D01               	mullw	1
  1315  000F40  0EC8               	movlw	low main@Message
  1316  000F42  24F3               	addwf	prodl,w,c
  1317  000F44  6EE1               	movwf	fsr1l,c
  1318  000F46  0E01               	movlw	high main@Message
  1319  000F48  20F4               	addwfc	prodh,w,c
  1320  000F4A  6EE2               	movwf	fsr1h,c
  1321  000F4C  CFDF FFE7          	movff	indf2,indf1
  1322                           
  1323                           ; BSR set to: 1
  1324  000F50  0101               	movlb	1	; () banked
  1325  000F52  2BD4               	incf	main@i& (0+255),f,b
  1326  000F54  D7DB               	goto	l3678
  1327  000F56                     l3688:
  1328                           
  1329                           ; BSR set to: 1
  1330                           ;main.c: 184: }
  1331                           ;main.c: 187: for (i=0; i<16; i++) {
  1332  000F56  0E00               	movlw	0
  1333  000F58  0101               	movlb	1	; () banked
  1334  000F5A  6FD4               	movwf	main@i& (0+255),b
  1335  000F5C                     l3690:
  1336                           
  1337                           ; BSR set to: 1
  1338  000F5C  0E0F               	movlw	15
  1339  000F5E  0101               	movlb	1	; () banked
  1340  000F60  65D4               	cpfsgt	main@i& (0+255),b
  1341  000F62  D001               	goto	l3694
  1342  000F64  D00E               	goto	l3700
  1343  000F66                     l3694:
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 188: ReceivedString[i]=0;
  1347  000F66  0101               	movlb	1	; () banked
  1348  000F68  51D4               	movf	main@i& (0+255),w,b
  1349  000F6A  0D01               	mullw	1
  1350  000F6C  0EE9               	movlw	low _ReceivedString
  1351  000F6E  24F3               	addwf	prodl,w,c
  1352  000F70  6ED9               	movwf	fsr2l,c
  1353  000F72  0E01               	movlw	high _ReceivedString
  1354  000F74  20F4               	addwfc	prodh,w,c
  1355  000F76  6EDA               	movwf	fsr2h,c
  1356  000F78  0E00               	movlw	0
  1357  000F7A  6EDF               	movwf	indf2,c
  1358                           
  1359                           ; BSR set to: 1
  1360  000F7C  0101               	movlb	1	; () banked
  1361  000F7E  2BD4               	incf	main@i& (0+255),f,b
  1362  000F80  D7ED               	goto	l3690
  1363  000F82                     l3700:
  1364                           
  1365                           ; BSR set to: 1
  1366                           ;main.c: 189: }
  1367                           ;main.c: 190: mode=3;
  1368  000F82  0E03               	movlw	3
  1369  000F84  6E3B               	movwf	_mode,c	;volatile
  1370                           
  1371                           ;main.c: 192: } else {
  1372  000F86  D07E               	goto	l3734
  1373  000F88                     l3702:
  1374                           
  1375                           ;main.c: 193: fullSpeedBack(&mL,&mR);
  1376  000F88  0ED6               	movlw	low main@mL
  1377  000F8A  0100               	movlb	0	; () banked
  1378  000F8C  6F66               	movwf	fullSpeedBack@mL& (0+255),b
  1379  000F8E  0E01               	movlw	high main@mL
  1380  000F90  0100               	movlb	0	; () banked
  1381  000F92  6F67               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1382  000F94  0EDF               	movlw	low main@mR
  1383  000F96  0100               	movlb	0	; () banked
  1384  000F98  6F68               	movwf	fullSpeedBack@mR& (0+255),b
  1385  000F9A  0E01               	movlw	high main@mR
  1386  000F9C  0100               	movlb	0	; () banked
  1387  000F9E  6F69               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1388  000FA0  EC00  F00F         	call	_fullSpeedBack	;wreg free
  1389                           
  1390                           ;main.c: 194: delay_tenth_s(5);
  1391  000FA4  0E05               	movlw	5
  1392  000FA6  EC39  F00F         	call	_delay_tenth_s
  1393                           
  1394                           ;main.c: 195: stop(&mL,&mR);
  1395  000FAA  0ED6               	movlw	low main@mL
  1396  000FAC  0100               	movlb	0	; () banked
  1397  000FAE  6F62               	movwf	stop@mL& (0+255),b
  1398  000FB0  0E01               	movlw	high main@mL
  1399  000FB2  0100               	movlb	0	; () banked
  1400  000FB4  6F63               	movwf	(stop@mL+1)& (0+255),b
  1401  000FB6  0EDF               	movlw	low main@mR
  1402  000FB8  0100               	movlb	0	; () banked
  1403  000FBA  6F64               	movwf	stop@mR& (0+255),b
  1404  000FBC  0E01               	movlw	high main@mR
  1405  000FBE  0100               	movlb	0	; () banked
  1406  000FC0  6F65               	movwf	(stop@mR+1)& (0+255),b
  1407  000FC2  ECBE  F00C         	call	_stop	;wreg free
  1408                           
  1409                           ;main.c: 196: fullSpeedAhead(&mL,&mR);
  1410  000FC6  0ED6               	movlw	low main@mL
  1411  000FC8  0100               	movlb	0	; () banked
  1412  000FCA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1413  000FCC  0E01               	movlw	high main@mL
  1414  000FCE  0100               	movlb	0	; () banked
  1415  000FD0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1416  000FD2  0EDF               	movlw	low main@mR
  1417  000FD4  0100               	movlb	0	; () banked
  1418  000FD6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1419  000FD8  0E01               	movlw	high main@mR
  1420  000FDA  0100               	movlb	0	; () banked
  1421  000FDC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1422  000FDE  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  1423                           
  1424                           ;main.c: 197: }
  1425                           ;main.c: 198: }
  1426                           ;main.c: 199: } else {
  1427  000FE2  D050               	goto	l3734
  1428  000FE4                     l3710:
  1429                           
  1430                           ;main.c: 200: DirectionFound=1;
  1431  000FE4  0E01               	movlw	1
  1432  000FE6  0101               	movlb	1	; () banked
  1433  000FE8  6FD3               	movwf	main@DirectionFound& (0+255),b
  1434                           
  1435                           ;main.c: 201: mode=1;
  1436  000FEA  0E01               	movlw	1
  1437  000FEC  6E3B               	movwf	_mode,c	;volatile
  1438                           
  1439                           ; BSR set to: 1
  1440                           ;main.c: 202: fullSpeedAhead(&mL,&mR);
  1441  000FEE  0ED6               	movlw	low main@mL
  1442  000FF0  0100               	movlb	0	; () banked
  1443  000FF2  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1444  000FF4  0E01               	movlw	high main@mL
  1445  000FF6  0100               	movlb	0	; () banked
  1446  000FF8  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1447  000FFA  0EDF               	movlw	low main@mR
  1448  000FFC  0100               	movlb	0	; () banked
  1449  000FFE  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1450  001000  0E01               	movlw	high main@mR
  1451  001002  0100               	movlb	0	; () banked
  1452  001004  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1453  001006  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  1454                           
  1455                           ;main.c: 203: delay_tenth_s(5);
  1456  00100A  0E05               	movlw	5
  1457  00100C  EC39  F00F         	call	_delay_tenth_s
  1458                           
  1459                           ;main.c: 205: MoveType[Move] = 0;
  1460  001010  0101               	movlb	1	; () banked
  1461  001012  51D5               	movf	main@Move& (0+255),w,b
  1462  001014  0D01               	mullw	1
  1463  001016  0E00               	movlw	low main@MoveType
  1464  001018  24F3               	addwf	prodl,w,c
  1465  00101A  6ED9               	movwf	fsr2l,c
  1466  00101C  0E01               	movlw	high main@MoveType
  1467  00101E  20F4               	addwfc	prodh,w,c
  1468  001020  6EDA               	movwf	fsr2h,c
  1469  001022  0E00               	movlw	0
  1470  001024  6EDF               	movwf	indf2,c
  1471                           
  1472                           ; BSR set to: 1
  1473                           ;main.c: 206: MoveTime[Move] = 5;
  1474  001026  0101               	movlb	1	; () banked
  1475  001028  51D5               	movf	main@Move& (0+255),w,b
  1476  00102A  0D01               	mullw	1
  1477  00102C  0E64               	movlw	low main@MoveTime
  1478  00102E  24F3               	addwf	prodl,w,c
  1479  001030  6ED9               	movwf	fsr2l,c
  1480  001032  0E01               	movlw	high main@MoveTime
  1481  001034  20F4               	addwfc	prodh,w,c
  1482  001036  6EDA               	movwf	fsr2h,c
  1483  001038  0E05               	movlw	5
  1484  00103A                     L2:
  1485  00103A  6EDF               	movwf	indf2,c
  1486  00103C                     l3720:
  1487                           
  1488                           ; BSR set to: 1
  1489                           ;main.c: 207: Move++;
  1490  00103C  0101               	movlb	1	; () banked
  1491  00103E  2BD5               	incf	main@Move& (0+255),f,b
  1492                           
  1493                           ; BSR set to: 1
  1494                           ;main.c: 208: }
  1495                           ;main.c: 210: break;
  1496  001040  D021               	goto	l3734
  1497  001042                     l3722:
  1498                           
  1499                           ;main.c: 215: SetLine(1);
  1500  001042  0E01               	movlw	1
  1501  001044  EC8A  F00F         	call	_SetLine
  1502                           
  1503                           ;main.c: 216: LCD_String("      Found Bomb!");
  1504  001048  0E25               	movlw	low STR_4
  1505  00104A  6E2A               	movwf	LCD_String@string,c
  1506  00104C  0E03               	movlw	high STR_4
  1507  00104E  6E2B               	movwf	LCD_String@string+1,c
  1508  001050  EC39  F00E         	call	_LCD_String	;wreg free
  1509                           
  1510                           ;main.c: 217: SetLine(2);
  1511  001054  0E02               	movlw	2
  1512  001056  EC8A  F00F         	call	_SetLine
  1513                           
  1514                           ;main.c: 218: LCD_String("      Going Home");
  1515  00105A  0E37               	movlw	low STR_5
  1516  00105C  6E2A               	movwf	LCD_String@string,c
  1517  00105E  0E03               	movlw	high STR_5
  1518  001060  6E2B               	movwf	LCD_String@string+1,c
  1519  001062  EC39  F00E         	call	_LCD_String	;wreg free
  1520                           
  1521                           ;main.c: 219: stop(&mL,&mR);
  1522  001066  0ED6               	movlw	low main@mL
  1523  001068  0100               	movlb	0	; () banked
  1524  00106A  6F62               	movwf	stop@mL& (0+255),b
  1525  00106C  0E01               	movlw	high main@mL
  1526  00106E  0100               	movlb	0	; () banked
  1527  001070  6F63               	movwf	(stop@mL+1)& (0+255),b
  1528  001072  0EDF               	movlw	low main@mR
  1529  001074  0100               	movlb	0	; () banked
  1530  001076  6F64               	movwf	stop@mR& (0+255),b
  1531  001078  0E01               	movlw	high main@mR
  1532  00107A  0100               	movlb	0	; () banked
  1533  00107C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1534  00107E  ECBE  F00C         	call	_stop	;wreg free
  1535  001082                     l3730:
  1536                           
  1537                           ;main.c: 238: mode=-1;
  1538  001082  683B               	setf	_mode,c	;volatile
  1539  001084                     l3734:
  1540  001084  503B               	movf	_mode,w,c	;volatile
  1541                           
  1542                           ; Switch size 1, requested type "space"
  1543                           ; Number of cases is 5, Range of values is 0 to 255
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte           16     9 (average)
  1547                           ;	Chosen strategy is simple_byte
  1548  001086  0A00               	xorlw	0	; case 0
  1549  001088  B4D8               	btfsc	status,2,c
  1550  00108A  D651               	goto	l3618
  1551  00108C  0A01               	xorlw	1	; case 1
  1552  00108E  B4D8               	btfsc	status,2,c
  1553  001090  D672               	goto	l3634
  1554  001092  0A03               	xorlw	3	; case 2
  1555  001094  B4D8               	btfsc	status,2,c
  1556  001096  D706               	goto	l3668
  1557  001098  0A01               	xorlw	1	; case 3
  1558  00109A  B4D8               	btfsc	status,2,c
  1559  00109C  D7D2               	goto	l3722
  1560  00109E  0AFC               	xorlw	252	; case 255
  1561  0010A0  B4D8               	btfsc	status,2,c
  1562  0010A2  D621               	goto	l3606
  1563  0010A4  D7EF               	goto	l3734
  1564  0010A6                     __end_of_main:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           prodh	equ	0xFF4
  1568                           prodl	equ	0xFF3
  1569                           intcon	equ	0xFF2
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           indf1	equ	0xFE7
  1573                           fsr1h	equ	0xFE2
  1574                           fsr1l	equ	0xFE1
  1575                           indf2	equ	0xFDF
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _initRFID *****************
  1581 ;; Defined at:
  1582 ;;		line 5 in file "RFID_Reader.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1596 ;;      Params:         0       0       0       0
  1597 ;;      Locals:         0       0       0       0
  1598 ;;      Temps:          0       0       0       0
  1599 ;;      Totals:         0       0       0       0
  1600 ;;Total ram usage:        0 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    3
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text1
  1611  0000FC                     __ptext1:
  1612                           	opt stack 0
  1613  0000FC                     _initRFID:
  1614                           	opt stack 27
  1615                           
  1616                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1617                           
  1618                           ;incstack = 0
  1619  0000FC  5094               	movf	3988,w,c	;volatile
  1620  0000FE  09C0               	iorlw	192
  1621  000100  6E94               	movwf	3988,c	;volatile
  1622                           
  1623                           ;RFID_Reader.c: 10: SPBRG=205;
  1624  000102  0ECD               	movlw	205
  1625  000104  6EAF               	movwf	4015,c	;volatile
  1626                           
  1627                           ;RFID_Reader.c: 11: SPBRGH=0;
  1628  000106  0E00               	movlw	0
  1629  000108  6EB0               	movwf	4016,c	;volatile
  1630                           
  1631                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1632  00010A  86AA               	bsf	4010,3,c	;volatile
  1633                           
  1634                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1635  00010C  84AC               	bsf	4012,2,c	;volatile
  1636                           
  1637                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1638  00010E  88AB               	bsf	4011,4,c	;volatile
  1639                           
  1640                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1641  000110  8EAB               	bsf	4011,7,c	;volatile
  1642                           
  1643                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1644  000112  98AC               	bcf	4012,4,c	;volatile
  1645                           
  1646                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1647  000114  9CAB               	bcf	4011,6,c	;volatile
  1648  000116  0012               	return		;funcret
  1649  000118                     __end_of_initRFID:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           intcon	equ	0xFF2
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           indf1	equ	0xFE7
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           indf2	equ	0xFDF
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _initMotorPWM *****************
  1666 ;; Defined at:
  1667 ;;		line 4 in file "dc_motor.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;		None               void
  1674 ;; Registers used:
  1675 ;;		wreg, status,2
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1681 ;;      Params:         0       0       0       0
  1682 ;;      Locals:         0       0       0       0
  1683 ;;      Temps:          0       0       0       0
  1684 ;;      Totals:         0       0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    3
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           	psect	text2
  1696  001EE2                     __ptext2:
  1697                           	opt stack 0
  1698  001EE2                     _initMotorPWM:
  1699                           	opt stack 27
  1700                           
  1701                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1702                           
  1703                           ;incstack = 0
  1704  001EE2  0E00               	movlw	0
  1705  001EE4  6E7F               	movwf	3967,c	;volatile
  1706                           
  1707                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1708  001EE6  0E80               	movlw	128
  1709  001EE8  6E7E               	movwf	3966,c	;volatile
  1710                           
  1711                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1712  001EEA  0E6F               	movlw	111
  1713  001EEC  6E6F               	movwf	3951,c	;volatile
  1714                           
  1715                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1716  001EEE  0E00               	movlw	0
  1717  001EF0  6E6E               	movwf	3950,c	;volatile
  1718                           
  1719                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1720  001EF2  0EC7               	movlw	199
  1721  001EF4  6E7B               	movwf	3963,c	;volatile
  1722                           
  1723                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1724  001EF6  0E00               	movlw	0
  1725  001EF8  6E7A               	movwf	3962,c	;volatile
  1726                           
  1727                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1728  001EFA  0E00               	movlw	0
  1729  001EFC  6E79               	movwf	3961,c	;volatile
  1730                           
  1731                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1732  001EFE  0E00               	movlw	0
  1733  001F00  6E78               	movwf	3960,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1736  001F02  0E00               	movlw	0
  1737  001F04  6E77               	movwf	3959,c	;volatile
  1738                           
  1739                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1740  001F06  0E00               	movlw	0
  1741  001F08  6E76               	movwf	3958,c	;volatile
  1742                           
  1743                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1744  001F0A  9093               	bcf	3987,0,c	;volatile
  1745                           
  1746                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1747  001F0C  9293               	bcf	3987,1,c	;volatile
  1748                           
  1749                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1750  001F0E  9493               	bcf	3987,2,c	;volatile
  1751                           
  1752                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1753  001F10  9693               	bcf	3987,3,c	;volatile
  1754  001F12  0012               	return		;funcret
  1755  001F14                     __end_of_initMotorPWM:
  1756                           	opt stack 0
  1757                           tblptru	equ	0xFF8
  1758                           prodh	equ	0xFF4
  1759                           prodl	equ	0xFF3
  1760                           intcon	equ	0xFF2
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           indf1	equ	0xFE7
  1764                           fsr1h	equ	0xFE2
  1765                           fsr1l	equ	0xFE1
  1766                           indf2	equ	0xFDF
  1767                           fsr2h	equ	0xFDA
  1768                           fsr2l	equ	0xFD9
  1769                           status	equ	0xFD8
  1770                           
  1771 ;; *************** function _initLCD *****************
  1772 ;; Defined at:
  1773 ;;		line 38 in file "LCD.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;		None               void
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1787 ;;      Params:         0       0       0       0
  1788 ;;      Locals:         0       0       0       0
  1789 ;;      Temps:          1       0       0       0
  1790 ;;      Totals:         1       0       0       0
  1791 ;;Total ram usage:        1 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    6
  1794 ;; This function calls:
  1795 ;;		_LCDout
  1796 ;;		_SendLCD
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text3
  1803  00180C                     __ptext3:
  1804                           	opt stack 0
  1805  00180C                     _initLCD:
  1806                           	opt stack 24
  1807                           
  1808                           ;LCD.c: 44: TRISAbits.RA6=0;
  1809                           
  1810                           ;incstack = 0
  1811  00180C  9C92               	bcf	3986,6,c	;volatile
  1812                           
  1813                           ;LCD.c: 45: TRISCbits.RC0=0;
  1814  00180E  9094               	bcf	3988,0,c	;volatile
  1815                           
  1816                           ;LCD.c: 46: TRISCbits.RC1=0;
  1817  001810  9294               	bcf	3988,1,c	;volatile
  1818                           
  1819                           ;LCD.c: 47: TRISCbits.RC2=0;
  1820  001812  9494               	bcf	3988,2,c	;volatile
  1821                           
  1822                           ;LCD.c: 48: TRISDbits.RD0=0;
  1823  001814  9095               	bcf	3989,0,c	;volatile
  1824                           
  1825                           ;LCD.c: 49: TRISDbits.RD1=0;
  1826  001816  9295               	bcf	3989,1,c	;volatile
  1827                           
  1828                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1829  001818  0E27               	movlw	39
  1830  00181A  6E2A               	movwf	??_initLCD& (0+255),c
  1831  00181C  0EF5               	movlw	245
  1832  00181E                     u2937:
  1833  00181E  2EE8               	decfsz	wreg,f,c
  1834  001820  D7FE               	goto	u2937
  1835  001822  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1836  001824  D7FC               	goto	u2937
  1837  001826  F000               	nop	
  1838                           
  1839                           ;LCD.c: 52: LCDout(0b0011);
  1840  001828  0E03               	movlw	3
  1841  00182A  ECA3  F00B         	call	_LCDout
  1842                           
  1843                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1844  00182E  0E0D               	movlw	13
  1845  001830  6E2A               	movwf	??_initLCD& (0+255),c
  1846  001832  0EFC               	movlw	252
  1847  001834                     u2947:
  1848  001834  2EE8               	decfsz	wreg,f,c
  1849  001836  D7FE               	goto	u2947
  1850  001838  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1851  00183A  D7FC               	goto	u2947
  1852                           
  1853                           ;LCD.c: 54: LCDout(0b0011);
  1854  00183C  0E03               	movlw	3
  1855  00183E  ECA3  F00B         	call	_LCDout
  1856                           
  1857                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1858  001842  0E85               	movlw	133
  1859  001844                     u2957:
  1860  001844  2EE8               	decfsz	wreg,f,c
  1861  001846  D7FE               	goto	u2957
  1862  001848  F000               	nop	
  1863                           
  1864                           ;LCD.c: 56: LCDout(0b0011);
  1865  00184A  0E03               	movlw	3
  1866  00184C  ECA3  F00B         	call	_LCDout
  1867                           
  1868                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1869  001850  0E21               	movlw	33
  1870  001852                     u2967:
  1871  001852  2EE8               	decfsz	wreg,f,c
  1872  001854  D7FE               	goto	u2967
  1873  001856  F000               	nop	
  1874                           
  1875                           ;LCD.c: 58: LCDout(0b0010);
  1876  001858  0E02               	movlw	2
  1877  00185A  ECA3  F00B         	call	_LCDout
  1878                           
  1879                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1880  00185E  0E21               	movlw	33
  1881  001860                     u2977:
  1882  001860  2EE8               	decfsz	wreg,f,c
  1883  001862  D7FE               	goto	u2977
  1884  001864  F000               	nop	
  1885                           
  1886                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1887  001866  0E00               	movlw	0
  1888  001868  6E28               	movwf	SendLCD@type,c
  1889  00186A  0E28               	movlw	40
  1890  00186C  ECA2  F00F         	call	_SendLCD
  1891                           
  1892                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1893  001870  0E21               	movlw	33
  1894  001872                     u2987:
  1895  001872  2EE8               	decfsz	wreg,f,c
  1896  001874  D7FE               	goto	u2987
  1897  001876  F000               	nop	
  1898                           
  1899                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1900  001878  0E00               	movlw	0
  1901  00187A  6E28               	movwf	SendLCD@type,c
  1902  00187C  0E08               	movlw	8
  1903  00187E  ECA2  F00F         	call	_SendLCD
  1904                           
  1905                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1906  001882  0E21               	movlw	33
  1907  001884                     u2997:
  1908  001884  2EE8               	decfsz	wreg,f,c
  1909  001886  D7FE               	goto	u2997
  1910  001888  F000               	nop	
  1911                           
  1912                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1913  00188A  0E00               	movlw	0
  1914  00188C  6E28               	movwf	SendLCD@type,c
  1915  00188E  0E01               	movlw	1
  1916  001890  ECA2  F00F         	call	_SendLCD
  1917                           
  1918                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1919  001894  0E0D               	movlw	13
  1920  001896  6E2A               	movwf	??_initLCD& (0+255),c
  1921  001898  0EFC               	movlw	252
  1922  00189A                     u3007:
  1923  00189A  2EE8               	decfsz	wreg,f,c
  1924  00189C  D7FE               	goto	u3007
  1925  00189E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1926  0018A0  D7FC               	goto	u3007
  1927                           
  1928                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1929  0018A2  0E00               	movlw	0
  1930  0018A4  6E28               	movwf	SendLCD@type,c
  1931  0018A6  0E06               	movlw	6
  1932  0018A8  ECA2  F00F         	call	_SendLCD
  1933                           
  1934                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1935  0018AC  0E21               	movlw	33
  1936  0018AE                     u3017:
  1937  0018AE  2EE8               	decfsz	wreg,f,c
  1938  0018B0  D7FE               	goto	u3017
  1939  0018B2  F000               	nop	
  1940                           
  1941                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1942  0018B4  0E00               	movlw	0
  1943  0018B6  6E28               	movwf	SendLCD@type,c
  1944  0018B8  0E0C               	movlw	12
  1945  0018BA  ECA2  F00F         	call	_SendLCD
  1946                           
  1947                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1948  0018BE  0E21               	movlw	33
  1949  0018C0                     u3027:
  1950  0018C0  2EE8               	decfsz	wreg,f,c
  1951  0018C2  D7FE               	goto	u3027
  1952  0018C4  F000               	nop	
  1953  0018C6  0012               	return		;funcret
  1954  0018C8                     __end_of_initLCD:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           prodh	equ	0xFF4
  1958                           prodl	equ	0xFF3
  1959                           intcon	equ	0xFF2
  1960                           postinc0	equ	0xFEE
  1961                           wreg	equ	0xFE8
  1962                           indf1	equ	0xFE7
  1963                           fsr1h	equ	0xFE2
  1964                           fsr1l	equ	0xFE1
  1965                           indf2	equ	0xFDF
  1966                           fsr2h	equ	0xFDA
  1967                           fsr2l	equ	0xFD9
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _initIR *****************
  1971 ;; Defined at:
  1972 ;;		line 30 in file "IR_Reading.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;		None               void
  1979 ;; Registers used:
  1980 ;;		wreg, status,2
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1986 ;;      Params:         0       0       0       0
  1987 ;;      Locals:         0       0       0       0
  1988 ;;      Temps:          0       0       0       0
  1989 ;;      Totals:         0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    3
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text4
  2001  0000DA                     __ptext4:
  2002                           	opt stack 0
  2003  0000DA                     _initIR:
  2004                           	opt stack 27
  2005                           
  2006                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2007                           
  2008                           ;incstack = 0
  2009  0000DA  9489               	bcf	3977,2,c	;volatile
  2010                           
  2011                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2012  0000DC  9689               	bcf	3977,3,c	;volatile
  2013                           
  2014                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2015  0000DE  8492               	bsf	3986,2,c	;volatile
  2016                           
  2017                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2018  0000E0  8692               	bsf	3986,3,c	;volatile
  2019                           
  2020                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2021  0000E2  94B8               	bcf	4024,2,c	;volatile
  2022                           
  2023                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2024  0000E4  96B8               	bcf	4024,3,c	;volatile
  2025                           
  2026                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2027  0000E6  9CB8               	bcf	4024,6,c	;volatile
  2028                           
  2029                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2030  0000E8  9EB8               	bcf	4024,7,c	;volatile
  2031                           
  2032                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2033  0000EA  0E06               	movlw	6
  2034  0000EC  6E63               	movwf	3939,c	;volatile
  2035                           
  2036                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2037  0000EE  0E06               	movlw	6
  2038  0000F0  6E62               	movwf	3938,c	;volatile
  2039                           
  2040                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2041  0000F2  9096               	bcf	3990,0,c	;volatile
  2042                           
  2043                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2044  0000F4  9296               	bcf	3990,1,c	;volatile
  2045                           
  2046                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2047  0000F6  0E59               	movlw	89
  2048  0000F8  6EB7               	movwf	4023,c	;volatile
  2049  0000FA  0012               	return		;funcret
  2050  0000FC                     __end_of_initIR:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           prodh	equ	0xFF4
  2054                           prodl	equ	0xFF3
  2055                           intcon	equ	0xFF2
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           indf1	equ	0xFE7
  2059                           fsr1h	equ	0xFE2
  2060                           fsr1l	equ	0xFE1
  2061                           indf2	equ	0xFDF
  2062                           fsr2h	equ	0xFDA
  2063                           fsr2l	equ	0xFD9
  2064                           status	equ	0xFD8
  2065                           
  2066 ;; *************** function _fullSpeedBack *****************
  2067 ;; Defined at:
  2068 ;;		line 125 in file "dc_motor.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  2071 ;;		 -> main@mL(9), 
  2072 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  2073 ;;		 -> main@mR(9), 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;		None               void
  2078 ;; Registers used:
  2079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2085 ;;      Params:         0       4       0       0
  2086 ;;      Locals:         0       0       0       0
  2087 ;;      Temps:          0       0       0       0
  2088 ;;      Totals:         0       4       0       0
  2089 ;;Total ram usage:        4 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    6
  2092 ;; This function calls:
  2093 ;;		_fullSpeedAhead
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text5
  2100  001E00                     __ptext5:
  2101                           	opt stack 0
  2102  001E00                     _fullSpeedBack:
  2103                           	opt stack 24
  2104                           
  2105                           ;dc_motor.c: 128: mL->direction=0;
  2106                           
  2107                           ;incstack = 0
  2108  001E00  0100               	movlb	0	; () banked
  2109  001E02  EE20 F001          	lfsr	2,1
  2110  001E06  5166               	movf	fullSpeedBack@mL& (0+255),w,b
  2111  001E08  26D9               	addwf	fsr2l,f,c
  2112  001E0A  5167               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2113  001E0C  22DA               	addwfc	fsr2h,f,c
  2114  001E0E  0E00               	movlw	0
  2115  001E10  6EDF               	movwf	indf2,c
  2116                           
  2117                           ;dc_motor.c: 129: mR->direction=0;
  2118  001E12  0100               	movlb	0	; () banked
  2119  001E14  EE20 F001          	lfsr	2,1
  2120  001E18  5168               	movf	fullSpeedBack@mR& (0+255),w,b
  2121  001E1A  26D9               	addwf	fsr2l,f,c
  2122  001E1C  5169               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2123  001E1E  22DA               	addwfc	fsr2h,f,c
  2124  001E20  0E00               	movlw	0
  2125  001E22  6EDF               	movwf	indf2,c
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2129  001E24  C066  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2130  001E28  C067  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2131  001E2C  C068  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2132  001E30  C069  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2133  001E34  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  2134  001E38  0012               	return		;funcret
  2135  001E3A                     __end_of_fullSpeedBack:
  2136                           	opt stack 0
  2137                           tblptru	equ	0xFF8
  2138                           prodh	equ	0xFF4
  2139                           prodl	equ	0xFF3
  2140                           intcon	equ	0xFF2
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           indf1	equ	0xFE7
  2144                           fsr1h	equ	0xFE2
  2145                           fsr1l	equ	0xFE1
  2146                           indf2	equ	0xFDF
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _enableSensor *****************
  2152 ;; Defined at:
  2153 ;;		line 106 in file "IR_Reading.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  sensor          1    wreg     unsigned char 
  2156 ;;  status          1   35[COMRAM] unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  sensor          1   36[COMRAM] unsigned char 
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2168 ;;      Params:         1       0       0       0
  2169 ;;      Locals:         1       0       0       0
  2170 ;;      Temps:          0       0       0       0
  2171 ;;      Totals:         2       0       0       0
  2172 ;;Total ram usage:        2 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    3
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text6
  2183  001F9E                     __ptext6:
  2184                           	opt stack 0
  2185  001F9E                     _enableSensor:
  2186                           	opt stack 27
  2187                           
  2188                           ;incstack = 0
  2189                           ;enableSensor@sensor stored from wreg
  2190  001F9E  6E25               	movwf	enableSensor@sensor,c
  2191                           
  2192                           ;IR_Reading.c: 108: if (sensor==0){
  2193  001FA0  5025               	movf	enableSensor@sensor,w,c
  2194  001FA2  A4D8               	btfss	status,2,c
  2195  001FA4  D006               	goto	l2432
  2196                           
  2197                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2198  001FA6  B024               	btfsc	enableSensor@status,0,c
  2199  001FA8  D002               	bra	u1705
  2200  001FAA  908D               	bcf	3981,0,c	;volatile
  2201  001FAC  D001               	bra	u1706
  2202  001FAE                     u1705:
  2203  001FAE  808D               	bsf	3981,0,c	;volatile
  2204  001FB0                     u1706:
  2205                           
  2206                           ;IR_Reading.c: 110: } else if (sensor==1){
  2207  001FB0  0012               	return	
  2208  001FB2                     l2432:
  2209  001FB2  0425               	decf	enableSensor@sensor,w,c
  2210  001FB4  A4D8               	btfss	status,2,c
  2211  001FB6  0012               	return	
  2212                           
  2213                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2214  001FB8  B024               	btfsc	enableSensor@status,0,c
  2215  001FBA  D002               	bra	u1725
  2216  001FBC  928D               	bcf	3981,1,c	;volatile
  2217  001FBE  D001               	bra	u1726
  2218  001FC0                     u1725:
  2219  001FC0  828D               	bsf	3981,1,c	;volatile
  2220  001FC2                     u1726:
  2221  001FC2  0012               	return	
  2222  001FC4                     __end_of_enableSensor:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           prodh	equ	0xFF4
  2226                           prodl	equ	0xFF3
  2227                           intcon	equ	0xFF2
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           indf1	equ	0xFE7
  2231                           fsr1h	equ	0xFE2
  2232                           fsr1l	equ	0xFE1
  2233                           indf2	equ	0xFDF
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function _VerifySignal *****************
  2239 ;; Defined at:
  2240 ;;		line 55 in file "RFID_Reader.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2243 ;;		 -> ReceivedString(16), 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  hexByte         2   44[COMRAM] unsigned int 
  2246 ;;  i               1   46[COMRAM] unsigned char 
  2247 ;;  checksum        1   43[COMRAM] unsigned char 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      unsigned char 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2257 ;;      Params:         2       0       0       0
  2258 ;;      Locals:         4       0       0       0
  2259 ;;      Temps:          6       0       0       0
  2260 ;;      Totals:        12       0       0       0
  2261 ;;Total ram usage:       12 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    3
  2264 ;; This function calls:
  2265 ;;		Nothing
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text7
  2272  0018C8                     __ptext7:
  2273                           	opt stack 0
  2274  0018C8                     _VerifySignal:
  2275                           	opt stack 27
  2276                           
  2277                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2278                           
  2279                           ;incstack = 0
  2280  0018C8  0E00               	movlw	0
  2281  0018CA  6E2C               	movwf	VerifySignal@checksum,c
  2282                           
  2283                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2284  0018CC  0E00               	movlw	0
  2285  0018CE  6E2E               	movwf	VerifySignal@hexByte+1,c
  2286  0018D0  0E00               	movlw	0
  2287  0018D2  6E2D               	movwf	VerifySignal@hexByte,c
  2288                           
  2289                           ;RFID_Reader.c: 58: unsigned char i=0;
  2290  0018D4  0E00               	movlw	0
  2291  0018D6  6E2F               	movwf	VerifySignal@i,c
  2292                           
  2293                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2294  0018D8  EE20 F004          	lfsr	2,4
  2295  0018DC  5024               	movf	VerifySignal@Signal,w,c
  2296  0018DE  26D9               	addwf	fsr2l,f,c
  2297  0018E0  5025               	movf	VerifySignal@Signal+1,w,c
  2298  0018E2  22DA               	addwfc	fsr2h,f,c
  2299  0018E4  50DF               	movf	indf2,w,c
  2300  0018E6  6E26               	movwf	??_VerifySignal& (0+255),c
  2301  0018E8  EE20 F003          	lfsr	2,3
  2302  0018EC  5024               	movf	VerifySignal@Signal,w,c
  2303  0018EE  26D9               	addwf	fsr2l,f,c
  2304  0018F0  5025               	movf	VerifySignal@Signal+1,w,c
  2305  0018F2  22DA               	addwfc	fsr2h,f,c
  2306  0018F4  50DF               	movf	indf2,w,c
  2307  0018F6  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2308  0018F8  5027               	movf	??_VerifySignal+1,w,c
  2309  0018FA  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2310  0018FC  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2311  0018FE  5026               	movf	??_VerifySignal,w,c
  2312  001900  2428               	addwf	??_VerifySignal+2,w,c
  2313  001902  6E2D               	movwf	VerifySignal@hexByte,c
  2314  001904  0E00               	movlw	0
  2315  001906  2029               	addwfc	??_VerifySignal+3,w,c
  2316  001908  6E2E               	movwf	VerifySignal@hexByte+1,c
  2317                           
  2318                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2319  00190A  EE20 F002          	lfsr	2,2
  2320  00190E  5024               	movf	VerifySignal@Signal,w,c
  2321  001910  26D9               	addwf	fsr2l,f,c
  2322  001912  5025               	movf	VerifySignal@Signal+1,w,c
  2323  001914  22DA               	addwfc	fsr2h,f,c
  2324  001916  50DF               	movf	indf2,w,c
  2325  001918  182D               	xorwf	VerifySignal@hexByte,w,c
  2326  00191A  6E2C               	movwf	VerifySignal@checksum,c
  2327                           
  2328                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2329  00191C  0E05               	movlw	5
  2330  00191E  6E2F               	movwf	VerifySignal@i,c
  2331  001920                     l2836:
  2332  001920  0E09               	movlw	9
  2333  001922  642F               	cpfsgt	VerifySignal@i,c
  2334  001924  D001               	goto	l2840
  2335  001926  D028               	goto	l2848
  2336  001928                     l2840:
  2337                           
  2338                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2339  001928  502F               	movf	VerifySignal@i,w,c
  2340  00192A  6E26               	movwf	??_VerifySignal& (0+255),c
  2341  00192C  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2342  00192E  0E01               	movlw	1
  2343  001930  2626               	addwf	??_VerifySignal,f,c
  2344  001932  0E00               	movlw	0
  2345  001934  2227               	addwfc	??_VerifySignal+1,f,c
  2346  001936  5026               	movf	??_VerifySignal,w,c
  2347  001938  2424               	addwf	VerifySignal@Signal,w,c
  2348  00193A  6ED9               	movwf	fsr2l,c
  2349  00193C  5027               	movf	??_VerifySignal+1,w,c
  2350  00193E  2025               	addwfc	VerifySignal@Signal+1,w,c
  2351  001940  6EDA               	movwf	fsr2h,c
  2352  001942  50DF               	movf	indf2,w,c
  2353  001944  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2354  001946  502F               	movf	VerifySignal@i,w,c
  2355  001948  0D01               	mullw	1
  2356  00194A  50F3               	movf	prodl,w,c
  2357  00194C  2424               	addwf	VerifySignal@Signal,w,c
  2358  00194E  6ED9               	movwf	fsr2l,c
  2359  001950  50F4               	movf	prodh,w,c
  2360  001952  2025               	addwfc	VerifySignal@Signal+1,w,c
  2361  001954  6EDA               	movwf	fsr2h,c
  2362  001956  50DF               	movf	indf2,w,c
  2363  001958  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2364  00195A  5029               	movf	??_VerifySignal+3,w,c
  2365  00195C  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2366  00195E  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2367  001960  5028               	movf	??_VerifySignal+2,w,c
  2368  001962  242A               	addwf	??_VerifySignal+4,w,c
  2369  001964  6E2D               	movwf	VerifySignal@hexByte,c
  2370  001966  0E00               	movlw	0
  2371  001968  202B               	addwfc	??_VerifySignal+5,w,c
  2372  00196A  6E2E               	movwf	VerifySignal@hexByte+1,c
  2373                           
  2374                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2375  00196C  502C               	movf	VerifySignal@checksum,w,c
  2376  00196E  182D               	xorwf	VerifySignal@hexByte,w,c
  2377  001970  6E2C               	movwf	VerifySignal@checksum,c
  2378  001972  0E02               	movlw	2
  2379  001974  262F               	addwf	VerifySignal@i,f,c
  2380  001976  D7D4               	goto	l2836
  2381  001978                     l2848:
  2382                           
  2383                           ;RFID_Reader.c: 68: }
  2384                           ;RFID_Reader.c: 71: return 1;
  2385  001978  0E01               	movlw	1
  2386  00197A  0012               	return	
  2387  00197C                     __end_of_VerifySignal:
  2388                           	opt stack 0
  2389                           tblptru	equ	0xFF8
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           postinc0	equ	0xFEE
  2394                           wreg	equ	0xFE8
  2395                           indf1	equ	0xFE7
  2396                           fsr1h	equ	0xFE2
  2397                           fsr1l	equ	0xFE1
  2398                           indf2	equ	0xFDF
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _ScanWithRange *****************
  2404 ;; Defined at:
  2405 ;;		line 132 in file "Movement.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  2408 ;;		 -> main@mL(9), 
  2409 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  2410 ;;		 -> main@mR(9), 
  2411 ;;  tenth_second    1   14[BANK0 ] unsigned char 
  2412 ;;  MoveTimeEntr    2   15[BANK0 ] PTR unsigned char 
  2413 ;;		 -> main@MoveTime(100), 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  buf            40   19[BANK0 ] unsigned char [40]
  2416 ;;  SensorResult    4   70[BANK0 ] unsigned int [2]
  2417 ;;  SensorResult    4   66[BANK0 ] unsigned int [2]
  2418 ;;  SensorResult    4   62[BANK0 ] unsigned int [2]
  2419 ;;  ResultFalseR    1   61[BANK0 ] unsigned char 
  2420 ;;  ResultFalseC    1   60[BANK0 ] unsigned char 
  2421 ;;  ResultFalseL    1   59[BANK0 ] unsigned char 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      unsigned char 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2431 ;;      Params:         0       7       0       0
  2432 ;;      Locals:         0      55       0       0
  2433 ;;      Temps:          0       2       0       0
  2434 ;;      Totals:         0      64       0       0
  2435 ;;Total ram usage:       64 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    7
  2438 ;; This function calls:
  2439 ;;		_LCD_String
  2440 ;;		_SendLCD
  2441 ;;		_SetLine
  2442 ;;		___awdiv
  2443 ;;		_delay_s
  2444 ;;		_delay_tenth_s
  2445 ;;		_grabLeftIR
  2446 ;;		_grabRightIR
  2447 ;;		_sprintf
  2448 ;;		_stop
  2449 ;;		_turnLeft
  2450 ;;		_turnRight
  2451 ;; This function is called by:
  2452 ;;		_main
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text8
  2457  000394                     __ptext8:
  2458                           	opt stack 0
  2459  000394                     _ScanWithRange:
  2460                           	opt stack 23
  2461                           
  2462                           ;Movement.c: 135: unsigned int SensorResultL[2]={0,0};
  2463                           
  2464                           ;incstack = 0
  2465  000394  C0B0  F09E         	movff	ScanWithRange@F3887,ScanWithRange@SensorResultL
  2466  000398  C0B1  F09F         	movff	ScanWithRange@F3887+1,ScanWithRange@SensorResultL+1
  2467  00039C  C0B2  F0A0         	movff	ScanWithRange@F3887+2,ScanWithRange@SensorResultL+2
  2468  0003A0  C0B3  F0A1         	movff	ScanWithRange@F3887+3,ScanWithRange@SensorResultL+3
  2469                           
  2470                           ;Movement.c: 136: unsigned int SensorResultC[2]={0,0};
  2471  0003A4  C0B4  F0A2         	movff	ScanWithRange@F3889,ScanWithRange@SensorResultC
  2472  0003A8  C0B5  F0A3         	movff	ScanWithRange@F3889+1,ScanWithRange@SensorResultC+1
  2473  0003AC  C0B6  F0A4         	movff	ScanWithRange@F3889+2,ScanWithRange@SensorResultC+2
  2474  0003B0  C0B7  F0A5         	movff	ScanWithRange@F3889+3,ScanWithRange@SensorResultC+3
  2475                           
  2476                           ;Movement.c: 137: unsigned int SensorResultR[2]={0,0};
  2477  0003B4  C0B8  F0A6         	movff	ScanWithRange@F3891,ScanWithRange@SensorResultR
  2478  0003B8  C0B9  F0A7         	movff	ScanWithRange@F3891+1,ScanWithRange@SensorResultR+1
  2479  0003BC  C0BA  F0A8         	movff	ScanWithRange@F3891+2,ScanWithRange@SensorResultR+2
  2480  0003C0  C0BB  F0A9         	movff	ScanWithRange@F3891+3,ScanWithRange@SensorResultR+3
  2481                           
  2482                           ;Movement.c: 138: unsigned char ResultFalseL=0;
  2483  0003C4  0E00               	movlw	0
  2484  0003C6  0100               	movlb	0	; () banked
  2485  0003C8  6F9B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2486                           
  2487                           ;Movement.c: 139: unsigned char ResultFalseC=0;
  2488  0003CA  0E00               	movlw	0
  2489  0003CC  0100               	movlb	0	; () banked
  2490  0003CE  6F9C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2491                           
  2492                           ;Movement.c: 140: unsigned char ResultFalseR=0;
  2493  0003D0  0E00               	movlw	0
  2494  0003D2  0100               	movlb	0	; () banked
  2495  0003D4  6F9D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;Movement.c: 141: char buf[40];
  2499                           ;Movement.c: 148: stop(mL,mR);
  2500  0003D6  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2501  0003DA  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2502  0003DE  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2503  0003E2  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2504  0003E6  ECBE  F00C         	call	_stop	;wreg free
  2505                           
  2506                           ;Movement.c: 149: SensorResultC[0]=grabLeftIR();
  2507  0003EA  ECC8  F00D         	call	_grabLeftIR	;wreg free
  2508  0003EE  C024  F0A2         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2509  0003F2  C025  F0A3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2510                           
  2511                           ;Movement.c: 150: SensorResultC[1]=grabRightIR();
  2512  0003F6  EC8F  F00D         	call	_grabRightIR	;wreg free
  2513  0003FA  C024  F0A4         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2514  0003FE  C025  F0A5         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2515                           
  2516                           ;Movement.c: 153: SendLCD(0b00000001,0);
  2517  000402  0E00               	movlw	0
  2518  000404  6E28               	movwf	SendLCD@type,c
  2519  000406  0E01               	movlw	1
  2520  000408  ECA2  F00F         	call	_SendLCD
  2521                           
  2522                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2523  00040C  0E21               	movlw	33
  2524  00040E                     u3037:
  2525  00040E  2EE8               	decfsz	wreg,f,c
  2526  000410  D7FE               	goto	u3037
  2527  000412  F000               	nop	
  2528                           
  2529                           ;Movement.c: 155: SendLCD(0b00000010,0);
  2530  000414  0E00               	movlw	0
  2531  000416  6E28               	movwf	SendLCD@type,c
  2532  000418  0E02               	movlw	2
  2533  00041A  ECA2  F00F         	call	_SendLCD
  2534                           
  2535                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  2536  00041E  0E06               	movlw	6
  2537  000420  0100               	movlb	0	; () banked
  2538  000422  6F71               	movwf	??_ScanWithRange& (0+255),b
  2539  000424  0E30               	movlw	48
  2540  000426                     u3047:
  2541  000426  2EE8               	decfsz	wreg,f,c
  2542  000428  D7FE               	goto	u3047
  2543  00042A  2F71               	decfsz	??_ScanWithRange& (0+255),f,b
  2544  00042C  D7FC               	goto	u3047
  2545  00042E  D000               	nop2	
  2546                           
  2547                           ;Movement.c: 157: SetLine(1);
  2548  000430  0E01               	movlw	1
  2549  000432  EC8A  F00F         	call	_SetLine
  2550                           
  2551                           ;Movement.c: 158: LCD_String("      ScanWithRange");
  2552  000436  0E11               	movlw	low STR_8
  2553  000438  6E2A               	movwf	LCD_String@string,c
  2554  00043A  0E03               	movlw	high STR_8
  2555  00043C  6E2B               	movwf	LCD_String@string+1,c
  2556  00043E  EC39  F00E         	call	_LCD_String	;wreg free
  2557                           
  2558                           ;Movement.c: 159: SetLine(2);
  2559  000442  0E02               	movlw	2
  2560  000444  EC8A  F00F         	call	_SetLine
  2561                           
  2562                           ;Movement.c: 160: sprintf(buf,"     %d, %d",SensorResultC[0],SensorResultC[1]);
  2563  000448  0E73               	movlw	low ScanWithRange@buf
  2564  00044A  6E30               	movwf	sprintf@sp,c
  2565  00044C  0E00               	movlw	high ScanWithRange@buf
  2566  00044E  6E31               	movwf	sprintf@sp+1,c
  2567  000450  0E86               	movlw	low STR_7
  2568  000452  6E32               	movwf	sprintf@f,c
  2569  000454  0E03               	movlw	high STR_7
  2570  000456  6E33               	movwf	sprintf@f+1,c
  2571  000458  C0A2  F034         	movff	ScanWithRange@SensorResultC,?_sprintf+4
  2572  00045C  C0A3  F035         	movff	ScanWithRange@SensorResultC+1,?_sprintf+5
  2573  000460  C0A4  F036         	movff	ScanWithRange@SensorResultC+2,?_sprintf+6
  2574  000464  C0A5  F037         	movff	ScanWithRange@SensorResultC+3,?_sprintf+7
  2575  000468  EC4E  F00A         	call	_sprintf	;wreg free
  2576                           
  2577                           ;Movement.c: 161: LCD_String(buf);
  2578  00046C  0E73               	movlw	low ScanWithRange@buf
  2579  00046E  6E2A               	movwf	LCD_String@string,c
  2580  000470  0E00               	movlw	high ScanWithRange@buf
  2581  000472  6E2B               	movwf	LCD_String@string+1,c
  2582  000474  EC39  F00E         	call	_LCD_String	;wreg free
  2583                           
  2584                           ;Movement.c: 165: CAP1BUFH=0;
  2585  000478  0E00               	movlw	0
  2586  00047A  6E69               	movwf	3945,c	;volatile
  2587                           
  2588                           ;Movement.c: 166: CAP1BUFL=0;
  2589  00047C  0E00               	movlw	0
  2590  00047E  6E68               	movwf	3944,c	;volatile
  2591                           
  2592                           ;Movement.c: 167: CAP2BUFH=0;
  2593  000480  0E00               	movlw	0
  2594  000482  6E67               	movwf	3943,c	;volatile
  2595                           
  2596                           ;Movement.c: 168: CAP2BUFL=0;
  2597  000484  0E00               	movlw	0
  2598  000486  6E66               	movwf	3942,c	;volatile
  2599                           
  2600                           ;Movement.c: 171: turnLeft(mL,mR);
  2601  000488  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2602  00048C  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2603  000490  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2604  000494  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2605  000498  ECB8  F00E         	call	_turnLeft	;wreg free
  2606                           
  2607                           ;Movement.c: 172: delay_tenth_s(tenth_seconds);
  2608  00049C  0100               	movlb	0	; () banked
  2609  00049E  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2610  0004A0  EC39  F00F         	call	_delay_tenth_s
  2611                           
  2612                           ;Movement.c: 173: (*MoveTimeEntry) += tenth_seconds;
  2613  0004A4  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2614  0004A8  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2615  0004AC  0100               	movlb	0	; () banked
  2616  0004AE  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2617  0004B0  26DF               	addwf	indf2,f,c
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;Movement.c: 175: stop(mL,mR);
  2621  0004B2  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2622  0004B6  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2623  0004BA  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2624  0004BE  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2625  0004C2  ECBE  F00C         	call	_stop	;wreg free
  2626                           
  2627                           ;Movement.c: 176: SensorResultL[0]=grabLeftIR();
  2628  0004C6  ECC8  F00D         	call	_grabLeftIR	;wreg free
  2629  0004CA  C024  F09E         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2630  0004CE  C025  F09F         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2631                           
  2632                           ;Movement.c: 177: SensorResultL[1]=grabRightIR();
  2633  0004D2  EC8F  F00D         	call	_grabRightIR	;wreg free
  2634  0004D6  C024  F0A0         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2635  0004DA  C025  F0A1         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2636                           
  2637                           ;Movement.c: 180: SendLCD(0b00000001,0);
  2638  0004DE  0E00               	movlw	0
  2639  0004E0  6E28               	movwf	SendLCD@type,c
  2640  0004E2  0E01               	movlw	1
  2641  0004E4  ECA2  F00F         	call	_SendLCD
  2642                           
  2643                           ;Movement.c: 181: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2644  0004E8  0E21               	movlw	33
  2645  0004EA                     u3057:
  2646  0004EA  2EE8               	decfsz	wreg,f,c
  2647  0004EC  D7FE               	goto	u3057
  2648  0004EE  F000               	nop	
  2649                           
  2650                           ;Movement.c: 182: SendLCD(0b00000010,0);
  2651  0004F0  0E00               	movlw	0
  2652  0004F2  6E28               	movwf	SendLCD@type,c
  2653  0004F4  0E02               	movlw	2
  2654  0004F6  ECA2  F00F         	call	_SendLCD
  2655                           
  2656                           ;Movement.c: 183: _delay((unsigned long)((2)*(8000000/4000.0)));
  2657  0004FA  0E06               	movlw	6
  2658  0004FC  0100               	movlb	0	; () banked
  2659  0004FE  6F71               	movwf	??_ScanWithRange& (0+255),b
  2660  000500  0E30               	movlw	48
  2661  000502                     u3067:
  2662  000502  2EE8               	decfsz	wreg,f,c
  2663  000504  D7FE               	goto	u3067
  2664  000506  2F71               	decfsz	??_ScanWithRange& (0+255),f,b
  2665  000508  D7FC               	goto	u3067
  2666  00050A  D000               	nop2	
  2667                           
  2668                           ;Movement.c: 184: SetLine(1);
  2669  00050C  0E01               	movlw	1
  2670  00050E  EC8A  F00F         	call	_SetLine
  2671                           
  2672                           ;Movement.c: 185: LCD_String("      ScanWithRange");
  2673  000512  0E11               	movlw	low STR_8
  2674  000514  6E2A               	movwf	LCD_String@string,c
  2675  000516  0E03               	movlw	high STR_8
  2676  000518  6E2B               	movwf	LCD_String@string+1,c
  2677  00051A  EC39  F00E         	call	_LCD_String	;wreg free
  2678                           
  2679                           ;Movement.c: 186: SetLine(2);
  2680  00051E  0E02               	movlw	2
  2681  000520  EC8A  F00F         	call	_SetLine
  2682                           
  2683                           ;Movement.c: 187: sprintf(buf,"     %d, %d",SensorResultL[0],SensorResultL[1]);
  2684  000524  0E73               	movlw	low ScanWithRange@buf
  2685  000526  6E30               	movwf	sprintf@sp,c
  2686  000528  0E00               	movlw	high ScanWithRange@buf
  2687  00052A  6E31               	movwf	sprintf@sp+1,c
  2688  00052C  0E86               	movlw	low STR_7
  2689  00052E  6E32               	movwf	sprintf@f,c
  2690  000530  0E03               	movlw	high STR_7
  2691  000532  6E33               	movwf	sprintf@f+1,c
  2692  000534  C09E  F034         	movff	ScanWithRange@SensorResultL,?_sprintf+4
  2693  000538  C09F  F035         	movff	ScanWithRange@SensorResultL+1,?_sprintf+5
  2694  00053C  C0A0  F036         	movff	ScanWithRange@SensorResultL+2,?_sprintf+6
  2695  000540  C0A1  F037         	movff	ScanWithRange@SensorResultL+3,?_sprintf+7
  2696  000544  EC4E  F00A         	call	_sprintf	;wreg free
  2697                           
  2698                           ;Movement.c: 188: LCD_String(buf);
  2699  000548  0E73               	movlw	low ScanWithRange@buf
  2700  00054A  6E2A               	movwf	LCD_String@string,c
  2701  00054C  0E00               	movlw	high ScanWithRange@buf
  2702  00054E  6E2B               	movwf	LCD_String@string+1,c
  2703  000550  EC39  F00E         	call	_LCD_String	;wreg free
  2704                           
  2705                           ;Movement.c: 192: CAP1BUFH=0;
  2706  000554  0E00               	movlw	0
  2707  000556  6E69               	movwf	3945,c	;volatile
  2708                           
  2709                           ;Movement.c: 193: CAP1BUFL=0;
  2710  000558  0E00               	movlw	0
  2711  00055A  6E68               	movwf	3944,c	;volatile
  2712                           
  2713                           ;Movement.c: 194: CAP2BUFH=0;
  2714  00055C  0E00               	movlw	0
  2715  00055E  6E67               	movwf	3943,c	;volatile
  2716                           
  2717                           ;Movement.c: 195: CAP2BUFL=0;
  2718  000560  0E00               	movlw	0
  2719  000562  6E66               	movwf	3942,c	;volatile
  2720                           
  2721                           ;Movement.c: 198: turnRight(mL,mR);
  2722  000564  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  2723  000568  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2724  00056C  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  2725  000570  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2726  000574  EC91  F00E         	call	_turnRight	;wreg free
  2727                           
  2728                           ;Movement.c: 199: delay_tenth_s(2*tenth_seconds);
  2729  000578  0100               	movlb	0	; () banked
  2730  00057A  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2731  00057C  0D02               	mullw	2
  2732  00057E  50F3               	movf	prodl,w,c
  2733  000580  EC39  F00F         	call	_delay_tenth_s
  2734                           
  2735                           ;Movement.c: 200: (*MoveTimeEntry) -= 2*tenth_seconds;
  2736  000584  0100               	movlb	0	; () banked
  2737  000586  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2738  000588  0D02               	mullw	2
  2739  00058A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2740  00058E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2741  000592  50F3               	movf	prodl,w,c
  2742  000594  5EDF               	subwf	indf2,f,c
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;Movement.c: 202: stop(mL,mR);
  2746  000596  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2747  00059A  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2748  00059E  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2749  0005A2  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2750  0005A6  ECBE  F00C         	call	_stop	;wreg free
  2751                           
  2752                           ;Movement.c: 203: SensorResultR[0]=grabLeftIR();
  2753  0005AA  ECC8  F00D         	call	_grabLeftIR	;wreg free
  2754  0005AE  C024  F0A6         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2755  0005B2  C025  F0A7         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2756                           
  2757                           ;Movement.c: 204: SensorResultR[1]=grabRightIR();
  2758  0005B6  EC8F  F00D         	call	_grabRightIR	;wreg free
  2759  0005BA  C024  F0A8         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2760  0005BE  C025  F0A9         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2761                           
  2762                           ;Movement.c: 207: SendLCD(0b00000001,0);
  2763  0005C2  0E00               	movlw	0
  2764  0005C4  6E28               	movwf	SendLCD@type,c
  2765  0005C6  0E01               	movlw	1
  2766  0005C8  ECA2  F00F         	call	_SendLCD
  2767                           
  2768                           ;Movement.c: 208: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2769  0005CC  0E21               	movlw	33
  2770  0005CE                     u3077:
  2771  0005CE  2EE8               	decfsz	wreg,f,c
  2772  0005D0  D7FE               	goto	u3077
  2773  0005D2  F000               	nop	
  2774                           
  2775                           ;Movement.c: 209: SendLCD(0b00000010,0);
  2776  0005D4  0E00               	movlw	0
  2777  0005D6  6E28               	movwf	SendLCD@type,c
  2778  0005D8  0E02               	movlw	2
  2779  0005DA  ECA2  F00F         	call	_SendLCD
  2780                           
  2781                           ;Movement.c: 210: _delay((unsigned long)((2)*(8000000/4000.0)));
  2782  0005DE  0E06               	movlw	6
  2783  0005E0  0100               	movlb	0	; () banked
  2784  0005E2  6F71               	movwf	??_ScanWithRange& (0+255),b
  2785  0005E4  0E30               	movlw	48
  2786  0005E6                     u3087:
  2787  0005E6  2EE8               	decfsz	wreg,f,c
  2788  0005E8  D7FE               	goto	u3087
  2789  0005EA  2F71               	decfsz	??_ScanWithRange& (0+255),f,b
  2790  0005EC  D7FC               	goto	u3087
  2791  0005EE  D000               	nop2	
  2792                           
  2793                           ;Movement.c: 211: SetLine(1);
  2794  0005F0  0E01               	movlw	1
  2795  0005F2  EC8A  F00F         	call	_SetLine
  2796                           
  2797                           ;Movement.c: 212: LCD_String("      ScanWithRange");
  2798  0005F6  0E11               	movlw	low STR_8
  2799  0005F8  6E2A               	movwf	LCD_String@string,c
  2800  0005FA  0E03               	movlw	high STR_8
  2801  0005FC  6E2B               	movwf	LCD_String@string+1,c
  2802  0005FE  EC39  F00E         	call	_LCD_String	;wreg free
  2803                           
  2804                           ;Movement.c: 213: SetLine(2);
  2805  000602  0E02               	movlw	2
  2806  000604  EC8A  F00F         	call	_SetLine
  2807                           
  2808                           ;Movement.c: 214: sprintf(buf,"     %d, %d",SensorResultR[0],SensorResultR[1]);
  2809  000608  0E73               	movlw	low ScanWithRange@buf
  2810  00060A  6E30               	movwf	sprintf@sp,c
  2811  00060C  0E00               	movlw	high ScanWithRange@buf
  2812  00060E  6E31               	movwf	sprintf@sp+1,c
  2813  000610  0E86               	movlw	low STR_7
  2814  000612  6E32               	movwf	sprintf@f,c
  2815  000614  0E03               	movlw	high STR_7
  2816  000616  6E33               	movwf	sprintf@f+1,c
  2817  000618  C0A6  F034         	movff	ScanWithRange@SensorResultR,?_sprintf+4
  2818  00061C  C0A7  F035         	movff	ScanWithRange@SensorResultR+1,?_sprintf+5
  2819  000620  C0A8  F036         	movff	ScanWithRange@SensorResultR+2,?_sprintf+6
  2820  000624  C0A9  F037         	movff	ScanWithRange@SensorResultR+3,?_sprintf+7
  2821  000628  EC4E  F00A         	call	_sprintf	;wreg free
  2822                           
  2823                           ;Movement.c: 215: LCD_String(buf);
  2824  00062C  0E73               	movlw	low ScanWithRange@buf
  2825  00062E  6E2A               	movwf	LCD_String@string,c
  2826  000630  0E00               	movlw	high ScanWithRange@buf
  2827  000632  6E2B               	movwf	LCD_String@string+1,c
  2828  000634  EC39  F00E         	call	_LCD_String	;wreg free
  2829                           
  2830                           ;Movement.c: 219: CAP1BUFH=0;
  2831  000638  0E00               	movlw	0
  2832  00063A  6E69               	movwf	3945,c	;volatile
  2833                           
  2834                           ;Movement.c: 220: CAP1BUFL=0;
  2835  00063C  0E00               	movlw	0
  2836  00063E  6E68               	movwf	3944,c	;volatile
  2837                           
  2838                           ;Movement.c: 221: CAP2BUFH=0;
  2839  000640  0E00               	movlw	0
  2840  000642  6E67               	movwf	3943,c	;volatile
  2841                           
  2842                           ;Movement.c: 222: CAP2BUFL=0;
  2843  000644  0E00               	movlw	0
  2844  000646  6E66               	movwf	3942,c	;volatile
  2845                           
  2846                           ;Movement.c: 233: if((SensorResultL[0]+SensorResultL[1])<ClearSignalThreshold){
  2847  000648  0E0B               	movlw	low _ClearSignalThreshold
  2848  00064A  6EF6               	movwf	tblptrl,c
  2849  00064C                     	if	1	;There is more than 1 active tblptr byte
  2850  00064C  0E03               	movlw	high _ClearSignalThreshold
  2851  00064E  6EF7               	movwf	tblptrh,c
  2852  000650                     	endif
  2853  000650                     	if	0	;There are less than 3 active tblptr bytes
  2854  000650                     	endif
  2855  000650  0100               	movlb	0	; () banked
  2856  000652  519E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2857  000654  0100               	movlb	0	; () banked
  2858  000656  25A0               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2859  000658  0100               	movlb	0	; () banked
  2860  00065A  6F71               	movwf	??_ScanWithRange& (0+255),b
  2861  00065C  0100               	movlb	0	; () banked
  2862  00065E  519F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2863  000660  0100               	movlb	0	; () banked
  2864  000662  21A1               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2865  000664  0100               	movlb	0	; () banked
  2866  000666  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2867  000668  0009               	tblrd		*+
  2868  00066A  50F5               	movf	tablat,w,c
  2869  00066C  0100               	movlb	0	; () banked
  2870  00066E  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2871  000670  0009               	tblrd		*+
  2872  000672  50F5               	movf	tablat,w,c
  2873  000674  0100               	movlb	0	; () banked
  2874  000676  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2875  000678  B0D8               	btfsc	status,0,c
  2876  00067A  D00D               	goto	l3294
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;Movement.c: 234: SensorResultL[0]=0;
  2880  00067C  0E00               	movlw	0
  2881  00067E  0100               	movlb	0	; () banked
  2882  000680  6F9F               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2883  000682  0E00               	movlw	0
  2884  000684  6F9E               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2885                           
  2886                           ;Movement.c: 235: SensorResultL[1]=0;
  2887  000686  0E00               	movlw	0
  2888  000688  0100               	movlb	0	; () banked
  2889  00068A  6FA1               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2890  00068C  0E00               	movlw	0
  2891  00068E  6FA0               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2892                           
  2893                           ;Movement.c: 236: ResultFalseL=1;
  2894  000690  0E01               	movlw	1
  2895  000692  0100               	movlb	0	; () banked
  2896  000694  6F9B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2897  000696                     l3294:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;Movement.c: 237: }
  2901                           ;Movement.c: 238: if((SensorResultC[0]+SensorResultC[1])<ClearSignalThreshold){
  2902  000696  0E0B               	movlw	low _ClearSignalThreshold
  2903  000698  6EF6               	movwf	tblptrl,c
  2904  00069A                     	if	1	;There is more than 1 active tblptr byte
  2905  00069A  0E03               	movlw	high _ClearSignalThreshold
  2906  00069C  6EF7               	movwf	tblptrh,c
  2907  00069E                     	endif
  2908  00069E                     	if	0	;There are less than 3 active tblptr bytes
  2909  00069E                     	endif
  2910  00069E  0100               	movlb	0	; () banked
  2911  0006A0  51A2               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2912  0006A2  0100               	movlb	0	; () banked
  2913  0006A4  25A4               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2914  0006A6  0100               	movlb	0	; () banked
  2915  0006A8  6F71               	movwf	??_ScanWithRange& (0+255),b
  2916  0006AA  0100               	movlb	0	; () banked
  2917  0006AC  51A3               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2918  0006AE  0100               	movlb	0	; () banked
  2919  0006B0  21A5               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2920  0006B2  0100               	movlb	0	; () banked
  2921  0006B4  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2922  0006B6  0009               	tblrd		*+
  2923  0006B8  50F5               	movf	tablat,w,c
  2924  0006BA  0100               	movlb	0	; () banked
  2925  0006BC  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2926  0006BE  0009               	tblrd		*+
  2927  0006C0  50F5               	movf	tablat,w,c
  2928  0006C2  0100               	movlb	0	; () banked
  2929  0006C4  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2930  0006C6  B0D8               	btfsc	status,0,c
  2931  0006C8  D00D               	goto	l3298
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;Movement.c: 239: SensorResultC[0]=0;
  2935  0006CA  0E00               	movlw	0
  2936  0006CC  0100               	movlb	0	; () banked
  2937  0006CE  6FA3               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2938  0006D0  0E00               	movlw	0
  2939  0006D2  6FA2               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2940                           
  2941                           ;Movement.c: 240: SensorResultC[1]=0;
  2942  0006D4  0E00               	movlw	0
  2943  0006D6  0100               	movlb	0	; () banked
  2944  0006D8  6FA5               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2945  0006DA  0E00               	movlw	0
  2946  0006DC  6FA4               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2947                           
  2948                           ;Movement.c: 241: ResultFalseC=1;
  2949  0006DE  0E01               	movlw	1
  2950  0006E0  0100               	movlb	0	; () banked
  2951  0006E2  6F9C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2952  0006E4                     l3298:
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;Movement.c: 242: }
  2956                           ;Movement.c: 243: if((SensorResultR[0]+SensorResultR[1])<ClearSignalThreshold){
  2957  0006E4  0E0B               	movlw	low _ClearSignalThreshold
  2958  0006E6  6EF6               	movwf	tblptrl,c
  2959  0006E8                     	if	1	;There is more than 1 active tblptr byte
  2960  0006E8  0E03               	movlw	high _ClearSignalThreshold
  2961  0006EA  6EF7               	movwf	tblptrh,c
  2962  0006EC                     	endif
  2963  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  2964  0006EC                     	endif
  2965  0006EC  0100               	movlb	0	; () banked
  2966  0006EE  51A6               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2967  0006F0  0100               	movlb	0	; () banked
  2968  0006F2  25A8               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2969  0006F4  0100               	movlb	0	; () banked
  2970  0006F6  6F71               	movwf	??_ScanWithRange& (0+255),b
  2971  0006F8  0100               	movlb	0	; () banked
  2972  0006FA  51A7               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2973  0006FC  0100               	movlb	0	; () banked
  2974  0006FE  21A9               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2975  000700  0100               	movlb	0	; () banked
  2976  000702  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2977  000704  0009               	tblrd		*+
  2978  000706  50F5               	movf	tablat,w,c
  2979  000708  0100               	movlb	0	; () banked
  2980  00070A  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2981  00070C  0009               	tblrd		*+
  2982  00070E  50F5               	movf	tablat,w,c
  2983  000710  0100               	movlb	0	; () banked
  2984  000712  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2985  000714  B0D8               	btfsc	status,0,c
  2986  000716  D00D               	goto	l3302
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;Movement.c: 244: SensorResultR[0]=0;
  2990  000718  0E00               	movlw	0
  2991  00071A  0100               	movlb	0	; () banked
  2992  00071C  6FA7               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2993  00071E  0E00               	movlw	0
  2994  000720  6FA6               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2995                           
  2996                           ;Movement.c: 245: SensorResultR[1]=0;
  2997  000722  0E00               	movlw	0
  2998  000724  0100               	movlb	0	; () banked
  2999  000726  6FA9               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  3000  000728  0E00               	movlw	0
  3001  00072A  6FA8               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  3002                           
  3003                           ;Movement.c: 246: ResultFalseR=1;
  3004  00072C  0E01               	movlw	1
  3005  00072E  0100               	movlb	0	; () banked
  3006  000730  6F9D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  3007  000732                     l3302:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;Movement.c: 247: }
  3011                           ;Movement.c: 249: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  3012  000732  0100               	movlb	0	; () banked
  3013  000734  519C               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  3014  000736  C09B  F071         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  3015  00073A  0100               	movlb	0	; () banked
  3016  00073C  6B72               	clrf	(??_ScanWithRange+1)& (0+255),b
  3017  00073E  0100               	movlb	0	; () banked
  3018  000740  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3019  000742  0E00               	movlw	0
  3020  000744  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3021  000746  0100               	movlb	0	; () banked
  3022  000748  519D               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  3023  00074A  0100               	movlb	0	; () banked
  3024  00074C  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3025  00074E  0E00               	movlw	0
  3026  000750  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3027  000752  0E03               	movlw	3
  3028  000754  0100               	movlb	0	; () banked
  3029  000756  1971               	xorwf	??_ScanWithRange& (0+255),w,b
  3030  000758  0100               	movlb	0	; () banked
  3031  00075A  1172               	iorwf	(??_ScanWithRange+1)& (0+255),w,b
  3032  00075C  A4D8               	btfss	status,2,c
  3033  00075E  D025               	goto	l3318
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;Movement.c: 251: turnLeft(mL,mR);
  3037  000760  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3038  000764  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3039  000768  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3040  00076C  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3041  000770  ECB8  F00E         	call	_turnLeft	;wreg free
  3042                           
  3043                           ;Movement.c: 252: delay_tenth_s(5*tenth_seconds);
  3044  000774  0100               	movlb	0	; () banked
  3045  000776  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3046  000778  0D05               	mullw	5
  3047  00077A  50F3               	movf	prodl,w,c
  3048  00077C  EC39  F00F         	call	_delay_tenth_s
  3049                           
  3050                           ;Movement.c: 253: (*MoveTimeEntry) += 5*tenth_seconds;
  3051  000780  0100               	movlb	0	; () banked
  3052  000782  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3053  000784  0D05               	mullw	5
  3054  000786  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3055  00078A  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3056  00078E  50F3               	movf	prodl,w,c
  3057  000790  26DF               	addwf	indf2,f,c
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;Movement.c: 254: stop(mL,mR);
  3061  000792  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3062  000796  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3063  00079A  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3064  00079E  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3065  0007A2  ECBE  F00C         	call	_stop	;wreg free
  3066                           
  3067                           ;Movement.c: 256: return -1;
  3068  0007A6  0EFF               	movlw	255
  3069  0007A8  0012               	return	
  3070  0007AA                     l3318:
  3071                           
  3072                           ;Movement.c: 259: if (((SensorResultL[0]>DirectionFoundThreshold)&&(SensorResultL[1]>Dir
      +                          ectionFoundThreshold)
  3073                           ;Movement.c: 260: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  3074                           ;Movement.c: 261: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  3075  0007AA  0E0D               	movlw	low _DirectionFoundThreshold
  3076  0007AC  6EF6               	movwf	tblptrl,c
  3077  0007AE                     	if	1	;There is more than 1 active tblptr byte
  3078  0007AE  0E03               	movlw	high _DirectionFoundThreshold
  3079  0007B0  6EF7               	movwf	tblptrh,c
  3080  0007B2                     	endif
  3081  0007B2                     	if	0	;There are less than 3 active tblptr bytes
  3082  0007B2                     	endif
  3083  0007B2  0100               	movlb	0	; () banked
  3084  0007B4  519E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3085  0007B6  0009               	tblrd		*+
  3086  0007B8  5CF5               	subwf	tablat,w,c
  3087  0007BA  0100               	movlb	0	; () banked
  3088  0007BC  519F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3089  0007BE  0009               	tblrd		*+
  3090  0007C0  58F5               	subwfb	tablat,w,c
  3091  0007C2  B0D8               	btfsc	status,0,c
  3092  0007C4  D073               	goto	l3340
  3093                           
  3094                           ; BSR set to: 0
  3095  0007C6  0E0D               	movlw	low _DirectionFoundThreshold
  3096  0007C8  6EF6               	movwf	tblptrl,c
  3097  0007CA                     	if	1	;There is more than 1 active tblptr byte
  3098  0007CA  0E03               	movlw	high _DirectionFoundThreshold
  3099  0007CC  6EF7               	movwf	tblptrh,c
  3100  0007CE                     	endif
  3101  0007CE                     	if	0	;There are less than 3 active tblptr bytes
  3102  0007CE                     	endif
  3103  0007CE  0100               	movlb	0	; () banked
  3104  0007D0  51A0               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3105  0007D2  0009               	tblrd		*+
  3106  0007D4  5CF5               	subwf	tablat,w,c
  3107  0007D6  0100               	movlb	0	; () banked
  3108  0007D8  51A1               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3109  0007DA  0009               	tblrd		*+
  3110  0007DC  58F5               	subwfb	tablat,w,c
  3111  0007DE  B0D8               	btfsc	status,0,c
  3112  0007E0  D065               	goto	l3340
  3113                           
  3114                           ; BSR set to: 0
  3115  0007E2  0E0F               	movlw	low _DirectionFoundTolerance
  3116  0007E4  6EF6               	movwf	tblptrl,c
  3117  0007E6                     	if	1	;There is more than 1 active tblptr byte
  3118  0007E6  0E03               	movlw	high _DirectionFoundTolerance
  3119  0007E8  6EF7               	movwf	tblptrh,c
  3120  0007EA                     	endif
  3121  0007EA                     	if	0	;There are less than 3 active tblptr bytes
  3122  0007EA                     	endif
  3123  0007EA  EE20  F0A0         	lfsr	2,ScanWithRange@SensorResultL+2
  3124  0007EE  CFDE F071          	movff	postinc2,??_ScanWithRange
  3125  0007F2  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3126  0007F6  0100               	movlb	0	; () banked
  3127  0007F8  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3128  0007FA  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3129  0007FC  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3130  0007FE  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3131  000800  0100               	movlb	0	; () banked
  3132  000802  519E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3133  000804  0100               	movlb	0	; () banked
  3134  000806  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3135  000808  0100               	movlb	0	; () banked
  3136  00080A  519F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3137  00080C  0100               	movlb	0	; () banked
  3138  00080E  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3139  000810  0009               	tblrd		*+
  3140  000812  50F5               	movf	tablat,w,c
  3141  000814  0100               	movlb	0	; () banked
  3142  000816  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3143  000818  0009               	tblrd		*+
  3144  00081A  50F5               	movf	tablat,w,c
  3145  00081C  0100               	movlb	0	; () banked
  3146  00081E  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3147  000820  A0D8               	btfss	status,0,c
  3148  000822  D01F               	goto	l3326
  3149                           
  3150                           ; BSR set to: 0
  3151  000824  0E0F               	movlw	low _DirectionFoundTolerance
  3152  000826  6EF6               	movwf	tblptrl,c
  3153  000828                     	if	1	;There is more than 1 active tblptr byte
  3154  000828  0E03               	movlw	high _DirectionFoundTolerance
  3155  00082A  6EF7               	movwf	tblptrh,c
  3156  00082C                     	endif
  3157  00082C                     	if	0	;There are less than 3 active tblptr bytes
  3158  00082C                     	endif
  3159  00082C  C09E  F071         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  3160  000830  C09F  F072         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  3161  000834  0100               	movlb	0	; () banked
  3162  000836  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3163  000838  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3164  00083A  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3165  00083C  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3166  00083E  0100               	movlb	0	; () banked
  3167  000840  51A0               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3168  000842  0100               	movlb	0	; () banked
  3169  000844  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3170  000846  0100               	movlb	0	; () banked
  3171  000848  51A1               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3172  00084A  0100               	movlb	0	; () banked
  3173  00084C  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3174  00084E  0009               	tblrd		*+
  3175  000850  50F5               	movf	tablat,w,c
  3176  000852  0100               	movlb	0	; () banked
  3177  000854  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3178  000856  0009               	tblrd		*+
  3179  000858  50F5               	movf	tablat,w,c
  3180  00085A  0100               	movlb	0	; () banked
  3181  00085C  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3182  00085E  B0D8               	btfsc	status,0,c
  3183  000860  D025               	goto	l3340
  3184  000862                     l3326:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;Movement.c: 263: turnLeft(mL,mR);
  3188  000862  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3189  000866  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3190  00086A  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3191  00086E  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3192  000872  ECB8  F00E         	call	_turnLeft	;wreg free
  3193                           
  3194                           ;Movement.c: 264: delay_tenth_s(2*(tenth_seconds));
  3195  000876  0100               	movlb	0	; () banked
  3196  000878  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3197  00087A  0D02               	mullw	2
  3198  00087C  50F3               	movf	prodl,w,c
  3199  00087E  EC39  F00F         	call	_delay_tenth_s
  3200                           
  3201                           ;Movement.c: 265: (*MoveTimeEntry) += 2*tenth_seconds;
  3202  000882  0100               	movlb	0	; () banked
  3203  000884  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3204  000886  0D02               	mullw	2
  3205  000888  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3206  00088C  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3207  000890  50F3               	movf	prodl,w,c
  3208  000892  26DF               	addwf	indf2,f,c
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;Movement.c: 266: stop(mL,mR);
  3212  000894  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3213  000898  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3214  00089C  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3215  0008A0  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3216  0008A4  ECBE  F00C         	call	_stop	;wreg free
  3217  0008A8                     l3334:
  3218                           
  3219                           ;Movement.c: 267: return 2;
  3220  0008A8  0E02               	movlw	2
  3221  0008AA  0012               	return	
  3222  0008AC                     l3340:
  3223                           
  3224                           ;Movement.c: 269: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3225                           ;Movement.c: 270: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3226  0008AC  0E0D               	movlw	low _DirectionFoundThreshold
  3227  0008AE  6EF6               	movwf	tblptrl,c
  3228  0008B0                     	if	1	;There is more than 1 active tblptr byte
  3229  0008B0  0E03               	movlw	high _DirectionFoundThreshold
  3230  0008B2  6EF7               	movwf	tblptrh,c
  3231  0008B4                     	endif
  3232  0008B4                     	if	0	;There are less than 3 active tblptr bytes
  3233  0008B4                     	endif
  3234  0008B4  0100               	movlb	0	; () banked
  3235  0008B6  51A2               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3236  0008B8  0009               	tblrd		*+
  3237  0008BA  5CF5               	subwf	tablat,w,c
  3238  0008BC  0100               	movlb	0	; () banked
  3239  0008BE  51A3               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3240  0008C0  0009               	tblrd		*+
  3241  0008C2  58F5               	subwfb	tablat,w,c
  3242  0008C4  B0D8               	btfsc	status,0,c
  3243  0008C6  D06D               	goto	l3362
  3244                           
  3245                           ; BSR set to: 0
  3246  0008C8  0E0D               	movlw	low _DirectionFoundThreshold
  3247  0008CA  6EF6               	movwf	tblptrl,c
  3248  0008CC                     	if	1	;There is more than 1 active tblptr byte
  3249  0008CC  0E03               	movlw	high _DirectionFoundThreshold
  3250  0008CE  6EF7               	movwf	tblptrh,c
  3251  0008D0                     	endif
  3252  0008D0                     	if	0	;There are less than 3 active tblptr bytes
  3253  0008D0                     	endif
  3254  0008D0  0100               	movlb	0	; () banked
  3255  0008D2  51A4               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3256  0008D4  0009               	tblrd		*+
  3257  0008D6  5CF5               	subwf	tablat,w,c
  3258  0008D8  0100               	movlb	0	; () banked
  3259  0008DA  51A5               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3260  0008DC  0009               	tblrd		*+
  3261  0008DE  58F5               	subwfb	tablat,w,c
  3262  0008E0  B0D8               	btfsc	status,0,c
  3263  0008E2  D05F               	goto	l3362
  3264                           
  3265                           ; BSR set to: 0
  3266  0008E4  0E0F               	movlw	low _DirectionFoundTolerance
  3267  0008E6  6EF6               	movwf	tblptrl,c
  3268  0008E8                     	if	1	;There is more than 1 active tblptr byte
  3269  0008E8  0E03               	movlw	high _DirectionFoundTolerance
  3270  0008EA  6EF7               	movwf	tblptrh,c
  3271  0008EC                     	endif
  3272  0008EC                     	if	0	;There are less than 3 active tblptr bytes
  3273  0008EC                     	endif
  3274  0008EC  EE20  F0A4         	lfsr	2,ScanWithRange@SensorResultC+2
  3275  0008F0  CFDE F071          	movff	postinc2,??_ScanWithRange
  3276  0008F4  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3277  0008F8  0100               	movlb	0	; () banked
  3278  0008FA  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3279  0008FC  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3280  0008FE  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3281  000900  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3282  000902  0100               	movlb	0	; () banked
  3283  000904  51A2               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3284  000906  0100               	movlb	0	; () banked
  3285  000908  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3286  00090A  0100               	movlb	0	; () banked
  3287  00090C  51A3               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3288  00090E  0100               	movlb	0	; () banked
  3289  000910  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3290  000912  0009               	tblrd		*+
  3291  000914  50F5               	movf	tablat,w,c
  3292  000916  0100               	movlb	0	; () banked
  3293  000918  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3294  00091A  0009               	tblrd		*+
  3295  00091C  50F5               	movf	tablat,w,c
  3296  00091E  0100               	movlb	0	; () banked
  3297  000920  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3298  000922  A0D8               	btfss	status,0,c
  3299  000924  D01F               	goto	l3348
  3300                           
  3301                           ; BSR set to: 0
  3302  000926  0E0F               	movlw	low _DirectionFoundTolerance
  3303  000928  6EF6               	movwf	tblptrl,c
  3304  00092A                     	if	1	;There is more than 1 active tblptr byte
  3305  00092A  0E03               	movlw	high _DirectionFoundTolerance
  3306  00092C  6EF7               	movwf	tblptrh,c
  3307  00092E                     	endif
  3308  00092E                     	if	0	;There are less than 3 active tblptr bytes
  3309  00092E                     	endif
  3310  00092E  C0A2  F071         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3311  000932  C0A3  F072         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3312  000936  0100               	movlb	0	; () banked
  3313  000938  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3314  00093A  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3315  00093C  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3316  00093E  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3317  000940  0100               	movlb	0	; () banked
  3318  000942  51A4               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3319  000944  0100               	movlb	0	; () banked
  3320  000946  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3321  000948  0100               	movlb	0	; () banked
  3322  00094A  51A5               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3323  00094C  0100               	movlb	0	; () banked
  3324  00094E  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3325  000950  0009               	tblrd		*+
  3326  000952  50F5               	movf	tablat,w,c
  3327  000954  0100               	movlb	0	; () banked
  3328  000956  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3329  000958  0009               	tblrd		*+
  3330  00095A  50F5               	movf	tablat,w,c
  3331  00095C  0100               	movlb	0	; () banked
  3332  00095E  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3333  000960  B0D8               	btfsc	status,0,c
  3334  000962  D01F               	goto	l3362
  3335  000964                     l3348:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Movement.c: 272: turnLeft(mL,mR);
  3339  000964  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3340  000968  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3341  00096C  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3342  000970  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3343  000974  ECB8  F00E         	call	_turnLeft	;wreg free
  3344                           
  3345                           ;Movement.c: 273: delay_s(3);
  3346  000978  0E03               	movlw	3
  3347  00097A  EC1D  F00F         	call	_delay_s
  3348                           
  3349                           ;Movement.c: 274: (*MoveTimeEntry) += tenth_seconds;
  3350  00097E  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3351  000982  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3352  000986  0100               	movlb	0	; () banked
  3353  000988  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3354  00098A  26DF               	addwf	indf2,f,c
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;Movement.c: 275: stop(mL,mR);
  3358  00098C  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3359  000990  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3360  000994  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3361  000998  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3362  00099C  ECBE  F00C         	call	_stop	;wreg free
  3363  0009A0  D783               	goto	l3334
  3364  0009A2                     l3362:
  3365                           
  3366                           ;Movement.c: 278: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3367                           ;Movement.c: 279: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3368  0009A2  0E0D               	movlw	low _DirectionFoundThreshold
  3369  0009A4  6EF6               	movwf	tblptrl,c
  3370  0009A6                     	if	1	;There is more than 1 active tblptr byte
  3371  0009A6  0E03               	movlw	high _DirectionFoundThreshold
  3372  0009A8  6EF7               	movwf	tblptrh,c
  3373  0009AA                     	endif
  3374  0009AA                     	if	0	;There are less than 3 active tblptr bytes
  3375  0009AA                     	endif
  3376  0009AA  0100               	movlb	0	; () banked
  3377  0009AC  51A6               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3378  0009AE  0009               	tblrd		*+
  3379  0009B0  5CF5               	subwf	tablat,w,c
  3380  0009B2  0100               	movlb	0	; () banked
  3381  0009B4  51A7               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3382  0009B6  0009               	tblrd		*+
  3383  0009B8  58F5               	subwfb	tablat,w,c
  3384  0009BA  B0D8               	btfsc	status,0,c
  3385  0009BC  D059               	goto	l3378
  3386                           
  3387                           ; BSR set to: 0
  3388  0009BE  0E0D               	movlw	low _DirectionFoundThreshold
  3389  0009C0  6EF6               	movwf	tblptrl,c
  3390  0009C2                     	if	1	;There is more than 1 active tblptr byte
  3391  0009C2  0E03               	movlw	high _DirectionFoundThreshold
  3392  0009C4  6EF7               	movwf	tblptrh,c
  3393  0009C6                     	endif
  3394  0009C6                     	if	0	;There are less than 3 active tblptr bytes
  3395  0009C6                     	endif
  3396  0009C6  0100               	movlb	0	; () banked
  3397  0009C8  51A8               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3398  0009CA  0009               	tblrd		*+
  3399  0009CC  5CF5               	subwf	tablat,w,c
  3400  0009CE  0100               	movlb	0	; () banked
  3401  0009D0  51A9               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3402  0009D2  0009               	tblrd		*+
  3403  0009D4  58F5               	subwfb	tablat,w,c
  3404  0009D6  B0D8               	btfsc	status,0,c
  3405  0009D8  D04B               	goto	l3378
  3406                           
  3407                           ; BSR set to: 0
  3408  0009DA  0E0F               	movlw	low _DirectionFoundTolerance
  3409  0009DC  6EF6               	movwf	tblptrl,c
  3410  0009DE                     	if	1	;There is more than 1 active tblptr byte
  3411  0009DE  0E03               	movlw	high _DirectionFoundTolerance
  3412  0009E0  6EF7               	movwf	tblptrh,c
  3413  0009E2                     	endif
  3414  0009E2                     	if	0	;There are less than 3 active tblptr bytes
  3415  0009E2                     	endif
  3416  0009E2  EE20  F0A8         	lfsr	2,ScanWithRange@SensorResultR+2
  3417  0009E6  CFDE F071          	movff	postinc2,??_ScanWithRange
  3418  0009EA  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3419  0009EE  0100               	movlb	0	; () banked
  3420  0009F0  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3421  0009F2  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3422  0009F4  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3423  0009F6  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3424  0009F8  0100               	movlb	0	; () banked
  3425  0009FA  51A6               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3426  0009FC  0100               	movlb	0	; () banked
  3427  0009FE  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3428  000A00  0100               	movlb	0	; () banked
  3429  000A02  51A7               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3430  000A04  0100               	movlb	0	; () banked
  3431  000A06  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3432  000A08  0009               	tblrd		*+
  3433  000A0A  50F5               	movf	tablat,w,c
  3434  000A0C  0100               	movlb	0	; () banked
  3435  000A0E  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3436  000A10  0009               	tblrd		*+
  3437  000A12  50F5               	movf	tablat,w,c
  3438  000A14  0100               	movlb	0	; () banked
  3439  000A16  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3440  000A18  A0D8               	btfss	status,0,c
  3441  000A1A  D01F               	goto	l3370
  3442                           
  3443                           ; BSR set to: 0
  3444  000A1C  0E0F               	movlw	low _DirectionFoundTolerance
  3445  000A1E  6EF6               	movwf	tblptrl,c
  3446  000A20                     	if	1	;There is more than 1 active tblptr byte
  3447  000A20  0E03               	movlw	high _DirectionFoundTolerance
  3448  000A22  6EF7               	movwf	tblptrh,c
  3449  000A24                     	endif
  3450  000A24                     	if	0	;There are less than 3 active tblptr bytes
  3451  000A24                     	endif
  3452  000A24  C0A6  F071         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3453  000A28  C0A7  F072         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3454  000A2C  0100               	movlb	0	; () banked
  3455  000A2E  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3456  000A30  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3457  000A32  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3458  000A34  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3459  000A36  0100               	movlb	0	; () banked
  3460  000A38  51A8               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3461  000A3A  0100               	movlb	0	; () banked
  3462  000A3C  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3463  000A3E  0100               	movlb	0	; () banked
  3464  000A40  51A9               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3465  000A42  0100               	movlb	0	; () banked
  3466  000A44  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3467  000A46  0009               	tblrd		*+
  3468  000A48  50F5               	movf	tablat,w,c
  3469  000A4A  0100               	movlb	0	; () banked
  3470  000A4C  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3471  000A4E  0009               	tblrd		*+
  3472  000A50  50F5               	movf	tablat,w,c
  3473  000A52  0100               	movlb	0	; () banked
  3474  000A54  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3475  000A56  B0D8               	btfsc	status,0,c
  3476  000A58  D00B               	goto	l3378
  3477  000A5A                     l3370:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Movement.c: 281: stop(mL,mR);
  3481  000A5A  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3482  000A5E  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3483  000A62  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3484  000A66  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3485  000A6A  ECBE  F00C         	call	_stop	;wreg free
  3486  000A6E  D71C               	goto	l3334
  3487  000A70                     l3378:
  3488  000A70  0100               	movlb	0	; () banked
  3489  000A72  519E               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3490  000A74  0100               	movlb	0	; () banked
  3491  000A76  5DA0               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3492  000A78  0100               	movlb	0	; () banked
  3493  000A7A  519F               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3494  000A7C  0100               	movlb	0	; () banked
  3495  000A7E  59A1               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3496  000A80  B0D8               	btfsc	status,0,c
  3497  000A82  D025               	goto	l3394
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;Movement.c: 287: turnLeft(mL,mR);
  3501  000A84  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3502  000A88  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3503  000A8C  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3504  000A90  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3505  000A94  ECB8  F00E         	call	_turnLeft	;wreg free
  3506                           
  3507                           ;Movement.c: 288: delay_tenth_s(3*tenth_seconds);
  3508  000A98  0100               	movlb	0	; () banked
  3509  000A9A  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3510  000A9C  0D03               	mullw	3
  3511  000A9E  50F3               	movf	prodl,w,c
  3512  000AA0  EC39  F00F         	call	_delay_tenth_s
  3513                           
  3514                           ;Movement.c: 289: (*MoveTimeEntry) += 3*tenth_seconds;
  3515  000AA4  0100               	movlb	0	; () banked
  3516  000AA6  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3517  000AA8  0D03               	mullw	3
  3518  000AAA  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3519  000AAE  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3520  000AB2  50F3               	movf	prodl,w,c
  3521  000AB4  26DF               	addwf	indf2,f,c
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;Movement.c: 290: stop(mL,mR);
  3525  000AB6  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3526  000ABA  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3527  000ABE  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3528  000AC2  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3529  000AC6  ECBE  F00C         	call	_stop	;wreg free
  3530  000ACA                     l3388:
  3531                           
  3532                           ;Movement.c: 291: return 0;
  3533  000ACA  0E00               	movlw	0
  3534  000ACC  0012               	return	
  3535  000ACE                     l3394:
  3536  000ACE  0100               	movlb	0	; () banked
  3537  000AD0  51A8               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3538  000AD2  0100               	movlb	0	; () banked
  3539  000AD4  5DA6               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3540  000AD6  0100               	movlb	0	; () banked
  3541  000AD8  51A9               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3542  000ADA  0100               	movlb	0	; () banked
  3543  000ADC  59A7               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3544  000ADE  B0D8               	btfsc	status,0,c
  3545  000AE0  D020               	goto	l3410
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;Movement.c: 294: turnRight(mL,mR);
  3549  000AE2  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  3550  000AE6  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3551  000AEA  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  3552  000AEE  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3553  000AF2  EC91  F00E         	call	_turnRight	;wreg free
  3554                           
  3555                           ;Movement.c: 295: delay_tenth_s(tenth_seconds);
  3556  000AF6  0100               	movlb	0	; () banked
  3557  000AF8  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3558  000AFA  EC39  F00F         	call	_delay_tenth_s
  3559                           
  3560                           ;Movement.c: 296: (*MoveTimeEntry) -= tenth_seconds;
  3561  000AFE  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3562  000B02  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3563  000B06  0100               	movlb	0	; () banked
  3564  000B08  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3565  000B0A  5EDF               	subwf	indf2,f,c
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;Movement.c: 297: stop(mL,mR);
  3569  000B0C  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3570  000B10  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3571  000B14  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3572  000B18  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3573  000B1C  ECBE  F00C         	call	_stop	;wreg free
  3574  000B20  D7D4               	goto	l3388
  3575  000B22                     l3410:
  3576  000B22  0100               	movlb	0	; () banked
  3577  000B24  51A0               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3578  000B26  0100               	movlb	0	; () banked
  3579  000B28  5D9E               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3580  000B2A  0100               	movlb	0	; () banked
  3581  000B2C  51A1               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3582  000B2E  0100               	movlb	0	; () banked
  3583  000B30  599F               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3584  000B32  B0D8               	btfsc	status,0,c
  3585  000B34  D043               	goto	l3428
  3586                           
  3587                           ; BSR set to: 0
  3588  000B36  0100               	movlb	0	; () banked
  3589  000B38  51A2               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3590  000B3A  0100               	movlb	0	; () banked
  3591  000B3C  5DA4               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3592  000B3E  0100               	movlb	0	; () banked
  3593  000B40  51A3               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3594  000B42  0100               	movlb	0	; () banked
  3595  000B44  59A5               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3596  000B46  B0D8               	btfsc	status,0,c
  3597  000B48  D039               	goto	l3428
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;Movement.c: 303: turnLeft(mL,mR);
  3601  000B4A  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3602  000B4E  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3603  000B52  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3604  000B56  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3605  000B5A  ECB8  F00E         	call	_turnLeft	;wreg free
  3606                           
  3607                           ;Movement.c: 304: delay_tenth_s((3*tenth_seconds)/2);
  3608  000B5E  0100               	movlb	0	; () banked
  3609  000B60  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3610  000B62  0D03               	mullw	3
  3611  000B64  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3612  000B68  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3613  000B6C  0E00               	movlw	0
  3614  000B6E  6E2D               	movwf	___awdiv@divisor+1,c
  3615  000B70  0E02               	movlw	2
  3616  000B72  6E2C               	movwf	___awdiv@divisor,c
  3617  000B74  EC4D  F00D         	call	___awdiv	;wreg free
  3618  000B78  502A               	movf	?___awdiv,w,c
  3619  000B7A  EC39  F00F         	call	_delay_tenth_s
  3620                           
  3621                           ;Movement.c: 305: (*MoveTimeEntry) += 3*tenth_seconds/2;
  3622  000B7E  0100               	movlb	0	; () banked
  3623  000B80  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3624  000B82  0D03               	mullw	3
  3625  000B84  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3626  000B88  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3627  000B8C  0E00               	movlw	0
  3628  000B8E  6E2D               	movwf	___awdiv@divisor+1,c
  3629  000B90  0E02               	movlw	2
  3630  000B92  6E2C               	movwf	___awdiv@divisor,c
  3631  000B94  EC4D  F00D         	call	___awdiv	;wreg free
  3632  000B98  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3633  000B9C  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3634  000BA0  502A               	movf	?___awdiv,w,c
  3635  000BA2  26DF               	addwf	indf2,f,c
  3636                           
  3637                           ;Movement.c: 306: stop(mL,mR);
  3638  000BA4  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3639  000BA8  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3640  000BAC  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3641  000BB0  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3642  000BB4  ECBE  F00C         	call	_stop	;wreg free
  3643  000BB8                     l3422:
  3644                           
  3645                           ;Movement.c: 307: return 1;
  3646  000BB8  0E01               	movlw	1
  3647  000BBA  0012               	return	
  3648  000BBC                     l3428:
  3649  000BBC  0100               	movlb	0	; () banked
  3650  000BBE  51A6               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3651  000BC0  0100               	movlb	0	; () banked
  3652  000BC2  5DA8               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3653  000BC4  0100               	movlb	0	; () banked
  3654  000BC6  51A7               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3655  000BC8  0100               	movlb	0	; () banked
  3656  000BCA  59A9               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3657  000BCC  B0D8               	btfsc	status,0,c
  3658  000BCE  D03A               	goto	l3444
  3659                           
  3660                           ; BSR set to: 0
  3661  000BD0  0100               	movlb	0	; () banked
  3662  000BD2  51A4               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3663  000BD4  0100               	movlb	0	; () banked
  3664  000BD6  5DA2               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3665  000BD8  0100               	movlb	0	; () banked
  3666  000BDA  51A5               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3667  000BDC  0100               	movlb	0	; () banked
  3668  000BDE  59A3               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3669  000BE0  B0D8               	btfsc	status,0,c
  3670  000BE2  D030               	goto	l3444
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;Movement.c: 310: turnLeft(mL,mR);
  3674  000BE4  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3675  000BE8  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3676  000BEC  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3677  000BF0  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3678  000BF4  ECB8  F00E         	call	_turnLeft	;wreg free
  3679                           
  3680                           ;Movement.c: 311: delay_tenth_s((tenth_seconds)/2);
  3681  000BF8  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3682  000BFC  6A2B               	clrf	___awdiv@dividend+1,c
  3683  000BFE  0E00               	movlw	0
  3684  000C00  6E2D               	movwf	___awdiv@divisor+1,c
  3685  000C02  0E02               	movlw	2
  3686  000C04  6E2C               	movwf	___awdiv@divisor,c
  3687  000C06  EC4D  F00D         	call	___awdiv	;wreg free
  3688  000C0A  502A               	movf	?___awdiv,w,c
  3689  000C0C  EC39  F00F         	call	_delay_tenth_s
  3690                           
  3691                           ;Movement.c: 312: (*MoveTimeEntry) += tenth_seconds/2;
  3692  000C10  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3693  000C14  6A2B               	clrf	___awdiv@dividend+1,c
  3694  000C16  0E00               	movlw	0
  3695  000C18  6E2D               	movwf	___awdiv@divisor+1,c
  3696  000C1A  0E02               	movlw	2
  3697  000C1C  6E2C               	movwf	___awdiv@divisor,c
  3698  000C1E  EC4D  F00D         	call	___awdiv	;wreg free
  3699  000C22  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3700  000C26  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3701  000C2A  502A               	movf	?___awdiv,w,c
  3702  000C2C  26DF               	addwf	indf2,f,c
  3703                           
  3704                           ;Movement.c: 313: stop(mL,mR);
  3705  000C2E  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3706  000C32  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3707  000C36  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3708  000C3A  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3709  000C3E  ECBE  F00C         	call	_stop	;wreg free
  3710  000C42  D7BA               	goto	l3422
  3711  000C44                     l3444:
  3712                           
  3713                           ;Movement.c: 315: }
  3714                           ;Movement.c: 316: }
  3715                           ;Movement.c: 317: return 0;
  3716  000C44  0E00               	movlw	0
  3717  000C46  0012               	return	
  3718  000C48                     __end_of_ScanWithRange:
  3719                           	opt stack 0
  3720                           tblptru	equ	0xFF8
  3721                           tblptrh	equ	0xFF7
  3722                           tblptrl	equ	0xFF6
  3723                           tablat	equ	0xFF5
  3724                           prodh	equ	0xFF4
  3725                           prodl	equ	0xFF3
  3726                           intcon	equ	0xFF2
  3727                           postinc0	equ	0xFEE
  3728                           wreg	equ	0xFE8
  3729                           indf1	equ	0xFE7
  3730                           fsr1h	equ	0xFE2
  3731                           fsr1l	equ	0xFE1
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function _delay_s *****************
  3740 ;; Defined at:
  3741 ;;		line 20 in file "Movement.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  seconds         1    wreg     unsigned char 
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  seconds         1   36[COMRAM] unsigned char 
  3746 ;;  i               2   37[COMRAM] unsigned int 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;		None               void
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3756 ;;      Params:         0       0       0       0
  3757 ;;      Locals:         3       0       0       0
  3758 ;;      Temps:          1       0       0       0
  3759 ;;      Totals:         4       0       0       0
  3760 ;;Total ram usage:        4 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    3
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_ScanWithRange
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           	psect	text9
  3771  001E3A                     __ptext9:
  3772                           	opt stack 0
  3773  001E3A                     _delay_s:
  3774                           	opt stack 26
  3775                           
  3776                           ;incstack = 0
  3777                           ;delay_s@seconds stored from wreg
  3778  001E3A  6E25               	movwf	delay_s@seconds,c
  3779                           
  3780                           ;Movement.c: 21: unsigned int i=0;
  3781  001E3C  0E00               	movlw	0
  3782  001E3E  6E27               	movwf	delay_s@i+1,c
  3783  001E40  0E00               	movlw	0
  3784  001E42  6E26               	movwf	delay_s@i,c
  3785                           
  3786                           ;Movement.c: 22: for (i=1; i<=seconds*20; i++) {
  3787  001E44  0E00               	movlw	0
  3788  001E46  6E27               	movwf	delay_s@i+1,c
  3789  001E48  0E01               	movlw	1
  3790  001E4A  6E26               	movwf	delay_s@i,c
  3791  001E4C  D009               	goto	l2270
  3792  001E4E                     l2266:
  3793                           
  3794                           ;Movement.c: 24: _delay((unsigned long)((50)*(8000000/4000.0)));
  3795  001E4E  0E82               	movlw	130
  3796  001E50  6E24               	movwf	??_delay_s& (0+255),c
  3797  001E52  0EDE               	movlw	222
  3798  001E54                     u3097:
  3799  001E54  2EE8               	decfsz	wreg,f,c
  3800  001E56  D7FE               	goto	u3097
  3801  001E58  2E24               	decfsz	??_delay_s& (0+255),f,c
  3802  001E5A  D7FC               	goto	u3097
  3803  001E5C  4A26               	infsnz	delay_s@i,f,c
  3804  001E5E  2A27               	incf	delay_s@i+1,f,c
  3805  001E60                     l2270:
  3806  001E60  5025               	movf	delay_s@seconds,w,c
  3807  001E62  0D14               	mullw	20
  3808  001E64  5026               	movf	delay_s@i,w,c
  3809  001E66  5CF3               	subwf	prodl,w,c
  3810  001E68  5027               	movf	delay_s@i+1,w,c
  3811  001E6A  58F4               	subwfb	prodh,w,c
  3812  001E6C  A0D8               	btfss	status,0,c
  3813  001E6E  0012               	return	
  3814  001E70  D7EE               	goto	l2266
  3815  001E72                     __end_of_delay_s:
  3816                           	opt stack 0
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           indf1	equ	0xFE7
  3827                           fsr1h	equ	0xFE2
  3828                           fsr1l	equ	0xFE1
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _ScanIR *****************
  3837 ;; Defined at:
  3838 ;;		line 42 in file "Movement.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  3841 ;;		 -> main@mL(9), 
  3842 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  3843 ;;		 -> main@mR(9), 
  3844 ;;  Move            2   14[BANK0 ] PTR unsigned char 
  3845 ;;		 -> main@Move(1), 
  3846 ;;  MoveTime        2   16[BANK0 ] PTR unsigned char 
  3847 ;;		 -> main@MoveTime(100), 
  3848 ;;  MoveType        2   18[BANK0 ] PTR unsigned char 
  3849 ;;		 -> main@MoveType(100), 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  buf            40   22[BANK0 ] unsigned char [40]
  3852 ;;  SensorResult    4   62[BANK0 ] unsigned int [2]
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      unsigned char 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3862 ;;      Params:         0      10       0       0
  3863 ;;      Locals:         0      44       0       0
  3864 ;;      Temps:          0       2       0       0
  3865 ;;      Totals:         0      56       0       0
  3866 ;;Total ram usage:       56 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    7
  3869 ;; This function calls:
  3870 ;;		_LCD_String
  3871 ;;		_SendLCD
  3872 ;;		_SetLine
  3873 ;;		_delay_tenth_s
  3874 ;;		_grabLeftIR
  3875 ;;		_grabRightIR
  3876 ;;		_sprintf
  3877 ;;		_stop
  3878 ;;		_turnLeft
  3879 ;;		_turnRight
  3880 ;; This function is called by:
  3881 ;;		_main
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text10
  3886  0010A6                     __ptext10:
  3887                           	opt stack 0
  3888  0010A6                     _ScanIR:
  3889                           	opt stack 23
  3890                           
  3891                           ;Movement.c: 44: unsigned int SensorResult[2]={0,0};
  3892                           
  3893                           ;incstack = 0
  3894  0010A6  C0AC  F09E         	movff	ScanIR@F3878,ScanIR@SensorResult
  3895  0010AA  C0AD  F09F         	movff	ScanIR@F3878+1,ScanIR@SensorResult+1
  3896  0010AE  C0AE  F0A0         	movff	ScanIR@F3878+2,ScanIR@SensorResult+2
  3897  0010B2  C0AF  F0A1         	movff	ScanIR@F3878+3,ScanIR@SensorResult+3
  3898                           
  3899                           ;Movement.c: 45: char buf[40];
  3900                           ;Movement.c: 49: SensorResult[0]=grabLeftIR();
  3901  0010B6  ECC8  F00D         	call	_grabLeftIR	;wreg free
  3902  0010BA  C024  F09E         	movff	?_grabLeftIR,ScanIR@SensorResult
  3903  0010BE  C025  F09F         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3904                           
  3905                           ;Movement.c: 50: SensorResult[1]=grabRightIR();
  3906  0010C2  EC8F  F00D         	call	_grabRightIR	;wreg free
  3907  0010C6  C024  F0A0         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3908  0010CA  C025  F0A1         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3909                           
  3910                           ;Movement.c: 54: CAP1BUFH=0;
  3911  0010CE  0E00               	movlw	0
  3912  0010D0  6E69               	movwf	3945,c	;volatile
  3913                           
  3914                           ;Movement.c: 55: CAP1BUFL=0;
  3915  0010D2  0E00               	movlw	0
  3916  0010D4  6E68               	movwf	3944,c	;volatile
  3917                           
  3918                           ;Movement.c: 56: CAP2BUFH=0;
  3919  0010D6  0E00               	movlw	0
  3920  0010D8  6E67               	movwf	3943,c	;volatile
  3921                           
  3922                           ;Movement.c: 57: CAP2BUFL=0;
  3923  0010DA  0E00               	movlw	0
  3924  0010DC  6E66               	movwf	3942,c	;volatile
  3925                           
  3926                           ;Movement.c: 60: SendLCD(0b00000001,0);
  3927  0010DE  0E00               	movlw	0
  3928  0010E0  6E28               	movwf	SendLCD@type,c
  3929  0010E2  0E01               	movlw	1
  3930  0010E4  ECA2  F00F         	call	_SendLCD
  3931                           
  3932                           ;Movement.c: 61: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3933  0010E8  0E21               	movlw	33
  3934  0010EA                     u3107:
  3935  0010EA  2EE8               	decfsz	wreg,f,c
  3936  0010EC  D7FE               	goto	u3107
  3937  0010EE  F000               	nop	
  3938                           
  3939                           ;Movement.c: 62: SendLCD(0b00000010,0);
  3940  0010F0  0E00               	movlw	0
  3941  0010F2  6E28               	movwf	SendLCD@type,c
  3942  0010F4  0E02               	movlw	2
  3943  0010F6  ECA2  F00F         	call	_SendLCD
  3944                           
  3945                           ;Movement.c: 63: _delay((unsigned long)((2)*(8000000/4000.0)));
  3946  0010FA  0E06               	movlw	6
  3947  0010FC  0100               	movlb	0	; () banked
  3948  0010FE  6F74               	movwf	??_ScanIR& (0+255),b
  3949  001100  0E30               	movlw	48
  3950  001102                     u3117:
  3951  001102  2EE8               	decfsz	wreg,f,c
  3952  001104  D7FE               	goto	u3117
  3953  001106  2F74               	decfsz	??_ScanIR& (0+255),f,b
  3954  001108  D7FC               	goto	u3117
  3955  00110A  D000               	nop2	
  3956                           
  3957                           ;Movement.c: 64: SetLine(1);
  3958  00110C  0E01               	movlw	1
  3959  00110E  EC8A  F00F         	call	_SetLine
  3960                           
  3961                           ;Movement.c: 65: LCD_String("         ScanIR");
  3962  001112  0E59               	movlw	low STR_6
  3963  001114  6E2A               	movwf	LCD_String@string,c
  3964  001116  0E03               	movlw	high STR_6
  3965  001118  6E2B               	movwf	LCD_String@string+1,c
  3966  00111A  EC39  F00E         	call	_LCD_String	;wreg free
  3967                           
  3968                           ;Movement.c: 66: SetLine(2);
  3969  00111E  0E02               	movlw	2
  3970  001120  EC8A  F00F         	call	_SetLine
  3971                           
  3972                           ;Movement.c: 67: sprintf(buf,"     %d, %d",SensorResult[0],SensorResult[1]);
  3973  001124  0E76               	movlw	low ScanIR@buf
  3974  001126  6E30               	movwf	sprintf@sp,c
  3975  001128  0E00               	movlw	high ScanIR@buf
  3976  00112A  6E31               	movwf	sprintf@sp+1,c
  3977  00112C  0E86               	movlw	low STR_7
  3978  00112E  6E32               	movwf	sprintf@f,c
  3979  001130  0E03               	movlw	high STR_7
  3980  001132  6E33               	movwf	sprintf@f+1,c
  3981  001134  C09E  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3982  001138  C09F  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3983  00113C  C0A0  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3984  001140  C0A1  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3985  001144  EC4E  F00A         	call	_sprintf	;wreg free
  3986                           
  3987                           ;Movement.c: 68: LCD_String(buf);
  3988  001148  0E76               	movlw	low ScanIR@buf
  3989  00114A  6E2A               	movwf	LCD_String@string,c
  3990  00114C  0E00               	movlw	high ScanIR@buf
  3991  00114E  6E2B               	movwf	LCD_String@string+1,c
  3992  001150  EC39  F00E         	call	_LCD_String	;wreg free
  3993                           
  3994                           ;Movement.c: 71: if ((SensorResult[0]+SensorResult[1])>ClearSignalThreshold) {
  3995  001154  0100               	movlb	0	; () banked
  3996  001156  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3997  001158  0100               	movlb	0	; () banked
  3998  00115A  25A0               	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3999  00115C  0100               	movlb	0	; () banked
  4000  00115E  6F74               	movwf	??_ScanIR& (0+255),b
  4001  001160  0100               	movlb	0	; () banked
  4002  001162  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4003  001164  0100               	movlb	0	; () banked
  4004  001166  21A1               	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  4005  001168  0100               	movlb	0	; () banked
  4006  00116A  6F75               	movwf	(??_ScanIR+1)& (0+255),b
  4007  00116C  0E0B               	movlw	low _ClearSignalThreshold
  4008  00116E  6EF6               	movwf	tblptrl,c
  4009  001170                     	if	1	;There is more than 1 active tblptr byte
  4010  001170  0E03               	movlw	high _ClearSignalThreshold
  4011  001172  6EF7               	movwf	tblptrh,c
  4012  001174                     	endif
  4013  001174                     	if	0	;There are less than 3 active tblptr bytes
  4014  001174                     	endif
  4015  001174  0100               	movlb	0	; () banked
  4016  001176  5174               	movf	??_ScanIR& (0+255),w,b
  4017  001178  0009               	tblrd		*+
  4018  00117A  5CF5               	subwf	tablat,w,c
  4019  00117C  0100               	movlb	0	; () banked
  4020  00117E  5175               	movf	(??_ScanIR+1)& (0+255),w,b
  4021  001180  0009               	tblrd		*+
  4022  001182  58F5               	subwfb	tablat,w,c
  4023  001184  B0D8               	btfsc	status,0,c
  4024  001186  D0F8               	goto	l3528
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;Movement.c: 74: if (((SensorResult[0]>DirectionFoundThreshold)&&(SensorResult[1]>Direct
      +                          ionFoundThreshold)
  4028                           ;Movement.c: 75: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  4029                           ;Movement.c: 76: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  4030  001188  0E0D               	movlw	low _DirectionFoundThreshold
  4031  00118A  6EF6               	movwf	tblptrl,c
  4032  00118C                     	if	1	;There is more than 1 active tblptr byte
  4033  00118C  0E03               	movlw	high _DirectionFoundThreshold
  4034  00118E  6EF7               	movwf	tblptrh,c
  4035  001190                     	endif
  4036  001190                     	if	0	;There are less than 3 active tblptr bytes
  4037  001190                     	endif
  4038  001190  0100               	movlb	0	; () banked
  4039  001192  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4040  001194  0009               	tblrd		*+
  4041  001196  5CF5               	subwf	tablat,w,c
  4042  001198  0100               	movlb	0	; () banked
  4043  00119A  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4044  00119C  0009               	tblrd		*+
  4045  00119E  58F5               	subwfb	tablat,w,c
  4046  0011A0  B0D8               	btfsc	status,0,c
  4047  0011A2  D050               	goto	l3490
  4048                           
  4049                           ; BSR set to: 0
  4050  0011A4  0E0D               	movlw	low _DirectionFoundThreshold
  4051  0011A6  6EF6               	movwf	tblptrl,c
  4052  0011A8                     	if	1	;There is more than 1 active tblptr byte
  4053  0011A8  0E03               	movlw	high _DirectionFoundThreshold
  4054  0011AA  6EF7               	movwf	tblptrh,c
  4055  0011AC                     	endif
  4056  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  4057  0011AC                     	endif
  4058  0011AC  0100               	movlb	0	; () banked
  4059  0011AE  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4060  0011B0  0009               	tblrd		*+
  4061  0011B2  5CF5               	subwf	tablat,w,c
  4062  0011B4  0100               	movlb	0	; () banked
  4063  0011B6  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4064  0011B8  0009               	tblrd		*+
  4065  0011BA  58F5               	subwfb	tablat,w,c
  4066  0011BC  B0D8               	btfsc	status,0,c
  4067  0011BE  D042               	goto	l3490
  4068                           
  4069                           ; BSR set to: 0
  4070  0011C0  0E0F               	movlw	low _DirectionFoundTolerance
  4071  0011C2  6EF6               	movwf	tblptrl,c
  4072  0011C4                     	if	1	;There is more than 1 active tblptr byte
  4073  0011C4  0E03               	movlw	high _DirectionFoundTolerance
  4074  0011C6  6EF7               	movwf	tblptrh,c
  4075  0011C8                     	endif
  4076  0011C8                     	if	0	;There are less than 3 active tblptr bytes
  4077  0011C8                     	endif
  4078  0011C8  EE20  F0A0         	lfsr	2,ScanIR@SensorResult+2
  4079  0011CC  CFDE F074          	movff	postinc2,??_ScanIR
  4080  0011D0  CFDD F075          	movff	postdec2,??_ScanIR+1
  4081  0011D4  0100               	movlb	0	; () banked
  4082  0011D6  1F74               	comf	??_ScanIR& (0+255),f,b
  4083  0011D8  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  4084  0011DA  4B74               	infsnz	??_ScanIR& (0+255),f,b
  4085  0011DC  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  4086  0011DE  0100               	movlb	0	; () banked
  4087  0011E0  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4088  0011E2  0100               	movlb	0	; () banked
  4089  0011E4  2774               	addwf	??_ScanIR& (0+255),f,b
  4090  0011E6  0100               	movlb	0	; () banked
  4091  0011E8  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4092  0011EA  0100               	movlb	0	; () banked
  4093  0011EC  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  4094  0011EE  0009               	tblrd		*+
  4095  0011F0  50F5               	movf	tablat,w,c
  4096  0011F2  0100               	movlb	0	; () banked
  4097  0011F4  5D74               	subwf	??_ScanIR& (0+255),w,b
  4098  0011F6  0009               	tblrd		*+
  4099  0011F8  50F5               	movf	tablat,w,c
  4100  0011FA  0100               	movlb	0	; () banked
  4101  0011FC  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  4102  0011FE  A0D8               	btfss	status,0,c
  4103  001200  D01F               	goto	l3484
  4104                           
  4105                           ; BSR set to: 0
  4106  001202  0E0F               	movlw	low _DirectionFoundTolerance
  4107  001204  6EF6               	movwf	tblptrl,c
  4108  001206                     	if	1	;There is more than 1 active tblptr byte
  4109  001206  0E03               	movlw	high _DirectionFoundTolerance
  4110  001208  6EF7               	movwf	tblptrh,c
  4111  00120A                     	endif
  4112  00120A                     	if	0	;There are less than 3 active tblptr bytes
  4113  00120A                     	endif
  4114  00120A  C09E  F074         	movff	ScanIR@SensorResult,??_ScanIR
  4115  00120E  C09F  F075         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  4116  001212  0100               	movlb	0	; () banked
  4117  001214  1F74               	comf	??_ScanIR& (0+255),f,b
  4118  001216  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  4119  001218  4B74               	infsnz	??_ScanIR& (0+255),f,b
  4120  00121A  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  4121  00121C  0100               	movlb	0	; () banked
  4122  00121E  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4123  001220  0100               	movlb	0	; () banked
  4124  001222  2774               	addwf	??_ScanIR& (0+255),f,b
  4125  001224  0100               	movlb	0	; () banked
  4126  001226  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4127  001228  0100               	movlb	0	; () banked
  4128  00122A  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  4129  00122C  0009               	tblrd		*+
  4130  00122E  50F5               	movf	tablat,w,c
  4131  001230  0100               	movlb	0	; () banked
  4132  001232  5D74               	subwf	??_ScanIR& (0+255),w,b
  4133  001234  0009               	tblrd		*+
  4134  001236  50F5               	movf	tablat,w,c
  4135  001238  0100               	movlb	0	; () banked
  4136  00123A  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  4137  00123C  B0D8               	btfsc	status,0,c
  4138  00123E  D002               	goto	l3490
  4139  001240                     l3484:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;Movement.c: 77: return 2;
  4143  001240  0E02               	movlw	2
  4144                           
  4145                           ; BSR set to: 0
  4146  001242  0012               	return	
  4147  001244                     l3490:
  4148                           
  4149                           ; BSR set to: 0
  4150  001244  0100               	movlb	0	; () banked
  4151  001246  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4152  001248  0100               	movlb	0	; () banked
  4153  00124A  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4154  00124C  0100               	movlb	0	; () banked
  4155  00124E  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4156  001250  0100               	movlb	0	; () banked
  4157  001252  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4158  001254  A0D8               	btfss	status,0,c
  4159  001256  D03A               	goto	l3510
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;Movement.c: 80: stop(mL,mR);
  4163  001258  C06A  F062         	movff	ScanIR@mL,stop@mL
  4164  00125C  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4165  001260  C06C  F064         	movff	ScanIR@mR,stop@mR
  4166  001264  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4167  001268  ECBE  F00C         	call	_stop	;wreg free
  4168                           
  4169                           ;Movement.c: 81: turnLeft(mL,mR);
  4170  00126C  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  4171  001270  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  4172  001274  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  4173  001278  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  4174  00127C  ECB8  F00E         	call	_turnLeft	;wreg free
  4175                           
  4176                           ;Movement.c: 82: delay_tenth_s(3);
  4177  001280  0E03               	movlw	3
  4178  001282  EC39  F00F         	call	_delay_tenth_s
  4179                           
  4180                           ;Movement.c: 83: stop(mL,mR);
  4181  001286  C06A  F062         	movff	ScanIR@mL,stop@mL
  4182  00128A  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4183  00128E  C06C  F064         	movff	ScanIR@mR,stop@mR
  4184  001292  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4185  001296  ECBE  F00C         	call	_stop	;wreg free
  4186                           
  4187                           ;Movement.c: 84: MoveTime[*Move]=3;
  4188  00129A  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4189  00129E  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4190  0012A2  50DF               	movf	indf2,w,c
  4191  0012A4  0100               	movlb	0	; () banked
  4192  0012A6  6F74               	movwf	??_ScanIR& (0+255),b
  4193  0012A8  0100               	movlb	0	; () banked
  4194  0012AA  5174               	movf	??_ScanIR& (0+255),w,b
  4195  0012AC  0D01               	mullw	1
  4196  0012AE  50F3               	movf	prodl,w,c
  4197  0012B0  0100               	movlb	0	; () banked
  4198  0012B2  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4199  0012B4  6ED9               	movwf	fsr2l,c
  4200  0012B6  50F4               	movf	prodh,w,c
  4201  0012B8  0100               	movlb	0	; () banked
  4202  0012BA  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4203  0012BC  6EDA               	movwf	fsr2h,c
  4204  0012BE  0E03               	movlw	3
  4205  0012C0  6EDF               	movwf	indf2,c
  4206  0012C2  D043               	goto	l3520
  4207  0012C4                     l3502:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;Movement.c: 86: Move++;
  4211  0012C4  0100               	movlb	0	; () banked
  4212  0012C6  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  4213  0012C8  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  4214  0012CA  D054               	goto	l3524
  4215  0012CC                     l3510:
  4216                           
  4217                           ; BSR set to: 0
  4218  0012CC  0100               	movlb	0	; () banked
  4219  0012CE  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4220  0012D0  0100               	movlb	0	; () banked
  4221  0012D2  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4222  0012D4  0100               	movlb	0	; () banked
  4223  0012D6  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4224  0012D8  0100               	movlb	0	; () banked
  4225  0012DA  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4226  0012DC  B0D8               	btfsc	status,0,c
  4227  0012DE  D0DC               	goto	l3568
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;Movement.c: 91: stop(mL,mR);
  4231  0012E0  C06A  F062         	movff	ScanIR@mL,stop@mL
  4232  0012E4  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4233  0012E8  C06C  F064         	movff	ScanIR@mR,stop@mR
  4234  0012EC  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4235  0012F0  ECBE  F00C         	call	_stop	;wreg free
  4236                           
  4237                           ;Movement.c: 92: turnRight(mL,mR);
  4238  0012F4  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  4239  0012F8  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  4240  0012FC  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  4241  001300  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  4242  001304  EC91  F00E         	call	_turnRight	;wreg free
  4243                           
  4244                           ;Movement.c: 93: delay_tenth_s(3);
  4245  001308  0E03               	movlw	3
  4246  00130A  EC39  F00F         	call	_delay_tenth_s
  4247                           
  4248                           ;Movement.c: 94: stop(mL,mR);
  4249  00130E  C06A  F062         	movff	ScanIR@mL,stop@mL
  4250  001312  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4251  001316  C06C  F064         	movff	ScanIR@mR,stop@mR
  4252  00131A  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4253  00131E  ECBE  F00C         	call	_stop	;wreg free
  4254                           
  4255                           ;Movement.c: 95: MoveTime[*Move]=-3;
  4256  001322  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4257  001326  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4258  00132A  50DF               	movf	indf2,w,c
  4259  00132C  0100               	movlb	0	; () banked
  4260  00132E  6F74               	movwf	??_ScanIR& (0+255),b
  4261  001330  0100               	movlb	0	; () banked
  4262  001332  5174               	movf	??_ScanIR& (0+255),w,b
  4263  001334  0D01               	mullw	1
  4264  001336  50F3               	movf	prodl,w,c
  4265  001338  0100               	movlb	0	; () banked
  4266  00133A  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4267  00133C  6ED9               	movwf	fsr2l,c
  4268  00133E  50F4               	movf	prodh,w,c
  4269  001340  0100               	movlb	0	; () banked
  4270  001342  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4271  001344  6EDA               	movwf	fsr2h,c
  4272  001346  0EFD               	movlw	253
  4273  001348  D7BB               	goto	L3
  4274  00134A                     l3520:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;Movement.c: 96: MoveType[*Move]=1;
  4278  00134A  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4279  00134E  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4280  001352  50DF               	movf	indf2,w,c
  4281  001354  0100               	movlb	0	; () banked
  4282  001356  6F74               	movwf	??_ScanIR& (0+255),b
  4283  001358  0100               	movlb	0	; () banked
  4284  00135A  5174               	movf	??_ScanIR& (0+255),w,b
  4285  00135C  0D01               	mullw	1
  4286  00135E  50F3               	movf	prodl,w,c
  4287  001360  0100               	movlb	0	; () banked
  4288  001362  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  4289  001364  6ED9               	movwf	fsr2l,c
  4290  001366  50F4               	movf	prodh,w,c
  4291  001368  0100               	movlb	0	; () banked
  4292  00136A  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4293  00136C  6EDA               	movwf	fsr2h,c
  4294  00136E  0E01               	movlw	1
  4295  001370  6EDF               	movwf	indf2,c
  4296  001372  D7A8               	goto	l3502
  4297  001374                     l3524:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;Movement.c: 98: return 1;
  4301  001374  0E01               	movlw	1
  4302                           
  4303                           ; BSR set to: 0
  4304  001376  0012               	return	
  4305  001378                     l3528:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;Movement.c: 103: stop(mL,mR);
  4309  001378  C06A  F062         	movff	ScanIR@mL,stop@mL
  4310  00137C  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4311  001380  C06C  F064         	movff	ScanIR@mR,stop@mR
  4312  001384  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4313  001388  ECBE  F00C         	call	_stop	;wreg free
  4314                           
  4315                           ;Movement.c: 106: if (SensorResult[0]<=SensorResult[1]) {
  4316  00138C  0100               	movlb	0	; () banked
  4317  00138E  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4318  001390  0100               	movlb	0	; () banked
  4319  001392  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4320  001394  0100               	movlb	0	; () banked
  4321  001396  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4322  001398  0100               	movlb	0	; () banked
  4323  00139A  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4324  00139C  A0D8               	btfss	status,0,c
  4325  00139E  D030               	goto	l3550
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;Movement.c: 107: turnLeft(mL,mR);
  4329  0013A0  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  4330  0013A4  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  4331  0013A8  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  4332  0013AC  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  4333  0013B0  ECB8  F00E         	call	_turnLeft	;wreg free
  4334                           
  4335                           ;Movement.c: 108: delay_tenth_s(5);
  4336  0013B4  0E05               	movlw	5
  4337  0013B6  EC39  F00F         	call	_delay_tenth_s
  4338                           
  4339                           ;Movement.c: 109: stop(mL,mR);
  4340  0013BA  C06A  F062         	movff	ScanIR@mL,stop@mL
  4341  0013BE  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4342  0013C2  C06C  F064         	movff	ScanIR@mR,stop@mR
  4343  0013C6  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4344  0013CA  ECBE  F00C         	call	_stop	;wreg free
  4345                           
  4346                           ;Movement.c: 110: MoveTime[*Move]=5;
  4347  0013CE  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4348  0013D2  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4349  0013D6  50DF               	movf	indf2,w,c
  4350  0013D8  0100               	movlb	0	; () banked
  4351  0013DA  6F74               	movwf	??_ScanIR& (0+255),b
  4352  0013DC  0100               	movlb	0	; () banked
  4353  0013DE  5174               	movf	??_ScanIR& (0+255),w,b
  4354  0013E0  0D01               	mullw	1
  4355  0013E2  50F3               	movf	prodl,w,c
  4356  0013E4  0100               	movlb	0	; () banked
  4357  0013E6  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4358  0013E8  6ED9               	movwf	fsr2l,c
  4359  0013EA  50F4               	movf	prodh,w,c
  4360  0013EC  0100               	movlb	0	; () banked
  4361  0013EE  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4362  0013F0  6EDA               	movwf	fsr2h,c
  4363  0013F2  0E05               	movlw	5
  4364  0013F4  6EDF               	movwf	indf2,c
  4365  0013F6  D039               	goto	l3560
  4366  0013F8                     l3542:
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;Movement.c: 112: Move++;
  4370  0013F8  0100               	movlb	0	; () banked
  4371  0013FA  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  4372  0013FC  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  4373  0013FE  D04A               	goto	l3564
  4374  001400                     l3550:
  4375                           
  4376                           ; BSR set to: 0
  4377  001400  0100               	movlb	0	; () banked
  4378  001402  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4379  001404  0100               	movlb	0	; () banked
  4380  001406  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4381  001408  0100               	movlb	0	; () banked
  4382  00140A  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4383  00140C  0100               	movlb	0	; () banked
  4384  00140E  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4385  001410  B0D8               	btfsc	status,0,c
  4386  001412  D042               	goto	l3568
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;Movement.c: 116: turnRight(mL,mR);
  4390  001414  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  4391  001418  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  4392  00141C  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  4393  001420  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  4394  001424  EC91  F00E         	call	_turnRight	;wreg free
  4395                           
  4396                           ;Movement.c: 117: delay_tenth_s(5);
  4397  001428  0E05               	movlw	5
  4398  00142A  EC39  F00F         	call	_delay_tenth_s
  4399                           
  4400                           ;Movement.c: 118: stop(mL,mR);
  4401  00142E  C06A  F062         	movff	ScanIR@mL,stop@mL
  4402  001432  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4403  001436  C06C  F064         	movff	ScanIR@mR,stop@mR
  4404  00143A  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4405  00143E  ECBE  F00C         	call	_stop	;wreg free
  4406                           
  4407                           ;Movement.c: 119: MoveTime[*Move]=-5;
  4408  001442  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4409  001446  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4410  00144A  50DF               	movf	indf2,w,c
  4411  00144C  0100               	movlb	0	; () banked
  4412  00144E  6F74               	movwf	??_ScanIR& (0+255),b
  4413  001450  0100               	movlb	0	; () banked
  4414  001452  5174               	movf	??_ScanIR& (0+255),w,b
  4415  001454  0D01               	mullw	1
  4416  001456  50F3               	movf	prodl,w,c
  4417  001458  0100               	movlb	0	; () banked
  4418  00145A  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4419  00145C  6ED9               	movwf	fsr2l,c
  4420  00145E  50F4               	movf	prodh,w,c
  4421  001460  0100               	movlb	0	; () banked
  4422  001462  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4423  001464  6EDA               	movwf	fsr2h,c
  4424  001466  0EFB               	movlw	251
  4425  001468  D7C5               	goto	L4
  4426  00146A                     l3560:
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;Movement.c: 120: MoveType[*Move]=1;
  4430  00146A  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4431  00146E  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4432  001472  50DF               	movf	indf2,w,c
  4433  001474  0100               	movlb	0	; () banked
  4434  001476  6F74               	movwf	??_ScanIR& (0+255),b
  4435  001478  0100               	movlb	0	; () banked
  4436  00147A  5174               	movf	??_ScanIR& (0+255),w,b
  4437  00147C  0D01               	mullw	1
  4438  00147E  50F3               	movf	prodl,w,c
  4439  001480  0100               	movlb	0	; () banked
  4440  001482  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  4441  001484  6ED9               	movwf	fsr2l,c
  4442  001486  50F4               	movf	prodh,w,c
  4443  001488  0100               	movlb	0	; () banked
  4444  00148A  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4445  00148C  6EDA               	movwf	fsr2h,c
  4446  00148E  0E01               	movlw	1
  4447  001490  6EDF               	movwf	indf2,c
  4448  001492  D7B2               	goto	l3542
  4449  001494                     l3564:
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;Movement.c: 122: return 0;
  4453  001494  0E00               	movlw	0
  4454                           
  4455                           ; BSR set to: 0
  4456  001496  0012               	return	
  4457  001498                     l3568:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;Movement.c: 123: }
  4461                           ;Movement.c: 124: }
  4462                           ;Movement.c: 125: return 0;
  4463  001498  0E00               	movlw	0
  4464  00149A  0012               	return	
  4465  00149C                     __end_of_ScanIR:
  4466                           	opt stack 0
  4467                           tblptru	equ	0xFF8
  4468                           tblptrh	equ	0xFF7
  4469                           tblptrl	equ	0xFF6
  4470                           tablat	equ	0xFF5
  4471                           prodh	equ	0xFF4
  4472                           prodl	equ	0xFF3
  4473                           intcon	equ	0xFF2
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           indf1	equ	0xFE7
  4477                           fsr1h	equ	0xFE2
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _turnRight *****************
  4487 ;; Defined at:
  4488 ;;		line 98 in file "dc_motor.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4491 ;;		 -> main@mL(9), 
  4492 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4493 ;;		 -> main@mR(9), 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;		None               void
  4498 ;; Registers used:
  4499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4505 ;;      Params:         0       4       0       0
  4506 ;;      Locals:         0       0       0       0
  4507 ;;      Temps:          0       0       0       0
  4508 ;;      Totals:         0       4       0       0
  4509 ;;Total ram usage:        4 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    6
  4512 ;; This function calls:
  4513 ;;		_fullSpeedAhead
  4514 ;;		_stop
  4515 ;; This function is called by:
  4516 ;;		_ScanIR
  4517 ;;		_ScanWithRange
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text11
  4522  001D22                     __ptext11:
  4523                           	opt stack 0
  4524  001D22                     _turnRight:
  4525                           	opt stack 23
  4526                           
  4527                           ;dc_motor.c: 100: stop(mL, mR);
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;incstack = 0
  4531  001D22  C066  F062         	movff	turnRight@mL,stop@mL
  4532  001D26  C067  F063         	movff	turnRight@mL+1,stop@mL+1
  4533  001D2A  C068  F064         	movff	turnRight@mR,stop@mR
  4534  001D2E  C069  F065         	movff	turnRight@mR+1,stop@mR+1
  4535  001D32  ECBE  F00C         	call	_stop	;wreg free
  4536                           
  4537                           ;dc_motor.c: 102: mL->direction=1;
  4538  001D36  0100               	movlb	0	; () banked
  4539  001D38  EE20 F001          	lfsr	2,1
  4540  001D3C  5166               	movf	turnRight@mL& (0+255),w,b
  4541  001D3E  26D9               	addwf	fsr2l,f,c
  4542  001D40  5167               	movf	(turnRight@mL+1)& (0+255),w,b
  4543  001D42  22DA               	addwfc	fsr2h,f,c
  4544  001D44  0E01               	movlw	1
  4545  001D46  6EDF               	movwf	indf2,c
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;dc_motor.c: 103: mR->direction=0;
  4549  001D48  0100               	movlb	0	; () banked
  4550  001D4A  EE20 F001          	lfsr	2,1
  4551  001D4E  5168               	movf	turnRight@mR& (0+255),w,b
  4552  001D50  26D9               	addwf	fsr2l,f,c
  4553  001D52  5169               	movf	(turnRight@mR+1)& (0+255),w,b
  4554  001D54  22DA               	addwfc	fsr2h,f,c
  4555  001D56  0E00               	movlw	0
  4556  001D58  6EDF               	movwf	indf2,c
  4557                           
  4558                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  4559  001D5A  C066  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  4560  001D5E  C067  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  4561  001D62  C068  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  4562  001D66  C069  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  4563  001D6A  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  4564  001D6E  0012               	return		;funcret
  4565  001D70                     __end_of_turnRight:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           indf1	equ	0xFE7
  4577                           fsr1h	equ	0xFE2
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function _turnLeft *****************
  4587 ;; Defined at:
  4588 ;;		line 87 in file "dc_motor.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4591 ;;		 -> main@mL(9), 
  4592 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4593 ;;		 -> main@mR(9), 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;		None               void
  4598 ;; Registers used:
  4599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4605 ;;      Params:         0       4       0       0
  4606 ;;      Locals:         0       0       0       0
  4607 ;;      Temps:          0       0       0       0
  4608 ;;      Totals:         0       4       0       0
  4609 ;;Total ram usage:        4 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    6
  4612 ;; This function calls:
  4613 ;;		_fullSpeedAhead
  4614 ;;		_stop
  4615 ;; This function is called by:
  4616 ;;		_ScanIR
  4617 ;;		_ScanWithRange
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text12
  4622  001D70                     __ptext12:
  4623                           	opt stack 0
  4624  001D70                     _turnLeft:
  4625                           	opt stack 23
  4626                           
  4627                           ;dc_motor.c: 89: stop(mL, mR);
  4628                           
  4629                           ;incstack = 0
  4630  001D70  C066  F062         	movff	turnLeft@mL,stop@mL
  4631  001D74  C067  F063         	movff	turnLeft@mL+1,stop@mL+1
  4632  001D78  C068  F064         	movff	turnLeft@mR,stop@mR
  4633  001D7C  C069  F065         	movff	turnLeft@mR+1,stop@mR+1
  4634  001D80  ECBE  F00C         	call	_stop	;wreg free
  4635                           
  4636                           ;dc_motor.c: 91: mL->direction=0;
  4637  001D84  0100               	movlb	0	; () banked
  4638  001D86  EE20 F001          	lfsr	2,1
  4639  001D8A  5166               	movf	turnLeft@mL& (0+255),w,b
  4640  001D8C  26D9               	addwf	fsr2l,f,c
  4641  001D8E  5167               	movf	(turnLeft@mL+1)& (0+255),w,b
  4642  001D90  22DA               	addwfc	fsr2h,f,c
  4643  001D92  0E00               	movlw	0
  4644  001D94  6EDF               	movwf	indf2,c
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;dc_motor.c: 92: mR->direction=1;
  4648  001D96  0100               	movlb	0	; () banked
  4649  001D98  EE20 F001          	lfsr	2,1
  4650  001D9C  5168               	movf	turnLeft@mR& (0+255),w,b
  4651  001D9E  26D9               	addwf	fsr2l,f,c
  4652  001DA0  5169               	movf	(turnLeft@mR+1)& (0+255),w,b
  4653  001DA2  22DA               	addwfc	fsr2h,f,c
  4654  001DA4  0E01               	movlw	1
  4655  001DA6  6EDF               	movwf	indf2,c
  4656                           
  4657                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4658  001DA8  C066  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  4659  001DAC  C067  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4660  001DB0  C068  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  4661  001DB4  C069  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4662  001DB8  EC01  F00E         	call	_fullSpeedAhead	;wreg free
  4663  001DBC  0012               	return		;funcret
  4664  001DBE                     __end_of_turnLeft:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _stop *****************
  4686 ;; Defined at:
  4687 ;;		line 67 in file "dc_motor.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4690 ;;		 -> main@mL(9), 
  4691 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4692 ;;		 -> main@mR(9), 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;		None
  4695 ;; Return value:  Size  Location     Type
  4696 ;;		None               void
  4697 ;; Registers used:
  4698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4704 ;;      Params:         0       4       0       0
  4705 ;;      Locals:         0       0       0       0
  4706 ;;      Temps:          0       0       0       0
  4707 ;;      Totals:         0       4       0       0
  4708 ;;Total ram usage:        4 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    5
  4711 ;; This function calls:
  4712 ;;		_setMotorPWM
  4713 ;; This function is called by:
  4714 ;;		_main
  4715 ;;		_turnLeft
  4716 ;;		_turnRight
  4717 ;;		_ScanIR
  4718 ;;		_ScanWithRange
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text13
  4723  00197C                     __ptext13:
  4724                           	opt stack 0
  4725  00197C                     _stop:
  4726                           	opt stack 25
  4727                           
  4728                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4729                           
  4730                           ;incstack = 0
  4731  00197C  D028               	goto	l3142
  4732  00197E                     l3128:
  4733                           
  4734                           ;dc_motor.c: 71: if(mL->power>0){
  4735  00197E  C062  FFD9         	movff	stop@mL,fsr2l
  4736  001982  C063  FFDA         	movff	stop@mL+1,fsr2h
  4737  001986  50DF               	movf	indf2,w,c
  4738  001988  B4D8               	btfsc	status,2,c
  4739  00198A  D005               	goto	l3132
  4740                           
  4741                           ;dc_motor.c: 72: mL->power--;
  4742  00198C  C062  FFD9         	movff	stop@mL,fsr2l
  4743  001990  C063  FFDA         	movff	stop@mL+1,fsr2h
  4744  001994  06DF               	decf	indf2,f,c
  4745  001996                     l3132:
  4746                           
  4747                           ;dc_motor.c: 73: }
  4748                           ;dc_motor.c: 74: if(mR->power>0){
  4749  001996  C064  FFD9         	movff	stop@mR,fsr2l
  4750  00199A  C065  FFDA         	movff	stop@mR+1,fsr2h
  4751  00199E  50DF               	movf	indf2,w,c
  4752  0019A0  B4D8               	btfsc	status,2,c
  4753  0019A2  D005               	goto	l3136
  4754                           
  4755                           ;dc_motor.c: 75: mR->power--;
  4756  0019A4  C064  FFD9         	movff	stop@mR,fsr2l
  4757  0019A8  C065  FFDA         	movff	stop@mR+1,fsr2h
  4758  0019AC  06DF               	decf	indf2,f,c
  4759  0019AE                     l3136:
  4760                           
  4761                           ;dc_motor.c: 76: }
  4762                           ;dc_motor.c: 77: setMotorPWM(mL);
  4763  0019AE  C062  F032         	movff	stop@mL,setMotorPWM@m
  4764  0019B2  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4765  0019B6  EC06  F00B         	call	_setMotorPWM	;wreg free
  4766                           
  4767                           ;dc_motor.c: 78: setMotorPWM(mR);
  4768  0019BA  C064  F032         	movff	stop@mR,setMotorPWM@m
  4769  0019BE  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4770  0019C2  EC06  F00B         	call	_setMotorPWM	;wreg free
  4771                           
  4772                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4773  0019C6  0E21               	movlw	33
  4774  0019C8                     u3127:
  4775  0019C8  2EE8               	decfsz	wreg,f,c
  4776  0019CA  D7FE               	goto	u3127
  4777  0019CC  F000               	nop	
  4778  0019CE                     l3142:
  4779  0019CE  C062  FFD9         	movff	stop@mL,fsr2l
  4780  0019D2  C063  FFDA         	movff	stop@mL+1,fsr2h
  4781  0019D6  50DF               	movf	indf2,w,c
  4782  0019D8  A4D8               	btfss	status,2,c
  4783  0019DA  D7D1               	goto	l3128
  4784  0019DC  C064  FFD9         	movff	stop@mR,fsr2l
  4785  0019E0  C065  FFDA         	movff	stop@mR+1,fsr2h
  4786  0019E4  50DF               	movf	indf2,w,c
  4787  0019E6  A4D8               	btfss	status,2,c
  4788  0019E8  D7CA               	goto	l3128
  4789                           
  4790                           ;dc_motor.c: 80: }
  4791                           ;dc_motor.c: 81: mL->direction=1;
  4792  0019EA  0100               	movlb	0	; () banked
  4793  0019EC  EE20 F001          	lfsr	2,1
  4794  0019F0  5162               	movf	stop@mL& (0+255),w,b
  4795  0019F2  26D9               	addwf	fsr2l,f,c
  4796  0019F4  5163               	movf	(stop@mL+1)& (0+255),w,b
  4797  0019F6  22DA               	addwfc	fsr2h,f,c
  4798  0019F8  0E01               	movlw	1
  4799  0019FA  6EDF               	movwf	indf2,c
  4800                           
  4801                           ;dc_motor.c: 82: mR->direction=1;
  4802  0019FC  0100               	movlb	0	; () banked
  4803  0019FE  EE20 F001          	lfsr	2,1
  4804  001A02  5164               	movf	stop@mR& (0+255),w,b
  4805  001A04  26D9               	addwf	fsr2l,f,c
  4806  001A06  5165               	movf	(stop@mR+1)& (0+255),w,b
  4807  001A08  22DA               	addwfc	fsr2h,f,c
  4808  001A0A  0E01               	movlw	1
  4809  001A0C  6EDF               	movwf	indf2,c
  4810                           
  4811                           ; BSR set to: 0
  4812  001A0E  0012               	return		;funcret
  4813  001A10                     __end_of_stop:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf1	equ	0xFE7
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _fullSpeedAhead *****************
  4835 ;; Defined at:
  4836 ;;		line 108 in file "dc_motor.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4839 ;;		 -> main@mL(9), 
  4840 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4841 ;;		 -> main@mR(9), 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;		None
  4844 ;; Return value:  Size  Location     Type
  4845 ;;		None               void
  4846 ;; Registers used:
  4847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4853 ;;      Params:         0       4       0       0
  4854 ;;      Locals:         0       0       0       0
  4855 ;;      Temps:          1       0       0       0
  4856 ;;      Totals:         1       4       0       0
  4857 ;;Total ram usage:        5 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    5
  4860 ;; This function calls:
  4861 ;;		_setMotorPWM
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;;		_turnLeft
  4865 ;;		_turnRight
  4866 ;;		_fullSpeedBack
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text14
  4871  001C02                     __ptext14:
  4872                           	opt stack 0
  4873  001C02                     _fullSpeedAhead:
  4874                           	opt stack 24
  4875                           
  4876                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;incstack = 0
  4880  001C02  D028               	goto	l173
  4881  001C04                     l3150:
  4882                           
  4883                           ;dc_motor.c: 112: if(mL->power<100){
  4884  001C04  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4885  001C08  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4886  001C0C  0E64               	movlw	100
  4887  001C0E  60DF               	cpfslt	indf2,c
  4888  001C10  D005               	goto	l3154
  4889                           
  4890                           ;dc_motor.c: 113: mL->power++;
  4891  001C12  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4892  001C16  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4893  001C1A  2ADF               	incf	indf2,f,c
  4894  001C1C                     l3154:
  4895                           
  4896                           ;dc_motor.c: 114: }
  4897                           ;dc_motor.c: 115: if(mR->power<100){
  4898  001C1C  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4899  001C20  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4900  001C24  0E64               	movlw	100
  4901  001C26  60DF               	cpfslt	indf2,c
  4902  001C28  D005               	goto	l3158
  4903                           
  4904                           ;dc_motor.c: 116: mR->power++;
  4905  001C2A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4906  001C2E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4907  001C32  2ADF               	incf	indf2,f,c
  4908  001C34                     l3158:
  4909                           
  4910                           ;dc_motor.c: 117: }
  4911                           ;dc_motor.c: 118: setMotorPWM(mL);
  4912  001C34  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4913  001C38  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4914  001C3C  EC06  F00B         	call	_setMotorPWM	;wreg free
  4915                           
  4916                           ;dc_motor.c: 119: setMotorPWM(mR);
  4917  001C40  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4918  001C44  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4919  001C48  EC06  F00B         	call	_setMotorPWM	;wreg free
  4920                           
  4921                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4922  001C4C  0E21               	movlw	33
  4923  001C4E                     u3137:
  4924  001C4E  2EE8               	decfsz	wreg,f,c
  4925  001C50  D7FE               	goto	u3137
  4926  001C52  F000               	nop	
  4927  001C54                     l173:
  4928  001C54  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4929  001C58  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4930  001C5C  0E63               	movlw	99
  4931  001C5E  64DF               	cpfsgt	indf2,c
  4932  001C60  D7D1               	goto	l3150
  4933  001C62  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4934  001C66  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4935  001C6A  0E63               	movlw	99
  4936  001C6C  64DF               	cpfsgt	indf2,c
  4937  001C6E  D7CA               	goto	l3150
  4938  001C70  0012               	return	
  4939  001C72                     __end_of_fullSpeedAhead:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           postinc0	equ	0xFEE
  4949                           wreg	equ	0xFE8
  4950                           indf1	equ	0xFE7
  4951                           fsr1h	equ	0xFE2
  4952                           fsr1l	equ	0xFE1
  4953                           indf2	equ	0xFDF
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           fsr2h	equ	0xFDA
  4957                           fsr2l	equ	0xFD9
  4958                           status	equ	0xFD8
  4959                           
  4960 ;; *************** function _setMotorPWM *****************
  4961 ;; Defined at:
  4962 ;;		line 26 in file "dc_motor.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4965 ;;		 -> main@mR(9), main@mL(9), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  PWMduty         2    0[BANK0 ] int 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4977 ;;      Params:         2       0       0       0
  4978 ;;      Locals:         0       2       0       0
  4979 ;;      Temps:          5       0       0       0
  4980 ;;      Totals:         7       2       0       0
  4981 ;;Total ram usage:        9 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    4
  4984 ;; This function calls:
  4985 ;;		___awdiv
  4986 ;;		___wmul
  4987 ;; This function is called by:
  4988 ;;		_stop
  4989 ;;		_fullSpeedAhead
  4990 ;;		_setMotorFullSpeed
  4991 ;;		_stopMotor
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text15
  4996  00160C                     __ptext15:
  4997                           	opt stack 0
  4998  00160C                     _setMotorPWM:
  4999                           	opt stack 25
  5000                           
  5001                           ;dc_motor.c: 28: int PWMduty;
  5002                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  5003                           
  5004                           ;incstack = 0
  5005  00160C  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  5006  001610  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5007  001614  50DF               	movf	indf2,w,c
  5008  001616  6E34               	movwf	??_setMotorPWM& (0+255),c
  5009  001618  5034               	movf	??_setMotorPWM,w,c
  5010  00161A  6E24               	movwf	___wmul@multiplier,c
  5011  00161C  6A25               	clrf	___wmul@multiplier+1,c
  5012  00161E  EE20 F007          	lfsr	2,7
  5013  001622  5032               	movf	setMotorPWM@m,w,c
  5014  001624  26D9               	addwf	fsr2l,f,c
  5015  001626  5033               	movf	setMotorPWM@m+1,w,c
  5016  001628  22DA               	addwfc	fsr2h,f,c
  5017  00162A  CFDE F026          	movff	postinc2,___wmul@multiplicand
  5018  00162E  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  5019  001632  ECE2  F00F         	call	___wmul	;wreg free
  5020  001636  C024  F02A         	movff	?___wmul,___awdiv@dividend
  5021  00163A  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  5022  00163E  0E00               	movlw	0
  5023  001640  6E2D               	movwf	___awdiv@divisor+1,c
  5024  001642  0E64               	movlw	100
  5025  001644  6E2C               	movwf	___awdiv@divisor,c
  5026  001646  EC4D  F00D         	call	___awdiv	;wreg free
  5027  00164A  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  5028  00164E  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  5029                           
  5030                           ;dc_motor.c: 32: if (m->direction)
  5031  001652  EE20 F001          	lfsr	2,1
  5032  001656  5032               	movf	setMotorPWM@m,w,c
  5033  001658  26D9               	addwf	fsr2l,f,c
  5034  00165A  5033               	movf	setMotorPWM@m+1,w,c
  5035  00165C  22DA               	addwfc	fsr2h,f,c
  5036  00165E  50DF               	movf	indf2,w,c
  5037  001660  B4D8               	btfsc	status,2,c
  5038  001662  D02E               	goto	l3124
  5039                           
  5040                           ;dc_motor.c: 33: {
  5041                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  5042  001664  EE20 F006          	lfsr	2,6
  5043  001668  5032               	movf	setMotorPWM@m,w,c
  5044  00166A  26D9               	addwf	fsr2l,f,c
  5045  00166C  5033               	movf	setMotorPWM@m+1,w,c
  5046  00166E  22DA               	addwfc	fsr2h,f,c
  5047  001670  50DF               	movf	indf2,w,c
  5048  001672  6E34               	movwf	??_setMotorPWM& (0+255),c
  5049  001674  0E01               	movlw	1
  5050  001676  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  5051  001678  2A34               	incf	??_setMotorPWM,f,c
  5052  00167A  D002               	goto	u2354
  5053  00167C                     u2355:
  5054  00167C  90D8               	bcf	status,0,c
  5055  00167E  3635               	rlcf	??_setMotorPWM+1,f,c
  5056  001680                     u2354:
  5057  001680  2E34               	decfsz	??_setMotorPWM,f,c
  5058  001682  D7FC               	goto	u2355
  5059  001684  5035               	movf	??_setMotorPWM+1,w,c
  5060  001686  108A               	iorwf	3978,w,c	;volatile
  5061  001688  6E8A               	movwf	3978,c	;volatile
  5062                           
  5063                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  5064  00168A  EE20 F007          	lfsr	2,7
  5065  00168E  5032               	movf	setMotorPWM@m,w,c
  5066  001690  26D9               	addwf	fsr2l,f,c
  5067  001692  5033               	movf	setMotorPWM@m+1,w,c
  5068  001694  22DA               	addwfc	fsr2h,f,c
  5069  001696  CFDE F034          	movff	postinc2,??_setMotorPWM
  5070  00169A  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  5071  00169E  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5072  0016A2  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5073  0016A6  1E36               	comf	??_setMotorPWM+2,f,c
  5074  0016A8  1E37               	comf	??_setMotorPWM+3,f,c
  5075  0016AA  4A36               	infsnz	??_setMotorPWM+2,f,c
  5076  0016AC  2A37               	incf	??_setMotorPWM+3,f,c
  5077  0016AE  5034               	movf	??_setMotorPWM,w,c
  5078  0016B0  2436               	addwf	??_setMotorPWM+2,w,c
  5079  0016B2  0100               	movlb	0	; () banked
  5080  0016B4  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  5081  0016B6  5035               	movf	??_setMotorPWM+1,w,c
  5082  0016B8  2037               	addwfc	??_setMotorPWM+3,w,c
  5083  0016BA  0100               	movlb	0	; () banked
  5084  0016BC  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  5085                           
  5086                           ;dc_motor.c: 36: }
  5087  0016BE  D014               	goto	l143
  5088  0016C0                     l3124:
  5089                           
  5090                           ;dc_motor.c: 37: else
  5091                           ;dc_motor.c: 38: {
  5092                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  5093  0016C0  EE20 F006          	lfsr	2,6
  5094  0016C4  5032               	movf	setMotorPWM@m,w,c
  5095  0016C6  26D9               	addwf	fsr2l,f,c
  5096  0016C8  5033               	movf	setMotorPWM@m+1,w,c
  5097  0016CA  22DA               	addwfc	fsr2h,f,c
  5098  0016CC  50DF               	movf	indf2,w,c
  5099  0016CE  6E34               	movwf	??_setMotorPWM& (0+255),c
  5100  0016D0  0E01               	movlw	1
  5101  0016D2  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  5102  0016D4  2A34               	incf	??_setMotorPWM,f,c
  5103  0016D6  D002               	goto	u2364
  5104  0016D8                     u2365:
  5105  0016D8  90D8               	bcf	status,0,c
  5106  0016DA  3635               	rlcf	??_setMotorPWM+1,f,c
  5107  0016DC                     u2364:
  5108  0016DC  2E34               	decfsz	??_setMotorPWM,f,c
  5109  0016DE  D7FC               	goto	u2365
  5110  0016E0  5035               	movf	??_setMotorPWM+1,w,c
  5111  0016E2  0AFF               	xorlw	255
  5112  0016E4  148A               	andwf	3978,w,c	;volatile
  5113  0016E6  6E8A               	movwf	3978,c	;volatile
  5114  0016E8                     l143:
  5115                           
  5116                           ;dc_motor.c: 40: }
  5117                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  5118  0016E8  EE20 F002          	lfsr	2,2
  5119  0016EC  5032               	movf	setMotorPWM@m,w,c
  5120  0016EE  26D9               	addwf	fsr2l,f,c
  5121  0016F0  5033               	movf	setMotorPWM@m+1,w,c
  5122  0016F2  22DA               	addwfc	fsr2h,f,c
  5123  0016F4  CFDE F034          	movff	postinc2,??_setMotorPWM
  5124  0016F8  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  5125  0016FC  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  5126  001700  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5127  001704  0100               	movlb	0	; () banked
  5128  001706  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  5129  001708  46E8               	rlncf	wreg,f,c
  5130  00170A  0BFC               	andlw	252
  5131  00170C  6EDF               	movwf	indf2,c
  5132                           
  5133                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  5134  00170E  EE20 F004          	lfsr	2,4
  5135  001712  5032               	movf	setMotorPWM@m,w,c
  5136  001714  26D9               	addwf	fsr2l,f,c
  5137  001716  5033               	movf	setMotorPWM@m+1,w,c
  5138  001718  22DA               	addwfc	fsr2h,f,c
  5139  00171A  CFDE F034          	movff	postinc2,??_setMotorPWM
  5140  00171E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  5141  001722  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  5142  001726  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5143  00172A  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5144  00172E  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5145  001732  0E06               	movlw	6
  5146  001734  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  5147  001736                     u2375:
  5148  001736  3437               	rlcf	??_setMotorPWM+3,w,c
  5149  001738  3237               	rrcf	??_setMotorPWM+3,f,c
  5150  00173A  3236               	rrcf	??_setMotorPWM+2,f,c
  5151  00173C  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  5152  00173E  D7FB               	goto	u2375
  5153  001740  5036               	movf	??_setMotorPWM+2,w,c
  5154  001742  6EDF               	movwf	indf2,c
  5155                           
  5156                           ; BSR set to: 0
  5157  001744  0012               	return		;funcret
  5158  001746                     __end_of_setMotorPWM:
  5159                           	opt stack 0
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           indf1	equ	0xFE7
  5170                           fsr1h	equ	0xFE2
  5171                           fsr1l	equ	0xFE1
  5172                           indf2	equ	0xFDF
  5173                           postinc2	equ	0xFDE
  5174                           postdec2	equ	0xFDD
  5175                           fsr2h	equ	0xFDA
  5176                           fsr2l	equ	0xFD9
  5177                           status	equ	0xFD8
  5178                           
  5179 ;; *************** function ___wmul *****************
  5180 ;; Defined at:
  5181 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  multiplier      2   35[COMRAM] unsigned int 
  5184 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  product         2   39[COMRAM] unsigned int 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  2   35[COMRAM] unsigned int 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0, prodl, prodh
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5196 ;;      Params:         4       0       0       0
  5197 ;;      Locals:         2       0       0       0
  5198 ;;      Temps:          0       0       0       0
  5199 ;;      Totals:         6       0       0       0
  5200 ;;Total ram usage:        6 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    3
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_setMotorPWM
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text16
  5211  001FC4                     __ptext16:
  5212                           	opt stack 0
  5213  001FC4                     ___wmul:
  5214                           	opt stack 25
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;incstack = 0
  5218  001FC4  5024               	movf	___wmul@multiplier,w,c
  5219  001FC6  0226               	mulwf	___wmul@multiplicand,c
  5220  001FC8  CFF3 F028          	movff	prodl,___wmul@product
  5221  001FCC  CFF4 F029          	movff	prodh,___wmul@product+1
  5222  001FD0  5024               	movf	___wmul@multiplier,w,c
  5223  001FD2  0227               	mulwf	___wmul@multiplicand+1,c
  5224  001FD4  50F3               	movf	prodl,w,c
  5225  001FD6  2629               	addwf	___wmul@product+1,f,c
  5226  001FD8  5025               	movf	___wmul@multiplier+1,w,c
  5227  001FDA  0226               	mulwf	___wmul@multiplicand,c
  5228  001FDC  50F3               	movf	prodl,w,c
  5229  001FDE  2629               	addwf	___wmul@product+1,f,c
  5230  001FE0  C028  F024         	movff	___wmul@product,?___wmul
  5231  001FE4  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5232  001FE8  0012               	return	
  5233  001FEA                     __end_of___wmul:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           indf1	equ	0xFE7
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function ___awdiv *****************
  5255 ;; Defined at:
  5256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  dividend        2   41[COMRAM] int 
  5259 ;;  divisor         2   43[COMRAM] int 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  quotient        2   47[COMRAM] int 
  5262 ;;  sign            1   46[COMRAM] unsigned char 
  5263 ;;  counter         1   45[COMRAM] unsigned char 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  2   41[COMRAM] int 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5273 ;;      Params:         4       0       0       0
  5274 ;;      Locals:         4       0       0       0
  5275 ;;      Temps:          0       0       0       0
  5276 ;;      Totals:         8       0       0       0
  5277 ;;Total ram usage:        8 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    3
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_setMotorPWM
  5284 ;;		_ScanWithRange
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text17
  5289  001A9A                     __ptext17:
  5290                           	opt stack 0
  5291  001A9A                     ___awdiv:
  5292                           	opt stack 25
  5293                           
  5294                           ;incstack = 0
  5295  001A9A  0E00               	movlw	0
  5296  001A9C  6E2F               	movwf	___awdiv@sign,c
  5297  001A9E  AE2D               	btfss	___awdiv@divisor+1,7,c
  5298  001AA0  D006               	goto	l3082
  5299  001AA2  6C2C               	negf	___awdiv@divisor,c
  5300  001AA4  1E2D               	comf	___awdiv@divisor+1,f,c
  5301  001AA6  B0D8               	btfsc	status,0,c
  5302  001AA8  2A2D               	incf	___awdiv@divisor+1,f,c
  5303  001AAA  0E01               	movlw	1
  5304  001AAC  6E2F               	movwf	___awdiv@sign,c
  5305  001AAE                     l3082:
  5306  001AAE  AE2B               	btfss	___awdiv@dividend+1,7,c
  5307  001AB0  D006               	goto	l3088
  5308  001AB2  6C2A               	negf	___awdiv@dividend,c
  5309  001AB4  1E2B               	comf	___awdiv@dividend+1,f,c
  5310  001AB6  B0D8               	btfsc	status,0,c
  5311  001AB8  2A2B               	incf	___awdiv@dividend+1,f,c
  5312  001ABA  0E01               	movlw	1
  5313  001ABC  1A2F               	xorwf	___awdiv@sign,f,c
  5314  001ABE                     l3088:
  5315  001ABE  0E00               	movlw	0
  5316  001AC0  6E31               	movwf	___awdiv@quotient+1,c
  5317  001AC2  0E00               	movlw	0
  5318  001AC4  6E30               	movwf	___awdiv@quotient,c
  5319  001AC6  502C               	movf	___awdiv@divisor,w,c
  5320  001AC8  102D               	iorwf	___awdiv@divisor+1,w,c
  5321  001ACA  B4D8               	btfsc	status,2,c
  5322  001ACC  D01C               	goto	l3110
  5323  001ACE  0E01               	movlw	1
  5324  001AD0  6E2E               	movwf	___awdiv@counter,c
  5325  001AD2  D004               	goto	l3096
  5326  001AD4                     l3094:
  5327  001AD4  90D8               	bcf	status,0,c
  5328  001AD6  362C               	rlcf	___awdiv@divisor,f,c
  5329  001AD8  362D               	rlcf	___awdiv@divisor+1,f,c
  5330  001ADA  2A2E               	incf	___awdiv@counter,f,c
  5331  001ADC                     l3096:
  5332  001ADC  AE2D               	btfss	___awdiv@divisor+1,7,c
  5333  001ADE  D7FA               	goto	l3094
  5334  001AE0                     l3098:
  5335  001AE0  90D8               	bcf	status,0,c
  5336  001AE2  3630               	rlcf	___awdiv@quotient,f,c
  5337  001AE4  3631               	rlcf	___awdiv@quotient+1,f,c
  5338  001AE6  502C               	movf	___awdiv@divisor,w,c
  5339  001AE8  5C2A               	subwf	___awdiv@dividend,w,c
  5340  001AEA  502D               	movf	___awdiv@divisor+1,w,c
  5341  001AEC  582B               	subwfb	___awdiv@dividend+1,w,c
  5342  001AEE  A0D8               	btfss	status,0,c
  5343  001AF0  D005               	goto	l3106
  5344  001AF2  502C               	movf	___awdiv@divisor,w,c
  5345  001AF4  5E2A               	subwf	___awdiv@dividend,f,c
  5346  001AF6  502D               	movf	___awdiv@divisor+1,w,c
  5347  001AF8  5A2B               	subwfb	___awdiv@dividend+1,f,c
  5348  001AFA  8030               	bsf	___awdiv@quotient,0,c
  5349  001AFC                     l3106:
  5350  001AFC  90D8               	bcf	status,0,c
  5351  001AFE  322D               	rrcf	___awdiv@divisor+1,f,c
  5352  001B00  322C               	rrcf	___awdiv@divisor,f,c
  5353  001B02  2E2E               	decfsz	___awdiv@counter,f,c
  5354  001B04  D7ED               	goto	l3098
  5355  001B06                     l3110:
  5356  001B06  502F               	movf	___awdiv@sign,w,c
  5357  001B08  B4D8               	btfsc	status,2,c
  5358  001B0A  D004               	goto	l3114
  5359  001B0C  6C30               	negf	___awdiv@quotient,c
  5360  001B0E  1E31               	comf	___awdiv@quotient+1,f,c
  5361  001B10  B0D8               	btfsc	status,0,c
  5362  001B12  2A31               	incf	___awdiv@quotient+1,f,c
  5363  001B14                     l3114:
  5364  001B14  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5365  001B18  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5366  001B1C  0012               	return	
  5367  001B1E                     __end_of___awdiv:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           indf1	equ	0xFE7
  5379                           fsr1h	equ	0xFE2
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _sprintf *****************
  5389 ;; Defined at:
  5390 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5393 ;;		 -> ScanWithRange@buf(40), ScanIR@buf(40), 
  5394 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5395 ;;		 -> STR_13(12), STR_11(12), STR_9(12), STR_7(12), 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  tmpval          4    0        struct .
  5398 ;;  cp              3    0        PTR const unsigned char 
  5399 ;;  val             2    4[BANK0 ] unsigned int 
  5400 ;;  ap              2    0[BANK0 ] PTR void [1]
  5401 ;;		 -> ?_sprintf(2), 
  5402 ;;  len             2    0        unsigned int 
  5403 ;;  c               1    6[BANK0 ] char 
  5404 ;;  prec            1    3[BANK0 ] char 
  5405 ;;  flag            1    2[BANK0 ] unsigned char 
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  2   47[COMRAM] int 
  5408 ;; Registers used:
  5409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5415 ;;      Params:         8       0       0       0
  5416 ;;      Locals:         0       7       0       0
  5417 ;;      Temps:          1       0       0       0
  5418 ;;      Totals:         9       7       0       0
  5419 ;;Total ram usage:       16 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    4
  5422 ;; This function calls:
  5423 ;;		___lwdiv
  5424 ;;		___lwmod
  5425 ;; This function is called by:
  5426 ;;		_ScanIR
  5427 ;;		_ScanWithRange
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text18
  5432  00149C                     __ptext18:
  5433                           	opt stack 0
  5434  00149C                     _sprintf:
  5435                           	opt stack 25
  5436                           
  5437                           ;doprnt.c: 494: va_list ap;
  5438                           ;doprnt.c: 499: signed char c;
  5439                           ;doprnt.c: 506: signed char prec;
  5440                           ;doprnt.c: 508: unsigned char flag;
  5441                           ;doprnt.c: 523: union {
  5442                           ;doprnt.c: 524: unsigned long vd;
  5443                           ;doprnt.c: 525: double integ;
  5444                           ;doprnt.c: 526: } tmpval;
  5445                           ;doprnt.c: 528: unsigned int val;
  5446                           ;doprnt.c: 529: unsigned len;
  5447                           ;doprnt.c: 530: const char * cp;
  5448                           ;doprnt.c: 533: *ap = __va_start();
  5449                           
  5450                           ;incstack = 0
  5451  00149C  0E34               	movlw	low (?_sprintf+4)
  5452  00149E  0100               	movlb	0	; () banked
  5453  0014A0  6F60               	movwf	sprintf@ap& (0+255),b
  5454  0014A2  0E00               	movlw	high (?_sprintf+4)
  5455  0014A4  0100               	movlb	0	; () banked
  5456  0014A6  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  5457                           
  5458                           ;doprnt.c: 536: while(c = *f++) {
  5459  0014A8  D09D               	goto	l2358
  5460  0014AA                     l2306:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 538: if(c != '%')
  5464  0014AA  0E25               	movlw	37
  5465  0014AC  0100               	movlb	0	; () banked
  5466  0014AE  1966               	xorwf	sprintf@c& (0+255),w,b
  5467  0014B0  B4D8               	btfsc	status,2,c
  5468  0014B2  D009               	goto	l2312
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 540: {
  5472                           ;doprnt.c: 541: ((*sp++ = (c)));
  5473  0014B4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5474  0014B8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5475  0014BC  C066  FFDF         	movff	sprintf@c,indf2
  5476                           
  5477                           ; BSR set to: 0
  5478  0014C0  4A30               	infsnz	sprintf@sp,f,c
  5479  0014C2  2A31               	incf	sprintf@sp+1,f,c
  5480                           
  5481                           ;doprnt.c: 542: continue;
  5482  0014C4  D08F               	goto	l2358
  5483  0014C6                     l2312:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 543: }
  5487                           ;doprnt.c: 548: flag = 0;
  5488  0014C6  0E00               	movlw	0
  5489  0014C8  0100               	movlb	0	; () banked
  5490  0014CA  6F62               	movwf	sprintf@flag& (0+255),b
  5491                           
  5492                           ; BSR set to: 0
  5493                           
  5494                           ; BSR set to: 0
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;doprnt.c: 822: }
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;doprnt.c: 813: continue;
  5501                           
  5502                           ;doprnt.c: 802: default:
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 698: case 'i':
  5506                           ;doprnt.c: 699: break;
  5507                           
  5508                           ; BSR set to: 0
  5509                           
  5510                           ;doprnt.c: 697: case 'd':
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;doprnt.c: 638: goto alldone;
  5514                           
  5515                           ;doprnt.c: 637: case 0:
  5516                           
  5517                           ;doprnt.c: 635: switch(c = *f++) {
  5518  0014CC  C032  FFF6         	movff	sprintf@f,tblptrl
  5519  0014D0  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5520  0014D4  4A32               	infsnz	sprintf@f,f,c
  5521  0014D6  2A33               	incf	sprintf@f+1,f,c
  5522  0014D8                     	if	0	;tblptru may be non-zero
  5523  0014D8                     	endif
  5524  0014D8                     	if	0	;tblptru may be non-zero
  5525  0014D8                     	endif
  5526  0014D8  0008               	tblrd		*
  5527  0014DA  CFF5 F066          	movff	tablat,sprintf@c
  5528  0014DE  0100               	movlb	0	; () banked
  5529  0014E0  5166               	movf	sprintf@c& (0+255),w,b
  5530                           
  5531                           ; Switch size 1, requested type "space"
  5532                           ; Number of cases is 3, Range of values is 0 to 105
  5533                           ; switch strategies available:
  5534                           ; Name         Instructions Cycles
  5535                           ; simple_byte           10     6 (average)
  5536                           ;	Chosen strategy is simple_byte
  5537  0014E2  0A00               	xorlw	0	; case 0
  5538  0014E4  B4D8               	btfsc	status,2,c
  5539  0014E6  D08B               	goto	l2360
  5540  0014E8  0A64               	xorlw	100	; case 100
  5541  0014EA  B4D8               	btfsc	status,2,c
  5542  0014EC  D003               	goto	l2318
  5543  0014EE  0A0D               	xorlw	13	; case 105
  5544  0014F0  A4D8               	btfss	status,2,c
  5545  0014F2  D078               	goto	l2358
  5546  0014F4                     l2318:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;doprnt.c: 1253: {
  5550                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5551  0014F4  C060  FFD9         	movff	sprintf@ap,fsr2l
  5552  0014F8  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  5553  0014FC  CFDE F064          	movff	postinc2,sprintf@val
  5554  001500  CFDD F065          	movff	postdec2,sprintf@val+1
  5555                           
  5556                           ; BSR set to: 0
  5557  001504  0E02               	movlw	2
  5558  001506  0100               	movlb	0	; () banked
  5559  001508  2760               	addwf	sprintf@ap& (0+255),f,b
  5560  00150A  0E00               	movlw	0
  5561  00150C  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 1261: if((int)val < 0) {
  5565  00150E  0100               	movlb	0	; () banked
  5566  001510  AF65               	btfss	(sprintf@val+1)& (0+255),7,b
  5567  001512  D008               	goto	l2328
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 1262: flag |= 0x03;
  5571  001514  0E03               	movlw	3
  5572  001516  0100               	movlb	0	; () banked
  5573  001518  1362               	iorwf	sprintf@flag& (0+255),f,b
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;doprnt.c: 1263: val = -val;
  5577  00151A  0100               	movlb	0	; () banked
  5578  00151C  6D64               	negf	sprintf@val& (0+255),b
  5579  00151E  1F65               	comf	(sprintf@val+1)& (0+255),f,b
  5580  001520  B0D8               	btfsc	status,0,c
  5581  001522  2B65               	incf	(sprintf@val+1)& (0+255),f,b
  5582  001524                     l2328:
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;doprnt.c: 1264: }
  5586                           ;doprnt.c: 1266: }
  5587                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5588  001524  0E01               	movlw	1
  5589  001526  0100               	movlb	0	; () banked
  5590  001528  6F66               	movwf	sprintf@c& (0+255),b
  5591  00152A                     l2330:
  5592                           
  5593                           ; BSR set to: 0
  5594  00152A  0E05               	movlw	5
  5595  00152C  0100               	movlb	0	; () banked
  5596  00152E  1966               	xorwf	sprintf@c& (0+255),w,b
  5597  001530  B4D8               	btfsc	status,2,c
  5598  001532  D016               	goto	l2342
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;doprnt.c: 1306: if(val < dpowers[c])
  5602                           
  5603                           ; BSR set to: 0
  5604                           
  5605                           ; BSR set to: 0
  5606  001534  0100               	movlb	0	; () banked
  5607  001536  5166               	movf	sprintf@c& (0+255),w,b
  5608  001538  0D02               	mullw	2
  5609  00153A  0E01               	movlw	low _dpowers
  5610  00153C  24F3               	addwf	prodl,w,c
  5611  00153E  6EF6               	movwf	tblptrl,c
  5612  001540  0E03               	movlw	high _dpowers
  5613  001542  20F4               	addwfc	prodh,w,c
  5614  001544  6EF7               	movwf	tblptrh,c
  5615  001546                     	if	0	;There are less than 3 active tblptr bytes
  5616  001546                     	endif
  5617  001546  0009               	tblrd		*+
  5618  001548  50F5               	movf	tablat,w,c
  5619  00154A  0100               	movlb	0	; () banked
  5620  00154C  5D64               	subwf	sprintf@val& (0+255),w,b
  5621  00154E  0009               	tblrd		*+
  5622  001550  50F5               	movf	tablat,w,c
  5623  001552  0100               	movlb	0	; () banked
  5624  001554  5965               	subwfb	(sprintf@val+1)& (0+255),w,b
  5625  001556  A0D8               	btfss	status,0,c
  5626  001558  D003               	goto	l2342
  5627                           
  5628                           ; BSR set to: 0
  5629                           
  5630                           ; BSR set to: 0
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 1307: break;
  5634  00155A  0100               	movlb	0	; () banked
  5635  00155C  2B66               	incf	sprintf@c& (0+255),f,b
  5636  00155E  D7E5               	goto	l2330
  5637  001560                     l2342:
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;doprnt.c: 1422: {
  5641                           ;doprnt.c: 1438: if(flag & 0x03)
  5642  001560  C062  F038         	movff	sprintf@flag,??_sprintf
  5643  001564  0E03               	movlw	3
  5644  001566  1638               	andwf	??_sprintf,f,c
  5645  001568  B4D8               	btfsc	status,2,c
  5646  00156A  D008               	goto	l2348
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5650  00156C  C030  FFD9         	movff	sprintf@sp,fsr2l
  5651  001570  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5652  001574  0E2D               	movlw	45
  5653  001576  6EDF               	movwf	indf2,c
  5654                           
  5655                           ; BSR set to: 0
  5656  001578  4A30               	infsnz	sprintf@sp,f,c
  5657  00157A  2A31               	incf	sprintf@sp+1,f,c
  5658  00157C                     l2348:
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;doprnt.c: 1469: }
  5662                           ;doprnt.c: 1472: prec = c;
  5663  00157C  C066  F063         	movff	sprintf@c,sprintf@prec
  5664                           
  5665                           ;doprnt.c: 1474: while(prec--) {
  5666  001580  D02B               	goto	l2356
  5667  001582                     l2350:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;doprnt.c: 1478: {
  5671                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5672  001582  0100               	movlb	0	; () banked
  5673  001584  5163               	movf	sprintf@prec& (0+255),w,b
  5674  001586  0D02               	mullw	2
  5675  001588  0E01               	movlw	low _dpowers
  5676  00158A  24F3               	addwf	prodl,w,c
  5677  00158C  6EF6               	movwf	tblptrl,c
  5678  00158E  0E03               	movlw	high _dpowers
  5679  001590  20F4               	addwfc	prodh,w,c
  5680  001592  6EF7               	movwf	tblptrh,c
  5681  001594                     	if	0	;There are less than 3 active tblptr bytes
  5682  001594                     	endif
  5683  001594  0009               	tblrd		*+
  5684  001596  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5685  00159A  000A               	tblrd		*-
  5686  00159C  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5687  0015A0  C064  F024         	movff	sprintf@val,___lwdiv@dividend
  5688  0015A4  C065  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5689  0015A8  EC68  F00E         	call	___lwdiv	;wreg free
  5690  0015AC  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5691  0015B0  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5692  0015B4  0E00               	movlw	0
  5693  0015B6  6E2E               	movwf	___lwmod@divisor+1,c
  5694  0015B8  0E0A               	movlw	10
  5695  0015BA  6E2D               	movwf	___lwmod@divisor,c
  5696  0015BC  ECDF  F00E         	call	___lwmod	;wreg free
  5697  0015C0  502B               	movf	?___lwmod,w,c
  5698  0015C2  0F30               	addlw	48
  5699  0015C4  0100               	movlb	0	; () banked
  5700  0015C6  6F66               	movwf	sprintf@c& (0+255),b
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;doprnt.c: 1523: }
  5704                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5705  0015C8  C030  FFD9         	movff	sprintf@sp,fsr2l
  5706  0015CC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5707  0015D0  C066  FFDF         	movff	sprintf@c,indf2
  5708                           
  5709                           ; BSR set to: 0
  5710  0015D4  4A30               	infsnz	sprintf@sp,f,c
  5711  0015D6  2A31               	incf	sprintf@sp+1,f,c
  5712  0015D8                     l2356:
  5713                           
  5714                           ; BSR set to: 0
  5715  0015D8  0100               	movlb	0	; () banked
  5716  0015DA  0763               	decf	sprintf@prec& (0+255),f,b
  5717  0015DC  0100               	movlb	0	; () banked
  5718  0015DE  2963               	incf	sprintf@prec& (0+255),w,b
  5719  0015E0  A4D8               	btfss	status,2,c
  5720  0015E2  D7CF               	goto	l2350
  5721  0015E4                     l2358:
  5722                           
  5723                           ; BSR set to: 0
  5724  0015E4  C032  FFF6         	movff	sprintf@f,tblptrl
  5725  0015E8  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5726  0015EC  4A32               	infsnz	sprintf@f,f,c
  5727  0015EE  2A33               	incf	sprintf@f+1,f,c
  5728  0015F0                     	if	0	;tblptru may be non-zero
  5729  0015F0                     	endif
  5730  0015F0                     	if	0	;tblptru may be non-zero
  5731  0015F0                     	endif
  5732  0015F0  0008               	tblrd		*
  5733  0015F2  CFF5 F066          	movff	tablat,sprintf@c
  5734  0015F6  0100               	movlb	0	; () banked
  5735  0015F8  5166               	movf	sprintf@c& (0+255),w,b
  5736  0015FA  A4D8               	btfss	status,2,c
  5737  0015FC  D756               	goto	l2306
  5738  0015FE                     l2360:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;doprnt.c: 1538: *sp = 0;
  5742  0015FE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5743  001602  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5744  001606  0E00               	movlw	0
  5745  001608  6EDF               	movwf	indf2,c
  5746  00160A  0012               	return	
  5747  00160C                     __end_of_sprintf:
  5748                           	opt stack 0
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           intcon	equ	0xFF2
  5756                           postinc0	equ	0xFEE
  5757                           wreg	equ	0xFE8
  5758                           indf1	equ	0xFE7
  5759                           fsr1h	equ	0xFE2
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function ___lwmod *****************
  5769 ;; Defined at:
  5770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  dividend        2   42[COMRAM] unsigned int 
  5773 ;;  divisor         2   44[COMRAM] unsigned int 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;  counter         1   46[COMRAM] unsigned char 
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  2   42[COMRAM] unsigned int 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5785 ;;      Params:         4       0       0       0
  5786 ;;      Locals:         1       0       0       0
  5787 ;;      Temps:          0       0       0       0
  5788 ;;      Totals:         5       0       0       0
  5789 ;;Total ram usage:        5 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    3
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_sprintf
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text19
  5800  001DBE                     __ptext19:
  5801                           	opt stack 0
  5802  001DBE                     ___lwmod:
  5803                           	opt stack 25
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;incstack = 0
  5807  001DBE  502D               	movf	___lwmod@divisor,w,c
  5808  001DC0  102E               	iorwf	___lwmod@divisor+1,w,c
  5809  001DC2  B4D8               	btfsc	status,2,c
  5810  001DC4  D018               	goto	l847
  5811  001DC6  0E01               	movlw	1
  5812  001DC8  6E2F               	movwf	___lwmod@counter,c
  5813  001DCA  D004               	goto	l2214
  5814  001DCC                     l2212:
  5815  001DCC  90D8               	bcf	status,0,c
  5816  001DCE  362D               	rlcf	___lwmod@divisor,f,c
  5817  001DD0  362E               	rlcf	___lwmod@divisor+1,f,c
  5818  001DD2  2A2F               	incf	___lwmod@counter,f,c
  5819  001DD4                     l2214:
  5820  001DD4  AE2E               	btfss	___lwmod@divisor+1,7,c
  5821  001DD6  D7FA               	goto	l2212
  5822  001DD8                     l2216:
  5823  001DD8  502D               	movf	___lwmod@divisor,w,c
  5824  001DDA  5C2B               	subwf	___lwmod@dividend,w,c
  5825  001DDC  502E               	movf	___lwmod@divisor+1,w,c
  5826  001DDE  582C               	subwfb	___lwmod@dividend+1,w,c
  5827  001DE0  A0D8               	btfss	status,0,c
  5828  001DE2  D004               	goto	l2220
  5829  001DE4  502D               	movf	___lwmod@divisor,w,c
  5830  001DE6  5E2B               	subwf	___lwmod@dividend,f,c
  5831  001DE8  502E               	movf	___lwmod@divisor+1,w,c
  5832  001DEA  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5833  001DEC                     l2220:
  5834  001DEC  90D8               	bcf	status,0,c
  5835  001DEE  322E               	rrcf	___lwmod@divisor+1,f,c
  5836  001DF0  322D               	rrcf	___lwmod@divisor,f,c
  5837  001DF2  2E2F               	decfsz	___lwmod@counter,f,c
  5838  001DF4  D7F1               	goto	l2216
  5839  001DF6                     l847:
  5840  001DF6  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5841  001DFA  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5842  001DFE  0012               	return		;funcret
  5843  001E00                     __end_of___lwmod:
  5844                           	opt stack 0
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           indf1	equ	0xFE7
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function ___lwdiv *****************
  5865 ;; Defined at:
  5866 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  dividend        2   35[COMRAM] unsigned int 
  5869 ;;  divisor         2   37[COMRAM] unsigned int 
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;  quotient        2   39[COMRAM] unsigned int 
  5872 ;;  counter         1   41[COMRAM] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  2   35[COMRAM] unsigned int 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5882 ;;      Params:         4       0       0       0
  5883 ;;      Locals:         3       0       0       0
  5884 ;;      Temps:          0       0       0       0
  5885 ;;      Totals:         7       0       0       0
  5886 ;;Total ram usage:        7 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    3
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_sprintf
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text20
  5897  001CD0                     __ptext20:
  5898                           	opt stack 0
  5899  001CD0                     ___lwdiv:
  5900                           	opt stack 25
  5901                           
  5902                           ;incstack = 0
  5903  001CD0  0E00               	movlw	0
  5904  001CD2  6E29               	movwf	___lwdiv@quotient+1,c
  5905  001CD4  0E00               	movlw	0
  5906  001CD6  6E28               	movwf	___lwdiv@quotient,c
  5907  001CD8  5026               	movf	___lwdiv@divisor,w,c
  5908  001CDA  1027               	iorwf	___lwdiv@divisor+1,w,c
  5909  001CDC  B4D8               	btfsc	status,2,c
  5910  001CDE  D01C               	goto	l837
  5911  001CE0  0E01               	movlw	1
  5912  001CE2  6E2A               	movwf	___lwdiv@counter,c
  5913  001CE4  D004               	goto	l2194
  5914  001CE6                     l2192:
  5915  001CE6  90D8               	bcf	status,0,c
  5916  001CE8  3626               	rlcf	___lwdiv@divisor,f,c
  5917  001CEA  3627               	rlcf	___lwdiv@divisor+1,f,c
  5918  001CEC  2A2A               	incf	___lwdiv@counter,f,c
  5919  001CEE                     l2194:
  5920  001CEE  AE27               	btfss	___lwdiv@divisor+1,7,c
  5921  001CF0  D7FA               	goto	l2192
  5922  001CF2                     l2196:
  5923  001CF2  90D8               	bcf	status,0,c
  5924  001CF4  3628               	rlcf	___lwdiv@quotient,f,c
  5925  001CF6  3629               	rlcf	___lwdiv@quotient+1,f,c
  5926  001CF8  5026               	movf	___lwdiv@divisor,w,c
  5927  001CFA  5C24               	subwf	___lwdiv@dividend,w,c
  5928  001CFC  5027               	movf	___lwdiv@divisor+1,w,c
  5929  001CFE  5825               	subwfb	___lwdiv@dividend+1,w,c
  5930  001D00  A0D8               	btfss	status,0,c
  5931  001D02  D005               	goto	l2204
  5932  001D04  5026               	movf	___lwdiv@divisor,w,c
  5933  001D06  5E24               	subwf	___lwdiv@dividend,f,c
  5934  001D08  5027               	movf	___lwdiv@divisor+1,w,c
  5935  001D0A  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5936  001D0C  8028               	bsf	___lwdiv@quotient,0,c
  5937  001D0E                     l2204:
  5938  001D0E  90D8               	bcf	status,0,c
  5939  001D10  3227               	rrcf	___lwdiv@divisor+1,f,c
  5940  001D12  3226               	rrcf	___lwdiv@divisor,f,c
  5941  001D14  2E2A               	decfsz	___lwdiv@counter,f,c
  5942  001D16  D7ED               	goto	l2196
  5943  001D18                     l837:
  5944  001D18  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5945  001D1C  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5946  001D20  0012               	return		;funcret
  5947  001D22                     __end_of___lwdiv:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           postinc0	equ	0xFEE
  5957                           wreg	equ	0xFE8
  5958                           indf1	equ	0xFE7
  5959                           fsr1h	equ	0xFE2
  5960                           fsr1l	equ	0xFE1
  5961                           indf2	equ	0xFDF
  5962                           postinc2	equ	0xFDE
  5963                           postdec2	equ	0xFDD
  5964                           fsr2h	equ	0xFDA
  5965                           fsr2l	equ	0xFD9
  5966                           status	equ	0xFD8
  5967                           
  5968 ;; *************** function _grabRightIR *****************
  5969 ;; Defined at:
  5970 ;;		line 74 in file "IR_Reading.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;		None
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5975 ;;  i               1   42[COMRAM] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  2   35[COMRAM] unsigned int 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0
  5980 ;; Tracked objects:
  5981 ;;		On entry : 0/0
  5982 ;;		On exit  : 0/0
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5985 ;;      Params:         2       0       0       0
  5986 ;;      Locals:         3       0       0       0
  5987 ;;      Temps:          3       0       0       0
  5988 ;;      Totals:         8       0       0       0
  5989 ;;Total ram usage:        8 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    3
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_ScanIR
  5996 ;;		_ScanWithRange
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text21
  6001  001B1E                     __ptext21:
  6002                           	opt stack 0
  6003  001B1E                     _grabRightIR:
  6004                           	opt stack 26
  6005                           
  6006                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6007                           
  6008                           ;incstack = 0
  6009  001B1E  0E00               	movlw	0
  6010  001B20  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6011  001B22  0E00               	movlw	0
  6012  001B24  6E29               	movwf	grabRightIR@IR_signal,c
  6013                           
  6014                           ;IR_Reading.c: 77: unsigned char i=0;
  6015  001B26  0E00               	movlw	0
  6016  001B28  6E2B               	movwf	grabRightIR@i,c
  6017                           
  6018                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6019  001B2A  0E00               	movlw	0
  6020  001B2C  6E2B               	movwf	grabRightIR@i,c
  6021  001B2E                     l2290:
  6022  001B2E  0E03               	movlw	3
  6023  001B30  642B               	cpfsgt	grabRightIR@i,c
  6024  001B32  D001               	goto	l2294
  6025  001B34  D01E               	goto	l2300
  6026  001B36                     l2294:
  6027                           
  6028                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6029  001B36  5069               	movf	3945,w,c	;volatile
  6030  001B38  6E26               	movwf	??_grabRightIR& (0+255),c
  6031  001B3A  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6032  001B3C  0E07               	movlw	7
  6033  001B3E                     u1595:
  6034  001B3E  90D8               	bcf	status,0,c
  6035  001B40  3626               	rlcf	??_grabRightIR,f,c
  6036  001B42  3627               	rlcf	??_grabRightIR+1,f,c
  6037  001B44  2EE8               	decfsz	wreg,f,c
  6038  001B46  D7FB               	goto	u1595
  6039  001B48  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6040  001B4C  90D8               	bcf	status,0,c
  6041  001B4E  3228               	rrcf	??_grabRightIR+2,f,c
  6042  001B50  5028               	movf	??_grabRightIR+2,w,c
  6043  001B52  1226               	iorwf	??_grabRightIR,f,c
  6044  001B54  0E00               	movlw	0
  6045  001B56  1227               	iorwf	??_grabRightIR+1,f,c
  6046  001B58  5026               	movf	??_grabRightIR,w,c
  6047  001B5A  2629               	addwf	grabRightIR@IR_signal,f,c
  6048  001B5C  5027               	movf	??_grabRightIR+1,w,c
  6049  001B5E  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6050                           
  6051                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6052  001B60  0E82               	movlw	130
  6053  001B62  6E26               	movwf	??_grabRightIR& (0+255),c
  6054  001B64  0EDE               	movlw	222
  6055  001B66                     u3147:
  6056  001B66  2EE8               	decfsz	wreg,f,c
  6057  001B68  D7FE               	goto	u3147
  6058  001B6A  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6059  001B6C  D7FC               	goto	u3147
  6060  001B6E  2A2B               	incf	grabRightIR@i,f,c
  6061  001B70  D7DE               	goto	l2290
  6062  001B72                     l2300:
  6063                           
  6064                           ;IR_Reading.c: 83: }
  6065                           ;IR_Reading.c: 85: return IR_signal>>2;
  6066  001B72  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6067  001B76  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6068  001B7A  90D8               	bcf	status,0,c
  6069  001B7C  3227               	rrcf	??_grabRightIR+1,f,c
  6070  001B7E  3226               	rrcf	??_grabRightIR,f,c
  6071  001B80  90D8               	bcf	status,0,c
  6072  001B82  3227               	rrcf	??_grabRightIR+1,f,c
  6073  001B84  3226               	rrcf	??_grabRightIR,f,c
  6074  001B86  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6075  001B8A  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6076  001B8E  0012               	return	
  6077  001B90                     __end_of_grabRightIR:
  6078                           	opt stack 0
  6079                           tblptru	equ	0xFF8
  6080                           tblptrh	equ	0xFF7
  6081                           tblptrl	equ	0xFF6
  6082                           tablat	equ	0xFF5
  6083                           prodh	equ	0xFF4
  6084                           prodl	equ	0xFF3
  6085                           intcon	equ	0xFF2
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           indf1	equ	0xFE7
  6089                           fsr1h	equ	0xFE2
  6090                           fsr1l	equ	0xFE1
  6091                           indf2	equ	0xFDF
  6092                           postinc2	equ	0xFDE
  6093                           postdec2	equ	0xFDD
  6094                           fsr2h	equ	0xFDA
  6095                           fsr2l	equ	0xFD9
  6096                           status	equ	0xFD8
  6097                           
  6098 ;; *************** function _grabLeftIR *****************
  6099 ;; Defined at:
  6100 ;;		line 90 in file "IR_Reading.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6105 ;;  i               1   42[COMRAM] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  2   35[COMRAM] unsigned int 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6115 ;;      Params:         2       0       0       0
  6116 ;;      Locals:         3       0       0       0
  6117 ;;      Temps:          3       0       0       0
  6118 ;;      Totals:         8       0       0       0
  6119 ;;Total ram usage:        8 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    3
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		_ScanIR
  6126 ;;		_ScanWithRange
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text22
  6131  001B90                     __ptext22:
  6132                           	opt stack 0
  6133  001B90                     _grabLeftIR:
  6134                           	opt stack 26
  6135                           
  6136                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6137                           
  6138                           ;incstack = 0
  6139  001B90  0E00               	movlw	0
  6140  001B92  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6141  001B94  0E00               	movlw	0
  6142  001B96  6E29               	movwf	grabLeftIR@IR_signal,c
  6143                           
  6144                           ;IR_Reading.c: 93: unsigned char i=0;
  6145  001B98  0E00               	movlw	0
  6146  001B9A  6E2B               	movwf	grabLeftIR@i,c
  6147                           
  6148                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6149  001B9C  0E00               	movlw	0
  6150  001B9E  6E2B               	movwf	grabLeftIR@i,c
  6151  001BA0                     l2274:
  6152  001BA0  0E03               	movlw	3
  6153  001BA2  642B               	cpfsgt	grabLeftIR@i,c
  6154  001BA4  D001               	goto	l2278
  6155  001BA6  D01E               	goto	l2284
  6156  001BA8                     l2278:
  6157                           
  6158                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6159  001BA8  5067               	movf	3943,w,c	;volatile
  6160  001BAA  6E26               	movwf	??_grabLeftIR& (0+255),c
  6161  001BAC  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6162  001BAE  0E07               	movlw	7
  6163  001BB0                     u1565:
  6164  001BB0  90D8               	bcf	status,0,c
  6165  001BB2  3626               	rlcf	??_grabLeftIR,f,c
  6166  001BB4  3627               	rlcf	??_grabLeftIR+1,f,c
  6167  001BB6  2EE8               	decfsz	wreg,f,c
  6168  001BB8  D7FB               	goto	u1565
  6169  001BBA  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6170  001BBE  90D8               	bcf	status,0,c
  6171  001BC0  3228               	rrcf	??_grabLeftIR+2,f,c
  6172  001BC2  5028               	movf	??_grabLeftIR+2,w,c
  6173  001BC4  1226               	iorwf	??_grabLeftIR,f,c
  6174  001BC6  0E00               	movlw	0
  6175  001BC8  1227               	iorwf	??_grabLeftIR+1,f,c
  6176  001BCA  5026               	movf	??_grabLeftIR,w,c
  6177  001BCC  2629               	addwf	grabLeftIR@IR_signal,f,c
  6178  001BCE  5027               	movf	??_grabLeftIR+1,w,c
  6179  001BD0  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6180                           
  6181                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6182  001BD2  0E82               	movlw	130
  6183  001BD4  6E26               	movwf	??_grabLeftIR& (0+255),c
  6184  001BD6  0EDE               	movlw	222
  6185  001BD8                     u3157:
  6186  001BD8  2EE8               	decfsz	wreg,f,c
  6187  001BDA  D7FE               	goto	u3157
  6188  001BDC  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6189  001BDE  D7FC               	goto	u3157
  6190  001BE0  2A2B               	incf	grabLeftIR@i,f,c
  6191  001BE2  D7DE               	goto	l2274
  6192  001BE4                     l2284:
  6193                           
  6194                           ;IR_Reading.c: 99: }
  6195                           ;IR_Reading.c: 101: return IR_signal>>2;
  6196  001BE4  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6197  001BE8  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6198  001BEC  90D8               	bcf	status,0,c
  6199  001BEE  3227               	rrcf	??_grabLeftIR+1,f,c
  6200  001BF0  3226               	rrcf	??_grabLeftIR,f,c
  6201  001BF2  90D8               	bcf	status,0,c
  6202  001BF4  3227               	rrcf	??_grabLeftIR+1,f,c
  6203  001BF6  3226               	rrcf	??_grabLeftIR,f,c
  6204  001BF8  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6205  001BFC  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6206  001C00  0012               	return	
  6207  001C02                     __end_of_grabLeftIR:
  6208                           	opt stack 0
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           prodh	equ	0xFF4
  6214                           prodl	equ	0xFF3
  6215                           intcon	equ	0xFF2
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           indf1	equ	0xFE7
  6219                           fsr1h	equ	0xFE2
  6220                           fsr1l	equ	0xFE1
  6221                           indf2	equ	0xFDF
  6222                           postinc2	equ	0xFDE
  6223                           postdec2	equ	0xFDD
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _delay_tenth_s *****************
  6229 ;; Defined at:
  6230 ;;		line 29 in file "Movement.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  tenth_second    1    wreg     unsigned char 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  tenth_second    1   36[COMRAM] unsigned char 
  6235 ;;  i               2   37[COMRAM] unsigned int 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;		None               void
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6245 ;;      Params:         0       0       0       0
  6246 ;;      Locals:         3       0       0       0
  6247 ;;      Temps:          1       0       0       0
  6248 ;;      Totals:         4       0       0       0
  6249 ;;Total ram usage:        4 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    3
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_main
  6256 ;;		_ScanIR
  6257 ;;		_ScanWithRange
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text23
  6262  001E72                     __ptext23:
  6263                           	opt stack 0
  6264  001E72                     _delay_tenth_s:
  6265                           	opt stack 27
  6266                           
  6267                           ;incstack = 0
  6268                           ;delay_tenth_s@tenth_seconds stored from wreg
  6269  001E72  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  6270                           
  6271                           ;Movement.c: 30: unsigned int i=0;
  6272  001E74  0E00               	movlw	0
  6273  001E76  6E27               	movwf	delay_tenth_s@i+1,c
  6274  001E78  0E00               	movlw	0
  6275  001E7A  6E26               	movwf	delay_tenth_s@i,c
  6276                           
  6277                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  6278  001E7C  0E00               	movlw	0
  6279  001E7E  6E27               	movwf	delay_tenth_s@i+1,c
  6280  001E80  0E01               	movlw	1
  6281  001E82  6E26               	movwf	delay_tenth_s@i,c
  6282  001E84  D009               	goto	l2230
  6283  001E86                     l2226:
  6284                           
  6285                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  6286  001E86  0E82               	movlw	130
  6287  001E88  6E24               	movwf	??_delay_tenth_s& (0+255),c
  6288  001E8A  0EDE               	movlw	222
  6289  001E8C                     u3167:
  6290  001E8C  2EE8               	decfsz	wreg,f,c
  6291  001E8E  D7FE               	goto	u3167
  6292  001E90  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  6293  001E92  D7FC               	goto	u3167
  6294  001E94  4A26               	infsnz	delay_tenth_s@i,f,c
  6295  001E96  2A27               	incf	delay_tenth_s@i+1,f,c
  6296  001E98                     l2230:
  6297  001E98  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  6298  001E9A  0D02               	mullw	2
  6299  001E9C  5026               	movf	delay_tenth_s@i,w,c
  6300  001E9E  5CF3               	subwf	prodl,w,c
  6301  001EA0  5027               	movf	delay_tenth_s@i+1,w,c
  6302  001EA2  58F4               	subwfb	prodh,w,c
  6303  001EA4  A0D8               	btfss	status,0,c
  6304  001EA6  0012               	return	
  6305  001EA8  D7EE               	goto	l2226
  6306  001EAA                     __end_of_delay_tenth_s:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           indf1	equ	0xFE7
  6318                           fsr1h	equ	0xFE2
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _SetLine *****************
  6328 ;; Defined at:
  6329 ;;		line 74 in file "LCD.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  line            1    wreg     unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  line            1   41[COMRAM] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;		None               void
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6343 ;;      Params:         0       0       0       0
  6344 ;;      Locals:         1       0       0       0
  6345 ;;      Temps:          0       0       0       0
  6346 ;;      Totals:         1       0       0       0
  6347 ;;Total ram usage:        1 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    6
  6350 ;; This function calls:
  6351 ;;		_SendLCD
  6352 ;; This function is called by:
  6353 ;;		_main
  6354 ;;		_ScanIR
  6355 ;;		_ScanWithRange
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text24
  6360  001F14                     __ptext24:
  6361                           	opt stack 0
  6362  001F14                     _SetLine:
  6363                           	opt stack 24
  6364                           
  6365                           ;incstack = 0
  6366                           ;SetLine@line stored from wreg
  6367  001F14  6E2A               	movwf	SetLine@line,c
  6368                           
  6369                           ;LCD.c: 75: if (line==1) {
  6370  001F16  042A               	decf	SetLine@line,w,c
  6371  001F18  A4D8               	btfss	status,2,c
  6372  001F1A  D006               	goto	l2236
  6373                           
  6374                           ;LCD.c: 76: SendLCD(0x80,0);
  6375  001F1C  0E00               	movlw	0
  6376  001F1E  6E28               	movwf	SendLCD@type,c
  6377  001F20  0E80               	movlw	128
  6378  001F22  ECA2  F00F         	call	_SendLCD
  6379                           
  6380                           ;LCD.c: 77: } else if (line==2) {
  6381  001F26  D009               	goto	l2240
  6382  001F28                     l2236:
  6383  001F28  0E02               	movlw	2
  6384  001F2A  182A               	xorwf	SetLine@line,w,c
  6385  001F2C  A4D8               	btfss	status,2,c
  6386  001F2E  D005               	goto	l2240
  6387                           
  6388                           ;LCD.c: 78: SendLCD(0xC0,0);
  6389  001F30  0E00               	movlw	0
  6390  001F32  6E28               	movwf	SendLCD@type,c
  6391  001F34  0EC0               	movlw	192
  6392  001F36  ECA2  F00F         	call	_SendLCD
  6393  001F3A                     l2240:
  6394                           
  6395                           ;LCD.c: 79: }
  6396                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6397  001F3A  0E21               	movlw	33
  6398  001F3C                     u3177:
  6399  001F3C  2EE8               	decfsz	wreg,f,c
  6400  001F3E  D7FE               	goto	u3177
  6401  001F40  F000               	nop	
  6402  001F42  0012               	return		;funcret
  6403  001F44                     __end_of_SetLine:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           intcon	equ	0xFF2
  6412                           postinc0	equ	0xFEE
  6413                           wreg	equ	0xFE8
  6414                           indf1	equ	0xFE7
  6415                           fsr1h	equ	0xFE2
  6416                           fsr1l	equ	0xFE1
  6417                           indf2	equ	0xFDF
  6418                           postinc2	equ	0xFDE
  6419                           postdec2	equ	0xFDD
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _LCD_String *****************
  6425 ;; Defined at:
  6426 ;;		line 83 in file "LCD.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  string          2   41[COMRAM] PTR unsigned char 
  6429 ;;		 -> STR_12(20), STR_10(20), ScanWithRange@buf(40), STR_8(20), 
  6430 ;;		 -> ScanIR@buf(40), STR_6(16), STR_5(17), STR_4(18), 
  6431 ;;		 -> STR_3(17), STR_2(15), STR_1(14), 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;		None               void
  6436 ;; Registers used:
  6437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6443 ;;      Params:         2       0       0       0
  6444 ;;      Locals:         0       0       0       0
  6445 ;;      Temps:          0       0       0       0
  6446 ;;      Totals:         2       0       0       0
  6447 ;;Total ram usage:        2 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    6
  6450 ;; This function calls:
  6451 ;;		_SendLCD
  6452 ;; This function is called by:
  6453 ;;		_main
  6454 ;;		_ScanIR
  6455 ;;		_ScanWithRange
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text25
  6460  001C72                     __ptext25:
  6461                           	opt stack 0
  6462  001C72                     _LCD_String:
  6463                           	opt stack 23
  6464                           
  6465                           ;LCD.c: 85: while(*string != 0){
  6466                           
  6467                           ;incstack = 0
  6468  001C72  D01A               	goto	l2250
  6469  001C74                     l2244:
  6470                           
  6471                           ;LCD.c: 88: SendLCD(*string++,1);
  6472  001C74  0E01               	movlw	1
  6473  001C76  6E28               	movwf	SendLCD@type,c
  6474  001C78  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6475  001C7C  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6476  001C80  6AF8               	clrf	tblptru,c
  6477  001C82  0E02               	movlw	(high __ramtop+-1)
  6478  001C84  64F7               	cpfsgt	tblptrh,c
  6479  001C86  D003               	bra	u1517
  6480  001C88  0008               	tblrd		*
  6481  001C8A  50F5               	movf	tablat,w,c
  6482  001C8C  D005               	bra	u1510
  6483  001C8E                     u1517:
  6484  001C8E  CFF6 FFE1          	movff	tblptrl,fsr1l
  6485  001C92  CFF7 FFE2          	movff	tblptrh,fsr1h
  6486  001C96  50E7               	movf	indf1,w,c
  6487  001C98                     u1510:
  6488  001C98  ECA2  F00F         	call	_SendLCD
  6489  001C9C  4A2A               	infsnz	LCD_String@string,f,c
  6490  001C9E  2A2B               	incf	LCD_String@string+1,f,c
  6491                           
  6492                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6493  001CA0  0E21               	movlw	33
  6494  001CA2                     u3187:
  6495  001CA2  2EE8               	decfsz	wreg,f,c
  6496  001CA4  D7FE               	goto	u3187
  6497  001CA6  F000               	nop	
  6498  001CA8                     l2250:
  6499  001CA8  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6500  001CAC  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6501  001CB0  6AF8               	clrf	tblptru,c
  6502  001CB2  0E02               	movlw	(high __ramtop+-1)
  6503  001CB4  64F7               	cpfsgt	tblptrh,c
  6504  001CB6  D003               	bra	u1527
  6505  001CB8  0008               	tblrd		*
  6506  001CBA  50F5               	movf	tablat,w,c
  6507  001CBC  D005               	bra	u1520
  6508  001CBE                     u1527:
  6509  001CBE  CFF6 FFE1          	movff	tblptrl,fsr1l
  6510  001CC2  CFF7 FFE2          	movff	tblptrh,fsr1h
  6511  001CC6  50E7               	movf	indf1,w,c
  6512  001CC8                     u1520:
  6513  001CC8  0900               	iorlw	0
  6514  001CCA  B4D8               	btfsc	status,2,c
  6515  001CCC  0012               	return	
  6516  001CCE  D7D2               	goto	l2244
  6517  001CD0                     __end_of_LCD_String:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           postinc0	equ	0xFEE
  6527                           wreg	equ	0xFE8
  6528                           indf1	equ	0xFE7
  6529                           fsr1h	equ	0xFE2
  6530                           fsr1l	equ	0xFE1
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function _SendLCD *****************
  6539 ;; Defined at:
  6540 ;;		line 27 in file "LCD.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  Byte            1    wreg     unsigned char 
  6543 ;;  type            1   39[COMRAM] unsigned char 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  Byte            1   40[COMRAM] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6555 ;;      Params:         1       0       0       0
  6556 ;;      Locals:         1       0       0       0
  6557 ;;      Temps:          0       0       0       0
  6558 ;;      Totals:         2       0       0       0
  6559 ;;Total ram usage:        2 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    5
  6562 ;; This function calls:
  6563 ;;		_LCDout
  6564 ;; This function is called by:
  6565 ;;		_initLCD
  6566 ;;		_SetLine
  6567 ;;		_LCD_String
  6568 ;;		_ScanIR
  6569 ;;		_ScanWithRange
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text26
  6574  001F44                     __ptext26:
  6575                           	opt stack 0
  6576  001F44                     _SendLCD:
  6577                           	opt stack 24
  6578                           
  6579                           ;incstack = 0
  6580                           ;SendLCD@Byte stored from wreg
  6581  001F44  6E29               	movwf	SendLCD@Byte,c
  6582                           
  6583                           ;LCD.c: 30: LATAbits.LATA6=type;
  6584  001F46  B028               	btfsc	SendLCD@type,0,c
  6585  001F48  D002               	bra	u1415
  6586  001F4A  9C89               	bcf	3977,6,c	;volatile
  6587  001F4C  D001               	bra	u1416
  6588  001F4E                     u1415:
  6589  001F4E  8C89               	bsf	3977,6,c	;volatile
  6590  001F50                     u1416:
  6591                           
  6592                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6593  001F50  3829               	swapf	SendLCD@Byte,w,c
  6594  001F52  0B0F               	andlw	15
  6595  001F54  0B0F               	andlw	15
  6596  001F56  ECA3  F00B         	call	_LCDout
  6597                           
  6598                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6599  001F5A  0E06               	movlw	6
  6600  001F5C                     u3197:
  6601  001F5C  2EE8               	decfsz	wreg,f,c
  6602  001F5E  D7FE               	goto	u3197
  6603  001F60  D000               	nop2		;nop
  6604                           
  6605                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6606  001F62  5029               	movf	SendLCD@Byte,w,c
  6607  001F64  0B0F               	andlw	15
  6608  001F66  ECA3  F00B         	call	_LCDout
  6609                           
  6610                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6611  001F6A  0E21               	movlw	33
  6612  001F6C                     u3207:
  6613  001F6C  2EE8               	decfsz	wreg,f,c
  6614  001F6E  D7FE               	goto	u3207
  6615  001F70  F000               	nop	
  6616  001F72  0012               	return		;funcret
  6617  001F74                     __end_of_SendLCD:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           indf1	equ	0xFE7
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function _LCDout *****************
  6639 ;; Defined at:
  6640 ;;		line 14 in file "LCD.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  number          1    wreg     unsigned char 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  number          1   38[COMRAM] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;		None               void
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6654 ;;      Params:         0       0       0       0
  6655 ;;      Locals:         1       0       0       0
  6656 ;;      Temps:          3       0       0       0
  6657 ;;      Totals:         4       0       0       0
  6658 ;;Total ram usage:        4 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    4
  6661 ;; This function calls:
  6662 ;;		_E_TOG
  6663 ;; This function is called by:
  6664 ;;		_SendLCD
  6665 ;;		_initLCD
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           	psect	text27
  6670  001746                     __ptext27:
  6671                           	opt stack 0
  6672  001746                     _LCDout:
  6673                           	opt stack 24
  6674                           
  6675                           ;incstack = 0
  6676                           ;LCDout@number stored from wreg
  6677  001746  6E27               	movwf	LCDout@number,c
  6678                           
  6679                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6680  001748  5027               	movf	LCDout@number,w,c
  6681  00174A  6E24               	movwf	??_LCDout& (0+255),c
  6682  00174C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6683  00174E  0E07               	movlw	7
  6684  001750                     u1265:
  6685  001750  90D8               	bcf	status,0,c
  6686  001752  3624               	rlcf	??_LCDout,f,c
  6687  001754  3625               	rlcf	??_LCDout+1,f,c
  6688  001756  2EE8               	decfsz	wreg,f,c
  6689  001758  D7FB               	goto	u1265
  6690  00175A  0E07               	movlw	7
  6691  00175C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6692  00175E                     u1275:
  6693  00175E  3425               	rlcf	??_LCDout+1,w,c
  6694  001760  3225               	rrcf	??_LCDout+1,f,c
  6695  001762  3224               	rrcf	??_LCDout,f,c
  6696  001764  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6697  001766  D7FB               	goto	u1275
  6698  001768  4624               	rlncf	??_LCDout,f,c
  6699  00176A  508B               	movf	3979,w,c	;volatile
  6700  00176C  1824               	xorwf	??_LCDout,w,c
  6701  00176E  0BFD               	andlw	-3
  6702  001770  1824               	xorwf	??_LCDout,w,c
  6703  001772  6E8B               	movwf	3979,c	;volatile
  6704                           
  6705                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6706  001774  5027               	movf	LCDout@number,w,c
  6707  001776  6E24               	movwf	??_LCDout& (0+255),c
  6708  001778  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6709  00177A  0E06               	movlw	6
  6710  00177C                     u1285:
  6711  00177C  90D8               	bcf	status,0,c
  6712  00177E  3624               	rlcf	??_LCDout,f,c
  6713  001780  3625               	rlcf	??_LCDout+1,f,c
  6714  001782  2EE8               	decfsz	wreg,f,c
  6715  001784  D7FB               	goto	u1285
  6716  001786  0E07               	movlw	7
  6717  001788  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6718  00178A                     u1295:
  6719  00178A  3425               	rlcf	??_LCDout+1,w,c
  6720  00178C  3225               	rrcf	??_LCDout+1,f,c
  6721  00178E  3224               	rrcf	??_LCDout,f,c
  6722  001790  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6723  001792  D7FB               	goto	u1295
  6724  001794  4624               	rlncf	??_LCDout,f,c
  6725  001796  4624               	rlncf	??_LCDout,f,c
  6726  001798  508B               	movf	3979,w,c	;volatile
  6727  00179A  1824               	xorwf	??_LCDout,w,c
  6728  00179C  0BFB               	andlw	-5
  6729  00179E  1824               	xorwf	??_LCDout,w,c
  6730  0017A0  6E8B               	movwf	3979,c	;volatile
  6731                           
  6732                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6733  0017A2  5027               	movf	LCDout@number,w,c
  6734  0017A4  6E24               	movwf	??_LCDout& (0+255),c
  6735  0017A6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6736  0017A8  0E05               	movlw	5
  6737  0017AA                     u1305:
  6738  0017AA  90D8               	bcf	status,0,c
  6739  0017AC  3624               	rlcf	??_LCDout,f,c
  6740  0017AE  3625               	rlcf	??_LCDout+1,f,c
  6741  0017B0  2EE8               	decfsz	wreg,f,c
  6742  0017B2  D7FB               	goto	u1305
  6743  0017B4  0E07               	movlw	7
  6744  0017B6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6745  0017B8                     u1315:
  6746  0017B8  3425               	rlcf	??_LCDout+1,w,c
  6747  0017BA  3225               	rrcf	??_LCDout+1,f,c
  6748  0017BC  3224               	rrcf	??_LCDout,f,c
  6749  0017BE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6750  0017C0  D7FB               	goto	u1315
  6751  0017C2  508C               	movf	3980,w,c	;volatile
  6752  0017C4  1824               	xorwf	??_LCDout,w,c
  6753  0017C6  0BFE               	andlw	-2
  6754  0017C8  1824               	xorwf	??_LCDout,w,c
  6755  0017CA  6E8C               	movwf	3980,c	;volatile
  6756                           
  6757                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6758  0017CC  5027               	movf	LCDout@number,w,c
  6759  0017CE  6E24               	movwf	??_LCDout& (0+255),c
  6760  0017D0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6761  0017D2  3A24               	swapf	??_LCDout,f,c
  6762  0017D4  3A25               	swapf	??_LCDout+1,f,c
  6763  0017D6  0EF0               	movlw	240
  6764  0017D8  1625               	andwf	??_LCDout+1,f,c
  6765  0017DA  5024               	movf	??_LCDout,w,c
  6766  0017DC  0B0F               	andlw	15
  6767  0017DE  1225               	iorwf	??_LCDout+1,f,c
  6768  0017E0  0EF0               	movlw	240
  6769  0017E2  1624               	andwf	??_LCDout,f,c
  6770  0017E4  0E07               	movlw	7
  6771  0017E6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6772  0017E8                     u1325:
  6773  0017E8  3425               	rlcf	??_LCDout+1,w,c
  6774  0017EA  3225               	rrcf	??_LCDout+1,f,c
  6775  0017EC  3224               	rrcf	??_LCDout,f,c
  6776  0017EE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6777  0017F0  D7FB               	goto	u1325
  6778  0017F2  4624               	rlncf	??_LCDout,f,c
  6779  0017F4  508C               	movf	3980,w,c	;volatile
  6780  0017F6  1824               	xorwf	??_LCDout,w,c
  6781  0017F8  0BFD               	andlw	-3
  6782  0017FA  1824               	xorwf	??_LCDout,w,c
  6783  0017FC  6E8C               	movwf	3980,c	;volatile
  6784                           
  6785                           ;LCD.c: 21: E_TOG();
  6786  0017FE  ECF5  F00F         	call	_E_TOG	;wreg free
  6787                           
  6788                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6789  001802  0E03               	movlw	3
  6790  001804                     u3217:
  6791  001804  2EE8               	decfsz	wreg,f,c
  6792  001806  D7FE               	goto	u3217
  6793  001808  F000               	nop	
  6794  00180A  0012               	return		;funcret
  6795  00180C                     __end_of_LCDout:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           postinc0	equ	0xFEE
  6805                           wreg	equ	0xFE8
  6806                           indf1	equ	0xFE7
  6807                           fsr1h	equ	0xFE2
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _E_TOG *****************
  6817 ;; Defined at:
  6818 ;;		line 5 in file "LCD.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6832 ;;      Params:         0       0       0       0
  6833 ;;      Locals:         0       0       0       0
  6834 ;;      Temps:          0       0       0       0
  6835 ;;      Totals:         0       0       0       0
  6836 ;;Total ram usage:        0 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    3
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_LCDout
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text28
  6847  001FEA                     __ptext28:
  6848                           	opt stack 0
  6849  001FEA                     _E_TOG:
  6850                           	opt stack 24
  6851                           
  6852                           ;LCD.c: 8: LATCbits.LATC0=1;
  6853                           
  6854                           ;incstack = 0
  6855  001FEA  808B               	bsf	3979,0,c	;volatile
  6856                           
  6857                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6858  001FEC  0E03               	movlw	3
  6859  001FEE                     u3227:
  6860  001FEE  2EE8               	decfsz	wreg,f,c
  6861  001FF0  D7FE               	goto	u3227
  6862  001FF2  F000               	nop	
  6863                           
  6864                           ;LCD.c: 10: LATCbits.LATC0=0;
  6865  001FF4  908B               	bcf	3979,0,c	;volatile
  6866  001FF6  0012               	return		;funcret
  6867  001FF8                     __end_of_E_TOG:
  6868                           	opt stack 0
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           postinc0	equ	0xFEE
  6877                           wreg	equ	0xFE8
  6878                           indf1	equ	0xFE7
  6879                           fsr1h	equ	0xFE2
  6880                           fsr1l	equ	0xFE1
  6881                           indf2	equ	0xFDF
  6882                           postinc2	equ	0xFDE
  6883                           postdec2	equ	0xFDD
  6884                           fsr2h	equ	0xFDA
  6885                           fsr2l	equ	0xFD9
  6886                           status	equ	0xFD8
  6887                           
  6888 ;; *************** function _InterruptHandlerLow *****************
  6889 ;; Defined at:
  6890 ;;		line 18 in file "main.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;		None               void
  6897 ;; Registers used:
  6898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6904 ;;      Params:         0       0       0       0
  6905 ;;      Locals:         0       0       0       0
  6906 ;;      Temps:         17       0       0       0
  6907 ;;      Totals:        17       0       0       0
  6908 ;;Total ram usage:       17 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    2
  6911 ;; This function calls:
  6912 ;;		Nothing
  6913 ;; This function is called by:
  6914 ;;		Interrupt level 1
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	intcodelo
  6919  000018                     __pintcodelo:
  6920                           	opt stack 0
  6921  000018                     _InterruptHandlerLow:
  6922                           	opt stack 23
  6923                           
  6924                           ;incstack = 0
  6925  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6926  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6927  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6928  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6929  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6930  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6931  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6932  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6933  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6934  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6935  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6936  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6937  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6938  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6939  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6940  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6941  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6942  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6943                           
  6944                           ;main.c: 20: if (PIR1bits.RCIF) {
  6945  00005E  AA9E               	btfss	3998,5,c	;volatile
  6946  000060  D016               	goto	i1l68
  6947                           
  6948                           ;main.c: 21: ReceivedString[i]=RCREG;
  6949  000062  503A               	movf	_i,w,c	;volatile
  6950  000064  0D01               	mullw	1
  6951  000066  0EE9               	movlw	low _ReceivedString
  6952  000068  24F3               	addwf	prodl,w,c
  6953  00006A  6ED9               	movwf	fsr2l,c
  6954  00006C  0E01               	movlw	high _ReceivedString
  6955  00006E  20F4               	addwfc	prodh,w,c
  6956  000070  6EDA               	movwf	fsr2h,c
  6957  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6958                           
  6959                           ;main.c: 22: RFID_Read=1;
  6960  000076  0E01               	movlw	1
  6961  000078  0101               	movlb	1	; () banked
  6962  00007A  6FE8               	movwf	_RFID_Read& (0+255),b	;volatile
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;main.c: 23: if (i==15){
  6966  00007C  0E0F               	movlw	15
  6967  00007E  183A               	xorwf	_i,w,c	;volatile
  6968  000080  A4D8               	btfss	status,2,c
  6969  000082  D003               	goto	i1l2874
  6970                           
  6971                           ; BSR set to: 1
  6972                           ;main.c: 24: i=0;
  6973  000084  0E00               	movlw	0
  6974  000086  6E3A               	movwf	_i,c	;volatile
  6975                           
  6976                           ;main.c: 25: }else{
  6977  000088  D001               	goto	i1l2876
  6978  00008A                     i1l2874:
  6979                           
  6980                           ; BSR set to: 1
  6981                           ;main.c: 26: i++;
  6982  00008A  2A3A               	incf	_i,f,c	;volatile
  6983  00008C                     i1l2876:
  6984                           
  6985                           ; BSR set to: 1
  6986                           ;main.c: 27: }
  6987                           ;main.c: 28: PIR1bits.RCIF=0;
  6988  00008C  9A9E               	bcf	3998,5,c	;volatile
  6989  00008E                     i1l68:
  6990  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6991  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6992  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6993  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6994  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6995  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6996  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6997  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6998  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6999  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7000  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7001  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7002  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7003  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7004  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7005  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7006  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  7007  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7008  0000D4  0010               	retfie	
  7009  0000D6                     __end_of_InterruptHandlerLow:
  7010                           	opt stack 0
  7011                           pclatu	equ	0xFFB
  7012                           pclath	equ	0xFFA
  7013                           tblptru	equ	0xFF8
  7014                           tblptrh	equ	0xFF7
  7015                           tblptrl	equ	0xFF6
  7016                           tablat	equ	0xFF5
  7017                           prodh	equ	0xFF4
  7018                           prodl	equ	0xFF3
  7019                           intcon	equ	0xFF2
  7020                           postinc0	equ	0xFEE
  7021                           fsr0h	equ	0xFEA
  7022                           fsr0l	equ	0xFE9
  7023                           wreg	equ	0xFE8
  7024                           indf1	equ	0xFE7
  7025                           fsr1h	equ	0xFE2
  7026                           fsr1l	equ	0xFE1
  7027                           bsr	equ	0xFE0
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _InterruptHandlerHigh *****************
  7036 ;; Defined at:
  7037 ;;		line 34 in file "main.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;		None
  7042 ;; Return value:  Size  Location     Type
  7043 ;;		None               void
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7051 ;;      Params:         0       0       0       0
  7052 ;;      Locals:         0       0       0       0
  7053 ;;      Temps:         14       0       0       0
  7054 ;;      Totals:        14       0       0       0
  7055 ;;Total ram usage:       14 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    1
  7058 ;; This function calls:
  7059 ;;		i2_delay_tenth_s
  7060 ;; This function is called by:
  7061 ;;		Interrupt level 2
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	intcode
  7066  000008                     __pintcode:
  7067                           	opt stack 0
  7068  000008                     _InterruptHandlerHigh:
  7069                           	opt stack 23
  7070                           
  7071                           ;incstack = 0
  7072  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7073  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7074  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7075  000012  EF08  F00D         	goto	int_func
  7076                           pclatu	equ	0xFFB
  7077                           pclath	equ	0xFFA
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           postinc0	equ	0xFEE
  7086                           fsr0h	equ	0xFEA
  7087                           fsr0l	equ	0xFE9
  7088                           wreg	equ	0xFE8
  7089                           indf1	equ	0xFE7
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           bsr	equ	0xFE0
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100                           	psect	intcode_body
  7101  001A10                     __pintcode_body:
  7102                           	opt stack 23
  7103  001A10                     int_func:
  7104                           	opt stack 23
  7105  001A10  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7106  001A14  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7107  001A18  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7108  001A1C  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7109  001A20  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7110  001A24  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7111  001A28  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7112  001A2C  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7113  001A30  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7114  001A34  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7115  001A38  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7116  001A3C  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7117                           
  7118                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7119  001A40  A2F2               	btfss	intcon,1,c	;volatile
  7120  001A42  D00D               	goto	i2l76
  7121                           
  7122                           ;main.c: 36: if (mode==-1) {
  7123  001A44  283B               	incf	_mode,w,c	;volatile
  7124  001A46  A4D8               	btfss	status,2,c
  7125  001A48  D003               	goto	i2l2884
  7126                           
  7127                           ;main.c: 38: mode=1;
  7128  001A4A  0E01               	movlw	1
  7129  001A4C  6E3B               	movwf	_mode,c	;volatile
  7130                           
  7131                           ;main.c: 39: } else if (mode==0) {
  7132  001A4E  D003               	goto	i2l2888
  7133  001A50                     i2l2884:
  7134  001A50  503B               	movf	_mode,w,c	;volatile
  7135  001A52  A4D8               	btfss	status,2,c
  7136                           
  7137                           ;main.c: 43: mode=-1;
  7138                           
  7139                           ;main.c: 41: } else {
  7140  001A54  683B               	setf	_mode,c	;volatile
  7141  001A56                     i2l2888:
  7142                           
  7143                           ;main.c: 44: }
  7144                           ;main.c: 46: delay_tenth_s(2);
  7145  001A56  0E02               	movlw	2
  7146  001A58  EC55  F00F         	call	i2_delay_tenth_s
  7147                           
  7148                           ;main.c: 47: INTCONbits.INT0IF=0;
  7149  001A5C  92F2               	bcf	intcon,1,c	;volatile
  7150  001A5E                     i2l76:
  7151  001A5E  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7152  001A62  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7153  001A66  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7154  001A6A  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7155  001A6E  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7156  001A72  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7157  001A76  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7158  001A7A  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7159  001A7E  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7160  001A82  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7161  001A86  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7162  001A8A  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7163  001A8E  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7164  001A92  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7165  001A96  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7166  001A98  0011               	retfie		f
  7167  001A9A                     __end_of_InterruptHandlerHigh:
  7168                           	opt stack 0
  7169                           pclatu	equ	0xFFB
  7170                           pclath	equ	0xFFA
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           postinc0	equ	0xFEE
  7179                           fsr0h	equ	0xFEA
  7180                           fsr0l	equ	0xFE9
  7181                           wreg	equ	0xFE8
  7182                           indf1	equ	0xFE7
  7183                           fsr1h	equ	0xFE2
  7184                           fsr1l	equ	0xFE1
  7185                           bsr	equ	0xFE0
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function i2_delay_tenth_s *****************
  7194 ;; Defined at:
  7195 ;;		line 29 in file "Movement.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  tenth_second    1    wreg     unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7200 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;		None               void
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7210 ;;      Params:         0       0       0       0
  7211 ;;      Locals:         3       0       0       0
  7212 ;;      Temps:          1       0       0       0
  7213 ;;      Totals:         4       0       0       0
  7214 ;;Total ram usage:        4 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_InterruptHandlerHigh
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text31
  7224  001EAA                     __ptext31:
  7225                           	opt stack 0
  7226  001EAA                     i2_delay_tenth_s:
  7227                           	opt stack 23
  7228                           
  7229                           ;incstack = 0
  7230                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7231  001EAA  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7232                           
  7233                           ;Movement.c: 30: unsigned int i=0;
  7234  001EAC  0E00               	movlw	0
  7235  001EAE  6E04               	movwf	i2delay_tenth_s@i+1,c
  7236  001EB0  0E00               	movlw	0
  7237  001EB2  6E03               	movwf	i2delay_tenth_s@i,c
  7238                           
  7239                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  7240  001EB4  0E00               	movlw	0
  7241  001EB6  6E04               	movwf	i2delay_tenth_s@i+1,c
  7242  001EB8  0E01               	movlw	1
  7243  001EBA  6E03               	movwf	i2delay_tenth_s@i,c
  7244  001EBC  D009               	goto	i2l2862
  7245  001EBE                     i2l2858:
  7246                           
  7247                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  7248  001EBE  0E82               	movlw	130
  7249  001EC0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7250  001EC2  0EDE               	movlw	222
  7251  001EC4                     i2u323_47:
  7252  001EC4  2EE8               	decfsz	wreg,f,c
  7253  001EC6  D7FE               	goto	i2u323_47
  7254  001EC8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7255  001ECA  D7FC               	goto	i2u323_47
  7256  001ECC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7257  001ECE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7258  001ED0                     i2l2862:
  7259  001ED0  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7260  001ED2  0D02               	mullw	2
  7261  001ED4  5003               	movf	i2delay_tenth_s@i,w,c
  7262  001ED6  5CF3               	subwf	prodl,w,c
  7263  001ED8  5004               	movf	i2delay_tenth_s@i+1,w,c
  7264  001EDA  58F4               	subwfb	prodh,w,c
  7265  001EDC  A0D8               	btfss	status,0,c
  7266  001EDE  0012               	return	
  7267  001EE0  D7EE               	goto	i2l2858
  7268  001EE2                     __end_ofi2_delay_tenth_s:
  7269                           	opt stack 0
  7270                           pclatu	equ	0xFFB
  7271                           pclath	equ	0xFFA
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           postinc0	equ	0xFEE
  7280                           fsr0h	equ	0xFEA
  7281                           fsr0l	equ	0xFE9
  7282                           wreg	equ	0xFE8
  7283                           indf1	equ	0xFE7
  7284                           fsr1h	equ	0xFE2
  7285                           fsr1l	equ	0xFE1
  7286                           bsr	equ	0xFE0
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           pclatu	equ	0xFFB
  7294                           pclath	equ	0xFFA
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           intcon	equ	0xFF2
  7302                           postinc0	equ	0xFEE
  7303                           fsr0h	equ	0xFEA
  7304                           fsr0l	equ	0xFE9
  7305                           wreg	equ	0xFE8
  7306                           indf1	equ	0xFE7
  7307                           fsr1h	equ	0xFE2
  7308                           fsr1l	equ	0xFE1
  7309                           bsr	equ	0xFE0
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317                           	psect	rparam
  7318  0000                     pclatu	equ	0xFFB
  7319                           pclath	equ	0xFFA
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           postinc0	equ	0xFEE
  7328                           fsr0h	equ	0xFEA
  7329                           fsr0l	equ	0xFE9
  7330                           wreg	equ	0xFE8
  7331                           indf1	equ	0xFE7
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           bsr	equ	0xFE0
  7335                           indf2	equ	0xFDF
  7336                           postinc2	equ	0xFDE
  7337                           postdec2	equ	0xFDD
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342                           	psect	temp
  7343  00003C                     btemp:
  7344                           	opt stack 0
  7345  00003C                     	ds	1
  7346  0000                     int$flags	set	btemp
  7347                           pclatu	equ	0xFFB
  7348                           pclath	equ	0xFFA
  7349                           tblptru	equ	0xFF8
  7350                           tblptrh	equ	0xFF7
  7351                           tblptrl	equ	0xFF6
  7352                           tablat	equ	0xFF5
  7353                           prodh	equ	0xFF4
  7354                           prodl	equ	0xFF3
  7355                           intcon	equ	0xFF2
  7356                           postinc0	equ	0xFEE
  7357                           fsr0h	equ	0xFEA
  7358                           fsr0l	equ	0xFE9
  7359                           wreg	equ	0xFE8
  7360                           indf1	equ	0xFE7
  7361                           fsr1h	equ	0xFE2
  7362                           fsr1l	equ	0xFE1
  7363                           bsr	equ	0xFE0
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8


Data Sizes:
    Strings     129
    Constant    16
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     76      92
    BANK1           256    232     249
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_13(CODE[12]), STR_11(CODE[12]), STR_9(CODE[12]), STR_7(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_12(CODE[20]), STR_10(CODE[20]), ScanWithRange@buf(BANK0[40]), STR_8(CODE[20]), 
		 -> ScanIR@buf(BANK0[40]), STR_6(CODE[16]), STR_5(CODE[17]), STR_4(CODE[18]), 
		 -> STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[14]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S350DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S350DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnRight->_stop
    _turnLeft->_fullSpeedAhead
    _turnLeft->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               234   234      0  100188
                                             74 BANK0      2     2      0
                                              0 BANK1    232   232      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1266
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3938
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       64    57      7   40905
                                             10 BANK0     64    57      7
                         _LCD_String
                            _SendLCD
                            _SetLine
                            ___awdiv
                            _delay_s
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              56    46     10   37681
                                             10 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4   10956
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   11726
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6494
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3660
                                             56 COMRAM     1     1      0
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2334
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1177
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    17      8    1566
                                             47 COMRAM     9     1      8
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1222
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2055
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1178
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     ___awdiv
       ___wmul (ARG)
     _delay_s
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E8      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      5C       5       57.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     190       3        0.0%
DATA                 0      0     190      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 23:36:21 2018

                   ?_grabRightIR 0024                                _i 003A  
                             l79 0CE0                     ___awdiv@sign 002F  
                             bsr 000FE0              ___wmul@multiplicand 0026  
                    main@Message 01C8                      ?_LCD_String 002A  
                            l143 16E8                              l173 1C54  
                            l837 1D18                              l847 1DF6  
                    grabLeftIR@i 002B                              prod 000FF3  
                            wreg 000FE8                     main@MoveTime 0164  
                   main@MoveType 0100                             l2300 1B72  
                           l2204 1D0E                             l2220 1DEC  
                           l2212 1DCC                             l2230 1E98  
                           l2214 1DD4                             l3110 1B06  
                           l2240 1F3A                             l2216 1DD8  
                           l2312 14C6                             l2250 1CA8  
                           l2226 1E86                             l2330 152A  
                           l2306 14AA                             l3114 1B14  
                           l3106 1AFC                             l2244 1C74  
                           l2236 1F28                             l3124 16C0  
                           l3132 1996                             l2350 1582  
                           l2342 1560                             l2318 14F4  
                           l3150 1C04                             l3142 19CE  
                           l2270 1E60                             l3302 0732  
                           l2192 1CE6                             l2328 1524  
                           l2360 15FE                             l3136 19AE  
                           l3128 197E                             l2432 1FB2  
                           l2274 1BA0                             l2290 1B2E  
                           l2194 1CEE                             l3082 1AAE  
                           l3154 1C1C                             l2266 1E4E  
                           l3410 0B22                             l2284 1BE4  
                           l2196 1CF2                             l2356 15D8  
                           l2348 157C                             l3340 08AC  
                           l2278 1BA8                             l2294 1B36  
                           l2358 15E4                             l3094 1AD4  
                           l3158 1C34                             l3502 12C4  
                           l3510 12CC                             l3422 0BB8  
                           l3334 08A8                             l3326 0862  
                           l3318 07AA                             l3096 1ADC  
                           l3088 1ABE                             l3520 134A  
                           l3098 1AE0                             l3370 0A5A  
                           l3362 09A2                             l3524 1374  
                           l3428 0BBC                             l3348 0964  
                           l3444 0C44                             l3700 0F82  
                           l3542 13F8                             l3550 1400  
                           l3294 0696                             l3702 0F88  
                           l3710 0FE4                             l3606 0CE6  
                           l3560 146A                             l3528 1378  
                           l2840 1928                             l3720 103C  
                           l3490 1244                             l3394 0ACE  
                           l3378 0A70                             l3298 06E4  
                           l3730 1082                             l3722 1042  
                           l3650 0DEC                             l3634 0D76  
                           l3618 0D2E                             l3564 1494  
                           l3484 1240                             l3388 0ACA  
                           l2836 1920                             l3660 0E80  
                           l3734 1084                             l3568 1498  
                           l2848 1978                             l3664 0E8E  
                           l3656 0E32                             l3690 0F5C  
                           l3682 0F16                             l3668 0EA4  
                           l3694 0F66                             l3678 0F0C  
                           l3688 0F56                             STR_1 0378  
                           STR_2 0369                             STR_3 0348  
                           STR_4 0325                             STR_5 0337  
                           STR_6 0359                             STR_7 0386  
                           STR_8 0311                             STR_9 0386  
                           u1305 17AA                             u1315 17B8  
                           u1325 17E8                             u1510 1C98  
                           _LATB 000F8A                             u1415 1F4E  
                           u3007 189A                             u1416 1F50  
                           u1520 1CC8                             u1265 1750  
                           u3017 18AE                             u1275 175E  
                           u3107 10EA                             u3027 18C0  
                           u1285 177C                             u1517 1C8E  
                           u3117 1102                             u3037 040E  
                           u1295 178A                             u3207 1F6C  
                           u1527 1CBE                             u3127 19C8  
                           u3047 0426                             u3217 1804  
                           u3137 1C4E                             u3057 04EA  
                           u1705 1FAE                             u2354 1680  
                           u1706 1FB0                             u3227 1FEE  
                           u3147 1B66                             u2355 167C  
                           u3067 0502                             u2364 16DC  
                           u3157 1BD8                             u1565 1BB0  
                           u2365 16D8                             u3077 05CE  
                           u1725 1FC0                             u1726 1FC2  
                           u3167 1E8C                             u2375 1736  
                           u3087 05E6                             u3177 1F3C  
                           u3097 1E54                             u3187 1CA2  
                           u1595 1B3E                             u3197 1F5C  
                           u2830 0ED6                             u2840 0EEA  
                           u2832 0ED8                             u2842 0EEC  
                           u2937 181E                             u2947 1834  
                           u2957 1844                             u2967 1852  
                           u2977 1860                             u2987 1872  
                           i1l68 008E                             u2997 1884  
                           i2l76 1A5E                       ScanIR@Move 006E  
                           _main 0C48                             _mode 003B  
                  main@ScanAngle 01D2                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 003C  
                           _stop 197C                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 00D6                   delay_s@seconds 0025  
                   ___param_bank 000010                  i2_delay_tenth_s 1EAA  
                __end_of_SendLCD 1F74                  __end_of_SetLine 1F44  
             ScanWithRange@F3891 00B8               ScanWithRange@F3887 00B0  
             ScanWithRange@F3889 00B4                      ScanIR@F3878 00AC  
                          ?_main 0001                  __end_of___awdiv 1B1E  
                          STR_10 0311                            STR_11 0386  
                          STR_12 0311                            STR_13 0386  
                          ?_stop 0062                  ___awdiv@divisor 002C  
                          _PDC0H 000F78                            _PDC1H 000F76  
                          _PDC0L 000F79                            _PDC1L 000F77  
                          _T5CON 000FB7                     grabRightIR@i 002B  
                __end_of___lwdiv 1D22                  __end_of___lwmod 1E00  
                ___awdiv@counter 002E                            _RCREG 000FAE  
                          _E_TOG 1FEA                            _SPBRG 000FAF  
                          _TRISC 000F94                            _TXREG 000FAD  
                __end_of_delay_s 1E72                  __end_of_initLCD 18C8  
                __end_of_dpowers 030B                            main@i 01D4  
                          tablat 000FF5                            status 000FD8  
            __size_of_LCD_String 005E                  __end_of_sprintf 160C  
         __size_of_ScanWithRange 08B4                  __initialization 1F74  
                   __end_of_main 10A6                     __end_of_stop 1A10  
                 delay_tenth_s@i 0026                   __CFG_OSC$IRCIO 000000  
               LCD_String@string 002A             __end_of_enableSensor 1FC4  
            VerifySignal@hexByte 002D                           ??_main 00AA  
                         ??_stop 0039                    __activetblptr 000002  
                  ?_initMotorPWM 0001                           ?_E_TOG 0001  
                   ?_setMotorPWM 0032           __size_of_fullSpeedBack 003A  
               ___awdiv@dividend 002A  __end_of_DirectionFoundThreshold 030F  
                         i1l2874 008A                           i1l2876 008C  
                 __CFG_WDTEN$OFF 000000                           i2l2862 1ED0  
                         i2l2858 1EBE                           i2l2884 1A50  
                         i2l2888 1A56            __end_of_delay_tenth_s 1EAA  
                         _LCDout 1746                      SendLCD@Byte 0029  
__end_of_DirectionFoundTolerance 0311                           _OSCCON 000FD3  
                         _PTCON0 000F7F                           _PTCON1 000F7E  
                         _SPBRGH 000FB0                           _PTPERH 000F7A  
                         _PTPERL 000F7B          __end_ofi2_delay_tenth_s 1EE2  
                    SendLCD@type 0028                        ??_SendLCD 0029  
                         _ScanIR 10A6                        ??_SetLine 002A  
                         ___wmul 1FC4                        ??___awdiv 002E  
               __end_of_initRFID 0118                        ??___lwdiv 0028  
                      ??___lwmod 002F                           _initIR 00DA  
           __size_of_grabRightIR 0072                           clear_0 1F7A  
                         clear_1 1F86                 ___awdiv@quotient 0030  
                      ??_delay_s 0024                           main@mL 01D6  
                         main@mR 01DF                   ??_initMotorPWM 0024  
                      ??_initLCD 002A                    _ScanWithRange 0394  
   i2delay_tenth_s@tenth_seconds 0002                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           stop@mL 0062  
                         stop@mR 0064                        ??_sprintf 0038  
               __end_of_turnLeft 1DBE                  fullSpeedBack@mL 0066  
                fullSpeedBack@mR 0068                       __accesstop 0060  
        __end_of__initialization 1F90                    ___rparam_used 000001  
                    SetLine@line 002A                    __end_of_E_TOG 1FF8  
                 __pcstackCOMRAM 0001                    _fullSpeedBack 1E00  
                   ??_LCD_String 002C                   ?_ScanWithRange 006A  
           VerifySignal@checksum 002C                          ??_E_TOG 0024  
  __size_of_InterruptHandlerHigh 1A92      __end_of_InterruptHandlerLow 00D6  
     delay_tenth_s@tenth_seconds 0025                       __pbssBANK0 00AC  
                     __pbssBANK1 01E8                          ?_LCDout 0001  
               ?i2_delay_tenth_s 0001               __end_of_LCD_String 1CD0  
                        ?_ScanIR 006A                   ?_fullSpeedBack 0066  
          __size_of_enableSensor 0026                          ?___wmul 0024  
            grabLeftIR@IR_signal 0029                          _CAP1CON 000F63  
                        _CAP2CON 000F62                          ?_initIR 0001  
        __size_of_fullSpeedAhead 0070                       _grabLeftIR 1B90  
                        _PWMCON0 000F6F                          _PWMCON1 000F6E  
                      ?_initRFID 0001             __size_of_setMotorPWM 013A  
                __size_of_LCDout 00C6                     _enableSensor 1F9E  
             __size_of_turnRight 004E             __end_of_initMotorPWM 1F14  
                        _SendLCD 1F44                          __Hparam 0000  
                        _SetLine 1F14                          __Lparam 0000  
                __size_of_ScanIR 03F6                          ___awdiv 1A9A  
                __size_of___wmul 0026                          ___lwdiv 1CD0  
                        ___lwmod 1DBE                     __psmallconst 0300  
                __size_of_initIR 0022                          __pcinit 1F74  
                ??_ScanWithRange 0071                          _delay_s 1E3A  
                        __ramtop 0300                        ?_turnLeft 0066  
                        __ptext0 0C48                          __ptext1 00FC  
                        __ptext2 1EE2                          __ptext3 180C  
                        __ptext4 00DA                          __ptext5 1E00  
                        __ptext6 1F9E                          __ptext7 18C8  
                        __ptext8 0394                          __ptext9 1E3A  
                        _initLCD 180C                          _dpowers 0301  
                   LCDout@number 0027                    ?_VerifySignal 0024  
                        _sprintf 149C                   __pintcode_body 1A10  
           end_of_initialization 1F90               setMotorPWM@PWMduty 0060  
                     ??_initRFID 0024                    __Lmediumconst 0000  
                        int_func 1A10               ScanIR@SensorResult 009E  
                ??_fullSpeedBack 003A                        _RFID_Read 01E8  
                      _RCSTAbits 000FAB                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     ??_turnLeft 003A                __end_of_turnRight 1D70  
                    ?_grabLeftIR 0024                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
                 ??_VerifySignal 0026                 fullSpeedAhead@mL 0062  
               fullSpeedAhead@mR 0064                   __end_of_LCDout 180C  
                      _TXSTAbits 000FAC                        ScanIR@buf 0076  
     ScanWithRange@MoveTimeEntry 006F                    ??_grabRightIR 0026  
                 __end_of_ScanIR 149C                   _fullSpeedAhead 1C02  
        _DirectionFoundThreshold 030D                   _ReceivedString 01E9  
                 __end_of___wmul 1FEA                      _BAUDCONbits 000FAA  
        _DirectionFoundTolerance 030F                   __end_of_initIR 00FC  
         __size_of_delay_tenth_s 0038              start_initialization 1F74  
             VerifySignal@Signal 0024            __size_of_initMotorPWM 0032  
                       ??_LCDout 0024     __end_of_InterruptHandlerHigh 1A9A  
                       ??_ScanIR 0074           __end_of_fullSpeedAhead 1C72  
            __size_of_grabLeftIR 0072                         ??___wmul 0028  
                       ??_initIR 0024              __end_of_grabRightIR 1B90  
                   _initMotorPWM 1EE2                      __pbssCOMRAM 003A  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
   __size_of_InterruptHandlerLow 00BE                    _delay_tenth_s 1E72  
                    sprintf@flag 0062                      sprintf@prec 0063  
              __size_of_initRFID 001C                         ?_SendLCD 0028  
                       ?_SetLine 0001                 ___lwdiv@dividend 0024  
                ?_fullSpeedAhead 0062                        __pintcode 0008  
           __end_of_VerifySignal 197C                         ?___awdiv 002A  
       __size_ofi2_delay_tenth_s 0038                         ?___lwdiv 0024  
                       ?___lwmod 002B     __end_of_ClearSignalThreshold 030D  
                    __pintcodelo 0018                         ?_delay_s 0001  
                       _CAP1BUFH 000F69                         _CAP1BUFL 000F68  
                       _CAP2BUFH 000F67                         _CAP2BUFL 000F66  
                       ?_initLCD 0001                      __smallconst 0300  
                 __size_of_E_TOG 000E                __size_of_turnLeft 004E  
     ScanWithRange@SensorResultC 00A2       ScanWithRange@SensorResultL 009E  
     ScanWithRange@SensorResultR 00A6                    ??_setMotorPWM 0034  
               ___lwdiv@quotient 0028                         ?_sprintf 0030  
                 ?_delay_tenth_s 0001                   ___wmul@product 0028  
                       _LATAbits 000F89                         _LATCbits 000F8B  
                       _LATDbits 000F8C                         _LATEbits 000F8D  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                    turnRight@mL 0066                      turnRight@mR 0068  
                       i2u323_47 1EC4                         _PIR1bits 000F9E  
                       _RCONbits 000FD0                      _grabRightIR 1B1E  
           grabRightIR@IR_signal 0029                ___wmul@multiplier 0024  
          __end_of_ScanWithRange 0C48                     setMotorPWM@m 0032  
           _InterruptHandlerHigh 0008                         ScanIR@mL 006A  
                       ScanIR@mR 006C                     ??_grabLeftIR 0026  
                      _turnRight 1D22                   ScanIR@MoveTime 0070  
                 ScanIR@MoveType 0072                 ScanWithRange@buf 0073  
            __end_of_setMotorPWM 1746                         __Hrparam 0000  
               __size_of_SendLCD 0030                         __Lrparam 0000  
          __end_of_fullSpeedBack 1E3A                 __size_of_SetLine 0030  
             __end_of_grabLeftIR 1C02                 __size_of___awdiv 0084  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                     _ANSEL0bits 000FB8                 __size_of_delay_s 0038  
          ?_InterruptHandlerHigh 0001                ??i2_delay_tenth_s 0001  
                     sprintf@val 0064                 __size_of_initLCD 00BC  
                ___lwdiv@divisor 0026                  ___lwdiv@counter 002A  
                     ?_turnRight 0066                         __ptext10 10A6  
                       __ptext11 1D22                         __ptext20 1CD0  
                       __ptext12 1D70                         __ptext21 1B1E  
                       __ptext13 197C                         __ptext22 1B90  
                       __ptext14 1C02                         __ptext31 1EAA  
                       __ptext23 1E72                         __ptext15 160C  
                       __ptext24 1F14                         __ptext16 1FC4  
                       __ptext25 1C72                         __ptext17 1A9A  
                       __ptext26 1F44                         __ptext18 149C  
                       __ptext27 1746                         __ptext19 1DBE  
                       __ptext28 1FEA                  ??_delay_tenth_s 0024  
               __size_of_sprintf 0170                         _initRFID 00FC  
           _ClearSignalThreshold 030B                    __size_of_main 045E  
      ScanWithRange@ResultFalseC 009C               main@DirectionFound 01D3  
      ScanWithRange@ResultFalseL 009B        ScanWithRange@ResultFalseR 009D  
                  __size_of_stop 0094                       turnLeft@mL 0066  
                     turnLeft@mR 0068            __size_of_VerifySignal 00B4  
                       delay_s@i 0026                         int$flags 003C  
                       main@Move 01D5              _InterruptHandlerLow 0018  
                     _LCD_String 1C72                         _turnLeft 1D70  
                ScanWithRange@mL 006A                  ScanWithRange@mR 006C  
             enableSensor@sensor 0025               enableSensor@status 0024  
                  VerifySignal@i 002F                       _INTCONbits 000FF2  
     ScanWithRange@tenth_seconds 006E                      _setMotorPWM 160C  
                   _VerifySignal 18C8                         intlevel1 0000  
                       intlevel2 0000                        sprintf@ap 0060  
                      sprintf@sp 0030             ?_InterruptHandlerLow 0001  
                  ?_enableSensor 0024                 ___lwmod@dividend 002B  
               ??_fullSpeedAhead 0039                       _OSCCONbits 000FD3  
         ??_InterruptHandlerHigh 0005                         sprintf@c 0066  
                       sprintf@f 0032                  ___lwmod@divisor 002D  
                ___lwmod@counter 002F                      ??_turnRight 003A  
          ??_InterruptHandlerLow 0013                   ??_enableSensor 0025  
               i2delay_tenth_s@i 0003  
