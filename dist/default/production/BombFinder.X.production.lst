

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Mar 14 23:36:18 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     _ANSEL0bits	set	4024
    32  0000                     _BAUDCONbits	set	4010
    33  0000                     _CAP1BUFH	set	3945
    34  0000                     _CAP1BUFL	set	3944
    35  0000                     _CAP1CON	set	3939
    36  0000                     _CAP2BUFH	set	3943
    37  0000                     _CAP2BUFL	set	3942
    38  0000                     _CAP2CON	set	3938
    39  0000                     _INTCONbits	set	4082
    40  0000                     _IPR1bits	set	3999
    41  0000                     _LATAbits	set	3977
    42  0000                     _LATB	set	3978
    43  0000                     _LATCbits	set	3979
    44  0000                     _LATDbits	set	3980
    45  0000                     _LATEbits	set	3981
    46  0000                     _OSCCON	set	4051
    47  0000                     _OSCCONbits	set	4051
    48  0000                     _PIE1bits	set	3997
    49  0000                     _PIR1bits	set	3998
    50  0000                     _PTCON0	set	3967
    51  0000                     _PTCON1	set	3966
    52  0000                     _PTPERH	set	3962
    53  0000                     _PTPERL	set	3963
    54  0000                     _PWMCON0	set	3951
    55  0000                     _PWMCON1	set	3950
    56  0000                     _RCONbits	set	4048
    57  0000                     _RCREG	set	4014
    58  0000                     _RCSTAbits	set	4011
    59  0000                     _SPBRG	set	4015
    60  0000                     _SPBRGH	set	4016
    61  0000                     _T5CON	set	4023
    62  0000                     _TRISAbits	set	3986
    63  0000                     _TRISBbits	set	3987
    64  0000                     _TRISC	set	3988
    65  0000                     _TRISCbits	set	3988
    66  0000                     _TRISDbits	set	3989
    67  0000                     _TRISEbits	set	3990
    68  0000                     _TXREG	set	4013
    69  0000                     _TXSTAbits	set	4012
    70  0000                     _PDC0H	set	3960
    71  0000                     _PDC0L	set	3961
    72  0000                     _PDC1H	set	3958
    73  0000                     _PDC1L	set	3959
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  000BB6                     __pcinit:
    79                           	opt stack 0
    80  000BB6                     start_initialization:
    81                           	opt stack 0
    82  000BB6                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to BANK0 (16 bytes)
    86  000BB6  EE00  F081         	lfsr	0,__pbssBANK0
    87  000BBA  0E10               	movlw	16
    88  000BBC                     clear_0:
    89  000BBC  6AEE               	clrf	postinc0,c
    90  000BBE  06E8               	decf	wreg,f,c
    91  000BC0  E1FD               	bnz	clear_0
    92                           
    93                           ; Clear objects allocated to COMRAM (1 bytes)
    94  000BC2  6A44               	clrf	__pbssCOMRAM& (0+255),c
    95  000BC4                     end_of_initialization:
    96                           	opt stack 0
    97  000BC4                     __end_of__initialization:
    98                           	opt stack 0
    99  000BC4  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   100  000BC6  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   101  000BC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   102  000BCA  6EF8               	movwf	tblptru,c
   103  000BCC  0100               	movlb	0
   104  000BCE  EF15  F002         	goto	_main	;jump to C main() function
   105                           tblptru	equ	0xFF8
   106                           postinc0	equ	0xFEE
   107                           wreg	equ	0xFE8
   108                           
   109                           	psect	bssCOMRAM
   110  000044                     __pbssCOMRAM:
   111                           	opt stack 0
   112  000044                     _i:
   113                           	opt stack 0
   114  000044                     	ds	1
   115                           tblptru	equ	0xFF8
   116                           postinc0	equ	0xFEE
   117                           wreg	equ	0xFE8
   118                           
   119                           	psect	bssBANK0
   120  000081                     __pbssBANK0:
   121                           	opt stack 0
   122  000081                     _ReceivedString:
   123                           	opt stack 0
   124  000081                     	ds	16
   125                           tblptru	equ	0xFF8
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	cstackBANK0
   130  000060                     __pcstackBANK0:
   131                           	opt stack 0
   132  000060                     main@Message:
   133                           	opt stack 0
   134                           
   135                           ; 10 bytes @ 0x0
   136  000060                     	ds	10
   137  00006A                     main@test:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0xA
   141  00006A                     	ds	2
   142  00006C                     main@mode:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0xC
   146  00006C                     	ds	1
   147  00006D                     main@DirectionFound:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0xD
   151  00006D                     	ds	1
   152  00006E                     main@i:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0xE
   156  00006E                     	ds	1
   157  00006F                     main@motorL:
   158                           	opt stack 0
   159                           
   160                           ; 9 bytes @ 0xF
   161  00006F                     	ds	9
   162  000078                     main@motorR:
   163                           	opt stack 0
   164                           
   165                           ; 9 bytes @ 0x18
   166  000078                     	ds	9
   167                           tblptru	equ	0xFF8
   168                           postinc0	equ	0xFEE
   169                           wreg	equ	0xFE8
   170                           
   171                           	psect	cstackCOMRAM
   172  000001                     __pcstackCOMRAM:
   173                           	opt stack 0
   174  000001                     ??_InterruptHandlerHigh:
   175  000001                     
   176                           ; 0 bytes @ 0x0
   177  000001                     	ds	14
   178  00000F                     ??_delay_tenth_s:
   179  00000F                     ?_grabRightIR:
   180                           	opt stack 0
   181  00000F                     ?_grabLeftIR:
   182                           	opt stack 0
   183  00000F                     ?___wmul:
   184                           	opt stack 0
   185  00000F                     _initRFID$1269:
   186                           	opt stack 0
   187  00000F                     enableSensor@status:
   188                           	opt stack 0
   189  00000F                     VerifySignal@Signal:
   190                           	opt stack 0
   191  00000F                     ___wmul@multiplier:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0xE
   195  00000F                     	ds	1
   196  000010                     delay_tenth_s@tenth_seconds:
   197                           	opt stack 0
   198  000010                     enableSensor@sensor:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0xF
   202  000010                     	ds	1
   203  000011                     ??_VerifySignal:
   204  000011                     ??_grabRightIR:
   205  000011                     ??_grabLeftIR:
   206  000011                     delay_tenth_s@i:
   207                           	opt stack 0
   208  000011                     ___wmul@multiplicand:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x10
   212  000011                     	ds	2
   213  000013                     grabRightIR@IR_signal:
   214                           	opt stack 0
   215  000013                     grabLeftIR@IR_signal:
   216                           	opt stack 0
   217  000013                     ___wmul@product:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x12
   221  000013                     	ds	2
   222  000015                     ?___awdiv:
   223                           	opt stack 0
   224  000015                     grabRightIR@i:
   225                           	opt stack 0
   226  000015                     grabLeftIR@i:
   227                           	opt stack 0
   228  000015                     ___awdiv@dividend:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x14
   232  000015                     	ds	2
   233  000017                     VerifySignal@checksum:
   234                           	opt stack 0
   235  000017                     ___awdiv@divisor:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x16
   239  000017                     	ds	1
   240  000018                     VerifySignal@hexByte:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x17
   244  000018                     	ds	1
   245  000019                     ___awdiv@counter:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x18
   249  000019                     	ds	1
   250  00001A                     VerifySignal@i:
   251                           	opt stack 0
   252  00001A                     ___awdiv@sign:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x19
   256  00001A                     	ds	1
   257  00001B                     ___awdiv@quotient:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x1A
   261  00001B                     	ds	2
   262  00001D                     setMotorPWM@m:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x1C
   266  00001D                     	ds	2
   267  00001F                     ??_setMotorPWM:
   268                           
   269                           ; 0 bytes @ 0x1E
   270  00001F                     	ds	5
   271  000024                     setMotorPWM@PWMduty:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x23
   275  000024                     	ds	2
   276  000026                     stop@mL:
   277                           	opt stack 0
   278  000026                     fullSpeedAhead@mL:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x25
   282  000026                     	ds	2
   283  000028                     stop@mR:
   284                           	opt stack 0
   285  000028                     fullSpeedAhead@mR:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x27
   289  000028                     	ds	2
   290  00002A                     
   291                           ; 0 bytes @ 0x29
   292  00002A                     	ds	1
   293  00002B                     turnLeft@mL:
   294                           	opt stack 0
   295  00002B                     turnRight@mL:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x2A
   299  00002B                     	ds	2
   300  00002D                     turnLeft@mR:
   301                           	opt stack 0
   302  00002D                     turnRight@mR:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x2C
   306  00002D                     	ds	2
   307  00002F                     ScanWithRange@mL:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x2E
   311  00002F                     	ds	2
   312  000031                     ScanWithRange@mR:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x30
   316  000031                     	ds	2
   317  000033                     ScanWithRange@tenth_seconds:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x32
   321  000033                     	ds	1
   322  000034                     ??_ScanWithRange:
   323                           
   324                           ; 0 bytes @ 0x33
   325  000034                     	ds	2
   326  000036                     ScanWithRange@SensorResultL:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x35
   330  000036                     	ds	4
   331  00003A                     ScanWithRange@SensorResultC:
   332                           	opt stack 0
   333                           
   334                           ; 4 bytes @ 0x39
   335  00003A                     	ds	4
   336  00003E                     ScanWithRange@SensorResultR:
   337                           	opt stack 0
   338                           
   339                           ; 4 bytes @ 0x3D
   340  00003E                     	ds	4
   341  000042                     ??_main:
   342                           
   343                           ; 0 bytes @ 0x41
   344  000042                     	ds	2
   345                           tblptru	equ	0xFF8
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349 ;;
   350 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   351 ;;
   352 ;; *************** function _main *****************
   353 ;; Defined at:
   354 ;;		line 29 in file "main.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  PathTaken     100    0        unsigned char [100]
   359 ;;  Message        10    0[BANK0 ] unsigned char [10]
   360 ;;  motorR          9   24[BANK0 ] struct DC_motor
   361 ;;  motorL          9   15[BANK0 ] struct DC_motor
   362 ;;  SignalStreng    3    0        unsigned char [3]
   363 ;;  test            2   10[BANK0 ] unsigned int 
   364 ;;  i               1   14[BANK0 ] unsigned char 
   365 ;;  DirectionFou    1   13[BANK0 ] unsigned char 
   366 ;;  mode            1   12[BANK0 ] unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;		None               void
   369 ;; Registers used:
   370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   376 ;;      Params:         0       0       0       0
   377 ;;      Locals:         0      33       0       0
   378 ;;      Temps:          2       0       0       0
   379 ;;      Totals:         2      33       0       0
   380 ;;Total ram usage:       35 bytes
   381 ;; Hardware stack levels required when called:    6
   382 ;; This function calls:
   383 ;;		_ScanWithRange
   384 ;;		_VerifySignal
   385 ;;		_initIR
   386 ;;		_initMotorPWM
   387 ;;		_initRFID
   388 ;; This function is called by:
   389 ;;		Startup code after reset
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text0
   394  00042A                     __ptext0:
   395                           	opt stack 0
   396  00042A                     _main:
   397                           	opt stack 25
   398                           
   399                           ;main.c: 32: unsigned char Message[10];
   400                           ;main.c: 33: unsigned char i=0;
   401                           
   402                           ;incstack = 0
   403  00042A  0E00               	movlw	0
   404  00042C  0100               	movlb	0	; () banked
   405  00042E  6F6E               	movwf	main@i& (0+255),b
   406                           
   407                           ;main.c: 34: unsigned char mode=0;
   408  000430  0E00               	movlw	0
   409  000432  0100               	movlb	0	; () banked
   410  000434  6F6C               	movwf	main@mode& (0+255),b
   411                           
   412                           ;main.c: 35: char DirectionFound=0;
   413  000436  0E00               	movlw	0
   414  000438  0100               	movlb	0	; () banked
   415  00043A  6F6D               	movwf	main@DirectionFound& (0+255),b
   416                           
   417                           ;main.c: 36: unsigned char SignalStrength[3];
   418                           ;main.c: 37: char PathTaken[100];
   419                           ;main.c: 38: unsigned int test=0;
   420  00043C  0E00               	movlw	0
   421  00043E  0100               	movlb	0	; () banked
   422  000440  6F6B               	movwf	(main@test+1)& (0+255),b
   423  000442  0E00               	movlw	0
   424  000444  6F6A               	movwf	main@test& (0+255),b
   425                           
   426                           ; BSR set to: 0
   427                           ;main.c: 41: INTCONbits.GIEH = 1;
   428  000446  8EF2               	bsf	intcon,7,c	;volatile
   429                           
   430                           ; BSR set to: 0
   431                           ;main.c: 42: RCONbits.IPEN = 1;
   432  000448  8ED0               	bsf	4048,7,c	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 43: INTCONbits.GIEL = 1;
   436  00044A  8CF2               	bsf	intcon,6,c	;volatile
   437                           
   438                           ; BSR set to: 0
   439                           ;main.c: 44: INTCONbits.INT0IE = 1;
   440  00044C  88F2               	bsf	intcon,4,c	;volatile
   441                           
   442                           ; BSR set to: 0
   443                           ;main.c: 45: INTCONbits.PEIE = 1;
   444  00044E  8CF2               	bsf	intcon,6,c	;volatile
   445                           
   446                           ; BSR set to: 0
   447                           ;main.c: 47: IPR1bits.RCIP=1;
   448  000450  8A9F               	bsf	3999,5,c	;volatile
   449                           
   450                           ; BSR set to: 0
   451                           ;main.c: 48: PIE1bits.RCIE=1;
   452  000452  8A9D               	bsf	3997,5,c	;volatile
   453                           
   454                           ;main.c: 51: struct DC_motor motorL, motorR;
   455                           ;main.c: 52: motorL.power=0;
   456  000454  0E00               	movlw	0
   457  000456  0100               	movlb	0	; () banked
   458  000458  6F6F               	movwf	main@motorL& (0+255),b
   459                           
   460                           ;main.c: 53: motorL.direction=1;
   461  00045A  0E01               	movlw	1
   462  00045C  0100               	movlb	0	; () banked
   463  00045E  6F70               	movwf	(main@motorL+1)& (0+255),b
   464                           
   465                           ; BSR set to: 0
   466                           ;main.c: 54: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   467  000460  0E79               	movlw	121
   468  000462  0100               	movlb	0	; () banked
   469  000464  6F71               	movwf	(main@motorL+2)& (0+255),b
   470  000466  0E0F               	movlw	15
   471  000468  0100               	movlb	0	; () banked
   472  00046A  6F72               	movwf	(main@motorL+3)& (0+255),b
   473                           
   474                           ; BSR set to: 0
   475                           ;main.c: 55: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   476  00046C  0E78               	movlw	120
   477  00046E  0100               	movlb	0	; () banked
   478  000470  6F73               	movwf	(main@motorL+4)& (0+255),b
   479  000472  0E0F               	movlw	15
   480  000474  0100               	movlb	0	; () banked
   481  000476  6F74               	movwf	(main@motorL+5)& (0+255),b
   482                           
   483                           ;main.c: 56: motorL.dir_pin=0;
   484  000478  0E00               	movlw	0
   485  00047A  0100               	movlb	0	; () banked
   486  00047C  6F75               	movwf	(main@motorL+6)& (0+255),b
   487                           
   488                           ;main.c: 57: motorL.PWMperiod=199;
   489  00047E  0E00               	movlw	0
   490  000480  0100               	movlb	0	; () banked
   491  000482  6F77               	movwf	(main@motorL+8)& (0+255),b
   492  000484  0EC7               	movlw	199
   493  000486  6F76               	movwf	(main@motorL+7)& (0+255),b
   494                           
   495                           ;main.c: 59: motorR.power=0;
   496  000488  0E00               	movlw	0
   497  00048A  0100               	movlb	0	; () banked
   498  00048C  6F78               	movwf	main@motorR& (0+255),b
   499                           
   500                           ;main.c: 60: motorR.direction=1;
   501  00048E  0E01               	movlw	1
   502  000490  0100               	movlb	0	; () banked
   503  000492  6F79               	movwf	(main@motorR+1)& (0+255),b
   504                           
   505                           ; BSR set to: 0
   506                           ;main.c: 61: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   507  000494  0E77               	movlw	119
   508  000496  0100               	movlb	0	; () banked
   509  000498  6F7A               	movwf	(main@motorR+2)& (0+255),b
   510  00049A  0E0F               	movlw	15
   511  00049C  0100               	movlb	0	; () banked
   512  00049E  6F7B               	movwf	(main@motorR+3)& (0+255),b
   513                           
   514                           ; BSR set to: 0
   515                           ;main.c: 62: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   516  0004A0  0E76               	movlw	118
   517  0004A2  0100               	movlb	0	; () banked
   518  0004A4  6F7C               	movwf	(main@motorR+4)& (0+255),b
   519  0004A6  0E0F               	movlw	15
   520  0004A8  0100               	movlb	0	; () banked
   521  0004AA  6F7D               	movwf	(main@motorR+5)& (0+255),b
   522                           
   523                           ;main.c: 63: motorR.dir_pin=2;
   524  0004AC  0E02               	movlw	2
   525  0004AE  0100               	movlb	0	; () banked
   526  0004B0  6F7E               	movwf	(main@motorR+6)& (0+255),b
   527                           
   528                           ;main.c: 64: motorR.PWMperiod=199;
   529  0004B2  0E00               	movlw	0
   530  0004B4  0100               	movlb	0	; () banked
   531  0004B6  6F80               	movwf	(main@motorR+8)& (0+255),b
   532  0004B8  0EC7               	movlw	199
   533  0004BA  6F7F               	movwf	(main@motorR+7)& (0+255),b
   534                           
   535                           ;main.c: 66: OSCCON = 0x72;
   536  0004BC  0E72               	movlw	114
   537  0004BE  6ED3               	movwf	4051,c	;volatile
   538  0004C0                     l47:
   539  0004C0  B4D3               	btfsc	4051,2,c	;volatile
   540  0004C2  D08E               	goto	l1971
   541  0004C4  D7FD               	goto	l47
   542  0004C6                     l1923:
   543                           
   544                           ;main.c: 74: initMotorPWM();
   545  0004C6  EC7D  F005         	call	_initMotorPWM	;wreg free
   546                           
   547                           ;main.c: 75: initRFID();
   548  0004CA  ECBC  F005         	call	_initRFID	;wreg free
   549                           
   550                           ;main.c: 77: mode = 1;
   551  0004CE  0E01               	movlw	1
   552  0004D0  D02D               	goto	L1
   553  0004D2                     l1927:
   554                           
   555                           ; BSR set to: 0
   556                           ;main.c: 81: initIR();
   557  0004D2  ECCC  F005         	call	_initIR	;wreg free
   558                           
   559                           ;main.c: 83: if (DirectionFound==0) {
   560  0004D6  0100               	movlb	0	; () banked
   561  0004D8  516D               	movf	main@DirectionFound& (0+255),w,b
   562  0004DA  0100               	movlb	0	; () banked
   563  0004DC  A4D8               	btfss	status,2,c
   564  0004DE  D00D               	goto	l1933
   565                           
   566                           ; BSR set to: 0
   567                           ;main.c: 85: DirectionFound = ScanWithRange(&motorL, &motorR, 6);
   568  0004E0  0E6F               	movlw	low main@motorL
   569  0004E2  6E2F               	movwf	ScanWithRange@mL,c
   570  0004E4  0E00               	movlw	high main@motorL
   571  0004E6  6E30               	movwf	ScanWithRange@mL+1,c
   572  0004E8  0E78               	movlw	low main@motorR
   573  0004EA  6E31               	movwf	ScanWithRange@mR,c
   574  0004EC  0E00               	movlw	high main@motorR
   575  0004EE  6E32               	movwf	ScanWithRange@mR+1,c
   576  0004F0  0E06               	movlw	6
   577  0004F2  6E33               	movwf	ScanWithRange@tenth_seconds,c
   578  0004F4  EC56  F000         	call	_ScanWithRange	;wreg free
   579  0004F8  D010               	goto	L2
   580  0004FA                     l1933:
   581                           
   582                           ; BSR set to: 0
   583  0004FA  0100               	movlb	0	; () banked
   584  0004FC  056D               	decf	main@DirectionFound& (0+255),w,b
   585  0004FE  A4D8               	btfss	status,2,c
   586  000500  D00F               	goto	l1937
   587                           
   588                           ; BSR set to: 0
   589                           ;main.c: 88: DirectionFound = ScanWithRange(&motorL, &motorR, 3);
   590  000502  0E6F               	movlw	low main@motorL
   591  000504  6E2F               	movwf	ScanWithRange@mL,c
   592  000506  0E00               	movlw	high main@motorL
   593  000508  6E30               	movwf	ScanWithRange@mL+1,c
   594  00050A  0E78               	movlw	low main@motorR
   595  00050C  6E31               	movwf	ScanWithRange@mR,c
   596  00050E  0E00               	movlw	high main@motorR
   597  000510  6E32               	movwf	ScanWithRange@mR+1,c
   598  000512  0E03               	movlw	3
   599  000514  6E33               	movwf	ScanWithRange@tenth_seconds,c
   600  000516  EC56  F000         	call	_ScanWithRange	;wreg free
   601  00051A                     L2:
   602  00051A  0100               	movlb	0	; () banked
   603  00051C  6F6D               	movwf	main@DirectionFound& (0+255),b
   604                           
   605                           ;main.c: 89: } else if (DirectionFound==2) {
   606  00051E  D060               	goto	l1971
   607  000520                     l1937:
   608                           
   609                           ; BSR set to: 0
   610  000520  0E02               	movlw	2
   611  000522  0100               	movlb	0	; () banked
   612  000524  196D               	xorwf	main@DirectionFound& (0+255),w,b
   613  000526  A4D8               	btfss	status,2,c
   614  000528  D05B               	goto	l1971
   615                           
   616                           ; BSR set to: 0
   617                           ;main.c: 90: mode=2;
   618  00052A  0E02               	movlw	2
   619  00052C                     L1:
   620  00052C  0100               	movlb	0	; () banked
   621  00052E  6F6C               	movwf	main@mode& (0+255),b
   622                           
   623                           ; BSR set to: 0
   624                           ;main.c: 91: }
   625                           ;main.c: 93: break;
   626                           
   627                           ; BSR set to: 0
   628                           
   629                           ; BSR set to: 0
   630  000530  D057               	goto	l1971
   631  000532                     l1941:
   632                           
   633                           ; BSR set to: 0
   634                           ;main.c: 98: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   635  000532  0E03               	movlw	3
   636  000534  0100               	movlb	0	; () banked
   637  000536  1990               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   638  000538  A4D8               	btfss	status,2,c
   639  00053A  D002               	goto	u1200
   640  00053C  0E01               	movlw	1
   641  00053E  D001               	goto	u1202
   642  000540                     u1200:
   643  000540  0E00               	movlw	0
   644  000542                     u1202:
   645  000542  6E42               	movwf	??_main& (0+255),c
   646  000544  0E02               	movlw	2
   647  000546  0100               	movlb	0	; () banked
   648  000548  1981               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   649  00054A  A4D8               	btfss	status,2,c
   650  00054C  D002               	goto	u1210
   651  00054E  0E01               	movlw	1
   652  000550  D001               	goto	u1212
   653  000552                     u1210:
   654  000552  0E00               	movlw	0
   655  000554                     u1212:
   656  000554  1442               	andwf	??_main,w,c
   657  000556  A0E8               	btfss	wreg,0,c
   658  000558  D043               	goto	l1971
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 99: if (VerifySignal(ReceivedString)){
   662  00055A  0E81               	movlw	low _ReceivedString
   663  00055C  6E0F               	movwf	VerifySignal@Signal,c
   664  00055E  0E00               	movlw	high _ReceivedString
   665  000560  6E10               	movwf	VerifySignal@Signal+1,c
   666  000562  EC97  F003         	call	_VerifySignal	;wreg free
   667  000566  0900               	iorlw	0
   668  000568  B4D8               	btfsc	status,2,c
   669  00056A  D03A               	goto	l1971
   670                           
   671                           ;main.c: 101: for (i=0; i<10; i++){
   672  00056C  0E00               	movlw	0
   673  00056E  0100               	movlb	0	; () banked
   674  000570  6F6E               	movwf	main@i& (0+255),b
   675  000572                     l1947:
   676                           
   677                           ; BSR set to: 0
   678  000572  0E09               	movlw	9
   679  000574  0100               	movlb	0	; () banked
   680  000576  656E               	cpfsgt	main@i& (0+255),b
   681  000578  D001               	goto	l1951
   682  00057A  D01C               	goto	l1957
   683  00057C                     l1951:
   684                           
   685                           ; BSR set to: 0
   686                           ;main.c: 102: Message[i] = ReceivedString[i+1];
   687  00057C  0100               	movlb	0	; () banked
   688  00057E  516E               	movf	main@i& (0+255),w,b
   689  000580  6E42               	movwf	??_main& (0+255),c
   690  000582  6A43               	clrf	(??_main+1)& (0+255),c
   691  000584  0E01               	movlw	1
   692  000586  2642               	addwf	??_main,f,c
   693  000588  0E00               	movlw	0
   694  00058A  2243               	addwfc	??_main+1,f,c
   695  00058C  0E81               	movlw	low _ReceivedString
   696  00058E  2442               	addwf	??_main,w,c
   697  000590  6ED9               	movwf	fsr2l,c
   698  000592  0E00               	movlw	high _ReceivedString
   699  000594  2043               	addwfc	??_main+1,w,c
   700  000596  6EDA               	movwf	fsr2h,c
   701  000598  0100               	movlb	0	; () banked
   702  00059A  516E               	movf	main@i& (0+255),w,b
   703  00059C  0D01               	mullw	1
   704  00059E  0E60               	movlw	low main@Message
   705  0005A0  24F3               	addwf	prodl,w,c
   706  0005A2  6EE1               	movwf	fsr1l,c
   707  0005A4  0E00               	movlw	high main@Message
   708  0005A6  20F4               	addwfc	prodh,w,c
   709  0005A8  6EE2               	movwf	fsr1h,c
   710  0005AA  CFDF FFE7          	movff	indf2,indf1
   711                           
   712                           ; BSR set to: 0
   713  0005AE  0100               	movlb	0	; () banked
   714  0005B0  2B6E               	incf	main@i& (0+255),f,b
   715  0005B2  D7DF               	goto	l1947
   716  0005B4                     l1957:
   717                           
   718                           ; BSR set to: 0
   719                           ;main.c: 103: }
   720                           ;main.c: 105: for (i=0; i<16; i++) {
   721  0005B4  0E00               	movlw	0
   722  0005B6  0100               	movlb	0	; () banked
   723  0005B8  6F6E               	movwf	main@i& (0+255),b
   724  0005BA                     l1959:
   725                           
   726                           ; BSR set to: 0
   727  0005BA  0E0F               	movlw	15
   728  0005BC  0100               	movlb	0	; () banked
   729  0005BE  656E               	cpfsgt	main@i& (0+255),b
   730  0005C0  D001               	goto	l1963
   731  0005C2  D00E               	goto	l1971
   732  0005C4                     l1963:
   733                           
   734                           ; BSR set to: 0
   735                           ;main.c: 106: ReceivedString[i]=0;
   736  0005C4  0100               	movlb	0	; () banked
   737  0005C6  516E               	movf	main@i& (0+255),w,b
   738  0005C8  0D01               	mullw	1
   739  0005CA  0E81               	movlw	low _ReceivedString
   740  0005CC  24F3               	addwf	prodl,w,c
   741  0005CE  6ED9               	movwf	fsr2l,c
   742  0005D0  0E00               	movlw	high _ReceivedString
   743  0005D2  20F4               	addwfc	prodh,w,c
   744  0005D4  6EDA               	movwf	fsr2h,c
   745  0005D6  0E00               	movlw	0
   746  0005D8  6EDF               	movwf	indf2,c
   747                           
   748                           ; BSR set to: 0
   749  0005DA  0100               	movlb	0	; () banked
   750  0005DC  2B6E               	incf	main@i& (0+255),f,b
   751  0005DE  D7ED               	goto	l1959
   752  0005E0                     l1971:
   753  0005E0  0100               	movlb	0	; () banked
   754  0005E2  516C               	movf	main@mode& (0+255),w,b
   755                           
   756                           ; Switch size 1, requested type "space"
   757                           ; Number of cases is 4, Range of values is 0 to 3
   758                           ; switch strategies available:
   759                           ; Name         Instructions Cycles
   760                           ; simple_byte           13     7 (average)
   761                           ;	Chosen strategy is simple_byte
   762  0005E4  0A00               	xorlw	0	; case 0
   763  0005E6  B4D8               	btfsc	status,2,c
   764  0005E8  D76E               	goto	l1923
   765  0005EA  0A01               	xorlw	1	; case 1
   766  0005EC  B4D8               	btfsc	status,2,c
   767  0005EE  D771               	goto	l1927
   768  0005F0  0A03               	xorlw	3	; case 2
   769  0005F2  B4D8               	btfsc	status,2,c
   770  0005F4  D79E               	goto	l1941
   771  0005F6  0A01               	xorlw	1	; case 3
   772                           
   773                           ; BSR set to: 0
   774                           
   775                           ; BSR set to: 0
   776  0005F8  D7F3               	goto	l1971
   777  0005FA                     __end_of_main:
   778                           	opt stack 0
   779                           tblptru	equ	0xFF8
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           intcon	equ	0xFF2
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           indf1	equ	0xFE7
   786                           fsr1h	equ	0xFE2
   787                           fsr1l	equ	0xFE1
   788                           indf2	equ	0xFDF
   789                           fsr2h	equ	0xFDA
   790                           fsr2l	equ	0xFD9
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _initRFID *****************
   794 ;; Defined at:
   795 ;;		line 5 in file "RFID_Reader.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;		None               void
   802 ;; Registers used:
   803 ;;		wreg, status,2
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   809 ;;      Params:         0       0       0       0
   810 ;;      Locals:         1       0       0       0
   811 ;;      Temps:          0       0       0       0
   812 ;;      Totals:         1       0       0       0
   813 ;;Total ram usage:        1 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    1
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000B78                     __ptext1:
   825                           	opt stack 0
   826  000B78                     _initRFID:
   827                           	opt stack 29
   828                           
   829                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   830                           
   831                           ; BSR set to: 0
   832                           ;incstack = 0
   833  000B78  0E01               	movlw	1
   834  000B7A  6E0F               	movwf	_initRFID$1269,c
   835  000B7C  5094               	movf	3988,w,c	;volatile
   836  000B7E  C00F  FF94         	movff	_initRFID$1269,3988	;volatile
   837                           
   838                           ;RFID_Reader.c: 10: SPBRG=205;
   839  000B82  0ECD               	movlw	205
   840  000B84  6EAF               	movwf	4015,c	;volatile
   841                           
   842                           ;RFID_Reader.c: 11: SPBRGH=0;
   843  000B86  0E00               	movlw	0
   844  000B88  6EB0               	movwf	4016,c	;volatile
   845                           
   846                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   847  000B8A  86AA               	bsf	4010,3,c	;volatile
   848                           
   849                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   850  000B8C  84AC               	bsf	4012,2,c	;volatile
   851                           
   852                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   853  000B8E  88AB               	bsf	4011,4,c	;volatile
   854                           
   855                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   856  000B90  8EAB               	bsf	4011,7,c	;volatile
   857                           
   858                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   859  000B92  98AC               	bcf	4012,4,c	;volatile
   860                           
   861                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   862  000B94  9CAB               	bcf	4011,6,c	;volatile
   863  000B96  0012               	return		;funcret
   864  000B98                     __end_of_initRFID:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           prodh	equ	0xFF4
   868                           prodl	equ	0xFF3
   869                           intcon	equ	0xFF2
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           indf1	equ	0xFE7
   873                           fsr1h	equ	0xFE2
   874                           fsr1l	equ	0xFE1
   875                           indf2	equ	0xFDF
   876                           fsr2h	equ	0xFDA
   877                           fsr2l	equ	0xFD9
   878                           status	equ	0xFD8
   879                           
   880 ;; *************** function _initMotorPWM *****************
   881 ;; Defined at:
   882 ;;		line 4 in file "dc_motor.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;		None               void
   889 ;; Registers used:
   890 ;;		wreg, status,2
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   896 ;;      Params:         0       0       0       0
   897 ;;      Locals:         0       0       0       0
   898 ;;      Temps:          0       0       0       0
   899 ;;      Totals:         0       0       0       0
   900 ;;Total ram usage:        0 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    1
   903 ;; This function calls:
   904 ;;		Nothing
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text2
   911  000AFA                     __ptext2:
   912                           	opt stack 0
   913  000AFA                     _initMotorPWM:
   914                           	opt stack 29
   915                           
   916                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   917                           
   918                           ;incstack = 0
   919  000AFA  0E00               	movlw	0
   920  000AFC  6E7F               	movwf	3967,c	;volatile
   921                           
   922                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   923  000AFE  0E80               	movlw	128
   924  000B00  6E7E               	movwf	3966,c	;volatile
   925                           
   926                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   927  000B02  0E6F               	movlw	111
   928  000B04  6E6F               	movwf	3951,c	;volatile
   929                           
   930                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   931  000B06  0E00               	movlw	0
   932  000B08  6E6E               	movwf	3950,c	;volatile
   933                           
   934                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   935  000B0A  0EC7               	movlw	199
   936  000B0C  6E7B               	movwf	3963,c	;volatile
   937                           
   938                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   939  000B0E  0E00               	movlw	0
   940  000B10  6E7A               	movwf	3962,c	;volatile
   941                           
   942                           ;dc_motor.c: 13: PDC0L = 0<<2;
   943  000B12  0E00               	movlw	0
   944  000B14  6E79               	movwf	3961,c	;volatile
   945                           
   946                           ;dc_motor.c: 14: PDC0H = 0>>6;
   947  000B16  0E00               	movlw	0
   948  000B18  6E78               	movwf	3960,c	;volatile
   949                           
   950                           ;dc_motor.c: 15: PDC1L = 0<<2;
   951  000B1A  0E00               	movlw	0
   952  000B1C  6E77               	movwf	3959,c	;volatile
   953                           
   954                           ;dc_motor.c: 16: PDC1H = 0>>6;
   955  000B1E  0E00               	movlw	0
   956  000B20  6E76               	movwf	3958,c	;volatile
   957                           
   958                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   959  000B22  9093               	bcf	3987,0,c	;volatile
   960                           
   961                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   962  000B24  9293               	bcf	3987,1,c	;volatile
   963                           
   964                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   965  000B26  9493               	bcf	3987,2,c	;volatile
   966                           
   967                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   968  000B28  9693               	bcf	3987,3,c	;volatile
   969  000B2A  0012               	return		;funcret
   970  000B2C                     __end_of_initMotorPWM:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           prodh	equ	0xFF4
   974                           prodl	equ	0xFF3
   975                           intcon	equ	0xFF2
   976                           postinc0	equ	0xFEE
   977                           wreg	equ	0xFE8
   978                           indf1	equ	0xFE7
   979                           fsr1h	equ	0xFE2
   980                           fsr1l	equ	0xFE1
   981                           indf2	equ	0xFDF
   982                           fsr2h	equ	0xFDA
   983                           fsr2l	equ	0xFD9
   984                           status	equ	0xFD8
   985                           
   986 ;; *************** function _initIR *****************
   987 ;; Defined at:
   988 ;;		line 30 in file "IR_Reading.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;		None               void
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1002 ;;      Params:         0       0       0       0
  1003 ;;      Locals:         0       0       0       0
  1004 ;;      Temps:          0       0       0       0
  1005 ;;      Totals:         0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    1
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text3
  1017  000B98                     __ptext3:
  1018                           	opt stack 0
  1019  000B98                     _initIR:
  1020                           	opt stack 29
  1021                           
  1022                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  1023                           
  1024                           ;incstack = 0
  1025  000B98  9489               	bcf	3977,2,c	;volatile
  1026                           
  1027                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  1028  000B9A  9689               	bcf	3977,3,c	;volatile
  1029                           
  1030                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  1031  000B9C  8492               	bsf	3986,2,c	;volatile
  1032                           
  1033                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  1034  000B9E  8692               	bsf	3986,3,c	;volatile
  1035                           
  1036                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  1037  000BA0  94B8               	bcf	4024,2,c	;volatile
  1038                           
  1039                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  1040  000BA2  96B8               	bcf	4024,3,c	;volatile
  1041                           
  1042                           ;IR_Reading.c: 48: CAP1CON=0b00000110;
  1043  000BA4  0E06               	movlw	6
  1044  000BA6  6E63               	movwf	3939,c	;volatile
  1045                           
  1046                           ;IR_Reading.c: 49: CAP2CON=0b00000110;
  1047  000BA8  0E06               	movlw	6
  1048  000BAA  6E62               	movwf	3938,c	;volatile
  1049                           
  1050                           ;IR_Reading.c: 52: TRISEbits.RE0=0;
  1051  000BAC  9096               	bcf	3990,0,c	;volatile
  1052                           
  1053                           ;IR_Reading.c: 55: TRISEbits.RE1=0;
  1054  000BAE  9296               	bcf	3990,1,c	;volatile
  1055                           
  1056                           ;IR_Reading.c: 65: T5CON=0b01011001;
  1057  000BB0  0E59               	movlw	89
  1058  000BB2  6EB7               	movwf	4023,c	;volatile
  1059  000BB4  0012               	return		;funcret
  1060  000BB6                     __end_of_initIR:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           indf1	equ	0xFE7
  1069                           fsr1h	equ	0xFE2
  1070                           fsr1l	equ	0xFE1
  1071                           indf2	equ	0xFDF
  1072                           fsr2h	equ	0xFDA
  1073                           fsr2l	equ	0xFD9
  1074                           status	equ	0xFD8
  1075                           
  1076 ;; *************** function _VerifySignal *****************
  1077 ;; Defined at:
  1078 ;;		line 56 in file "RFID_Reader.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1081 ;;		 -> ReceivedString(16), 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  hexByte         2   23[COMRAM] unsigned int 
  1084 ;;  i               1   25[COMRAM] unsigned char 
  1085 ;;  checksum        1   22[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      unsigned char 
  1088 ;; Registers used:
  1089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1095 ;;      Params:         2       0       0       0
  1096 ;;      Locals:         4       0       0       0
  1097 ;;      Temps:          6       0       0       0
  1098 ;;      Totals:        12       0       0       0
  1099 ;;Total ram usage:       12 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    1
  1102 ;; This function calls:
  1103 ;;		Nothing
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text4
  1110  00072E                     __ptext4:
  1111                           	opt stack 0
  1112  00072E                     _VerifySignal:
  1113                           	opt stack 29
  1114                           
  1115                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1116                           
  1117                           ;incstack = 0
  1118  00072E  0E00               	movlw	0
  1119  000730  6E17               	movwf	VerifySignal@checksum,c
  1120                           
  1121                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1122  000732  0E00               	movlw	0
  1123  000734  6E19               	movwf	VerifySignal@hexByte+1,c
  1124  000736  0E00               	movlw	0
  1125  000738  6E18               	movwf	VerifySignal@hexByte,c
  1126                           
  1127                           ;RFID_Reader.c: 59: unsigned char i=0;
  1128  00073A  0E00               	movlw	0
  1129  00073C  6E1A               	movwf	VerifySignal@i,c
  1130                           
  1131                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1132  00073E  EE20 F004          	lfsr	2,4
  1133  000742  500F               	movf	VerifySignal@Signal,w,c
  1134  000744  26D9               	addwf	fsr2l,f,c
  1135  000746  5010               	movf	VerifySignal@Signal+1,w,c
  1136  000748  22DA               	addwfc	fsr2h,f,c
  1137  00074A  50DF               	movf	indf2,w,c
  1138  00074C  6E11               	movwf	??_VerifySignal& (0+255),c
  1139  00074E  EE20 F003          	lfsr	2,3
  1140  000752  500F               	movf	VerifySignal@Signal,w,c
  1141  000754  26D9               	addwf	fsr2l,f,c
  1142  000756  5010               	movf	VerifySignal@Signal+1,w,c
  1143  000758  22DA               	addwfc	fsr2h,f,c
  1144  00075A  50DF               	movf	indf2,w,c
  1145  00075C  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1146  00075E  5012               	movf	??_VerifySignal+1,w,c
  1147  000760  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1148  000762  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1149  000764  5011               	movf	??_VerifySignal,w,c
  1150  000766  2413               	addwf	??_VerifySignal+2,w,c
  1151  000768  6E18               	movwf	VerifySignal@hexByte,c
  1152  00076A  0E00               	movlw	0
  1153  00076C  2014               	addwfc	??_VerifySignal+3,w,c
  1154  00076E  6E19               	movwf	VerifySignal@hexByte+1,c
  1155                           
  1156                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1157  000770  EE20 F002          	lfsr	2,2
  1158  000774  500F               	movf	VerifySignal@Signal,w,c
  1159  000776  26D9               	addwf	fsr2l,f,c
  1160  000778  5010               	movf	VerifySignal@Signal+1,w,c
  1161  00077A  22DA               	addwfc	fsr2h,f,c
  1162  00077C  50DF               	movf	indf2,w,c
  1163  00077E  1818               	xorwf	VerifySignal@hexByte,w,c
  1164  000780  6E17               	movwf	VerifySignal@checksum,c
  1165                           
  1166                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1167  000782  0E05               	movlw	5
  1168  000784  6E1A               	movwf	VerifySignal@i,c
  1169  000786                     l1871:
  1170  000786  0E09               	movlw	9
  1171  000788  641A               	cpfsgt	VerifySignal@i,c
  1172  00078A  D001               	goto	l1875
  1173  00078C  D028               	goto	l1883
  1174  00078E                     l1875:
  1175                           
  1176                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1177  00078E  501A               	movf	VerifySignal@i,w,c
  1178  000790  6E11               	movwf	??_VerifySignal& (0+255),c
  1179  000792  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1180  000794  0E01               	movlw	1
  1181  000796  2611               	addwf	??_VerifySignal,f,c
  1182  000798  0E00               	movlw	0
  1183  00079A  2212               	addwfc	??_VerifySignal+1,f,c
  1184  00079C  5011               	movf	??_VerifySignal,w,c
  1185  00079E  240F               	addwf	VerifySignal@Signal,w,c
  1186  0007A0  6ED9               	movwf	fsr2l,c
  1187  0007A2  5012               	movf	??_VerifySignal+1,w,c
  1188  0007A4  2010               	addwfc	VerifySignal@Signal+1,w,c
  1189  0007A6  6EDA               	movwf	fsr2h,c
  1190  0007A8  50DF               	movf	indf2,w,c
  1191  0007AA  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1192  0007AC  501A               	movf	VerifySignal@i,w,c
  1193  0007AE  0D01               	mullw	1
  1194  0007B0  50F3               	movf	prodl,w,c
  1195  0007B2  240F               	addwf	VerifySignal@Signal,w,c
  1196  0007B4  6ED9               	movwf	fsr2l,c
  1197  0007B6  50F4               	movf	prodh,w,c
  1198  0007B8  2010               	addwfc	VerifySignal@Signal+1,w,c
  1199  0007BA  6EDA               	movwf	fsr2h,c
  1200  0007BC  50DF               	movf	indf2,w,c
  1201  0007BE  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1202  0007C0  5014               	movf	??_VerifySignal+3,w,c
  1203  0007C2  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1204  0007C4  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1205  0007C6  5013               	movf	??_VerifySignal+2,w,c
  1206  0007C8  2415               	addwf	??_VerifySignal+4,w,c
  1207  0007CA  6E18               	movwf	VerifySignal@hexByte,c
  1208  0007CC  0E00               	movlw	0
  1209  0007CE  2016               	addwfc	??_VerifySignal+5,w,c
  1210  0007D0  6E19               	movwf	VerifySignal@hexByte+1,c
  1211                           
  1212                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1213  0007D2  5017               	movf	VerifySignal@checksum,w,c
  1214  0007D4  1818               	xorwf	VerifySignal@hexByte,w,c
  1215  0007D6  6E17               	movwf	VerifySignal@checksum,c
  1216  0007D8  0E02               	movlw	2
  1217  0007DA  261A               	addwf	VerifySignal@i,f,c
  1218  0007DC  D7D4               	goto	l1871
  1219  0007DE                     l1883:
  1220                           
  1221                           ;RFID_Reader.c: 69: }
  1222                           ;RFID_Reader.c: 72: return 1;
  1223  0007DE  0E01               	movlw	1
  1224  0007E0  0012               	return	
  1225  0007E2                     __end_of_VerifySignal:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           prodh	equ	0xFF4
  1229                           prodl	equ	0xFF3
  1230                           intcon	equ	0xFF2
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           indf1	equ	0xFE7
  1234                           fsr1h	equ	0xFE2
  1235                           fsr1l	equ	0xFE1
  1236                           indf2	equ	0xFDF
  1237                           fsr2h	equ	0xFDA
  1238                           fsr2l	equ	0xFD9
  1239                           status	equ	0xFD8
  1240                           
  1241 ;; *************** function _ScanWithRange *****************
  1242 ;; Defined at:
  1243 ;;		line 75 in file "Movement.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1246 ;;		 -> main@motorL(9), 
  1247 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1248 ;;		 -> main@motorR(9), 
  1249 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  SensorResult    4   61[COMRAM] unsigned int [2]
  1252 ;;  SensorResult    4   57[COMRAM] unsigned int [2]
  1253 ;;  SensorResult    4   53[COMRAM] unsigned int [2]
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      unsigned char 
  1256 ;; Registers used:
  1257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1263 ;;      Params:         5       0       0       0
  1264 ;;      Locals:        12       0       0       0
  1265 ;;      Temps:          2       0       0       0
  1266 ;;      Totals:        19       0       0       0
  1267 ;;Total ram usage:       19 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    5
  1270 ;; This function calls:
  1271 ;;		___awdiv
  1272 ;;		_delay_tenth_s
  1273 ;;		_enableSensor
  1274 ;;		_grabLeftIR
  1275 ;;		_grabRightIR
  1276 ;;		_stop
  1277 ;;		_turnLeft
  1278 ;;		_turnRight
  1279 ;; This function is called by:
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text5
  1285  0000AC                     __ptext5:
  1286                           	opt stack 0
  1287  0000AC                     _ScanWithRange:
  1288                           	opt stack 25
  1289                           
  1290                           ;Movement.c: 78: unsigned int SensorResultL[2];
  1291                           ;Movement.c: 79: unsigned int SensorResultC[2];
  1292                           ;Movement.c: 80: unsigned int SensorResultR[2];
  1293                           ;Movement.c: 83: enableSensor(0, 1);
  1294                           
  1295                           ;incstack = 0
  1296  0000AC  0E01               	movlw	1
  1297  0000AE  6E0F               	movwf	enableSensor@status,c
  1298  0000B0  0E00               	movlw	0
  1299  0000B2  ECA9  F005         	call	_enableSensor
  1300                           
  1301                           ;Movement.c: 84: enableSensor(1, 1);
  1302  0000B6  0E01               	movlw	1
  1303  0000B8  6E0F               	movwf	enableSensor@status,c
  1304  0000BA  0E01               	movlw	1
  1305  0000BC  ECA9  F005         	call	_enableSensor
  1306                           
  1307                           ;Movement.c: 86: stop(mL,mR);
  1308  0000C0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1309  0000C4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1310  0000C8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1311  0000CC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1312  0000D0  ECF1  F003         	call	_stop	;wreg free
  1313                           
  1314                           ;Movement.c: 87: delay_tenth_s(tenth_seconds);
  1315  0000D4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1316  0000D6  EC61  F005         	call	_delay_tenth_s
  1317                           
  1318                           ;Movement.c: 88: SensorResultC[0]=grabLeftIR();
  1319  0000DA  ECE5  F004         	call	_grabLeftIR	;wreg free
  1320  0000DE  C00F  F03A         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1321  0000E2  C010  F03B         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1322                           
  1323                           ;Movement.c: 89: SensorResultC[1]=grabRightIR();
  1324  0000E6  ECB3  F004         	call	_grabRightIR	;wreg free
  1325  0000EA  C00F  F03C         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1326  0000EE  C010  F03D         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1327                           
  1328                           ;Movement.c: 92: turnLeft(mL,mR);
  1329  0000F2  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1330  0000F6  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1331  0000FA  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1332  0000FE  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1333  000102  EC3C  F005         	call	_turnLeft	;wreg free
  1334                           
  1335                           ;Movement.c: 93: delay_tenth_s(tenth_seconds);
  1336  000106  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1337  000108  EC61  F005         	call	_delay_tenth_s
  1338                           
  1339                           ;Movement.c: 95: stop(mL,mR);
  1340  00010C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1341  000110  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1342  000114  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1343  000118  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1344  00011C  ECF1  F003         	call	_stop	;wreg free
  1345                           
  1346                           ;Movement.c: 96: delay_tenth_s(tenth_seconds);
  1347  000120  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1348  000122  EC61  F005         	call	_delay_tenth_s
  1349                           
  1350                           ;Movement.c: 97: SensorResultL[0]=grabLeftIR();
  1351  000126  ECE5  F004         	call	_grabLeftIR	;wreg free
  1352  00012A  C00F  F036         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1353  00012E  C010  F037         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1354                           
  1355                           ;Movement.c: 98: SensorResultL[1]=grabRightIR();
  1356  000132  ECB3  F004         	call	_grabRightIR	;wreg free
  1357  000136  C00F  F038         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1358  00013A  C010  F039         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1359                           
  1360                           ;Movement.c: 101: turnRight(mL,mR);
  1361  00013E  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1362  000142  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1363  000146  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1364  00014A  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1365  00014E  EC17  F005         	call	_turnRight	;wreg free
  1366                           
  1367                           ;Movement.c: 102: delay_tenth_s(2*tenth_seconds);
  1368  000152  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1369  000154  0D02               	mullw	2
  1370  000156  50F3               	movf	prodl,w,c
  1371  000158  EC61  F005         	call	_delay_tenth_s
  1372                           
  1373                           ;Movement.c: 104: stop(mL,mR);
  1374  00015C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1375  000160  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1376  000164  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1377  000168  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1378  00016C  ECF1  F003         	call	_stop	;wreg free
  1379                           
  1380                           ;Movement.c: 105: delay_tenth_s(tenth_seconds);
  1381  000170  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1382  000172  EC61  F005         	call	_delay_tenth_s
  1383                           
  1384                           ;Movement.c: 106: SensorResultR[0]=grabLeftIR();
  1385  000176  ECE5  F004         	call	_grabLeftIR	;wreg free
  1386  00017A  C00F  F03E         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1387  00017E  C010  F03F         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1388                           
  1389                           ;Movement.c: 107: SensorResultR[1]=grabRightIR();
  1390  000182  ECB3  F004         	call	_grabRightIR	;wreg free
  1391  000186  C00F  F040         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1392  00018A  C010  F041         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1393                           
  1394                           ;Movement.c: 110: enableSensor(0, 0);
  1395  00018E  0E00               	movlw	0
  1396  000190  6E0F               	movwf	enableSensor@status,c
  1397  000192  0E00               	movlw	0
  1398  000194  ECA9  F005         	call	_enableSensor
  1399                           
  1400                           ;Movement.c: 111: enableSensor(1, 0);
  1401  000198  0E00               	movlw	0
  1402  00019A  6E0F               	movwf	enableSensor@status,c
  1403  00019C  0E01               	movlw	1
  1404  00019E  ECA9  F005         	call	_enableSensor
  1405                           
  1406                           ;Movement.c: 119: if (SensorResultL[0]>SensorResultL[1]) {
  1407  0001A2  5036               	movf	ScanWithRange@SensorResultL,w,c
  1408  0001A4  5C38               	subwf	ScanWithRange@SensorResultL+2,w,c
  1409  0001A6  5037               	movf	ScanWithRange@SensorResultL+1,w,c
  1410  0001A8  5839               	subwfb	ScanWithRange@SensorResultL+3,w,c
  1411  0001AA  B0D8               	btfsc	status,0,c
  1412  0001AC  D01B               	goto	l1775
  1413                           
  1414                           ;Movement.c: 121: turnLeft(mL,mR);
  1415  0001AE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1416  0001B2  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1417  0001B6  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1418  0001BA  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1419  0001BE  EC3C  F005         	call	_turnLeft	;wreg free
  1420                           
  1421                           ;Movement.c: 122: delay_tenth_s(3*tenth_seconds);
  1422  0001C2  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1423  0001C4  0D03               	mullw	3
  1424  0001C6  50F3               	movf	prodl,w,c
  1425  0001C8  EC61  F005         	call	_delay_tenth_s
  1426                           
  1427                           ;Movement.c: 123: stop(mL,mR);
  1428  0001CC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1429  0001D0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1430  0001D4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1431  0001D8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1432  0001DC  ECF1  F003         	call	_stop	;wreg free
  1433  0001E0                     l1769:
  1434                           
  1435                           ;Movement.c: 124: return 0;
  1436  0001E0  0E00               	movlw	0
  1437  0001E2  0012               	return	
  1438  0001E4                     l1775:
  1439  0001E4  5040               	movf	ScanWithRange@SensorResultR+2,w,c
  1440  0001E6  5C3E               	subwf	ScanWithRange@SensorResultR,w,c
  1441  0001E8  5041               	movf	ScanWithRange@SensorResultR+3,w,c
  1442  0001EA  583F               	subwfb	ScanWithRange@SensorResultR+1,w,c
  1443  0001EC  B0D8               	btfsc	status,0,c
  1444  0001EE  D018               	goto	l1789
  1445                           
  1446                           ;Movement.c: 127: turnRight(mL,mR);
  1447  0001F0  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1448  0001F4  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1449  0001F8  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1450  0001FC  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1451  000200  EC17  F005         	call	_turnRight	;wreg free
  1452                           
  1453                           ;Movement.c: 128: delay_tenth_s(tenth_seconds);
  1454  000204  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1455  000206  EC61  F005         	call	_delay_tenth_s
  1456                           
  1457                           ;Movement.c: 129: stop(mL,mR);
  1458  00020A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1459  00020E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1460  000212  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1461  000216  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1462  00021A  ECF1  F003         	call	_stop	;wreg free
  1463  00021E  D7E0               	goto	l1769
  1464  000220                     l1789:
  1465  000220  5038               	movf	ScanWithRange@SensorResultL+2,w,c
  1466  000222  5C36               	subwf	ScanWithRange@SensorResultL,w,c
  1467  000224  5039               	movf	ScanWithRange@SensorResultL+3,w,c
  1468  000226  5837               	subwfb	ScanWithRange@SensorResultL+1,w,c
  1469  000228  B0D8               	btfsc	status,0,c
  1470  00022A  D02B               	goto	l1805
  1471  00022C  503A               	movf	ScanWithRange@SensorResultC,w,c
  1472  00022E  5C3C               	subwf	ScanWithRange@SensorResultC+2,w,c
  1473  000230  503B               	movf	ScanWithRange@SensorResultC+1,w,c
  1474  000232  583D               	subwfb	ScanWithRange@SensorResultC+3,w,c
  1475  000234  B0D8               	btfsc	status,0,c
  1476  000236  D025               	goto	l1805
  1477                           
  1478                           ;Movement.c: 135: turnLeft(mL,mR);
  1479  000238  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1480  00023C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1481  000240  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1482  000244  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1483  000248  EC3C  F005         	call	_turnLeft	;wreg free
  1484                           
  1485                           ;Movement.c: 136: delay_tenth_s((3*tenth_seconds)/2);
  1486  00024C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1487  00024E  0D03               	mullw	3
  1488  000250  CFF3 F015          	movff	prodl,___awdiv@dividend
  1489  000254  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1490  000258  0E00               	movlw	0
  1491  00025A  6E18               	movwf	___awdiv@divisor+1,c
  1492  00025C  0E02               	movlw	2
  1493  00025E  6E17               	movwf	___awdiv@divisor,c
  1494  000260  EC39  F004         	call	___awdiv	;wreg free
  1495  000264  5015               	movf	?___awdiv,w,c
  1496  000266  EC61  F005         	call	_delay_tenth_s
  1497                           
  1498                           ;Movement.c: 137: stop(mL,mR);
  1499  00026A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1500  00026E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1501  000272  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1502  000276  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1503  00027A  ECF1  F003         	call	_stop	;wreg free
  1504  00027E                     l1799:
  1505                           
  1506                           ;Movement.c: 138: return 1;
  1507  00027E  0E01               	movlw	1
  1508  000280  0012               	return	
  1509  000282                     l1805:
  1510  000282  503E               	movf	ScanWithRange@SensorResultR,w,c
  1511  000284  5C40               	subwf	ScanWithRange@SensorResultR+2,w,c
  1512  000286  503F               	movf	ScanWithRange@SensorResultR+1,w,c
  1513  000288  5841               	subwfb	ScanWithRange@SensorResultR+3,w,c
  1514  00028A  B0D8               	btfsc	status,0,c
  1515  00028C  D027               	goto	l1821
  1516  00028E  503C               	movf	ScanWithRange@SensorResultC+2,w,c
  1517  000290  5C3A               	subwf	ScanWithRange@SensorResultC,w,c
  1518  000292  503D               	movf	ScanWithRange@SensorResultC+3,w,c
  1519  000294  583B               	subwfb	ScanWithRange@SensorResultC+1,w,c
  1520  000296  B0D8               	btfsc	status,0,c
  1521  000298  D021               	goto	l1821
  1522                           
  1523                           ;Movement.c: 141: turnLeft(mL,mR);
  1524  00029A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1525  00029E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1526  0002A2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1527  0002A6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1528  0002AA  EC3C  F005         	call	_turnLeft	;wreg free
  1529                           
  1530                           ;Movement.c: 142: delay_tenth_s((tenth_seconds)/2);
  1531  0002AE  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  1532  0002B2  6A16               	clrf	___awdiv@dividend+1,c
  1533  0002B4  0E00               	movlw	0
  1534  0002B6  6E18               	movwf	___awdiv@divisor+1,c
  1535  0002B8  0E02               	movlw	2
  1536  0002BA  6E17               	movwf	___awdiv@divisor,c
  1537  0002BC  EC39  F004         	call	___awdiv	;wreg free
  1538  0002C0  5015               	movf	?___awdiv,w,c
  1539  0002C2  EC61  F005         	call	_delay_tenth_s
  1540                           
  1541                           ;Movement.c: 143: stop(mL,mR);
  1542  0002C6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1543  0002CA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1544  0002CE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1545  0002D2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1546  0002D6  ECF1  F003         	call	_stop	;wreg free
  1547  0002DA  D7D1               	goto	l1799
  1548  0002DC                     l1821:
  1549  0002DC  C036  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1550  0002E0  C037  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1551  0002E4  1E34               	comf	??_ScanWithRange,f,c
  1552  0002E6  1E35               	comf	??_ScanWithRange+1,f,c
  1553  0002E8  4A34               	infsnz	??_ScanWithRange,f,c
  1554  0002EA  2A35               	incf	??_ScanWithRange+1,f,c
  1555  0002EC  5038               	movf	ScanWithRange@SensorResultL+2,w,c
  1556  0002EE  2634               	addwf	??_ScanWithRange,f,c
  1557  0002F0  5039               	movf	ScanWithRange@SensorResultL+3,w,c
  1558  0002F2  2235               	addwfc	??_ScanWithRange+1,f,c
  1559  0002F4  0EE9               	movlw	233
  1560  0002F6  5C34               	subwf	??_ScanWithRange,w,c
  1561  0002F8  0E03               	movlw	3
  1562  0002FA  5835               	subwfb	??_ScanWithRange+1,w,c
  1563  0002FC  B0D8               	btfsc	status,0,c
  1564  0002FE  D014               	goto	l1825
  1565  000300  EE20  F038         	lfsr	2,ScanWithRange@SensorResultL+2
  1566  000304  CFDE F034          	movff	postinc2,??_ScanWithRange
  1567  000308  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1568  00030C  1E34               	comf	??_ScanWithRange,f,c
  1569  00030E  1E35               	comf	??_ScanWithRange+1,f,c
  1570  000310  4A34               	infsnz	??_ScanWithRange,f,c
  1571  000312  2A35               	incf	??_ScanWithRange+1,f,c
  1572  000314  5036               	movf	ScanWithRange@SensorResultL,w,c
  1573  000316  2634               	addwf	??_ScanWithRange,f,c
  1574  000318  5037               	movf	ScanWithRange@SensorResultL+1,w,c
  1575  00031A  2235               	addwfc	??_ScanWithRange+1,f,c
  1576  00031C  0EE9               	movlw	233
  1577  00031E  5C34               	subwf	??_ScanWithRange,w,c
  1578  000320  0E03               	movlw	3
  1579  000322  5835               	subwfb	??_ScanWithRange+1,w,c
  1580  000324  A0D8               	btfss	status,0,c
  1581  000326  D01B               	goto	l1837
  1582  000328                     l1825:
  1583                           
  1584                           ;Movement.c: 149: turnLeft(mL,mR);
  1585  000328  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1586  00032C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1587  000330  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1588  000334  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1589  000338  EC3C  F005         	call	_turnLeft	;wreg free
  1590                           
  1591                           ;Movement.c: 150: delay_tenth_s(2*(tenth_seconds));
  1592  00033C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1593  00033E  0D02               	mullw	2
  1594  000340  50F3               	movf	prodl,w,c
  1595  000342  EC61  F005         	call	_delay_tenth_s
  1596                           
  1597                           ;Movement.c: 151: stop(mL,mR);
  1598  000346  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1599  00034A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1600  00034E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1601  000352  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1602  000356  ECF1  F003         	call	_stop	;wreg free
  1603  00035A                     l1831:
  1604                           
  1605                           ;Movement.c: 152: return 2;
  1606  00035A  0E02               	movlw	2
  1607  00035C  0012               	return	
  1608  00035E                     l1837:
  1609  00035E  C03A  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1610  000362  C03B  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1611  000366  1E34               	comf	??_ScanWithRange,f,c
  1612  000368  1E35               	comf	??_ScanWithRange+1,f,c
  1613  00036A  4A34               	infsnz	??_ScanWithRange,f,c
  1614  00036C  2A35               	incf	??_ScanWithRange+1,f,c
  1615  00036E  503C               	movf	ScanWithRange@SensorResultC+2,w,c
  1616  000370  2634               	addwf	??_ScanWithRange,f,c
  1617  000372  503D               	movf	ScanWithRange@SensorResultC+3,w,c
  1618  000374  2235               	addwfc	??_ScanWithRange+1,f,c
  1619  000376  0EE9               	movlw	233
  1620  000378  5C34               	subwf	??_ScanWithRange,w,c
  1621  00037A  0E03               	movlw	3
  1622  00037C  5835               	subwfb	??_ScanWithRange+1,w,c
  1623  00037E  B0D8               	btfsc	status,0,c
  1624  000380  D014               	goto	l1841
  1625  000382  EE20  F03C         	lfsr	2,ScanWithRange@SensorResultC+2
  1626  000386  CFDE F034          	movff	postinc2,??_ScanWithRange
  1627  00038A  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1628  00038E  1E34               	comf	??_ScanWithRange,f,c
  1629  000390  1E35               	comf	??_ScanWithRange+1,f,c
  1630  000392  4A34               	infsnz	??_ScanWithRange,f,c
  1631  000394  2A35               	incf	??_ScanWithRange+1,f,c
  1632  000396  503A               	movf	ScanWithRange@SensorResultC,w,c
  1633  000398  2634               	addwf	??_ScanWithRange,f,c
  1634  00039A  503B               	movf	ScanWithRange@SensorResultC+1,w,c
  1635  00039C  2235               	addwfc	??_ScanWithRange+1,f,c
  1636  00039E  0EE9               	movlw	233
  1637  0003A0  5C34               	subwf	??_ScanWithRange,w,c
  1638  0003A2  0E03               	movlw	3
  1639  0003A4  5835               	subwfb	??_ScanWithRange+1,w,c
  1640  0003A6  A0D8               	btfss	status,0,c
  1641  0003A8  D018               	goto	l1853
  1642  0003AA                     l1841:
  1643                           
  1644                           ;Movement.c: 155: turnLeft(mL,mR);
  1645  0003AA  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1646  0003AE  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1647  0003B2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1648  0003B6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1649  0003BA  EC3C  F005         	call	_turnLeft	;wreg free
  1650                           
  1651                           ;Movement.c: 156: delay_tenth_s(tenth_seconds);
  1652  0003BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1653  0003C0  EC61  F005         	call	_delay_tenth_s
  1654                           
  1655                           ;Movement.c: 157: stop(mL,mR);
  1656  0003C4  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1657  0003C8  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1658  0003CC  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1659  0003D0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1660  0003D4  ECF1  F003         	call	_stop	;wreg free
  1661  0003D8  D7C0               	goto	l1831
  1662  0003DA                     l1853:
  1663  0003DA  C03E  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1664  0003DE  C03F  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1665  0003E2  1E34               	comf	??_ScanWithRange,f,c
  1666  0003E4  1E35               	comf	??_ScanWithRange+1,f,c
  1667  0003E6  4A34               	infsnz	??_ScanWithRange,f,c
  1668  0003E8  2A35               	incf	??_ScanWithRange+1,f,c
  1669  0003EA  5040               	movf	ScanWithRange@SensorResultR+2,w,c
  1670  0003EC  2634               	addwf	??_ScanWithRange,f,c
  1671  0003EE  5041               	movf	ScanWithRange@SensorResultR+3,w,c
  1672  0003F0  2235               	addwfc	??_ScanWithRange+1,f,c
  1673  0003F2  0EE9               	movlw	233
  1674  0003F4  5C34               	subwf	??_ScanWithRange,w,c
  1675  0003F6  0E03               	movlw	3
  1676  0003F8  5835               	subwfb	??_ScanWithRange+1,w,c
  1677  0003FA  B0D8               	btfsc	status,0,c
  1678  0003FC  D7AE               	goto	l1831
  1679  0003FE  EE20  F040         	lfsr	2,ScanWithRange@SensorResultR+2
  1680  000402  CFDE F034          	movff	postinc2,??_ScanWithRange
  1681  000406  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1682  00040A  1E34               	comf	??_ScanWithRange,f,c
  1683  00040C  1E35               	comf	??_ScanWithRange+1,f,c
  1684  00040E  4A34               	infsnz	??_ScanWithRange,f,c
  1685  000410  2A35               	incf	??_ScanWithRange+1,f,c
  1686  000412  503E               	movf	ScanWithRange@SensorResultR,w,c
  1687  000414  2634               	addwf	??_ScanWithRange,f,c
  1688  000416  503F               	movf	ScanWithRange@SensorResultR+1,w,c
  1689  000418  2235               	addwfc	??_ScanWithRange+1,f,c
  1690  00041A  0EE9               	movlw	233
  1691  00041C  5C34               	subwf	??_ScanWithRange,w,c
  1692  00041E  0E03               	movlw	3
  1693  000420  5835               	subwfb	??_ScanWithRange+1,w,c
  1694  000422  B0D8               	btfsc	status,0,c
  1695  000424  D79A               	goto	l1831
  1696                           
  1697                           ;Movement.c: 162: }
  1698                           ;Movement.c: 164: return 0;
  1699                           
  1700                           ;Movement.c: 161: return 2;
  1701  000426  0E00               	movlw	0
  1702  000428  0012               	return	
  1703  00042A                     __end_of_ScanWithRange:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           indf1	equ	0xFE7
  1712                           fsr1h	equ	0xFE2
  1713                           fsr1l	equ	0xFE1
  1714                           indf2	equ	0xFDF
  1715                           postinc2	equ	0xFDE
  1716                           postdec2	equ	0xFDD
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _turnRight *****************
  1722 ;; Defined at:
  1723 ;;		line 98 in file "dc_motor.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1726 ;;		 -> main@motorL(9), 
  1727 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1728 ;;		 -> main@motorR(9), 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1740 ;;      Params:         4       0       0       0
  1741 ;;      Locals:         0       0       0       0
  1742 ;;      Temps:          0       0       0       0
  1743 ;;      Totals:         4       0       0       0
  1744 ;;Total ram usage:        4 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    4
  1747 ;; This function calls:
  1748 ;;		_fullSpeedAhead
  1749 ;;		_stop
  1750 ;; This function is called by:
  1751 ;;		_ScanWithRange
  1752 ;;		_ScanIR
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text6
  1757  000A2E                     __ptext6:
  1758                           	opt stack 0
  1759  000A2E                     _turnRight:
  1760                           	opt stack 25
  1761                           
  1762                           ;dc_motor.c: 100: stop(mL, mR);
  1763                           
  1764                           ;incstack = 0
  1765  000A2E  C02B  F026         	movff	turnRight@mL,stop@mL
  1766  000A32  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1767  000A36  C02D  F028         	movff	turnRight@mR,stop@mR
  1768  000A3A  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1769  000A3E  ECF1  F003         	call	_stop	;wreg free
  1770                           
  1771                           ;dc_motor.c: 102: mL->direction=1;
  1772  000A42  EE20 F001          	lfsr	2,1
  1773  000A46  502B               	movf	turnRight@mL,w,c
  1774  000A48  26D9               	addwf	fsr2l,f,c
  1775  000A4A  502C               	movf	turnRight@mL+1,w,c
  1776  000A4C  22DA               	addwfc	fsr2h,f,c
  1777  000A4E  0E01               	movlw	1
  1778  000A50  6EDF               	movwf	indf2,c
  1779                           
  1780                           ;dc_motor.c: 103: mR->direction=0;
  1781  000A52  EE20 F001          	lfsr	2,1
  1782  000A56  502D               	movf	turnRight@mR,w,c
  1783  000A58  26D9               	addwf	fsr2l,f,c
  1784  000A5A  502E               	movf	turnRight@mR+1,w,c
  1785  000A5C  22DA               	addwfc	fsr2h,f,c
  1786  000A5E  0E00               	movlw	0
  1787  000A60  6EDF               	movwf	indf2,c
  1788                           
  1789                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1790  000A62  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1791  000A66  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1792  000A6A  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1793  000A6E  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1794  000A72  EC7B  F004         	call	_fullSpeedAhead	;wreg free
  1795  000A76  0012               	return		;funcret
  1796  000A78                     __end_of_turnRight:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           prodh	equ	0xFF4
  1800                           prodl	equ	0xFF3
  1801                           intcon	equ	0xFF2
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           indf1	equ	0xFE7
  1805                           fsr1h	equ	0xFE2
  1806                           fsr1l	equ	0xFE1
  1807                           indf2	equ	0xFDF
  1808                           postinc2	equ	0xFDE
  1809                           postdec2	equ	0xFDD
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _turnLeft *****************
  1815 ;; Defined at:
  1816 ;;		line 87 in file "dc_motor.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1819 ;;		 -> main@motorL(9), 
  1820 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1821 ;;		 -> main@motorR(9), 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;		None               void
  1826 ;; Registers used:
  1827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1833 ;;      Params:         4       0       0       0
  1834 ;;      Locals:         0       0       0       0
  1835 ;;      Temps:          0       0       0       0
  1836 ;;      Totals:         4       0       0       0
  1837 ;;Total ram usage:        4 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		_fullSpeedAhead
  1842 ;;		_stop
  1843 ;; This function is called by:
  1844 ;;		_ScanWithRange
  1845 ;;		_ScanIR
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text7
  1850  000A78                     __ptext7:
  1851                           	opt stack 0
  1852  000A78                     _turnLeft:
  1853                           	opt stack 25
  1854                           
  1855                           ;dc_motor.c: 89: stop(mL, mR);
  1856                           
  1857                           ;incstack = 0
  1858  000A78  C02B  F026         	movff	turnLeft@mL,stop@mL
  1859  000A7C  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1860  000A80  C02D  F028         	movff	turnLeft@mR,stop@mR
  1861  000A84  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1862  000A88  ECF1  F003         	call	_stop	;wreg free
  1863                           
  1864                           ;dc_motor.c: 91: mL->direction=0;
  1865  000A8C  EE20 F001          	lfsr	2,1
  1866  000A90  502B               	movf	turnLeft@mL,w,c
  1867  000A92  26D9               	addwf	fsr2l,f,c
  1868  000A94  502C               	movf	turnLeft@mL+1,w,c
  1869  000A96  22DA               	addwfc	fsr2h,f,c
  1870  000A98  0E00               	movlw	0
  1871  000A9A  6EDF               	movwf	indf2,c
  1872                           
  1873                           ;dc_motor.c: 92: mR->direction=1;
  1874  000A9C  EE20 F001          	lfsr	2,1
  1875  000AA0  502D               	movf	turnLeft@mR,w,c
  1876  000AA2  26D9               	addwf	fsr2l,f,c
  1877  000AA4  502E               	movf	turnLeft@mR+1,w,c
  1878  000AA6  22DA               	addwfc	fsr2h,f,c
  1879  000AA8  0E01               	movlw	1
  1880  000AAA  6EDF               	movwf	indf2,c
  1881                           
  1882                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1883  000AAC  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1884  000AB0  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1885  000AB4  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1886  000AB8  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1887  000ABC  EC7B  F004         	call	_fullSpeedAhead	;wreg free
  1888  000AC0  0012               	return		;funcret
  1889  000AC2                     __end_of_turnLeft:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           prodh	equ	0xFF4
  1893                           prodl	equ	0xFF3
  1894                           intcon	equ	0xFF2
  1895                           postinc0	equ	0xFEE
  1896                           wreg	equ	0xFE8
  1897                           indf1	equ	0xFE7
  1898                           fsr1h	equ	0xFE2
  1899                           fsr1l	equ	0xFE1
  1900                           indf2	equ	0xFDF
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _stop *****************
  1908 ;; Defined at:
  1909 ;;		line 67 in file "dc_motor.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1912 ;;		 -> main@motorL(9), 
  1913 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1914 ;;		 -> main@motorR(9), 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;		None
  1917 ;; Return value:  Size  Location     Type
  1918 ;;		None               void
  1919 ;; Registers used:
  1920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1926 ;;      Params:         4       0       0       0
  1927 ;;      Locals:         0       0       0       0
  1928 ;;      Temps:          0       0       0       0
  1929 ;;      Totals:         4       0       0       0
  1930 ;;Total ram usage:        4 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    3
  1933 ;; This function calls:
  1934 ;;		_setMotorPWM
  1935 ;; This function is called by:
  1936 ;;		_turnLeft
  1937 ;;		_turnRight
  1938 ;;		_ScanWithRange
  1939 ;;		_ScanIR
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text8
  1944  0007E2                     __ptext8:
  1945                           	opt stack 0
  1946  0007E2                     _stop:
  1947                           	opt stack 25
  1948                           
  1949                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1950                           
  1951                           ;incstack = 0
  1952  0007E2  D028               	goto	l1601
  1953  0007E4                     l1587:
  1954                           
  1955                           ;dc_motor.c: 71: if(mL->power>0){
  1956  0007E4  C026  FFD9         	movff	stop@mL,fsr2l
  1957  0007E8  C027  FFDA         	movff	stop@mL+1,fsr2h
  1958  0007EC  50DF               	movf	indf2,w,c
  1959  0007EE  B4D8               	btfsc	status,2,c
  1960  0007F0  D005               	goto	l1591
  1961                           
  1962                           ;dc_motor.c: 72: mL->power--;
  1963  0007F2  C026  FFD9         	movff	stop@mL,fsr2l
  1964  0007F6  C027  FFDA         	movff	stop@mL+1,fsr2h
  1965  0007FA  06DF               	decf	indf2,f,c
  1966  0007FC                     l1591:
  1967                           
  1968                           ;dc_motor.c: 73: }
  1969                           ;dc_motor.c: 74: if(mR->power>0){
  1970  0007FC  C028  FFD9         	movff	stop@mR,fsr2l
  1971  000800  C029  FFDA         	movff	stop@mR+1,fsr2h
  1972  000804  50DF               	movf	indf2,w,c
  1973  000806  B4D8               	btfsc	status,2,c
  1974  000808  D005               	goto	l1595
  1975                           
  1976                           ;dc_motor.c: 75: mR->power--;
  1977  00080A  C028  FFD9         	movff	stop@mR,fsr2l
  1978  00080E  C029  FFDA         	movff	stop@mR+1,fsr2h
  1979  000812  06DF               	decf	indf2,f,c
  1980  000814                     l1595:
  1981                           
  1982                           ;dc_motor.c: 76: }
  1983                           ;dc_motor.c: 77: setMotorPWM(mL);
  1984  000814  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1985  000818  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1986  00081C  ECFD  F002         	call	_setMotorPWM	;wreg free
  1987                           
  1988                           ;dc_motor.c: 78: setMotorPWM(mR);
  1989  000820  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1990  000824  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1991  000828  ECFD  F002         	call	_setMotorPWM	;wreg free
  1992                           
  1993                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1994  00082C  0E21               	movlw	33
  1995  00082E                     u1307:
  1996  00082E  2EE8               	decfsz	wreg,f,c
  1997  000830  D7FE               	goto	u1307
  1998  000832  F000               	nop	
  1999  000834                     l1601:
  2000  000834  C026  FFD9         	movff	stop@mL,fsr2l
  2001  000838  C027  FFDA         	movff	stop@mL+1,fsr2h
  2002  00083C  50DF               	movf	indf2,w,c
  2003  00083E  A4D8               	btfss	status,2,c
  2004  000840  D7D1               	goto	l1587
  2005  000842  C028  FFD9         	movff	stop@mR,fsr2l
  2006  000846  C029  FFDA         	movff	stop@mR+1,fsr2h
  2007  00084A  50DF               	movf	indf2,w,c
  2008  00084C  A4D8               	btfss	status,2,c
  2009  00084E  D7CA               	goto	l1587
  2010                           
  2011                           ;dc_motor.c: 80: }
  2012                           ;dc_motor.c: 81: mL->direction=1;
  2013  000850  EE20 F001          	lfsr	2,1
  2014  000854  5026               	movf	stop@mL,w,c
  2015  000856  26D9               	addwf	fsr2l,f,c
  2016  000858  5027               	movf	stop@mL+1,w,c
  2017  00085A  22DA               	addwfc	fsr2h,f,c
  2018  00085C  0E01               	movlw	1
  2019  00085E  6EDF               	movwf	indf2,c
  2020                           
  2021                           ;dc_motor.c: 82: mR->direction=1;
  2022  000860  EE20 F001          	lfsr	2,1
  2023  000864  5028               	movf	stop@mR,w,c
  2024  000866  26D9               	addwf	fsr2l,f,c
  2025  000868  5029               	movf	stop@mR+1,w,c
  2026  00086A  22DA               	addwfc	fsr2h,f,c
  2027  00086C  0E01               	movlw	1
  2028  00086E  6EDF               	movwf	indf2,c
  2029  000870  0012               	return		;funcret
  2030  000872                     __end_of_stop:
  2031                           	opt stack 0
  2032                           tblptru	equ	0xFF8
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           indf1	equ	0xFE7
  2039                           fsr1h	equ	0xFE2
  2040                           fsr1l	equ	0xFE1
  2041                           indf2	equ	0xFDF
  2042                           postinc2	equ	0xFDE
  2043                           postdec2	equ	0xFDD
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _fullSpeedAhead *****************
  2049 ;; Defined at:
  2050 ;;		line 108 in file "dc_motor.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2053 ;;		 -> main@motorL(9), 
  2054 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2055 ;;		 -> main@motorR(9), 
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;		None               void
  2060 ;; Registers used:
  2061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2067 ;;      Params:         4       0       0       0
  2068 ;;      Locals:         0       0       0       0
  2069 ;;      Temps:          1       0       0       0
  2070 ;;      Totals:         5       0       0       0
  2071 ;;Total ram usage:        5 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    3
  2074 ;; This function calls:
  2075 ;;		_setMotorPWM
  2076 ;; This function is called by:
  2077 ;;		_turnLeft
  2078 ;;		_turnRight
  2079 ;;		_fullSpeedBack
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text9
  2084  0008F6                     __ptext9:
  2085                           	opt stack 0
  2086  0008F6                     _fullSpeedAhead:
  2087                           	opt stack 25
  2088                           
  2089                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2090                           
  2091                           ;incstack = 0
  2092  0008F6  D028               	goto	l135
  2093  0008F8                     l1609:
  2094                           
  2095                           ;dc_motor.c: 112: if(mL->power<100){
  2096  0008F8  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2097  0008FC  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2098  000900  0E64               	movlw	100
  2099  000902  60DF               	cpfslt	indf2,c
  2100  000904  D005               	goto	l1613
  2101                           
  2102                           ;dc_motor.c: 113: mL->power++;
  2103  000906  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2104  00090A  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2105  00090E  2ADF               	incf	indf2,f,c
  2106  000910                     l1613:
  2107                           
  2108                           ;dc_motor.c: 114: }
  2109                           ;dc_motor.c: 115: if(mR->power<100){
  2110  000910  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2111  000914  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2112  000918  0E64               	movlw	100
  2113  00091A  60DF               	cpfslt	indf2,c
  2114  00091C  D005               	goto	l1617
  2115                           
  2116                           ;dc_motor.c: 116: mR->power++;
  2117  00091E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2118  000922  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2119  000926  2ADF               	incf	indf2,f,c
  2120  000928                     l1617:
  2121                           
  2122                           ;dc_motor.c: 117: }
  2123                           ;dc_motor.c: 118: setMotorPWM(mL);
  2124  000928  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2125  00092C  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2126  000930  ECFD  F002         	call	_setMotorPWM	;wreg free
  2127                           
  2128                           ;dc_motor.c: 119: setMotorPWM(mR);
  2129  000934  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2130  000938  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2131  00093C  ECFD  F002         	call	_setMotorPWM	;wreg free
  2132                           
  2133                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2134  000940  0E21               	movlw	33
  2135  000942                     u1317:
  2136  000942  2EE8               	decfsz	wreg,f,c
  2137  000944  D7FE               	goto	u1317
  2138  000946  F000               	nop	
  2139  000948                     l135:
  2140  000948  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2141  00094C  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2142  000950  0E63               	movlw	99
  2143  000952  64DF               	cpfsgt	indf2,c
  2144  000954  D7D1               	goto	l1609
  2145  000956  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2146  00095A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2147  00095E  0E63               	movlw	99
  2148  000960  64DF               	cpfsgt	indf2,c
  2149  000962  D7CA               	goto	l1609
  2150  000964  0012               	return	
  2151  000966                     __end_of_fullSpeedAhead:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           indf1	equ	0xFE7
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _setMotorPWM *****************
  2170 ;; Defined at:
  2171 ;;		line 26 in file "dc_motor.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2174 ;;		 -> main@motorR(9), main@motorL(9), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  PWMduty         2   35[COMRAM] int 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;		None               void
  2179 ;; Registers used:
  2180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2186 ;;      Params:         2       0       0       0
  2187 ;;      Locals:         2       0       0       0
  2188 ;;      Temps:          5       0       0       0
  2189 ;;      Totals:         9       0       0       0
  2190 ;;Total ram usage:        9 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    2
  2193 ;; This function calls:
  2194 ;;		___awdiv
  2195 ;;		___wmul
  2196 ;; This function is called by:
  2197 ;;		_stop
  2198 ;;		_fullSpeedAhead
  2199 ;;		_setMotorFullSpeed
  2200 ;;		_stopMotor
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text10
  2205  0005FA                     __ptext10:
  2206                           	opt stack 0
  2207  0005FA                     _setMotorPWM:
  2208                           	opt stack 25
  2209                           
  2210                           ;dc_motor.c: 28: int PWMduty;
  2211                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2212                           
  2213                           ;incstack = 0
  2214  0005FA  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2215  0005FE  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2216  000602  50DF               	movf	indf2,w,c
  2217  000604  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2218  000606  501F               	movf	??_setMotorPWM,w,c
  2219  000608  6E0F               	movwf	___wmul@multiplier,c
  2220  00060A  6A10               	clrf	___wmul@multiplier+1,c
  2221  00060C  EE20 F007          	lfsr	2,7
  2222  000610  501D               	movf	setMotorPWM@m,w,c
  2223  000612  26D9               	addwf	fsr2l,f,c
  2224  000614  501E               	movf	setMotorPWM@m+1,w,c
  2225  000616  22DA               	addwfc	fsr2h,f,c
  2226  000618  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2227  00061C  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2228  000620  EC96  F005         	call	___wmul	;wreg free
  2229  000624  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2230  000628  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2231  00062C  0E00               	movlw	0
  2232  00062E  6E18               	movwf	___awdiv@divisor+1,c
  2233  000630  0E64               	movlw	100
  2234  000632  6E17               	movwf	___awdiv@divisor,c
  2235  000634  EC39  F004         	call	___awdiv	;wreg free
  2236  000638  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2237  00063C  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2238                           
  2239                           ;dc_motor.c: 32: if (m->direction)
  2240  000640  EE20 F001          	lfsr	2,1
  2241  000644  501D               	movf	setMotorPWM@m,w,c
  2242  000646  26D9               	addwf	fsr2l,f,c
  2243  000648  501E               	movf	setMotorPWM@m+1,w,c
  2244  00064A  22DA               	addwfc	fsr2h,f,c
  2245  00064C  50DF               	movf	indf2,w,c
  2246  00064E  B4D8               	btfsc	status,2,c
  2247  000650  D02C               	goto	l1583
  2248                           
  2249                           ;dc_motor.c: 33: {
  2250                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2251  000652  EE20 F006          	lfsr	2,6
  2252  000656  501D               	movf	setMotorPWM@m,w,c
  2253  000658  26D9               	addwf	fsr2l,f,c
  2254  00065A  501E               	movf	setMotorPWM@m+1,w,c
  2255  00065C  22DA               	addwfc	fsr2h,f,c
  2256  00065E  50DF               	movf	indf2,w,c
  2257  000660  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2258  000662  0E01               	movlw	1
  2259  000664  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2260  000666  2A1F               	incf	??_setMotorPWM,f,c
  2261  000668  D002               	goto	u804
  2262  00066A                     u805:
  2263  00066A  90D8               	bcf	status,0,c
  2264  00066C  3620               	rlcf	??_setMotorPWM+1,f,c
  2265  00066E                     u804:
  2266  00066E  2E1F               	decfsz	??_setMotorPWM,f,c
  2267  000670  D7FC               	goto	u805
  2268  000672  5020               	movf	??_setMotorPWM+1,w,c
  2269  000674  108A               	iorwf	3978,w,c	;volatile
  2270  000676  6E8A               	movwf	3978,c	;volatile
  2271                           
  2272                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2273  000678  EE20 F007          	lfsr	2,7
  2274  00067C  501D               	movf	setMotorPWM@m,w,c
  2275  00067E  26D9               	addwf	fsr2l,f,c
  2276  000680  501E               	movf	setMotorPWM@m+1,w,c
  2277  000682  22DA               	addwfc	fsr2h,f,c
  2278  000684  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2279  000688  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2280  00068C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2281  000690  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2282  000694  1E21               	comf	??_setMotorPWM+2,f,c
  2283  000696  1E22               	comf	??_setMotorPWM+3,f,c
  2284  000698  4A21               	infsnz	??_setMotorPWM+2,f,c
  2285  00069A  2A22               	incf	??_setMotorPWM+3,f,c
  2286  00069C  501F               	movf	??_setMotorPWM,w,c
  2287  00069E  2421               	addwf	??_setMotorPWM+2,w,c
  2288  0006A0  6E24               	movwf	setMotorPWM@PWMduty,c
  2289  0006A2  5020               	movf	??_setMotorPWM+1,w,c
  2290  0006A4  2022               	addwfc	??_setMotorPWM+3,w,c
  2291  0006A6  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2292                           
  2293                           ;dc_motor.c: 36: }
  2294  0006A8  D014               	goto	l105
  2295  0006AA                     l1583:
  2296                           
  2297                           ;dc_motor.c: 37: else
  2298                           ;dc_motor.c: 38: {
  2299                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2300  0006AA  EE20 F006          	lfsr	2,6
  2301  0006AE  501D               	movf	setMotorPWM@m,w,c
  2302  0006B0  26D9               	addwf	fsr2l,f,c
  2303  0006B2  501E               	movf	setMotorPWM@m+1,w,c
  2304  0006B4  22DA               	addwfc	fsr2h,f,c
  2305  0006B6  50DF               	movf	indf2,w,c
  2306  0006B8  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2307  0006BA  0E01               	movlw	1
  2308  0006BC  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2309  0006BE  2A1F               	incf	??_setMotorPWM,f,c
  2310  0006C0  D002               	goto	u814
  2311  0006C2                     u815:
  2312  0006C2  90D8               	bcf	status,0,c
  2313  0006C4  3620               	rlcf	??_setMotorPWM+1,f,c
  2314  0006C6                     u814:
  2315  0006C6  2E1F               	decfsz	??_setMotorPWM,f,c
  2316  0006C8  D7FC               	goto	u815
  2317  0006CA  5020               	movf	??_setMotorPWM+1,w,c
  2318  0006CC  0AFF               	xorlw	255
  2319  0006CE  148A               	andwf	3978,w,c	;volatile
  2320  0006D0  6E8A               	movwf	3978,c	;volatile
  2321  0006D2                     l105:
  2322                           
  2323                           ;dc_motor.c: 40: }
  2324                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2325  0006D2  EE20 F002          	lfsr	2,2
  2326  0006D6  501D               	movf	setMotorPWM@m,w,c
  2327  0006D8  26D9               	addwf	fsr2l,f,c
  2328  0006DA  501E               	movf	setMotorPWM@m+1,w,c
  2329  0006DC  22DA               	addwfc	fsr2h,f,c
  2330  0006DE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2331  0006E2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2332  0006E6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2333  0006EA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2334  0006EE  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2335  0006F0  46E8               	rlncf	wreg,f,c
  2336  0006F2  0BFC               	andlw	252
  2337  0006F4  6EDF               	movwf	indf2,c
  2338                           
  2339                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2340  0006F6  EE20 F004          	lfsr	2,4
  2341  0006FA  501D               	movf	setMotorPWM@m,w,c
  2342  0006FC  26D9               	addwf	fsr2l,f,c
  2343  0006FE  501E               	movf	setMotorPWM@m+1,w,c
  2344  000700  22DA               	addwfc	fsr2h,f,c
  2345  000702  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2346  000706  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2347  00070A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2348  00070E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2349  000712  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2350  000716  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2351  00071A  0E06               	movlw	6
  2352  00071C  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2353  00071E                     u825:
  2354  00071E  3422               	rlcf	??_setMotorPWM+3,w,c
  2355  000720  3222               	rrcf	??_setMotorPWM+3,f,c
  2356  000722  3221               	rrcf	??_setMotorPWM+2,f,c
  2357  000724  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2358  000726  D7FB               	goto	u825
  2359  000728  5021               	movf	??_setMotorPWM+2,w,c
  2360  00072A  6EDF               	movwf	indf2,c
  2361  00072C  0012               	return		;funcret
  2362  00072E                     __end_of_setMotorPWM:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           indf1	equ	0xFE7
  2371                           fsr1h	equ	0xFE2
  2372                           fsr1l	equ	0xFE1
  2373                           indf2	equ	0xFDF
  2374                           postinc2	equ	0xFDE
  2375                           postdec2	equ	0xFDD
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function ___wmul *****************
  2381 ;; Defined at:
  2382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  multiplier      2   14[COMRAM] unsigned int 
  2385 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  product         2   18[COMRAM] unsigned int 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  2   14[COMRAM] unsigned int 
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0, prodl, prodh
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2397 ;;      Params:         4       0       0       0
  2398 ;;      Locals:         2       0       0       0
  2399 ;;      Temps:          0       0       0       0
  2400 ;;      Totals:         6       0       0       0
  2401 ;;Total ram usage:        6 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    1
  2404 ;; This function calls:
  2405 ;;		Nothing
  2406 ;; This function is called by:
  2407 ;;		_setMotorPWM
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text11
  2412  000B2C                     __ptext11:
  2413                           	opt stack 0
  2414  000B2C                     ___wmul:
  2415                           	opt stack 25
  2416                           
  2417                           ;incstack = 0
  2418  000B2C  500F               	movf	___wmul@multiplier,w,c
  2419  000B2E  0211               	mulwf	___wmul@multiplicand,c
  2420  000B30  CFF3 F013          	movff	prodl,___wmul@product
  2421  000B34  CFF4 F014          	movff	prodh,___wmul@product+1
  2422  000B38  500F               	movf	___wmul@multiplier,w,c
  2423  000B3A  0212               	mulwf	___wmul@multiplicand+1,c
  2424  000B3C  50F3               	movf	prodl,w,c
  2425  000B3E  2614               	addwf	___wmul@product+1,f,c
  2426  000B40  5010               	movf	___wmul@multiplier+1,w,c
  2427  000B42  0211               	mulwf	___wmul@multiplicand,c
  2428  000B44  50F3               	movf	prodl,w,c
  2429  000B46  2614               	addwf	___wmul@product+1,f,c
  2430  000B48  C013  F00F         	movff	___wmul@product,?___wmul
  2431  000B4C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2432  000B50  0012               	return	
  2433  000B52                     __end_of___wmul:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           intcon	equ	0xFF2
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           indf1	equ	0xFE7
  2442                           fsr1h	equ	0xFE2
  2443                           fsr1l	equ	0xFE1
  2444                           indf2	equ	0xFDF
  2445                           postinc2	equ	0xFDE
  2446                           postdec2	equ	0xFDD
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function ___awdiv *****************
  2452 ;; Defined at:
  2453 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  dividend        2   20[COMRAM] int 
  2456 ;;  divisor         2   22[COMRAM] int 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  quotient        2   26[COMRAM] int 
  2459 ;;  sign            1   25[COMRAM] unsigned char 
  2460 ;;  counter         1   24[COMRAM] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2   20[COMRAM] int 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2470 ;;      Params:         4       0       0       0
  2471 ;;      Locals:         4       0       0       0
  2472 ;;      Temps:          0       0       0       0
  2473 ;;      Totals:         8       0       0       0
  2474 ;;Total ram usage:        8 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_setMotorPWM
  2481 ;;		_ScanWithRange
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text12
  2486  000872                     __ptext12:
  2487                           	opt stack 0
  2488  000872                     ___awdiv:
  2489                           	opt stack 25
  2490                           
  2491                           ;incstack = 0
  2492  000872  0E00               	movlw	0
  2493  000874  6E1A               	movwf	___awdiv@sign,c
  2494  000876  AE18               	btfss	___awdiv@divisor+1,7,c
  2495  000878  D006               	goto	l1541
  2496  00087A  6C17               	negf	___awdiv@divisor,c
  2497  00087C  1E18               	comf	___awdiv@divisor+1,f,c
  2498  00087E  B0D8               	btfsc	status,0,c
  2499  000880  2A18               	incf	___awdiv@divisor+1,f,c
  2500  000882  0E01               	movlw	1
  2501  000884  6E1A               	movwf	___awdiv@sign,c
  2502  000886                     l1541:
  2503  000886  AE16               	btfss	___awdiv@dividend+1,7,c
  2504  000888  D006               	goto	l1547
  2505  00088A  6C15               	negf	___awdiv@dividend,c
  2506  00088C  1E16               	comf	___awdiv@dividend+1,f,c
  2507  00088E  B0D8               	btfsc	status,0,c
  2508  000890  2A16               	incf	___awdiv@dividend+1,f,c
  2509  000892  0E01               	movlw	1
  2510  000894  1A1A               	xorwf	___awdiv@sign,f,c
  2511  000896                     l1547:
  2512  000896  0E00               	movlw	0
  2513  000898  6E1C               	movwf	___awdiv@quotient+1,c
  2514  00089A  0E00               	movlw	0
  2515  00089C  6E1B               	movwf	___awdiv@quotient,c
  2516  00089E  5017               	movf	___awdiv@divisor,w,c
  2517  0008A0  1018               	iorwf	___awdiv@divisor+1,w,c
  2518  0008A2  B4D8               	btfsc	status,2,c
  2519  0008A4  D01C               	goto	l1569
  2520  0008A6  0E01               	movlw	1
  2521  0008A8  6E19               	movwf	___awdiv@counter,c
  2522  0008AA  D004               	goto	l1555
  2523  0008AC                     l1553:
  2524  0008AC  90D8               	bcf	status,0,c
  2525  0008AE  3617               	rlcf	___awdiv@divisor,f,c
  2526  0008B0  3618               	rlcf	___awdiv@divisor+1,f,c
  2527  0008B2  2A19               	incf	___awdiv@counter,f,c
  2528  0008B4                     l1555:
  2529  0008B4  AE18               	btfss	___awdiv@divisor+1,7,c
  2530  0008B6  D7FA               	goto	l1553
  2531  0008B8                     l1557:
  2532  0008B8  90D8               	bcf	status,0,c
  2533  0008BA  361B               	rlcf	___awdiv@quotient,f,c
  2534  0008BC  361C               	rlcf	___awdiv@quotient+1,f,c
  2535  0008BE  5017               	movf	___awdiv@divisor,w,c
  2536  0008C0  5C15               	subwf	___awdiv@dividend,w,c
  2537  0008C2  5018               	movf	___awdiv@divisor+1,w,c
  2538  0008C4  5816               	subwfb	___awdiv@dividend+1,w,c
  2539  0008C6  A0D8               	btfss	status,0,c
  2540  0008C8  D005               	goto	l1565
  2541  0008CA  5017               	movf	___awdiv@divisor,w,c
  2542  0008CC  5E15               	subwf	___awdiv@dividend,f,c
  2543  0008CE  5018               	movf	___awdiv@divisor+1,w,c
  2544  0008D0  5A16               	subwfb	___awdiv@dividend+1,f,c
  2545  0008D2  801B               	bsf	___awdiv@quotient,0,c
  2546  0008D4                     l1565:
  2547  0008D4  90D8               	bcf	status,0,c
  2548  0008D6  3218               	rrcf	___awdiv@divisor+1,f,c
  2549  0008D8  3217               	rrcf	___awdiv@divisor,f,c
  2550  0008DA  2E19               	decfsz	___awdiv@counter,f,c
  2551  0008DC  D7ED               	goto	l1557
  2552  0008DE                     l1569:
  2553  0008DE  501A               	movf	___awdiv@sign,w,c
  2554  0008E0  B4D8               	btfsc	status,2,c
  2555  0008E2  D004               	goto	l1573
  2556  0008E4  6C1B               	negf	___awdiv@quotient,c
  2557  0008E6  1E1C               	comf	___awdiv@quotient+1,f,c
  2558  0008E8  B0D8               	btfsc	status,0,c
  2559  0008EA  2A1C               	incf	___awdiv@quotient+1,f,c
  2560  0008EC                     l1573:
  2561  0008EC  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2562  0008F0  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2563  0008F4  0012               	return	
  2564  0008F6                     __end_of___awdiv:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           prodh	equ	0xFF4
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           indf1	equ	0xFE7
  2573                           fsr1h	equ	0xFE2
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _grabRightIR *****************
  2583 ;; Defined at:
  2584 ;;		line 70 in file "IR_Reading.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2589 ;;  i               1   20[COMRAM] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  2   14[COMRAM] unsigned int 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2599 ;;      Params:         2       0       0       0
  2600 ;;      Locals:         3       0       0       0
  2601 ;;      Temps:          2       0       0       0
  2602 ;;      Totals:         7       0       0       0
  2603 ;;Total ram usage:        7 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    1
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_ScanWithRange
  2610 ;;		_ScanIR
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text13
  2615  000966                     __ptext13:
  2616                           	opt stack 0
  2617  000966                     _grabRightIR:
  2618                           	opt stack 28
  2619                           
  2620                           ;IR_Reading.c: 72: unsigned int IR_signal=0;
  2621                           
  2622                           ;incstack = 0
  2623  000966  0E00               	movlw	0
  2624  000968  6E14               	movwf	grabRightIR@IR_signal+1,c
  2625  00096A  0E00               	movlw	0
  2626  00096C  6E13               	movwf	grabRightIR@IR_signal,c
  2627                           
  2628                           ;IR_Reading.c: 73: unsigned char i=0;
  2629  00096E  0E00               	movlw	0
  2630  000970  6E15               	movwf	grabRightIR@i,c
  2631                           
  2632                           ;IR_Reading.c: 75: for (i=0; i<4; i++) {
  2633  000972  0E00               	movlw	0
  2634  000974  6E15               	movwf	grabRightIR@i,c
  2635  000976                     l1647:
  2636  000976  0E03               	movlw	3
  2637  000978  6415               	cpfsgt	grabRightIR@i,c
  2638  00097A  D001               	goto	l1651
  2639  00097C  D017               	goto	l1657
  2640  00097E                     l1651:
  2641                           
  2642                           ;IR_Reading.c: 77: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2643  00097E  5068               	movf	3944,w,c	;volatile
  2644  000980  CF69 F011          	movff	3945,??_grabRightIR	;volatile
  2645  000984  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2646  000986  C011  F012         	movff	??_grabRightIR,??_grabRightIR+1
  2647  00098A  6A11               	clrf	??_grabRightIR,c
  2648  00098C  1211               	iorwf	??_grabRightIR,f,c
  2649  00098E  0E00               	movlw	0
  2650  000990  1212               	iorwf	??_grabRightIR+1,f,c
  2651  000992  5011               	movf	??_grabRightIR,w,c
  2652  000994  2613               	addwf	grabRightIR@IR_signal,f,c
  2653  000996  5012               	movf	??_grabRightIR+1,w,c
  2654  000998  2214               	addwfc	grabRightIR@IR_signal+1,f,c
  2655                           
  2656                           ;IR_Reading.c: 78: _delay((unsigned long)((50)*(8000000/4000.0)));
  2657  00099A  0E82               	movlw	130
  2658  00099C  6E11               	movwf	??_grabRightIR& (0+255),c
  2659  00099E  0EDE               	movlw	222
  2660  0009A0                     u1327:
  2661  0009A0  2EE8               	decfsz	wreg,f,c
  2662  0009A2  D7FE               	goto	u1327
  2663  0009A4  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2664  0009A6  D7FC               	goto	u1327
  2665  0009A8  2A15               	incf	grabRightIR@i,f,c
  2666  0009AA  D7E5               	goto	l1647
  2667  0009AC                     l1657:
  2668                           
  2669                           ;IR_Reading.c: 79: }
  2670                           ;IR_Reading.c: 81: return IR_signal<<2;
  2671  0009AC  C013  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2672  0009B0  C014  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2673  0009B4  90D8               	bcf	status,0,c
  2674  0009B6  3611               	rlcf	??_grabRightIR,f,c
  2675  0009B8  3612               	rlcf	??_grabRightIR+1,f,c
  2676  0009BA  90D8               	bcf	status,0,c
  2677  0009BC  3611               	rlcf	??_grabRightIR,f,c
  2678  0009BE  3612               	rlcf	??_grabRightIR+1,f,c
  2679  0009C0  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2680  0009C4  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2681  0009C8  0012               	return	
  2682  0009CA                     __end_of_grabRightIR:
  2683                           	opt stack 0
  2684                           tblptru	equ	0xFF8
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           postinc0	equ	0xFEE
  2689                           wreg	equ	0xFE8
  2690                           indf1	equ	0xFE7
  2691                           fsr1h	equ	0xFE2
  2692                           fsr1l	equ	0xFE1
  2693                           indf2	equ	0xFDF
  2694                           postinc2	equ	0xFDE
  2695                           postdec2	equ	0xFDD
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _grabLeftIR *****************
  2701 ;; Defined at:
  2702 ;;		line 86 in file "IR_Reading.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2707 ;;  i               1   20[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  2   14[COMRAM] unsigned int 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2717 ;;      Params:         2       0       0       0
  2718 ;;      Locals:         3       0       0       0
  2719 ;;      Temps:          2       0       0       0
  2720 ;;      Totals:         7       0       0       0
  2721 ;;Total ram usage:        7 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    1
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_ScanWithRange
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text14
  2732  0009CA                     __ptext14:
  2733                           	opt stack 0
  2734  0009CA                     _grabLeftIR:
  2735                           	opt stack 28
  2736                           
  2737                           ;IR_Reading.c: 88: unsigned int IR_signal=0;
  2738                           
  2739                           ;incstack = 0
  2740  0009CA  0E00               	movlw	0
  2741  0009CC  6E14               	movwf	grabLeftIR@IR_signal+1,c
  2742  0009CE  0E00               	movlw	0
  2743  0009D0  6E13               	movwf	grabLeftIR@IR_signal,c
  2744                           
  2745                           ;IR_Reading.c: 89: unsigned char i=0;
  2746  0009D2  0E00               	movlw	0
  2747  0009D4  6E15               	movwf	grabLeftIR@i,c
  2748                           
  2749                           ;IR_Reading.c: 91: for (i=0; i<4; i++) {
  2750  0009D6  0E00               	movlw	0
  2751  0009D8  6E15               	movwf	grabLeftIR@i,c
  2752  0009DA                     l1671:
  2753  0009DA  0E03               	movlw	3
  2754  0009DC  6415               	cpfsgt	grabLeftIR@i,c
  2755  0009DE  D001               	goto	l1675
  2756  0009E0  D017               	goto	l1681
  2757  0009E2                     l1675:
  2758                           
  2759                           ;IR_Reading.c: 93: IR_signal+=((CAP2BUFH << 8) | CAP2BUFL);
  2760  0009E2  5066               	movf	3942,w,c	;volatile
  2761  0009E4  CF67 F011          	movff	3943,??_grabLeftIR	;volatile
  2762  0009E8  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  2763  0009EA  C011  F012         	movff	??_grabLeftIR,??_grabLeftIR+1
  2764  0009EE  6A11               	clrf	??_grabLeftIR,c
  2765  0009F0  1211               	iorwf	??_grabLeftIR,f,c
  2766  0009F2  0E00               	movlw	0
  2767  0009F4  1212               	iorwf	??_grabLeftIR+1,f,c
  2768  0009F6  5011               	movf	??_grabLeftIR,w,c
  2769  0009F8  2613               	addwf	grabLeftIR@IR_signal,f,c
  2770  0009FA  5012               	movf	??_grabLeftIR+1,w,c
  2771  0009FC  2214               	addwfc	grabLeftIR@IR_signal+1,f,c
  2772                           
  2773                           ;IR_Reading.c: 94: _delay((unsigned long)((50)*(8000000/4000.0)));
  2774  0009FE  0E82               	movlw	130
  2775  000A00  6E11               	movwf	??_grabLeftIR& (0+255),c
  2776  000A02  0EDE               	movlw	222
  2777  000A04                     u1337:
  2778  000A04  2EE8               	decfsz	wreg,f,c
  2779  000A06  D7FE               	goto	u1337
  2780  000A08  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  2781  000A0A  D7FC               	goto	u1337
  2782  000A0C  2A15               	incf	grabLeftIR@i,f,c
  2783  000A0E  D7E5               	goto	l1671
  2784  000A10                     l1681:
  2785                           
  2786                           ;IR_Reading.c: 95: }
  2787                           ;IR_Reading.c: 97: return IR_signal<<2;
  2788  000A10  C013  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  2789  000A14  C014  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  2790  000A18  90D8               	bcf	status,0,c
  2791  000A1A  3611               	rlcf	??_grabLeftIR,f,c
  2792  000A1C  3612               	rlcf	??_grabLeftIR+1,f,c
  2793  000A1E  90D8               	bcf	status,0,c
  2794  000A20  3611               	rlcf	??_grabLeftIR,f,c
  2795  000A22  3612               	rlcf	??_grabLeftIR+1,f,c
  2796  000A24  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  2797  000A28  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  2798  000A2C  0012               	return	
  2799  000A2E                     __end_of_grabLeftIR:
  2800                           	opt stack 0
  2801                           tblptru	equ	0xFF8
  2802                           prodh	equ	0xFF4
  2803                           prodl	equ	0xFF3
  2804                           intcon	equ	0xFF2
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           indf1	equ	0xFE7
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           indf2	equ	0xFDF
  2811                           postinc2	equ	0xFDE
  2812                           postdec2	equ	0xFDD
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _enableSensor *****************
  2818 ;; Defined at:
  2819 ;;		line 102 in file "IR_Reading.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  sensor          1    wreg     unsigned char 
  2822 ;;  status          1   14[COMRAM] unsigned char 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  sensor          1   15[COMRAM] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;		None               void
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2834 ;;      Params:         1       0       0       0
  2835 ;;      Locals:         1       0       0       0
  2836 ;;      Temps:          0       0       0       0
  2837 ;;      Totals:         2       0       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    1
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_ScanWithRange
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text15
  2849  000B52                     __ptext15:
  2850                           	opt stack 0
  2851  000B52                     _enableSensor:
  2852                           	opt stack 28
  2853                           
  2854                           ;incstack = 0
  2855                           ;enableSensor@sensor stored from wreg
  2856  000B52  6E10               	movwf	enableSensor@sensor,c
  2857                           
  2858                           ;IR_Reading.c: 104: if (sensor==0){
  2859  000B54  5010               	movf	enableSensor@sensor,w,c
  2860  000B56  A4D8               	btfss	status,2,c
  2861  000B58  D006               	goto	l1665
  2862                           
  2863                           ;IR_Reading.c: 105: LATEbits.LATE0 = status;
  2864  000B5A  B00F               	btfsc	enableSensor@status,0,c
  2865  000B5C  D002               	bra	u955
  2866  000B5E  908D               	bcf	3981,0,c	;volatile
  2867  000B60  D001               	bra	u956
  2868  000B62                     u955:
  2869  000B62  808D               	bsf	3981,0,c	;volatile
  2870  000B64                     u956:
  2871                           
  2872                           ;IR_Reading.c: 106: } else if (sensor==1){
  2873  000B64  0012               	return	
  2874  000B66                     l1665:
  2875  000B66  0410               	decf	enableSensor@sensor,w,c
  2876  000B68  A4D8               	btfss	status,2,c
  2877  000B6A  0012               	return	
  2878                           
  2879                           ;IR_Reading.c: 107: LATEbits.LATE1 = status;
  2880  000B6C  B00F               	btfsc	enableSensor@status,0,c
  2881  000B6E  D002               	bra	u975
  2882  000B70  928D               	bcf	3981,1,c	;volatile
  2883  000B72  D001               	bra	u976
  2884  000B74                     u975:
  2885  000B74  828D               	bsf	3981,1,c	;volatile
  2886  000B76                     u976:
  2887  000B76  0012               	return	
  2888  000B78                     __end_of_enableSensor:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           prodh	equ	0xFF4
  2892                           prodl	equ	0xFF3
  2893                           intcon	equ	0xFF2
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           indf1	equ	0xFE7
  2897                           fsr1h	equ	0xFE2
  2898                           fsr1l	equ	0xFE1
  2899                           indf2	equ	0xFDF
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _delay_tenth_s *****************
  2907 ;; Defined at:
  2908 ;;		line 19 in file "Movement.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  tenth_second    1    wreg     unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2913 ;;  i               2   16[COMRAM] unsigned int 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;		None               void
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2923 ;;      Params:         0       0       0       0
  2924 ;;      Locals:         3       0       0       0
  2925 ;;      Temps:          1       0       0       0
  2926 ;;      Totals:         4       0       0       0
  2927 ;;Total ram usage:        4 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    1
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_ScanWithRange
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text16
  2938  000AC2                     __ptext16:
  2939                           	opt stack 0
  2940  000AC2                     _delay_tenth_s:
  2941                           	opt stack 28
  2942                           
  2943                           ;incstack = 0
  2944                           ;delay_tenth_s@tenth_seconds stored from wreg
  2945  000AC2  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2946                           
  2947                           ;Movement.c: 20: unsigned int i=0;
  2948  000AC4  0E00               	movlw	0
  2949  000AC6  6E12               	movwf	delay_tenth_s@i+1,c
  2950  000AC8  0E00               	movlw	0
  2951  000ACA  6E11               	movwf	delay_tenth_s@i,c
  2952                           
  2953                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2954  000ACC  0E00               	movlw	0
  2955  000ACE  6E12               	movwf	delay_tenth_s@i+1,c
  2956  000AD0  0E01               	movlw	1
  2957  000AD2  6E11               	movwf	delay_tenth_s@i,c
  2958  000AD4  D009               	goto	l1643
  2959  000AD6                     l1639:
  2960                           
  2961                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2962  000AD6  0E82               	movlw	130
  2963  000AD8  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2964  000ADA  0EDE               	movlw	222
  2965  000ADC                     u1347:
  2966  000ADC  2EE8               	decfsz	wreg,f,c
  2967  000ADE  D7FE               	goto	u1347
  2968  000AE0  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2969  000AE2  D7FC               	goto	u1347
  2970  000AE4  4A11               	infsnz	delay_tenth_s@i,f,c
  2971  000AE6  2A12               	incf	delay_tenth_s@i+1,f,c
  2972  000AE8                     l1643:
  2973  000AE8  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2974  000AEA  0D02               	mullw	2
  2975  000AEC  5011               	movf	delay_tenth_s@i,w,c
  2976  000AEE  5CF3               	subwf	prodl,w,c
  2977  000AF0  5012               	movf	delay_tenth_s@i+1,w,c
  2978  000AF2  58F4               	subwfb	prodh,w,c
  2979  000AF4  A0D8               	btfss	status,0,c
  2980  000AF6  0012               	return	
  2981  000AF8  D7EE               	goto	l1639
  2982  000AFA                     __end_of_delay_tenth_s:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           intcon	equ	0xFF2
  2988                           postinc0	equ	0xFEE
  2989                           wreg	equ	0xFE8
  2990                           indf1	equ	0xFE7
  2991                           fsr1h	equ	0xFE2
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _InterruptHandlerHigh *****************
  3001 ;; Defined at:
  3002 ;;		line 16 in file "main.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;		None               void
  3009 ;; Registers used:
  3010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3016 ;;      Params:         0       0       0       0
  3017 ;;      Locals:         0       0       0       0
  3018 ;;      Temps:         14       0       0       0
  3019 ;;      Totals:        14       0       0       0
  3020 ;;Total ram usage:       14 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		Interrupt level 2
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	intcode
  3030  000008                     __pintcode:
  3031                           	opt stack 0
  3032  000008                     _InterruptHandlerHigh:
  3033                           	opt stack 25
  3034                           
  3035                           ;incstack = 0
  3036  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3037  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3038  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3039  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3040  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3041  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3042  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3043  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3044  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3045  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3046  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3047  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3048  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3049  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3050  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3051                           
  3052                           ;main.c: 18: if (PIR1bits.RCIF) {
  3053  000042  AA9E               	btfss	3998,5,c	;volatile
  3054  000044  D013               	goto	i2l44
  3055                           
  3056                           ;main.c: 19: ReceivedString[i]=RCREG;
  3057  000046  5044               	movf	_i,w,c	;volatile
  3058  000048  0D01               	mullw	1
  3059  00004A  0E81               	movlw	low _ReceivedString
  3060  00004C  24F3               	addwf	prodl,w,c
  3061  00004E  6ED9               	movwf	fsr2l,c
  3062  000050  0E00               	movlw	high _ReceivedString
  3063  000052  20F4               	addwfc	prodh,w,c
  3064  000054  6EDA               	movwf	fsr2h,c
  3065  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3066                           
  3067                           ;main.c: 20: if (i==15){
  3068  00005A  0E0F               	movlw	15
  3069  00005C  1844               	xorwf	_i,w,c	;volatile
  3070  00005E  A4D8               	btfss	status,2,c
  3071  000060  D003               	goto	i2l1895
  3072                           
  3073                           ;main.c: 21: i=0;
  3074  000062  0E00               	movlw	0
  3075  000064  6E44               	movwf	_i,c	;volatile
  3076                           
  3077                           ;main.c: 22: }else{
  3078  000066  D001               	goto	i2l1897
  3079  000068                     i2l1895:
  3080                           
  3081                           ;main.c: 23: i++;
  3082  000068  2A44               	incf	_i,f,c	;volatile
  3083  00006A                     i2l1897:
  3084                           
  3085                           ;main.c: 24: }
  3086                           ;main.c: 25: PIR1bits.RCIF=0;
  3087  00006A  9A9E               	bcf	3998,5,c	;volatile
  3088  00006C                     i2l44:
  3089  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3090  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3091  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3092  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3093  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3094  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3095  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3096  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3097  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3098  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3099  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3100  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3101  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3102  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3103  0000A4  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3104  0000A6  0011               	retfie		f
  3105  0000A8                     __end_of_InterruptHandlerHigh:
  3106                           	opt stack 0
  3107  0000                     pclatu	equ	0xFFB
  3108                           pclath	equ	0xFFA
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           intcon	equ	0xFF2
  3116                           postinc0	equ	0xFEE
  3117                           fsr0h	equ	0xFEA
  3118                           fsr0l	equ	0xFE9
  3119                           wreg	equ	0xFE8
  3120                           indf1	equ	0xFE7
  3121                           fsr1h	equ	0xFE2
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           pclatu	equ	0xFFB
  3130                           pclath	equ	0xFFA
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           prodh	equ	0xFF4
  3136                           prodl	equ	0xFF3
  3137                           intcon	equ	0xFF2
  3138                           postinc0	equ	0xFEE
  3139                           fsr0h	equ	0xFEA
  3140                           fsr0l	equ	0xFE9
  3141                           wreg	equ	0xFE8
  3142                           indf1	equ	0xFE7
  3143                           fsr1h	equ	0xFE2
  3144                           fsr1l	equ	0xFE1
  3145                           indf2	equ	0xFDF
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152                           	psect	rparam
  3153  0000                     pclatu	equ	0xFFB
  3154                           pclath	equ	0xFFA
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           postinc0	equ	0xFEE
  3163                           fsr0h	equ	0xFEA
  3164                           fsr0l	equ	0xFE9
  3165                           wreg	equ	0xFE8
  3166                           indf1	equ	0xFE7
  3167                           fsr1h	equ	0xFE2
  3168                           fsr1l	equ	0xFE1
  3169                           indf2	equ	0xFDF
  3170                           postinc2	equ	0xFDE
  3171                           postdec2	equ	0xFDD
  3172                           fsr2h	equ	0xFDA
  3173                           fsr2l	equ	0xFD9
  3174                           status	equ	0xFD8
  3175                           
  3176                           	psect	temp
  3177  000045                     btemp:
  3178                           	opt stack 0
  3179  000045                     	ds	1
  3180  0000                     int$flags	set	btemp
  3181                           pclatu	equ	0xFFB
  3182                           pclath	equ	0xFFA
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           fsr0h	equ	0xFEA
  3192                           fsr0l	equ	0xFE9
  3193                           wreg	equ	0xFE8
  3194                           indf1	equ	0xFE7
  3195                           fsr1h	equ	0xFE2
  3196                           fsr1l	equ	0xFE1
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     67      68
    BANK0           160     33      49
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               138   138      0   21052
                                             65 COMRAM     2     2      0
                                              0 BANK0     33    33      0
                      _ScanWithRange
                       _VerifySignal
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       19    14      5   20039
                                             46 COMRAM    19    14      5
                            ___awdiv
                      _delay_tenth_s
                       _enableSensor
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    6278
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    6918
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 4     0      4    3671
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     1      4    2091
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          9     7      2    1531
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     650
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _enableSensor                                         2     1      1     344
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _enableSensor
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     43      44       1       72.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75       3        0.0%
DATA                 0      0      75      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Mar 14 23:36:18 2018

                 ?_grabRightIR 000F                              _i 0044                             l47 04C0  
                 ___awdiv@sign 001A            ___wmul@multiplicand 0011                    main@Message 0060  
                          l105 06D2                            l135 0948                            u804 066E  
                          u805 066A                            u814 06C6                            u815 06C2  
                          u825 071E                            u955 0B62                            u956 0B64  
                          u975 0B74                            u976 0B76                    grabLeftIR@i 0015  
                          prod 000FF3                            wreg 000FE8                           l1601 0834  
                         l1541 0886                           l1613 0910                           l1553 08AC  
                         l1617 0928                           l1609 08F8                           l1643 0AE8  
                         l1651 097E                           l1555 08B4                           l1547 0896  
                         l1573 08EC                           l1565 08D4                           l1557 08B8  
                         l1821 02DC                           l1805 0282                           l1639 0AD6  
                         l1671 09DA                           l1647 0976                           l1583 06AA  
                         l1591 07FC                           l1831 035A                           l1665 0B66  
                         l1681 0A10                           l1657 09AC                           l1569 08DE  
                         l1841 03AA                           l1825 0328                           l1675 09E2  
                         l1595 0814                           l1587 07E4                           l1923 04C6  
                         l1853 03DA                           l1837 035E                           l1941 0532  
                         l1933 04FA                           l1775 01E4                           l1871 0786  
                         l1951 057C                           l1927 04D2                           l1769 01E0  
                         l1937 0520                           l1883 07DE                           l1875 078E  
                         l1963 05C4                           l1947 0572                           l1971 05E0  
                         l1789 0220                           l1957 05B4                           l1799 027E  
                         l1959 05BA                           u1200 0540                           u1210 0552  
                         u1202 0542                           u1212 0554                           u1307 082E  
                         u1317 0942                           _LATB 000F8A                           u1327 09A0  
                         u1337 0A04                           u1347 0ADC                           i2l44 006C  
                         _main 042A                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0045                           _stop 07E2                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00A8  
                 ___param_bank 000010                          ?_main 0001                __end_of___awdiv 08F6  
                        ?_stop 0026                ___awdiv@divisor 0017                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                   grabRightIR@i 0015                  _initRFID$1269 000F  
              ___awdiv@counter 0019                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                          main@i 006E  
                        tablat 000FF5                          status 000FD8         __size_of_ScanWithRange 037E  
              __initialization 0BB6                   __end_of_main 05FA                   __end_of_stop 0872  
               delay_tenth_s@i 0011                 __CFG_OSC$IRCIO 000000           __end_of_enableSensor 0B78  
          VerifySignal@hexByte 0018                         ??_main 0042                         ??_stop 002A  
                __activetblptr 000002                  ?_initMotorPWM 0001                   ?_setMotorPWM 001D  
             ___awdiv@dividend 0015                 __CFG_WDTEN$OFF 000000                         i2l1895 0068  
                       i2l1897 006A          __end_of_delay_tenth_s 0AFA                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         ___wmul 0B2C  
                    ??___awdiv 0019               __end_of_initRFID 0B98                         _initIR 0B98  
         __size_of_grabRightIR 0064                         clear_0 0BBC               ___awdiv@quotient 001B  
               ??_initMotorPWM 000F                  _ScanWithRange 00AC                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0026  
                       stop@mR 0028               __end_of_turnLeft 0AC2                     __accesstop 0060  
      __end_of__initialization 0BC4                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
               ?_ScanWithRange 002F           VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0  
   delay_tenth_s@tenth_seconds 0010                     __pbssBANK0 0081          __size_of_enableSensor 0026  
                      ?___wmul 000F            grabLeftIR@IR_signal 0013                        _CAP1CON 000F63  
                      _CAP2CON 000F62                        ?_initIR 0001        __size_of_fullSpeedAhead 0070  
                   _grabLeftIR 09CA                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initRFID 0001           __size_of_setMotorPWM 0134                   _enableSensor 0B52  
           __size_of_turnRight 004A           __end_of_initMotorPWM 0B2C                        __Hparam 0000  
                      __Lparam 0000                        ___awdiv 0872                __size_of___wmul 0026  
              __size_of_initIR 001E                        __pcinit 0BB6                ??_ScanWithRange 0034  
                      __ramtop 0300                      ?_turnLeft 002B                        __ptext0 042A  
                      __ptext1 0B78                        __ptext2 0AFA                        __ptext3 0B98  
                      __ptext4 072E                        __ptext5 00AC                        __ptext6 0A2E  
                      __ptext7 0A78                        __ptext8 07E2                        __ptext9 08F6  
                ?_VerifySignal 000F           end_of_initialization 0BC4             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   ??_turnLeft 002F              __end_of_turnRight 0A78                    ?_grabLeftIR 000F  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                      _TRISEbits 000F96                 ??_VerifySignal 0011  
             fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028                      _TXSTAbits 000FAC  
                   main@motorL 006F                     main@motorR 0078                  ??_grabRightIR 0011  
               _fullSpeedAhead 08F6                 _ReceivedString 0081                 __end_of___wmul 0B52  
                  _BAUDCONbits 000FAA                 __end_of_initIR 0BB6         __size_of_delay_tenth_s 0038  
          start_initialization 0BB6             VerifySignal@Signal 000F          __size_of_initMotorPWM 0032  
 __end_of_InterruptHandlerHigh 00A8         __end_of_fullSpeedAhead 0966            __size_of_grabLeftIR 0064  
                     ??___wmul 0013                       ??_initIR 000F            __end_of_grabRightIR 09CA  
                 _initMotorPWM 0AFA                    __pbssCOMRAM 0044                  __pcstackBANK0 0060  
                _delay_tenth_s 0AC2              __size_of_initRFID 0020                ?_fullSpeedAhead 0026  
                    __pintcode 0008           __end_of_VerifySignal 07E2                       ?___awdiv 0015  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66              __size_of_turnLeft 004A     ScanWithRange@SensorResultC 003A  
   ScanWithRange@SensorResultL 0036     ScanWithRange@SensorResultR 003E                  ??_setMotorPWM 001F  
               ?_delay_tenth_s 0001                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 002B  
                  turnRight@mR 002D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                  _grabRightIR 0966           grabRightIR@IR_signal 0013              ___wmul@multiplier 000F  
        __end_of_ScanWithRange 042A                   setMotorPWM@m 001D           _InterruptHandlerHigh 0008  
                 ??_grabLeftIR 0011                      _turnRight 0A2E            __end_of_setMotorPWM 072E  
                     __Hrparam 0000                       __Lrparam 0000             __end_of_grabLeftIR 0A2E  
             __size_of___awdiv 0084                     _ANSEL0bits 000FB8          ?_InterruptHandlerHigh 0001  
                   ?_turnRight 002B                       __ptext10 05FA                       __ptext11 0B2C  
                     __ptext12 0872                       __ptext13 0966                       __ptext14 09CA  
                     __ptext15 0B52                       __ptext16 0AC2                ??_delay_tenth_s 000F  
                     _initRFID 0B78                  __size_of_main 01D0             main@DirectionFound 006D  
                __size_of_stop 0090                     turnLeft@mL 002B                     turnLeft@mR 002D  
        __size_of_VerifySignal 00B4                       int$flags 0045                       main@mode 006C  
                     main@test 006A                       _turnLeft 0A78                ScanWithRange@mL 002F  
              ScanWithRange@mR 0031             enableSensor@sensor 0010             enableSensor@status 000F  
                VerifySignal@i 001A                     _INTCONbits 000FF2     ScanWithRange@tenth_seconds 0033  
                  _setMotorPWM 05FA                   _VerifySignal 072E                       intlevel2 0000  
                ?_enableSensor 000F               ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001                    ??_turnRight 002F                 ??_enableSensor 0010  
