

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Mar 14 21:49:19 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     _ANSEL0bits	set	4024
    33  0000                     _BAUDCONbits	set	4010
    34  0000                     _CAP1BUFH	set	3945
    35  0000                     _CAP1BUFL	set	3944
    36  0000                     _CAP1CON	set	3939
    37  0000                     _CAP2BUFH	set	3943
    38  0000                     _CAP2BUFL	set	3942
    39  0000                     _CAP2CON	set	3938
    40  0000                     _INTCONbits	set	4082
    41  0000                     _IPR1bits	set	3999
    42  0000                     _LATAbits	set	3977
    43  0000                     _LATB	set	3978
    44  0000                     _LATCbits	set	3979
    45  0000                     _LATDbits	set	3980
    46  0000                     _LATEbits	set	3981
    47  0000                     _OSCCON	set	4051
    48  0000                     _OSCCONbits	set	4051
    49  0000                     _PIE1bits	set	3997
    50  0000                     _PIR1bits	set	3998
    51  0000                     _PTCON0	set	3967
    52  0000                     _PTCON1	set	3966
    53  0000                     _PTPERH	set	3962
    54  0000                     _PTPERL	set	3963
    55  0000                     _PWMCON0	set	3951
    56  0000                     _PWMCON1	set	3950
    57  0000                     _RCONbits	set	4048
    58  0000                     _RCREG	set	4014
    59  0000                     _RCSTAbits	set	4011
    60  0000                     _SPBRG	set	4015
    61  0000                     _SPBRGH	set	4016
    62  0000                     _T5CON	set	4023
    63  0000                     _TRISAbits	set	3986
    64  0000                     _TRISBbits	set	3987
    65  0000                     _TRISC	set	3988
    66  0000                     _TRISCbits	set	3988
    67  0000                     _TRISDbits	set	3989
    68  0000                     _TRISEbits	set	3990
    69  0000                     _TXREG	set	4013
    70  0000                     _TXSTAbits	set	4012
    71  0000                     _PDC0H	set	3960
    72  0000                     _PDC0L	set	3961
    73  0000                     _PDC1H	set	3958
    74  0000                     _PDC1L	set	3959
    75                           
    76                           ; #config settings
    77  0000                     
    78                           	psect	cinit
    79  0009E0                     __pcinit:
    80                           	opt stack 0
    81  0009E0                     start_initialization:
    82                           	opt stack 0
    83  0009E0                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to BANK0 (16 bytes)
    87  0009E0  EE00  F080         	lfsr	0,__pbssBANK0
    88  0009E4  0E10               	movlw	16
    89  0009E6                     clear_0:
    90  0009E6  6AEE               	clrf	postinc0,c
    91  0009E8  06E8               	decf	wreg,f,c
    92  0009EA  E1FD               	bnz	clear_0
    93                           
    94                           ; Clear objects allocated to COMRAM (1 bytes)
    95  0009EC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
    96  0009EE                     end_of_initialization:
    97                           	opt stack 0
    98  0009EE                     __end_of__initialization:
    99                           	opt stack 0
   100  0009EE  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   101  0009F0  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   102  0009F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   103  0009F4  6EF8               	movwf	tblptru,c
   104  0009F6  0100               	movlb	0
   105  0009F8  EF2D  F001         	goto	_main	;jump to C main() function
   106                           tblptru	equ	0xFF8
   107                           postinc0	equ	0xFEE
   108                           wreg	equ	0xFE8
   109                           
   110                           	psect	bssCOMRAM
   111  00003A                     __pbssCOMRAM:
   112                           	opt stack 0
   113  00003A                     _i:
   114                           	opt stack 0
   115  00003A                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	bssBANK0
   121  000080                     __pbssBANK0:
   122                           	opt stack 0
   123  000080                     _ReceivedString:
   124                           	opt stack 0
   125  000080                     	ds	16
   126                           tblptru	equ	0xFF8
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           
   130                           	psect	cstackBANK0
   131  000060                     __pcstackBANK0:
   132                           	opt stack 0
   133  000060                     main@Message:
   134                           	opt stack 0
   135                           
   136                           ; 10 bytes @ 0x0
   137  000060                     	ds	10
   138  00006A                     main@test:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0xA
   142  00006A                     	ds	2
   143  00006C                     main@mode:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0xC
   147  00006C                     	ds	1
   148  00006D                     main@i:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0xD
   152  00006D                     	ds	1
   153  00006E                     main@motorL:
   154                           	opt stack 0
   155                           
   156                           ; 9 bytes @ 0xE
   157  00006E                     	ds	9
   158  000077                     main@motorR:
   159                           	opt stack 0
   160                           
   161                           ; 9 bytes @ 0x17
   162  000077                     	ds	9
   163                           tblptru	equ	0xFF8
   164                           postinc0	equ	0xFEE
   165                           wreg	equ	0xFE8
   166                           
   167                           	psect	cstackCOMRAM
   168  000001                     __pcstackCOMRAM:
   169                           	opt stack 0
   170  000001                     ??_InterruptHandlerHigh:
   171  000001                     
   172                           ; 0 bytes @ 0x0
   173  000001                     	ds	14
   174  00000F                     ??_delay_tenth_s:
   175  00000F                     ?_grabRightIR:
   176                           	opt stack 0
   177  00000F                     ?_grabLeftIR:
   178                           	opt stack 0
   179  00000F                     ?___wmul:
   180                           	opt stack 0
   181  00000F                     _initRFID$1268:
   182                           	opt stack 0
   183  00000F                     enableSensor@status:
   184                           	opt stack 0
   185  00000F                     VerifySignal@Signal:
   186                           	opt stack 0
   187  00000F                     ___wmul@multiplier:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0xE
   191  00000F                     	ds	1
   192  000010                     delay_tenth_s@tenth_seconds:
   193                           	opt stack 0
   194  000010                     enableSensor@sensor:
   195                           	opt stack 0
   196                           
   197                           ; 1 bytes @ 0xF
   198  000010                     	ds	1
   199  000011                     ??_VerifySignal:
   200  000011                     ??_grabRightIR:
   201  000011                     ??_grabLeftIR:
   202  000011                     delay_tenth_s@i:
   203                           	opt stack 0
   204  000011                     ___wmul@multiplicand:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x10
   208  000011                     	ds	2
   209  000013                     grabRightIR@IR_signal:
   210                           	opt stack 0
   211  000013                     grabLeftIR@IR_signal:
   212                           	opt stack 0
   213  000013                     ___wmul@product:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x12
   217  000013                     	ds	2
   218  000015                     ?___awdiv:
   219                           	opt stack 0
   220  000015                     grabRightIR@i:
   221                           	opt stack 0
   222  000015                     grabLeftIR@i:
   223                           	opt stack 0
   224  000015                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x14
   228  000015                     	ds	1
   229  000016                     ?_grabAverageIR:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x15
   233  000016                     	ds	1
   234  000017                     VerifySignal@checksum:
   235                           	opt stack 0
   236  000017                     ___awdiv@divisor:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x16
   240  000017                     	ds	1
   241  000018                     ??_grabAverageIR:
   242  000018                     VerifySignal@hexByte:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x17
   246  000018                     	ds	1
   247  000019                     ___awdiv@counter:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x18
   251  000019                     	ds	1
   252  00001A                     VerifySignal@i:
   253                           	opt stack 0
   254  00001A                     ___awdiv@sign:
   255                           	opt stack 0
   256  00001A                     grabAverageIR@IR_signal:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x19
   260  00001A                     	ds	1
   261  00001B                     ___awdiv@quotient:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x1A
   265  00001B                     	ds	2
   266  00001D                     setMotorPWM@m:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x1C
   270  00001D                     	ds	2
   271  00001F                     ??_setMotorPWM:
   272                           
   273                           ; 0 bytes @ 0x1E
   274  00001F                     	ds	5
   275  000024                     setMotorPWM@PWMduty:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x23
   279  000024                     	ds	2
   280  000026                     stop@mL:
   281                           	opt stack 0
   282  000026                     fullSpeedAhead@mL:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x25
   286  000026                     	ds	2
   287  000028                     stop@mR:
   288                           	opt stack 0
   289  000028                     fullSpeedAhead@mR:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x27
   293  000028                     	ds	2
   294  00002A                     
   295                           ; 0 bytes @ 0x29
   296  00002A                     	ds	1
   297  00002B                     turnLeft@mL:
   298                           	opt stack 0
   299  00002B                     turnRight@mL:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x2A
   303  00002B                     	ds	2
   304  00002D                     turnLeft@mR:
   305                           	opt stack 0
   306  00002D                     turnRight@mR:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2C
   310  00002D                     	ds	2
   311  00002F                     ScanWithRange@mL:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x2E
   315  00002F                     	ds	2
   316  000031                     ScanWithRange@mR:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x30
   320  000031                     	ds	2
   321  000033                     ScanWithRange@tenth_seconds:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0x32
   325  000033                     	ds	1
   326  000034                     ScanWithRange@SignalStrength:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x33
   330  000034                     	ds	4
   331  000038                     ??_main:
   332                           
   333                           ; 0 bytes @ 0x37
   334  000038                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 29 in file "main.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;  PathTaken     100    0        unsigned char [100]
   349 ;;  Message        10    0[BANK0 ] unsigned char [10]
   350 ;;  motorR          9   23[BANK0 ] struct DC_motor
   351 ;;  motorL          9   14[BANK0 ] struct DC_motor
   352 ;;  SignalStreng    3    0        unsigned char [3]
   353 ;;  test            2   10[BANK0 ] unsigned int 
   354 ;;  i               1   13[BANK0 ] unsigned char 
   355 ;;  mode            1   12[BANK0 ] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;		None               void
   358 ;; Registers used:
   359 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   365 ;;      Params:         0       0       0       0
   366 ;;      Locals:         0      32       0       0
   367 ;;      Temps:          2       0       0       0
   368 ;;      Totals:         2      32       0       0
   369 ;;Total ram usage:       34 bytes
   370 ;; Hardware stack levels required when called:    6
   371 ;; This function calls:
   372 ;;		_ScanWithRange
   373 ;;		_VerifySignal
   374 ;;		_initIR
   375 ;;		_initMotorPWM
   376 ;;		_initRFID
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text0
   383  00025A                     __ptext0:
   384                           	opt stack 0
   385  00025A                     _main:
   386                           	opt stack 25
   387                           
   388                           ;main.c: 32: unsigned char Message[10];
   389                           ;main.c: 33: unsigned char i=0;
   390                           
   391                           ;incstack = 0
   392  00025A  0E00               	movlw	0
   393  00025C  0100               	movlb	0	; () banked
   394  00025E  6F6D               	movwf	main@i& (0+255),b
   395                           
   396                           ;main.c: 34: unsigned char mode=0;
   397  000260  0E00               	movlw	0
   398  000262  0100               	movlb	0	; () banked
   399  000264  6F6C               	movwf	main@mode& (0+255),b
   400                           
   401                           ;main.c: 35: unsigned char SignalStrength[3];
   402                           ;main.c: 36: char PathTaken[100];
   403                           ;main.c: 37: unsigned int test=0;
   404  000266  0E00               	movlw	0
   405  000268  0100               	movlb	0	; () banked
   406  00026A  6F6B               	movwf	(main@test+1)& (0+255),b
   407  00026C  0E00               	movlw	0
   408  00026E  6F6A               	movwf	main@test& (0+255),b
   409                           
   410                           ; BSR set to: 0
   411                           ;main.c: 40: INTCONbits.GIEH = 1;
   412  000270  8EF2               	bsf	intcon,7,c	;volatile
   413                           
   414                           ; BSR set to: 0
   415                           ;main.c: 41: RCONbits.IPEN = 1;
   416  000272  8ED0               	bsf	4048,7,c	;volatile
   417                           
   418                           ; BSR set to: 0
   419                           ;main.c: 42: INTCONbits.GIEL = 1;
   420  000274  8CF2               	bsf	intcon,6,c	;volatile
   421                           
   422                           ; BSR set to: 0
   423                           ;main.c: 43: INTCONbits.INT0IE = 1;
   424  000276  88F2               	bsf	intcon,4,c	;volatile
   425                           
   426                           ; BSR set to: 0
   427                           ;main.c: 44: INTCONbits.PEIE = 1;
   428  000278  8CF2               	bsf	intcon,6,c	;volatile
   429                           
   430                           ; BSR set to: 0
   431                           ;main.c: 46: IPR1bits.RCIP=1;
   432  00027A  8A9F               	bsf	3999,5,c	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 47: PIE1bits.RCIE=1;
   436  00027C  8A9D               	bsf	3997,5,c	;volatile
   437                           
   438                           ;main.c: 50: struct DC_motor motorL, motorR;
   439                           ;main.c: 51: motorL.power=0;
   440  00027E  0E00               	movlw	0
   441  000280  0100               	movlb	0	; () banked
   442  000282  6F6E               	movwf	main@motorL& (0+255),b
   443                           
   444                           ;main.c: 52: motorL.direction=1;
   445  000284  0E01               	movlw	1
   446  000286  0100               	movlb	0	; () banked
   447  000288  6F6F               	movwf	(main@motorL+1)& (0+255),b
   448                           
   449                           ; BSR set to: 0
   450                           ;main.c: 53: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   451  00028A  0E79               	movlw	121
   452  00028C  0100               	movlb	0	; () banked
   453  00028E  6F70               	movwf	(main@motorL+2)& (0+255),b
   454  000290  0E0F               	movlw	15
   455  000292  0100               	movlb	0	; () banked
   456  000294  6F71               	movwf	(main@motorL+3)& (0+255),b
   457                           
   458                           ; BSR set to: 0
   459                           ;main.c: 54: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   460  000296  0E78               	movlw	120
   461  000298  0100               	movlb	0	; () banked
   462  00029A  6F72               	movwf	(main@motorL+4)& (0+255),b
   463  00029C  0E0F               	movlw	15
   464  00029E  0100               	movlb	0	; () banked
   465  0002A0  6F73               	movwf	(main@motorL+5)& (0+255),b
   466                           
   467                           ;main.c: 55: motorL.dir_pin=0;
   468  0002A2  0E00               	movlw	0
   469  0002A4  0100               	movlb	0	; () banked
   470  0002A6  6F74               	movwf	(main@motorL+6)& (0+255),b
   471                           
   472                           ;main.c: 56: motorL.PWMperiod=199;
   473  0002A8  0E00               	movlw	0
   474  0002AA  0100               	movlb	0	; () banked
   475  0002AC  6F76               	movwf	(main@motorL+8)& (0+255),b
   476  0002AE  0EC7               	movlw	199
   477  0002B0  6F75               	movwf	(main@motorL+7)& (0+255),b
   478                           
   479                           ;main.c: 58: motorR.power=0;
   480  0002B2  0E00               	movlw	0
   481  0002B4  0100               	movlb	0	; () banked
   482  0002B6  6F77               	movwf	main@motorR& (0+255),b
   483                           
   484                           ;main.c: 59: motorR.direction=1;
   485  0002B8  0E01               	movlw	1
   486  0002BA  0100               	movlb	0	; () banked
   487  0002BC  6F78               	movwf	(main@motorR+1)& (0+255),b
   488                           
   489                           ; BSR set to: 0
   490                           ;main.c: 60: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   491  0002BE  0E77               	movlw	119
   492  0002C0  0100               	movlb	0	; () banked
   493  0002C2  6F79               	movwf	(main@motorR+2)& (0+255),b
   494  0002C4  0E0F               	movlw	15
   495  0002C6  0100               	movlb	0	; () banked
   496  0002C8  6F7A               	movwf	(main@motorR+3)& (0+255),b
   497                           
   498                           ; BSR set to: 0
   499                           ;main.c: 61: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   500  0002CA  0E76               	movlw	118
   501  0002CC  0100               	movlb	0	; () banked
   502  0002CE  6F7B               	movwf	(main@motorR+4)& (0+255),b
   503  0002D0  0E0F               	movlw	15
   504  0002D2  0100               	movlb	0	; () banked
   505  0002D4  6F7C               	movwf	(main@motorR+5)& (0+255),b
   506                           
   507                           ;main.c: 62: motorR.dir_pin=2;
   508  0002D6  0E02               	movlw	2
   509  0002D8  0100               	movlb	0	; () banked
   510  0002DA  6F7D               	movwf	(main@motorR+6)& (0+255),b
   511                           
   512                           ;main.c: 63: motorR.PWMperiod=199;
   513  0002DC  0E00               	movlw	0
   514  0002DE  0100               	movlb	0	; () banked
   515  0002E0  6F7F               	movwf	(main@motorR+8)& (0+255),b
   516  0002E2  0EC7               	movlw	199
   517  0002E4  6F7E               	movwf	(main@motorR+7)& (0+255),b
   518                           
   519                           ;main.c: 65: OSCCON = 0x72;
   520  0002E6  0E72               	movlw	114
   521  0002E8  6ED3               	movwf	4051,c	;volatile
   522  0002EA                     l47:
   523  0002EA  B4D3               	btfsc	4051,2,c	;volatile
   524  0002EC  D06F               	goto	l1792
   525  0002EE  D7FD               	goto	l47
   526  0002F0                     l1756:
   527                           
   528                           ;main.c: 73: initMotorPWM();
   529  0002F0  EC92  F004         	call	_initMotorPWM	;wreg free
   530                           
   531                           ;main.c: 74: initRFID();
   532  0002F4  ECD1  F004         	call	_initRFID	;wreg free
   533                           
   534                           ;main.c: 75: initIR();
   535  0002F8  ECE1  F004         	call	_initIR	;wreg free
   536                           
   537                           ;main.c: 77: mode = 1;
   538  0002FC  0E01               	movlw	1
   539  0002FE  0100               	movlb	0	; () banked
   540  000300  6F6C               	movwf	main@mode& (0+255),b
   541                           
   542                           ;main.c: 78: break;
   543  000302  D064               	goto	l1792
   544  000304                     l1760:
   545                           
   546                           ; BSR set to: 0
   547                           ;main.c: 95: ScanWithRange(&motorL, &motorR, 1);
   548  000304  0E6E               	movlw	low main@motorL
   549  000306  6E2F               	movwf	ScanWithRange@mL,c
   550  000308  0E00               	movlw	high main@motorL
   551  00030A  6E30               	movwf	ScanWithRange@mL+1,c
   552  00030C  0E77               	movlw	low main@motorR
   553  00030E  6E31               	movwf	ScanWithRange@mR,c
   554  000310  0E00               	movlw	high main@motorR
   555  000312  6E32               	movwf	ScanWithRange@mR+1,c
   556  000314  0E01               	movlw	1
   557  000316  6E33               	movwf	ScanWithRange@tenth_seconds,c
   558  000318  EC56  F000         	call	_ScanWithRange	;wreg free
   559                           
   560                           ;main.c: 103: break;
   561  00031C  D057               	goto	l1792
   562  00031E                     l1762:
   563                           
   564                           ;main.c: 108: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   565  00031E  0E03               	movlw	3
   566  000320  0100               	movlb	0	; () banked
   567  000322  198F               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   568  000324  A4D8               	btfss	status,2,c
   569  000326  D002               	goto	u1020
   570  000328  0E01               	movlw	1
   571  00032A  D001               	goto	u1022
   572  00032C                     u1020:
   573  00032C  0E00               	movlw	0
   574  00032E                     u1022:
   575  00032E  6E38               	movwf	??_main& (0+255),c
   576  000330  0E02               	movlw	2
   577  000332  0100               	movlb	0	; () banked
   578  000334  1980               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   579  000336  A4D8               	btfss	status,2,c
   580  000338  D002               	goto	u1030
   581  00033A  0E01               	movlw	1
   582  00033C  D001               	goto	u1032
   583  00033E                     u1030:
   584  00033E  0E00               	movlw	0
   585  000340                     u1032:
   586  000340  1438               	andwf	??_main,w,c
   587  000342  A0E8               	btfss	wreg,0,c
   588  000344  D043               	goto	l1792
   589                           
   590                           ; BSR set to: 0
   591                           ;main.c: 109: if (VerifySignal(ReceivedString)){
   592  000346  0E80               	movlw	low _ReceivedString
   593  000348  6E0F               	movwf	VerifySignal@Signal,c
   594  00034A  0E00               	movlw	high _ReceivedString
   595  00034C  6E10               	movwf	VerifySignal@Signal+1,c
   596  00034E  EC8D  F002         	call	_VerifySignal	;wreg free
   597  000352  0900               	iorlw	0
   598  000354  B4D8               	btfsc	status,2,c
   599  000356  D03A               	goto	l1792
   600                           
   601                           ;main.c: 111: for (i=0; i<10; i++){
   602  000358  0E00               	movlw	0
   603  00035A  0100               	movlb	0	; () banked
   604  00035C  6F6D               	movwf	main@i& (0+255),b
   605  00035E                     l1768:
   606                           
   607                           ; BSR set to: 0
   608  00035E  0E09               	movlw	9
   609  000360  0100               	movlb	0	; () banked
   610  000362  656D               	cpfsgt	main@i& (0+255),b
   611  000364  D001               	goto	l1772
   612  000366  D01C               	goto	l1778
   613  000368                     l1772:
   614                           
   615                           ; BSR set to: 0
   616                           ;main.c: 112: Message[i] = ReceivedString[i+1];
   617  000368  0100               	movlb	0	; () banked
   618  00036A  516D               	movf	main@i& (0+255),w,b
   619  00036C  6E38               	movwf	??_main& (0+255),c
   620  00036E  6A39               	clrf	(??_main+1)& (0+255),c
   621  000370  0E01               	movlw	1
   622  000372  2638               	addwf	??_main,f,c
   623  000374  0E00               	movlw	0
   624  000376  2239               	addwfc	??_main+1,f,c
   625  000378  0E80               	movlw	low _ReceivedString
   626  00037A  2438               	addwf	??_main,w,c
   627  00037C  6ED9               	movwf	fsr2l,c
   628  00037E  0E00               	movlw	high _ReceivedString
   629  000380  2039               	addwfc	??_main+1,w,c
   630  000382  6EDA               	movwf	fsr2h,c
   631  000384  0100               	movlb	0	; () banked
   632  000386  516D               	movf	main@i& (0+255),w,b
   633  000388  0D01               	mullw	1
   634  00038A  0E60               	movlw	low main@Message
   635  00038C  24F3               	addwf	prodl,w,c
   636  00038E  6EE1               	movwf	fsr1l,c
   637  000390  0E00               	movlw	high main@Message
   638  000392  20F4               	addwfc	prodh,w,c
   639  000394  6EE2               	movwf	fsr1h,c
   640  000396  CFDF FFE7          	movff	indf2,indf1
   641                           
   642                           ; BSR set to: 0
   643  00039A  0100               	movlb	0	; () banked
   644  00039C  2B6D               	incf	main@i& (0+255),f,b
   645  00039E  D7DF               	goto	l1768
   646  0003A0                     l1778:
   647                           
   648                           ; BSR set to: 0
   649                           ;main.c: 113: }
   650                           ;main.c: 115: for (i=0; i<16; i++) {
   651  0003A0  0E00               	movlw	0
   652  0003A2  0100               	movlb	0	; () banked
   653  0003A4  6F6D               	movwf	main@i& (0+255),b
   654  0003A6                     l1780:
   655                           
   656                           ; BSR set to: 0
   657  0003A6  0E0F               	movlw	15
   658  0003A8  0100               	movlb	0	; () banked
   659  0003AA  656D               	cpfsgt	main@i& (0+255),b
   660  0003AC  D001               	goto	l1784
   661  0003AE  D00E               	goto	l1792
   662  0003B0                     l1784:
   663                           
   664                           ; BSR set to: 0
   665                           ;main.c: 116: ReceivedString[i]=0;
   666  0003B0  0100               	movlb	0	; () banked
   667  0003B2  516D               	movf	main@i& (0+255),w,b
   668  0003B4  0D01               	mullw	1
   669  0003B6  0E80               	movlw	low _ReceivedString
   670  0003B8  24F3               	addwf	prodl,w,c
   671  0003BA  6ED9               	movwf	fsr2l,c
   672  0003BC  0E00               	movlw	high _ReceivedString
   673  0003BE  20F4               	addwfc	prodh,w,c
   674  0003C0  6EDA               	movwf	fsr2h,c
   675  0003C2  0E00               	movlw	0
   676  0003C4  6EDF               	movwf	indf2,c
   677                           
   678                           ; BSR set to: 0
   679  0003C6  0100               	movlb	0	; () banked
   680  0003C8  2B6D               	incf	main@i& (0+255),f,b
   681  0003CA  D7ED               	goto	l1780
   682  0003CC                     l1792:
   683  0003CC  0100               	movlb	0	; () banked
   684  0003CE  516C               	movf	main@mode& (0+255),w,b
   685                           
   686                           ; Switch size 1, requested type "space"
   687                           ; Number of cases is 4, Range of values is 0 to 3
   688                           ; switch strategies available:
   689                           ; Name         Instructions Cycles
   690                           ; simple_byte           13     7 (average)
   691                           ;	Chosen strategy is simple_byte
   692  0003D0  0A00               	xorlw	0	; case 0
   693  0003D2  B4D8               	btfsc	status,2,c
   694  0003D4  D78D               	goto	l1756
   695  0003D6  0A01               	xorlw	1	; case 1
   696  0003D8  B4D8               	btfsc	status,2,c
   697  0003DA  D794               	goto	l1760
   698  0003DC  0A03               	xorlw	3	; case 2
   699  0003DE  B4D8               	btfsc	status,2,c
   700  0003E0  D79E               	goto	l1762
   701  0003E2  0A01               	xorlw	1	; case 3
   702                           
   703                           ; BSR set to: 0
   704                           
   705                           ; BSR set to: 0
   706  0003E4  D7F3               	goto	l1792
   707  0003E6                     __end_of_main:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           prodh	equ	0xFF4
   711                           prodl	equ	0xFF3
   712                           intcon	equ	0xFF2
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           indf1	equ	0xFE7
   716                           fsr1h	equ	0xFE2
   717                           fsr1l	equ	0xFE1
   718                           indf2	equ	0xFDF
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8
   722                           
   723 ;; *************** function _initRFID *****************
   724 ;; Defined at:
   725 ;;		line 5 in file "RFID_Reader.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;		None               void
   732 ;; Registers used:
   733 ;;		wreg, status,2
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   739 ;;      Params:         0       0       0       0
   740 ;;      Locals:         1       0       0       0
   741 ;;      Temps:          0       0       0       0
   742 ;;      Totals:         1       0       0       0
   743 ;;Total ram usage:        1 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    1
   746 ;; This function calls:
   747 ;;		Nothing
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text1
   754  0009A2                     __ptext1:
   755                           	opt stack 0
   756  0009A2                     _initRFID:
   757                           	opt stack 29
   758                           
   759                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   760                           
   761                           ; BSR set to: 0
   762                           ;incstack = 0
   763  0009A2  0E01               	movlw	1
   764  0009A4  6E0F               	movwf	_initRFID$1268,c
   765  0009A6  5094               	movf	3988,w,c	;volatile
   766  0009A8  C00F  FF94         	movff	_initRFID$1268,3988	;volatile
   767                           
   768                           ;RFID_Reader.c: 10: SPBRG=205;
   769  0009AC  0ECD               	movlw	205
   770  0009AE  6EAF               	movwf	4015,c	;volatile
   771                           
   772                           ;RFID_Reader.c: 11: SPBRGH=0;
   773  0009B0  0E00               	movlw	0
   774  0009B2  6EB0               	movwf	4016,c	;volatile
   775                           
   776                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   777  0009B4  86AA               	bsf	4010,3,c	;volatile
   778                           
   779                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   780  0009B6  84AC               	bsf	4012,2,c	;volatile
   781                           
   782                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   783  0009B8  88AB               	bsf	4011,4,c	;volatile
   784                           
   785                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   786  0009BA  8EAB               	bsf	4011,7,c	;volatile
   787                           
   788                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   789  0009BC  98AC               	bcf	4012,4,c	;volatile
   790                           
   791                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   792  0009BE  9CAB               	bcf	4011,6,c	;volatile
   793  0009C0  0012               	return		;funcret
   794  0009C2                     __end_of_initRFID:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           prodh	equ	0xFF4
   798                           prodl	equ	0xFF3
   799                           intcon	equ	0xFF2
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           indf1	equ	0xFE7
   803                           fsr1h	equ	0xFE2
   804                           fsr1l	equ	0xFE1
   805                           indf2	equ	0xFDF
   806                           fsr2h	equ	0xFDA
   807                           fsr2l	equ	0xFD9
   808                           status	equ	0xFD8
   809                           
   810 ;; *************** function _initMotorPWM *****************
   811 ;; Defined at:
   812 ;;		line 4 in file "dc_motor.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;		None               void
   819 ;; Registers used:
   820 ;;		wreg, status,2
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   826 ;;      Params:         0       0       0       0
   827 ;;      Locals:         0       0       0       0
   828 ;;      Temps:          0       0       0       0
   829 ;;      Totals:         0       0       0       0
   830 ;;Total ram usage:        0 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text2
   841  000924                     __ptext2:
   842                           	opt stack 0
   843  000924                     _initMotorPWM:
   844                           	opt stack 29
   845                           
   846                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   847                           
   848                           ;incstack = 0
   849  000924  0E00               	movlw	0
   850  000926  6E7F               	movwf	3967,c	;volatile
   851                           
   852                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   853  000928  0E80               	movlw	128
   854  00092A  6E7E               	movwf	3966,c	;volatile
   855                           
   856                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   857  00092C  0E6F               	movlw	111
   858  00092E  6E6F               	movwf	3951,c	;volatile
   859                           
   860                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   861  000930  0E00               	movlw	0
   862  000932  6E6E               	movwf	3950,c	;volatile
   863                           
   864                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   865  000934  0EC7               	movlw	199
   866  000936  6E7B               	movwf	3963,c	;volatile
   867                           
   868                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   869  000938  0E00               	movlw	0
   870  00093A  6E7A               	movwf	3962,c	;volatile
   871                           
   872                           ;dc_motor.c: 13: PDC0L = 0<<2;
   873  00093C  0E00               	movlw	0
   874  00093E  6E79               	movwf	3961,c	;volatile
   875                           
   876                           ;dc_motor.c: 14: PDC0H = 0>>6;
   877  000940  0E00               	movlw	0
   878  000942  6E78               	movwf	3960,c	;volatile
   879                           
   880                           ;dc_motor.c: 15: PDC1L = 0<<2;
   881  000944  0E00               	movlw	0
   882  000946  6E77               	movwf	3959,c	;volatile
   883                           
   884                           ;dc_motor.c: 16: PDC1H = 0>>6;
   885  000948  0E00               	movlw	0
   886  00094A  6E76               	movwf	3958,c	;volatile
   887                           
   888                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   889  00094C  9093               	bcf	3987,0,c	;volatile
   890                           
   891                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   892  00094E  9293               	bcf	3987,1,c	;volatile
   893                           
   894                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   895  000950  9493               	bcf	3987,2,c	;volatile
   896                           
   897                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   898  000952  9693               	bcf	3987,3,c	;volatile
   899  000954  0012               	return		;funcret
   900  000956                     __end_of_initMotorPWM:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           prodh	equ	0xFF4
   904                           prodl	equ	0xFF3
   905                           intcon	equ	0xFF2
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           indf1	equ	0xFE7
   909                           fsr1h	equ	0xFE2
   910                           fsr1l	equ	0xFE1
   911                           indf2	equ	0xFDF
   912                           fsr2h	equ	0xFDA
   913                           fsr2l	equ	0xFD9
   914                           status	equ	0xFD8
   915                           
   916 ;; *************** function _initIR *****************
   917 ;; Defined at:
   918 ;;		line 30 in file "IR_Reading.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;		None               void
   925 ;; Registers used:
   926 ;;		wreg, status,2
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   932 ;;      Params:         0       0       0       0
   933 ;;      Locals:         0       0       0       0
   934 ;;      Temps:          0       0       0       0
   935 ;;      Totals:         0       0       0       0
   936 ;;Total ram usage:        0 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    1
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947  0009C2                     __ptext3:
   948                           	opt stack 0
   949  0009C2                     _initIR:
   950                           	opt stack 29
   951                           
   952                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   953                           
   954                           ;incstack = 0
   955  0009C2  9489               	bcf	3977,2,c	;volatile
   956                           
   957                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   958  0009C4  9689               	bcf	3977,3,c	;volatile
   959                           
   960                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   961  0009C6  8492               	bsf	3986,2,c	;volatile
   962                           
   963                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   964  0009C8  8692               	bsf	3986,3,c	;volatile
   965                           
   966                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   967  0009CA  94B8               	bcf	4024,2,c	;volatile
   968                           
   969                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   970  0009CC  96B8               	bcf	4024,3,c	;volatile
   971                           
   972                           ;IR_Reading.c: 48: CAP1CON=0b00000110;
   973  0009CE  0E06               	movlw	6
   974  0009D0  6E63               	movwf	3939,c	;volatile
   975                           
   976                           ;IR_Reading.c: 49: CAP2CON=0b00000110;
   977  0009D2  0E06               	movlw	6
   978  0009D4  6E62               	movwf	3938,c	;volatile
   979                           
   980                           ;IR_Reading.c: 52: TRISEbits.RE0=0;
   981  0009D6  9096               	bcf	3990,0,c	;volatile
   982                           
   983                           ;IR_Reading.c: 55: TRISEbits.RE1=0;
   984  0009D8  9296               	bcf	3990,1,c	;volatile
   985                           
   986                           ;IR_Reading.c: 65: T5CON=0b01011001;
   987  0009DA  0E59               	movlw	89
   988  0009DC  6EB7               	movwf	4023,c	;volatile
   989  0009DE  0012               	return		;funcret
   990  0009E0                     __end_of_initIR:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           prodh	equ	0xFF4
   994                           prodl	equ	0xFF3
   995                           intcon	equ	0xFF2
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           indf1	equ	0xFE7
   999                           fsr1h	equ	0xFE2
  1000                           fsr1l	equ	0xFE1
  1001                           indf2	equ	0xFDF
  1002                           fsr2h	equ	0xFDA
  1003                           fsr2l	equ	0xFD9
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function _VerifySignal *****************
  1007 ;; Defined at:
  1008 ;;		line 56 in file "RFID_Reader.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1011 ;;		 -> ReceivedString(16), 
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;  hexByte         2   23[COMRAM] unsigned int 
  1014 ;;  i               1   25[COMRAM] unsigned char 
  1015 ;;  checksum        1   22[COMRAM] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      unsigned char 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1025 ;;      Params:         2       0       0       0
  1026 ;;      Locals:         4       0       0       0
  1027 ;;      Temps:          6       0       0       0
  1028 ;;      Totals:        12       0       0       0
  1029 ;;Total ram usage:       12 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    1
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_main
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text4
  1040  00051A                     __ptext4:
  1041                           	opt stack 0
  1042  00051A                     _VerifySignal:
  1043                           	opt stack 29
  1044                           
  1045                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1046                           
  1047                           ;incstack = 0
  1048  00051A  0E00               	movlw	0
  1049  00051C  6E17               	movwf	VerifySignal@checksum,c
  1050                           
  1051                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1052  00051E  0E00               	movlw	0
  1053  000520  6E19               	movwf	VerifySignal@hexByte+1,c
  1054  000522  0E00               	movlw	0
  1055  000524  6E18               	movwf	VerifySignal@hexByte,c
  1056                           
  1057                           ;RFID_Reader.c: 59: unsigned char i=0;
  1058  000526  0E00               	movlw	0
  1059  000528  6E1A               	movwf	VerifySignal@i,c
  1060                           
  1061                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1062  00052A  EE20 F004          	lfsr	2,4
  1063  00052E  500F               	movf	VerifySignal@Signal,w,c
  1064  000530  26D9               	addwf	fsr2l,f,c
  1065  000532  5010               	movf	VerifySignal@Signal+1,w,c
  1066  000534  22DA               	addwfc	fsr2h,f,c
  1067  000536  50DF               	movf	indf2,w,c
  1068  000538  6E11               	movwf	??_VerifySignal& (0+255),c
  1069  00053A  EE20 F003          	lfsr	2,3
  1070  00053E  500F               	movf	VerifySignal@Signal,w,c
  1071  000540  26D9               	addwf	fsr2l,f,c
  1072  000542  5010               	movf	VerifySignal@Signal+1,w,c
  1073  000544  22DA               	addwfc	fsr2h,f,c
  1074  000546  50DF               	movf	indf2,w,c
  1075  000548  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1076  00054A  5012               	movf	??_VerifySignal+1,w,c
  1077  00054C  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1078  00054E  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1079  000550  5011               	movf	??_VerifySignal,w,c
  1080  000552  2413               	addwf	??_VerifySignal+2,w,c
  1081  000554  6E18               	movwf	VerifySignal@hexByte,c
  1082  000556  0E00               	movlw	0
  1083  000558  2014               	addwfc	??_VerifySignal+3,w,c
  1084  00055A  6E19               	movwf	VerifySignal@hexByte+1,c
  1085                           
  1086                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1087  00055C  EE20 F002          	lfsr	2,2
  1088  000560  500F               	movf	VerifySignal@Signal,w,c
  1089  000562  26D9               	addwf	fsr2l,f,c
  1090  000564  5010               	movf	VerifySignal@Signal+1,w,c
  1091  000566  22DA               	addwfc	fsr2h,f,c
  1092  000568  50DF               	movf	indf2,w,c
  1093  00056A  1818               	xorwf	VerifySignal@hexByte,w,c
  1094  00056C  6E17               	movwf	VerifySignal@checksum,c
  1095                           
  1096                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1097  00056E  0E05               	movlw	5
  1098  000570  6E1A               	movwf	VerifySignal@i,c
  1099  000572                     l1704:
  1100  000572  0E09               	movlw	9
  1101  000574  641A               	cpfsgt	VerifySignal@i,c
  1102  000576  D001               	goto	l1708
  1103  000578  D028               	goto	l1716
  1104  00057A                     l1708:
  1105                           
  1106                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1107  00057A  501A               	movf	VerifySignal@i,w,c
  1108  00057C  6E11               	movwf	??_VerifySignal& (0+255),c
  1109  00057E  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1110  000580  0E01               	movlw	1
  1111  000582  2611               	addwf	??_VerifySignal,f,c
  1112  000584  0E00               	movlw	0
  1113  000586  2212               	addwfc	??_VerifySignal+1,f,c
  1114  000588  5011               	movf	??_VerifySignal,w,c
  1115  00058A  240F               	addwf	VerifySignal@Signal,w,c
  1116  00058C  6ED9               	movwf	fsr2l,c
  1117  00058E  5012               	movf	??_VerifySignal+1,w,c
  1118  000590  2010               	addwfc	VerifySignal@Signal+1,w,c
  1119  000592  6EDA               	movwf	fsr2h,c
  1120  000594  50DF               	movf	indf2,w,c
  1121  000596  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1122  000598  501A               	movf	VerifySignal@i,w,c
  1123  00059A  0D01               	mullw	1
  1124  00059C  50F3               	movf	prodl,w,c
  1125  00059E  240F               	addwf	VerifySignal@Signal,w,c
  1126  0005A0  6ED9               	movwf	fsr2l,c
  1127  0005A2  50F4               	movf	prodh,w,c
  1128  0005A4  2010               	addwfc	VerifySignal@Signal+1,w,c
  1129  0005A6  6EDA               	movwf	fsr2h,c
  1130  0005A8  50DF               	movf	indf2,w,c
  1131  0005AA  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1132  0005AC  5014               	movf	??_VerifySignal+3,w,c
  1133  0005AE  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1134  0005B0  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1135  0005B2  5013               	movf	??_VerifySignal+2,w,c
  1136  0005B4  2415               	addwf	??_VerifySignal+4,w,c
  1137  0005B6  6E18               	movwf	VerifySignal@hexByte,c
  1138  0005B8  0E00               	movlw	0
  1139  0005BA  2016               	addwfc	??_VerifySignal+5,w,c
  1140  0005BC  6E19               	movwf	VerifySignal@hexByte+1,c
  1141                           
  1142                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1143  0005BE  5017               	movf	VerifySignal@checksum,w,c
  1144  0005C0  1818               	xorwf	VerifySignal@hexByte,w,c
  1145  0005C2  6E17               	movwf	VerifySignal@checksum,c
  1146  0005C4  0E02               	movlw	2
  1147  0005C6  261A               	addwf	VerifySignal@i,f,c
  1148  0005C8  D7D4               	goto	l1704
  1149  0005CA                     l1716:
  1150                           
  1151                           ;RFID_Reader.c: 69: }
  1152                           ;RFID_Reader.c: 72: return 1;
  1153  0005CA  0E01               	movlw	1
  1154  0005CC  0012               	return	
  1155  0005CE                     __end_of_VerifySignal:
  1156                           	opt stack 0
  1157                           tblptru	equ	0xFF8
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           intcon	equ	0xFF2
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           indf1	equ	0xFE7
  1164                           fsr1h	equ	0xFE2
  1165                           fsr1l	equ	0xFE1
  1166                           indf2	equ	0xFDF
  1167                           fsr2h	equ	0xFDA
  1168                           fsr2l	equ	0xFD9
  1169                           status	equ	0xFD8
  1170                           
  1171 ;; *************** function _ScanWithRange *****************
  1172 ;; Defined at:
  1173 ;;		line 75 in file "Movement.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1176 ;;		 -> main@motorL(9), 
  1177 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1178 ;;		 -> main@motorR(9), 
  1179 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  SignalStreng    4   51[COMRAM] unsigned int [2]
  1182 ;; Return value:  Size  Location     Type
  1183 ;;		None               void
  1184 ;; Registers used:
  1185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1191 ;;      Params:         5       0       0       0
  1192 ;;      Locals:         4       0       0       0
  1193 ;;      Temps:          0       0       0       0
  1194 ;;      Totals:         9       0       0       0
  1195 ;;Total ram usage:        9 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    5
  1198 ;; This function calls:
  1199 ;;		_delay_tenth_s
  1200 ;;		_enableSensor
  1201 ;;		_grabAverageIR
  1202 ;;		_stop
  1203 ;;		_turnLeft
  1204 ;;		_turnRight
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text5
  1211  0000AC                     __ptext5:
  1212                           	opt stack 0
  1213  0000AC                     _ScanWithRange:
  1214                           	opt stack 25
  1215                           
  1216                           ;Movement.c: 78: unsigned int SignalStrength[2];
  1217                           ;Movement.c: 81: enableSensor(0, 1);
  1218                           
  1219                           ;incstack = 0
  1220  0000AC  0E01               	movlw	1
  1221  0000AE  6E0F               	movwf	enableSensor@status,c
  1222  0000B0  0E00               	movlw	0
  1223  0000B2  ECBE  F004         	call	_enableSensor
  1224                           
  1225                           ;Movement.c: 82: enableSensor(1, 1);
  1226  0000B6  0E01               	movlw	1
  1227  0000B8  6E0F               	movwf	enableSensor@status,c
  1228  0000BA  0E01               	movlw	1
  1229  0000BC  ECBE  F004         	call	_enableSensor
  1230                           
  1231                           ;Movement.c: 85: stop(mL,mR);
  1232  0000C0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1233  0000C4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1234  0000C8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1235  0000CC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1236  0000D0  ECE7  F002         	call	_stop	;wreg free
  1237                           
  1238                           ;Movement.c: 86: delay_tenth_s(tenth_seconds);
  1239  0000D4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1240  0000D6  EC76  F004         	call	_delay_tenth_s
  1241                           
  1242                           ;Movement.c: 87: SignalStrength[1]=grabAverageIR();
  1243  0000DA  EC57  F004         	call	_grabAverageIR	;wreg free
  1244  0000DE  C016  F036         	movff	?_grabAverageIR,ScanWithRange@SignalStrength+2
  1245  0000E2  C017  F037         	movff	?_grabAverageIR+1,ScanWithRange@SignalStrength+3
  1246                           
  1247                           ;Movement.c: 90: turnLeft(mL,mR);
  1248  0000E6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1249  0000EA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1250  0000EE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1251  0000F2  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1252  0000F6  EC32  F004         	call	_turnLeft	;wreg free
  1253                           
  1254                           ;Movement.c: 91: delay_tenth_s(tenth_seconds);
  1255  0000FA  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1256  0000FC  EC76  F004         	call	_delay_tenth_s
  1257                           
  1258                           ;Movement.c: 94: stop(mL,mR);
  1259  000100  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1260  000104  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1261  000108  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1262  00010C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1263  000110  ECE7  F002         	call	_stop	;wreg free
  1264                           
  1265                           ;Movement.c: 95: delay_tenth_s(tenth_seconds);
  1266  000114  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1267  000116  EC76  F004         	call	_delay_tenth_s
  1268                           
  1269                           ;Movement.c: 96: SignalStrength[0]=grabAverageIR();
  1270  00011A  EC57  F004         	call	_grabAverageIR	;wreg free
  1271  00011E  C016  F034         	movff	?_grabAverageIR,ScanWithRange@SignalStrength
  1272  000122  C017  F035         	movff	?_grabAverageIR+1,ScanWithRange@SignalStrength+1
  1273                           
  1274                           ;Movement.c: 99: turnRight(mL,mR);
  1275  000126  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1276  00012A  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1277  00012E  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1278  000132  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1279  000136  EC0D  F004         	call	_turnRight	;wreg free
  1280                           
  1281                           ;Movement.c: 100: delay_tenth_s(2*tenth_seconds);
  1282  00013A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1283  00013C  0D02               	mullw	2
  1284  00013E  50F3               	movf	prodl,w,c
  1285  000140  EC76  F004         	call	_delay_tenth_s
  1286                           
  1287                           ;Movement.c: 103: stop(mL,mR);
  1288  000144  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1289  000148  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1290  00014C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1291  000150  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1292  000154  ECE7  F002         	call	_stop	;wreg free
  1293                           
  1294                           ;Movement.c: 104: delay_tenth_s(tenth_seconds);
  1295  000158  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1296  00015A  EC76  F004         	call	_delay_tenth_s
  1297                           
  1298                           ;Movement.c: 105: SignalStrength[2]=grabAverageIR();
  1299  00015E  EC57  F004         	call	_grabAverageIR	;wreg free
  1300  000162  C016  F038         	movff	?_grabAverageIR,ScanWithRange@SignalStrength+4
  1301  000166  C017  F039         	movff	?_grabAverageIR+1,ScanWithRange@SignalStrength+5
  1302                           
  1303                           ;Movement.c: 108: if(SignalStrength[2]>SignalStrength[0] && SignalStrength[2]>SignalStre
      +                          ngth[1]){
  1304  00016A  5038               	movf	ScanWithRange@SignalStrength+4,w,c
  1305  00016C  5C34               	subwf	ScanWithRange@SignalStrength,w,c
  1306  00016E  5039               	movf	ScanWithRange@SignalStrength+5,w,c
  1307  000170  5835               	subwfb	ScanWithRange@SignalStrength+1,w,c
  1308  000172  B0D8               	btfsc	status,0,c
  1309  000174  D006               	goto	l1668
  1310  000176  5038               	movf	ScanWithRange@SignalStrength+4,w,c
  1311  000178  5C36               	subwf	ScanWithRange@SignalStrength+2,w,c
  1312  00017A  5039               	movf	ScanWithRange@SignalStrength+5,w,c
  1313  00017C  5837               	subwfb	ScanWithRange@SignalStrength+3,w,c
  1314  00017E  A0D8               	btfss	status,0,c
  1315  000180  D061               	goto	l1694
  1316  000182                     l1668:
  1317  000182  5036               	movf	ScanWithRange@SignalStrength+2,w,c
  1318  000184  5C34               	subwf	ScanWithRange@SignalStrength,w,c
  1319  000186  5037               	movf	ScanWithRange@SignalStrength+3,w,c
  1320  000188  5835               	subwfb	ScanWithRange@SignalStrength+1,w,c
  1321  00018A  B0D8               	btfsc	status,0,c
  1322  00018C  D01E               	goto	l1678
  1323  00018E  5036               	movf	ScanWithRange@SignalStrength+2,w,c
  1324  000190  5C38               	subwf	ScanWithRange@SignalStrength+4,w,c
  1325  000192  5037               	movf	ScanWithRange@SignalStrength+3,w,c
  1326  000194  5839               	subwfb	ScanWithRange@SignalStrength+5,w,c
  1327  000196  B0D8               	btfsc	status,0,c
  1328  000198  D018               	goto	l1678
  1329                           
  1330                           ;Movement.c: 115: turnLeft(mL,mR);
  1331  00019A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1332  00019E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1333  0001A2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1334  0001A6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1335  0001AA  EC32  F004         	call	_turnLeft	;wreg free
  1336                           
  1337                           ;Movement.c: 116: delay_tenth_s(tenth_seconds);
  1338  0001AE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1339  0001B0  EC76  F004         	call	_delay_tenth_s
  1340                           
  1341                           ;Movement.c: 117: stop(mL,mR);
  1342  0001B4  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1343  0001B8  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1344  0001BC  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1345  0001C0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1346  0001C4  ECE7  F002         	call	_stop	;wreg free
  1347                           
  1348                           ;Movement.c: 118: } else if (SignalStrength[0]>SignalStrength[1] && SignalStrength[0]>Si
      +                          gnalStrength[2]){
  1349  0001C8  D03D               	goto	l1694
  1350  0001CA                     l1678:
  1351  0001CA  5034               	movf	ScanWithRange@SignalStrength,w,c
  1352  0001CC  5C36               	subwf	ScanWithRange@SignalStrength+2,w,c
  1353  0001CE  5035               	movf	ScanWithRange@SignalStrength+1,w,c
  1354  0001D0  5837               	subwfb	ScanWithRange@SignalStrength+3,w,c
  1355  0001D2  B0D8               	btfsc	status,0,c
  1356  0001D4  D020               	goto	l1688
  1357  0001D6  5034               	movf	ScanWithRange@SignalStrength,w,c
  1358  0001D8  5C38               	subwf	ScanWithRange@SignalStrength+4,w,c
  1359  0001DA  5035               	movf	ScanWithRange@SignalStrength+1,w,c
  1360  0001DC  5839               	subwfb	ScanWithRange@SignalStrength+5,w,c
  1361  0001DE  B0D8               	btfsc	status,0,c
  1362  0001E0  D01A               	goto	l1688
  1363                           
  1364                           ;Movement.c: 122: turnLeft(mL,mR);
  1365  0001E2  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1366  0001E6  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1367  0001EA  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1368  0001EE  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1369  0001F2  EC32  F004         	call	_turnLeft	;wreg free
  1370                           
  1371                           ;Movement.c: 123: delay_tenth_s(2*tenth_seconds);
  1372  0001F6  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1373  0001F8  0D02               	mullw	2
  1374  0001FA  50F3               	movf	prodl,w,c
  1375  0001FC  EC76  F004         	call	_delay_tenth_s
  1376                           
  1377                           ;Movement.c: 124: stop(mL,mR);
  1378  000200  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1379  000204  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1380  000208  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1381  00020C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1382  000210  ECE7  F002         	call	_stop	;wreg free
  1383                           
  1384                           ;Movement.c: 125: } else {
  1385  000214  D017               	goto	l1694
  1386  000216                     l1688:
  1387                           
  1388                           ;Movement.c: 127: turnLeft(mL,mR);
  1389  000216  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1390  00021A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1391  00021E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1392  000222  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1393  000226  EC32  F004         	call	_turnLeft	;wreg free
  1394                           
  1395                           ;Movement.c: 128: delay_tenth_s(tenth_seconds);
  1396  00022A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1397  00022C  EC76  F004         	call	_delay_tenth_s
  1398                           
  1399                           ;Movement.c: 129: stop(mL,mR);
  1400  000230  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1401  000234  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1402  000238  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1403  00023C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1404  000240  ECE7  F002         	call	_stop	;wreg free
  1405  000244                     l1694:
  1406                           
  1407                           ;Movement.c: 130: }
  1408                           ;Movement.c: 133: enableSensor(0, 0);
  1409  000244  0E00               	movlw	0
  1410  000246  6E0F               	movwf	enableSensor@status,c
  1411  000248  0E00               	movlw	0
  1412  00024A  ECBE  F004         	call	_enableSensor
  1413                           
  1414                           ;Movement.c: 134: enableSensor(1, 0);
  1415  00024E  0E00               	movlw	0
  1416  000250  6E0F               	movwf	enableSensor@status,c
  1417  000252  0E01               	movlw	1
  1418  000254  ECBE  F004         	call	_enableSensor
  1419  000258  0012               	return		;funcret
  1420  00025A                     __end_of_ScanWithRange:
  1421                           	opt stack 0
  1422                           tblptru	equ	0xFF8
  1423                           prodh	equ	0xFF4
  1424                           prodl	equ	0xFF3
  1425                           intcon	equ	0xFF2
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf1	equ	0xFE7
  1429                           fsr1h	equ	0xFE2
  1430                           fsr1l	equ	0xFE1
  1431                           indf2	equ	0xFDF
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _turnRight *****************
  1437 ;; Defined at:
  1438 ;;		line 98 in file "dc_motor.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1441 ;;		 -> main@motorL(9), 
  1442 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1443 ;;		 -> main@motorR(9), 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;		None               void
  1448 ;; Registers used:
  1449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1455 ;;      Params:         4       0       0       0
  1456 ;;      Locals:         0       0       0       0
  1457 ;;      Temps:          0       0       0       0
  1458 ;;      Totals:         4       0       0       0
  1459 ;;Total ram usage:        4 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    4
  1462 ;; This function calls:
  1463 ;;		_fullSpeedAhead
  1464 ;;		_stop
  1465 ;; This function is called by:
  1466 ;;		_ScanWithRange
  1467 ;;		_ScanIR
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text6
  1472  00081A                     __ptext6:
  1473                           	opt stack 0
  1474  00081A                     _turnRight:
  1475                           	opt stack 25
  1476                           
  1477                           ;dc_motor.c: 100: stop(mL, mR);
  1478                           
  1479                           ;incstack = 0
  1480  00081A  C02B  F026         	movff	turnRight@mL,stop@mL
  1481  00081E  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1482  000822  C02D  F028         	movff	turnRight@mR,stop@mR
  1483  000826  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1484  00082A  ECE7  F002         	call	_stop	;wreg free
  1485                           
  1486                           ;dc_motor.c: 102: mL->direction=1;
  1487  00082E  EE20 F001          	lfsr	2,1
  1488  000832  502B               	movf	turnRight@mL,w,c
  1489  000834  26D9               	addwf	fsr2l,f,c
  1490  000836  502C               	movf	turnRight@mL+1,w,c
  1491  000838  22DA               	addwfc	fsr2h,f,c
  1492  00083A  0E01               	movlw	1
  1493  00083C  6EDF               	movwf	indf2,c
  1494                           
  1495                           ;dc_motor.c: 103: mR->direction=0;
  1496  00083E  EE20 F001          	lfsr	2,1
  1497  000842  502D               	movf	turnRight@mR,w,c
  1498  000844  26D9               	addwf	fsr2l,f,c
  1499  000846  502E               	movf	turnRight@mR+1,w,c
  1500  000848  22DA               	addwfc	fsr2h,f,c
  1501  00084A  0E00               	movlw	0
  1502  00084C  6EDF               	movwf	indf2,c
  1503                           
  1504                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1505  00084E  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1506  000852  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1507  000856  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1508  00085A  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1509  00085E  EC71  F003         	call	_fullSpeedAhead	;wreg free
  1510  000862  0012               	return		;funcret
  1511  000864                     __end_of_turnRight:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           intcon	equ	0xFF2
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           indf1	equ	0xFE7
  1520                           fsr1h	equ	0xFE2
  1521                           fsr1l	equ	0xFE1
  1522                           indf2	equ	0xFDF
  1523                           fsr2h	equ	0xFDA
  1524                           fsr2l	equ	0xFD9
  1525                           status	equ	0xFD8
  1526                           
  1527 ;; *************** function _turnLeft *****************
  1528 ;; Defined at:
  1529 ;;		line 87 in file "dc_motor.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1532 ;;		 -> main@motorL(9), 
  1533 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1534 ;;		 -> main@motorR(9), 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;		None               void
  1539 ;; Registers used:
  1540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1546 ;;      Params:         4       0       0       0
  1547 ;;      Locals:         0       0       0       0
  1548 ;;      Temps:          0       0       0       0
  1549 ;;      Totals:         4       0       0       0
  1550 ;;Total ram usage:        4 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    4
  1553 ;; This function calls:
  1554 ;;		_fullSpeedAhead
  1555 ;;		_stop
  1556 ;; This function is called by:
  1557 ;;		_ScanWithRange
  1558 ;;		_ScanIR
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text7
  1563  000864                     __ptext7:
  1564                           	opt stack 0
  1565  000864                     _turnLeft:
  1566                           	opt stack 25
  1567                           
  1568                           ;dc_motor.c: 89: stop(mL, mR);
  1569                           
  1570                           ;incstack = 0
  1571  000864  C02B  F026         	movff	turnLeft@mL,stop@mL
  1572  000868  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1573  00086C  C02D  F028         	movff	turnLeft@mR,stop@mR
  1574  000870  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1575  000874  ECE7  F002         	call	_stop	;wreg free
  1576                           
  1577                           ;dc_motor.c: 91: mL->direction=0;
  1578  000878  EE20 F001          	lfsr	2,1
  1579  00087C  502B               	movf	turnLeft@mL,w,c
  1580  00087E  26D9               	addwf	fsr2l,f,c
  1581  000880  502C               	movf	turnLeft@mL+1,w,c
  1582  000882  22DA               	addwfc	fsr2h,f,c
  1583  000884  0E00               	movlw	0
  1584  000886  6EDF               	movwf	indf2,c
  1585                           
  1586                           ;dc_motor.c: 92: mR->direction=1;
  1587  000888  EE20 F001          	lfsr	2,1
  1588  00088C  502D               	movf	turnLeft@mR,w,c
  1589  00088E  26D9               	addwf	fsr2l,f,c
  1590  000890  502E               	movf	turnLeft@mR+1,w,c
  1591  000892  22DA               	addwfc	fsr2h,f,c
  1592  000894  0E01               	movlw	1
  1593  000896  6EDF               	movwf	indf2,c
  1594                           
  1595                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1596  000898  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1597  00089C  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1598  0008A0  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1599  0008A4  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1600  0008A8  EC71  F003         	call	_fullSpeedAhead	;wreg free
  1601  0008AC  0012               	return		;funcret
  1602  0008AE                     __end_of_turnLeft:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           prodh	equ	0xFF4
  1606                           prodl	equ	0xFF3
  1607                           intcon	equ	0xFF2
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           indf1	equ	0xFE7
  1611                           fsr1h	equ	0xFE2
  1612                           fsr1l	equ	0xFE1
  1613                           indf2	equ	0xFDF
  1614                           fsr2h	equ	0xFDA
  1615                           fsr2l	equ	0xFD9
  1616                           status	equ	0xFD8
  1617                           
  1618 ;; *************** function _stop *****************
  1619 ;; Defined at:
  1620 ;;		line 67 in file "dc_motor.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1623 ;;		 -> main@motorL(9), 
  1624 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1625 ;;		 -> main@motorR(9), 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;		None
  1628 ;; Return value:  Size  Location     Type
  1629 ;;		None               void
  1630 ;; Registers used:
  1631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1637 ;;      Params:         4       0       0       0
  1638 ;;      Locals:         0       0       0       0
  1639 ;;      Temps:          0       0       0       0
  1640 ;;      Totals:         4       0       0       0
  1641 ;;Total ram usage:        4 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    3
  1644 ;; This function calls:
  1645 ;;		_setMotorPWM
  1646 ;; This function is called by:
  1647 ;;		_turnLeft
  1648 ;;		_turnRight
  1649 ;;		_ScanWithRange
  1650 ;;		_ScanIR
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text8
  1655  0005CE                     __ptext8:
  1656                           	opt stack 0
  1657  0005CE                     _stop:
  1658                           	opt stack 25
  1659                           
  1660                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1661                           
  1662                           ;incstack = 0
  1663  0005CE  D028               	goto	l1504
  1664  0005D0                     l1490:
  1665                           
  1666                           ;dc_motor.c: 71: if(mL->power>0){
  1667  0005D0  C026  FFD9         	movff	stop@mL,fsr2l
  1668  0005D4  C027  FFDA         	movff	stop@mL+1,fsr2h
  1669  0005D8  50DF               	movf	indf2,w,c
  1670  0005DA  B4D8               	btfsc	status,2,c
  1671  0005DC  D005               	goto	l1494
  1672                           
  1673                           ;dc_motor.c: 72: mL->power--;
  1674  0005DE  C026  FFD9         	movff	stop@mL,fsr2l
  1675  0005E2  C027  FFDA         	movff	stop@mL+1,fsr2h
  1676  0005E6  06DF               	decf	indf2,f,c
  1677  0005E8                     l1494:
  1678                           
  1679                           ;dc_motor.c: 73: }
  1680                           ;dc_motor.c: 74: if(mR->power>0){
  1681  0005E8  C028  FFD9         	movff	stop@mR,fsr2l
  1682  0005EC  C029  FFDA         	movff	stop@mR+1,fsr2h
  1683  0005F0  50DF               	movf	indf2,w,c
  1684  0005F2  B4D8               	btfsc	status,2,c
  1685  0005F4  D005               	goto	l1498
  1686                           
  1687                           ;dc_motor.c: 75: mR->power--;
  1688  0005F6  C028  FFD9         	movff	stop@mR,fsr2l
  1689  0005FA  C029  FFDA         	movff	stop@mR+1,fsr2h
  1690  0005FE  06DF               	decf	indf2,f,c
  1691  000600                     l1498:
  1692                           
  1693                           ;dc_motor.c: 76: }
  1694                           ;dc_motor.c: 77: setMotorPWM(mL);
  1695  000600  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1696  000604  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1697  000608  ECF3  F001         	call	_setMotorPWM	;wreg free
  1698                           
  1699                           ;dc_motor.c: 78: setMotorPWM(mR);
  1700  00060C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1701  000610  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1702  000614  ECF3  F001         	call	_setMotorPWM	;wreg free
  1703                           
  1704                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1705  000618  0E21               	movlw	33
  1706  00061A                     u1127:
  1707  00061A  2EE8               	decfsz	wreg,f,c
  1708  00061C  D7FE               	goto	u1127
  1709  00061E  F000               	nop	
  1710  000620                     l1504:
  1711  000620  C026  FFD9         	movff	stop@mL,fsr2l
  1712  000624  C027  FFDA         	movff	stop@mL+1,fsr2h
  1713  000628  50DF               	movf	indf2,w,c
  1714  00062A  A4D8               	btfss	status,2,c
  1715  00062C  D7D1               	goto	l1490
  1716  00062E  C028  FFD9         	movff	stop@mR,fsr2l
  1717  000632  C029  FFDA         	movff	stop@mR+1,fsr2h
  1718  000636  50DF               	movf	indf2,w,c
  1719  000638  A4D8               	btfss	status,2,c
  1720  00063A  D7CA               	goto	l1490
  1721                           
  1722                           ;dc_motor.c: 80: }
  1723                           ;dc_motor.c: 81: mL->direction=1;
  1724  00063C  EE20 F001          	lfsr	2,1
  1725  000640  5026               	movf	stop@mL,w,c
  1726  000642  26D9               	addwf	fsr2l,f,c
  1727  000644  5027               	movf	stop@mL+1,w,c
  1728  000646  22DA               	addwfc	fsr2h,f,c
  1729  000648  0E01               	movlw	1
  1730  00064A  6EDF               	movwf	indf2,c
  1731                           
  1732                           ;dc_motor.c: 82: mR->direction=1;
  1733  00064C  EE20 F001          	lfsr	2,1
  1734  000650  5028               	movf	stop@mR,w,c
  1735  000652  26D9               	addwf	fsr2l,f,c
  1736  000654  5029               	movf	stop@mR+1,w,c
  1737  000656  22DA               	addwfc	fsr2h,f,c
  1738  000658  0E01               	movlw	1
  1739  00065A  6EDF               	movwf	indf2,c
  1740  00065C  0012               	return		;funcret
  1741  00065E                     __end_of_stop:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           intcon	equ	0xFF2
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           indf1	equ	0xFE7
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           indf2	equ	0xFDF
  1753                           fsr2h	equ	0xFDA
  1754                           fsr2l	equ	0xFD9
  1755                           status	equ	0xFD8
  1756                           
  1757 ;; *************** function _fullSpeedAhead *****************
  1758 ;; Defined at:
  1759 ;;		line 108 in file "dc_motor.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1762 ;;		 -> main@motorL(9), 
  1763 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1764 ;;		 -> main@motorR(9), 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1776 ;;      Params:         4       0       0       0
  1777 ;;      Locals:         0       0       0       0
  1778 ;;      Temps:          1       0       0       0
  1779 ;;      Totals:         5       0       0       0
  1780 ;;Total ram usage:        5 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    3
  1783 ;; This function calls:
  1784 ;;		_setMotorPWM
  1785 ;; This function is called by:
  1786 ;;		_turnLeft
  1787 ;;		_turnRight
  1788 ;;		_fullSpeedBack
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           	psect	text9
  1793  0006E2                     __ptext9:
  1794                           	opt stack 0
  1795  0006E2                     _fullSpeedAhead:
  1796                           	opt stack 25
  1797                           
  1798                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  1799                           
  1800                           ;incstack = 0
  1801  0006E2  D028               	goto	l130
  1802  0006E4                     l1512:
  1803                           
  1804                           ;dc_motor.c: 112: if(mL->power<100){
  1805  0006E4  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1806  0006E8  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1807  0006EC  0E64               	movlw	100
  1808  0006EE  60DF               	cpfslt	indf2,c
  1809  0006F0  D005               	goto	l1516
  1810                           
  1811                           ;dc_motor.c: 113: mL->power++;
  1812  0006F2  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1813  0006F6  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1814  0006FA  2ADF               	incf	indf2,f,c
  1815  0006FC                     l1516:
  1816                           
  1817                           ;dc_motor.c: 114: }
  1818                           ;dc_motor.c: 115: if(mR->power<100){
  1819  0006FC  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1820  000700  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1821  000704  0E64               	movlw	100
  1822  000706  60DF               	cpfslt	indf2,c
  1823  000708  D005               	goto	l1520
  1824                           
  1825                           ;dc_motor.c: 116: mR->power++;
  1826  00070A  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1827  00070E  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1828  000712  2ADF               	incf	indf2,f,c
  1829  000714                     l1520:
  1830                           
  1831                           ;dc_motor.c: 117: }
  1832                           ;dc_motor.c: 118: setMotorPWM(mL);
  1833  000714  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1834  000718  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1835  00071C  ECF3  F001         	call	_setMotorPWM	;wreg free
  1836                           
  1837                           ;dc_motor.c: 119: setMotorPWM(mR);
  1838  000720  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1839  000724  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1840  000728  ECF3  F001         	call	_setMotorPWM	;wreg free
  1841                           
  1842                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1843  00072C  0E21               	movlw	33
  1844  00072E                     u1137:
  1845  00072E  2EE8               	decfsz	wreg,f,c
  1846  000730  D7FE               	goto	u1137
  1847  000732  F000               	nop	
  1848  000734                     l130:
  1849  000734  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1850  000738  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1851  00073C  0E63               	movlw	99
  1852  00073E  64DF               	cpfsgt	indf2,c
  1853  000740  D7D1               	goto	l1512
  1854  000742  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1855  000746  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1856  00074A  0E63               	movlw	99
  1857  00074C  64DF               	cpfsgt	indf2,c
  1858  00074E  D7CA               	goto	l1512
  1859  000750  0012               	return	
  1860  000752                     __end_of_fullSpeedAhead:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           indf1	equ	0xFE7
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _setMotorPWM *****************
  1877 ;; Defined at:
  1878 ;;		line 26 in file "dc_motor.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1881 ;;		 -> main@motorR(9), main@motorL(9), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  PWMduty         2   35[COMRAM] int 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;		None               void
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1893 ;;      Params:         2       0       0       0
  1894 ;;      Locals:         2       0       0       0
  1895 ;;      Temps:          5       0       0       0
  1896 ;;      Totals:         9       0       0       0
  1897 ;;Total ram usage:        9 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    2
  1900 ;; This function calls:
  1901 ;;		___awdiv
  1902 ;;		___wmul
  1903 ;; This function is called by:
  1904 ;;		_stop
  1905 ;;		_fullSpeedAhead
  1906 ;;		_setMotorFullSpeed
  1907 ;;		_stopMotor
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text10
  1912  0003E6                     __ptext10:
  1913                           	opt stack 0
  1914  0003E6                     _setMotorPWM:
  1915                           	opt stack 25
  1916                           
  1917                           ;dc_motor.c: 28: int PWMduty;
  1918                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1919                           
  1920                           ;incstack = 0
  1921  0003E6  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1922  0003EA  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1923  0003EE  50DF               	movf	indf2,w,c
  1924  0003F0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1925  0003F2  501F               	movf	??_setMotorPWM,w,c
  1926  0003F4  6E0F               	movwf	___wmul@multiplier,c
  1927  0003F6  6A10               	clrf	___wmul@multiplier+1,c
  1928  0003F8  EE20 F007          	lfsr	2,7
  1929  0003FC  501D               	movf	setMotorPWM@m,w,c
  1930  0003FE  26D9               	addwf	fsr2l,f,c
  1931  000400  501E               	movf	setMotorPWM@m+1,w,c
  1932  000402  22DA               	addwfc	fsr2h,f,c
  1933  000404  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1934  000408  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1935  00040C  ECAB  F004         	call	___wmul	;wreg free
  1936  000410  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1937  000414  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1938  000418  0E00               	movlw	0
  1939  00041A  6E18               	movwf	___awdiv@divisor+1,c
  1940  00041C  0E64               	movlw	100
  1941  00041E  6E17               	movwf	___awdiv@divisor,c
  1942  000420  EC2F  F003         	call	___awdiv	;wreg free
  1943  000424  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1944  000428  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1945                           
  1946                           ;dc_motor.c: 32: if (m->direction)
  1947  00042C  EE20 F001          	lfsr	2,1
  1948  000430  501D               	movf	setMotorPWM@m,w,c
  1949  000432  26D9               	addwf	fsr2l,f,c
  1950  000434  501E               	movf	setMotorPWM@m+1,w,c
  1951  000436  22DA               	addwfc	fsr2h,f,c
  1952  000438  50DF               	movf	indf2,w,c
  1953  00043A  B4D8               	btfsc	status,2,c
  1954  00043C  D02C               	goto	l1486
  1955                           
  1956                           ;dc_motor.c: 33: {
  1957                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1958  00043E  EE20 F006          	lfsr	2,6
  1959  000442  501D               	movf	setMotorPWM@m,w,c
  1960  000444  26D9               	addwf	fsr2l,f,c
  1961  000446  501E               	movf	setMotorPWM@m+1,w,c
  1962  000448  22DA               	addwfc	fsr2h,f,c
  1963  00044A  50DF               	movf	indf2,w,c
  1964  00044C  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1965  00044E  0E01               	movlw	1
  1966  000450  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1967  000452  2A1F               	incf	??_setMotorPWM,f,c
  1968  000454  D002               	goto	u714
  1969  000456                     u715:
  1970  000456  90D8               	bcf	status,0,c
  1971  000458  3620               	rlcf	??_setMotorPWM+1,f,c
  1972  00045A                     u714:
  1973  00045A  2E1F               	decfsz	??_setMotorPWM,f,c
  1974  00045C  D7FC               	goto	u715
  1975  00045E  5020               	movf	??_setMotorPWM+1,w,c
  1976  000460  108A               	iorwf	3978,w,c	;volatile
  1977  000462  6E8A               	movwf	3978,c	;volatile
  1978                           
  1979                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1980  000464  EE20 F007          	lfsr	2,7
  1981  000468  501D               	movf	setMotorPWM@m,w,c
  1982  00046A  26D9               	addwf	fsr2l,f,c
  1983  00046C  501E               	movf	setMotorPWM@m+1,w,c
  1984  00046E  22DA               	addwfc	fsr2h,f,c
  1985  000470  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1986  000474  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1987  000478  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1988  00047C  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1989  000480  1E21               	comf	??_setMotorPWM+2,f,c
  1990  000482  1E22               	comf	??_setMotorPWM+3,f,c
  1991  000484  4A21               	infsnz	??_setMotorPWM+2,f,c
  1992  000486  2A22               	incf	??_setMotorPWM+3,f,c
  1993  000488  501F               	movf	??_setMotorPWM,w,c
  1994  00048A  2421               	addwf	??_setMotorPWM+2,w,c
  1995  00048C  6E24               	movwf	setMotorPWM@PWMduty,c
  1996  00048E  5020               	movf	??_setMotorPWM+1,w,c
  1997  000490  2022               	addwfc	??_setMotorPWM+3,w,c
  1998  000492  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1999                           
  2000                           ;dc_motor.c: 36: }
  2001  000494  D014               	goto	l100
  2002  000496                     l1486:
  2003                           
  2004                           ;dc_motor.c: 37: else
  2005                           ;dc_motor.c: 38: {
  2006                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2007  000496  EE20 F006          	lfsr	2,6
  2008  00049A  501D               	movf	setMotorPWM@m,w,c
  2009  00049C  26D9               	addwf	fsr2l,f,c
  2010  00049E  501E               	movf	setMotorPWM@m+1,w,c
  2011  0004A0  22DA               	addwfc	fsr2h,f,c
  2012  0004A2  50DF               	movf	indf2,w,c
  2013  0004A4  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2014  0004A6  0E01               	movlw	1
  2015  0004A8  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2016  0004AA  2A1F               	incf	??_setMotorPWM,f,c
  2017  0004AC  D002               	goto	u724
  2018  0004AE                     u725:
  2019  0004AE  90D8               	bcf	status,0,c
  2020  0004B0  3620               	rlcf	??_setMotorPWM+1,f,c
  2021  0004B2                     u724:
  2022  0004B2  2E1F               	decfsz	??_setMotorPWM,f,c
  2023  0004B4  D7FC               	goto	u725
  2024  0004B6  5020               	movf	??_setMotorPWM+1,w,c
  2025  0004B8  0AFF               	xorlw	255
  2026  0004BA  148A               	andwf	3978,w,c	;volatile
  2027  0004BC  6E8A               	movwf	3978,c	;volatile
  2028  0004BE                     l100:
  2029                           
  2030                           ;dc_motor.c: 40: }
  2031                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2032  0004BE  EE20 F002          	lfsr	2,2
  2033  0004C2  501D               	movf	setMotorPWM@m,w,c
  2034  0004C4  26D9               	addwf	fsr2l,f,c
  2035  0004C6  501E               	movf	setMotorPWM@m+1,w,c
  2036  0004C8  22DA               	addwfc	fsr2h,f,c
  2037  0004CA  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2038  0004CE  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2039  0004D2  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2040  0004D6  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2041  0004DA  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2042  0004DC  46E8               	rlncf	wreg,f,c
  2043  0004DE  0BFC               	andlw	252
  2044  0004E0  6EDF               	movwf	indf2,c
  2045                           
  2046                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2047  0004E2  EE20 F004          	lfsr	2,4
  2048  0004E6  501D               	movf	setMotorPWM@m,w,c
  2049  0004E8  26D9               	addwf	fsr2l,f,c
  2050  0004EA  501E               	movf	setMotorPWM@m+1,w,c
  2051  0004EC  22DA               	addwfc	fsr2h,f,c
  2052  0004EE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2053  0004F2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2054  0004F6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2055  0004FA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2056  0004FE  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2057  000502  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2058  000506  0E06               	movlw	6
  2059  000508  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2060  00050A                     u735:
  2061  00050A  3422               	rlcf	??_setMotorPWM+3,w,c
  2062  00050C  3222               	rrcf	??_setMotorPWM+3,f,c
  2063  00050E  3221               	rrcf	??_setMotorPWM+2,f,c
  2064  000510  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2065  000512  D7FB               	goto	u735
  2066  000514  5021               	movf	??_setMotorPWM+2,w,c
  2067  000516  6EDF               	movwf	indf2,c
  2068  000518  0012               	return		;funcret
  2069  00051A                     __end_of_setMotorPWM:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           prodh	equ	0xFF4
  2073                           prodl	equ	0xFF3
  2074                           intcon	equ	0xFF2
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           indf1	equ	0xFE7
  2078                           fsr1h	equ	0xFE2
  2079                           fsr1l	equ	0xFE1
  2080                           indf2	equ	0xFDF
  2081                           postinc2	equ	0xFDE
  2082                           postdec2	equ	0xFDD
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function ___wmul *****************
  2088 ;; Defined at:
  2089 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  multiplier      2   14[COMRAM] unsigned int 
  2092 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  product         2   18[COMRAM] unsigned int 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2   14[COMRAM] unsigned int 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, prodl, prodh
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2104 ;;      Params:         4       0       0       0
  2105 ;;      Locals:         2       0       0       0
  2106 ;;      Temps:          0       0       0       0
  2107 ;;      Totals:         6       0       0       0
  2108 ;;Total ram usage:        6 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    1
  2111 ;; This function calls:
  2112 ;;		Nothing
  2113 ;; This function is called by:
  2114 ;;		_setMotorPWM
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text11
  2119  000956                     __ptext11:
  2120                           	opt stack 0
  2121  000956                     ___wmul:
  2122                           	opt stack 25
  2123                           
  2124                           ;incstack = 0
  2125  000956  500F               	movf	___wmul@multiplier,w,c
  2126  000958  0211               	mulwf	___wmul@multiplicand,c
  2127  00095A  CFF3 F013          	movff	prodl,___wmul@product
  2128  00095E  CFF4 F014          	movff	prodh,___wmul@product+1
  2129  000962  500F               	movf	___wmul@multiplier,w,c
  2130  000964  0212               	mulwf	___wmul@multiplicand+1,c
  2131  000966  50F3               	movf	prodl,w,c
  2132  000968  2614               	addwf	___wmul@product+1,f,c
  2133  00096A  5010               	movf	___wmul@multiplier+1,w,c
  2134  00096C  0211               	mulwf	___wmul@multiplicand,c
  2135  00096E  50F3               	movf	prodl,w,c
  2136  000970  2614               	addwf	___wmul@product+1,f,c
  2137  000972  C013  F00F         	movff	___wmul@product,?___wmul
  2138  000976  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2139  00097A  0012               	return	
  2140  00097C                     __end_of___wmul:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           intcon	equ	0xFF2
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           indf1	equ	0xFE7
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8
  2157                           
  2158 ;; *************** function ___awdiv *****************
  2159 ;; Defined at:
  2160 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  dividend        2   20[COMRAM] int 
  2163 ;;  divisor         2   22[COMRAM] int 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  quotient        2   26[COMRAM] int 
  2166 ;;  sign            1   25[COMRAM] unsigned char 
  2167 ;;  counter         1   24[COMRAM] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  2   20[COMRAM] int 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2177 ;;      Params:         4       0       0       0
  2178 ;;      Locals:         4       0       0       0
  2179 ;;      Temps:          0       0       0       0
  2180 ;;      Totals:         8       0       0       0
  2181 ;;Total ram usage:        8 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    1
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_setMotorPWM
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text12
  2192  00065E                     __ptext12:
  2193                           	opt stack 0
  2194  00065E                     ___awdiv:
  2195                           	opt stack 25
  2196                           
  2197                           ;incstack = 0
  2198  00065E  0E00               	movlw	0
  2199  000660  6E1A               	movwf	___awdiv@sign,c
  2200  000662  AE18               	btfss	___awdiv@divisor+1,7,c
  2201  000664  D006               	goto	l1444
  2202  000666  6C17               	negf	___awdiv@divisor,c
  2203  000668  1E18               	comf	___awdiv@divisor+1,f,c
  2204  00066A  B0D8               	btfsc	status,0,c
  2205  00066C  2A18               	incf	___awdiv@divisor+1,f,c
  2206  00066E  0E01               	movlw	1
  2207  000670  6E1A               	movwf	___awdiv@sign,c
  2208  000672                     l1444:
  2209  000672  AE16               	btfss	___awdiv@dividend+1,7,c
  2210  000674  D006               	goto	l1450
  2211  000676  6C15               	negf	___awdiv@dividend,c
  2212  000678  1E16               	comf	___awdiv@dividend+1,f,c
  2213  00067A  B0D8               	btfsc	status,0,c
  2214  00067C  2A16               	incf	___awdiv@dividend+1,f,c
  2215  00067E  0E01               	movlw	1
  2216  000680  1A1A               	xorwf	___awdiv@sign,f,c
  2217  000682                     l1450:
  2218  000682  0E00               	movlw	0
  2219  000684  6E1C               	movwf	___awdiv@quotient+1,c
  2220  000686  0E00               	movlw	0
  2221  000688  6E1B               	movwf	___awdiv@quotient,c
  2222  00068A  5017               	movf	___awdiv@divisor,w,c
  2223  00068C  1018               	iorwf	___awdiv@divisor+1,w,c
  2224  00068E  B4D8               	btfsc	status,2,c
  2225  000690  D01C               	goto	l1472
  2226  000692  0E01               	movlw	1
  2227  000694  6E19               	movwf	___awdiv@counter,c
  2228  000696  D004               	goto	l1458
  2229  000698                     l1456:
  2230  000698  90D8               	bcf	status,0,c
  2231  00069A  3617               	rlcf	___awdiv@divisor,f,c
  2232  00069C  3618               	rlcf	___awdiv@divisor+1,f,c
  2233  00069E  2A19               	incf	___awdiv@counter,f,c
  2234  0006A0                     l1458:
  2235  0006A0  AE18               	btfss	___awdiv@divisor+1,7,c
  2236  0006A2  D7FA               	goto	l1456
  2237  0006A4                     l1460:
  2238  0006A4  90D8               	bcf	status,0,c
  2239  0006A6  361B               	rlcf	___awdiv@quotient,f,c
  2240  0006A8  361C               	rlcf	___awdiv@quotient+1,f,c
  2241  0006AA  5017               	movf	___awdiv@divisor,w,c
  2242  0006AC  5C15               	subwf	___awdiv@dividend,w,c
  2243  0006AE  5018               	movf	___awdiv@divisor+1,w,c
  2244  0006B0  5816               	subwfb	___awdiv@dividend+1,w,c
  2245  0006B2  A0D8               	btfss	status,0,c
  2246  0006B4  D005               	goto	l1468
  2247  0006B6  5017               	movf	___awdiv@divisor,w,c
  2248  0006B8  5E15               	subwf	___awdiv@dividend,f,c
  2249  0006BA  5018               	movf	___awdiv@divisor+1,w,c
  2250  0006BC  5A16               	subwfb	___awdiv@dividend+1,f,c
  2251  0006BE  801B               	bsf	___awdiv@quotient,0,c
  2252  0006C0                     l1468:
  2253  0006C0  90D8               	bcf	status,0,c
  2254  0006C2  3218               	rrcf	___awdiv@divisor+1,f,c
  2255  0006C4  3217               	rrcf	___awdiv@divisor,f,c
  2256  0006C6  2E19               	decfsz	___awdiv@counter,f,c
  2257  0006C8  D7ED               	goto	l1460
  2258  0006CA                     l1472:
  2259  0006CA  501A               	movf	___awdiv@sign,w,c
  2260  0006CC  B4D8               	btfsc	status,2,c
  2261  0006CE  D004               	goto	l1476
  2262  0006D0  6C1B               	negf	___awdiv@quotient,c
  2263  0006D2  1E1C               	comf	___awdiv@quotient+1,f,c
  2264  0006D4  B0D8               	btfsc	status,0,c
  2265  0006D6  2A1C               	incf	___awdiv@quotient+1,f,c
  2266  0006D8                     l1476:
  2267  0006D8  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2268  0006DC  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2269  0006E0  0012               	return	
  2270  0006E2                     __end_of___awdiv:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           indf1	equ	0xFE7
  2279                           fsr1h	equ	0xFE2
  2280                           fsr1l	equ	0xFE1
  2281                           indf2	equ	0xFDF
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _grabAverageIR *****************
  2289 ;; Defined at:
  2290 ;;		line 104 in file "IR_Reading.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  IR_signal       2   25[COMRAM] unsigned int 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  2   21[COMRAM] unsigned int 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2304 ;;      Params:         2       0       0       0
  2305 ;;      Locals:         2       0       0       0
  2306 ;;      Temps:          2       0       0       0
  2307 ;;      Totals:         6       0       0       0
  2308 ;;Total ram usage:        6 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    2
  2311 ;; This function calls:
  2312 ;;		_grabLeftIR
  2313 ;;		_grabRightIR
  2314 ;; This function is called by:
  2315 ;;		_ScanWithRange
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text13
  2320  0008AE                     __ptext13:
  2321                           	opt stack 0
  2322  0008AE                     _grabAverageIR:
  2323                           	opt stack 27
  2324                           
  2325                           ;IR_Reading.c: 106: unsigned int IR_signal=0;
  2326                           
  2327                           ;incstack = 0
  2328  0008AE  0E00               	movlw	0
  2329  0008B0  6E1B               	movwf	grabAverageIR@IR_signal+1,c
  2330  0008B2  0E00               	movlw	0
  2331  0008B4  6E1A               	movwf	grabAverageIR@IR_signal,c
  2332                           
  2333                           ;IR_Reading.c: 107: IR_signal+=grabRightIR();
  2334  0008B6  ECA9  F003         	call	_grabRightIR	;wreg free
  2335  0008BA  500F               	movf	?_grabRightIR,w,c
  2336  0008BC  261A               	addwf	grabAverageIR@IR_signal,f,c
  2337  0008BE  5010               	movf	?_grabRightIR+1,w,c
  2338  0008C0  221B               	addwfc	grabAverageIR@IR_signal+1,f,c
  2339                           
  2340                           ;IR_Reading.c: 108: IR_signal+=grabLeftIR();
  2341  0008C2  ECDB  F003         	call	_grabLeftIR	;wreg free
  2342  0008C6  500F               	movf	?_grabLeftIR,w,c
  2343  0008C8  261A               	addwf	grabAverageIR@IR_signal,f,c
  2344  0008CA  5010               	movf	?_grabLeftIR+1,w,c
  2345  0008CC  221B               	addwfc	grabAverageIR@IR_signal+1,f,c
  2346                           
  2347                           ;IR_Reading.c: 110: return IR_signal<<2;
  2348  0008CE  C01A  F018         	movff	grabAverageIR@IR_signal,??_grabAverageIR
  2349  0008D2  C01B  F019         	movff	grabAverageIR@IR_signal+1,??_grabAverageIR+1
  2350  0008D6  90D8               	bcf	status,0,c
  2351  0008D8  3618               	rlcf	??_grabAverageIR,f,c
  2352  0008DA  3619               	rlcf	??_grabAverageIR+1,f,c
  2353  0008DC  90D8               	bcf	status,0,c
  2354  0008DE  3618               	rlcf	??_grabAverageIR,f,c
  2355  0008E0  3619               	rlcf	??_grabAverageIR+1,f,c
  2356  0008E2  C018  F016         	movff	??_grabAverageIR,?_grabAverageIR
  2357  0008E6  C019  F017         	movff	??_grabAverageIR+1,?_grabAverageIR+1
  2358  0008EA  0012               	return	
  2359  0008EC                     __end_of_grabAverageIR:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           indf1	equ	0xFE7
  2368                           fsr1h	equ	0xFE2
  2369                           fsr1l	equ	0xFE1
  2370                           indf2	equ	0xFDF
  2371                           postinc2	equ	0xFDE
  2372                           postdec2	equ	0xFDD
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _grabRightIR *****************
  2378 ;; Defined at:
  2379 ;;		line 70 in file "IR_Reading.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2384 ;;  i               1   20[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  2   14[COMRAM] unsigned int 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2394 ;;      Params:         2       0       0       0
  2395 ;;      Locals:         3       0       0       0
  2396 ;;      Temps:          2       0       0       0
  2397 ;;      Totals:         7       0       0       0
  2398 ;;Total ram usage:        7 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_grabAverageIR
  2405 ;;		_ScanIR
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text14
  2410  000752                     __ptext14:
  2411                           	opt stack 0
  2412  000752                     _grabRightIR:
  2413                           	opt stack 27
  2414                           
  2415                           ;IR_Reading.c: 72: unsigned int IR_signal=0;
  2416                           
  2417                           ;incstack = 0
  2418  000752  0E00               	movlw	0
  2419  000754  6E14               	movwf	grabRightIR@IR_signal+1,c
  2420  000756  0E00               	movlw	0
  2421  000758  6E13               	movwf	grabRightIR@IR_signal,c
  2422                           
  2423                           ;IR_Reading.c: 73: unsigned char i=0;
  2424  00075A  0E00               	movlw	0
  2425  00075C  6E15               	movwf	grabRightIR@i,c
  2426                           
  2427                           ;IR_Reading.c: 75: for (i=0; i<4; i++) {
  2428  00075E  0E00               	movlw	0
  2429  000760  6E15               	movwf	grabRightIR@i,c
  2430  000762                     l1530:
  2431  000762  0E03               	movlw	3
  2432  000764  6415               	cpfsgt	grabRightIR@i,c
  2433  000766  D001               	goto	l1534
  2434  000768  D017               	goto	l1540
  2435  00076A                     l1534:
  2436                           
  2437                           ;IR_Reading.c: 77: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2438  00076A  5068               	movf	3944,w,c	;volatile
  2439  00076C  CF69 F011          	movff	3945,??_grabRightIR	;volatile
  2440  000770  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2441  000772  C011  F012         	movff	??_grabRightIR,??_grabRightIR+1
  2442  000776  6A11               	clrf	??_grabRightIR,c
  2443  000778  1211               	iorwf	??_grabRightIR,f,c
  2444  00077A  0E00               	movlw	0
  2445  00077C  1212               	iorwf	??_grabRightIR+1,f,c
  2446  00077E  5011               	movf	??_grabRightIR,w,c
  2447  000780  2613               	addwf	grabRightIR@IR_signal,f,c
  2448  000782  5012               	movf	??_grabRightIR+1,w,c
  2449  000784  2214               	addwfc	grabRightIR@IR_signal+1,f,c
  2450                           
  2451                           ;IR_Reading.c: 78: _delay((unsigned long)((50)*(8000000/4000.0)));
  2452  000786  0E82               	movlw	130
  2453  000788  6E11               	movwf	??_grabRightIR& (0+255),c
  2454  00078A  0EDE               	movlw	222
  2455  00078C                     u1147:
  2456  00078C  2EE8               	decfsz	wreg,f,c
  2457  00078E  D7FE               	goto	u1147
  2458  000790  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2459  000792  D7FC               	goto	u1147
  2460  000794  2A15               	incf	grabRightIR@i,f,c
  2461  000796  D7E5               	goto	l1530
  2462  000798                     l1540:
  2463                           
  2464                           ;IR_Reading.c: 79: }
  2465                           ;IR_Reading.c: 81: return IR_signal<<2;
  2466  000798  C013  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2467  00079C  C014  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2468  0007A0  90D8               	bcf	status,0,c
  2469  0007A2  3611               	rlcf	??_grabRightIR,f,c
  2470  0007A4  3612               	rlcf	??_grabRightIR+1,f,c
  2471  0007A6  90D8               	bcf	status,0,c
  2472  0007A8  3611               	rlcf	??_grabRightIR,f,c
  2473  0007AA  3612               	rlcf	??_grabRightIR+1,f,c
  2474  0007AC  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2475  0007B0  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2476  0007B4  0012               	return	
  2477  0007B6                     __end_of_grabRightIR:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           prodh	equ	0xFF4
  2481                           prodl	equ	0xFF3
  2482                           intcon	equ	0xFF2
  2483                           postinc0	equ	0xFEE
  2484                           wreg	equ	0xFE8
  2485                           indf1	equ	0xFE7
  2486                           fsr1h	equ	0xFE2
  2487                           fsr1l	equ	0xFE1
  2488                           indf2	equ	0xFDF
  2489                           postinc2	equ	0xFDE
  2490                           postdec2	equ	0xFDD
  2491                           fsr2h	equ	0xFDA
  2492                           fsr2l	equ	0xFD9
  2493                           status	equ	0xFD8
  2494                           
  2495 ;; *************** function _grabLeftIR *****************
  2496 ;; Defined at:
  2497 ;;		line 86 in file "IR_Reading.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;		None
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2502 ;;  i               1   20[COMRAM] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  2   14[COMRAM] unsigned int 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2512 ;;      Params:         2       0       0       0
  2513 ;;      Locals:         3       0       0       0
  2514 ;;      Temps:          2       0       0       0
  2515 ;;      Totals:         7       0       0       0
  2516 ;;Total ram usage:        7 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    1
  2519 ;; This function calls:
  2520 ;;		Nothing
  2521 ;; This function is called by:
  2522 ;;		_grabAverageIR
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           	psect	text15
  2527  0007B6                     __ptext15:
  2528                           	opt stack 0
  2529  0007B6                     _grabLeftIR:
  2530                           	opt stack 27
  2531                           
  2532                           ;IR_Reading.c: 88: unsigned int IR_signal=0;
  2533                           
  2534                           ;incstack = 0
  2535  0007B6  0E00               	movlw	0
  2536  0007B8  6E14               	movwf	grabLeftIR@IR_signal+1,c
  2537  0007BA  0E00               	movlw	0
  2538  0007BC  6E13               	movwf	grabLeftIR@IR_signal,c
  2539                           
  2540                           ;IR_Reading.c: 89: unsigned char i=0;
  2541  0007BE  0E00               	movlw	0
  2542  0007C0  6E15               	movwf	grabLeftIR@i,c
  2543                           
  2544                           ;IR_Reading.c: 91: for (i=0; i<4; i++) {
  2545  0007C2  0E00               	movlw	0
  2546  0007C4  6E15               	movwf	grabLeftIR@i,c
  2547  0007C6                     l1546:
  2548  0007C6  0E03               	movlw	3
  2549  0007C8  6415               	cpfsgt	grabLeftIR@i,c
  2550  0007CA  D001               	goto	l1550
  2551  0007CC  D017               	goto	l1556
  2552  0007CE                     l1550:
  2553                           
  2554                           ;IR_Reading.c: 93: IR_signal+=((CAP2BUFH << 8) | CAP2BUFL);
  2555  0007CE  5066               	movf	3942,w,c	;volatile
  2556  0007D0  CF67 F011          	movff	3943,??_grabLeftIR	;volatile
  2557  0007D4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  2558  0007D6  C011  F012         	movff	??_grabLeftIR,??_grabLeftIR+1
  2559  0007DA  6A11               	clrf	??_grabLeftIR,c
  2560  0007DC  1211               	iorwf	??_grabLeftIR,f,c
  2561  0007DE  0E00               	movlw	0
  2562  0007E0  1212               	iorwf	??_grabLeftIR+1,f,c
  2563  0007E2  5011               	movf	??_grabLeftIR,w,c
  2564  0007E4  2613               	addwf	grabLeftIR@IR_signal,f,c
  2565  0007E6  5012               	movf	??_grabLeftIR+1,w,c
  2566  0007E8  2214               	addwfc	grabLeftIR@IR_signal+1,f,c
  2567                           
  2568                           ;IR_Reading.c: 94: _delay((unsigned long)((50)*(8000000/4000.0)));
  2569  0007EA  0E82               	movlw	130
  2570  0007EC  6E11               	movwf	??_grabLeftIR& (0+255),c
  2571  0007EE  0EDE               	movlw	222
  2572  0007F0                     u1157:
  2573  0007F0  2EE8               	decfsz	wreg,f,c
  2574  0007F2  D7FE               	goto	u1157
  2575  0007F4  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  2576  0007F6  D7FC               	goto	u1157
  2577  0007F8  2A15               	incf	grabLeftIR@i,f,c
  2578  0007FA  D7E5               	goto	l1546
  2579  0007FC                     l1556:
  2580                           
  2581                           ;IR_Reading.c: 95: }
  2582                           ;IR_Reading.c: 97: return IR_signal<<2;
  2583  0007FC  C013  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  2584  000800  C014  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  2585  000804  90D8               	bcf	status,0,c
  2586  000806  3611               	rlcf	??_grabLeftIR,f,c
  2587  000808  3612               	rlcf	??_grabLeftIR+1,f,c
  2588  00080A  90D8               	bcf	status,0,c
  2589  00080C  3611               	rlcf	??_grabLeftIR,f,c
  2590  00080E  3612               	rlcf	??_grabLeftIR+1,f,c
  2591  000810  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  2592  000814  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  2593  000818  0012               	return	
  2594  00081A                     __end_of_grabLeftIR:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           intcon	equ	0xFF2
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           indf1	equ	0xFE7
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _enableSensor *****************
  2613 ;; Defined at:
  2614 ;;		line 115 in file "IR_Reading.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  sensor          1    wreg     unsigned char 
  2617 ;;  status          1   14[COMRAM] unsigned char 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  sensor          1   15[COMRAM] unsigned char 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;		None               void
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2629 ;;      Params:         1       0       0       0
  2630 ;;      Locals:         1       0       0       0
  2631 ;;      Temps:          0       0       0       0
  2632 ;;      Totals:         2       0       0       0
  2633 ;;Total ram usage:        2 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    1
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_ScanWithRange
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text16
  2644  00097C                     __ptext16:
  2645                           	opt stack 0
  2646  00097C                     _enableSensor:
  2647                           	opt stack 28
  2648                           
  2649                           ;incstack = 0
  2650                           ;enableSensor@sensor stored from wreg
  2651  00097C  6E10               	movwf	enableSensor@sensor,c
  2652                           
  2653                           ;IR_Reading.c: 117: if (sensor==0){
  2654  00097E  5010               	movf	enableSensor@sensor,w,c
  2655  000980  A4D8               	btfss	status,2,c
  2656  000982  D006               	goto	l1584
  2657                           
  2658                           ;IR_Reading.c: 118: LATEbits.LATE0 = status;
  2659  000984  B00F               	btfsc	enableSensor@status,0,c
  2660  000986  D002               	bra	u885
  2661  000988  908D               	bcf	3981,0,c	;volatile
  2662  00098A  D001               	bra	u886
  2663  00098C                     u885:
  2664  00098C  808D               	bsf	3981,0,c	;volatile
  2665  00098E                     u886:
  2666                           
  2667                           ;IR_Reading.c: 119: } else if (sensor==1){
  2668  00098E  0012               	return	
  2669  000990                     l1584:
  2670  000990  0410               	decf	enableSensor@sensor,w,c
  2671  000992  A4D8               	btfss	status,2,c
  2672  000994  0012               	return	
  2673                           
  2674                           ;IR_Reading.c: 120: LATEbits.LATE1 = status;
  2675  000996  B00F               	btfsc	enableSensor@status,0,c
  2676  000998  D002               	bra	u905
  2677  00099A  928D               	bcf	3981,1,c	;volatile
  2678  00099C  D001               	bra	u906
  2679  00099E                     u905:
  2680  00099E  828D               	bsf	3981,1,c	;volatile
  2681  0009A0                     u906:
  2682  0009A0  0012               	return	
  2683  0009A2                     __end_of_enableSensor:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           intcon	equ	0xFF2
  2689                           postinc0	equ	0xFEE
  2690                           wreg	equ	0xFE8
  2691                           indf1	equ	0xFE7
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _delay_tenth_s *****************
  2702 ;; Defined at:
  2703 ;;		line 19 in file "Movement.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  tenth_second    1    wreg     unsigned char 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2708 ;;  i               2   16[COMRAM] unsigned int 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;		None               void
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2718 ;;      Params:         0       0       0       0
  2719 ;;      Locals:         3       0       0       0
  2720 ;;      Temps:          1       0       0       0
  2721 ;;      Totals:         4       0       0       0
  2722 ;;Total ram usage:        4 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    1
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_ScanWithRange
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text17
  2733  0008EC                     __ptext17:
  2734                           	opt stack 0
  2735  0008EC                     _delay_tenth_s:
  2736                           	opt stack 28
  2737                           
  2738                           ;incstack = 0
  2739                           ;delay_tenth_s@tenth_seconds stored from wreg
  2740  0008EC  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2741                           
  2742                           ;Movement.c: 20: unsigned int i=0;
  2743  0008EE  0E00               	movlw	0
  2744  0008F0  6E12               	movwf	delay_tenth_s@i+1,c
  2745  0008F2  0E00               	movlw	0
  2746  0008F4  6E11               	movwf	delay_tenth_s@i,c
  2747                           
  2748                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2749  0008F6  0E00               	movlw	0
  2750  0008F8  6E12               	movwf	delay_tenth_s@i+1,c
  2751  0008FA  0E01               	movlw	1
  2752  0008FC  6E11               	movwf	delay_tenth_s@i,c
  2753  0008FE  D009               	goto	l1578
  2754  000900                     l1574:
  2755                           
  2756                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2757  000900  0E82               	movlw	130
  2758  000902  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2759  000904  0EDE               	movlw	222
  2760  000906                     u1167:
  2761  000906  2EE8               	decfsz	wreg,f,c
  2762  000908  D7FE               	goto	u1167
  2763  00090A  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2764  00090C  D7FC               	goto	u1167
  2765  00090E  4A11               	infsnz	delay_tenth_s@i,f,c
  2766  000910  2A12               	incf	delay_tenth_s@i+1,f,c
  2767  000912                     l1578:
  2768  000912  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2769  000914  0D02               	mullw	2
  2770  000916  5011               	movf	delay_tenth_s@i,w,c
  2771  000918  5CF3               	subwf	prodl,w,c
  2772  00091A  5012               	movf	delay_tenth_s@i+1,w,c
  2773  00091C  58F4               	subwfb	prodh,w,c
  2774  00091E  A0D8               	btfss	status,0,c
  2775  000920  0012               	return	
  2776  000922  D7EE               	goto	l1574
  2777  000924                     __end_of_delay_tenth_s:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           prodh	equ	0xFF4
  2781                           prodl	equ	0xFF3
  2782                           intcon	equ	0xFF2
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           indf1	equ	0xFE7
  2786                           fsr1h	equ	0xFE2
  2787                           fsr1l	equ	0xFE1
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _InterruptHandlerHigh *****************
  2796 ;; Defined at:
  2797 ;;		line 16 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;		None               void
  2804 ;; Registers used:
  2805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2811 ;;      Params:         0       0       0       0
  2812 ;;      Locals:         0       0       0       0
  2813 ;;      Temps:         14       0       0       0
  2814 ;;      Totals:        14       0       0       0
  2815 ;;Total ram usage:       14 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		Interrupt level 2
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	intcode
  2825  000008                     __pintcode:
  2826                           	opt stack 0
  2827  000008                     _InterruptHandlerHigh:
  2828                           	opt stack 25
  2829                           
  2830                           ;incstack = 0
  2831  000008  823B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2832  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2833  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2834  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2835  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2836  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2837  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2838  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2839  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2840  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2841  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2842  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2843  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2844  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2845  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2846                           
  2847                           ;main.c: 18: if (PIR1bits.RCIF) {
  2848  000042  AA9E               	btfss	3998,5,c	;volatile
  2849  000044  D013               	goto	i2l44
  2850                           
  2851                           ;main.c: 19: ReceivedString[i]=RCREG;
  2852  000046  503A               	movf	_i,w,c	;volatile
  2853  000048  0D01               	mullw	1
  2854  00004A  0E80               	movlw	low _ReceivedString
  2855  00004C  24F3               	addwf	prodl,w,c
  2856  00004E  6ED9               	movwf	fsr2l,c
  2857  000050  0E00               	movlw	high _ReceivedString
  2858  000052  20F4               	addwfc	prodh,w,c
  2859  000054  6EDA               	movwf	fsr2h,c
  2860  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2861                           
  2862                           ;main.c: 20: if (i==15){
  2863  00005A  0E0F               	movlw	15
  2864  00005C  183A               	xorwf	_i,w,c	;volatile
  2865  00005E  A4D8               	btfss	status,2,c
  2866  000060  D003               	goto	i2l1728
  2867                           
  2868                           ;main.c: 21: i=0;
  2869  000062  0E00               	movlw	0
  2870  000064  6E3A               	movwf	_i,c	;volatile
  2871                           
  2872                           ;main.c: 22: }else{
  2873  000066  D001               	goto	i2l1730
  2874  000068                     i2l1728:
  2875                           
  2876                           ;main.c: 23: i++;
  2877  000068  2A3A               	incf	_i,f,c	;volatile
  2878  00006A                     i2l1730:
  2879                           
  2880                           ;main.c: 24: }
  2881                           ;main.c: 25: PIR1bits.RCIF=0;
  2882  00006A  9A9E               	bcf	3998,5,c	;volatile
  2883  00006C                     i2l44:
  2884  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2885  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2886  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2887  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2888  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2889  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2890  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2891  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2892  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2893  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2894  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2895  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2896  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2897  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2898  0000A4  923B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2899  0000A6  0011               	retfie		f
  2900  0000A8                     __end_of_InterruptHandlerHigh:
  2901                           	opt stack 0
  2902  0000                     pclatu	equ	0xFFB
  2903                           pclath	equ	0xFFA
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           postinc0	equ	0xFEE
  2912                           fsr0h	equ	0xFEA
  2913                           fsr0l	equ	0xFE9
  2914                           wreg	equ	0xFE8
  2915                           indf1	equ	0xFE7
  2916                           fsr1h	equ	0xFE2
  2917                           fsr1l	equ	0xFE1
  2918                           indf2	equ	0xFDF
  2919                           postinc2	equ	0xFDE
  2920                           postdec2	equ	0xFDD
  2921                           fsr2h	equ	0xFDA
  2922                           fsr2l	equ	0xFD9
  2923                           status	equ	0xFD8
  2924                           pclatu	equ	0xFFB
  2925                           pclath	equ	0xFFA
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           postinc0	equ	0xFEE
  2934                           fsr0h	equ	0xFEA
  2935                           fsr0l	equ	0xFE9
  2936                           wreg	equ	0xFE8
  2937                           indf1	equ	0xFE7
  2938                           fsr1h	equ	0xFE2
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947                           	psect	rparam
  2948  0000                     pclatu	equ	0xFFB
  2949                           pclath	equ	0xFFA
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           postinc0	equ	0xFEE
  2958                           fsr0h	equ	0xFEA
  2959                           fsr0l	equ	0xFE9
  2960                           wreg	equ	0xFE8
  2961                           indf1	equ	0xFE7
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           postinc2	equ	0xFDE
  2966                           postdec2	equ	0xFDD
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           status	equ	0xFD8
  2970                           
  2971                           	psect	temp
  2972  00003B                     btemp:
  2973                           	opt stack 0
  2974  00003B                     	ds	1
  2975  0000                     int$flags	set	btemp
  2976                           pclatu	equ	0xFFB
  2977                           pclath	equ	0xFFA
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           intcon	equ	0xFF2
  2985                           postinc0	equ	0xFEE
  2986                           fsr0h	equ	0xFEA
  2987                           fsr0l	equ	0xFE9
  2988                           wreg	equ	0xFE8
  2989                           indf1	equ	0xFE7
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           fsr2h	equ	0xFDA
  2996                           fsr2l	equ	0xFD9
  2997                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      58
    BANK0           160     32      48
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _grabAverageIR->_grabLeftIR
    _grabAverageIR->_grabRightIR

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   16681
                                             55 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                      _ScanWithRange
                       _VerifySignal
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                        9     4      5   15782
                                             46 COMRAM     9     4      5
                      _delay_tenth_s
                       _enableSensor
                      _grabAverageIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    5254
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    5766
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 4     0      4    3031
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     1      4    1835
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          9     7      2    1275
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     394
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabAverageIR                                        6     4      2     167
                                             21 COMRAM     6     4      2
                         _grabLeftIR
                        _grabRightIR
 ---------------------------------------------------------------------------------
 (3) _grabRightIR                                          7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _grabLeftIR                                           7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _enableSensor                                         2     1      1     344
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanWithRange
     _delay_tenth_s
     _enableSensor
     _grabAverageIR
       _grabLeftIR
       _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      30       5       30.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3A       1       61.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6A       3        0.0%
DATA                 0      0      6A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Mar 14 21:49:19 2018

                 ?_grabRightIR 000F                              _i 003A                             l47 02EA  
                 ___awdiv@sign 001A            ___wmul@multiplicand 0011                    main@Message 0060  
                          l100 04BE                            l130 0734                            u714 045A  
                          u715 0456                            u724 04B2                            u725 04AE  
                          u735 050A                            u905 099E                            u906 09A0  
                          u885 098C                            u886 098E                    grabLeftIR@i 0015  
                          prod 000FF3                            wreg 000FE8                           l1520 0714  
                         l1512 06E4                           l1504 0620                           l1530 0762  
                         l1450 0682                           l1540 0798                           l1460 06A4  
                         l1444 0672                           l1516 06FC                           l1550 07CE  
                         l1534 076A                           l1456 0698                           l1472 06CA  
                         l1704 0572                           l1546 07C6                           l1458 06A0  
                         l1490 05D0                           l1556 07FC                           l1476 06D8  
                         l1468 06C0                           l1716 05CA                           l1708 057A  
                         l1574 0900                           l1486 0496                           l1494 05E8  
                         l1584 0990                           l1760 0304                           l1578 0912  
                         l1498 0600                           l1762 031E                           l1668 0182  
                         l1780 03A6                           l1772 0368                           l1756 02F0  
                         l1678 01CA                           l1694 0244                           l1688 0216  
                         l1784 03B0                           l1768 035E                           l1792 03CC  
                         l1778 03A0                           u1020 032C                           u1030 033E  
                         u1022 032E                           u1032 0340                           u1127 061A  
                         u1137 072E                           u1147 078C                           u1157 07F0  
                         _LATB 000F8A                           u1167 0906                           i2l44 006C  
                         _main 025A                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 003B                           _stop 05CE                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00A8  
                 ___param_bank 000010         grabAverageIR@IR_signal 001A                          ?_main 0001  
              __end_of___awdiv 06E2                          ?_stop 0026                ___awdiv@divisor 0017  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                   grabRightIR@i 0015  
                _initRFID$1268 000F                ___awdiv@counter 0019                          _RCREG 000FAE  
                        _SPBRG 000FAF                          _TRISC 000F94                          _TXREG 000FAD  
              ??_grabAverageIR 0018                          main@i 006D                          tablat 000FF5  
                        status 000FD8         __size_of_ScanWithRange 01AE                __initialization 09E0  
                 __end_of_main 03E6                   __end_of_stop 065E                 delay_tenth_s@i 0011  
               __CFG_OSC$IRCIO 000000           __end_of_enableSensor 09A2            VerifySignal@hexByte 0018  
                       ??_main 0038                         ??_stop 002A                  __activetblptr 000002  
                ?_initMotorPWM 0001                   ?_setMotorPWM 001D               ___awdiv@dividend 0015  
                       i2l1730 006A                 __CFG_WDTEN$OFF 000000                         i2l1728 0068  
        __end_of_delay_tenth_s 0924                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                         ___wmul 0956                      ??___awdiv 0019  
             __end_of_initRFID 09C2                         _initIR 09C2           __size_of_grabRightIR 0064  
                       clear_0 09E6               ___awdiv@quotient 001B                 ??_initMotorPWM 000F  
                _ScanWithRange 00AC                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 0026                         stop@mR 0028  
             __end_of_turnLeft 08AE                     __accesstop 0060        __end_of__initialization 09EE  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                 ?_ScanWithRange 002F  
         VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0     delay_tenth_s@tenth_seconds 0010  
                   __pbssBANK0 0080          __size_of_enableSensor 0026                        ?___wmul 000F  
          grabLeftIR@IR_signal 0013                        _CAP1CON 000F63                        _CAP2CON 000F62  
                      ?_initIR 0001        __size_of_fullSpeedAhead 0070                     _grabLeftIR 07B6  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                      ?_initRFID 0001  
         __size_of_setMotorPWM 0134                   _enableSensor 097C             __size_of_turnRight 004A  
         __end_of_initMotorPWM 0956                        __Hparam 0000                        __Lparam 0000  
                      ___awdiv 065E                __size_of___wmul 0026                __size_of_initIR 001E  
                      __pcinit 09E0                ??_ScanWithRange 0034                        __ramtop 0300  
                    ?_turnLeft 002B                        __ptext0 025A                        __ptext1 09A2  
                      __ptext2 0924                        __ptext3 09C2                        __ptext4 051A  
                      __ptext5 00AC                        __ptext6 081A                        __ptext7 0864  
                      __ptext8 05CE                        __ptext9 06E2                  ?_VerifySignal 000F  
        __end_of_grabAverageIR 08EC           end_of_initialization 09EE             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   ??_turnLeft 002F              __end_of_turnRight 0864                    ?_grabLeftIR 000F  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                      _TRISEbits 000F96                 ??_VerifySignal 0011  
             fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028                      _TXSTAbits 000FAC  
                   main@motorL 006E                     main@motorR 0077                  ??_grabRightIR 0011  
               _fullSpeedAhead 06E2                 _ReceivedString 0080                 __end_of___wmul 097C  
                  _BAUDCONbits 000FAA                 __end_of_initIR 09E0         __size_of_delay_tenth_s 0038  
          start_initialization 09E0             VerifySignal@Signal 000F          __size_of_initMotorPWM 0032  
 __end_of_InterruptHandlerHigh 00A8         __end_of_fullSpeedAhead 0752            __size_of_grabLeftIR 0064  
                     ??___wmul 0013                       ??_initIR 000F            __end_of_grabRightIR 07B6  
                 _initMotorPWM 0924                    __pbssCOMRAM 003A                  __pcstackBANK0 0060  
                _delay_tenth_s 08EC              __size_of_initRFID 0020                ?_fullSpeedAhead 0026  
                    __pintcode 0008           __end_of_VerifySignal 05CE                       ?___awdiv 0015  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66              __size_of_turnLeft 004A                  ??_setMotorPWM 001F  
               ?_delay_tenth_s 0001                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 002B  
                  turnRight@mR 002D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                  _grabRightIR 0752           grabRightIR@IR_signal 0013              ___wmul@multiplier 000F  
        __end_of_ScanWithRange 025A                   setMotorPWM@m 001D           _InterruptHandlerHigh 0008  
                 ??_grabLeftIR 0011                      _turnRight 081A            __end_of_setMotorPWM 051A  
                     __Hrparam 0000                       __Lrparam 0000             __end_of_grabLeftIR 081A  
             __size_of___awdiv 0084    ScanWithRange@SignalStrength 0034         __size_of_grabAverageIR 003E  
                   _ANSEL0bits 000FB8          ?_InterruptHandlerHigh 0001                     ?_turnRight 002B  
                     __ptext10 03E6                       __ptext11 0956                       __ptext12 065E  
                     __ptext13 08AE                       __ptext14 0752                       __ptext15 07B6  
                     __ptext16 097C                       __ptext17 08EC                ??_delay_tenth_s 000F  
                     _initRFID 09A2                  __size_of_main 018C                  __size_of_stop 0090  
                   turnLeft@mL 002B                     turnLeft@mR 002D          __size_of_VerifySignal 00B4  
                     int$flags 003B                       main@mode 006C                       main@test 006A  
                     _turnLeft 0864                ScanWithRange@mL 002F                ScanWithRange@mR 0031  
           enableSensor@sensor 0010             enableSensor@status 000F                  VerifySignal@i 001A  
                   _INTCONbits 000FF2     ScanWithRange@tenth_seconds 0033                    _setMotorPWM 03E6  
                 _VerifySignal 051A                       intlevel2 0000                  _grabAverageIR 08AE  
                ?_enableSensor 000F               ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001                    ??_turnRight 002F                 ?_grabAverageIR 0016  
               ??_enableSensor 0010  
