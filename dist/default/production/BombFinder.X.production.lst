

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 23:23:22 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     _ANSEL0bits	set	4024
    39  0000                     _BAUDCONbits	set	4010
    40  0000                     _CAP1BUFH	set	3945
    41  0000                     _CAP1BUFL	set	3944
    42  0000                     _CAP1CON	set	3939
    43  0000                     _CAP2BUFH	set	3943
    44  0000                     _CAP2BUFL	set	3942
    45  0000                     _CAP2CON	set	3938
    46  0000                     _INTCONbits	set	4082
    47  0000                     _IPR1bits	set	3999
    48  0000                     _LATAbits	set	3977
    49  0000                     _LATB	set	3978
    50  0000                     _LATCbits	set	3979
    51  0000                     _LATDbits	set	3980
    52  0000                     _LATEbits	set	3981
    53  0000                     _OSCCON	set	4051
    54  0000                     _OSCCONbits	set	4051
    55  0000                     _PIE1bits	set	3997
    56  0000                     _PIR1bits	set	3998
    57  0000                     _PTCON0	set	3967
    58  0000                     _PTCON1	set	3966
    59  0000                     _PTPERH	set	3962
    60  0000                     _PTPERL	set	3963
    61  0000                     _PWMCON0	set	3951
    62  0000                     _PWMCON1	set	3950
    63  0000                     _RCONbits	set	4048
    64  0000                     _RCREG	set	4014
    65  0000                     _RCSTAbits	set	4011
    66  0000                     _SPBRG	set	4015
    67  0000                     _SPBRGH	set	4016
    68  0000                     _T5CON	set	4023
    69  0000                     _TRISAbits	set	3986
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISCbits	set	3988
    73  0000                     _TRISDbits	set	3989
    74  0000                     _TRISEbits	set	3990
    75  0000                     _TXREG	set	4013
    76  0000                     _TXSTAbits	set	4012
    77  0000                     _PDC0H	set	3960
    78  0000                     _PDC0L	set	3961
    79  0000                     _PDC1H	set	3958
    80  0000                     _PDC1L	set	3959
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  0013EA                     __pcinit:
    86                           	opt stack 0
    87  0013EA                     start_initialization:
    88                           	opt stack 0
    89  0013EA                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to BANK1 (17 bytes)
    93  0013EA  EE01  F0EB         	lfsr	0,__pbssBANK1
    94  0013EE  0E11               	movlw	17
    95  0013F0                     clear_0:
    96  0013F0  6AEE               	clrf	postinc0,c
    97  0013F2  06E8               	decf	wreg,f,c
    98  0013F4  E1FD               	bnz	clear_0
    99                           
   100                           ; Clear objects allocated to COMRAM (1 bytes)
   101  0013F6  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   102  0013F8                     end_of_initialization:
   103                           	opt stack 0
   104  0013F8                     __end_of__initialization:
   105                           	opt stack 0
   106  0013F8  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   107  0013FA  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   108  0013FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   109  0013FE  6EF8               	movwf	tblptru,c
   110  001400  0100               	movlb	0
   111  001402  EFF0  F002         	goto	_main	;jump to C main() function
   112                           tblptru	equ	0xFF8
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	bssCOMRAM
   117  00004F                     __pbssCOMRAM:
   118                           	opt stack 0
   119  00004F                     _i:
   120                           	opt stack 0
   121  00004F                     	ds	1
   122                           tblptru	equ	0xFF8
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssBANK1
   127  0001EB                     __pbssBANK1:
   128                           	opt stack 0
   129  0001EB                     _RFID_Read:
   130                           	opt stack 0
   131  0001EB                     	ds	1
   132  0001EC                     _ReceivedString:
   133                           	opt stack 0
   134  0001EC                     	ds	16
   135                           tblptru	equ	0xFF8
   136                           postinc0	equ	0xFEE
   137                           wreg	equ	0xFE8
   138                           
   139                           	psect	cstackBANK1
   140  000100                     __pcstackBANK1:
   141                           	opt stack 0
   142  000100                     main@MoveType:
   143                           	opt stack 0
   144                           
   145                           ; 100 bytes @ 0x0
   146  000100                     	ds	100
   147  000164                     main@MoveTime:
   148                           	opt stack 0
   149                           
   150                           ; 100 bytes @ 0x64
   151  000164                     	ds	100
   152  0001C8                     main@Message:
   153                           	opt stack 0
   154                           
   155                           ; 10 bytes @ 0xC8
   156  0001C8                     	ds	10
   157  0001D2                     main@test:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0xD2
   161  0001D2                     	ds	2
   162  0001D4                     main@mode:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0xD4
   166  0001D4                     	ds	1
   167  0001D5                     main@ScanAngle:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0xD5
   171  0001D5                     	ds	1
   172  0001D6                     main@DirectionFound:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0xD6
   176  0001D6                     	ds	1
   177  0001D7                     main@i:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0xD7
   181  0001D7                     	ds	1
   182  0001D8                     main@Move:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0xD8
   186  0001D8                     	ds	1
   187  0001D9                     main@mL:
   188                           	opt stack 0
   189                           
   190                           ; 9 bytes @ 0xD9
   191  0001D9                     	ds	9
   192  0001E2                     main@mR:
   193                           	opt stack 0
   194                           
   195                           ; 9 bytes @ 0xE2
   196  0001E2                     	ds	9
   197                           tblptru	equ	0xFF8
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           
   201                           	psect	cstackCOMRAM
   202  000001                     __pcstackCOMRAM:
   203                           	opt stack 0
   204  000001                     ??_InterruptHandlerHigh:
   205  000001                     
   206                           ; 2 bytes @ 0x0
   207  000001                     	ds	14
   208  00000F                     ??_delay_s:
   209  00000F                     ??_delay_tenth_s:
   210  00000F                     ??_LCDout:
   211  00000F                     ?_grabLeftIR:
   212                           	opt stack 0
   213  00000F                     ?_grabRightIR:
   214                           	opt stack 0
   215  00000F                     ?___wmul:
   216                           	opt stack 0
   217  00000F                     _initRFID$1317:
   218                           	opt stack 0
   219  00000F                     enableSensor@status:
   220                           	opt stack 0
   221  00000F                     VerifySignal@Signal:
   222                           	opt stack 0
   223  00000F                     ___wmul@multiplier:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0xE
   227  00000F                     	ds	1
   228  000010                     delay_s@seconds:
   229                           	opt stack 0
   230  000010                     delay_tenth_s@tenth_seconds:
   231                           	opt stack 0
   232  000010                     enableSensor@sensor:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xF
   236  000010                     	ds	1
   237  000011                     ??_VerifySignal:
   238  000011                     ??_grabLeftIR:
   239  000011                     ??_grabRightIR:
   240  000011                     delay_s@i:
   241                           	opt stack 0
   242  000011                     delay_tenth_s@i:
   243                           	opt stack 0
   244  000011                     ___wmul@multiplicand:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x10
   248  000011                     	ds	1
   249  000012                     LCDout@number:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x11
   253  000012                     	ds	1
   254  000013                     SendLCD@type:
   255                           	opt stack 0
   256  000013                     ___wmul@product:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x12
   260  000013                     	ds	1
   261  000014                     SendLCD@Byte:
   262                           	opt stack 0
   263  000014                     grabRightIR@IR_signal:
   264                           	opt stack 0
   265  000014                     grabLeftIR@IR_signal:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x13
   269  000014                     	ds	1
   270  000015                     ??_initLCD:
   271  000015                     ?___awdiv:
   272                           	opt stack 0
   273  000015                     ___awdiv@dividend:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x14
   277  000015                     	ds	1
   278  000016                     grabRightIR@i:
   279                           	opt stack 0
   280  000016                     grabLeftIR@i:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x15
   284  000016                     	ds	1
   285  000017                     VerifySignal@checksum:
   286                           	opt stack 0
   287  000017                     ___awdiv@divisor:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x16
   291  000017                     	ds	1
   292  000018                     VerifySignal@hexByte:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x17
   296  000018                     	ds	1
   297  000019                     ___awdiv@counter:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x18
   301  000019                     	ds	1
   302  00001A                     VerifySignal@i:
   303                           	opt stack 0
   304  00001A                     ___awdiv@sign:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x19
   308  00001A                     	ds	1
   309  00001B                     ___awdiv@quotient:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x1A
   313  00001B                     	ds	2
   314  00001D                     setMotorPWM@m:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x1C
   318  00001D                     	ds	2
   319  00001F                     ??_setMotorPWM:
   320                           
   321                           ; 0 bytes @ 0x1E
   322  00001F                     	ds	5
   323  000024                     setMotorPWM@PWMduty:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x23
   327  000024                     	ds	2
   328  000026                     stop@mL:
   329                           	opt stack 0
   330  000026                     fullSpeedAhead@mL:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x25
   334  000026                     	ds	2
   335  000028                     stop@mR:
   336                           	opt stack 0
   337  000028                     fullSpeedAhead@mR:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x27
   341  000028                     	ds	2
   342  00002A                     
   343                           ; 0 bytes @ 0x29
   344  00002A                     	ds	1
   345  00002B                     turnLeft@mL:
   346                           	opt stack 0
   347  00002B                     turnRight@mL:
   348                           	opt stack 0
   349  00002B                     fullSpeedBack@mL:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2A
   353  00002B                     	ds	2
   354  00002D                     turnLeft@mR:
   355                           	opt stack 0
   356  00002D                     turnRight@mR:
   357                           	opt stack 0
   358  00002D                     fullSpeedBack@mR:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x2C
   362  00002D                     	ds	2
   363  00002F                     ScanIR@mL:
   364                           	opt stack 0
   365  00002F                     ScanWithRange@mL:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2E
   369  00002F                     	ds	2
   370  000031                     ScanIR@mR:
   371                           	opt stack 0
   372  000031                     ScanWithRange@mR:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x30
   376  000031                     	ds	2
   377  000033                     ??_ScanIR:
   378  000033                     ScanWithRange@tenth_seconds:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x32
   382  000033                     	ds	1
   383  000034                     ScanWithRange@MoveTime:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x33
   387  000034                     	ds	1
   388  000035                     ScanIR@ClearSignalTolerance:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x34
   392  000035                     	ds	1
   393  000036                     ??_ScanWithRange:
   394                           
   395                           ; 0 bytes @ 0x35
   396  000036                     	ds	1
   397  000037                     ScanIR@DirectionFoundLimit:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x36
   401  000037                     	ds	1
   402  000038                     ScanWithRange@ResultFalseL:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x37
   406  000038                     	ds	1
   407  000039                     ScanWithRange@ResultFalseC:
   408                           	opt stack 0
   409  000039                     ScanIR@DirectionFoundTolerance:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x38
   413  000039                     	ds	1
   414  00003A                     ScanWithRange@ResultFalseR:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x39
   418  00003A                     	ds	1
   419  00003B                     ScanWithRange@ClearSignalTolerance:
   420                           	opt stack 0
   421  00003B                     ScanIR@SensorResult:
   422                           	opt stack 0
   423                           
   424                           ; 4 bytes @ 0x3A
   425  00003B                     	ds	2
   426  00003D                     ScanWithRange@DirectionFoundLimit:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x3C
   430  00003D                     	ds	2
   431  00003F                     ScanWithRange@DirectionFoundTolerance:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3E
   435  00003F                     	ds	2
   436  000041                     ScanWithRange@SensorResultL:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x40
   440  000041                     	ds	4
   441  000045                     ScanWithRange@SensorResultC:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x44
   445  000045                     	ds	4
   446  000049                     ScanWithRange@SensorResultR:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x48
   450  000049                     	ds	4
   451  00004D                     ??_main:
   452                           
   453                           ; 0 bytes @ 0x4C
   454  00004D                     	ds	2
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           
   459 ;;
   460 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   461 ;;
   462 ;; *************** function _main *****************
   463 ;; Defined at:
   464 ;;		line 31 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   469 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   470 ;;  PathTaken     100    0        unsigned char [100]
   471 ;;  Message        10  200[BANK1 ] unsigned char [10]
   472 ;;  mR              9  226[BANK1 ] struct DC_motor
   473 ;;  mL              9  217[BANK1 ] struct DC_motor
   474 ;;  SignalStreng    3    0        unsigned char [3]
   475 ;;  test            2  210[BANK1 ] unsigned int 
   476 ;;  Move            1  216[BANK1 ] unsigned char 
   477 ;;  i               1  215[BANK1 ] unsigned char 
   478 ;;  DirectionFou    1  214[BANK1 ] unsigned char 
   479 ;;  ScanAngle       1  213[BANK1 ] unsigned char 
   480 ;;  mode            1  212[BANK1 ] unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;		None               void
   483 ;; Registers used:
   484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   490 ;;      Params:         0       0       0       0
   491 ;;      Locals:         0       0     235       0
   492 ;;      Temps:          2       0       0       0
   493 ;;      Totals:         2       0     235       0
   494 ;;Total ram usage:      237 bytes
   495 ;; Hardware stack levels required when called:    6
   496 ;; This function calls:
   497 ;;		_ScanIR
   498 ;;		_ScanWithRange
   499 ;;		_VerifySignal
   500 ;;		_delay_s
   501 ;;		_delay_tenth_s
   502 ;;		_enableSensor
   503 ;;		_fullSpeedAhead
   504 ;;		_fullSpeedBack
   505 ;;		_initIR
   506 ;;		_initLCD
   507 ;;		_initMotorPWM
   508 ;;		_initRFID
   509 ;;		_stop
   510 ;;		_turnLeft
   511 ;;		_turnRight
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text0
   518  0005E0                     __ptext0:
   519                           	opt stack 0
   520  0005E0                     _main:
   521                           	opt stack 25
   522                           
   523                           ;main.c: 34: unsigned char Message[10];
   524                           ;main.c: 35: unsigned char i=0;
   525                           
   526                           ;incstack = 0
   527  0005E0  0E00               	movlw	0
   528  0005E2  0101               	movlb	1	; () banked
   529  0005E4  6FD7               	movwf	main@i& (0+255),b
   530                           
   531                           ;main.c: 36: unsigned char mode=0;
   532  0005E6  0E00               	movlw	0
   533  0005E8  0101               	movlb	1	; () banked
   534  0005EA  6FD4               	movwf	main@mode& (0+255),b
   535                           
   536                           ;main.c: 37: char DirectionFound=0;
   537  0005EC  0E00               	movlw	0
   538  0005EE  0101               	movlb	1	; () banked
   539  0005F0  6FD6               	movwf	main@DirectionFound& (0+255),b
   540                           
   541                           ;main.c: 38: unsigned char SignalStrength[3];
   542                           ;main.c: 39: char PathTaken[100];
   543                           ;main.c: 40: unsigned int test=0;
   544  0005F2  0E00               	movlw	0
   545  0005F4  0101               	movlb	1	; () banked
   546  0005F6  6FD3               	movwf	(main@test+1)& (0+255),b
   547  0005F8  0E00               	movlw	0
   548  0005FA  6FD2               	movwf	main@test& (0+255),b
   549                           
   550                           ;main.c: 41: char MoveTime[100];
   551                           ;main.c: 42: char MoveType[100];
   552                           ;main.c: 43: char Move=0;
   553  0005FC  0E00               	movlw	0
   554  0005FE  0101               	movlb	1	; () banked
   555  000600  6FD8               	movwf	main@Move& (0+255),b
   556                           
   557                           ;main.c: 45: unsigned char ScanAngle=6;
   558  000602  0E06               	movlw	6
   559  000604  0101               	movlb	1	; () banked
   560  000606  6FD5               	movwf	main@ScanAngle& (0+255),b
   561                           
   562                           ; BSR set to: 1
   563                           ;main.c: 48: INTCONbits.GIEH = 1;
   564  000608  8EF2               	bsf	intcon,7,c	;volatile
   565                           
   566                           ; BSR set to: 1
   567                           ;main.c: 49: INTCONbits.GIEL = 1;
   568  00060A  8CF2               	bsf	intcon,6,c	;volatile
   569                           
   570                           ; BSR set to: 1
   571                           ;main.c: 50: INTCONbits.PEIE = 1;
   572  00060C  8CF2               	bsf	intcon,6,c	;volatile
   573                           
   574                           ; BSR set to: 1
   575                           ;main.c: 51: RCONbits.IPEN = 1;
   576  00060E  8ED0               	bsf	4048,7,c	;volatile
   577                           
   578                           ; BSR set to: 1
   579                           ;main.c: 54: IPR1bits.RCIP=1;
   580  000610  8A9F               	bsf	3999,5,c	;volatile
   581                           
   582                           ; BSR set to: 1
   583                           ;main.c: 55: PIE1bits.RCIE=1;
   584  000612  8A9D               	bsf	3997,5,c	;volatile
   585                           
   586                           ; BSR set to: 1
   587                           ;main.c: 56: PIR1bits.RCIF=0;
   588  000614  9A9E               	bcf	3998,5,c	;volatile
   589                           
   590                           ;main.c: 59: struct DC_motor mL, mR;
   591                           ;main.c: 60: mL.power=0;
   592  000616  0E00               	movlw	0
   593  000618  0101               	movlb	1	; () banked
   594  00061A  6FD9               	movwf	main@mL& (0+255),b
   595                           
   596                           ;main.c: 61: mL.direction=1;
   597  00061C  0E01               	movlw	1
   598  00061E  0101               	movlb	1	; () banked
   599  000620  6FDA               	movwf	(main@mL+1)& (0+255),b
   600                           
   601                           ; BSR set to: 1
   602                           ;main.c: 62: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   603  000622  0E79               	movlw	121
   604  000624  0101               	movlb	1	; () banked
   605  000626  6FDB               	movwf	(main@mL+2)& (0+255),b
   606  000628  0E0F               	movlw	15
   607  00062A  0101               	movlb	1	; () banked
   608  00062C  6FDC               	movwf	(main@mL+3)& (0+255),b
   609                           
   610                           ; BSR set to: 1
   611                           ;main.c: 63: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   612  00062E  0E78               	movlw	120
   613  000630  0101               	movlb	1	; () banked
   614  000632  6FDD               	movwf	(main@mL+4)& (0+255),b
   615  000634  0E0F               	movlw	15
   616  000636  0101               	movlb	1	; () banked
   617  000638  6FDE               	movwf	(main@mL+5)& (0+255),b
   618                           
   619                           ;main.c: 64: mL.dir_pin=0;
   620  00063A  0E00               	movlw	0
   621  00063C  0101               	movlb	1	; () banked
   622  00063E  6FDF               	movwf	(main@mL+6)& (0+255),b
   623                           
   624                           ;main.c: 65: mL.PWMperiod=199;
   625  000640  0E00               	movlw	0
   626  000642  0101               	movlb	1	; () banked
   627  000644  6FE1               	movwf	(main@mL+8)& (0+255),b
   628  000646  0EC7               	movlw	199
   629  000648  6FE0               	movwf	(main@mL+7)& (0+255),b
   630                           
   631                           ;main.c: 67: mR.power=0;
   632  00064A  0E00               	movlw	0
   633  00064C  0101               	movlb	1	; () banked
   634  00064E  6FE2               	movwf	main@mR& (0+255),b
   635                           
   636                           ;main.c: 68: mR.direction=1;
   637  000650  0E01               	movlw	1
   638  000652  0101               	movlb	1	; () banked
   639  000654  6FE3               	movwf	(main@mR+1)& (0+255),b
   640                           
   641                           ; BSR set to: 1
   642                           ;main.c: 69: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   643  000656  0E77               	movlw	119
   644  000658  0101               	movlb	1	; () banked
   645  00065A  6FE4               	movwf	(main@mR+2)& (0+255),b
   646  00065C  0E0F               	movlw	15
   647  00065E  0101               	movlb	1	; () banked
   648  000660  6FE5               	movwf	(main@mR+3)& (0+255),b
   649                           
   650                           ; BSR set to: 1
   651                           ;main.c: 70: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   652  000662  0E76               	movlw	118
   653  000664  0101               	movlb	1	; () banked
   654  000666  6FE6               	movwf	(main@mR+4)& (0+255),b
   655  000668  0E0F               	movlw	15
   656  00066A  0101               	movlb	1	; () banked
   657  00066C  6FE7               	movwf	(main@mR+5)& (0+255),b
   658                           
   659                           ;main.c: 71: mR.dir_pin=2;
   660  00066E  0E02               	movlw	2
   661  000670  0101               	movlb	1	; () banked
   662  000672  6FE8               	movwf	(main@mR+6)& (0+255),b
   663                           
   664                           ;main.c: 72: mR.PWMperiod=199;
   665  000674  0E00               	movlw	0
   666  000676  0101               	movlb	1	; () banked
   667  000678  6FEA               	movwf	(main@mR+8)& (0+255),b
   668  00067A  0EC7               	movlw	199
   669  00067C  6FE9               	movwf	(main@mR+7)& (0+255),b
   670                           
   671                           ;main.c: 74: OSCCON = 0x72;
   672  00067E  0E72               	movlw	114
   673  000680  6ED3               	movwf	4051,c	;volatile
   674  000682                     l69:
   675  000682  B4D3               	btfsc	4051,2,c	;volatile
   676  000684  D1AF               	goto	l2481
   677  000686  D7FD               	goto	l69
   678  000688                     l2365:
   679                           
   680                           ;main.c: 82: initMotorPWM();
   681  000688  EC7D  F009         	call	_initMotorPWM	;wreg free
   682                           
   683                           ;main.c: 83: initRFID();
   684  00068C  ECE5  F009         	call	_initRFID	;wreg free
   685                           
   686                           ;main.c: 84: initIR();
   687  000690  ECD4  F009         	call	_initIR	;wreg free
   688                           
   689                           ;main.c: 85: initLCD();
   690  000694  ECF0  F006         	call	_initLCD	;wreg free
   691                           
   692                           ;main.c: 86: initIR();
   693  000698  ECD4  F009         	call	_initIR	;wreg free
   694                           
   695                           ;main.c: 90: fullSpeedAhead(&mL, &mR);
   696  00069C  0ED9               	movlw	low main@mL
   697  00069E  6E26               	movwf	fullSpeedAhead@mL,c
   698  0006A0  0E01               	movlw	high main@mL
   699  0006A2  6E27               	movwf	fullSpeedAhead@mL+1,c
   700  0006A4  0EE2               	movlw	low main@mR
   701  0006A6  6E28               	movwf	fullSpeedAhead@mR,c
   702  0006A8  0E01               	movlw	high main@mR
   703  0006AA  6E29               	movwf	fullSpeedAhead@mR+1,c
   704  0006AC  ECA8  F008         	call	_fullSpeedAhead	;wreg free
   705                           
   706                           ;main.c: 91: delay_s(1);
   707  0006B0  0E01               	movlw	1
   708  0006B2  EC2A  F009         	call	_delay_s
   709                           
   710                           ;main.c: 92: stop(&mL, &mR);
   711  0006B6  0ED9               	movlw	low main@mL
   712  0006B8  6E26               	movwf	stop@mL,c
   713  0006BA  0E01               	movlw	high main@mL
   714  0006BC  6E27               	movwf	stop@mL+1,c
   715  0006BE  0EE2               	movlw	low main@mR
   716  0006C0  6E28               	movwf	stop@mR,c
   717  0006C2  0E01               	movlw	high main@mR
   718  0006C4  6E29               	movwf	stop@mR+1,c
   719  0006C6  ECA8  F007         	call	_stop	;wreg free
   720                           
   721                           ;main.c: 93: fullSpeedBack(&mL, &mR);
   722  0006CA  0ED9               	movlw	low main@mL
   723  0006CC  6E2B               	movwf	fullSpeedBack@mL,c
   724  0006CE  0E01               	movlw	high main@mL
   725  0006D0  6E2C               	movwf	fullSpeedBack@mL+1,c
   726  0006D2  0EE2               	movlw	low main@mR
   727  0006D4  6E2D               	movwf	fullSpeedBack@mR,c
   728  0006D6  0E01               	movlw	high main@mR
   729  0006D8  6E2E               	movwf	fullSpeedBack@mR+1,c
   730  0006DA  EC62  F009         	call	_fullSpeedBack	;wreg free
   731                           
   732                           ;main.c: 94: delay_s(1);
   733  0006DE  0E01               	movlw	1
   734  0006E0  EC2A  F009         	call	_delay_s
   735                           
   736                           ;main.c: 95: stop(&mL, &mR);
   737  0006E4  0ED9               	movlw	low main@mL
   738  0006E6  6E26               	movwf	stop@mL,c
   739  0006E8  0E01               	movlw	high main@mL
   740  0006EA  6E27               	movwf	stop@mL+1,c
   741  0006EC  0EE2               	movlw	low main@mR
   742  0006EE  6E28               	movwf	stop@mR,c
   743  0006F0  0E01               	movlw	high main@mR
   744  0006F2  6E29               	movwf	stop@mR+1,c
   745  0006F4  ECA8  F007         	call	_stop	;wreg free
   746                           
   747                           ;main.c: 97: enableSensor(0, 1);
   748  0006F8  0E01               	movlw	1
   749  0006FA  6E0F               	movwf	enableSensor@status,c
   750  0006FC  0E00               	movlw	0
   751  0006FE  ECAE  F009         	call	_enableSensor
   752                           
   753                           ;main.c: 98: enableSensor(1, 1);
   754  000702  0E01               	movlw	1
   755  000704  6E0F               	movwf	enableSensor@status,c
   756  000706  0E01               	movlw	1
   757  000708  ECAE  F009         	call	_enableSensor
   758  00070C  D0F7               	goto	l2457
   759  00070E                     l2385:
   760                           
   761                           ; BSR set to: 1
   762                           ;main.c: 105: if (DirectionFound==0) {
   763  00070E  0101               	movlb	1	; () banked
   764  000710  51D6               	movf	main@DirectionFound& (0+255),w,b
   765  000712  0101               	movlb	1	; () banked
   766  000714  A4D8               	btfss	status,2,c
   767  000716  D016               	goto	l2389
   768                           
   769                           ; BSR set to: 1
   770                           ;main.c: 107: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   771  000718  0ED9               	movlw	low main@mL
   772  00071A  6E2F               	movwf	ScanWithRange@mL,c
   773  00071C  0E01               	movlw	high main@mL
   774  00071E  6E30               	movwf	ScanWithRange@mL+1,c
   775  000720  0EE2               	movlw	low main@mR
   776  000722  6E31               	movwf	ScanWithRange@mR,c
   777  000724  0E01               	movlw	high main@mR
   778  000726  6E32               	movwf	ScanWithRange@mR+1,c
   779  000728  C1D5  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   780  00072C  0101               	movlb	1	; () banked
   781  00072E  51D8               	movf	main@Move& (0+255),w,b
   782  000730  0D01               	mullw	1
   783  000732  0E64               	movlw	low main@MoveTime
   784  000734  24F3               	addwf	prodl,w,c
   785  000736  6E34               	movwf	ScanWithRange@MoveTime,c
   786  000738  0E01               	movlw	high main@MoveTime
   787  00073A  20F4               	addwfc	prodh,w,c
   788  00073C  6E35               	movwf	ScanWithRange@MoveTime+1,c
   789  00073E  EC59  F000         	call	_ScanWithRange	;wreg free
   790  000742  D036               	goto	L3
   791  000744                     l2389:
   792                           
   793                           ; BSR set to: 1
   794  000744  0101               	movlb	1	; () banked
   795  000746  05D6               	decf	main@DirectionFound& (0+255),w,b
   796  000748  A4D8               	btfss	status,2,c
   797  00074A  D00B               	goto	l2393
   798                           
   799                           ; BSR set to: 1
   800                           ;main.c: 110: DirectionFound = ScanIR(&mL, &mR);
   801  00074C  0ED9               	movlw	low main@mL
   802  00074E  6E2F               	movwf	ScanIR@mL,c
   803  000750  0E01               	movlw	high main@mL
   804  000752  6E30               	movwf	ScanIR@mL+1,c
   805  000754  0EE2               	movlw	low main@mR
   806  000756  6E31               	movwf	ScanIR@mR,c
   807  000758  0E01               	movlw	high main@mR
   808  00075A  6E32               	movwf	ScanIR@mR+1,c
   809  00075C  EC01  F005         	call	_ScanIR	;wreg free
   810  000760  D027               	goto	L3
   811  000762                     l2393:
   812                           
   813                           ; BSR set to: 1
   814  000762  0E02               	movlw	2
   815  000764  0101               	movlb	1	; () banked
   816  000766  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   817  000768  A4D8               	btfss	status,2,c
   818  00076A  D004               	goto	l2397
   819                           
   820                           ; BSR set to: 1
   821                           ;main.c: 113: mode=2;
   822  00076C  0E02               	movlw	2
   823  00076E  0101               	movlb	1	; () banked
   824  000770  6FD4               	movwf	main@mode& (0+255),b
   825                           
   826                           ;main.c: 114: } else if (DirectionFound==3) {
   827  000772  D020               	goto	l2407
   828  000774                     l2397:
   829                           
   830                           ; BSR set to: 1
   831  000774  0E03               	movlw	3
   832  000776  0101               	movlb	1	; () banked
   833  000778  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   834  00077A  A4D8               	btfss	status,2,c
   835  00077C  D01B               	goto	l2407
   836                           
   837                           ; BSR set to: 1
   838                           ;main.c: 119: fullSpeedAhead(&mL, &mR);
   839  00077E  0ED9               	movlw	low main@mL
   840  000780  6E26               	movwf	fullSpeedAhead@mL,c
   841  000782  0E01               	movlw	high main@mL
   842  000784  6E27               	movwf	fullSpeedAhead@mL+1,c
   843  000786  0EE2               	movlw	low main@mR
   844  000788  6E28               	movwf	fullSpeedAhead@mR,c
   845  00078A  0E01               	movlw	high main@mR
   846  00078C  6E29               	movwf	fullSpeedAhead@mR+1,c
   847  00078E  ECA8  F008         	call	_fullSpeedAhead	;wreg free
   848                           
   849                           ;main.c: 120: delay_tenth_s(ScanAngle);
   850  000792  0101               	movlb	1	; () banked
   851  000794  51D5               	movf	main@ScanAngle& (0+255),w,b
   852  000796  EC46  F009         	call	_delay_tenth_s
   853                           
   854                           ;main.c: 121: stop(&mL,&mR);
   855  00079A  0ED9               	movlw	low main@mL
   856  00079C  6E26               	movwf	stop@mL,c
   857  00079E  0E01               	movlw	high main@mL
   858  0007A0  6E27               	movwf	stop@mL+1,c
   859  0007A2  0EE2               	movlw	low main@mR
   860  0007A4  6E28               	movwf	stop@mR,c
   861  0007A6  0E01               	movlw	high main@mR
   862  0007A8  6E29               	movwf	stop@mR+1,c
   863  0007AA  ECA8  F007         	call	_stop	;wreg free
   864                           
   865                           ;main.c: 122: DirectionFound=0;
   866  0007AE  0E00               	movlw	0
   867  0007B0                     L3:
   868  0007B0  0101               	movlb	1	; () banked
   869  0007B2  6FD6               	movwf	main@DirectionFound& (0+255),b
   870  0007B4                     l2407:
   871                           
   872                           ; BSR set to: 1
   873                           ;main.c: 123: }
   874                           ;main.c: 125: MoveType[Move] = 1;
   875  0007B4  0101               	movlb	1	; () banked
   876  0007B6  51D8               	movf	main@Move& (0+255),w,b
   877  0007B8  0D01               	mullw	1
   878  0007BA  0E00               	movlw	low main@MoveType
   879  0007BC  24F3               	addwf	prodl,w,c
   880  0007BE  6ED9               	movwf	fsr2l,c
   881  0007C0  0E01               	movlw	high main@MoveType
   882  0007C2  20F4               	addwfc	prodh,w,c
   883  0007C4  6EDA               	movwf	fsr2h,c
   884  0007C6  0E01               	movlw	1
   885  0007C8  6EDF               	movwf	indf2,c
   886                           
   887                           ; BSR set to: 1
   888                           ;main.c: 126: Move++;
   889  0007CA  0101               	movlb	1	; () banked
   890  0007CC  2BD8               	incf	main@Move& (0+255),f,b
   891                           
   892                           ;main.c: 137: break;
   893  0007CE  D10A               	goto	l2481
   894  0007D0                     l2411:
   895                           
   896                           ; BSR set to: 1
   897                           ;main.c: 143: if (RFID_Read) {
   898  0007D0  0101               	movlb	1	; () banked
   899  0007D2  51EB               	movf	_RFID_Read& (0+255),w,b	;volatile
   900  0007D4  B4D8               	btfsc	status,2,c
   901  0007D6  D085               	goto	l2453
   902                           
   903                           ; BSR set to: 1
   904                           ;main.c: 144: stop(&mL, &mR);
   905  0007D8  0ED9               	movlw	low main@mL
   906  0007DA  6E26               	movwf	stop@mL,c
   907  0007DC  0E01               	movlw	high main@mL
   908  0007DE  6E27               	movwf	stop@mL+1,c
   909  0007E0  0EE2               	movlw	low main@mR
   910  0007E2  6E28               	movwf	stop@mR,c
   911  0007E4  0E01               	movlw	high main@mR
   912  0007E6  6E29               	movwf	stop@mR+1,c
   913  0007E8  ECA8  F007         	call	_stop	;wreg free
   914                           
   915                           ;main.c: 145: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   916  0007EC  0E03               	movlw	3
   917  0007EE  0101               	movlb	1	; () banked
   918  0007F0  19FB               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   919  0007F2  A4D8               	btfss	status,2,c
   920  0007F4  D002               	goto	u1840
   921  0007F6  0E01               	movlw	1
   922  0007F8  D001               	goto	u1842
   923  0007FA                     u1840:
   924  0007FA  0E00               	movlw	0
   925  0007FC                     u1842:
   926  0007FC  6E4D               	movwf	??_main& (0+255),c
   927  0007FE  0E02               	movlw	2
   928  000800  0101               	movlb	1	; () banked
   929  000802  19EC               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   930  000804  A4D8               	btfss	status,2,c
   931  000806  D002               	goto	u1850
   932  000808  0E01               	movlw	1
   933  00080A  D001               	goto	u1852
   934  00080C                     u1850:
   935  00080C  0E00               	movlw	0
   936  00080E                     u1852:
   937  00080E  144D               	andwf	??_main,w,c
   938  000810  A0E8               	btfss	wreg,0,c
   939  000812  D0E8               	goto	l2481
   940                           
   941                           ; BSR set to: 1
   942                           ;main.c: 146: if (VerifySignal(ReceivedString)){
   943  000814  0EEC               	movlw	low _ReceivedString
   944  000816  6E0F               	movwf	VerifySignal@Signal,c
   945  000818  0E01               	movlw	high _ReceivedString
   946  00081A  6E10               	movwf	VerifySignal@Signal+1,c
   947  00081C  EC4E  F007         	call	_VerifySignal	;wreg free
   948  000820  0900               	iorlw	0
   949  000822  B4D8               	btfsc	status,2,c
   950  000824  D03C               	goto	l2445
   951                           
   952                           ;main.c: 148: for (i=0; i<10; i++){
   953  000826  0E00               	movlw	0
   954  000828  0101               	movlb	1	; () banked
   955  00082A  6FD7               	movwf	main@i& (0+255),b
   956  00082C                     l2421:
   957                           
   958                           ; BSR set to: 1
   959  00082C  0E09               	movlw	9
   960  00082E  0101               	movlb	1	; () banked
   961  000830  65D7               	cpfsgt	main@i& (0+255),b
   962  000832  D001               	goto	l2425
   963  000834  D01C               	goto	l2431
   964  000836                     l2425:
   965                           
   966                           ; BSR set to: 1
   967                           ;main.c: 149: Message[i] = ReceivedString[i+1];
   968  000836  0101               	movlb	1	; () banked
   969  000838  51D7               	movf	main@i& (0+255),w,b
   970  00083A  6E4D               	movwf	??_main& (0+255),c
   971  00083C  6A4E               	clrf	(??_main+1)& (0+255),c
   972  00083E  0E01               	movlw	1
   973  000840  264D               	addwf	??_main,f,c
   974  000842  0E00               	movlw	0
   975  000844  224E               	addwfc	??_main+1,f,c
   976  000846  0EEC               	movlw	low _ReceivedString
   977  000848  244D               	addwf	??_main,w,c
   978  00084A  6ED9               	movwf	fsr2l,c
   979  00084C  0E01               	movlw	high _ReceivedString
   980  00084E  204E               	addwfc	??_main+1,w,c
   981  000850  6EDA               	movwf	fsr2h,c
   982  000852  0101               	movlb	1	; () banked
   983  000854  51D7               	movf	main@i& (0+255),w,b
   984  000856  0D01               	mullw	1
   985  000858  0EC8               	movlw	low main@Message
   986  00085A  24F3               	addwf	prodl,w,c
   987  00085C  6EE1               	movwf	fsr1l,c
   988  00085E  0E01               	movlw	high main@Message
   989  000860  20F4               	addwfc	prodh,w,c
   990  000862  6EE2               	movwf	fsr1h,c
   991  000864  CFDF FFE7          	movff	indf2,indf1
   992                           
   993                           ; BSR set to: 1
   994  000868  0101               	movlb	1	; () banked
   995  00086A  2BD7               	incf	main@i& (0+255),f,b
   996  00086C  D7DF               	goto	l2421
   997  00086E                     l2431:
   998                           
   999                           ; BSR set to: 1
  1000                           ;main.c: 150: }
  1001                           ;main.c: 153: for (i=0; i<16; i++) {
  1002  00086E  0E00               	movlw	0
  1003  000870  0101               	movlb	1	; () banked
  1004  000872  6FD7               	movwf	main@i& (0+255),b
  1005  000874                     l2433:
  1006                           
  1007                           ; BSR set to: 1
  1008  000874  0E0F               	movlw	15
  1009  000876  0101               	movlb	1	; () banked
  1010  000878  65D7               	cpfsgt	main@i& (0+255),b
  1011  00087A  D001               	goto	l2437
  1012  00087C  D00E               	goto	l2443
  1013  00087E                     l2437:
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 154: ReceivedString[i]=0;
  1017  00087E  0101               	movlb	1	; () banked
  1018  000880  51D7               	movf	main@i& (0+255),w,b
  1019  000882  0D01               	mullw	1
  1020  000884  0EEC               	movlw	low _ReceivedString
  1021  000886  24F3               	addwf	prodl,w,c
  1022  000888  6ED9               	movwf	fsr2l,c
  1023  00088A  0E01               	movlw	high _ReceivedString
  1024  00088C  20F4               	addwfc	prodh,w,c
  1025  00088E  6EDA               	movwf	fsr2h,c
  1026  000890  0E00               	movlw	0
  1027  000892  6EDF               	movwf	indf2,c
  1028                           
  1029                           ; BSR set to: 1
  1030  000894  0101               	movlb	1	; () banked
  1031  000896  2BD7               	incf	main@i& (0+255),f,b
  1032  000898  D7ED               	goto	l2433
  1033  00089A                     l2443:
  1034                           
  1035                           ; BSR set to: 1
  1036                           ;main.c: 155: }
  1037                           ;main.c: 156: mode = 3;
  1038  00089A  0E03               	movlw	3
  1039  00089C  D030               	goto	L4
  1040  00089E                     l2445:
  1041                           
  1042                           ;main.c: 159: fullSpeedBack(&mL,&mR);
  1043  00089E  0ED9               	movlw	low main@mL
  1044  0008A0  6E2B               	movwf	fullSpeedBack@mL,c
  1045  0008A2  0E01               	movlw	high main@mL
  1046  0008A4  6E2C               	movwf	fullSpeedBack@mL+1,c
  1047  0008A6  0EE2               	movlw	low main@mR
  1048  0008A8  6E2D               	movwf	fullSpeedBack@mR,c
  1049  0008AA  0E01               	movlw	high main@mR
  1050  0008AC  6E2E               	movwf	fullSpeedBack@mR+1,c
  1051  0008AE  EC62  F009         	call	_fullSpeedBack	;wreg free
  1052                           
  1053                           ;main.c: 160: delay_tenth_s(5);
  1054  0008B2  0E05               	movlw	5
  1055  0008B4  EC46  F009         	call	_delay_tenth_s
  1056                           
  1057                           ;main.c: 161: stop(&mL,&mR);
  1058  0008B8  0ED9               	movlw	low main@mL
  1059  0008BA  6E26               	movwf	stop@mL,c
  1060  0008BC  0E01               	movlw	high main@mL
  1061  0008BE  6E27               	movwf	stop@mL+1,c
  1062  0008C0  0EE2               	movlw	low main@mR
  1063  0008C2  6E28               	movwf	stop@mR,c
  1064  0008C4  0E01               	movlw	high main@mR
  1065  0008C6  6E29               	movwf	stop@mR+1,c
  1066  0008C8  ECA8  F007         	call	_stop	;wreg free
  1067                           
  1068                           ;main.c: 162: fullSpeedAhead(&mL,&mR);
  1069  0008CC  0ED9               	movlw	low main@mL
  1070  0008CE  6E26               	movwf	fullSpeedAhead@mL,c
  1071  0008D0  0E01               	movlw	high main@mL
  1072  0008D2  6E27               	movwf	fullSpeedAhead@mL+1,c
  1073  0008D4  0EE2               	movlw	low main@mR
  1074  0008D6  6E28               	movwf	fullSpeedAhead@mR,c
  1075  0008D8  0E01               	movlw	high main@mR
  1076  0008DA  6E29               	movwf	fullSpeedAhead@mR+1,c
  1077  0008DC  ECA8  F008         	call	_fullSpeedAhead	;wreg free
  1078                           
  1079                           ;main.c: 163: }
  1080                           ;main.c: 164: }
  1081                           ;main.c: 165: } else {
  1082  0008E0  D081               	goto	l2481
  1083  0008E2                     l2453:
  1084                           
  1085                           ;main.c: 166: fullSpeedAhead(&mL,&mR);
  1086  0008E2  0ED9               	movlw	low main@mL
  1087  0008E4  6E26               	movwf	fullSpeedAhead@mL,c
  1088  0008E6  0E01               	movlw	high main@mL
  1089  0008E8  6E27               	movwf	fullSpeedAhead@mL+1,c
  1090  0008EA  0EE2               	movlw	low main@mR
  1091  0008EC  6E28               	movwf	fullSpeedAhead@mR,c
  1092  0008EE  0E01               	movlw	high main@mR
  1093  0008F0  6E29               	movwf	fullSpeedAhead@mR+1,c
  1094  0008F2  ECA8  F008         	call	_fullSpeedAhead	;wreg free
  1095                           
  1096                           ;main.c: 167: delay_tenth_s(5);
  1097  0008F6  0E05               	movlw	5
  1098  0008F8  EC46  F009         	call	_delay_tenth_s
  1099  0008FC                     l2457:
  1100                           
  1101                           ;main.c: 169: mode=1;
  1102  0008FC  0E01               	movlw	1
  1103  0008FE                     L4:
  1104  0008FE  0101               	movlb	1	; () banked
  1105  000900  6FD4               	movwf	main@mode& (0+255),b
  1106                           
  1107                           ; BSR set to: 1
  1108                           ;main.c: 170: }
  1109                           ;main.c: 173: break;
  1110  000902  D070               	goto	l2481
  1111  000904                     l2459:
  1112                           
  1113                           ; BSR set to: 1
  1114  000904  0101               	movlb	1	; () banked
  1115  000906  51D8               	movf	main@Move& (0+255),w,b
  1116  000908  0101               	movlb	1	; () banked
  1117  00090A  B4D8               	btfsc	status,2,c
  1118  00090C  D06B               	goto	l2481
  1119                           
  1120                           ; BSR set to: 1
  1121                           ;main.c: 178: if (MoveType[Move]==0) {
  1122                           
  1123                           ; BSR set to: 1
  1124                           
  1125                           ; BSR set to: 1
  1126  00090E  0101               	movlb	1	; () banked
  1127  000910  51D8               	movf	main@Move& (0+255),w,b
  1128  000912  0D01               	mullw	1
  1129  000914  0E00               	movlw	low main@MoveType
  1130  000916  24F3               	addwf	prodl,w,c
  1131  000918  6ED9               	movwf	fsr2l,c
  1132  00091A  0E01               	movlw	high main@MoveType
  1133  00091C  20F4               	addwfc	prodh,w,c
  1134  00091E  6EDA               	movwf	fsr2h,c
  1135  000920  50DF               	movf	indf2,w,c
  1136  000922  A4D8               	btfss	status,2,c
  1137  000924  D017               	goto	l2467
  1138                           
  1139                           ; BSR set to: 1
  1140                           ;main.c: 179: fullSpeedBack(&mL,&mR);
  1141  000926  0ED9               	movlw	low main@mL
  1142  000928  6E2B               	movwf	fullSpeedBack@mL,c
  1143  00092A  0E01               	movlw	high main@mL
  1144  00092C  6E2C               	movwf	fullSpeedBack@mL+1,c
  1145  00092E  0EE2               	movlw	low main@mR
  1146  000930  6E2D               	movwf	fullSpeedBack@mR,c
  1147  000932  0E01               	movlw	high main@mR
  1148  000934  6E2E               	movwf	fullSpeedBack@mR+1,c
  1149  000936  EC62  F009         	call	_fullSpeedBack	;wreg free
  1150                           
  1151                           ;main.c: 180: delay_tenth_s(MoveTime[Move]);
  1152  00093A  0101               	movlb	1	; () banked
  1153  00093C  51D8               	movf	main@Move& (0+255),w,b
  1154  00093E  0D01               	mullw	1
  1155  000940  0E64               	movlw	low main@MoveTime
  1156  000942  24F3               	addwf	prodl,w,c
  1157  000944  6ED9               	movwf	fsr2l,c
  1158  000946  0E01               	movlw	high main@MoveTime
  1159  000948  20F4               	addwfc	prodh,w,c
  1160  00094A  6EDA               	movwf	fsr2h,c
  1161  00094C  50DF               	movf	indf2,w,c
  1162  00094E  EC46  F009         	call	_delay_tenth_s
  1163                           
  1164                           ;main.c: 181: } else if (MoveType[Move]==1) {
  1165  000952  D045               	goto	l2475
  1166  000954                     l2467:
  1167  000954  0101               	movlb	1	; () banked
  1168  000956  51D8               	movf	main@Move& (0+255),w,b
  1169  000958  0D01               	mullw	1
  1170  00095A  0E00               	movlw	low main@MoveType
  1171  00095C  24F3               	addwf	prodl,w,c
  1172  00095E  6ED9               	movwf	fsr2l,c
  1173  000960  0E01               	movlw	high main@MoveType
  1174  000962  20F4               	addwfc	prodh,w,c
  1175  000964  6EDA               	movwf	fsr2h,c
  1176  000966  04DE               	decf	postinc2,w,c
  1177  000968  A4D8               	btfss	status,2,c
  1178  00096A  D039               	goto	l2475
  1179                           
  1180                           ; BSR set to: 1
  1181                           ;main.c: 182: if (MoveTime[Move]>0) {
  1182  00096C  0101               	movlb	1	; () banked
  1183  00096E  51D8               	movf	main@Move& (0+255),w,b
  1184  000970  0D01               	mullw	1
  1185  000972  0E64               	movlw	low main@MoveTime
  1186  000974  24F3               	addwf	prodl,w,c
  1187  000976  6ED9               	movwf	fsr2l,c
  1188  000978  0E01               	movlw	high main@MoveTime
  1189  00097A  20F4               	addwfc	prodh,w,c
  1190  00097C  6EDA               	movwf	fsr2h,c
  1191  00097E  50DF               	movf	indf2,w,c
  1192  000980  B4D8               	btfsc	status,2,c
  1193  000982  D017               	goto	l2473
  1194                           
  1195                           ; BSR set to: 1
  1196                           ;main.c: 183: turnRight(&mL,&mR);
  1197  000984  0ED9               	movlw	low main@mL
  1198  000986  6E2B               	movwf	turnRight@mL,c
  1199  000988  0E01               	movlw	high main@mL
  1200  00098A  6E2C               	movwf	turnRight@mL+1,c
  1201  00098C  0EE2               	movlw	low main@mR
  1202  00098E  6E2D               	movwf	turnRight@mR,c
  1203  000990  0E01               	movlw	high main@mR
  1204  000992  6E2E               	movwf	turnRight@mR+1,c
  1205  000994  ECE0  F008         	call	_turnRight	;wreg free
  1206                           
  1207                           ;main.c: 184: delay_tenth_s(MoveTime[Move]);
  1208  000998  0101               	movlb	1	; () banked
  1209  00099A  51D8               	movf	main@Move& (0+255),w,b
  1210  00099C  0D01               	mullw	1
  1211  00099E  0E64               	movlw	low main@MoveTime
  1212  0009A0  24F3               	addwf	prodl,w,c
  1213  0009A2  6ED9               	movwf	fsr2l,c
  1214  0009A4  0E01               	movlw	high main@MoveTime
  1215  0009A6  20F4               	addwfc	prodh,w,c
  1216  0009A8  6EDA               	movwf	fsr2h,c
  1217  0009AA  50DF               	movf	indf2,w,c
  1218  0009AC  EC46  F009         	call	_delay_tenth_s
  1219                           
  1220                           ;main.c: 185: } else {
  1221  0009B0  D016               	goto	l2475
  1222  0009B2                     l2473:
  1223                           
  1224                           ;main.c: 186: turnLeft(&mL,&mR);
  1225  0009B2  0ED9               	movlw	low main@mL
  1226  0009B4  6E2B               	movwf	turnLeft@mL,c
  1227  0009B6  0E01               	movlw	high main@mL
  1228  0009B8  6E2C               	movwf	turnLeft@mL+1,c
  1229  0009BA  0EE2               	movlw	low main@mR
  1230  0009BC  6E2D               	movwf	turnLeft@mR,c
  1231  0009BE  0E01               	movlw	high main@mR
  1232  0009C0  6E2E               	movwf	turnLeft@mR+1,c
  1233  0009C2  EC05  F009         	call	_turnLeft	;wreg free
  1234                           
  1235                           ;main.c: 187: delay_tenth_s(MoveTime[Move]);
  1236  0009C6  0101               	movlb	1	; () banked
  1237  0009C8  51D8               	movf	main@Move& (0+255),w,b
  1238  0009CA  0D01               	mullw	1
  1239  0009CC  0E64               	movlw	low main@MoveTime
  1240  0009CE  24F3               	addwf	prodl,w,c
  1241  0009D0  6ED9               	movwf	fsr2l,c
  1242  0009D2  0E01               	movlw	high main@MoveTime
  1243  0009D4  20F4               	addwfc	prodh,w,c
  1244  0009D6  6EDA               	movwf	fsr2h,c
  1245  0009D8  50DF               	movf	indf2,w,c
  1246  0009DA  EC46  F009         	call	_delay_tenth_s
  1247  0009DE                     l2475:
  1248  0009DE  0101               	movlb	1	; () banked
  1249  0009E0  07D8               	decf	main@Move& (0+255),f,b
  1250  0009E2  D790               	goto	l2459
  1251  0009E4                     l2481:
  1252  0009E4  0101               	movlb	1	; () banked
  1253  0009E6  51D4               	movf	main@mode& (0+255),w,b
  1254                           
  1255                           ; Switch size 1, requested type "space"
  1256                           ; Number of cases is 4, Range of values is 0 to 3
  1257                           ; switch strategies available:
  1258                           ; Name         Instructions Cycles
  1259                           ; simple_byte           13     7 (average)
  1260                           ;	Chosen strategy is simple_byte
  1261  0009E8  0A00               	xorlw	0	; case 0
  1262  0009EA  B4D8               	btfsc	status,2,c
  1263  0009EC  D64D               	goto	l2365
  1264  0009EE  0A01               	xorlw	1	; case 1
  1265  0009F0  B4D8               	btfsc	status,2,c
  1266  0009F2  D68D               	goto	l2385
  1267  0009F4  0A03               	xorlw	3	; case 2
  1268  0009F6  B4D8               	btfsc	status,2,c
  1269  0009F8  D6EB               	goto	l2411
  1270  0009FA  0A01               	xorlw	1	; case 3
  1271  0009FC  B4D8               	btfsc	status,2,c
  1272  0009FE  D782               	goto	l2459
  1273                           
  1274                           ; BSR set to: 1
  1275                           
  1276                           ; BSR set to: 1
  1277  000A00  D7F1               	goto	l2481
  1278  000A02                     __end_of_main:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           intcon	equ	0xFF2
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           indf1	equ	0xFE7
  1287                           fsr1h	equ	0xFE2
  1288                           fsr1l	equ	0xFE1
  1289                           indf2	equ	0xFDF
  1290                           postinc2	equ	0xFDE
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _initRFID *****************
  1296 ;; Defined at:
  1297 ;;		line 5 in file "RFID_Reader.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;		None               void
  1304 ;; Registers used:
  1305 ;;		wreg, status,2
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1311 ;;      Params:         0       0       0       0
  1312 ;;      Locals:         1       0       0       0
  1313 ;;      Temps:          0       0       0       0
  1314 ;;      Totals:         1       0       0       0
  1315 ;;Total ram usage:        1 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text1
  1326  0013CA                     __ptext1:
  1327                           	opt stack 0
  1328  0013CA                     _initRFID:
  1329                           	opt stack 29
  1330                           
  1331                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1332                           
  1333                           ; BSR set to: 1
  1334                           ;incstack = 0
  1335  0013CA  0E01               	movlw	1
  1336  0013CC  6E0F               	movwf	_initRFID$1317,c
  1337  0013CE  5094               	movf	3988,w,c	;volatile
  1338  0013D0  C00F  FF94         	movff	_initRFID$1317,3988	;volatile
  1339                           
  1340                           ;RFID_Reader.c: 10: SPBRG=205;
  1341  0013D4  0ECD               	movlw	205
  1342  0013D6  6EAF               	movwf	4015,c	;volatile
  1343                           
  1344                           ;RFID_Reader.c: 11: SPBRGH=0;
  1345  0013D8  0E00               	movlw	0
  1346  0013DA  6EB0               	movwf	4016,c	;volatile
  1347                           
  1348                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1349  0013DC  86AA               	bsf	4010,3,c	;volatile
  1350                           
  1351                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1352  0013DE  84AC               	bsf	4012,2,c	;volatile
  1353                           
  1354                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1355  0013E0  88AB               	bsf	4011,4,c	;volatile
  1356                           
  1357                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1358  0013E2  8EAB               	bsf	4011,7,c	;volatile
  1359                           
  1360                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1361  0013E4  98AC               	bcf	4012,4,c	;volatile
  1362                           
  1363                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1364  0013E6  9CAB               	bcf	4011,6,c	;volatile
  1365  0013E8  0012               	return		;funcret
  1366  0013EA                     __end_of_initRFID:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           prodh	equ	0xFF4
  1370                           prodl	equ	0xFF3
  1371                           intcon	equ	0xFF2
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           indf1	equ	0xFE7
  1375                           fsr1h	equ	0xFE2
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           postinc2	equ	0xFDE
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           status	equ	0xFD8
  1382                           
  1383 ;; *************** function _initMotorPWM *****************
  1384 ;; Defined at:
  1385 ;;		line 4 in file "dc_motor.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;		None               void
  1392 ;; Registers used:
  1393 ;;		wreg, status,2
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1399 ;;      Params:         0       0       0       0
  1400 ;;      Locals:         0       0       0       0
  1401 ;;      Temps:          0       0       0       0
  1402 ;;      Totals:         0       0       0       0
  1403 ;;Total ram usage:        0 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    1
  1406 ;; This function calls:
  1407 ;;		Nothing
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text2
  1414  0012FA                     __ptext2:
  1415                           	opt stack 0
  1416  0012FA                     _initMotorPWM:
  1417                           	opt stack 29
  1418                           
  1419                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1420                           
  1421                           ;incstack = 0
  1422  0012FA  0E00               	movlw	0
  1423  0012FC  6E7F               	movwf	3967,c	;volatile
  1424                           
  1425                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1426  0012FE  0E80               	movlw	128
  1427  001300  6E7E               	movwf	3966,c	;volatile
  1428                           
  1429                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1430  001302  0E6F               	movlw	111
  1431  001304  6E6F               	movwf	3951,c	;volatile
  1432                           
  1433                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1434  001306  0E00               	movlw	0
  1435  001308  6E6E               	movwf	3950,c	;volatile
  1436                           
  1437                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1438  00130A  0EC7               	movlw	199
  1439  00130C  6E7B               	movwf	3963,c	;volatile
  1440                           
  1441                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1442  00130E  0E00               	movlw	0
  1443  001310  6E7A               	movwf	3962,c	;volatile
  1444                           
  1445                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1446  001312  0E00               	movlw	0
  1447  001314  6E79               	movwf	3961,c	;volatile
  1448                           
  1449                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1450  001316  0E00               	movlw	0
  1451  001318  6E78               	movwf	3960,c	;volatile
  1452                           
  1453                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1454  00131A  0E00               	movlw	0
  1455  00131C  6E77               	movwf	3959,c	;volatile
  1456                           
  1457                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1458  00131E  0E00               	movlw	0
  1459  001320  6E76               	movwf	3958,c	;volatile
  1460                           
  1461                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1462  001322  9093               	bcf	3987,0,c	;volatile
  1463                           
  1464                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1465  001324  9293               	bcf	3987,1,c	;volatile
  1466                           
  1467                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1468  001326  9493               	bcf	3987,2,c	;volatile
  1469                           
  1470                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1471  001328  9693               	bcf	3987,3,c	;volatile
  1472  00132A  0012               	return		;funcret
  1473  00132C                     __end_of_initMotorPWM:
  1474                           	opt stack 0
  1475                           tblptru	equ	0xFF8
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           intcon	equ	0xFF2
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           indf1	equ	0xFE7
  1482                           fsr1h	equ	0xFE2
  1483                           fsr1l	equ	0xFE1
  1484                           indf2	equ	0xFDF
  1485                           postinc2	equ	0xFDE
  1486                           fsr2h	equ	0xFDA
  1487                           fsr2l	equ	0xFD9
  1488                           status	equ	0xFD8
  1489                           
  1490 ;; *************** function _initLCD *****************
  1491 ;; Defined at:
  1492 ;;		line 38 in file "LCD.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  2   32[None  ] int 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2, status,0, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1506 ;;      Params:         0       0       0       0
  1507 ;;      Locals:         0       0       0       0
  1508 ;;      Temps:          1       0       0       0
  1509 ;;      Totals:         1       0       0       0
  1510 ;;Total ram usage:        1 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    4
  1513 ;; This function calls:
  1514 ;;		_LCDout
  1515 ;;		_SendLCD
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text3
  1522  000DE0                     __ptext3:
  1523                           	opt stack 0
  1524  000DE0                     _initLCD:
  1525                           	opt stack 26
  1526                           
  1527                           ;LCD.c: 44: TRISAbits.RA6=0;
  1528                           
  1529                           ;incstack = 0
  1530  000DE0  9C92               	bcf	3986,6,c	;volatile
  1531                           
  1532                           ;LCD.c: 45: TRISCbits.RC0=0;
  1533  000DE2  9094               	bcf	3988,0,c	;volatile
  1534                           
  1535                           ;LCD.c: 46: TRISCbits.RC1=0;
  1536  000DE4  9294               	bcf	3988,1,c	;volatile
  1537                           
  1538                           ;LCD.c: 47: TRISCbits.RC2=0;
  1539  000DE6  9494               	bcf	3988,2,c	;volatile
  1540                           
  1541                           ;LCD.c: 48: TRISDbits.RD0=0;
  1542  000DE8  9095               	bcf	3989,0,c	;volatile
  1543                           
  1544                           ;LCD.c: 49: TRISDbits.RD1=0;
  1545  000DEA  9295               	bcf	3989,1,c	;volatile
  1546                           
  1547                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1548  000DEC  0E27               	movlw	39
  1549  000DEE  6E15               	movwf	??_initLCD& (0+255),c
  1550  000DF0  0EF5               	movlw	245
  1551  000DF2                     u2027:
  1552  000DF2  2EE8               	decfsz	wreg,f,c
  1553  000DF4  D7FE               	goto	u2027
  1554  000DF6  2E15               	decfsz	??_initLCD& (0+255),f,c
  1555  000DF8  D7FC               	goto	u2027
  1556  000DFA  F000               	nop	
  1557                           
  1558                           ;LCD.c: 52: LCDout(0b0011);
  1559  000DFC  0E03               	movlw	3
  1560  000DFE  EC8D  F006         	call	_LCDout
  1561                           
  1562                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1563  000E02  0E0D               	movlw	13
  1564  000E04  6E15               	movwf	??_initLCD& (0+255),c
  1565  000E06  0EFC               	movlw	252
  1566  000E08                     u2037:
  1567  000E08  2EE8               	decfsz	wreg,f,c
  1568  000E0A  D7FE               	goto	u2037
  1569  000E0C  2E15               	decfsz	??_initLCD& (0+255),f,c
  1570  000E0E  D7FC               	goto	u2037
  1571                           
  1572                           ;LCD.c: 54: LCDout(0b0011);
  1573  000E10  0E03               	movlw	3
  1574  000E12  EC8D  F006         	call	_LCDout
  1575                           
  1576                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1577  000E16  0E85               	movlw	133
  1578  000E18                     u2047:
  1579  000E18  2EE8               	decfsz	wreg,f,c
  1580  000E1A  D7FE               	goto	u2047
  1581  000E1C  F000               	nop	
  1582                           
  1583                           ;LCD.c: 56: LCDout(0b0011);
  1584  000E1E  0E03               	movlw	3
  1585  000E20  EC8D  F006         	call	_LCDout
  1586                           
  1587                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1588  000E24  0E21               	movlw	33
  1589  000E26                     u2057:
  1590  000E26  2EE8               	decfsz	wreg,f,c
  1591  000E28  D7FE               	goto	u2057
  1592  000E2A  F000               	nop	
  1593                           
  1594                           ;LCD.c: 58: LCDout(0b0010);
  1595  000E2C  0E02               	movlw	2
  1596  000E2E  EC8D  F006         	call	_LCDout
  1597                           
  1598                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1599  000E32  0E21               	movlw	33
  1600  000E34                     u2067:
  1601  000E34  2EE8               	decfsz	wreg,f,c
  1602  000E36  D7FE               	goto	u2067
  1603  000E38  F000               	nop	
  1604                           
  1605                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1606  000E3A  0E00               	movlw	0
  1607  000E3C  6E13               	movwf	SendLCD@type,c
  1608  000E3E  0E28               	movlw	40
  1609  000E40  EC96  F009         	call	_SendLCD
  1610                           
  1611                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1612  000E44  0E21               	movlw	33
  1613  000E46                     u2077:
  1614  000E46  2EE8               	decfsz	wreg,f,c
  1615  000E48  D7FE               	goto	u2077
  1616  000E4A  F000               	nop	
  1617                           
  1618                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1619  000E4C  0E00               	movlw	0
  1620  000E4E  6E13               	movwf	SendLCD@type,c
  1621  000E50  0E08               	movlw	8
  1622  000E52  EC96  F009         	call	_SendLCD
  1623                           
  1624                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1625  000E56  0E21               	movlw	33
  1626  000E58                     u2087:
  1627  000E58  2EE8               	decfsz	wreg,f,c
  1628  000E5A  D7FE               	goto	u2087
  1629  000E5C  F000               	nop	
  1630                           
  1631                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1632  000E5E  0E00               	movlw	0
  1633  000E60  6E13               	movwf	SendLCD@type,c
  1634  000E62  0E01               	movlw	1
  1635  000E64  EC96  F009         	call	_SendLCD
  1636                           
  1637                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1638  000E68  0E0D               	movlw	13
  1639  000E6A  6E15               	movwf	??_initLCD& (0+255),c
  1640  000E6C  0EFC               	movlw	252
  1641  000E6E                     u2097:
  1642  000E6E  2EE8               	decfsz	wreg,f,c
  1643  000E70  D7FE               	goto	u2097
  1644  000E72  2E15               	decfsz	??_initLCD& (0+255),f,c
  1645  000E74  D7FC               	goto	u2097
  1646                           
  1647                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1648  000E76  0E00               	movlw	0
  1649  000E78  6E13               	movwf	SendLCD@type,c
  1650  000E7A  0E06               	movlw	6
  1651  000E7C  EC96  F009         	call	_SendLCD
  1652                           
  1653                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1654  000E80  0E21               	movlw	33
  1655  000E82                     u2107:
  1656  000E82  2EE8               	decfsz	wreg,f,c
  1657  000E84  D7FE               	goto	u2107
  1658  000E86  F000               	nop	
  1659                           
  1660                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1661  000E88  0E00               	movlw	0
  1662  000E8A  6E13               	movwf	SendLCD@type,c
  1663  000E8C  0E0C               	movlw	12
  1664  000E8E  EC96  F009         	call	_SendLCD
  1665                           
  1666                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1667  000E92  0E21               	movlw	33
  1668  000E94                     u2117:
  1669  000E94  2EE8               	decfsz	wreg,f,c
  1670  000E96  D7FE               	goto	u2117
  1671  000E98  F000               	nop	
  1672  000E9A  0012               	return		;funcret
  1673  000E9C                     __end_of_initLCD:
  1674                           	opt stack 0
  1675                           tblptru	equ	0xFF8
  1676                           prodh	equ	0xFF4
  1677                           prodl	equ	0xFF3
  1678                           intcon	equ	0xFF2
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           indf1	equ	0xFE7
  1682                           fsr1h	equ	0xFE2
  1683                           fsr1l	equ	0xFE1
  1684                           indf2	equ	0xFDF
  1685                           postinc2	equ	0xFDE
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _SendLCD *****************
  1691 ;; Defined at:
  1692 ;;		line 27 in file "LCD.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  Byte            1    wreg     unsigned char 
  1695 ;;  type            1   18[COMRAM] unsigned char 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  Byte            1   19[COMRAM] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;		None               void
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1707 ;;      Params:         1       0       0       0
  1708 ;;      Locals:         1       0       0       0
  1709 ;;      Temps:          0       0       0       0
  1710 ;;      Totals:         2       0       0       0
  1711 ;;Total ram usage:        2 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    3
  1714 ;; This function calls:
  1715 ;;		_LCDout
  1716 ;; This function is called by:
  1717 ;;		_initLCD
  1718 ;;		_SetLine
  1719 ;;		_LCD_String
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text4
  1724  00132C                     __ptext4:
  1725                           	opt stack 0
  1726  00132C                     _SendLCD:
  1727                           	opt stack 26
  1728                           
  1729                           ;incstack = 0
  1730                           ;SendLCD@Byte stored from wreg
  1731  00132C  6E14               	movwf	SendLCD@Byte,c
  1732                           
  1733                           ;LCD.c: 30: LATAbits.LATA6=type;
  1734  00132E  B013               	btfsc	SendLCD@type,0,c
  1735  001330  D002               	bra	u1315
  1736  001332  9C89               	bcf	3977,6,c	;volatile
  1737  001334  D001               	bra	u1316
  1738  001336                     u1315:
  1739  001336  8C89               	bsf	3977,6,c	;volatile
  1740  001338                     u1316:
  1741                           
  1742                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1743  001338  3814               	swapf	SendLCD@Byte,w,c
  1744  00133A  0B0F               	andlw	15
  1745  00133C  0B0F               	andlw	15
  1746  00133E  EC8D  F006         	call	_LCDout
  1747                           
  1748                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1749  001342  0E06               	movlw	6
  1750  001344                     u2127:
  1751  001344  2EE8               	decfsz	wreg,f,c
  1752  001346  D7FE               	goto	u2127
  1753  001348  D000               	nop2		;nop
  1754                           
  1755                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1756  00134A  5014               	movf	SendLCD@Byte,w,c
  1757  00134C  0B0F               	andlw	15
  1758  00134E  EC8D  F006         	call	_LCDout
  1759                           
  1760                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1761  001352  0E21               	movlw	33
  1762  001354                     u2137:
  1763  001354  2EE8               	decfsz	wreg,f,c
  1764  001356  D7FE               	goto	u2137
  1765  001358  F000               	nop	
  1766  00135A  0012               	return		;funcret
  1767  00135C                     __end_of_SendLCD:
  1768                           	opt stack 0
  1769                           tblptru	equ	0xFF8
  1770                           prodh	equ	0xFF4
  1771                           prodl	equ	0xFF3
  1772                           intcon	equ	0xFF2
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           indf1	equ	0xFE7
  1776                           fsr1h	equ	0xFE2
  1777                           fsr1l	equ	0xFE1
  1778                           indf2	equ	0xFDF
  1779                           postinc2	equ	0xFDE
  1780                           fsr2h	equ	0xFDA
  1781                           fsr2l	equ	0xFD9
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _LCDout *****************
  1785 ;; Defined at:
  1786 ;;		line 14 in file "LCD.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  number          1    wreg     unsigned char 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  number          1   17[COMRAM] unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;		None               void
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1800 ;;      Params:         0       0       0       0
  1801 ;;      Locals:         1       0       0       0
  1802 ;;      Temps:          3       0       0       0
  1803 ;;      Totals:         4       0       0       0
  1804 ;;Total ram usage:        4 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    2
  1807 ;; This function calls:
  1808 ;;		_E_TOG
  1809 ;; This function is called by:
  1810 ;;		_SendLCD
  1811 ;;		_initLCD
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text5
  1816  000D1A                     __ptext5:
  1817                           	opt stack 0
  1818  000D1A                     _LCDout:
  1819                           	opt stack 26
  1820                           
  1821                           ;incstack = 0
  1822                           ;LCDout@number stored from wreg
  1823  000D1A  6E12               	movwf	LCDout@number,c
  1824                           
  1825                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1826  000D1C  5012               	movf	LCDout@number,w,c
  1827  000D1E  6E0F               	movwf	??_LCDout& (0+255),c
  1828  000D20  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1829  000D22  0E07               	movlw	7
  1830  000D24                     u1235:
  1831  000D24  90D8               	bcf	status,0,c
  1832  000D26  360F               	rlcf	??_LCDout,f,c
  1833  000D28  3610               	rlcf	??_LCDout+1,f,c
  1834  000D2A  2EE8               	decfsz	wreg,f,c
  1835  000D2C  D7FB               	goto	u1235
  1836  000D2E  0E07               	movlw	7
  1837  000D30  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1838  000D32                     u1245:
  1839  000D32  3410               	rlcf	??_LCDout+1,w,c
  1840  000D34  3210               	rrcf	??_LCDout+1,f,c
  1841  000D36  320F               	rrcf	??_LCDout,f,c
  1842  000D38  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1843  000D3A  D7FB               	goto	u1245
  1844  000D3C  460F               	rlncf	??_LCDout,f,c
  1845  000D3E  508B               	movf	3979,w,c	;volatile
  1846  000D40  180F               	xorwf	??_LCDout,w,c
  1847  000D42  0BFD               	andlw	-3
  1848  000D44  180F               	xorwf	??_LCDout,w,c
  1849  000D46  6E8B               	movwf	3979,c	;volatile
  1850                           
  1851                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1852  000D48  5012               	movf	LCDout@number,w,c
  1853  000D4A  6E0F               	movwf	??_LCDout& (0+255),c
  1854  000D4C  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1855  000D4E  0E06               	movlw	6
  1856  000D50                     u1255:
  1857  000D50  90D8               	bcf	status,0,c
  1858  000D52  360F               	rlcf	??_LCDout,f,c
  1859  000D54  3610               	rlcf	??_LCDout+1,f,c
  1860  000D56  2EE8               	decfsz	wreg,f,c
  1861  000D58  D7FB               	goto	u1255
  1862  000D5A  0E07               	movlw	7
  1863  000D5C  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1864  000D5E                     u1265:
  1865  000D5E  3410               	rlcf	??_LCDout+1,w,c
  1866  000D60  3210               	rrcf	??_LCDout+1,f,c
  1867  000D62  320F               	rrcf	??_LCDout,f,c
  1868  000D64  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1869  000D66  D7FB               	goto	u1265
  1870  000D68  460F               	rlncf	??_LCDout,f,c
  1871  000D6A  460F               	rlncf	??_LCDout,f,c
  1872  000D6C  508B               	movf	3979,w,c	;volatile
  1873  000D6E  180F               	xorwf	??_LCDout,w,c
  1874  000D70  0BFB               	andlw	-5
  1875  000D72  180F               	xorwf	??_LCDout,w,c
  1876  000D74  6E8B               	movwf	3979,c	;volatile
  1877                           
  1878                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1879  000D76  5012               	movf	LCDout@number,w,c
  1880  000D78  6E0F               	movwf	??_LCDout& (0+255),c
  1881  000D7A  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1882  000D7C  0E05               	movlw	5
  1883  000D7E                     u1275:
  1884  000D7E  90D8               	bcf	status,0,c
  1885  000D80  360F               	rlcf	??_LCDout,f,c
  1886  000D82  3610               	rlcf	??_LCDout+1,f,c
  1887  000D84  2EE8               	decfsz	wreg,f,c
  1888  000D86  D7FB               	goto	u1275
  1889  000D88  0E07               	movlw	7
  1890  000D8A  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1891  000D8C                     u1285:
  1892  000D8C  3410               	rlcf	??_LCDout+1,w,c
  1893  000D8E  3210               	rrcf	??_LCDout+1,f,c
  1894  000D90  320F               	rrcf	??_LCDout,f,c
  1895  000D92  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1896  000D94  D7FB               	goto	u1285
  1897  000D96  508C               	movf	3980,w,c	;volatile
  1898  000D98  180F               	xorwf	??_LCDout,w,c
  1899  000D9A  0BFE               	andlw	-2
  1900  000D9C  180F               	xorwf	??_LCDout,w,c
  1901  000D9E  6E8C               	movwf	3980,c	;volatile
  1902                           
  1903                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1904  000DA0  5012               	movf	LCDout@number,w,c
  1905  000DA2  6E0F               	movwf	??_LCDout& (0+255),c
  1906  000DA4  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1907  000DA6  3A0F               	swapf	??_LCDout,f,c
  1908  000DA8  3A10               	swapf	??_LCDout+1,f,c
  1909  000DAA  0EF0               	movlw	240
  1910  000DAC  1610               	andwf	??_LCDout+1,f,c
  1911  000DAE  500F               	movf	??_LCDout,w,c
  1912  000DB0  0B0F               	andlw	15
  1913  000DB2  1210               	iorwf	??_LCDout+1,f,c
  1914  000DB4  0EF0               	movlw	240
  1915  000DB6  160F               	andwf	??_LCDout,f,c
  1916  000DB8  0E07               	movlw	7
  1917  000DBA  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1918  000DBC                     u1295:
  1919  000DBC  3410               	rlcf	??_LCDout+1,w,c
  1920  000DBE  3210               	rrcf	??_LCDout+1,f,c
  1921  000DC0  320F               	rrcf	??_LCDout,f,c
  1922  000DC2  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1923  000DC4  D7FB               	goto	u1295
  1924  000DC6  460F               	rlncf	??_LCDout,f,c
  1925  000DC8  508C               	movf	3980,w,c	;volatile
  1926  000DCA  180F               	xorwf	??_LCDout,w,c
  1927  000DCC  0BFD               	andlw	-3
  1928  000DCE  180F               	xorwf	??_LCDout,w,c
  1929  000DD0  6E8C               	movwf	3980,c	;volatile
  1930                           
  1931                           ;LCD.c: 21: E_TOG();
  1932  000DD2  EC03  F00A         	call	_E_TOG	;wreg free
  1933                           
  1934                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1935  000DD6  0E03               	movlw	3
  1936  000DD8                     u2147:
  1937  000DD8  2EE8               	decfsz	wreg,f,c
  1938  000DDA  D7FE               	goto	u2147
  1939  000DDC  F000               	nop	
  1940  000DDE  0012               	return		;funcret
  1941  000DE0                     __end_of_LCDout:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           intcon	equ	0xFF2
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           indf1	equ	0xFE7
  1950                           fsr1h	equ	0xFE2
  1951                           fsr1l	equ	0xFE1
  1952                           indf2	equ	0xFDF
  1953                           postinc2	equ	0xFDE
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _E_TOG *****************
  1959 ;; Defined at:
  1960 ;;		line 5 in file "LCD.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;		None               void
  1967 ;; Registers used:
  1968 ;;		wreg
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1974 ;;      Params:         0       0       0       0
  1975 ;;      Locals:         0       0       0       0
  1976 ;;      Temps:          0       0       0       0
  1977 ;;      Totals:         0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    1
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_LCDout
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text6
  1989  001406                     __ptext6:
  1990                           	opt stack 0
  1991  001406                     _E_TOG:
  1992                           	opt stack 26
  1993                           
  1994                           ;LCD.c: 8: LATCbits.LATC0=1;
  1995                           
  1996                           ;incstack = 0
  1997  001406  808B               	bsf	3979,0,c	;volatile
  1998                           
  1999                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2000  001408  0E03               	movlw	3
  2001  00140A                     u2157:
  2002  00140A  2EE8               	decfsz	wreg,f,c
  2003  00140C  D7FE               	goto	u2157
  2004  00140E  F000               	nop	
  2005                           
  2006                           ;LCD.c: 10: LATCbits.LATC0=0;
  2007  001410  908B               	bcf	3979,0,c	;volatile
  2008  001412  0012               	return		;funcret
  2009  001414                     __end_of_E_TOG:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           indf1	equ	0xFE7
  2018                           fsr1h	equ	0xFE2
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           postinc2	equ	0xFDE
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _initIR *****************
  2027 ;; Defined at:
  2028 ;;		line 30 in file "IR_Reading.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, status,2
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2042 ;;      Params:         0       0       0       0
  2043 ;;      Locals:         0       0       0       0
  2044 ;;      Temps:          0       0       0       0
  2045 ;;      Totals:         0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text7
  2057  0013A8                     __ptext7:
  2058                           	opt stack 0
  2059  0013A8                     _initIR:
  2060                           	opt stack 29
  2061                           
  2062                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2063                           
  2064                           ;incstack = 0
  2065  0013A8  9489               	bcf	3977,2,c	;volatile
  2066                           
  2067                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2068  0013AA  9689               	bcf	3977,3,c	;volatile
  2069                           
  2070                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2071  0013AC  8492               	bsf	3986,2,c	;volatile
  2072                           
  2073                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2074  0013AE  8692               	bsf	3986,3,c	;volatile
  2075                           
  2076                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2077  0013B0  94B8               	bcf	4024,2,c	;volatile
  2078                           
  2079                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2080  0013B2  96B8               	bcf	4024,3,c	;volatile
  2081                           
  2082                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2083  0013B4  9CB8               	bcf	4024,6,c	;volatile
  2084                           
  2085                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2086  0013B6  9EB8               	bcf	4024,7,c	;volatile
  2087                           
  2088                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2089  0013B8  0E06               	movlw	6
  2090  0013BA  6E63               	movwf	3939,c	;volatile
  2091                           
  2092                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2093  0013BC  0E06               	movlw	6
  2094  0013BE  6E62               	movwf	3938,c	;volatile
  2095                           
  2096                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2097  0013C0  9096               	bcf	3990,0,c	;volatile
  2098                           
  2099                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2100  0013C2  9296               	bcf	3990,1,c	;volatile
  2101                           
  2102                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2103  0013C4  0E59               	movlw	89
  2104  0013C6  6EB7               	movwf	4023,c	;volatile
  2105  0013C8  0012               	return		;funcret
  2106  0013CA                     __end_of_initIR:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           prodh	equ	0xFF4
  2110                           prodl	equ	0xFF3
  2111                           intcon	equ	0xFF2
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           indf1	equ	0xFE7
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           indf2	equ	0xFDF
  2118                           postinc2	equ	0xFDE
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _fullSpeedBack *****************
  2124 ;; Defined at:
  2125 ;;		line 125 in file "dc_motor.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2128 ;;		 -> main@mL(9), 
  2129 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2130 ;;		 -> main@mR(9), 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2142 ;;      Params:         4       0       0       0
  2143 ;;      Locals:         0       0       0       0
  2144 ;;      Temps:          0       0       0       0
  2145 ;;      Totals:         4       0       0       0
  2146 ;;Total ram usage:        4 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    4
  2149 ;; This function calls:
  2150 ;;		_fullSpeedAhead
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text8
  2157  0012C4                     __ptext8:
  2158                           	opt stack 0
  2159  0012C4                     _fullSpeedBack:
  2160                           	opt stack 26
  2161                           
  2162                           ;dc_motor.c: 128: mL->direction=0;
  2163                           
  2164                           ;incstack = 0
  2165  0012C4  EE20 F001          	lfsr	2,1
  2166  0012C8  502B               	movf	fullSpeedBack@mL,w,c
  2167  0012CA  26D9               	addwf	fsr2l,f,c
  2168  0012CC  502C               	movf	fullSpeedBack@mL+1,w,c
  2169  0012CE  22DA               	addwfc	fsr2h,f,c
  2170  0012D0  0E00               	movlw	0
  2171  0012D2  6EDF               	movwf	indf2,c
  2172                           
  2173                           ;dc_motor.c: 129: mR->direction=0;
  2174  0012D4  EE20 F001          	lfsr	2,1
  2175  0012D8  502D               	movf	fullSpeedBack@mR,w,c
  2176  0012DA  26D9               	addwf	fsr2l,f,c
  2177  0012DC  502E               	movf	fullSpeedBack@mR+1,w,c
  2178  0012DE  22DA               	addwfc	fsr2h,f,c
  2179  0012E0  0E00               	movlw	0
  2180  0012E2  6EDF               	movwf	indf2,c
  2181                           
  2182                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2183  0012E4  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2184  0012E8  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2185  0012EC  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2186  0012F0  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2187  0012F4  ECA8  F008         	call	_fullSpeedAhead	;wreg free
  2188  0012F8  0012               	return		;funcret
  2189  0012FA                     __end_of_fullSpeedBack:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           indf1	equ	0xFE7
  2198                           fsr1h	equ	0xFE2
  2199                           fsr1l	equ	0xFE1
  2200                           indf2	equ	0xFDF
  2201                           postinc2	equ	0xFDE
  2202                           fsr2h	equ	0xFDA
  2203                           fsr2l	equ	0xFD9
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _enableSensor *****************
  2207 ;; Defined at:
  2208 ;;		line 106 in file "IR_Reading.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  sensor          1    wreg     unsigned char 
  2211 ;;  status          1   14[COMRAM] unsigned char 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  sensor          1   15[COMRAM] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;		None               void
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2223 ;;      Params:         1       0       0       0
  2224 ;;      Locals:         1       0       0       0
  2225 ;;      Temps:          0       0       0       0
  2226 ;;      Totals:         2       0       0       0
  2227 ;;Total ram usage:        2 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    1
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text9
  2238  00135C                     __ptext9:
  2239                           	opt stack 0
  2240  00135C                     _enableSensor:
  2241                           	opt stack 29
  2242                           
  2243                           ;incstack = 0
  2244                           ;enableSensor@sensor stored from wreg
  2245  00135C  6E10               	movwf	enableSensor@sensor,c
  2246                           
  2247                           ;IR_Reading.c: 108: if (sensor==0){
  2248  00135E  5010               	movf	enableSensor@sensor,w,c
  2249  001360  A4D8               	btfss	status,2,c
  2250  001362  D006               	goto	l2033
  2251                           
  2252                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2253  001364  B00F               	btfsc	enableSensor@status,0,c
  2254  001366  D002               	bra	u1405
  2255  001368  908D               	bcf	3981,0,c	;volatile
  2256  00136A  D001               	bra	u1406
  2257  00136C                     u1405:
  2258  00136C  808D               	bsf	3981,0,c	;volatile
  2259  00136E                     u1406:
  2260                           
  2261                           ;IR_Reading.c: 110: } else if (sensor==1){
  2262  00136E  0012               	return	
  2263  001370                     l2033:
  2264  001370  0410               	decf	enableSensor@sensor,w,c
  2265  001372  A4D8               	btfss	status,2,c
  2266  001374  0012               	return	
  2267                           
  2268                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2269  001376  B00F               	btfsc	enableSensor@status,0,c
  2270  001378  D002               	bra	u1425
  2271  00137A  928D               	bcf	3981,1,c	;volatile
  2272  00137C  D001               	bra	u1426
  2273  00137E                     u1425:
  2274  00137E  828D               	bsf	3981,1,c	;volatile
  2275  001380                     u1426:
  2276  001380  0012               	return	
  2277  001382                     __end_of_enableSensor:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           prodh	equ	0xFF4
  2281                           prodl	equ	0xFF3
  2282                           intcon	equ	0xFF2
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           indf1	equ	0xFE7
  2286                           fsr1h	equ	0xFE2
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           fsr2h	equ	0xFDA
  2291                           fsr2l	equ	0xFD9
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _delay_s *****************
  2295 ;; Defined at:
  2296 ;;		line 10 in file "Movement.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  seconds         1    wreg     unsigned char 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  seconds         1   15[COMRAM] unsigned char 
  2301 ;;  i               2   16[COMRAM] unsigned int 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;		None               void
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2311 ;;      Params:         0       0       0       0
  2312 ;;      Locals:         3       0       0       0
  2313 ;;      Temps:          1       0       0       0
  2314 ;;      Totals:         4       0       0       0
  2315 ;;Total ram usage:        4 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    1
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text10
  2326  001254                     __ptext10:
  2327                           	opt stack 0
  2328  001254                     _delay_s:
  2329                           	opt stack 29
  2330                           
  2331                           ;incstack = 0
  2332                           ;delay_s@seconds stored from wreg
  2333  001254  6E10               	movwf	delay_s@seconds,c
  2334                           
  2335                           ;Movement.c: 11: unsigned int i=0;
  2336  001256  0E00               	movlw	0
  2337  001258  6E12               	movwf	delay_s@i+1,c
  2338  00125A  0E00               	movlw	0
  2339  00125C  6E11               	movwf	delay_s@i,c
  2340                           
  2341                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2342  00125E  0E00               	movlw	0
  2343  001260  6E12               	movwf	delay_s@i+1,c
  2344  001262  0E01               	movlw	1
  2345  001264  6E11               	movwf	delay_s@i,c
  2346  001266  D009               	goto	l2023
  2347  001268                     l2019:
  2348                           
  2349                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2350  001268  0E82               	movlw	130
  2351  00126A  6E0F               	movwf	??_delay_s& (0+255),c
  2352  00126C  0EDE               	movlw	222
  2353  00126E                     u2167:
  2354  00126E  2EE8               	decfsz	wreg,f,c
  2355  001270  D7FE               	goto	u2167
  2356  001272  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2357  001274  D7FC               	goto	u2167
  2358  001276  4A11               	infsnz	delay_s@i,f,c
  2359  001278  2A12               	incf	delay_s@i+1,f,c
  2360  00127A                     l2023:
  2361  00127A  5010               	movf	delay_s@seconds,w,c
  2362  00127C  0D14               	mullw	20
  2363  00127E  5011               	movf	delay_s@i,w,c
  2364  001280  5CF3               	subwf	prodl,w,c
  2365  001282  5012               	movf	delay_s@i+1,w,c
  2366  001284  58F4               	subwfb	prodh,w,c
  2367  001286  A0D8               	btfss	status,0,c
  2368  001288  0012               	return	
  2369  00128A  D7EE               	goto	l2019
  2370  00128C                     __end_of_delay_s:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           indf1	equ	0xFE7
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           postinc2	equ	0xFDE
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _VerifySignal *****************
  2388 ;; Defined at:
  2389 ;;		line 56 in file "RFID_Reader.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  2392 ;;		 -> ReceivedString(16), 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  hexByte         2   23[COMRAM] unsigned int 
  2395 ;;  i               1   25[COMRAM] unsigned char 
  2396 ;;  checksum        1   22[COMRAM] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2406 ;;      Params:         2       0       0       0
  2407 ;;      Locals:         4       0       0       0
  2408 ;;      Temps:          6       0       0       0
  2409 ;;      Totals:        12       0       0       0
  2410 ;;Total ram usage:       12 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    1
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_main
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text11
  2421  000E9C                     __ptext11:
  2422                           	opt stack 0
  2423  000E9C                     _VerifySignal:
  2424                           	opt stack 29
  2425                           
  2426                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  2427                           
  2428                           ;incstack = 0
  2429  000E9C  0E00               	movlw	0
  2430  000E9E  6E17               	movwf	VerifySignal@checksum,c
  2431                           
  2432                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  2433  000EA0  0E00               	movlw	0
  2434  000EA2  6E19               	movwf	VerifySignal@hexByte+1,c
  2435  000EA4  0E00               	movlw	0
  2436  000EA6  6E18               	movwf	VerifySignal@hexByte,c
  2437                           
  2438                           ;RFID_Reader.c: 59: unsigned char i=0;
  2439  000EA8  0E00               	movlw	0
  2440  000EAA  6E1A               	movwf	VerifySignal@i,c
  2441                           
  2442                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  2443  000EAC  EE20 F004          	lfsr	2,4
  2444  000EB0  500F               	movf	VerifySignal@Signal,w,c
  2445  000EB2  26D9               	addwf	fsr2l,f,c
  2446  000EB4  5010               	movf	VerifySignal@Signal+1,w,c
  2447  000EB6  22DA               	addwfc	fsr2h,f,c
  2448  000EB8  50DF               	movf	indf2,w,c
  2449  000EBA  6E11               	movwf	??_VerifySignal& (0+255),c
  2450  000EBC  EE20 F003          	lfsr	2,3
  2451  000EC0  500F               	movf	VerifySignal@Signal,w,c
  2452  000EC2  26D9               	addwf	fsr2l,f,c
  2453  000EC4  5010               	movf	VerifySignal@Signal+1,w,c
  2454  000EC6  22DA               	addwfc	fsr2h,f,c
  2455  000EC8  50DF               	movf	indf2,w,c
  2456  000ECA  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  2457  000ECC  5012               	movf	??_VerifySignal+1,w,c
  2458  000ECE  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2459  000ED0  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  2460  000ED2  5011               	movf	??_VerifySignal,w,c
  2461  000ED4  2413               	addwf	??_VerifySignal+2,w,c
  2462  000ED6  6E18               	movwf	VerifySignal@hexByte,c
  2463  000ED8  0E00               	movlw	0
  2464  000EDA  2014               	addwfc	??_VerifySignal+3,w,c
  2465  000EDC  6E19               	movwf	VerifySignal@hexByte+1,c
  2466                           
  2467                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2468  000EDE  EE20 F002          	lfsr	2,2
  2469  000EE2  500F               	movf	VerifySignal@Signal,w,c
  2470  000EE4  26D9               	addwf	fsr2l,f,c
  2471  000EE6  5010               	movf	VerifySignal@Signal+1,w,c
  2472  000EE8  22DA               	addwfc	fsr2h,f,c
  2473  000EEA  50DF               	movf	indf2,w,c
  2474  000EEC  1818               	xorwf	VerifySignal@hexByte,w,c
  2475  000EEE  6E17               	movwf	VerifySignal@checksum,c
  2476                           
  2477                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  2478  000EF0  0E05               	movlw	5
  2479  000EF2  6E1A               	movwf	VerifySignal@i,c
  2480  000EF4                     l2311:
  2481  000EF4  0E09               	movlw	9
  2482  000EF6  641A               	cpfsgt	VerifySignal@i,c
  2483  000EF8  D001               	goto	l2315
  2484  000EFA  D028               	goto	l2323
  2485  000EFC                     l2315:
  2486                           
  2487                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  2488  000EFC  501A               	movf	VerifySignal@i,w,c
  2489  000EFE  6E11               	movwf	??_VerifySignal& (0+255),c
  2490  000F00  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  2491  000F02  0E01               	movlw	1
  2492  000F04  2611               	addwf	??_VerifySignal,f,c
  2493  000F06  0E00               	movlw	0
  2494  000F08  2212               	addwfc	??_VerifySignal+1,f,c
  2495  000F0A  5011               	movf	??_VerifySignal,w,c
  2496  000F0C  240F               	addwf	VerifySignal@Signal,w,c
  2497  000F0E  6ED9               	movwf	fsr2l,c
  2498  000F10  5012               	movf	??_VerifySignal+1,w,c
  2499  000F12  2010               	addwfc	VerifySignal@Signal+1,w,c
  2500  000F14  6EDA               	movwf	fsr2h,c
  2501  000F16  50DF               	movf	indf2,w,c
  2502  000F18  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  2503  000F1A  501A               	movf	VerifySignal@i,w,c
  2504  000F1C  0D01               	mullw	1
  2505  000F1E  50F3               	movf	prodl,w,c
  2506  000F20  240F               	addwf	VerifySignal@Signal,w,c
  2507  000F22  6ED9               	movwf	fsr2l,c
  2508  000F24  50F4               	movf	prodh,w,c
  2509  000F26  2010               	addwfc	VerifySignal@Signal+1,w,c
  2510  000F28  6EDA               	movwf	fsr2h,c
  2511  000F2A  50DF               	movf	indf2,w,c
  2512  000F2C  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2513  000F2E  5014               	movf	??_VerifySignal+3,w,c
  2514  000F30  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  2515  000F32  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  2516  000F34  5013               	movf	??_VerifySignal+2,w,c
  2517  000F36  2415               	addwf	??_VerifySignal+4,w,c
  2518  000F38  6E18               	movwf	VerifySignal@hexByte,c
  2519  000F3A  0E00               	movlw	0
  2520  000F3C  2016               	addwfc	??_VerifySignal+5,w,c
  2521  000F3E  6E19               	movwf	VerifySignal@hexByte+1,c
  2522                           
  2523                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  2524  000F40  5017               	movf	VerifySignal@checksum,w,c
  2525  000F42  1818               	xorwf	VerifySignal@hexByte,w,c
  2526  000F44  6E17               	movwf	VerifySignal@checksum,c
  2527  000F46  0E02               	movlw	2
  2528  000F48  261A               	addwf	VerifySignal@i,f,c
  2529  000F4A  D7D4               	goto	l2311
  2530  000F4C                     l2323:
  2531                           
  2532                           ;RFID_Reader.c: 69: }
  2533                           ;RFID_Reader.c: 72: return 1;
  2534  000F4C  0E01               	movlw	1
  2535  000F4E  0012               	return	
  2536  000F50                     __end_of_VerifySignal:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           postinc0	equ	0xFEE
  2543                           wreg	equ	0xFE8
  2544                           indf1	equ	0xFE7
  2545                           fsr1h	equ	0xFE2
  2546                           fsr1l	equ	0xFE1
  2547                           indf2	equ	0xFDF
  2548                           postinc2	equ	0xFDE
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _ScanWithRange *****************
  2554 ;; Defined at:
  2555 ;;		line 93 in file "Movement.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2558 ;;		 -> main@mL(9), 
  2559 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2560 ;;		 -> main@mR(9), 
  2561 ;;  tenth_second    1   50[COMRAM] unsigned char 
  2562 ;;  MoveTime        2   51[COMRAM] PTR unsigned char 
  2563 ;;		 -> main@MoveTime(100), 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  SensorResult    4   72[COMRAM] unsigned int [2]
  2566 ;;  SensorResult    4   68[COMRAM] unsigned int [2]
  2567 ;;  SensorResult    4   64[COMRAM] unsigned int [2]
  2568 ;;  DirectionFou    2   62[COMRAM] const unsigned int 
  2569 ;;  DirectionFou    2   60[COMRAM] const unsigned int 
  2570 ;;  ClearSignalT    2   58[COMRAM] const unsigned int 
  2571 ;;  ResultFalseR    1   57[COMRAM] unsigned char 
  2572 ;;  ResultFalseC    1   56[COMRAM] unsigned char 
  2573 ;;  ResultFalseL    1   55[COMRAM] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      unsigned char 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2583 ;;      Params:         7       0       0       0
  2584 ;;      Locals:        21       0       0       0
  2585 ;;      Temps:          2       0       0       0
  2586 ;;      Totals:        30       0       0       0
  2587 ;;Total ram usage:       30 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    5
  2590 ;; This function calls:
  2591 ;;		___awdiv
  2592 ;;		_delay_tenth_s
  2593 ;;		_grabLeftIR
  2594 ;;		_grabRightIR
  2595 ;;		_stop
  2596 ;;		_turnLeft
  2597 ;;		_turnRight
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text12
  2604  0000B2                     __ptext12:
  2605                           	opt stack 0
  2606  0000B2                     _ScanWithRange:
  2607                           	opt stack 25
  2608                           
  2609                           ;Movement.c: 96: unsigned int SensorResultL[2];
  2610                           ;Movement.c: 97: unsigned int SensorResultC[2];
  2611                           ;Movement.c: 98: unsigned int SensorResultR[2];
  2612                           ;Movement.c: 99: unsigned char ResultFalseL=0;
  2613                           
  2614                           ;incstack = 0
  2615  0000B2  0E00               	movlw	0
  2616  0000B4  6E38               	movwf	ScanWithRange@ResultFalseL,c
  2617                           
  2618                           ;Movement.c: 100: unsigned char ResultFalseC=0;
  2619  0000B6  0E00               	movlw	0
  2620  0000B8  6E39               	movwf	ScanWithRange@ResultFalseC,c
  2621                           
  2622                           ;Movement.c: 101: unsigned char ResultFalseR=0;
  2623  0000BA  0E00               	movlw	0
  2624  0000BC  6E3A               	movwf	ScanWithRange@ResultFalseR,c
  2625                           
  2626                           ;Movement.c: 104: const unsigned int ClearSignalTolerance=200;
  2627  0000BE  0E00               	movlw	0
  2628  0000C0  6E3C               	movwf	ScanWithRange@ClearSignalTolerance+1,c
  2629  0000C2  0EC8               	movlw	200
  2630  0000C4  6E3B               	movwf	ScanWithRange@ClearSignalTolerance,c
  2631                           
  2632                           ;Movement.c: 105: const unsigned int DirectionFoundLimit=1500;
  2633  0000C6  0E05               	movlw	5
  2634  0000C8  6E3E               	movwf	ScanWithRange@DirectionFoundLimit+1,c
  2635  0000CA  0EDC               	movlw	220
  2636  0000CC  6E3D               	movwf	ScanWithRange@DirectionFoundLimit,c
  2637                           
  2638                           ;Movement.c: 106: const unsigned int DirectionFoundTolerance=500;
  2639  0000CE  0E01               	movlw	1
  2640  0000D0  6E40               	movwf	ScanWithRange@DirectionFoundTolerance+1,c
  2641  0000D2  0EF4               	movlw	244
  2642  0000D4  6E3F               	movwf	ScanWithRange@DirectionFoundTolerance,c
  2643                           
  2644                           ;Movement.c: 113: stop(mL,mR);
  2645  0000D6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2646  0000DA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2647  0000DE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2648  0000E2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2649  0000E6  ECA8  F007         	call	_stop	;wreg free
  2650                           
  2651                           ;Movement.c: 114: SensorResultC[0]=grabLeftIR();
  2652  0000EA  EC6D  F008         	call	_grabLeftIR	;wreg free
  2653  0000EE  C00F  F045         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2654  0000F2  C010  F046         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2655                           
  2656                           ;Movement.c: 115: SensorResultC[1]=grabRightIR();
  2657  0000F6  EC32  F008         	call	_grabRightIR	;wreg free
  2658  0000FA  C00F  F047         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2659  0000FE  C010  F048         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2660                           
  2661                           ;Movement.c: 118: turnLeft(mL,mR);
  2662  000102  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2663  000106  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2664  00010A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2665  00010E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2666  000112  EC05  F009         	call	_turnLeft	;wreg free
  2667                           
  2668                           ;Movement.c: 119: delay_tenth_s(tenth_seconds);
  2669  000116  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2670  000118  EC46  F009         	call	_delay_tenth_s
  2671                           
  2672                           ;Movement.c: 120: MoveTime += tenth_seconds;
  2673  00011C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2674  00011E  0D01               	mullw	1
  2675  000120  50F3               	movf	prodl,w,c
  2676  000122  2634               	addwf	ScanWithRange@MoveTime,f,c
  2677  000124  50F4               	movf	prodh,w,c
  2678  000126  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2679                           
  2680                           ;Movement.c: 122: stop(mL,mR);
  2681  000128  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2682  00012C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2683  000130  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2684  000134  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2685  000138  ECA8  F007         	call	_stop	;wreg free
  2686                           
  2687                           ;Movement.c: 123: SensorResultL[0]=grabLeftIR();
  2688  00013C  EC6D  F008         	call	_grabLeftIR	;wreg free
  2689  000140  C00F  F041         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2690  000144  C010  F042         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2691                           
  2692                           ;Movement.c: 124: SensorResultL[1]=grabRightIR();
  2693  000148  EC32  F008         	call	_grabRightIR	;wreg free
  2694  00014C  C00F  F043         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2695  000150  C010  F044         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2696                           
  2697                           ;Movement.c: 127: turnRight(mL,mR);
  2698  000154  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2699  000158  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2700  00015C  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2701  000160  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2702  000164  ECE0  F008         	call	_turnRight	;wreg free
  2703                           
  2704                           ;Movement.c: 128: delay_tenth_s(2*tenth_seconds);
  2705  000168  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2706  00016A  0D02               	mullw	2
  2707  00016C  50F3               	movf	prodl,w,c
  2708  00016E  EC46  F009         	call	_delay_tenth_s
  2709                           
  2710                           ;Movement.c: 129: MoveTime -= 2*tenth_seconds;
  2711  000172  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2712  000174  0D02               	mullw	2
  2713  000176  50F3               	movf	prodl,w,c
  2714  000178  5E34               	subwf	ScanWithRange@MoveTime,f,c
  2715  00017A  50F4               	movf	prodh,w,c
  2716  00017C  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  2717                           
  2718                           ;Movement.c: 131: stop(mL,mR);
  2719  00017E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2720  000182  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2721  000186  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2722  00018A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2723  00018E  ECA8  F007         	call	_stop	;wreg free
  2724                           
  2725                           ;Movement.c: 132: SensorResultR[0]=grabLeftIR();
  2726  000192  EC6D  F008         	call	_grabLeftIR	;wreg free
  2727  000196  C00F  F049         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2728  00019A  C010  F04A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2729                           
  2730                           ;Movement.c: 133: SensorResultR[1]=grabRightIR();
  2731  00019E  EC32  F008         	call	_grabRightIR	;wreg free
  2732  0001A2  C00F  F04B         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2733  0001A6  C010  F04C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2734                           
  2735                           ;Movement.c: 144: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  2736  0001AA  5041               	movf	ScanWithRange@SensorResultL,w,c
  2737  0001AC  2443               	addwf	ScanWithRange@SensorResultL+2,w,c
  2738  0001AE  6E36               	movwf	??_ScanWithRange& (0+255),c
  2739  0001B0  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2740  0001B2  2044               	addwfc	ScanWithRange@SensorResultL+3,w,c
  2741  0001B4  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2742  0001B6  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2743  0001B8  5C36               	subwf	??_ScanWithRange,w,c
  2744  0001BA  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2745  0001BC  5837               	subwfb	??_ScanWithRange+1,w,c
  2746  0001BE  B0D8               	btfsc	status,0,c
  2747  0001C0  D00A               	goto	l2073
  2748                           
  2749                           ;Movement.c: 145: SensorResultL[0]=0;
  2750  0001C2  0E00               	movlw	0
  2751  0001C4  6E42               	movwf	ScanWithRange@SensorResultL+1,c
  2752  0001C6  0E00               	movlw	0
  2753  0001C8  6E41               	movwf	ScanWithRange@SensorResultL,c
  2754                           
  2755                           ;Movement.c: 146: SensorResultL[1]=0;
  2756  0001CA  0E00               	movlw	0
  2757  0001CC  6E44               	movwf	ScanWithRange@SensorResultL+3,c
  2758  0001CE  0E00               	movlw	0
  2759  0001D0  6E43               	movwf	ScanWithRange@SensorResultL+2,c
  2760                           
  2761                           ;Movement.c: 147: ResultFalseL=1;
  2762  0001D2  0E01               	movlw	1
  2763  0001D4  6E38               	movwf	ScanWithRange@ResultFalseL,c
  2764  0001D6                     l2073:
  2765                           
  2766                           ;Movement.c: 148: }
  2767                           ;Movement.c: 149: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  2768  0001D6  5045               	movf	ScanWithRange@SensorResultC,w,c
  2769  0001D8  2447               	addwf	ScanWithRange@SensorResultC+2,w,c
  2770  0001DA  6E36               	movwf	??_ScanWithRange& (0+255),c
  2771  0001DC  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2772  0001DE  2048               	addwfc	ScanWithRange@SensorResultC+3,w,c
  2773  0001E0  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2774  0001E2  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2775  0001E4  5C36               	subwf	??_ScanWithRange,w,c
  2776  0001E6  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2777  0001E8  5837               	subwfb	??_ScanWithRange+1,w,c
  2778  0001EA  B0D8               	btfsc	status,0,c
  2779  0001EC  D00A               	goto	l2077
  2780                           
  2781                           ;Movement.c: 150: SensorResultC[0]=0;
  2782  0001EE  0E00               	movlw	0
  2783  0001F0  6E46               	movwf	ScanWithRange@SensorResultC+1,c
  2784  0001F2  0E00               	movlw	0
  2785  0001F4  6E45               	movwf	ScanWithRange@SensorResultC,c
  2786                           
  2787                           ;Movement.c: 151: SensorResultC[1]=0;
  2788  0001F6  0E00               	movlw	0
  2789  0001F8  6E48               	movwf	ScanWithRange@SensorResultC+3,c
  2790  0001FA  0E00               	movlw	0
  2791  0001FC  6E47               	movwf	ScanWithRange@SensorResultC+2,c
  2792                           
  2793                           ;Movement.c: 152: ResultFalseC=1;
  2794  0001FE  0E01               	movlw	1
  2795  000200  6E39               	movwf	ScanWithRange@ResultFalseC,c
  2796  000202                     l2077:
  2797                           
  2798                           ;Movement.c: 153: }
  2799                           ;Movement.c: 154: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2800  000202  5049               	movf	ScanWithRange@SensorResultR,w,c
  2801  000204  244B               	addwf	ScanWithRange@SensorResultR+2,w,c
  2802  000206  6E36               	movwf	??_ScanWithRange& (0+255),c
  2803  000208  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  2804  00020A  204C               	addwfc	ScanWithRange@SensorResultR+3,w,c
  2805  00020C  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2806  00020E  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2807  000210  5C36               	subwf	??_ScanWithRange,w,c
  2808  000212  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2809  000214  5837               	subwfb	??_ScanWithRange+1,w,c
  2810  000216  B0D8               	btfsc	status,0,c
  2811  000218  D00A               	goto	l2081
  2812                           
  2813                           ;Movement.c: 155: SensorResultR[0]=0;
  2814  00021A  0E00               	movlw	0
  2815  00021C  6E4A               	movwf	ScanWithRange@SensorResultR+1,c
  2816  00021E  0E00               	movlw	0
  2817  000220  6E49               	movwf	ScanWithRange@SensorResultR,c
  2818                           
  2819                           ;Movement.c: 156: SensorResultR[1]=0;
  2820  000222  0E00               	movlw	0
  2821  000224  6E4C               	movwf	ScanWithRange@SensorResultR+3,c
  2822  000226  0E00               	movlw	0
  2823  000228  6E4B               	movwf	ScanWithRange@SensorResultR+2,c
  2824                           
  2825                           ;Movement.c: 157: ResultFalseR=1;
  2826  00022A  0E01               	movlw	1
  2827  00022C  6E3A               	movwf	ScanWithRange@ResultFalseR,c
  2828  00022E                     l2081:
  2829                           
  2830                           ;Movement.c: 158: }
  2831                           ;Movement.c: 160: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2832  00022E  5039               	movf	ScanWithRange@ResultFalseC,w,c
  2833  000230  C038  F036         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2834  000234  6A37               	clrf	(??_ScanWithRange+1)& (0+255),c
  2835  000236  2636               	addwf	??_ScanWithRange,f,c
  2836  000238  0E00               	movlw	0
  2837  00023A  2237               	addwfc	??_ScanWithRange+1,f,c
  2838  00023C  503A               	movf	ScanWithRange@ResultFalseR,w,c
  2839  00023E  2636               	addwf	??_ScanWithRange,f,c
  2840  000240  0E00               	movlw	0
  2841  000242  2237               	addwfc	??_ScanWithRange+1,f,c
  2842  000244  0E03               	movlw	3
  2843  000246  1836               	xorwf	??_ScanWithRange,w,c
  2844  000248  1037               	iorwf	??_ScanWithRange+1,w,c
  2845  00024A  A4D8               	btfss	status,2,c
  2846  00024C  D021               	goto	l2097
  2847                           
  2848                           ;Movement.c: 162: turnLeft(mL,mR);
  2849  00024E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2850  000252  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2851  000256  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2852  00025A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2853  00025E  EC05  F009         	call	_turnLeft	;wreg free
  2854                           
  2855                           ;Movement.c: 163: delay_tenth_s(5*tenth_seconds);
  2856  000262  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2857  000264  0D05               	mullw	5
  2858  000266  50F3               	movf	prodl,w,c
  2859  000268  EC46  F009         	call	_delay_tenth_s
  2860                           
  2861                           ;Movement.c: 164: MoveTime += 5*tenth_seconds;
  2862  00026C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2863  00026E  0D05               	mullw	5
  2864  000270  50F3               	movf	prodl,w,c
  2865  000272  2634               	addwf	ScanWithRange@MoveTime,f,c
  2866  000274  50F4               	movf	prodh,w,c
  2867  000276  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2868                           
  2869                           ;Movement.c: 165: stop(mL,mR);
  2870  000278  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2871  00027C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2872  000280  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2873  000284  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2874  000288  ECA8  F007         	call	_stop	;wreg free
  2875                           
  2876                           ;Movement.c: 166: return 3;
  2877  00028C  0E03               	movlw	3
  2878  00028E  0012               	return	
  2879  000290                     l2097:
  2880                           
  2881                           ;Movement.c: 169: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  2882                           ;Movement.c: 170: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2883                           ;Movement.c: 171: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2884  000290  5041               	movf	ScanWithRange@SensorResultL,w,c
  2885  000292  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2886  000294  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2887  000296  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2888  000298  B0D8               	btfsc	status,0,c
  2889  00029A  D04D               	goto	l2119
  2890  00029C  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  2891  00029E  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2892  0002A0  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  2893  0002A2  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2894  0002A4  B0D8               	btfsc	status,0,c
  2895  0002A6  D047               	goto	l2119
  2896  0002A8  EE20  F043         	lfsr	2,ScanWithRange@SensorResultL+2
  2897  0002AC  CFDE F036          	movff	postinc2,??_ScanWithRange
  2898  0002B0  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  2899  0002B4  1E36               	comf	??_ScanWithRange,f,c
  2900  0002B6  1E37               	comf	??_ScanWithRange+1,f,c
  2901  0002B8  4A36               	infsnz	??_ScanWithRange,f,c
  2902  0002BA  2A37               	incf	??_ScanWithRange+1,f,c
  2903  0002BC  5041               	movf	ScanWithRange@SensorResultL,w,c
  2904  0002BE  2636               	addwf	??_ScanWithRange,f,c
  2905  0002C0  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2906  0002C2  2237               	addwfc	??_ScanWithRange+1,f,c
  2907  0002C4  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2908  0002C6  5C36               	subwf	??_ScanWithRange,w,c
  2909  0002C8  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2910  0002CA  5837               	subwfb	??_ScanWithRange+1,w,c
  2911  0002CC  A0D8               	btfss	status,0,c
  2912  0002CE  D012               	goto	l2105
  2913  0002D0  C041  F036         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2914  0002D4  C042  F037         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2915  0002D8  1E36               	comf	??_ScanWithRange,f,c
  2916  0002DA  1E37               	comf	??_ScanWithRange+1,f,c
  2917  0002DC  4A36               	infsnz	??_ScanWithRange,f,c
  2918  0002DE  2A37               	incf	??_ScanWithRange+1,f,c
  2919  0002E0  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  2920  0002E2  2636               	addwf	??_ScanWithRange,f,c
  2921  0002E4  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  2922  0002E6  2237               	addwfc	??_ScanWithRange+1,f,c
  2923  0002E8  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2924  0002EA  5C36               	subwf	??_ScanWithRange,w,c
  2925  0002EC  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2926  0002EE  5837               	subwfb	??_ScanWithRange+1,w,c
  2927  0002F0  B0D8               	btfsc	status,0,c
  2928  0002F2  D021               	goto	l2119
  2929  0002F4                     l2105:
  2930                           
  2931                           ;Movement.c: 173: turnLeft(mL,mR);
  2932  0002F4  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2933  0002F8  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2934  0002FC  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2935  000300  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2936  000304  EC05  F009         	call	_turnLeft	;wreg free
  2937                           
  2938                           ;Movement.c: 174: delay_tenth_s(2*(tenth_seconds));
  2939  000308  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2940  00030A  0D02               	mullw	2
  2941  00030C  50F3               	movf	prodl,w,c
  2942  00030E  EC46  F009         	call	_delay_tenth_s
  2943                           
  2944                           ;Movement.c: 175: MoveTime += 2*tenth_seconds;
  2945  000312  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2946  000314  0D02               	mullw	2
  2947  000316  50F3               	movf	prodl,w,c
  2948  000318  2634               	addwf	ScanWithRange@MoveTime,f,c
  2949  00031A  50F4               	movf	prodh,w,c
  2950  00031C  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2951                           
  2952                           ;Movement.c: 176: stop(mL,mR);
  2953  00031E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2954  000322  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2955  000326  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2956  00032A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2957  00032E  ECA8  F007         	call	_stop	;wreg free
  2958  000332                     l2113:
  2959                           
  2960                           ;Movement.c: 177: return 2;
  2961  000332  0E02               	movlw	2
  2962  000334  0012               	return	
  2963  000336                     l2119:
  2964                           
  2965                           ;Movement.c: 179: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  2966                           ;Movement.c: 180: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  2967  000336  5045               	movf	ScanWithRange@SensorResultC,w,c
  2968  000338  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2969  00033A  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2970  00033C  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2971  00033E  B0D8               	btfsc	status,0,c
  2972  000340  D04A               	goto	l2141
  2973  000342  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  2974  000344  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2975  000346  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  2976  000348  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2977  00034A  B0D8               	btfsc	status,0,c
  2978  00034C  D044               	goto	l2141
  2979  00034E  EE20  F047         	lfsr	2,ScanWithRange@SensorResultC+2
  2980  000352  CFDE F036          	movff	postinc2,??_ScanWithRange
  2981  000356  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  2982  00035A  1E36               	comf	??_ScanWithRange,f,c
  2983  00035C  1E37               	comf	??_ScanWithRange+1,f,c
  2984  00035E  4A36               	infsnz	??_ScanWithRange,f,c
  2985  000360  2A37               	incf	??_ScanWithRange+1,f,c
  2986  000362  5045               	movf	ScanWithRange@SensorResultC,w,c
  2987  000364  2636               	addwf	??_ScanWithRange,f,c
  2988  000366  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2989  000368  2237               	addwfc	??_ScanWithRange+1,f,c
  2990  00036A  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2991  00036C  5C36               	subwf	??_ScanWithRange,w,c
  2992  00036E  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2993  000370  5837               	subwfb	??_ScanWithRange+1,w,c
  2994  000372  A0D8               	btfss	status,0,c
  2995  000374  D012               	goto	l2127
  2996  000376  C045  F036         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  2997  00037A  C046  F037         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  2998  00037E  1E36               	comf	??_ScanWithRange,f,c
  2999  000380  1E37               	comf	??_ScanWithRange+1,f,c
  3000  000382  4A36               	infsnz	??_ScanWithRange,f,c
  3001  000384  2A37               	incf	??_ScanWithRange+1,f,c
  3002  000386  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  3003  000388  2636               	addwf	??_ScanWithRange,f,c
  3004  00038A  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  3005  00038C  2237               	addwfc	??_ScanWithRange+1,f,c
  3006  00038E  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3007  000390  5C36               	subwf	??_ScanWithRange,w,c
  3008  000392  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3009  000394  5837               	subwfb	??_ScanWithRange+1,w,c
  3010  000396  B0D8               	btfsc	status,0,c
  3011  000398  D01E               	goto	l2141
  3012  00039A                     l2127:
  3013                           
  3014                           ;Movement.c: 182: turnLeft(mL,mR);
  3015  00039A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3016  00039E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3017  0003A2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3018  0003A6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3019  0003AA  EC05  F009         	call	_turnLeft	;wreg free
  3020                           
  3021                           ;Movement.c: 183: delay_tenth_s(tenth_seconds);
  3022  0003AE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3023  0003B0  EC46  F009         	call	_delay_tenth_s
  3024                           
  3025                           ;Movement.c: 184: MoveTime += tenth_seconds;
  3026  0003B4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3027  0003B6  0D01               	mullw	1
  3028  0003B8  50F3               	movf	prodl,w,c
  3029  0003BA  2634               	addwf	ScanWithRange@MoveTime,f,c
  3030  0003BC  50F4               	movf	prodh,w,c
  3031  0003BE  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3032                           
  3033                           ;Movement.c: 185: stop(mL,mR);
  3034  0003C0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3035  0003C4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3036  0003C8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3037  0003CC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3038  0003D0  ECA8  F007         	call	_stop	;wreg free
  3039  0003D4  D7AE               	goto	l2113
  3040  0003D6                     l2141:
  3041                           
  3042                           ;Movement.c: 188: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3043                           ;Movement.c: 189: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3044  0003D6  5049               	movf	ScanWithRange@SensorResultR,w,c
  3045  0003D8  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  3046  0003DA  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3047  0003DC  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  3048  0003DE  B0D8               	btfsc	status,0,c
  3049  0003E0  D037               	goto	l2157
  3050  0003E2  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3051  0003E4  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  3052  0003E6  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3053  0003E8  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  3054  0003EA  B0D8               	btfsc	status,0,c
  3055  0003EC  D031               	goto	l2157
  3056  0003EE  EE20  F04B         	lfsr	2,ScanWithRange@SensorResultR+2
  3057  0003F2  CFDE F036          	movff	postinc2,??_ScanWithRange
  3058  0003F6  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3059  0003FA  1E36               	comf	??_ScanWithRange,f,c
  3060  0003FC  1E37               	comf	??_ScanWithRange+1,f,c
  3061  0003FE  4A36               	infsnz	??_ScanWithRange,f,c
  3062  000400  2A37               	incf	??_ScanWithRange+1,f,c
  3063  000402  5049               	movf	ScanWithRange@SensorResultR,w,c
  3064  000404  2636               	addwf	??_ScanWithRange,f,c
  3065  000406  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3066  000408  2237               	addwfc	??_ScanWithRange+1,f,c
  3067  00040A  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3068  00040C  5C36               	subwf	??_ScanWithRange,w,c
  3069  00040E  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3070  000410  5837               	subwfb	??_ScanWithRange+1,w,c
  3071  000412  A0D8               	btfss	status,0,c
  3072  000414  D012               	goto	l2149
  3073  000416  C049  F036         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3074  00041A  C04A  F037         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3075  00041E  1E36               	comf	??_ScanWithRange,f,c
  3076  000420  1E37               	comf	??_ScanWithRange+1,f,c
  3077  000422  4A36               	infsnz	??_ScanWithRange,f,c
  3078  000424  2A37               	incf	??_ScanWithRange+1,f,c
  3079  000426  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3080  000428  2636               	addwf	??_ScanWithRange,f,c
  3081  00042A  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3082  00042C  2237               	addwfc	??_ScanWithRange+1,f,c
  3083  00042E  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3084  000430  5C36               	subwf	??_ScanWithRange,w,c
  3085  000432  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3086  000434  5837               	subwfb	??_ScanWithRange+1,w,c
  3087  000436  B0D8               	btfsc	status,0,c
  3088  000438  D00B               	goto	l2157
  3089  00043A                     l2149:
  3090                           
  3091                           ;Movement.c: 191: stop(mL,mR);
  3092  00043A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3093  00043E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3094  000442  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3095  000446  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3096  00044A  ECA8  F007         	call	_stop	;wreg free
  3097  00044E  D771               	goto	l2113
  3098  000450                     l2157:
  3099  000450  5041               	movf	ScanWithRange@SensorResultL,w,c
  3100  000452  5C43               	subwf	ScanWithRange@SensorResultL+2,w,c
  3101  000454  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  3102  000456  5844               	subwfb	ScanWithRange@SensorResultL+3,w,c
  3103  000458  B0D8               	btfsc	status,0,c
  3104  00045A  D021               	goto	l2173
  3105                           
  3106                           ;Movement.c: 197: turnLeft(mL,mR);
  3107  00045C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3108  000460  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3109  000464  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3110  000468  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3111  00046C  EC05  F009         	call	_turnLeft	;wreg free
  3112                           
  3113                           ;Movement.c: 198: delay_tenth_s(3*tenth_seconds);
  3114  000470  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3115  000472  0D03               	mullw	3
  3116  000474  50F3               	movf	prodl,w,c
  3117  000476  EC46  F009         	call	_delay_tenth_s
  3118                           
  3119                           ;Movement.c: 199: MoveTime += 3*tenth_seconds;
  3120  00047A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3121  00047C  0D03               	mullw	3
  3122  00047E  50F3               	movf	prodl,w,c
  3123  000480  2634               	addwf	ScanWithRange@MoveTime,f,c
  3124  000482  50F4               	movf	prodh,w,c
  3125  000484  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3126                           
  3127                           ;Movement.c: 200: stop(mL,mR);
  3128  000486  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3129  00048A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3130  00048E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3131  000492  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3132  000496  ECA8  F007         	call	_stop	;wreg free
  3133  00049A                     l2167:
  3134                           
  3135                           ;Movement.c: 201: return 0;
  3136  00049A  0E00               	movlw	0
  3137  00049C  0012               	return	
  3138  00049E                     l2173:
  3139  00049E  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3140  0004A0  5C49               	subwf	ScanWithRange@SensorResultR,w,c
  3141  0004A2  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3142  0004A4  584A               	subwfb	ScanWithRange@SensorResultR+1,w,c
  3143  0004A6  B0D8               	btfsc	status,0,c
  3144  0004A8  D01E               	goto	l2189
  3145                           
  3146                           ;Movement.c: 204: turnRight(mL,mR);
  3147  0004AA  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  3148  0004AE  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3149  0004B2  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  3150  0004B6  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3151  0004BA  ECE0  F008         	call	_turnRight	;wreg free
  3152                           
  3153                           ;Movement.c: 205: delay_tenth_s(tenth_seconds);
  3154  0004BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3155  0004C0  EC46  F009         	call	_delay_tenth_s
  3156                           
  3157                           ;Movement.c: 206: MoveTime -= tenth_seconds;
  3158  0004C4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3159  0004C6  0D01               	mullw	1
  3160  0004C8  50F3               	movf	prodl,w,c
  3161  0004CA  5E34               	subwf	ScanWithRange@MoveTime,f,c
  3162  0004CC  50F4               	movf	prodh,w,c
  3163  0004CE  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  3164                           
  3165                           ;Movement.c: 207: stop(mL,mR);
  3166  0004D0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3167  0004D4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3168  0004D8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3169  0004DC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3170  0004E0  ECA8  F007         	call	_stop	;wreg free
  3171  0004E4  D7DA               	goto	l2167
  3172  0004E6                     l2189:
  3173  0004E6  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  3174  0004E8  5C41               	subwf	ScanWithRange@SensorResultL,w,c
  3175  0004EA  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  3176  0004EC  5842               	subwfb	ScanWithRange@SensorResultL+1,w,c
  3177  0004EE  B0D8               	btfsc	status,0,c
  3178  0004F0  D03B               	goto	l2205
  3179  0004F2  5045               	movf	ScanWithRange@SensorResultC,w,c
  3180  0004F4  5C47               	subwf	ScanWithRange@SensorResultC+2,w,c
  3181  0004F6  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  3182  0004F8  5848               	subwfb	ScanWithRange@SensorResultC+3,w,c
  3183  0004FA  B0D8               	btfsc	status,0,c
  3184  0004FC  D035               	goto	l2205
  3185                           
  3186                           ;Movement.c: 213: turnLeft(mL,mR);
  3187  0004FE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3188  000502  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3189  000506  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3190  00050A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3191  00050E  EC05  F009         	call	_turnLeft	;wreg free
  3192                           
  3193                           ;Movement.c: 214: delay_tenth_s((3*tenth_seconds)/2);
  3194  000512  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3195  000514  0D03               	mullw	3
  3196  000516  CFF3 F015          	movff	prodl,___awdiv@dividend
  3197  00051A  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3198  00051E  0E00               	movlw	0
  3199  000520  6E18               	movwf	___awdiv@divisor+1,c
  3200  000522  0E02               	movlw	2
  3201  000524  6E17               	movwf	___awdiv@divisor,c
  3202  000526  ECF0  F007         	call	___awdiv	;wreg free
  3203  00052A  5015               	movf	?___awdiv,w,c
  3204  00052C  EC46  F009         	call	_delay_tenth_s
  3205                           
  3206                           ;Movement.c: 215: MoveTime += 3*tenth_seconds/2;
  3207  000530  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3208  000532  0D03               	mullw	3
  3209  000534  CFF3 F015          	movff	prodl,___awdiv@dividend
  3210  000538  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3211  00053C  0E00               	movlw	0
  3212  00053E  6E18               	movwf	___awdiv@divisor+1,c
  3213  000540  0E02               	movlw	2
  3214  000542  6E17               	movwf	___awdiv@divisor,c
  3215  000544  ECF0  F007         	call	___awdiv	;wreg free
  3216  000548  5015               	movf	?___awdiv,w,c
  3217  00054A  2634               	addwf	ScanWithRange@MoveTime,f,c
  3218  00054C  5016               	movf	?___awdiv+1,w,c
  3219  00054E  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3220                           
  3221                           ;Movement.c: 216: stop(mL,mR);
  3222  000550  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3223  000554  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3224  000558  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3225  00055C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3226  000560  ECA8  F007         	call	_stop	;wreg free
  3227  000564                     l2199:
  3228                           
  3229                           ;Movement.c: 217: return 1;
  3230  000564  0E01               	movlw	1
  3231  000566  0012               	return	
  3232  000568                     l2205:
  3233  000568  5049               	movf	ScanWithRange@SensorResultR,w,c
  3234  00056A  5C4B               	subwf	ScanWithRange@SensorResultR+2,w,c
  3235  00056C  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3236  00056E  584C               	subwfb	ScanWithRange@SensorResultR+3,w,c
  3237  000570  B0D8               	btfsc	status,0,c
  3238  000572  D034               	goto	l2221
  3239  000574  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  3240  000576  5C45               	subwf	ScanWithRange@SensorResultC,w,c
  3241  000578  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  3242  00057A  5846               	subwfb	ScanWithRange@SensorResultC+1,w,c
  3243  00057C  B0D8               	btfsc	status,0,c
  3244  00057E  D02E               	goto	l2221
  3245                           
  3246                           ;Movement.c: 220: turnLeft(mL,mR);
  3247  000580  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3248  000584  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3249  000588  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3250  00058C  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3251  000590  EC05  F009         	call	_turnLeft	;wreg free
  3252                           
  3253                           ;Movement.c: 221: delay_tenth_s((tenth_seconds)/2);
  3254  000594  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3255  000598  6A16               	clrf	___awdiv@dividend+1,c
  3256  00059A  0E00               	movlw	0
  3257  00059C  6E18               	movwf	___awdiv@divisor+1,c
  3258  00059E  0E02               	movlw	2
  3259  0005A0  6E17               	movwf	___awdiv@divisor,c
  3260  0005A2  ECF0  F007         	call	___awdiv	;wreg free
  3261  0005A6  5015               	movf	?___awdiv,w,c
  3262  0005A8  EC46  F009         	call	_delay_tenth_s
  3263                           
  3264                           ;Movement.c: 222: MoveTime += tenth_seconds/2;
  3265  0005AC  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3266  0005B0  6A16               	clrf	___awdiv@dividend+1,c
  3267  0005B2  0E00               	movlw	0
  3268  0005B4  6E18               	movwf	___awdiv@divisor+1,c
  3269  0005B6  0E02               	movlw	2
  3270  0005B8  6E17               	movwf	___awdiv@divisor,c
  3271  0005BA  ECF0  F007         	call	___awdiv	;wreg free
  3272  0005BE  5015               	movf	?___awdiv,w,c
  3273  0005C0  2634               	addwf	ScanWithRange@MoveTime,f,c
  3274  0005C2  5016               	movf	?___awdiv+1,w,c
  3275  0005C4  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3276                           
  3277                           ;Movement.c: 223: stop(mL,mR);
  3278  0005C6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3279  0005CA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3280  0005CE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3281  0005D2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3282  0005D6  ECA8  F007         	call	_stop	;wreg free
  3283  0005DA  D7C4               	goto	l2199
  3284  0005DC                     l2221:
  3285                           
  3286                           ;Movement.c: 225: }
  3287                           ;Movement.c: 226: }
  3288                           ;Movement.c: 227: return 0;
  3289  0005DC  0E00               	movlw	0
  3290  0005DE  0012               	return	
  3291  0005E0                     __end_of_ScanWithRange:
  3292                           	opt stack 0
  3293                           tblptru	equ	0xFF8
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           indf1	equ	0xFE7
  3300                           fsr1h	equ	0xFE2
  3301                           fsr1l	equ	0xFE1
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _ScanIR *****************
  3310 ;; Defined at:
  3311 ;;		line 32 in file "Movement.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  3314 ;;		 -> main@mL(9), 
  3315 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  3316 ;;		 -> main@mR(9), 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  3319 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  3320 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  3321 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      unsigned char 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3331 ;;      Params:         4       0       0       0
  3332 ;;      Locals:        10       0       0       0
  3333 ;;      Temps:          2       0       0       0
  3334 ;;      Totals:        16       0       0       0
  3335 ;;Total ram usage:       16 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    5
  3338 ;; This function calls:
  3339 ;;		_delay_tenth_s
  3340 ;;		_grabLeftIR
  3341 ;;		_grabRightIR
  3342 ;;		_stop
  3343 ;;		_turnLeft
  3344 ;;		_turnRight
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text13
  3351  000A02                     __ptext13:
  3352                           	opt stack 0
  3353  000A02                     _ScanIR:
  3354                           	opt stack 25
  3355                           
  3356                           ;Movement.c: 34: unsigned int SensorResult[2];
  3357                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  3358                           
  3359                           ;incstack = 0
  3360  000A02  0E00               	movlw	0
  3361  000A04  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  3362  000A06  0EC8               	movlw	200
  3363  000A08  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  3364                           
  3365                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  3366  000A0A  0E05               	movlw	5
  3367  000A0C  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  3368  000A0E  0EDC               	movlw	220
  3369  000A10  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  3370                           
  3371                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  3372  000A12  0E01               	movlw	1
  3373  000A14  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  3374  000A16  0EF4               	movlw	244
  3375  000A18  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  3376                           
  3377                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  3378  000A1A  EC6D  F008         	call	_grabLeftIR	;wreg free
  3379  000A1E  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  3380  000A22  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3381                           
  3382                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  3383  000A26  EC32  F008         	call	_grabRightIR	;wreg free
  3384  000A2A  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3385  000A2E  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3386                           
  3387                           ;Movement.c: 46: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  3388  000A32  503B               	movf	ScanIR@SensorResult,w,c
  3389  000A34  243D               	addwf	ScanIR@SensorResult+2,w,c
  3390  000A36  6E33               	movwf	??_ScanIR& (0+255),c
  3391  000A38  503C               	movf	ScanIR@SensorResult+1,w,c
  3392  000A3A  203E               	addwfc	ScanIR@SensorResult+3,w,c
  3393  000A3C  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  3394  000A3E  5033               	movf	??_ScanIR,w,c
  3395  000A40  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  3396  000A42  5034               	movf	??_ScanIR+1,w,c
  3397  000A44  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  3398  000A46  B0D8               	btfsc	status,0,c
  3399  000A48  D085               	goto	l2273
  3400                           
  3401                           ;Movement.c: 49: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  3402                           ;Movement.c: 50: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3403                           ;Movement.c: 51: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3404  000A4A  503B               	movf	ScanIR@SensorResult,w,c
  3405  000A4C  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3406  000A4E  503C               	movf	ScanIR@SensorResult+1,w,c
  3407  000A50  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3408  000A52  B0D8               	btfsc	status,0,c
  3409  000A54  D02E               	goto	l2247
  3410  000A56  503D               	movf	ScanIR@SensorResult+2,w,c
  3411  000A58  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3412  000A5A  503E               	movf	ScanIR@SensorResult+3,w,c
  3413  000A5C  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3414  000A5E  B0D8               	btfsc	status,0,c
  3415  000A60  D028               	goto	l2247
  3416  000A62  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  3417  000A66  CFDE F033          	movff	postinc2,??_ScanIR
  3418  000A6A  CFDD F034          	movff	postdec2,??_ScanIR+1
  3419  000A6E  1E33               	comf	??_ScanIR,f,c
  3420  000A70  1E34               	comf	??_ScanIR+1,f,c
  3421  000A72  4A33               	infsnz	??_ScanIR,f,c
  3422  000A74  2A34               	incf	??_ScanIR+1,f,c
  3423  000A76  503B               	movf	ScanIR@SensorResult,w,c
  3424  000A78  2633               	addwf	??_ScanIR,f,c
  3425  000A7A  503C               	movf	ScanIR@SensorResult+1,w,c
  3426  000A7C  2234               	addwfc	??_ScanIR+1,f,c
  3427  000A7E  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3428  000A80  5C33               	subwf	??_ScanIR,w,c
  3429  000A82  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3430  000A84  5834               	subwfb	??_ScanIR+1,w,c
  3431  000A86  A0D8               	btfss	status,0,c
  3432  000A88  D012               	goto	l2241
  3433  000A8A  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  3434  000A8E  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3435  000A92  1E33               	comf	??_ScanIR,f,c
  3436  000A94  1E34               	comf	??_ScanIR+1,f,c
  3437  000A96  4A33               	infsnz	??_ScanIR,f,c
  3438  000A98  2A34               	incf	??_ScanIR+1,f,c
  3439  000A9A  503D               	movf	ScanIR@SensorResult+2,w,c
  3440  000A9C  2633               	addwf	??_ScanIR,f,c
  3441  000A9E  503E               	movf	ScanIR@SensorResult+3,w,c
  3442  000AA0  2234               	addwfc	??_ScanIR+1,f,c
  3443  000AA2  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3444  000AA4  5C33               	subwf	??_ScanIR,w,c
  3445  000AA6  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3446  000AA8  5834               	subwfb	??_ScanIR+1,w,c
  3447  000AAA  B0D8               	btfsc	status,0,c
  3448  000AAC  D002               	goto	l2247
  3449  000AAE                     l2241:
  3450                           
  3451                           ;Movement.c: 52: return 2;
  3452  000AAE  0E02               	movlw	2
  3453  000AB0  0012               	return	
  3454  000AB2                     l2247:
  3455  000AB2  503B               	movf	ScanIR@SensorResult,w,c
  3456  000AB4  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3457  000AB6  503C               	movf	ScanIR@SensorResult+1,w,c
  3458  000AB8  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3459  000ABA  A0D8               	btfss	status,0,c
  3460  000ABC  D023               	goto	l2261
  3461                           
  3462                           ;Movement.c: 55: stop(mL,mR);
  3463  000ABE  C02F  F026         	movff	ScanIR@mL,stop@mL
  3464  000AC2  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3465  000AC6  C031  F028         	movff	ScanIR@mR,stop@mR
  3466  000ACA  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3467  000ACE  ECA8  F007         	call	_stop	;wreg free
  3468                           
  3469                           ;Movement.c: 56: turnLeft(mL,mR);
  3470  000AD2  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3471  000AD6  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3472  000ADA  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3473  000ADE  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3474  000AE2  EC05  F009         	call	_turnLeft	;wreg free
  3475                           
  3476                           ;Movement.c: 57: delay_tenth_s(3);
  3477  000AE6  0E03               	movlw	3
  3478  000AE8  EC46  F009         	call	_delay_tenth_s
  3479                           
  3480                           ;Movement.c: 58: stop(mL,mR);
  3481  000AEC  C02F  F026         	movff	ScanIR@mL,stop@mL
  3482  000AF0  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3483  000AF4  C031  F028         	movff	ScanIR@mR,stop@mR
  3484  000AF8  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3485  000AFC  ECA8  F007         	call	_stop	;wreg free
  3486  000B00                     l2255:
  3487                           
  3488                           ;Movement.c: 59: return 1;
  3489  000B00  0E01               	movlw	1
  3490  000B02  0012               	return	
  3491  000B04                     l2261:
  3492  000B04  503B               	movf	ScanIR@SensorResult,w,c
  3493  000B06  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3494  000B08  503C               	movf	ScanIR@SensorResult+1,w,c
  3495  000B0A  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3496  000B0C  B0D8               	btfsc	status,0,c
  3497  000B0E  D069               	goto	l2301
  3498                           
  3499                           ;Movement.c: 62: stop(mL,mR);
  3500  000B10  C02F  F026         	movff	ScanIR@mL,stop@mL
  3501  000B14  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3502  000B18  C031  F028         	movff	ScanIR@mR,stop@mR
  3503  000B1C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3504  000B20  ECA8  F007         	call	_stop	;wreg free
  3505                           
  3506                           ;Movement.c: 63: turnRight(mL,mR);
  3507  000B24  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3508  000B28  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3509  000B2C  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3510  000B30  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3511  000B34  ECE0  F008         	call	_turnRight	;wreg free
  3512                           
  3513                           ;Movement.c: 64: delay_tenth_s(3);
  3514  000B38  0E03               	movlw	3
  3515  000B3A  EC46  F009         	call	_delay_tenth_s
  3516                           
  3517                           ;Movement.c: 65: stop(mL,mR);
  3518  000B3E  C02F  F026         	movff	ScanIR@mL,stop@mL
  3519  000B42  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3520  000B46  C031  F028         	movff	ScanIR@mR,stop@mR
  3521  000B4A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3522  000B4E  ECA8  F007         	call	_stop	;wreg free
  3523  000B52  D7D6               	goto	l2255
  3524  000B54                     l2273:
  3525                           
  3526                           ;Movement.c: 70: stop(mL,mR);
  3527  000B54  C02F  F026         	movff	ScanIR@mL,stop@mL
  3528  000B58  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3529  000B5C  C031  F028         	movff	ScanIR@mR,stop@mR
  3530  000B60  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3531  000B64  ECA8  F007         	call	_stop	;wreg free
  3532                           
  3533                           ;Movement.c: 73: if (SensorResult[0]<=SensorResult[1]) {
  3534  000B68  503B               	movf	ScanIR@SensorResult,w,c
  3535  000B6A  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3536  000B6C  503C               	movf	ScanIR@SensorResult+1,w,c
  3537  000B6E  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3538  000B70  A0D8               	btfss	status,0,c
  3539  000B72  D019               	goto	l2289
  3540                           
  3541                           ;Movement.c: 74: turnLeft(mL,mR);
  3542  000B74  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3543  000B78  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3544  000B7C  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3545  000B80  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3546  000B84  EC05  F009         	call	_turnLeft	;wreg free
  3547                           
  3548                           ;Movement.c: 75: delay_tenth_s(5);
  3549  000B88  0E05               	movlw	5
  3550  000B8A  EC46  F009         	call	_delay_tenth_s
  3551                           
  3552                           ;Movement.c: 76: stop(mL,mR);
  3553  000B8E  C02F  F026         	movff	ScanIR@mL,stop@mL
  3554  000B92  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3555  000B96  C031  F028         	movff	ScanIR@mR,stop@mR
  3556  000B9A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3557  000B9E  ECA8  F007         	call	_stop	;wreg free
  3558  000BA2                     l2283:
  3559                           
  3560                           ;Movement.c: 77: return 0;
  3561  000BA2  0E00               	movlw	0
  3562  000BA4  0012               	return	
  3563  000BA6                     l2289:
  3564  000BA6  503B               	movf	ScanIR@SensorResult,w,c
  3565  000BA8  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3566  000BAA  503C               	movf	ScanIR@SensorResult+1,w,c
  3567  000BAC  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3568  000BAE  B0D8               	btfsc	status,0,c
  3569  000BB0  D018               	goto	l2301
  3570                           
  3571                           ;Movement.c: 80: turnRight(mL,mR);
  3572  000BB2  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3573  000BB6  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3574  000BBA  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3575  000BBE  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3576  000BC2  ECE0  F008         	call	_turnRight	;wreg free
  3577                           
  3578                           ;Movement.c: 81: delay_tenth_s(5);
  3579  000BC6  0E05               	movlw	5
  3580  000BC8  EC46  F009         	call	_delay_tenth_s
  3581                           
  3582                           ;Movement.c: 82: stop(mL,mR);
  3583  000BCC  C02F  F026         	movff	ScanIR@mL,stop@mL
  3584  000BD0  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3585  000BD4  C031  F028         	movff	ScanIR@mR,stop@mR
  3586  000BD8  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3587  000BDC  ECA8  F007         	call	_stop	;wreg free
  3588  000BE0  D7E0               	goto	l2283
  3589  000BE2                     l2301:
  3590                           
  3591                           ;Movement.c: 84: }
  3592                           ;Movement.c: 85: }
  3593                           ;Movement.c: 86: return 0;
  3594  000BE2  0E00               	movlw	0
  3595  000BE4  0012               	return	
  3596  000BE6                     __end_of_ScanIR:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           indf1	equ	0xFE7
  3605                           fsr1h	equ	0xFE2
  3606                           fsr1l	equ	0xFE1
  3607                           indf2	equ	0xFDF
  3608                           postinc2	equ	0xFDE
  3609                           postdec2	equ	0xFDD
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _turnRight *****************
  3615 ;; Defined at:
  3616 ;;		line 98 in file "dc_motor.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3619 ;;		 -> main@mL(9), 
  3620 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3621 ;;		 -> main@mR(9), 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3633 ;;      Params:         4       0       0       0
  3634 ;;      Locals:         0       0       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         4       0       0       0
  3637 ;;Total ram usage:        4 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    4
  3640 ;; This function calls:
  3641 ;;		_fullSpeedAhead
  3642 ;;		_stop
  3643 ;; This function is called by:
  3644 ;;		_main
  3645 ;;		_ScanIR
  3646 ;;		_ScanWithRange
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           	psect	text14
  3651  0011C0                     __ptext14:
  3652                           	opt stack 0
  3653  0011C0                     _turnRight:
  3654                           	opt stack 26
  3655                           
  3656                           ;dc_motor.c: 100: stop(mL, mR);
  3657                           
  3658                           ;incstack = 0
  3659  0011C0  C02B  F026         	movff	turnRight@mL,stop@mL
  3660  0011C4  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  3661  0011C8  C02D  F028         	movff	turnRight@mR,stop@mR
  3662  0011CC  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  3663  0011D0  ECA8  F007         	call	_stop	;wreg free
  3664                           
  3665                           ;dc_motor.c: 102: mL->direction=1;
  3666  0011D4  EE20 F001          	lfsr	2,1
  3667  0011D8  502B               	movf	turnRight@mL,w,c
  3668  0011DA  26D9               	addwf	fsr2l,f,c
  3669  0011DC  502C               	movf	turnRight@mL+1,w,c
  3670  0011DE  22DA               	addwfc	fsr2h,f,c
  3671  0011E0  0E01               	movlw	1
  3672  0011E2  6EDF               	movwf	indf2,c
  3673                           
  3674                           ;dc_motor.c: 103: mR->direction=0;
  3675  0011E4  EE20 F001          	lfsr	2,1
  3676  0011E8  502D               	movf	turnRight@mR,w,c
  3677  0011EA  26D9               	addwf	fsr2l,f,c
  3678  0011EC  502E               	movf	turnRight@mR+1,w,c
  3679  0011EE  22DA               	addwfc	fsr2h,f,c
  3680  0011F0  0E00               	movlw	0
  3681  0011F2  6EDF               	movwf	indf2,c
  3682                           
  3683                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3684  0011F4  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  3685  0011F8  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3686  0011FC  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  3687  001200  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3688  001204  ECA8  F008         	call	_fullSpeedAhead	;wreg free
  3689  001208  0012               	return		;funcret
  3690  00120A                     __end_of_turnRight:
  3691                           	opt stack 0
  3692                           tblptru	equ	0xFF8
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           intcon	equ	0xFF2
  3696                           postinc0	equ	0xFEE
  3697                           wreg	equ	0xFE8
  3698                           indf1	equ	0xFE7
  3699                           fsr1h	equ	0xFE2
  3700                           fsr1l	equ	0xFE1
  3701                           indf2	equ	0xFDF
  3702                           postinc2	equ	0xFDE
  3703                           postdec2	equ	0xFDD
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _turnLeft *****************
  3709 ;; Defined at:
  3710 ;;		line 87 in file "dc_motor.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3713 ;;		 -> main@mL(9), 
  3714 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3715 ;;		 -> main@mR(9), 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;		None               void
  3720 ;; Registers used:
  3721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3727 ;;      Params:         4       0       0       0
  3728 ;;      Locals:         0       0       0       0
  3729 ;;      Temps:          0       0       0       0
  3730 ;;      Totals:         4       0       0       0
  3731 ;;Total ram usage:        4 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    4
  3734 ;; This function calls:
  3735 ;;		_fullSpeedAhead
  3736 ;;		_stop
  3737 ;; This function is called by:
  3738 ;;		_main
  3739 ;;		_ScanIR
  3740 ;;		_ScanWithRange
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text15
  3745  00120A                     __ptext15:
  3746                           	opt stack 0
  3747  00120A                     _turnLeft:
  3748                           	opt stack 26
  3749                           
  3750                           ;dc_motor.c: 89: stop(mL, mR);
  3751                           
  3752                           ;incstack = 0
  3753  00120A  C02B  F026         	movff	turnLeft@mL,stop@mL
  3754  00120E  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  3755  001212  C02D  F028         	movff	turnLeft@mR,stop@mR
  3756  001216  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  3757  00121A  ECA8  F007         	call	_stop	;wreg free
  3758                           
  3759                           ;dc_motor.c: 91: mL->direction=0;
  3760  00121E  EE20 F001          	lfsr	2,1
  3761  001222  502B               	movf	turnLeft@mL,w,c
  3762  001224  26D9               	addwf	fsr2l,f,c
  3763  001226  502C               	movf	turnLeft@mL+1,w,c
  3764  001228  22DA               	addwfc	fsr2h,f,c
  3765  00122A  0E00               	movlw	0
  3766  00122C  6EDF               	movwf	indf2,c
  3767                           
  3768                           ;dc_motor.c: 92: mR->direction=1;
  3769  00122E  EE20 F001          	lfsr	2,1
  3770  001232  502D               	movf	turnLeft@mR,w,c
  3771  001234  26D9               	addwf	fsr2l,f,c
  3772  001236  502E               	movf	turnLeft@mR+1,w,c
  3773  001238  22DA               	addwfc	fsr2h,f,c
  3774  00123A  0E01               	movlw	1
  3775  00123C  6EDF               	movwf	indf2,c
  3776                           
  3777                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  3778  00123E  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  3779  001242  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3780  001246  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  3781  00124A  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3782  00124E  ECA8  F008         	call	_fullSpeedAhead	;wreg free
  3783  001252  0012               	return		;funcret
  3784  001254                     __end_of_turnLeft:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           indf1	equ	0xFE7
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _stop *****************
  3803 ;; Defined at:
  3804 ;;		line 67 in file "dc_motor.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3807 ;;		 -> main@mL(9), 
  3808 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3809 ;;		 -> main@mR(9), 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;		None               void
  3814 ;; Registers used:
  3815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3821 ;;      Params:         4       0       0       0
  3822 ;;      Locals:         0       0       0       0
  3823 ;;      Temps:          0       0       0       0
  3824 ;;      Totals:         4       0       0       0
  3825 ;;Total ram usage:        4 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    3
  3828 ;; This function calls:
  3829 ;;		_setMotorPWM
  3830 ;; This function is called by:
  3831 ;;		_main
  3832 ;;		_turnLeft
  3833 ;;		_turnRight
  3834 ;;		_ScanIR
  3835 ;;		_ScanWithRange
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text16
  3840  000F50                     __ptext16:
  3841                           	opt stack 0
  3842  000F50                     _stop:
  3843                           	opt stack 26
  3844                           
  3845                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3846                           
  3847                           ;incstack = 0
  3848  000F50  D028               	goto	l1879
  3849  000F52                     l1865:
  3850                           
  3851                           ;dc_motor.c: 71: if(mL->power>0){
  3852  000F52  C026  FFD9         	movff	stop@mL,fsr2l
  3853  000F56  C027  FFDA         	movff	stop@mL+1,fsr2h
  3854  000F5A  50DF               	movf	indf2,w,c
  3855  000F5C  B4D8               	btfsc	status,2,c
  3856  000F5E  D005               	goto	l1869
  3857                           
  3858                           ;dc_motor.c: 72: mL->power--;
  3859  000F60  C026  FFD9         	movff	stop@mL,fsr2l
  3860  000F64  C027  FFDA         	movff	stop@mL+1,fsr2h
  3861  000F68  06DF               	decf	indf2,f,c
  3862  000F6A                     l1869:
  3863                           
  3864                           ;dc_motor.c: 73: }
  3865                           ;dc_motor.c: 74: if(mR->power>0){
  3866  000F6A  C028  FFD9         	movff	stop@mR,fsr2l
  3867  000F6E  C029  FFDA         	movff	stop@mR+1,fsr2h
  3868  000F72  50DF               	movf	indf2,w,c
  3869  000F74  B4D8               	btfsc	status,2,c
  3870  000F76  D005               	goto	l1873
  3871                           
  3872                           ;dc_motor.c: 75: mR->power--;
  3873  000F78  C028  FFD9         	movff	stop@mR,fsr2l
  3874  000F7C  C029  FFDA         	movff	stop@mR+1,fsr2h
  3875  000F80  06DF               	decf	indf2,f,c
  3876  000F82                     l1873:
  3877                           
  3878                           ;dc_motor.c: 76: }
  3879                           ;dc_motor.c: 77: setMotorPWM(mL);
  3880  000F82  C026  F01D         	movff	stop@mL,setMotorPWM@m
  3881  000F86  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  3882  000F8A  ECF3  F005         	call	_setMotorPWM	;wreg free
  3883                           
  3884                           ;dc_motor.c: 78: setMotorPWM(mR);
  3885  000F8E  C028  F01D         	movff	stop@mR,setMotorPWM@m
  3886  000F92  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  3887  000F96  ECF3  F005         	call	_setMotorPWM	;wreg free
  3888                           
  3889                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3890  000F9A  0E21               	movlw	33
  3891  000F9C                     u2177:
  3892  000F9C  2EE8               	decfsz	wreg,f,c
  3893  000F9E  D7FE               	goto	u2177
  3894  000FA0  F000               	nop	
  3895  000FA2                     l1879:
  3896  000FA2  C026  FFD9         	movff	stop@mL,fsr2l
  3897  000FA6  C027  FFDA         	movff	stop@mL+1,fsr2h
  3898  000FAA  50DF               	movf	indf2,w,c
  3899  000FAC  A4D8               	btfss	status,2,c
  3900  000FAE  D7D1               	goto	l1865
  3901  000FB0  C028  FFD9         	movff	stop@mR,fsr2l
  3902  000FB4  C029  FFDA         	movff	stop@mR+1,fsr2h
  3903  000FB8  50DF               	movf	indf2,w,c
  3904  000FBA  A4D8               	btfss	status,2,c
  3905  000FBC  D7CA               	goto	l1865
  3906                           
  3907                           ;dc_motor.c: 80: }
  3908                           ;dc_motor.c: 81: mL->direction=1;
  3909  000FBE  EE20 F001          	lfsr	2,1
  3910  000FC2  5026               	movf	stop@mL,w,c
  3911  000FC4  26D9               	addwf	fsr2l,f,c
  3912  000FC6  5027               	movf	stop@mL+1,w,c
  3913  000FC8  22DA               	addwfc	fsr2h,f,c
  3914  000FCA  0E01               	movlw	1
  3915  000FCC  6EDF               	movwf	indf2,c
  3916                           
  3917                           ;dc_motor.c: 82: mR->direction=1;
  3918  000FCE  EE20 F001          	lfsr	2,1
  3919  000FD2  5028               	movf	stop@mR,w,c
  3920  000FD4  26D9               	addwf	fsr2l,f,c
  3921  000FD6  5029               	movf	stop@mR+1,w,c
  3922  000FD8  22DA               	addwfc	fsr2h,f,c
  3923  000FDA  0E01               	movlw	1
  3924  000FDC  6EDF               	movwf	indf2,c
  3925  000FDE  0012               	return		;funcret
  3926  000FE0                     __end_of_stop:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           indf1	equ	0xFE7
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _fullSpeedAhead *****************
  3945 ;; Defined at:
  3946 ;;		line 108 in file "dc_motor.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3949 ;;		 -> main@mL(9), 
  3950 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3951 ;;		 -> main@mR(9), 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;		None               void
  3956 ;; Registers used:
  3957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3963 ;;      Params:         4       0       0       0
  3964 ;;      Locals:         0       0       0       0
  3965 ;;      Temps:          1       0       0       0
  3966 ;;      Totals:         5       0       0       0
  3967 ;;Total ram usage:        5 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    3
  3970 ;; This function calls:
  3971 ;;		_setMotorPWM
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;;		_turnLeft
  3975 ;;		_turnRight
  3976 ;;		_fullSpeedBack
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text17
  3981  001150                     __ptext17:
  3982                           	opt stack 0
  3983  001150                     _fullSpeedAhead:
  3984                           	opt stack 26
  3985                           
  3986                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  3987                           
  3988                           ;incstack = 0
  3989  001150  D028               	goto	l169
  3990  001152                     l1847:
  3991                           
  3992                           ;dc_motor.c: 112: if(mL->power<100){
  3993  001152  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3994  001156  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3995  00115A  0E64               	movlw	100
  3996  00115C  60DF               	cpfslt	indf2,c
  3997  00115E  D005               	goto	l1851
  3998                           
  3999                           ;dc_motor.c: 113: mL->power++;
  4000  001160  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4001  001164  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4002  001168  2ADF               	incf	indf2,f,c
  4003  00116A                     l1851:
  4004                           
  4005                           ;dc_motor.c: 114: }
  4006                           ;dc_motor.c: 115: if(mR->power<100){
  4007  00116A  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4008  00116E  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4009  001172  0E64               	movlw	100
  4010  001174  60DF               	cpfslt	indf2,c
  4011  001176  D005               	goto	l1855
  4012                           
  4013                           ;dc_motor.c: 116: mR->power++;
  4014  001178  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4015  00117C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4016  001180  2ADF               	incf	indf2,f,c
  4017  001182                     l1855:
  4018                           
  4019                           ;dc_motor.c: 117: }
  4020                           ;dc_motor.c: 118: setMotorPWM(mL);
  4021  001182  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4022  001186  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4023  00118A  ECF3  F005         	call	_setMotorPWM	;wreg free
  4024                           
  4025                           ;dc_motor.c: 119: setMotorPWM(mR);
  4026  00118E  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4027  001192  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4028  001196  ECF3  F005         	call	_setMotorPWM	;wreg free
  4029                           
  4030                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4031  00119A  0E21               	movlw	33
  4032  00119C                     u2187:
  4033  00119C  2EE8               	decfsz	wreg,f,c
  4034  00119E  D7FE               	goto	u2187
  4035  0011A0  F000               	nop	
  4036  0011A2                     l169:
  4037  0011A2  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4038  0011A6  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4039  0011AA  0E63               	movlw	99
  4040  0011AC  64DF               	cpfsgt	indf2,c
  4041  0011AE  D7D1               	goto	l1847
  4042  0011B0  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4043  0011B4  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4044  0011B8  0E63               	movlw	99
  4045  0011BA  64DF               	cpfsgt	indf2,c
  4046  0011BC  D7CA               	goto	l1847
  4047  0011BE  0012               	return	
  4048  0011C0                     __end_of_fullSpeedAhead:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           indf1	equ	0xFE7
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _setMotorPWM *****************
  4067 ;; Defined at:
  4068 ;;		line 26 in file "dc_motor.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  m               2   28[COMRAM] PTR struct DC_motor
  4071 ;;		 -> main@mR(9), main@mL(9), 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  PWMduty         2   35[COMRAM] int 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;		None               void
  4076 ;; Registers used:
  4077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4083 ;;      Params:         2       0       0       0
  4084 ;;      Locals:         2       0       0       0
  4085 ;;      Temps:          5       0       0       0
  4086 ;;      Totals:         9       0       0       0
  4087 ;;Total ram usage:        9 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    2
  4090 ;; This function calls:
  4091 ;;		___awdiv
  4092 ;;		___wmul
  4093 ;; This function is called by:
  4094 ;;		_stop
  4095 ;;		_fullSpeedAhead
  4096 ;;		_setMotorFullSpeed
  4097 ;;		_stopMotor
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text18
  4102  000BE6                     __ptext18:
  4103                           	opt stack 0
  4104  000BE6                     _setMotorPWM:
  4105                           	opt stack 26
  4106                           
  4107                           ;dc_motor.c: 28: int PWMduty;
  4108                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4109                           
  4110                           ;incstack = 0
  4111  000BE6  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  4112  000BEA  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4113  000BEE  50DF               	movf	indf2,w,c
  4114  000BF0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4115  000BF2  501F               	movf	??_setMotorPWM,w,c
  4116  000BF4  6E0F               	movwf	___wmul@multiplier,c
  4117  000BF6  6A10               	clrf	___wmul@multiplier+1,c
  4118  000BF8  EE20 F007          	lfsr	2,7
  4119  000BFC  501D               	movf	setMotorPWM@m,w,c
  4120  000BFE  26D9               	addwf	fsr2l,f,c
  4121  000C00  501E               	movf	setMotorPWM@m+1,w,c
  4122  000C02  22DA               	addwfc	fsr2h,f,c
  4123  000C04  CFDE F011          	movff	postinc2,___wmul@multiplicand
  4124  000C08  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  4125  000C0C  ECC1  F009         	call	___wmul	;wreg free
  4126  000C10  C00F  F015         	movff	?___wmul,___awdiv@dividend
  4127  000C14  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  4128  000C18  0E00               	movlw	0
  4129  000C1A  6E18               	movwf	___awdiv@divisor+1,c
  4130  000C1C  0E64               	movlw	100
  4131  000C1E  6E17               	movwf	___awdiv@divisor,c
  4132  000C20  ECF0  F007         	call	___awdiv	;wreg free
  4133  000C24  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  4134  000C28  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4135                           
  4136                           ;dc_motor.c: 32: if (m->direction)
  4137  000C2C  EE20 F001          	lfsr	2,1
  4138  000C30  501D               	movf	setMotorPWM@m,w,c
  4139  000C32  26D9               	addwf	fsr2l,f,c
  4140  000C34  501E               	movf	setMotorPWM@m+1,w,c
  4141  000C36  22DA               	addwfc	fsr2h,f,c
  4142  000C38  50DF               	movf	indf2,w,c
  4143  000C3A  B4D8               	btfsc	status,2,c
  4144  000C3C  D02C               	goto	l1837
  4145                           
  4146                           ;dc_motor.c: 33: {
  4147                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4148  000C3E  EE20 F006          	lfsr	2,6
  4149  000C42  501D               	movf	setMotorPWM@m,w,c
  4150  000C44  26D9               	addwf	fsr2l,f,c
  4151  000C46  501E               	movf	setMotorPWM@m+1,w,c
  4152  000C48  22DA               	addwfc	fsr2h,f,c
  4153  000C4A  50DF               	movf	indf2,w,c
  4154  000C4C  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4155  000C4E  0E01               	movlw	1
  4156  000C50  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4157  000C52  2A1F               	incf	??_setMotorPWM,f,c
  4158  000C54  D002               	goto	u1124
  4159  000C56                     u1125:
  4160  000C56  90D8               	bcf	status,0,c
  4161  000C58  3620               	rlcf	??_setMotorPWM+1,f,c
  4162  000C5A                     u1124:
  4163  000C5A  2E1F               	decfsz	??_setMotorPWM,f,c
  4164  000C5C  D7FC               	goto	u1125
  4165  000C5E  5020               	movf	??_setMotorPWM+1,w,c
  4166  000C60  108A               	iorwf	3978,w,c	;volatile
  4167  000C62  6E8A               	movwf	3978,c	;volatile
  4168                           
  4169                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4170  000C64  EE20 F007          	lfsr	2,7
  4171  000C68  501D               	movf	setMotorPWM@m,w,c
  4172  000C6A  26D9               	addwf	fsr2l,f,c
  4173  000C6C  501E               	movf	setMotorPWM@m+1,w,c
  4174  000C6E  22DA               	addwfc	fsr2h,f,c
  4175  000C70  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4176  000C74  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4177  000C78  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4178  000C7C  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4179  000C80  1E21               	comf	??_setMotorPWM+2,f,c
  4180  000C82  1E22               	comf	??_setMotorPWM+3,f,c
  4181  000C84  4A21               	infsnz	??_setMotorPWM+2,f,c
  4182  000C86  2A22               	incf	??_setMotorPWM+3,f,c
  4183  000C88  501F               	movf	??_setMotorPWM,w,c
  4184  000C8A  2421               	addwf	??_setMotorPWM+2,w,c
  4185  000C8C  6E24               	movwf	setMotorPWM@PWMduty,c
  4186  000C8E  5020               	movf	??_setMotorPWM+1,w,c
  4187  000C90  2022               	addwfc	??_setMotorPWM+3,w,c
  4188  000C92  6E25               	movwf	setMotorPWM@PWMduty+1,c
  4189                           
  4190                           ;dc_motor.c: 36: }
  4191  000C94  D014               	goto	l139
  4192  000C96                     l1837:
  4193                           
  4194                           ;dc_motor.c: 37: else
  4195                           ;dc_motor.c: 38: {
  4196                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4197  000C96  EE20 F006          	lfsr	2,6
  4198  000C9A  501D               	movf	setMotorPWM@m,w,c
  4199  000C9C  26D9               	addwf	fsr2l,f,c
  4200  000C9E  501E               	movf	setMotorPWM@m+1,w,c
  4201  000CA0  22DA               	addwfc	fsr2h,f,c
  4202  000CA2  50DF               	movf	indf2,w,c
  4203  000CA4  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4204  000CA6  0E01               	movlw	1
  4205  000CA8  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4206  000CAA  2A1F               	incf	??_setMotorPWM,f,c
  4207  000CAC  D002               	goto	u1134
  4208  000CAE                     u1135:
  4209  000CAE  90D8               	bcf	status,0,c
  4210  000CB0  3620               	rlcf	??_setMotorPWM+1,f,c
  4211  000CB2                     u1134:
  4212  000CB2  2E1F               	decfsz	??_setMotorPWM,f,c
  4213  000CB4  D7FC               	goto	u1135
  4214  000CB6  5020               	movf	??_setMotorPWM+1,w,c
  4215  000CB8  0AFF               	xorlw	255
  4216  000CBA  148A               	andwf	3978,w,c	;volatile
  4217  000CBC  6E8A               	movwf	3978,c	;volatile
  4218  000CBE                     l139:
  4219                           
  4220                           ;dc_motor.c: 40: }
  4221                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4222  000CBE  EE20 F002          	lfsr	2,2
  4223  000CC2  501D               	movf	setMotorPWM@m,w,c
  4224  000CC4  26D9               	addwf	fsr2l,f,c
  4225  000CC6  501E               	movf	setMotorPWM@m+1,w,c
  4226  000CC8  22DA               	addwfc	fsr2h,f,c
  4227  000CCA  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4228  000CCE  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4229  000CD2  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4230  000CD6  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4231  000CDA  4424               	rlncf	setMotorPWM@PWMduty,w,c
  4232  000CDC  46E8               	rlncf	wreg,f,c
  4233  000CDE  0BFC               	andlw	252
  4234  000CE0  6EDF               	movwf	indf2,c
  4235                           
  4236                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4237  000CE2  EE20 F004          	lfsr	2,4
  4238  000CE6  501D               	movf	setMotorPWM@m,w,c
  4239  000CE8  26D9               	addwf	fsr2l,f,c
  4240  000CEA  501E               	movf	setMotorPWM@m+1,w,c
  4241  000CEC  22DA               	addwfc	fsr2h,f,c
  4242  000CEE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4243  000CF2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4244  000CF6  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4245  000CFA  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4246  000CFE  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4247  000D02  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4248  000D06  0E06               	movlw	6
  4249  000D08  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  4250  000D0A                     u1145:
  4251  000D0A  3422               	rlcf	??_setMotorPWM+3,w,c
  4252  000D0C  3222               	rrcf	??_setMotorPWM+3,f,c
  4253  000D0E  3221               	rrcf	??_setMotorPWM+2,f,c
  4254  000D10  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4255  000D12  D7FB               	goto	u1145
  4256  000D14  5021               	movf	??_setMotorPWM+2,w,c
  4257  000D16  6EDF               	movwf	indf2,c
  4258  000D18  0012               	return		;funcret
  4259  000D1A                     __end_of_setMotorPWM:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           indf1	equ	0xFE7
  4268                           fsr1h	equ	0xFE2
  4269                           fsr1l	equ	0xFE1
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           fsr2h	equ	0xFDA
  4274                           fsr2l	equ	0xFD9
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function ___wmul *****************
  4278 ;; Defined at:
  4279 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  multiplier      2   14[COMRAM] unsigned int 
  4282 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  product         2   18[COMRAM] unsigned int 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  2   14[COMRAM] unsigned int 
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0, prodl, prodh
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4294 ;;      Params:         4       0       0       0
  4295 ;;      Locals:         2       0       0       0
  4296 ;;      Temps:          0       0       0       0
  4297 ;;      Totals:         6       0       0       0
  4298 ;;Total ram usage:        6 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    1
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_setMotorPWM
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text19
  4309  001382                     __ptext19:
  4310                           	opt stack 0
  4311  001382                     ___wmul:
  4312                           	opt stack 26
  4313                           
  4314                           ;incstack = 0
  4315  001382  500F               	movf	___wmul@multiplier,w,c
  4316  001384  0211               	mulwf	___wmul@multiplicand,c
  4317  001386  CFF3 F013          	movff	prodl,___wmul@product
  4318  00138A  CFF4 F014          	movff	prodh,___wmul@product+1
  4319  00138E  500F               	movf	___wmul@multiplier,w,c
  4320  001390  0212               	mulwf	___wmul@multiplicand+1,c
  4321  001392  50F3               	movf	prodl,w,c
  4322  001394  2614               	addwf	___wmul@product+1,f,c
  4323  001396  5010               	movf	___wmul@multiplier+1,w,c
  4324  001398  0211               	mulwf	___wmul@multiplicand,c
  4325  00139A  50F3               	movf	prodl,w,c
  4326  00139C  2614               	addwf	___wmul@product+1,f,c
  4327  00139E  C013  F00F         	movff	___wmul@product,?___wmul
  4328  0013A2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4329  0013A6  0012               	return	
  4330  0013A8                     __end_of___wmul:
  4331                           	opt stack 0
  4332                           tblptru	equ	0xFF8
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           postinc0	equ	0xFEE
  4337                           wreg	equ	0xFE8
  4338                           indf1	equ	0xFE7
  4339                           fsr1h	equ	0xFE2
  4340                           fsr1l	equ	0xFE1
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           postdec2	equ	0xFDD
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function ___awdiv *****************
  4349 ;; Defined at:
  4350 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  dividend        2   20[COMRAM] int 
  4353 ;;  divisor         2   22[COMRAM] int 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  quotient        2   26[COMRAM] int 
  4356 ;;  sign            1   25[COMRAM] unsigned char 
  4357 ;;  counter         1   24[COMRAM] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  2   20[COMRAM] int 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4367 ;;      Params:         4       0       0       0
  4368 ;;      Locals:         4       0       0       0
  4369 ;;      Temps:          0       0       0       0
  4370 ;;      Totals:         8       0       0       0
  4371 ;;Total ram usage:        8 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    1
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_setMotorPWM
  4378 ;;		_ScanWithRange
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text20
  4383  000FE0                     __ptext20:
  4384                           	opt stack 0
  4385  000FE0                     ___awdiv:
  4386                           	opt stack 26
  4387                           
  4388                           ;incstack = 0
  4389  000FE0  0E00               	movlw	0
  4390  000FE2  6E1A               	movwf	___awdiv@sign,c
  4391  000FE4  AE18               	btfss	___awdiv@divisor+1,7,c
  4392  000FE6  D006               	goto	l1795
  4393  000FE8  6C17               	negf	___awdiv@divisor,c
  4394  000FEA  1E18               	comf	___awdiv@divisor+1,f,c
  4395  000FEC  B0D8               	btfsc	status,0,c
  4396  000FEE  2A18               	incf	___awdiv@divisor+1,f,c
  4397  000FF0  0E01               	movlw	1
  4398  000FF2  6E1A               	movwf	___awdiv@sign,c
  4399  000FF4                     l1795:
  4400  000FF4  AE16               	btfss	___awdiv@dividend+1,7,c
  4401  000FF6  D006               	goto	l1801
  4402  000FF8  6C15               	negf	___awdiv@dividend,c
  4403  000FFA  1E16               	comf	___awdiv@dividend+1,f,c
  4404  000FFC  B0D8               	btfsc	status,0,c
  4405  000FFE  2A16               	incf	___awdiv@dividend+1,f,c
  4406  001000  0E01               	movlw	1
  4407  001002  1A1A               	xorwf	___awdiv@sign,f,c
  4408  001004                     l1801:
  4409  001004  0E00               	movlw	0
  4410  001006  6E1C               	movwf	___awdiv@quotient+1,c
  4411  001008  0E00               	movlw	0
  4412  00100A  6E1B               	movwf	___awdiv@quotient,c
  4413  00100C  5017               	movf	___awdiv@divisor,w,c
  4414  00100E  1018               	iorwf	___awdiv@divisor+1,w,c
  4415  001010  B4D8               	btfsc	status,2,c
  4416  001012  D01C               	goto	l1823
  4417  001014  0E01               	movlw	1
  4418  001016  6E19               	movwf	___awdiv@counter,c
  4419  001018  D004               	goto	l1809
  4420  00101A                     l1807:
  4421  00101A  90D8               	bcf	status,0,c
  4422  00101C  3617               	rlcf	___awdiv@divisor,f,c
  4423  00101E  3618               	rlcf	___awdiv@divisor+1,f,c
  4424  001020  2A19               	incf	___awdiv@counter,f,c
  4425  001022                     l1809:
  4426  001022  AE18               	btfss	___awdiv@divisor+1,7,c
  4427  001024  D7FA               	goto	l1807
  4428  001026                     l1811:
  4429  001026  90D8               	bcf	status,0,c
  4430  001028  361B               	rlcf	___awdiv@quotient,f,c
  4431  00102A  361C               	rlcf	___awdiv@quotient+1,f,c
  4432  00102C  5017               	movf	___awdiv@divisor,w,c
  4433  00102E  5C15               	subwf	___awdiv@dividend,w,c
  4434  001030  5018               	movf	___awdiv@divisor+1,w,c
  4435  001032  5816               	subwfb	___awdiv@dividend+1,w,c
  4436  001034  A0D8               	btfss	status,0,c
  4437  001036  D005               	goto	l1819
  4438  001038  5017               	movf	___awdiv@divisor,w,c
  4439  00103A  5E15               	subwf	___awdiv@dividend,f,c
  4440  00103C  5018               	movf	___awdiv@divisor+1,w,c
  4441  00103E  5A16               	subwfb	___awdiv@dividend+1,f,c
  4442  001040  801B               	bsf	___awdiv@quotient,0,c
  4443  001042                     l1819:
  4444  001042  90D8               	bcf	status,0,c
  4445  001044  3218               	rrcf	___awdiv@divisor+1,f,c
  4446  001046  3217               	rrcf	___awdiv@divisor,f,c
  4447  001048  2E19               	decfsz	___awdiv@counter,f,c
  4448  00104A  D7ED               	goto	l1811
  4449  00104C                     l1823:
  4450  00104C  501A               	movf	___awdiv@sign,w,c
  4451  00104E  B4D8               	btfsc	status,2,c
  4452  001050  D004               	goto	l1827
  4453  001052  6C1B               	negf	___awdiv@quotient,c
  4454  001054  1E1C               	comf	___awdiv@quotient+1,f,c
  4455  001056  B0D8               	btfsc	status,0,c
  4456  001058  2A1C               	incf	___awdiv@quotient+1,f,c
  4457  00105A                     l1827:
  4458  00105A  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4459  00105E  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4460  001062  0012               	return	
  4461  001064                     __end_of___awdiv:
  4462                           	opt stack 0
  4463                           tblptru	equ	0xFF8
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           postinc0	equ	0xFEE
  4468                           wreg	equ	0xFE8
  4469                           indf1	equ	0xFE7
  4470                           fsr1h	equ	0xFE2
  4471                           fsr1l	equ	0xFE1
  4472                           indf2	equ	0xFDF
  4473                           postinc2	equ	0xFDE
  4474                           postdec2	equ	0xFDD
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _grabRightIR *****************
  4480 ;; Defined at:
  4481 ;;		line 74 in file "IR_Reading.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4486 ;;  i               1   21[COMRAM] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  2   14[COMRAM] unsigned int 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4496 ;;      Params:         2       0       0       0
  4497 ;;      Locals:         3       0       0       0
  4498 ;;      Temps:          3       0       0       0
  4499 ;;      Totals:         8       0       0       0
  4500 ;;Total ram usage:        8 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    1
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_ScanIR
  4507 ;;		_ScanWithRange
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text21
  4512  001064                     __ptext21:
  4513                           	opt stack 0
  4514  001064                     _grabRightIR:
  4515                           	opt stack 28
  4516                           
  4517                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4518                           
  4519                           ;incstack = 0
  4520  001064  0E00               	movlw	0
  4521  001066  6E15               	movwf	grabRightIR@IR_signal+1,c
  4522  001068  0E00               	movlw	0
  4523  00106A  6E14               	movwf	grabRightIR@IR_signal,c
  4524                           
  4525                           ;IR_Reading.c: 77: unsigned char i=0;
  4526  00106C  0E00               	movlw	0
  4527  00106E  6E16               	movwf	grabRightIR@i,c
  4528                           
  4529                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4530  001070  0E00               	movlw	0
  4531  001072  6E16               	movwf	grabRightIR@i,c
  4532  001074                     l1937:
  4533  001074  0E03               	movlw	3
  4534  001076  6416               	cpfsgt	grabRightIR@i,c
  4535  001078  D001               	goto	l1941
  4536  00107A  D020               	goto	l1947
  4537  00107C                     l1941:
  4538                           
  4539                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  4540  00107C  5069               	movf	3945,w,c	;volatile
  4541  00107E  6E11               	movwf	??_grabRightIR& (0+255),c
  4542  001080  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  4543  001082  0E06               	movlw	6
  4544  001084                     u1365:
  4545  001084  90D8               	bcf	status,0,c
  4546  001086  3611               	rlcf	??_grabRightIR,f,c
  4547  001088  3612               	rlcf	??_grabRightIR+1,f,c
  4548  00108A  2EE8               	decfsz	wreg,f,c
  4549  00108C  D7FB               	goto	u1365
  4550  00108E  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  4551  001092  90D8               	bcf	status,0,c
  4552  001094  3213               	rrcf	??_grabRightIR+2,f,c
  4553  001096  90D8               	bcf	status,0,c
  4554  001098  3213               	rrcf	??_grabRightIR+2,f,c
  4555  00109A  5013               	movf	??_grabRightIR+2,w,c
  4556  00109C  1211               	iorwf	??_grabRightIR,f,c
  4557  00109E  0E00               	movlw	0
  4558  0010A0  1212               	iorwf	??_grabRightIR+1,f,c
  4559  0010A2  5011               	movf	??_grabRightIR,w,c
  4560  0010A4  2614               	addwf	grabRightIR@IR_signal,f,c
  4561  0010A6  5012               	movf	??_grabRightIR+1,w,c
  4562  0010A8  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  4563                           
  4564                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4565  0010AA  0E82               	movlw	130
  4566  0010AC  6E11               	movwf	??_grabRightIR& (0+255),c
  4567  0010AE  0EDE               	movlw	222
  4568  0010B0                     u2197:
  4569  0010B0  2EE8               	decfsz	wreg,f,c
  4570  0010B2  D7FE               	goto	u2197
  4571  0010B4  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  4572  0010B6  D7FC               	goto	u2197
  4573  0010B8  2A16               	incf	grabRightIR@i,f,c
  4574  0010BA  D7DC               	goto	l1937
  4575  0010BC                     l1947:
  4576                           
  4577                           ;IR_Reading.c: 83: }
  4578                           ;IR_Reading.c: 85: return IR_signal>>2;
  4579  0010BC  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  4580  0010C0  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4581  0010C4  90D8               	bcf	status,0,c
  4582  0010C6  3212               	rrcf	??_grabRightIR+1,f,c
  4583  0010C8  3211               	rrcf	??_grabRightIR,f,c
  4584  0010CA  90D8               	bcf	status,0,c
  4585  0010CC  3212               	rrcf	??_grabRightIR+1,f,c
  4586  0010CE  3211               	rrcf	??_grabRightIR,f,c
  4587  0010D0  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  4588  0010D4  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  4589  0010D8  0012               	return	
  4590  0010DA                     __end_of_grabRightIR:
  4591                           	opt stack 0
  4592                           tblptru	equ	0xFF8
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           indf1	equ	0xFE7
  4599                           fsr1h	equ	0xFE2
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _grabLeftIR *****************
  4609 ;; Defined at:
  4610 ;;		line 90 in file "IR_Reading.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;		None
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4615 ;;  i               1   21[COMRAM] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  2   14[COMRAM] unsigned int 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4625 ;;      Params:         2       0       0       0
  4626 ;;      Locals:         3       0       0       0
  4627 ;;      Temps:          3       0       0       0
  4628 ;;      Totals:         8       0       0       0
  4629 ;;Total ram usage:        8 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    1
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_ScanIR
  4636 ;;		_ScanWithRange
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text22
  4641  0010DA                     __ptext22:
  4642                           	opt stack 0
  4643  0010DA                     _grabLeftIR:
  4644                           	opt stack 28
  4645                           
  4646                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  4647                           
  4648                           ;incstack = 0
  4649  0010DA  0E00               	movlw	0
  4650  0010DC  6E15               	movwf	grabLeftIR@IR_signal+1,c
  4651  0010DE  0E00               	movlw	0
  4652  0010E0  6E14               	movwf	grabLeftIR@IR_signal,c
  4653                           
  4654                           ;IR_Reading.c: 93: unsigned char i=0;
  4655  0010E2  0E00               	movlw	0
  4656  0010E4  6E16               	movwf	grabLeftIR@i,c
  4657                           
  4658                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  4659  0010E6  0E00               	movlw	0
  4660  0010E8  6E16               	movwf	grabLeftIR@i,c
  4661  0010EA                     l1921:
  4662  0010EA  0E03               	movlw	3
  4663  0010EC  6416               	cpfsgt	grabLeftIR@i,c
  4664  0010EE  D001               	goto	l1925
  4665  0010F0  D020               	goto	l1931
  4666  0010F2                     l1925:
  4667                           
  4668                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  4669  0010F2  5067               	movf	3943,w,c	;volatile
  4670  0010F4  6E11               	movwf	??_grabLeftIR& (0+255),c
  4671  0010F6  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  4672  0010F8  0E06               	movlw	6
  4673  0010FA                     u1335:
  4674  0010FA  90D8               	bcf	status,0,c
  4675  0010FC  3611               	rlcf	??_grabLeftIR,f,c
  4676  0010FE  3612               	rlcf	??_grabLeftIR+1,f,c
  4677  001100  2EE8               	decfsz	wreg,f,c
  4678  001102  D7FB               	goto	u1335
  4679  001104  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  4680  001108  90D8               	bcf	status,0,c
  4681  00110A  3213               	rrcf	??_grabLeftIR+2,f,c
  4682  00110C  90D8               	bcf	status,0,c
  4683  00110E  3213               	rrcf	??_grabLeftIR+2,f,c
  4684  001110  5013               	movf	??_grabLeftIR+2,w,c
  4685  001112  1211               	iorwf	??_grabLeftIR,f,c
  4686  001114  0E00               	movlw	0
  4687  001116  1212               	iorwf	??_grabLeftIR+1,f,c
  4688  001118  5011               	movf	??_grabLeftIR,w,c
  4689  00111A  2614               	addwf	grabLeftIR@IR_signal,f,c
  4690  00111C  5012               	movf	??_grabLeftIR+1,w,c
  4691  00111E  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  4692                           
  4693                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  4694  001120  0E82               	movlw	130
  4695  001122  6E11               	movwf	??_grabLeftIR& (0+255),c
  4696  001124  0EDE               	movlw	222
  4697  001126                     u2207:
  4698  001126  2EE8               	decfsz	wreg,f,c
  4699  001128  D7FE               	goto	u2207
  4700  00112A  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  4701  00112C  D7FC               	goto	u2207
  4702  00112E  2A16               	incf	grabLeftIR@i,f,c
  4703  001130  D7DC               	goto	l1921
  4704  001132                     l1931:
  4705                           
  4706                           ;IR_Reading.c: 99: }
  4707                           ;IR_Reading.c: 101: return IR_signal>>2;
  4708  001132  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  4709  001136  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  4710  00113A  90D8               	bcf	status,0,c
  4711  00113C  3212               	rrcf	??_grabLeftIR+1,f,c
  4712  00113E  3211               	rrcf	??_grabLeftIR,f,c
  4713  001140  90D8               	bcf	status,0,c
  4714  001142  3212               	rrcf	??_grabLeftIR+1,f,c
  4715  001144  3211               	rrcf	??_grabLeftIR,f,c
  4716  001146  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  4717  00114A  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  4718  00114E  0012               	return	
  4719  001150                     __end_of_grabLeftIR:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           indf1	equ	0xFE7
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _delay_tenth_s *****************
  4738 ;; Defined at:
  4739 ;;		line 19 in file "Movement.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  tenth_second    1    wreg     unsigned char 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  tenth_second    1   15[COMRAM] unsigned char 
  4744 ;;  i               2   16[COMRAM] unsigned int 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4754 ;;      Params:         0       0       0       0
  4755 ;;      Locals:         3       0       0       0
  4756 ;;      Temps:          1       0       0       0
  4757 ;;      Totals:         4       0       0       0
  4758 ;;Total ram usage:        4 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;;		_ScanIR
  4766 ;;		_ScanWithRange
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text23
  4771  00128C                     __ptext23:
  4772                           	opt stack 0
  4773  00128C                     _delay_tenth_s:
  4774                           	opt stack 29
  4775                           
  4776                           ;incstack = 0
  4777                           ;delay_tenth_s@tenth_seconds stored from wreg
  4778  00128C  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  4779                           
  4780                           ;Movement.c: 20: unsigned int i=0;
  4781  00128E  0E00               	movlw	0
  4782  001290  6E12               	movwf	delay_tenth_s@i+1,c
  4783  001292  0E00               	movlw	0
  4784  001294  6E11               	movwf	delay_tenth_s@i,c
  4785                           
  4786                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  4787  001296  0E00               	movlw	0
  4788  001298  6E12               	movwf	delay_tenth_s@i+1,c
  4789  00129A  0E01               	movlw	1
  4790  00129C  6E11               	movwf	delay_tenth_s@i,c
  4791  00129E  D009               	goto	l1897
  4792  0012A0                     l1893:
  4793                           
  4794                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  4795  0012A0  0E82               	movlw	130
  4796  0012A2  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  4797  0012A4  0EDE               	movlw	222
  4798  0012A6                     u2217:
  4799  0012A6  2EE8               	decfsz	wreg,f,c
  4800  0012A8  D7FE               	goto	u2217
  4801  0012AA  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  4802  0012AC  D7FC               	goto	u2217
  4803  0012AE  4A11               	infsnz	delay_tenth_s@i,f,c
  4804  0012B0  2A12               	incf	delay_tenth_s@i+1,f,c
  4805  0012B2                     l1897:
  4806  0012B2  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  4807  0012B4  0D02               	mullw	2
  4808  0012B6  5011               	movf	delay_tenth_s@i,w,c
  4809  0012B8  5CF3               	subwf	prodl,w,c
  4810  0012BA  5012               	movf	delay_tenth_s@i+1,w,c
  4811  0012BC  58F4               	subwfb	prodh,w,c
  4812  0012BE  A0D8               	btfss	status,0,c
  4813  0012C0  0012               	return	
  4814  0012C2  D7EE               	goto	l1893
  4815  0012C4                     __end_of_delay_tenth_s:
  4816                           	opt stack 0
  4817                           tblptru	equ	0xFF8
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           intcon	equ	0xFF2
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           indf1	equ	0xFE7
  4824                           fsr1h	equ	0xFE2
  4825                           fsr1l	equ	0xFE1
  4826                           indf2	equ	0xFDF
  4827                           postinc2	equ	0xFDE
  4828                           postdec2	equ	0xFDD
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function _InterruptHandlerHigh *****************
  4834 ;; Defined at:
  4835 ;;		line 17 in file "main.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;		None               void
  4842 ;; Registers used:
  4843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4849 ;;      Params:         0       0       0       0
  4850 ;;      Locals:         0       0       0       0
  4851 ;;      Temps:         14       0       0       0
  4852 ;;      Totals:        14       0       0       0
  4853 ;;Total ram usage:       14 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		Interrupt level 2
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	intcode
  4863  000008                     __pintcode:
  4864                           	opt stack 0
  4865  000008                     _InterruptHandlerHigh:
  4866                           	opt stack 25
  4867                           
  4868                           ;incstack = 0
  4869  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4870  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  4871  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  4872  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  4873  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  4874  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  4875  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  4876  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  4877  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  4878  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  4879  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  4880  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  4881  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  4882  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  4883  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  4884                           
  4885                           ;main.c: 19: if (PIR1bits.RCIF) {
  4886  000042  AA9E               	btfss	3998,5,c	;volatile
  4887  000044  D016               	goto	i2l66
  4888                           
  4889                           ;main.c: 20: ReceivedString[i]=RCREG;
  4890  000046  504F               	movf	_i,w,c	;volatile
  4891  000048  0D01               	mullw	1
  4892  00004A  0EEC               	movlw	low _ReceivedString
  4893  00004C  24F3               	addwf	prodl,w,c
  4894  00004E  6ED9               	movwf	fsr2l,c
  4895  000050  0E01               	movlw	high _ReceivedString
  4896  000052  20F4               	addwfc	prodh,w,c
  4897  000054  6EDA               	movwf	fsr2h,c
  4898  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  4899                           
  4900                           ;main.c: 21: RFID_Read=1;
  4901  00005A  0E01               	movlw	1
  4902  00005C  0101               	movlb	1	; () banked
  4903  00005E  6FEB               	movwf	_RFID_Read& (0+255),b	;volatile
  4904                           
  4905                           ; BSR set to: 1
  4906                           ;main.c: 22: if (i==15){
  4907  000060  0E0F               	movlw	15
  4908  000062  184F               	xorwf	_i,w,c	;volatile
  4909  000064  A4D8               	btfss	status,2,c
  4910  000066  D003               	goto	i2l2337
  4911                           
  4912                           ; BSR set to: 1
  4913                           ;main.c: 23: i=0;
  4914  000068  0E00               	movlw	0
  4915  00006A  6E4F               	movwf	_i,c	;volatile
  4916                           
  4917                           ;main.c: 24: }else{
  4918  00006C  D001               	goto	i2l2339
  4919  00006E                     i2l2337:
  4920                           
  4921                           ; BSR set to: 1
  4922                           ;main.c: 25: i++;
  4923  00006E  2A4F               	incf	_i,f,c	;volatile
  4924  000070                     i2l2339:
  4925                           
  4926                           ; BSR set to: 1
  4927                           ;main.c: 26: }
  4928                           ;main.c: 27: PIR1bits.RCIF=0;
  4929  000070  9A9E               	bcf	3998,5,c	;volatile
  4930  000072                     i2l66:
  4931  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  4932  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  4933  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  4934  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  4935  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  4936  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  4937  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  4938  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  4939  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  4940  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  4941  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  4942  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  4943  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  4944  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  4945  0000AA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4946  0000AC  0011               	retfie		f
  4947  0000AE                     __end_of_InterruptHandlerHigh:
  4948                           	opt stack 0
  4949  0000                     pclatu	equ	0xFFB
  4950                           pclath	equ	0xFFA
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           fsr0h	equ	0xFEA
  4960                           fsr0l	equ	0xFE9
  4961                           wreg	equ	0xFE8
  4962                           indf1	equ	0xFE7
  4963                           fsr1h	equ	0xFE2
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           pclatu	equ	0xFFB
  4972                           pclath	equ	0xFFA
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           postinc0	equ	0xFEE
  4981                           fsr0h	equ	0xFEA
  4982                           fsr0l	equ	0xFE9
  4983                           wreg	equ	0xFE8
  4984                           indf1	equ	0xFE7
  4985                           fsr1h	equ	0xFE2
  4986                           fsr1l	equ	0xFE1
  4987                           indf2	equ	0xFDF
  4988                           postinc2	equ	0xFDE
  4989                           postdec2	equ	0xFDD
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994                           	psect	rparam
  4995  0000                     pclatu	equ	0xFFB
  4996                           pclath	equ	0xFFA
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           intcon	equ	0xFF2
  5004                           postinc0	equ	0xFEE
  5005                           fsr0h	equ	0xFEA
  5006                           fsr0l	equ	0xFE9
  5007                           wreg	equ	0xFE8
  5008                           indf1	equ	0xFE7
  5009                           fsr1h	equ	0xFE2
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           postinc2	equ	0xFDE
  5013                           postdec2	equ	0xFDD
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018                           	psect	temp
  5019  000050                     btemp:
  5020                           	opt stack 0
  5021  000050                     	ds	1
  5022  0000                     int$flags	set	btemp
  5023                           pclatu	equ	0xFFB
  5024                           pclath	equ	0xFFA
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           intcon	equ	0xFF2
  5032                           postinc0	equ	0xFEE
  5033                           fsr0h	equ	0xFEA
  5034                           fsr0l	equ	0xFE9
  5035                           wreg	equ	0xFE8
  5036                           indf1	equ	0xFE7
  5037                           fsr1h	equ	0xFE2
  5038                           fsr1l	equ	0xFE1
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      79
    BANK0           160      0       0
    BANK1           256    235     252
    BANK2           256      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               340   340      0   85233
                                             76 COMRAM     2     2      0
                                              0 BANK1    235   235      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             20 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             18 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             14 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3331
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       30    23      7   27524
                                             46 COMRAM    30    23      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   24822
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    8838
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    9478
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    5207
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2859
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1787
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     906
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EB      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14B       3        0.0%
DATA                 0      0     14B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 23:23:22 2018

                        ?_grabRightIR 000F                                     _i 004F  
                                  l69 0682                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 01C8  
                                 l139 0CBE                                   l169 11A2  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0164  
                        main@MoveType 0100                                  l2023 127A  
                                l2113 0332                                  l2105 02F4  
                                l2033 1370                                  l2019 1268  
                                l2301 0BE2                                  l2205 0568  
                                l2141 03D6                                  l2221 05DC  
                                l2127 039A                                  l2119 0336  
                                l2311 0EF4                                  l2241 0AAE  
                                l2081 022E                                  l2073 01D6  
                                l2323 0F4C                                  l2315 0EFC  
                                l2411 07D0                                  l2261 0B04  
                                l2173 049E                                  l2149 043A  
                                l2157 0450                                  l2077 0202  
                                l2421 082C                                  l2255 0B00  
                                l2247 0AB2                                  l2167 049A  
                                l2431 086E                                  l2407 07B4  
                                l1801 1004                                  l2273 0B54  
                                l2097 0290                                  l2433 0874  
                                l2425 0836                                  l1811 1026  
                                l2283 0BA2                                  l2443 089A  
                                l2189 04E6                                  l2437 087E  
                                l2445 089E                                  l2453 08E2  
                                l2365 0688                                  l1807 101A  
                                l1823 104C                                  l2199 0564  
                                l1921 10EA                                  l1809 1022  
                                l2289 0BA6                                  l2473 09B2  
                                l2457 08FC                                  l2393 0762  
                                l2385 070E                                  l2481 09E4  
                                l1931 1132                                  l1827 105A  
                                l1819 1042                                  l1851 116A  
                                l2475 09DE                                  l2467 0954  
                                l2459 0904                                  l1925 10F2  
                                l1941 107C                                  l1837 0C96  
                                l2397 0774                                  l2389 0744  
                                l1855 1182                                  l1847 1152  
                                l1937 1074                                  l1873 0F82  
                                l1865 0F52                                  l1947 10BC  
                                l1795 0FF4                                  l1893 12A0  
                                l1869 0F6A                                  l1879 0FA2  
                                l1897 12B2                                  u1124 0C5A  
                                u1125 0C56                                  u1134 0CB2  
                                u1135 0CAE                                  u1145 0D0A  
                                u1235 0D24                                  u1315 1336  
                                u2107 0E82                                  u2027 0DF2  
                                u1316 1338                                  u1405 136C  
                                u1245 0D32                                  u2117 0E94  
                                u2037 0E08                                  u1406 136E  
                                _LATB 000F8A                                  u2207 1126  
                                u1335 10FA                                  u1255 0D50  
                                u2127 1344                                  u2047 0E18  
                                u2217 12A6                                  u1425 137E  
                                u1265 0D5E                                  u2137 1354  
                                u2057 0E26                                  u1426 1380  
                                u2147 0DD8                                  u1275 0D7E  
                                u2067 0E34                                  u1365 1084  
                                u2157 140A                                  u1285 0D8C  
                                u2077 0E46                                  u2167 126E  
                                u1295 0DBC                                  u2087 0E58  
                                u2177 0F9C                                  u2097 0E6E  
                                u2187 119C                                  u2197 10B0  
                                u1840 07FA                                  u1850 080C  
                                u1842 07FC                                  u1852 080E  
                                i2l66 0072                                  _main 05E0  
                       main@ScanAngle 01D5                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0050  
                                _stop 0F50                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00AE                        delay_s@seconds 0010  
                        ___param_bank 000010                       __end_of_SendLCD 135C  
                               ?_main 0001                       __end_of___awdiv 1064  
                               ?_stop 0026                       ___awdiv@divisor 0017  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0016  
                       _initRFID$1317 000F                       ___awdiv@counter 0019  
                               _RCREG 000FAE                                 _E_TOG 1406  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 128C  
                     __end_of_initLCD 0E9C                                 main@i 01D7  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 052E                       __initialization 13EA  
                        __end_of_main 0A02                          __end_of_stop 0FE0  
                      delay_tenth_s@i 0011                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 1382                   VerifySignal@hexByte 0018  
                              ??_main 004D                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 001D  
              __size_of_fullSpeedBack 0036                      ___awdiv@dividend 0015  
                              i2l2337 006E                                i2l2339 0070  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 12C4  
                              _LCDout 0D1A                           SendLCD@Byte 0014  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                         SendLCD@type 0013                             ??_SendLCD 0014  
                              _ScanIR 0A02                                ___wmul 1382  
                           ??___awdiv 0019                      __end_of_initRFID 13EA  
                              _initIR 13A8                  __size_of_grabRightIR 0076  
                              clear_0 13F0                      ___awdiv@quotient 001B  
                           ??_delay_s 000F                                main@mL 01D9  
                              main@mR 01E2                        ??_initMotorPWM 000F  
                           ??_initLCD 0015                         _ScanWithRange 00B2  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 1254  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 13F8  
                       ___rparam_used 000001                         __end_of_E_TOG 1414  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 12C4  
                      ?_ScanWithRange 002F                  VerifySignal@checksum 0017  
                             ??_E_TOG 000F         __size_of_InterruptHandlerHigh 00A6  
          delay_tenth_s@tenth_seconds 0010                            __pbssBANK1 01EB  
                             ?_LCDout 0001                               ?_ScanIR 002F  
                      ?_fullSpeedBack 002B                 __size_of_enableSensor 0026  
                             ?___wmul 000F                   grabLeftIR@IR_signal 0014  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0070  
                          _grabLeftIR 10DA                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 0134                       __size_of_LCDout 00C6  
                        _enableSensor 135C                    __size_of_turnRight 004A  
                __end_of_initMotorPWM 132C                               _SendLCD 132C  
                             __Hparam 0000                               __Lparam 0000  
                     __size_of_ScanIR 01E4                               ___awdiv 0FE0  
                     __size_of___wmul 0026                       __size_of_initIR 0022  
                             __pcinit 13EA                       ??_ScanWithRange 0036  
                             _delay_s 1254                               __ramtop 0300  
                           ?_turnLeft 002B                               __ptext0 05E0  
                             __ptext1 13CA                               __ptext2 12FA  
                             __ptext3 0DE0                               __ptext4 132C  
                             __ptext5 0D1A                               __ptext6 1406  
                             __ptext7 13A8                               __ptext8 12C4  
                             __ptext9 135C                               _initLCD 0DE0  
                        LCDout@number 0012                         ?_VerifySignal 000F  
                end_of_initialization 13F8                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                  ScanIR@SensorResult 003B                       ??_fullSpeedBack 002F  
                           _RFID_Read 01EB                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 002F  
                   __end_of_turnRight 120A                           ?_grabLeftIR 000F  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0011  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0039                        __end_of_LCDout 0DE0  
                           _TXSTAbits 000FAC                         ??_grabRightIR 0011  
                      __end_of_ScanIR 0BE6                        _fullSpeedAhead 1150  
                      _ReceivedString 01EC                        __end_of___wmul 13A8  
                         _BAUDCONbits 000FAA                        __end_of_initIR 13CA  
              __size_of_delay_tenth_s 0038                   start_initialization 13EA  
                  VerifySignal@Signal 000F                 __size_of_initMotorPWM 0032  
                            ??_LCDout 000F          __end_of_InterruptHandlerHigh 00AE  
                            ??_ScanIR 0033                __end_of_fullSpeedAhead 11C0  
                 __size_of_grabLeftIR 0076                              ??___wmul 0013  
                            ??_initIR 000F                   __end_of_grabRightIR 10DA  
                        _initMotorPWM 12FA                           __pbssCOMRAM 004F  
                       __pcstackBANK1 0100      ScanWithRange@DirectionFoundLimit 003D  
                       _delay_tenth_s 128C                     __size_of_initRFID 0020  
   ScanWithRange@ClearSignalTolerance 003B                              ?_SendLCD 0013  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                __end_of_VerifySignal 0F50                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                      __size_of_E_TOG 000E                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 0045            ScanWithRange@SensorResultL 0041  
          ScanWithRange@SensorResultR 0049                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 1064                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 05E0  
                        setMotorPWM@m 001D                 ScanWithRange@MoveTime 0034  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 11C0            ScanIR@ClearSignalTolerance 0035  
                 __end_of_setMotorPWM 0D1A                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 12FA                    __end_of_grabLeftIR 1150  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                    __size_of_initLCD 00BC                            ?_turnRight 002B  
                            __ptext10 1254                              __ptext11 0E9C  
                            __ptext20 0FE0                              __ptext12 00B2  
                            __ptext21 1064                              __ptext13 0A02  
                            __ptext22 10DA                              __ptext14 11C0  
                            __ptext23 128C                              __ptext15 120A  
                            __ptext16 0F50                              __ptext17 1150  
                            __ptext18 0BE6                              __ptext19 1382  
                     ??_delay_tenth_s 000F                              _initRFID 13CA  
                       __size_of_main 0422             ScanWithRange@ResultFalseC 0039  
                  main@DirectionFound 01D6             ScanWithRange@ResultFalseL 0038  
           ScanWithRange@ResultFalseR 003A                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
               __size_of_VerifySignal 00B4                              delay_s@i 0011  
                            int$flags 0050                              main@Move 01D8  
                            main@mode 01D4                              main@test 01D2  
                            _turnLeft 120A                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                         VerifySignal@i 001A  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 0BE6                          _VerifySignal 0E9C  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 003F                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
