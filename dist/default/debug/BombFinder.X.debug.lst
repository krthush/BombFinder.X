

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 19:09:10 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     _CAP1BUFH	set	3945
    33  0000                     _CAP1BUFL	set	3944
    34  0000                     _CAP1CON	set	3939
    35  0000                     _CAP2BUFH	set	3943
    36  0000                     _CAP2BUFL	set	3942
    37  0000                     _CAP2CON	set	3938
    38  0000                     _LATAbits	set	3977
    39  0000                     _LATB	set	3978
    40  0000                     _LATCbits	set	3979
    41  0000                     _LATDbits	set	3980
    42  0000                     _LATEbits	set	3981
    43  0000                     _PTCON0	set	3967
    44  0000                     _PTCON1	set	3966
    45  0000                     _PTPERH	set	3962
    46  0000                     _PTPERL	set	3963
    47  0000                     _PWMCON0	set	3951
    48  0000                     _PWMCON1	set	3950
    49  0000                     _TRISAbits	set	3986
    50  0000                     _TRISBbits	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TRISCbits	set	3988
    53  0000                     _TRISDbits	set	3989
    54  0000                     _TRISEbits	set	3990
    55  0000                     _PDC0H	set	3960
    56  0000                     _PDC0L	set	3961
    57  0000                     _PDC1H	set	3958
    58  0000                     _PDC1L	set	3959
    59  0000                     _ANSEL0bits	set	4024
    60  0000                     _BAUDCONbits	set	4010
    61  0000                     _IPR1bits	set	3999
    62  0000                     _OSCCON	set	4051
    63  0000                     _OSCCONbits	set	4051
    64  0000                     _PIE1bits	set	3997
    65  0000                     _PIR1bits	set	3998
    66  0000                     _RCONbits	set	4048
    67  0000                     _RCREG	set	4014
    68  0000                     _RCSTAbits	set	4011
    69  0000                     _SPBRG	set	4015
    70  0000                     _SPBRGH	set	4016
    71  0000                     _T5CON	set	4023
    72  0000                     _TXREG	set	4013
    73  0000                     _TXSTAbits	set	4012
    74  0000                     _INTCONbits	set	4082
    75                           
    76                           ; #config settings
    77  0000                     
    78                           	psect	cinit
    79  000E48                     __pcinit:
    80                           	opt stack 0
    81  000E48                     start_initialization:
    82                           	opt stack 0
    83  000E48                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to COMRAM (17 bytes)
    87  000E48  EE00  F03B         	lfsr	0,__pbssCOMRAM
    88  000E4C  0E11               	movlw	17
    89  000E4E                     clear_0:
    90  000E4E  6AEE               	clrf	postinc0,c
    91  000E50  06E8               	decf	wreg,f,c
    92  000E52  E1FD               	bnz	clear_0
    93  000E54                     end_of_initialization:
    94                           	opt stack 0
    95  000E54                     __end_of__initialization:
    96                           	opt stack 0
    97  000E54  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    98  000E56  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    99  000E58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   100  000E5A  6EF8               	movwf	tblptru,c
   101  000E5C  0100               	movlb	0
   102  000E5E  EF68  F002         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssCOMRAM
   108  00003B                     __pbssCOMRAM:
   109                           	opt stack 0
   110  00003B                     _ReceivedString:
   111                           	opt stack 0
   112  00003B                     	ds	16
   113  00004B                     _i:
   114                           	opt stack 0
   115  00004B                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	cstackBANK0
   121  000060                     __pcstackBANK0:
   122                           	opt stack 0
   123  000060                     ScanWithRange@ResultFalseL:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0x0
   127  000060                     	ds	1
   128  000061                     ScanWithRange@ResultFalseC:
   129                           	opt stack 0
   130                           
   131                           ; 1 bytes @ 0x1
   132  000061                     	ds	1
   133  000062                     ScanWithRange@ResultFalseR:
   134                           	opt stack 0
   135                           
   136                           ; 1 bytes @ 0x2
   137  000062                     	ds	1
   138  000063                     ScanWithRange@ClearSignalTolerance:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x3
   142  000063                     	ds	2
   143  000065                     ScanWithRange@SensorResultL:
   144                           	opt stack 0
   145                           
   146                           ; 4 bytes @ 0x5
   147  000065                     	ds	4
   148  000069                     ScanWithRange@SensorResultC:
   149                           	opt stack 0
   150                           
   151                           ; 4 bytes @ 0x9
   152  000069                     	ds	4
   153  00006D                     ScanWithRange@SensorResultR:
   154                           	opt stack 0
   155                           
   156                           ; 4 bytes @ 0xD
   157  00006D                     	ds	4
   158  000071                     main@test:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x11
   162  000071                     	ds	2
   163  000073                     main@i:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0x13
   167  000073                     	ds	1
   168  000074                     main@ScanAngle:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0x14
   172  000074                     	ds	1
   173  000075                     main@mode:
   174                           	opt stack 0
   175                           
   176                           ; 1 bytes @ 0x15
   177  000075                     	ds	1
   178  000076                     main@DirectionFound:
   179                           	opt stack 0
   180                           
   181                           ; 1 bytes @ 0x16
   182  000076                     	ds	1
   183  000077                     main@mL:
   184                           	opt stack 0
   185                           
   186                           ; 9 bytes @ 0x17
   187  000077                     	ds	9
   188  000080                     main@mR:
   189                           	opt stack 0
   190                           
   191                           ; 9 bytes @ 0x20
   192  000080                     	ds	9
   193                           tblptru	equ	0xFF8
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	cstackCOMRAM
   198  000001                     __pcstackCOMRAM:
   199                           	opt stack 0
   200  000001                     ??_InterruptHandlerHigh:
   201  000001                     
   202                           ; 0 bytes @ 0x0
   203  000001                     	ds	14
   204  00000F                     ??_delay_s:
   205  00000F                     ??_delay_tenth_s:
   206  00000F                     ?_grabLeftIR:
   207                           	opt stack 0
   208  00000F                     ?_grabRightIR:
   209                           	opt stack 0
   210  00000F                     ?___wmul:
   211                           	opt stack 0
   212  00000F                     enableSensor@status:
   213                           	opt stack 0
   214  00000F                     BombDirectionFound@SensorResult:
   215                           	opt stack 0
   216  00000F                     ___wmul@multiplier:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0xE
   220  00000F                     	ds	1
   221  000010                     delay_s@seconds:
   222                           	opt stack 0
   223  000010                     delay_tenth_s@tenth_seconds:
   224                           	opt stack 0
   225  000010                     enableSensor@sensor:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0xF
   229  000010                     	ds	1
   230  000011                     ??_grabLeftIR:
   231  000011                     ??_grabRightIR:
   232  000011                     ??_BombDirectionFound:
   233  000011                     delay_s@i:
   234                           	opt stack 0
   235  000011                     delay_tenth_s@i:
   236                           	opt stack 0
   237  000011                     ___wmul@multiplicand:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x10
   241  000011                     	ds	2
   242  000013                     ___wmul@product:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x12
   246  000013                     	ds	1
   247  000014                     grabRightIR@IR_signal:
   248                           	opt stack 0
   249  000014                     grabLeftIR@IR_signal:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x13
   253  000014                     	ds	1
   254  000015                     ?___awdiv:
   255                           	opt stack 0
   256  000015                     _BombDirectionFound$1381:
   257                           	opt stack 0
   258  000015                     ___awdiv@dividend:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x14
   262  000015                     	ds	1
   263  000016                     grabRightIR@i:
   264                           	opt stack 0
   265  000016                     grabLeftIR@i:
   266                           	opt stack 0
   267  000016                     BombDirectionFound@DirectionFoundLimit:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x15
   271  000016                     	ds	1
   272  000017                     ___awdiv@divisor:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x16
   276  000017                     	ds	1
   277  000018                     BombDirectionFound@DirectionFoundTolerance:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x17
   281  000018                     	ds	1
   282  000019                     ___awdiv@counter:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x18
   286  000019                     	ds	1
   287  00001A                     ___awdiv@sign:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x19
   291  00001A                     	ds	1
   292  00001B                     ___awdiv@quotient:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x1A
   296  00001B                     	ds	2
   297  00001D                     setMotorPWM@m:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x1C
   301  00001D                     	ds	2
   302  00001F                     ??_setMotorPWM:
   303                           
   304                           ; 0 bytes @ 0x1E
   305  00001F                     	ds	5
   306  000024                     setMotorPWM@PWMduty:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x23
   310  000024                     	ds	2
   311  000026                     stop@mL:
   312                           	opt stack 0
   313  000026                     fullSpeedAhead@mL:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x25
   317  000026                     	ds	2
   318  000028                     stop@mR:
   319                           	opt stack 0
   320  000028                     fullSpeedAhead@mR:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x27
   324  000028                     	ds	2
   325  00002A                     
   326                           ; 0 bytes @ 0x29
   327  00002A                     	ds	1
   328  00002B                     turnLeft@mL:
   329                           	opt stack 0
   330  00002B                     turnRight@mL:
   331                           	opt stack 0
   332  00002B                     fullSpeedBack@mL:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2A
   336  00002B                     	ds	2
   337  00002D                     turnLeft@mR:
   338                           	opt stack 0
   339  00002D                     turnRight@mR:
   340                           	opt stack 0
   341  00002D                     fullSpeedBack@mR:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x2C
   345  00002D                     	ds	2
   346  00002F                     ScanIR@mL:
   347                           	opt stack 0
   348  00002F                     ScanWithRange@mL:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x2E
   352  00002F                     	ds	2
   353  000031                     ScanIR@mR:
   354                           	opt stack 0
   355  000031                     ScanWithRange@mR:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x30
   359  000031                     	ds	2
   360  000033                     ??_ScanIR:
   361  000033                     ScanWithRange@tenth_seconds:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x32
   365  000033                     	ds	1
   366  000034                     ??_ScanWithRange:
   367                           
   368                           ; 0 bytes @ 0x33
   369  000034                     	ds	1
   370  000035                     ScanIR@ClearSignalTolerance:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x34
   374  000035                     	ds	2
   375  000037                     ScanIR@SensorResult:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x36
   379  000037                     	ds	4
   380  00003B                     tblptru	equ	0xFF8
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           
   384                           ; 0 bytes @ 0x3A
   385 ;;
   386 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   387 ;;
   388 ;; *************** function _main *****************
   389 ;; Defined at:
   390 ;;		line 29 in file "main.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;		None
   393 ;; Auto vars:     Size  Location     Type
   394 ;;  PathTaken     100    0        unsigned char [100]
   395 ;;  Message        10    0        unsigned char [10]
   396 ;;  mR              9   32[BANK0 ] struct DC_motor
   397 ;;  mL              9   23[BANK0 ] struct DC_motor
   398 ;;  SignalStreng    3    0        unsigned char [3]
   399 ;;  test            2   17[BANK0 ] unsigned int 
   400 ;;  DirectionFou    1   22[BANK0 ] unsigned char 
   401 ;;  mode            1   21[BANK0 ] unsigned char 
   402 ;;  ScanAngle       1   20[BANK0 ] unsigned char 
   403 ;;  i               1   19[BANK0 ] unsigned char 
   404 ;; Return value:  Size  Location     Type
   405 ;;		None               void
   406 ;; Registers used:
   407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   413 ;;      Params:         0       0       0       0
   414 ;;      Locals:         0      24       0       0
   415 ;;      Temps:          0       0       0       0
   416 ;;      Totals:         0      24       0       0
   417 ;;Total ram usage:       24 bytes
   418 ;; Hardware stack levels required when called:    6
   419 ;; This function calls:
   420 ;;		_ScanIR
   421 ;;		_ScanWithRange
   422 ;;		_delay_s
   423 ;;		_enableSensor
   424 ;;		_fullSpeedAhead
   425 ;;		_fullSpeedBack
   426 ;;		_initIR
   427 ;;		_initMotorPWM
   428 ;;		_stop
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text0
   435  0004D0                     __ptext0:
   436                           	opt stack 0
   437  0004D0                     _main:
   438                           	opt stack 25
   439                           
   440                           ;main.c: 32: unsigned char Message[10];
   441                           ;main.c: 33: unsigned char i=0;
   442                           
   443                           ;incstack = 0
   444  0004D0  0E00               	movlw	0
   445  0004D2  0100               	movlb	0	; () banked
   446  0004D4  6F73               	movwf	main@i& (0+255),b
   447                           
   448                           ;main.c: 34: unsigned char mode=0;
   449  0004D6  0E00               	movlw	0
   450  0004D8  0100               	movlb	0	; () banked
   451  0004DA  6F75               	movwf	main@mode& (0+255),b
   452                           
   453                           ;main.c: 35: char DirectionFound=0;
   454  0004DC  0E00               	movlw	0
   455  0004DE  0100               	movlb	0	; () banked
   456  0004E0  6F76               	movwf	main@DirectionFound& (0+255),b
   457                           
   458                           ;main.c: 36: unsigned char SignalStrength[3];
   459                           ;main.c: 37: char PathTaken[100];
   460                           ;main.c: 38: unsigned int test=0;
   461  0004E2  0E00               	movlw	0
   462  0004E4  0100               	movlb	0	; () banked
   463  0004E6  6F72               	movwf	(main@test+1)& (0+255),b
   464  0004E8  0E00               	movlw	0
   465  0004EA  6F71               	movwf	main@test& (0+255),b
   466                           
   467                           ;main.c: 40: unsigned char ScanAngle=6;
   468  0004EC  0E06               	movlw	6
   469  0004EE  0100               	movlb	0	; () banked
   470  0004F0  6F74               	movwf	main@ScanAngle& (0+255),b
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 43: INTCONbits.GIEH = 1;
   474  0004F2  8EF2               	bsf	intcon,7,c	;volatile
   475                           
   476                           ; BSR set to: 0
   477                           ;main.c: 44: RCONbits.IPEN = 1;
   478  0004F4  8ED0               	bsf	4048,7,c	;volatile
   479                           
   480                           ; BSR set to: 0
   481                           ;main.c: 45: INTCONbits.GIEL = 1;
   482  0004F6  8CF2               	bsf	intcon,6,c	;volatile
   483                           
   484                           ; BSR set to: 0
   485                           ;main.c: 46: INTCONbits.INT0IE = 1;
   486  0004F8  88F2               	bsf	intcon,4,c	;volatile
   487                           
   488                           ; BSR set to: 0
   489                           ;main.c: 47: INTCONbits.PEIE = 1;
   490  0004FA  8CF2               	bsf	intcon,6,c	;volatile
   491                           
   492                           ; BSR set to: 0
   493                           ;main.c: 49: IPR1bits.RCIP=1;
   494  0004FC  8A9F               	bsf	3999,5,c	;volatile
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 50: PIE1bits.RCIE=1;
   498  0004FE  8A9D               	bsf	3997,5,c	;volatile
   499                           
   500                           ;main.c: 53: struct DC_motor mL, mR;
   501                           ;main.c: 54: mL.power=0;
   502  000500  0E00               	movlw	0
   503  000502  0100               	movlb	0	; () banked
   504  000504  6F77               	movwf	main@mL& (0+255),b
   505                           
   506                           ;main.c: 55: mL.direction=1;
   507  000506  0E01               	movlw	1
   508  000508  0100               	movlb	0	; () banked
   509  00050A  6F78               	movwf	(main@mL+1)& (0+255),b
   510                           
   511                           ; BSR set to: 0
   512                           ;main.c: 56: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   513  00050C  0E79               	movlw	121
   514  00050E  0100               	movlb	0	; () banked
   515  000510  6F79               	movwf	(main@mL+2)& (0+255),b
   516  000512  0E0F               	movlw	15
   517  000514  0100               	movlb	0	; () banked
   518  000516  6F7A               	movwf	(main@mL+3)& (0+255),b
   519                           
   520                           ; BSR set to: 0
   521                           ;main.c: 57: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   522  000518  0E78               	movlw	120
   523  00051A  0100               	movlb	0	; () banked
   524  00051C  6F7B               	movwf	(main@mL+4)& (0+255),b
   525  00051E  0E0F               	movlw	15
   526  000520  0100               	movlb	0	; () banked
   527  000522  6F7C               	movwf	(main@mL+5)& (0+255),b
   528                           
   529                           ;main.c: 58: mL.dir_pin=0;
   530  000524  0E00               	movlw	0
   531  000526  0100               	movlb	0	; () banked
   532  000528  6F7D               	movwf	(main@mL+6)& (0+255),b
   533                           
   534                           ;main.c: 59: mL.PWMperiod=199;
   535  00052A  0E00               	movlw	0
   536  00052C  0100               	movlb	0	; () banked
   537  00052E  6F7F               	movwf	(main@mL+8)& (0+255),b
   538  000530  0EC7               	movlw	199
   539  000532  6F7E               	movwf	(main@mL+7)& (0+255),b
   540                           
   541                           ;main.c: 61: mR.power=0;
   542  000534  0E00               	movlw	0
   543  000536  0100               	movlb	0	; () banked
   544  000538  6F80               	movwf	main@mR& (0+255),b
   545                           
   546                           ;main.c: 62: mR.direction=1;
   547  00053A  0E01               	movlw	1
   548  00053C  0100               	movlb	0	; () banked
   549  00053E  6F81               	movwf	(main@mR+1)& (0+255),b
   550                           
   551                           ; BSR set to: 0
   552                           ;main.c: 63: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   553  000540  0E77               	movlw	119
   554  000542  0100               	movlb	0	; () banked
   555  000544  6F82               	movwf	(main@mR+2)& (0+255),b
   556  000546  0E0F               	movlw	15
   557  000548  0100               	movlb	0	; () banked
   558  00054A  6F83               	movwf	(main@mR+3)& (0+255),b
   559                           
   560                           ; BSR set to: 0
   561                           ;main.c: 64: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   562  00054C  0E76               	movlw	118
   563  00054E  0100               	movlb	0	; () banked
   564  000550  6F84               	movwf	(main@mR+4)& (0+255),b
   565  000552  0E0F               	movlw	15
   566  000554  0100               	movlb	0	; () banked
   567  000556  6F85               	movwf	(main@mR+5)& (0+255),b
   568                           
   569                           ;main.c: 65: mR.dir_pin=2;
   570  000558  0E02               	movlw	2
   571  00055A  0100               	movlb	0	; () banked
   572  00055C  6F86               	movwf	(main@mR+6)& (0+255),b
   573                           
   574                           ;main.c: 66: mR.PWMperiod=199;
   575  00055E  0E00               	movlw	0
   576  000560  0100               	movlb	0	; () banked
   577  000562  6F88               	movwf	(main@mR+8)& (0+255),b
   578  000564  0EC7               	movlw	199
   579  000566  6F87               	movwf	(main@mR+7)& (0+255),b
   580                           
   581                           ;main.c: 68: OSCCON = 0x72;
   582  000568  0E72               	movlw	114
   583  00056A  6ED3               	movwf	4051,c	;volatile
   584  00056C                     l55:
   585  00056C  B4D3               	btfsc	4051,2,c	;volatile
   586  00056E  D07B               	goto	l2589
   587  000570  D7FD               	goto	l55
   588  000572                     l2547:
   589                           
   590                           ;main.c: 76: initMotorPWM();
   591  000572  ECD4  F006         	call	_initMotorPWM	;wreg free
   592                           
   593                           ;main.c: 78: initIR();
   594  000576  EC13  F007         	call	_initIR	;wreg free
   595                           
   596                           ;main.c: 82: fullSpeedAhead(&mL, &mR);
   597  00057A  0E77               	movlw	low main@mL
   598  00057C  6E26               	movwf	fullSpeedAhead@mL,c
   599  00057E  0E00               	movlw	high main@mL
   600  000580  6E27               	movwf	fullSpeedAhead@mL+1,c
   601  000582  0E80               	movlw	low main@mR
   602  000584  6E28               	movwf	fullSpeedAhead@mR,c
   603  000586  0E00               	movlw	high main@mR
   604  000588  6E29               	movwf	fullSpeedAhead@mR+1,c
   605  00058A  ECFF  F005         	call	_fullSpeedAhead	;wreg free
   606                           
   607                           ;main.c: 83: delay_s(1);
   608  00058E  0E01               	movlw	1
   609  000590  EC81  F006         	call	_delay_s
   610                           
   611                           ;main.c: 84: stop(&mL, &mR);
   612  000594  0E77               	movlw	low main@mL
   613  000596  6E26               	movwf	stop@mL,c
   614  000598  0E00               	movlw	high main@mL
   615  00059A  6E27               	movwf	stop@mL+1,c
   616  00059C  0E80               	movlw	low main@mR
   617  00059E  6E28               	movwf	stop@mR,c
   618  0005A0  0E00               	movlw	high main@mR
   619  0005A2  6E29               	movwf	stop@mR+1,c
   620  0005A4  ECFF  F004         	call	_stop	;wreg free
   621                           
   622                           ;main.c: 85: fullSpeedBack(&mL, &mR);
   623  0005A8  0E77               	movlw	low main@mL
   624  0005AA  6E2B               	movwf	fullSpeedBack@mL,c
   625  0005AC  0E00               	movlw	high main@mL
   626  0005AE  6E2C               	movwf	fullSpeedBack@mL+1,c
   627  0005B0  0E80               	movlw	low main@mR
   628  0005B2  6E2D               	movwf	fullSpeedBack@mR,c
   629  0005B4  0E00               	movlw	high main@mR
   630  0005B6  6E2E               	movwf	fullSpeedBack@mR+1,c
   631  0005B8  ECB9  F006         	call	_fullSpeedBack	;wreg free
   632                           
   633                           ;main.c: 86: delay_s(1);
   634  0005BC  0E01               	movlw	1
   635  0005BE  EC81  F006         	call	_delay_s
   636                           
   637                           ;main.c: 87: stop(&mL, &mR);
   638  0005C2  0E77               	movlw	low main@mL
   639  0005C4  6E26               	movwf	stop@mL,c
   640  0005C6  0E00               	movlw	high main@mL
   641  0005C8  6E27               	movwf	stop@mL+1,c
   642  0005CA  0E80               	movlw	low main@mR
   643  0005CC  6E28               	movwf	stop@mR,c
   644  0005CE  0E00               	movlw	high main@mR
   645  0005D0  6E29               	movwf	stop@mR+1,c
   646  0005D2  ECFF  F004         	call	_stop	;wreg free
   647                           
   648                           ;main.c: 89: enableSensor(0, 1);
   649  0005D6  0E01               	movlw	1
   650  0005D8  6E0F               	movwf	enableSensor@status,c
   651  0005DA  0E00               	movlw	0
   652  0005DC  ECED  F006         	call	_enableSensor
   653                           
   654                           ;main.c: 90: enableSensor(1, 1);
   655  0005E0  0E01               	movlw	1
   656  0005E2  6E0F               	movwf	enableSensor@status,c
   657  0005E4  0E01               	movlw	1
   658  0005E6  ECED  F006         	call	_enableSensor
   659  0005EA  D03A               	goto	l2585
   660  0005EC                     l2567:
   661                           
   662                           ; BSR set to: 0
   663                           ;main.c: 97: if (DirectionFound==0) {
   664  0005EC  0100               	movlb	0	; () banked
   665  0005EE  5176               	movf	main@DirectionFound& (0+255),w,b
   666  0005F0  0100               	movlb	0	; () banked
   667  0005F2  A4D8               	btfss	status,2,c
   668  0005F4  D00D               	goto	l2571
   669                           
   670                           ; BSR set to: 0
   671                           ;main.c: 99: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   672  0005F6  0E77               	movlw	low main@mL
   673  0005F8  6E2F               	movwf	ScanWithRange@mL,c
   674  0005FA  0E00               	movlw	high main@mL
   675  0005FC  6E30               	movwf	ScanWithRange@mL+1,c
   676  0005FE  0E80               	movlw	low main@mR
   677  000600  6E31               	movwf	ScanWithRange@mR,c
   678  000602  0E00               	movlw	high main@mR
   679  000604  6E32               	movwf	ScanWithRange@mR+1,c
   680  000606  C074  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   681  00060A  EC56  F000         	call	_ScanWithRange	;wreg free
   682  00060E  D00E               	goto	L2
   683  000610                     l2571:
   684                           
   685                           ; BSR set to: 0
   686  000610  0100               	movlb	0	; () banked
   687  000612  0576               	decf	main@DirectionFound& (0+255),w,b
   688  000614  A4D8               	btfss	status,2,c
   689  000616  D00D               	goto	l2575
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 102: DirectionFound = ScanIR(&mL, &mR);
   693  000618  0E77               	movlw	low main@mL
   694  00061A  6E2F               	movwf	ScanIR@mL,c
   695  00061C  0E00               	movlw	high main@mL
   696  00061E  6E30               	movwf	ScanIR@mL+1,c
   697  000620  0E80               	movlw	low main@mR
   698  000622  6E31               	movwf	ScanIR@mR,c
   699  000624  0E00               	movlw	high main@mR
   700  000626  6E32               	movwf	ScanIR@mR+1,c
   701  000628  EC40  F003         	call	_ScanIR	;wreg free
   702  00062C                     L2:
   703  00062C  0100               	movlb	0	; () banked
   704  00062E  6F76               	movwf	main@DirectionFound& (0+255),b
   705                           
   706                           ;main.c: 103: } else if (DirectionFound==2) {
   707  000630  D01A               	goto	l2589
   708  000632                     l2575:
   709                           
   710                           ; BSR set to: 0
   711  000632  0E02               	movlw	2
   712  000634  0100               	movlb	0	; () banked
   713  000636  1976               	xorwf	main@DirectionFound& (0+255),w,b
   714  000638  A4D8               	btfss	status,2,c
   715  00063A  D015               	goto	l2589
   716                           
   717                           ; BSR set to: 0
   718                           ;main.c: 104: mode=2;
   719  00063C  0E02               	movlw	2
   720  00063E  D011               	goto	L3
   721  000640                     l2579:
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 123: fullSpeedAhead(&mL, &mR);
   725  000640  0E77               	movlw	low main@mL
   726  000642  6E26               	movwf	fullSpeedAhead@mL,c
   727  000644  0E00               	movlw	high main@mL
   728  000646  6E27               	movwf	fullSpeedAhead@mL+1,c
   729  000648  0E80               	movlw	low main@mR
   730  00064A  6E28               	movwf	fullSpeedAhead@mR,c
   731  00064C  0E00               	movlw	high main@mR
   732  00064E  6E29               	movwf	fullSpeedAhead@mR+1,c
   733  000650  ECFF  F005         	call	_fullSpeedAhead	;wreg free
   734                           
   735                           ;main.c: 124: delay_s(1);
   736  000654  0E01               	movlw	1
   737  000656  EC81  F006         	call	_delay_s
   738                           
   739                           ;main.c: 125: DirectionFound=1;
   740  00065A  0E01               	movlw	1
   741  00065C  0100               	movlb	0	; () banked
   742  00065E  6F76               	movwf	main@DirectionFound& (0+255),b
   743  000660                     l2585:
   744                           
   745                           ; BSR set to: 0
   746                           ;main.c: 126: mode = 1;
   747  000660  0E01               	movlw	1
   748  000662                     L3:
   749  000662  0100               	movlb	0	; () banked
   750  000664  6F75               	movwf	main@mode& (0+255),b
   751  000666                     l2589:
   752  000666  0100               	movlb	0	; () banked
   753  000668  5175               	movf	main@mode& (0+255),w,b
   754                           
   755                           ; Switch size 1, requested type "space"
   756                           ; Number of cases is 4, Range of values is 0 to 3
   757                           ; switch strategies available:
   758                           ; Name         Instructions Cycles
   759                           ; simple_byte           13     7 (average)
   760                           ;	Chosen strategy is simple_byte
   761  00066A  0A00               	xorlw	0	; case 0
   762  00066C  B4D8               	btfsc	status,2,c
   763  00066E  D781               	goto	l2547
   764  000670  0A01               	xorlw	1	; case 1
   765  000672  B4D8               	btfsc	status,2,c
   766  000674  D7BB               	goto	l2567
   767  000676  0A03               	xorlw	3	; case 2
   768  000678  B4D8               	btfsc	status,2,c
   769  00067A  D7E2               	goto	l2579
   770  00067C  0A01               	xorlw	1	; case 3
   771                           
   772                           ; BSR set to: 0
   773                           
   774                           ; BSR set to: 0
   775  00067E  D7F3               	goto	l2589
   776  000680                     __end_of_main:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           intcon	equ	0xFF2
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _initMotorPWM *****************
   785 ;; Defined at:
   786 ;;		line 4 in file "dc_motor.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;		None
   789 ;; Auto vars:     Size  Location     Type
   790 ;;		None
   791 ;; Return value:  Size  Location     Type
   792 ;;		None               void
   793 ;; Registers used:
   794 ;;		wreg, status,2
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   800 ;;      Params:         0       0       0       0
   801 ;;      Locals:         0       0       0       0
   802 ;;      Temps:          0       0       0       0
   803 ;;      Totals:         0       0       0       0
   804 ;;Total ram usage:        0 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    1
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_main
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text1
   815  000DA8                     __ptext1:
   816                           	opt stack 0
   817  000DA8                     _initMotorPWM:
   818                           	opt stack 29
   819                           
   820                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   821                           
   822                           ; BSR set to: 0
   823                           ;incstack = 0
   824  000DA8  0E00               	movlw	0
   825  000DAA  6E7F               	movwf	3967,c	;volatile
   826                           
   827                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   828  000DAC  0E80               	movlw	128
   829  000DAE  6E7E               	movwf	3966,c	;volatile
   830                           
   831                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   832  000DB0  0E6F               	movlw	111
   833  000DB2  6E6F               	movwf	3951,c	;volatile
   834                           
   835                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   836  000DB4  0E00               	movlw	0
   837  000DB6  6E6E               	movwf	3950,c	;volatile
   838                           
   839                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   840  000DB8  0EC7               	movlw	199
   841  000DBA  6E7B               	movwf	3963,c	;volatile
   842                           
   843                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   844  000DBC  0E00               	movlw	0
   845  000DBE  6E7A               	movwf	3962,c	;volatile
   846                           
   847                           ;dc_motor.c: 13: PDC0L = 0<<2;
   848  000DC0  0E00               	movlw	0
   849  000DC2  6E79               	movwf	3961,c	;volatile
   850                           
   851                           ;dc_motor.c: 14: PDC0H = 0>>6;
   852  000DC4  0E00               	movlw	0
   853  000DC6  6E78               	movwf	3960,c	;volatile
   854                           
   855                           ;dc_motor.c: 15: PDC1L = 0<<2;
   856  000DC8  0E00               	movlw	0
   857  000DCA  6E77               	movwf	3959,c	;volatile
   858                           
   859                           ;dc_motor.c: 16: PDC1H = 0>>6;
   860  000DCC  0E00               	movlw	0
   861  000DCE  6E76               	movwf	3958,c	;volatile
   862                           
   863                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   864  000DD0  9093               	bcf	3987,0,c	;volatile
   865                           
   866                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   867  000DD2  9293               	bcf	3987,1,c	;volatile
   868                           
   869                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   870  000DD4  9493               	bcf	3987,2,c	;volatile
   871                           
   872                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   873  000DD6  9693               	bcf	3987,3,c	;volatile
   874  000DD8  0012               	return		;funcret
   875  000DDA                     __end_of_initMotorPWM:
   876                           	opt stack 0
   877                           tblptru	equ	0xFF8
   878                           intcon	equ	0xFF2
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           status	equ	0xFD8
   882                           
   883 ;; *************** function _initIR *****************
   884 ;; Defined at:
   885 ;;		line 30 in file "IR_Reading.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;		None               void
   892 ;; Registers used:
   893 ;;		wreg, status,2
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   899 ;;      Params:         0       0       0       0
   900 ;;      Locals:         0       0       0       0
   901 ;;      Temps:          0       0       0       0
   902 ;;      Totals:         0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    1
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text2
   914  000E26                     __ptext2:
   915                           	opt stack 0
   916  000E26                     _initIR:
   917                           	opt stack 29
   918                           
   919                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   920                           
   921                           ;incstack = 0
   922  000E26  9489               	bcf	3977,2,c	;volatile
   923                           
   924                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   925  000E28  9689               	bcf	3977,3,c	;volatile
   926                           
   927                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   928  000E2A  8492               	bsf	3986,2,c	;volatile
   929                           
   930                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   931  000E2C  8692               	bsf	3986,3,c	;volatile
   932                           
   933                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   934  000E2E  94B8               	bcf	4024,2,c	;volatile
   935                           
   936                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   937  000E30  96B8               	bcf	4024,3,c	;volatile
   938                           
   939                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   940  000E32  9CB8               	bcf	4024,6,c	;volatile
   941                           
   942                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   943  000E34  9EB8               	bcf	4024,7,c	;volatile
   944                           
   945                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   946  000E36  0E06               	movlw	6
   947  000E38  6E63               	movwf	3939,c	;volatile
   948                           
   949                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   950  000E3A  0E06               	movlw	6
   951  000E3C  6E62               	movwf	3938,c	;volatile
   952                           
   953                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   954  000E3E  9096               	bcf	3990,0,c	;volatile
   955                           
   956                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   957  000E40  9296               	bcf	3990,1,c	;volatile
   958                           
   959                           ;IR_Reading.c: 69: T5CON=0b01011001;
   960  000E42  0E59               	movlw	89
   961  000E44  6EB7               	movwf	4023,c	;volatile
   962  000E46  0012               	return		;funcret
   963  000E48                     __end_of_initIR:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           intcon	equ	0xFF2
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _fullSpeedBack *****************
   972 ;; Defined at:
   973 ;;		line 125 in file "dc_motor.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   976 ;;		 -> main@mL(9), 
   977 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   978 ;;		 -> main@mR(9), 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;		None               void
   983 ;; Registers used:
   984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   990 ;;      Params:         4       0       0       0
   991 ;;      Locals:         0       0       0       0
   992 ;;      Temps:          0       0       0       0
   993 ;;      Totals:         4       0       0       0
   994 ;;Total ram usage:        4 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    4
   997 ;; This function calls:
   998 ;;		_fullSpeedAhead
   999 ;; This function is called by:
  1000 ;;		_main
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text3
  1005  000D72                     __ptext3:
  1006                           	opt stack 0
  1007  000D72                     _fullSpeedBack:
  1008                           	opt stack 26
  1009                           
  1010                           ;dc_motor.c: 128: mL->direction=0;
  1011                           
  1012                           ;incstack = 0
  1013  000D72  EE20 F001          	lfsr	2,1
  1014  000D76  502B               	movf	fullSpeedBack@mL,w,c
  1015  000D78  26D9               	addwf	fsr2l,f,c
  1016  000D7A  502C               	movf	fullSpeedBack@mL+1,w,c
  1017  000D7C  22DA               	addwfc	fsr2h,f,c
  1018  000D7E  0E00               	movlw	0
  1019  000D80  6EDF               	movwf	indf2,c
  1020                           
  1021                           ;dc_motor.c: 129: mR->direction=0;
  1022  000D82  EE20 F001          	lfsr	2,1
  1023  000D86  502D               	movf	fullSpeedBack@mR,w,c
  1024  000D88  26D9               	addwf	fsr2l,f,c
  1025  000D8A  502E               	movf	fullSpeedBack@mR+1,w,c
  1026  000D8C  22DA               	addwfc	fsr2h,f,c
  1027  000D8E  0E00               	movlw	0
  1028  000D90  6EDF               	movwf	indf2,c
  1029                           
  1030                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1031  000D92  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1032  000D96  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1033  000D9A  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1034  000D9E  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1035  000DA2  ECFF  F005         	call	_fullSpeedAhead	;wreg free
  1036  000DA6  0012               	return		;funcret
  1037  000DA8                     __end_of_fullSpeedBack:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           intcon	equ	0xFF2
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           indf2	equ	0xFDF
  1044                           fsr2h	equ	0xFDA
  1045                           fsr2l	equ	0xFD9
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function _enableSensor *****************
  1049 ;; Defined at:
  1050 ;;		line 106 in file "IR_Reading.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  sensor          1    wreg     unsigned char 
  1053 ;;  status          1   14[COMRAM] unsigned char 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  sensor          1   15[COMRAM] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;		None               void
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1065 ;;      Params:         1       0       0       0
  1066 ;;      Locals:         1       0       0       0
  1067 ;;      Temps:          0       0       0       0
  1068 ;;      Totals:         2       0       0       0
  1069 ;;Total ram usage:        2 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text4
  1080  000DDA                     __ptext4:
  1081                           	opt stack 0
  1082  000DDA                     _enableSensor:
  1083                           	opt stack 29
  1084                           
  1085                           ;incstack = 0
  1086                           ;enableSensor@sensor stored from wreg
  1087  000DDA  6E10               	movwf	enableSensor@sensor,c
  1088                           
  1089                           ;IR_Reading.c: 108: if (sensor==0){
  1090  000DDC  5010               	movf	enableSensor@sensor,w,c
  1091  000DDE  A4D8               	btfss	status,2,c
  1092  000DE0  D006               	goto	l1821
  1093                           
  1094                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1095  000DE2  B00F               	btfsc	enableSensor@status,0,c
  1096  000DE4  D002               	bra	u1095
  1097  000DE6  908D               	bcf	3981,0,c	;volatile
  1098  000DE8  D001               	bra	u1096
  1099  000DEA                     u1095:
  1100  000DEA  808D               	bsf	3981,0,c	;volatile
  1101  000DEC                     u1096:
  1102                           
  1103                           ;IR_Reading.c: 110: } else if (sensor==1){
  1104  000DEC  0012               	return	
  1105  000DEE                     l1821:
  1106  000DEE  0410               	decf	enableSensor@sensor,w,c
  1107  000DF0  A4D8               	btfss	status,2,c
  1108  000DF2  0012               	return	
  1109                           
  1110                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1111  000DF4  B00F               	btfsc	enableSensor@status,0,c
  1112  000DF6  D002               	bra	u1115
  1113  000DF8  928D               	bcf	3981,1,c	;volatile
  1114  000DFA  D001               	bra	u1116
  1115  000DFC                     u1115:
  1116  000DFC  828D               	bsf	3981,1,c	;volatile
  1117  000DFE                     u1116:
  1118  000DFE  0012               	return	
  1119  000E00                     __end_of_enableSensor:
  1120                           	opt stack 0
  1121                           tblptru	equ	0xFF8
  1122                           intcon	equ	0xFF2
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           indf2	equ	0xFDF
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _delay_s *****************
  1131 ;; Defined at:
  1132 ;;		line 10 in file "Movement.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;  seconds         1    wreg     unsigned char 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  seconds         1   15[COMRAM] unsigned char 
  1137 ;;  i               2   16[COMRAM] unsigned int 
  1138 ;; Return value:  Size  Location     Type
  1139 ;;		None               void
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1147 ;;      Params:         0       0       0       0
  1148 ;;      Locals:         3       0       0       0
  1149 ;;      Temps:          1       0       0       0
  1150 ;;      Totals:         4       0       0       0
  1151 ;;Total ram usage:        4 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    1
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_main
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text5
  1162  000D02                     __ptext5:
  1163                           	opt stack 0
  1164  000D02                     _delay_s:
  1165                           	opt stack 29
  1166                           
  1167                           ;incstack = 0
  1168                           ;delay_s@seconds stored from wreg
  1169  000D02  6E10               	movwf	delay_s@seconds,c
  1170                           
  1171                           ;Movement.c: 11: unsigned int i=0;
  1172  000D04  0E00               	movlw	0
  1173  000D06  6E12               	movwf	delay_s@i+1,c
  1174  000D08  0E00               	movlw	0
  1175  000D0A  6E11               	movwf	delay_s@i,c
  1176                           
  1177                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1178  000D0C  0E00               	movlw	0
  1179  000D0E  6E12               	movwf	delay_s@i+1,c
  1180  000D10  0E01               	movlw	1
  1181  000D12  6E11               	movwf	delay_s@i,c
  1182  000D14  D009               	goto	l1811
  1183  000D16                     l1807:
  1184                           
  1185                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1186  000D16  0E82               	movlw	130
  1187  000D18  6E0F               	movwf	??_delay_s& (0+255),c
  1188  000D1A  0EDE               	movlw	222
  1189  000D1C                     u1917:
  1190  000D1C  2EE8               	decfsz	wreg,f,c
  1191  000D1E  D7FE               	goto	u1917
  1192  000D20  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1193  000D22  D7FC               	goto	u1917
  1194  000D24  4A11               	infsnz	delay_s@i,f,c
  1195  000D26  2A12               	incf	delay_s@i+1,f,c
  1196  000D28                     l1811:
  1197  000D28  5010               	movf	delay_s@seconds,w,c
  1198  000D2A  0D14               	mullw	20
  1199  000D2C  5011               	movf	delay_s@i,w,c
  1200  000D2E  5CF3               	subwf	prodl,w,c
  1201  000D30  5012               	movf	delay_s@i+1,w,c
  1202  000D32  58F4               	subwfb	prodh,w,c
  1203  000D34  A0D8               	btfss	status,0,c
  1204  000D36  0012               	return	
  1205  000D38  D7EE               	goto	l1807
  1206  000D3A                     __end_of_delay_s:
  1207                           	opt stack 0
  1208                           tblptru	equ	0xFF8
  1209                           prodh	equ	0xFF4
  1210                           prodl	equ	0xFF3
  1211                           intcon	equ	0xFF2
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           indf2	equ	0xFDF
  1215                           fsr2h	equ	0xFDA
  1216                           fsr2l	equ	0xFD9
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _ScanWithRange *****************
  1220 ;; Defined at:
  1221 ;;		line 89 in file "Movement.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1224 ;;		 -> main@mL(9), 
  1225 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1226 ;;		 -> main@mR(9), 
  1227 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  SensorResult    4   13[BANK0 ] unsigned int [2]
  1230 ;;  SensorResult    4    9[BANK0 ] unsigned int [2]
  1231 ;;  SensorResult    4    5[BANK0 ] unsigned int [2]
  1232 ;;  ClearSignalT    2    3[BANK0 ] const unsigned int 
  1233 ;;  ResultFalseR    1    2[BANK0 ] unsigned char 
  1234 ;;  ResultFalseC    1    1[BANK0 ] unsigned char 
  1235 ;;  ResultFalseL    1    0[BANK0 ] unsigned char 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      unsigned char 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1245 ;;      Params:         5       0       0       0
  1246 ;;      Locals:         0      17       0       0
  1247 ;;      Temps:          2       0       0       0
  1248 ;;      Totals:         7      17       0       0
  1249 ;;Total ram usage:       24 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    5
  1252 ;; This function calls:
  1253 ;;		_BombDirectionFound
  1254 ;;		___awdiv
  1255 ;;		_delay_tenth_s
  1256 ;;		_grabLeftIR
  1257 ;;		_grabRightIR
  1258 ;;		_stop
  1259 ;;		_turnLeft
  1260 ;;		_turnRight
  1261 ;; This function is called by:
  1262 ;;		_main
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text6
  1267  0000AC                     __ptext6:
  1268                           	opt stack 0
  1269  0000AC                     _ScanWithRange:
  1270                           	opt stack 25
  1271                           
  1272                           ;Movement.c: 92: unsigned int SensorResultL[2];
  1273                           ;Movement.c: 93: unsigned int SensorResultC[2];
  1274                           ;Movement.c: 94: unsigned int SensorResultR[2];
  1275                           ;Movement.c: 95: unsigned char ResultFalseL=0;
  1276                           
  1277                           ;incstack = 0
  1278  0000AC  0E00               	movlw	0
  1279  0000AE  0100               	movlb	0	; () banked
  1280  0000B0  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1281                           
  1282                           ;Movement.c: 96: unsigned char ResultFalseC=0;
  1283  0000B2  0E00               	movlw	0
  1284  0000B4  0100               	movlb	0	; () banked
  1285  0000B6  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1286                           
  1287                           ;Movement.c: 97: unsigned char ResultFalseR=0;
  1288  0000B8  0E00               	movlw	0
  1289  0000BA  0100               	movlb	0	; () banked
  1290  0000BC  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1291                           
  1292                           ;Movement.c: 100: const unsigned int ClearSignalTolerance=1000;
  1293  0000BE  0E03               	movlw	3
  1294  0000C0  0100               	movlb	0	; () banked
  1295  0000C2  6F64               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  1296  0000C4  0EE8               	movlw	232
  1297  0000C6  6F63               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;Movement.c: 108: stop(mL,mR);
  1301  0000C8  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1302  0000CC  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1303  0000D0  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1304  0000D4  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1305  0000D8  ECFF  F004         	call	_stop	;wreg free
  1306                           
  1307                           ;Movement.c: 109: SensorResultC[0]=grabLeftIR();
  1308  0000DC  ECC4  F005         	call	_grabLeftIR	;wreg free
  1309  0000E0  C00F  F069         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1310  0000E4  C010  F06A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1311                           
  1312                           ;Movement.c: 110: SensorResultC[1]=grabRightIR();
  1313  0000E8  EC89  F005         	call	_grabRightIR	;wreg free
  1314  0000EC  C00F  F06B         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1315  0000F0  C010  F06C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1316                           
  1317                           ;Movement.c: 113: turnLeft(mL,mR);
  1318  0000F4  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1319  0000F8  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1320  0000FC  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1321  000100  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1322  000104  EC5C  F006         	call	_turnLeft	;wreg free
  1323                           
  1324                           ;Movement.c: 114: delay_tenth_s(tenth_seconds);
  1325  000108  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1326  00010A  EC9D  F006         	call	_delay_tenth_s
  1327                           
  1328                           ;Movement.c: 116: stop(mL,mR);
  1329  00010E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1330  000112  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1331  000116  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1332  00011A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1333  00011E  ECFF  F004         	call	_stop	;wreg free
  1334                           
  1335                           ;Movement.c: 117: SensorResultL[0]=grabLeftIR();
  1336  000122  ECC4  F005         	call	_grabLeftIR	;wreg free
  1337  000126  C00F  F065         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1338  00012A  C010  F066         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1339                           
  1340                           ;Movement.c: 118: SensorResultL[1]=grabRightIR();
  1341  00012E  EC89  F005         	call	_grabRightIR	;wreg free
  1342  000132  C00F  F067         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1343  000136  C010  F068         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1344                           
  1345                           ;Movement.c: 121: turnRight(mL,mR);
  1346  00013A  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1347  00013E  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1348  000142  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1349  000146  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1350  00014A  EC37  F006         	call	_turnRight	;wreg free
  1351                           
  1352                           ;Movement.c: 122: delay_tenth_s(2*tenth_seconds);
  1353  00014E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1354  000150  0D02               	mullw	2
  1355  000152  50F3               	movf	prodl,w,c
  1356  000154  EC9D  F006         	call	_delay_tenth_s
  1357                           
  1358                           ;Movement.c: 124: stop(mL,mR);
  1359  000158  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1360  00015C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1361  000160  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1362  000164  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1363  000168  ECFF  F004         	call	_stop	;wreg free
  1364                           
  1365                           ;Movement.c: 125: SensorResultR[0]=grabLeftIR();
  1366  00016C  ECC4  F005         	call	_grabLeftIR	;wreg free
  1367  000170  C00F  F06D         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1368  000174  C010  F06E         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1369                           
  1370                           ;Movement.c: 126: SensorResultR[1]=grabRightIR();
  1371  000178  EC89  F005         	call	_grabRightIR	;wreg free
  1372  00017C  C00F  F06F         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1373  000180  C010  F070         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1374                           
  1375                           ;Movement.c: 127: stop(mL,mR);
  1376  000184  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1377  000188  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1378  00018C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1379  000190  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1380  000194  ECFF  F004         	call	_stop	;wreg free
  1381                           
  1382                           ;Movement.c: 138: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  1383  000198  0100               	movlb	0	; () banked
  1384  00019A  5165               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1385  00019C  0100               	movlb	0	; () banked
  1386  00019E  2567               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1387  0001A0  6E34               	movwf	??_ScanWithRange& (0+255),c
  1388  0001A2  0100               	movlb	0	; () banked
  1389  0001A4  5166               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1390  0001A6  0100               	movlb	0	; () banked
  1391  0001A8  2168               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1392  0001AA  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1393  0001AC  0100               	movlb	0	; () banked
  1394  0001AE  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1395  0001B0  5C34               	subwf	??_ScanWithRange,w,c
  1396  0001B2  0100               	movlb	0	; () banked
  1397  0001B4  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1398  0001B6  5835               	subwfb	??_ScanWithRange+1,w,c
  1399  0001B8  B0D8               	btfsc	status,0,c
  1400  0001BA  D00D               	goto	l2335
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;Movement.c: 139: SensorResultL[0]=0;
  1404  0001BC  0E00               	movlw	0
  1405  0001BE  0100               	movlb	0	; () banked
  1406  0001C0  6F66               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  1407  0001C2  0E00               	movlw	0
  1408  0001C4  6F65               	movwf	ScanWithRange@SensorResultL& (0+255),b
  1409                           
  1410                           ;Movement.c: 140: SensorResultL[1]=0;
  1411  0001C6  0E00               	movlw	0
  1412  0001C8  0100               	movlb	0	; () banked
  1413  0001CA  6F68               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  1414  0001CC  0E00               	movlw	0
  1415  0001CE  6F67               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  1416                           
  1417                           ;Movement.c: 141: ResultFalseL=1;
  1418  0001D0  0E01               	movlw	1
  1419  0001D2  0100               	movlb	0	; () banked
  1420  0001D4  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1421  0001D6                     l2335:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;Movement.c: 142: }
  1425                           ;Movement.c: 143: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  1426  0001D6  0100               	movlb	0	; () banked
  1427  0001D8  5169               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1428  0001DA  0100               	movlb	0	; () banked
  1429  0001DC  256B               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1430  0001DE  6E34               	movwf	??_ScanWithRange& (0+255),c
  1431  0001E0  0100               	movlb	0	; () banked
  1432  0001E2  516A               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1433  0001E4  0100               	movlb	0	; () banked
  1434  0001E6  216C               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1435  0001E8  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1436  0001EA  0100               	movlb	0	; () banked
  1437  0001EC  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1438  0001EE  5C34               	subwf	??_ScanWithRange,w,c
  1439  0001F0  0100               	movlb	0	; () banked
  1440  0001F2  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1441  0001F4  5835               	subwfb	??_ScanWithRange+1,w,c
  1442  0001F6  B0D8               	btfsc	status,0,c
  1443  0001F8  D00D               	goto	l2339
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;Movement.c: 144: SensorResultC[0]=0;
  1447  0001FA  0E00               	movlw	0
  1448  0001FC  0100               	movlb	0	; () banked
  1449  0001FE  6F6A               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  1450  000200  0E00               	movlw	0
  1451  000202  6F69               	movwf	ScanWithRange@SensorResultC& (0+255),b
  1452                           
  1453                           ;Movement.c: 145: SensorResultC[1]=0;
  1454  000204  0E00               	movlw	0
  1455  000206  0100               	movlb	0	; () banked
  1456  000208  6F6C               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  1457  00020A  0E00               	movlw	0
  1458  00020C  6F6B               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  1459                           
  1460                           ;Movement.c: 146: ResultFalseC=1;
  1461  00020E  0E01               	movlw	1
  1462  000210  0100               	movlb	0	; () banked
  1463  000212  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1464  000214                     l2339:
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;Movement.c: 147: }
  1468                           ;Movement.c: 148: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  1469  000214  0100               	movlb	0	; () banked
  1470  000216  516D               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1471  000218  0100               	movlb	0	; () banked
  1472  00021A  256F               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1473  00021C  6E34               	movwf	??_ScanWithRange& (0+255),c
  1474  00021E  0100               	movlb	0	; () banked
  1475  000220  516E               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1476  000222  0100               	movlb	0	; () banked
  1477  000224  2170               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1478  000226  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1479  000228  0100               	movlb	0	; () banked
  1480  00022A  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1481  00022C  5C34               	subwf	??_ScanWithRange,w,c
  1482  00022E  0100               	movlb	0	; () banked
  1483  000230  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1484  000232  5835               	subwfb	??_ScanWithRange+1,w,c
  1485  000234  B0D8               	btfsc	status,0,c
  1486  000236  D00D               	goto	l2343
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;Movement.c: 149: SensorResultR[0]=0;
  1490  000238  0E00               	movlw	0
  1491  00023A  0100               	movlb	0	; () banked
  1492  00023C  6F6E               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  1493  00023E  0E00               	movlw	0
  1494  000240  6F6D               	movwf	ScanWithRange@SensorResultR& (0+255),b
  1495                           
  1496                           ;Movement.c: 150: SensorResultR[1]=0;
  1497  000242  0E00               	movlw	0
  1498  000244  0100               	movlb	0	; () banked
  1499  000246  6F70               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  1500  000248  0E00               	movlw	0
  1501  00024A  6F6F               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  1502                           
  1503                           ;Movement.c: 151: ResultFalseR=1;
  1504  00024C  0E01               	movlw	1
  1505  00024E  0100               	movlb	0	; () banked
  1506  000250  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1507  000252                     l2343:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;Movement.c: 152: }
  1511                           ;Movement.c: 154: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  1512  000252  0100               	movlb	0	; () banked
  1513  000254  5161               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  1514  000256  C060  F034         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  1515  00025A  6A35               	clrf	(??_ScanWithRange+1)& (0+255),c
  1516  00025C  2634               	addwf	??_ScanWithRange,f,c
  1517  00025E  0E00               	movlw	0
  1518  000260  2235               	addwfc	??_ScanWithRange+1,f,c
  1519  000262  0100               	movlb	0	; () banked
  1520  000264  5162               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  1521  000266  2634               	addwf	??_ScanWithRange,f,c
  1522  000268  0E00               	movlw	0
  1523  00026A  2235               	addwfc	??_ScanWithRange+1,f,c
  1524  00026C  0E03               	movlw	3
  1525  00026E  1834               	xorwf	??_ScanWithRange,w,c
  1526  000270  1035               	iorwf	??_ScanWithRange+1,w,c
  1527  000272  A4D8               	btfss	status,2,c
  1528  000274  D01B               	goto	l2357
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;Movement.c: 156: turnLeft(mL,mR);
  1532  000276  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1533  00027A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1534  00027E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1535  000282  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1536  000286  EC5C  F006         	call	_turnLeft	;wreg free
  1537                           
  1538                           ;Movement.c: 157: delay_tenth_s(5*tenth_seconds);
  1539  00028A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1540  00028C  0D05               	mullw	5
  1541  00028E  50F3               	movf	prodl,w,c
  1542  000290  EC9D  F006         	call	_delay_tenth_s
  1543                           
  1544                           ;Movement.c: 158: stop(mL,mR);
  1545  000294  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1546  000298  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1547  00029C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1548  0002A0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1549  0002A4  ECFF  F004         	call	_stop	;wreg free
  1550                           
  1551                           ;Movement.c: 159: return 0;
  1552  0002A8  0E00               	movlw	0
  1553                           
  1554                           ;Movement.c: 160: } else {
  1555  0002AA  0012               	return	
  1556  0002AC                     l2357:
  1557                           
  1558                           ;Movement.c: 162: if (BombDirectionFound(*SensorResultL)) {
  1559  0002AC  C065  F00F         	movff	ScanWithRange@SensorResultL,BombDirectionFound@SensorResult
  1560  0002B0  C066  F010         	movff	ScanWithRange@SensorResultL+1,BombDirectionFound@SensorResult+1
  1561  0002B4  EC9B  F004         	call	_BombDirectionFound	;wreg free
  1562  0002B8  0900               	iorlw	0
  1563  0002BA  B4D8               	btfsc	status,2,c
  1564  0002BC  D01B               	goto	l2371
  1565                           
  1566                           ;Movement.c: 164: turnLeft(mL,mR);
  1567  0002BE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1568  0002C2  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1569  0002C6  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1570  0002CA  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1571  0002CE  EC5C  F006         	call	_turnLeft	;wreg free
  1572                           
  1573                           ;Movement.c: 165: delay_tenth_s(2*(tenth_seconds));
  1574  0002D2  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1575  0002D4  0D02               	mullw	2
  1576  0002D6  50F3               	movf	prodl,w,c
  1577  0002D8  EC9D  F006         	call	_delay_tenth_s
  1578                           
  1579                           ;Movement.c: 166: stop(mL,mR);
  1580  0002DC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1581  0002E0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1582  0002E4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1583  0002E8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1584  0002EC  ECFF  F004         	call	_stop	;wreg free
  1585                           
  1586                           ;Movement.c: 167: return 2;
  1587  0002F0  0E02               	movlw	2
  1588                           
  1589                           ;Movement.c: 168: } else if (BombDirectionFound(*SensorResultC)) {
  1590  0002F2  0012               	return	
  1591  0002F4                     l2371:
  1592  0002F4  C069  F00F         	movff	ScanWithRange@SensorResultC,BombDirectionFound@SensorResult
  1593  0002F8  C06A  F010         	movff	ScanWithRange@SensorResultC+1,BombDirectionFound@SensorResult+1
  1594  0002FC  EC9B  F004         	call	_BombDirectionFound	;wreg free
  1595  000300  0900               	iorlw	0
  1596  000302  B4D8               	btfsc	status,2,c
  1597  000304  D019               	goto	l2385
  1598                           
  1599                           ;Movement.c: 170: turnLeft(mL,mR);
  1600  000306  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1601  00030A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1602  00030E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1603  000312  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1604  000316  EC5C  F006         	call	_turnLeft	;wreg free
  1605                           
  1606                           ;Movement.c: 171: delay_tenth_s(tenth_seconds);
  1607  00031A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1608  00031C  EC9D  F006         	call	_delay_tenth_s
  1609                           
  1610                           ;Movement.c: 172: stop(mL,mR);
  1611  000320  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1612  000324  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1613  000328  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1614  00032C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1615  000330  ECFF  F004         	call	_stop	;wreg free
  1616                           
  1617                           ;Movement.c: 173: return 2;
  1618  000334  0E02               	movlw	2
  1619                           
  1620                           ;Movement.c: 174: } else if (BombDirectionFound(*SensorResultR)) {
  1621  000336  0012               	return	
  1622  000338                     l2385:
  1623  000338  C06D  F00F         	movff	ScanWithRange@SensorResultR,BombDirectionFound@SensorResult
  1624  00033C  C06E  F010         	movff	ScanWithRange@SensorResultR+1,BombDirectionFound@SensorResult+1
  1625  000340  EC9B  F004         	call	_BombDirectionFound	;wreg free
  1626  000344  0900               	iorlw	0
  1627  000346  B4D8               	btfsc	status,2,c
  1628  000348  D00C               	goto	l2395
  1629                           
  1630                           ;Movement.c: 176: stop(mL,mR);
  1631  00034A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1632  00034E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1633  000352  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1634  000356  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1635  00035A  ECFF  F004         	call	_stop	;wreg free
  1636                           
  1637                           ;Movement.c: 177: return 2;
  1638  00035E  0E02               	movlw	2
  1639                           
  1640                           ;Movement.c: 180: } else if (SensorResultL[0]>SensorResultL[1]) {
  1641  000360  0012               	return	
  1642  000362                     l2395:
  1643  000362  0100               	movlb	0	; () banked
  1644  000364  5165               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1645  000366  0100               	movlb	0	; () banked
  1646  000368  5D67               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1647  00036A  0100               	movlb	0	; () banked
  1648  00036C  5166               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1649  00036E  0100               	movlb	0	; () banked
  1650  000370  5968               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1651  000372  B0D8               	btfsc	status,0,c
  1652  000374  D01B               	goto	l2409
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;Movement.c: 182: turnLeft(mL,mR);
  1656  000376  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1657  00037A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1658  00037E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1659  000382  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1660  000386  EC5C  F006         	call	_turnLeft	;wreg free
  1661                           
  1662                           ;Movement.c: 183: delay_tenth_s(3*tenth_seconds);
  1663  00038A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1664  00038C  0D03               	mullw	3
  1665  00038E  50F3               	movf	prodl,w,c
  1666  000390  EC9D  F006         	call	_delay_tenth_s
  1667                           
  1668                           ;Movement.c: 184: stop(mL,mR);
  1669  000394  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1670  000398  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1671  00039C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1672  0003A0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1673  0003A4  ECFF  F004         	call	_stop	;wreg free
  1674                           
  1675                           ;Movement.c: 185: return 0;
  1676  0003A8  0E00               	movlw	0
  1677                           
  1678                           ;Movement.c: 186: } else if (SensorResultR[1]>SensorResultR[0]) {
  1679  0003AA  0012               	return	
  1680  0003AC                     l2409:
  1681  0003AC  0100               	movlb	0	; () banked
  1682  0003AE  516F               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1683  0003B0  0100               	movlb	0	; () banked
  1684  0003B2  5D6D               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  1685  0003B4  0100               	movlb	0	; () banked
  1686  0003B6  5170               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1687  0003B8  0100               	movlb	0	; () banked
  1688  0003BA  596E               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1689  0003BC  B0D8               	btfsc	status,0,c
  1690  0003BE  D019               	goto	l2423
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;Movement.c: 188: turnRight(mL,mR);
  1694  0003C0  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1695  0003C4  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1696  0003C8  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1697  0003CC  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1698  0003D0  EC37  F006         	call	_turnRight	;wreg free
  1699                           
  1700                           ;Movement.c: 189: delay_tenth_s(tenth_seconds);
  1701  0003D4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1702  0003D6  EC9D  F006         	call	_delay_tenth_s
  1703                           
  1704                           ;Movement.c: 190: stop(mL,mR);
  1705  0003DA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1706  0003DE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1707  0003E2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1708  0003E6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1709  0003EA  ECFF  F004         	call	_stop	;wreg free
  1710                           
  1711                           ;Movement.c: 191: return 0;
  1712  0003EE  0E00               	movlw	0
  1713                           
  1714                           ;Movement.c: 194: } else if ((SensorResultL[1]>SensorResultL[0])&&(SensorResultC[0]>Sens
      +                          orResultC[1])) {
  1715  0003F0  0012               	return	
  1716  0003F2                     l2423:
  1717  0003F2  0100               	movlb	0	; () banked
  1718  0003F4  5167               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1719  0003F6  0100               	movlb	0	; () banked
  1720  0003F8  5D65               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1721  0003FA  0100               	movlb	0	; () banked
  1722  0003FC  5168               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1723  0003FE  0100               	movlb	0	; () banked
  1724  000400  5966               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1725  000402  B0D8               	btfsc	status,0,c
  1726  000404  D02F               	goto	l2439
  1727                           
  1728                           ; BSR set to: 0
  1729  000406  0100               	movlb	0	; () banked
  1730  000408  5169               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1731  00040A  0100               	movlb	0	; () banked
  1732  00040C  5D6B               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1733  00040E  0100               	movlb	0	; () banked
  1734  000410  516A               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1735  000412  0100               	movlb	0	; () banked
  1736  000414  596C               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1737  000416  B0D8               	btfsc	status,0,c
  1738  000418  D025               	goto	l2439
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;Movement.c: 196: turnLeft(mL,mR);
  1742  00041A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1743  00041E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1744  000422  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1745  000426  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1746  00042A  EC5C  F006         	call	_turnLeft	;wreg free
  1747                           
  1748                           ;Movement.c: 197: delay_tenth_s((3*tenth_seconds)/2);
  1749  00042E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1750  000430  0D03               	mullw	3
  1751  000432  CFF3 F015          	movff	prodl,___awdiv@dividend
  1752  000436  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1753  00043A  0E00               	movlw	0
  1754  00043C  6E18               	movwf	___awdiv@divisor+1,c
  1755  00043E  0E02               	movlw	2
  1756  000440  6E17               	movwf	___awdiv@divisor,c
  1757  000442  EC47  F005         	call	___awdiv	;wreg free
  1758  000446  5015               	movf	?___awdiv,w,c
  1759  000448  EC9D  F006         	call	_delay_tenth_s
  1760                           
  1761                           ;Movement.c: 198: stop(mL,mR);
  1762  00044C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1763  000450  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1764  000454  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1765  000458  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1766  00045C  ECFF  F004         	call	_stop	;wreg free
  1767                           
  1768                           ;Movement.c: 199: return 1;
  1769  000460  0E01               	movlw	1
  1770                           
  1771                           ;Movement.c: 200: } else if ((SensorResultR[0]>SensorResultR[1])&&(SensorResultC[1]>Sens
      +                          orResultC[0])) {
  1772  000462  0012               	return	
  1773  000464                     l2439:
  1774  000464  0100               	movlb	0	; () banked
  1775  000466  516D               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1776  000468  0100               	movlb	0	; () banked
  1777  00046A  5D6F               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1778  00046C  0100               	movlb	0	; () banked
  1779  00046E  516E               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1780  000470  0100               	movlb	0	; () banked
  1781  000472  5970               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1782  000474  B0D8               	btfsc	status,0,c
  1783  000476  0012               	return	
  1784                           
  1785                           ; BSR set to: 0
  1786  000478  0100               	movlb	0	; () banked
  1787  00047A  516B               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1788  00047C  0100               	movlb	0	; () banked
  1789  00047E  5D69               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  1790  000480  0100               	movlb	0	; () banked
  1791  000482  516C               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1792  000484  0100               	movlb	0	; () banked
  1793  000486  596A               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1794  000488  B0D8               	btfsc	status,0,c
  1795  00048A  0012               	return	
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;Movement.c: 202: turnLeft(mL,mR);
  1799  00048C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1800  000490  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1801  000494  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1802  000498  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1803  00049C  EC5C  F006         	call	_turnLeft	;wreg free
  1804                           
  1805                           ;Movement.c: 203: delay_tenth_s((tenth_seconds)/2);
  1806  0004A0  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  1807  0004A4  6A16               	clrf	___awdiv@dividend+1,c
  1808  0004A6  0E00               	movlw	0
  1809  0004A8  6E18               	movwf	___awdiv@divisor+1,c
  1810  0004AA  0E02               	movlw	2
  1811  0004AC  6E17               	movwf	___awdiv@divisor,c
  1812  0004AE  EC47  F005         	call	___awdiv	;wreg free
  1813  0004B2  5015               	movf	?___awdiv,w,c
  1814  0004B4  EC9D  F006         	call	_delay_tenth_s
  1815                           
  1816                           ;Movement.c: 204: stop(mL,mR);
  1817  0004B8  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1818  0004BC  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1819  0004C0  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1820  0004C4  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1821  0004C8  ECFF  F004         	call	_stop	;wreg free
  1822                           
  1823                           ;Movement.c: 205: return 1;
  1824  0004CC  0E01               	movlw	1
  1825  0004CE  0012               	return	
  1826  0004D0                     __end_of_ScanWithRange:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           prodh	equ	0xFF4
  1830                           prodl	equ	0xFF3
  1831                           intcon	equ	0xFF2
  1832                           postinc0	equ	0xFEE
  1833                           wreg	equ	0xFE8
  1834                           indf2	equ	0xFDF
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _ScanIR *****************
  1840 ;; Defined at:
  1841 ;;		line 32 in file "Movement.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1844 ;;		 -> main@mL(9), 
  1845 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1846 ;;		 -> main@mR(9), 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  SensorResult    4   54[COMRAM] unsigned int [2]
  1849 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      unsigned char 
  1852 ;; Registers used:
  1853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1859 ;;      Params:         4       0       0       0
  1860 ;;      Locals:         6       0       0       0
  1861 ;;      Temps:          2       0       0       0
  1862 ;;      Totals:        12       0       0       0
  1863 ;;Total ram usage:       12 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    5
  1866 ;; This function calls:
  1867 ;;		_BombDirectionFound
  1868 ;;		_delay_tenth_s
  1869 ;;		_grabLeftIR
  1870 ;;		_grabRightIR
  1871 ;;		_stop
  1872 ;;		_turnLeft
  1873 ;;		_turnRight
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text7
  1880  000680                     __ptext7:
  1881                           	opt stack 0
  1882  000680                     _ScanIR:
  1883                           	opt stack 25
  1884                           
  1885                           ;Movement.c: 34: unsigned int SensorResult[2];
  1886                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=1000;
  1887                           
  1888                           ;incstack = 0
  1889  000680  0E03               	movlw	3
  1890  000682  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  1891  000684  0EE8               	movlw	232
  1892  000686  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  1893                           
  1894                           ;Movement.c: 40: SensorResult[0]=grabLeftIR();
  1895  000688  ECC4  F005         	call	_grabLeftIR	;wreg free
  1896  00068C  C00F  F037         	movff	?_grabLeftIR,ScanIR@SensorResult
  1897  000690  C010  F038         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  1898                           
  1899                           ;Movement.c: 41: SensorResult[1]=grabRightIR();
  1900  000694  EC89  F005         	call	_grabRightIR	;wreg free
  1901  000698  C00F  F039         	movff	?_grabRightIR,ScanIR@SensorResult+2
  1902  00069C  C010  F03A         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  1903                           
  1904                           ;Movement.c: 45: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  1905  0006A0  5037               	movf	ScanIR@SensorResult,w,c
  1906  0006A2  2439               	addwf	ScanIR@SensorResult+2,w,c
  1907  0006A4  6E33               	movwf	??_ScanIR& (0+255),c
  1908  0006A6  5038               	movf	ScanIR@SensorResult+1,w,c
  1909  0006A8  203A               	addwfc	ScanIR@SensorResult+3,w,c
  1910  0006AA  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  1911  0006AC  5033               	movf	??_ScanIR,w,c
  1912  0006AE  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  1913  0006B0  5034               	movf	??_ScanIR+1,w,c
  1914  0006B2  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  1915  0006B4  B0D8               	btfsc	status,0,c
  1916  0006B6  D05D               	goto	l2495
  1917                           
  1918                           ;Movement.c: 48: if (BombDirectionFound(*SensorResult)) {
  1919  0006B8  C037  F00F         	movff	ScanIR@SensorResult,BombDirectionFound@SensorResult
  1920  0006BC  C038  F010         	movff	ScanIR@SensorResult+1,BombDirectionFound@SensorResult+1
  1921  0006C0  EC9B  F004         	call	_BombDirectionFound	;wreg free
  1922  0006C4  0900               	iorlw	0
  1923  0006C6  B4D8               	btfsc	status,2,c
  1924  0006C8  D002               	goto	l2469
  1925                           
  1926                           ;Movement.c: 49: return 2;
  1927  0006CA  0E02               	movlw	2
  1928                           
  1929                           ;Movement.c: 51: } else if (SensorResult[0]<=SensorResult[1]) {
  1930  0006CC  0012               	return	
  1931  0006CE                     l2469:
  1932  0006CE  5037               	movf	ScanIR@SensorResult,w,c
  1933  0006D0  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1934  0006D2  5038               	movf	ScanIR@SensorResult+1,w,c
  1935  0006D4  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1936  0006D6  A0D8               	btfss	status,0,c
  1937  0006D8  D023               	goto	l2483
  1938                           
  1939                           ;Movement.c: 52: stop(mL,mR);
  1940  0006DA  C02F  F026         	movff	ScanIR@mL,stop@mL
  1941  0006DE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1942  0006E2  C031  F028         	movff	ScanIR@mR,stop@mR
  1943  0006E6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1944  0006EA  ECFF  F004         	call	_stop	;wreg free
  1945                           
  1946                           ;Movement.c: 53: turnLeft(mL,mR);
  1947  0006EE  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1948  0006F2  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1949  0006F6  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1950  0006FA  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1951  0006FE  EC5C  F006         	call	_turnLeft	;wreg free
  1952                           
  1953                           ;Movement.c: 54: delay_tenth_s(3);
  1954  000702  0E03               	movlw	3
  1955  000704  EC9D  F006         	call	_delay_tenth_s
  1956                           
  1957                           ;Movement.c: 55: stop(mL,mR);
  1958  000708  C02F  F026         	movff	ScanIR@mL,stop@mL
  1959  00070C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1960  000710  C031  F028         	movff	ScanIR@mR,stop@mR
  1961  000714  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1962  000718  ECFF  F004         	call	_stop	;wreg free
  1963                           
  1964                           ;Movement.c: 56: return 1;
  1965  00071C  0E01               	movlw	1
  1966                           
  1967                           ;Movement.c: 58: } else if (SensorResult[0]>SensorResult[1]) {
  1968  00071E  0012               	return	
  1969  000720                     l2483:
  1970  000720  5037               	movf	ScanIR@SensorResult,w,c
  1971  000722  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1972  000724  5038               	movf	ScanIR@SensorResult+1,w,c
  1973  000726  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1974  000728  B0D8               	btfsc	status,0,c
  1975  00072A  0012               	return	
  1976                           
  1977                           ;Movement.c: 59: stop(mL,mR);
  1978  00072C  C02F  F026         	movff	ScanIR@mL,stop@mL
  1979  000730  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1980  000734  C031  F028         	movff	ScanIR@mR,stop@mR
  1981  000738  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1982  00073C  ECFF  F004         	call	_stop	;wreg free
  1983                           
  1984                           ;Movement.c: 60: turnRight(mL,mR);
  1985  000740  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  1986  000744  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  1987  000748  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  1988  00074C  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  1989  000750  EC37  F006         	call	_turnRight	;wreg free
  1990                           
  1991                           ;Movement.c: 61: delay_tenth_s(3);
  1992  000754  0E03               	movlw	3
  1993  000756  EC9D  F006         	call	_delay_tenth_s
  1994                           
  1995                           ;Movement.c: 62: stop(mL,mR);
  1996  00075A  C02F  F026         	movff	ScanIR@mL,stop@mL
  1997  00075E  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1998  000762  C031  F028         	movff	ScanIR@mR,stop@mR
  1999  000766  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2000  00076A  ECFF  F004         	call	_stop	;wreg free
  2001                           
  2002                           ;Movement.c: 63: return 1;
  2003  00076E  0E01               	movlw	1
  2004                           
  2005                           ;Movement.c: 64: }
  2006                           ;Movement.c: 65: } else {
  2007  000770  0012               	return	
  2008  000772                     l2495:
  2009                           
  2010                           ;Movement.c: 67: stop(mL,mR);
  2011  000772  C02F  F026         	movff	ScanIR@mL,stop@mL
  2012  000776  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2013  00077A  C031  F028         	movff	ScanIR@mR,stop@mR
  2014  00077E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2015  000782  ECFF  F004         	call	_stop	;wreg free
  2016                           
  2017                           ;Movement.c: 70: if (SensorResult[0]<=SensorResult[1]) {
  2018  000786  5037               	movf	ScanIR@SensorResult,w,c
  2019  000788  5C39               	subwf	ScanIR@SensorResult+2,w,c
  2020  00078A  5038               	movf	ScanIR@SensorResult+1,w,c
  2021  00078C  583A               	subwfb	ScanIR@SensorResult+3,w,c
  2022  00078E  A0D8               	btfss	status,0,c
  2023  000790  D019               	goto	l2511
  2024                           
  2025                           ;Movement.c: 71: turnLeft(mL,mR);
  2026  000792  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2027  000796  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2028  00079A  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2029  00079E  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2030  0007A2  EC5C  F006         	call	_turnLeft	;wreg free
  2031                           
  2032                           ;Movement.c: 72: delay_tenth_s(5);
  2033  0007A6  0E05               	movlw	5
  2034  0007A8  EC9D  F006         	call	_delay_tenth_s
  2035                           
  2036                           ;Movement.c: 73: stop(mL,mR);
  2037  0007AC  C02F  F026         	movff	ScanIR@mL,stop@mL
  2038  0007B0  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2039  0007B4  C031  F028         	movff	ScanIR@mR,stop@mR
  2040  0007B8  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2041  0007BC  ECFF  F004         	call	_stop	;wreg free
  2042                           
  2043                           ;Movement.c: 74: return 0;
  2044  0007C0  0E00               	movlw	0
  2045                           
  2046                           ;Movement.c: 76: } else if (SensorResult[0]>SensorResult[1]) {
  2047  0007C2  0012               	return	
  2048  0007C4                     l2511:
  2049  0007C4  5037               	movf	ScanIR@SensorResult,w,c
  2050  0007C6  5C39               	subwf	ScanIR@SensorResult+2,w,c
  2051  0007C8  5038               	movf	ScanIR@SensorResult+1,w,c
  2052  0007CA  583A               	subwfb	ScanIR@SensorResult+3,w,c
  2053  0007CC  B0D8               	btfsc	status,0,c
  2054  0007CE  0012               	return	
  2055                           
  2056                           ;Movement.c: 77: turnRight(mL,mR);
  2057  0007D0  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2058  0007D4  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2059  0007D8  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2060  0007DC  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2061  0007E0  EC37  F006         	call	_turnRight	;wreg free
  2062                           
  2063                           ;Movement.c: 78: delay_tenth_s(5);
  2064  0007E4  0E05               	movlw	5
  2065  0007E6  EC9D  F006         	call	_delay_tenth_s
  2066                           
  2067                           ;Movement.c: 79: stop(mL,mR);
  2068  0007EA  C02F  F026         	movff	ScanIR@mL,stop@mL
  2069  0007EE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2070  0007F2  C031  F028         	movff	ScanIR@mR,stop@mR
  2071  0007F6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2072  0007FA  ECFF  F004         	call	_stop	;wreg free
  2073                           
  2074                           ;Movement.c: 80: return 0;
  2075  0007FE  0E00               	movlw	0
  2076  000800  0012               	return	
  2077  000802                     __end_of_ScanIR:
  2078                           	opt stack 0
  2079                           tblptru	equ	0xFF8
  2080                           prodh	equ	0xFF4
  2081                           prodl	equ	0xFF3
  2082                           intcon	equ	0xFF2
  2083                           postinc0	equ	0xFEE
  2084                           wreg	equ	0xFE8
  2085                           indf2	equ	0xFDF
  2086                           fsr2h	equ	0xFDA
  2087                           fsr2l	equ	0xFD9
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _turnRight *****************
  2091 ;; Defined at:
  2092 ;;		line 98 in file "dc_motor.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2095 ;;		 -> main@mL(9), 
  2096 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2097 ;;		 -> main@mR(9), 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;		None               void
  2102 ;; Registers used:
  2103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2109 ;;      Params:         4       0       0       0
  2110 ;;      Locals:         0       0       0       0
  2111 ;;      Temps:          0       0       0       0
  2112 ;;      Totals:         4       0       0       0
  2113 ;;Total ram usage:        4 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    4
  2116 ;; This function calls:
  2117 ;;		_fullSpeedAhead
  2118 ;;		_stop
  2119 ;; This function is called by:
  2120 ;;		_ScanIR
  2121 ;;		_ScanWithRange
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text8
  2126  000C6E                     __ptext8:
  2127                           	opt stack 0
  2128  000C6E                     _turnRight:
  2129                           	opt stack 25
  2130                           
  2131                           ;dc_motor.c: 100: stop(mL, mR);
  2132                           
  2133                           ;incstack = 0
  2134  000C6E  C02B  F026         	movff	turnRight@mL,stop@mL
  2135  000C72  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2136  000C76  C02D  F028         	movff	turnRight@mR,stop@mR
  2137  000C7A  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2138  000C7E  ECFF  F004         	call	_stop	;wreg free
  2139                           
  2140                           ;dc_motor.c: 102: mL->direction=1;
  2141  000C82  EE20 F001          	lfsr	2,1
  2142  000C86  502B               	movf	turnRight@mL,w,c
  2143  000C88  26D9               	addwf	fsr2l,f,c
  2144  000C8A  502C               	movf	turnRight@mL+1,w,c
  2145  000C8C  22DA               	addwfc	fsr2h,f,c
  2146  000C8E  0E01               	movlw	1
  2147  000C90  6EDF               	movwf	indf2,c
  2148                           
  2149                           ;dc_motor.c: 103: mR->direction=0;
  2150  000C92  EE20 F001          	lfsr	2,1
  2151  000C96  502D               	movf	turnRight@mR,w,c
  2152  000C98  26D9               	addwf	fsr2l,f,c
  2153  000C9A  502E               	movf	turnRight@mR+1,w,c
  2154  000C9C  22DA               	addwfc	fsr2h,f,c
  2155  000C9E  0E00               	movlw	0
  2156  000CA0  6EDF               	movwf	indf2,c
  2157                           
  2158                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2159  000CA2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2160  000CA6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2161  000CAA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2162  000CAE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2163  000CB2  ECFF  F005         	call	_fullSpeedAhead	;wreg free
  2164  000CB6  0012               	return		;funcret
  2165  000CB8                     __end_of_turnRight:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           prodh	equ	0xFF4
  2169                           prodl	equ	0xFF3
  2170                           intcon	equ	0xFF2
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           indf2	equ	0xFDF
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _turnLeft *****************
  2179 ;; Defined at:
  2180 ;;		line 87 in file "dc_motor.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2183 ;;		 -> main@mL(9), 
  2184 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2185 ;;		 -> main@mR(9), 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;		None               void
  2190 ;; Registers used:
  2191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2197 ;;      Params:         4       0       0       0
  2198 ;;      Locals:         0       0       0       0
  2199 ;;      Temps:          0       0       0       0
  2200 ;;      Totals:         4       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    4
  2204 ;; This function calls:
  2205 ;;		_fullSpeedAhead
  2206 ;;		_stop
  2207 ;; This function is called by:
  2208 ;;		_ScanIR
  2209 ;;		_ScanWithRange
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text9
  2214  000CB8                     __ptext9:
  2215                           	opt stack 0
  2216  000CB8                     _turnLeft:
  2217                           	opt stack 25
  2218                           
  2219                           ;dc_motor.c: 89: stop(mL, mR);
  2220                           
  2221                           ;incstack = 0
  2222  000CB8  C02B  F026         	movff	turnLeft@mL,stop@mL
  2223  000CBC  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2224  000CC0  C02D  F028         	movff	turnLeft@mR,stop@mR
  2225  000CC4  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2226  000CC8  ECFF  F004         	call	_stop	;wreg free
  2227                           
  2228                           ;dc_motor.c: 91: mL->direction=0;
  2229  000CCC  EE20 F001          	lfsr	2,1
  2230  000CD0  502B               	movf	turnLeft@mL,w,c
  2231  000CD2  26D9               	addwf	fsr2l,f,c
  2232  000CD4  502C               	movf	turnLeft@mL+1,w,c
  2233  000CD6  22DA               	addwfc	fsr2h,f,c
  2234  000CD8  0E00               	movlw	0
  2235  000CDA  6EDF               	movwf	indf2,c
  2236                           
  2237                           ;dc_motor.c: 92: mR->direction=1;
  2238  000CDC  EE20 F001          	lfsr	2,1
  2239  000CE0  502D               	movf	turnLeft@mR,w,c
  2240  000CE2  26D9               	addwf	fsr2l,f,c
  2241  000CE4  502E               	movf	turnLeft@mR+1,w,c
  2242  000CE6  22DA               	addwfc	fsr2h,f,c
  2243  000CE8  0E01               	movlw	1
  2244  000CEA  6EDF               	movwf	indf2,c
  2245                           
  2246                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2247  000CEC  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2248  000CF0  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2249  000CF4  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2250  000CF8  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2251  000CFC  ECFF  F005         	call	_fullSpeedAhead	;wreg free
  2252  000D00  0012               	return		;funcret
  2253  000D02                     __end_of_turnLeft:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           prodh	equ	0xFF4
  2257                           prodl	equ	0xFF3
  2258                           intcon	equ	0xFF2
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           indf2	equ	0xFDF
  2262                           fsr2h	equ	0xFDA
  2263                           fsr2l	equ	0xFD9
  2264                           status	equ	0xFD8
  2265                           
  2266 ;; *************** function _stop *****************
  2267 ;; Defined at:
  2268 ;;		line 67 in file "dc_motor.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2271 ;;		 -> main@mL(9), 
  2272 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2273 ;;		 -> main@mR(9), 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;		None               void
  2278 ;; Registers used:
  2279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2285 ;;      Params:         4       0       0       0
  2286 ;;      Locals:         0       0       0       0
  2287 ;;      Temps:          0       0       0       0
  2288 ;;      Totals:         4       0       0       0
  2289 ;;Total ram usage:        4 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    3
  2292 ;; This function calls:
  2293 ;;		_setMotorPWM
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;;		_turnLeft
  2297 ;;		_turnRight
  2298 ;;		_ScanIR
  2299 ;;		_ScanWithRange
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text10
  2304  0009FE                     __ptext10:
  2305                           	opt stack 0
  2306  0009FE                     _stop:
  2307                           	opt stack 27
  2308                           
  2309                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2310                           
  2311                           ;incstack = 0
  2312  0009FE  D028               	goto	l2225
  2313  000A00                     l2211:
  2314                           
  2315                           ;dc_motor.c: 71: if(mL->power>0){
  2316  000A00  C026  FFD9         	movff	stop@mL,fsr2l
  2317  000A04  C027  FFDA         	movff	stop@mL+1,fsr2h
  2318  000A08  50DF               	movf	indf2,w,c
  2319  000A0A  B4D8               	btfsc	status,2,c
  2320  000A0C  D005               	goto	l2215
  2321                           
  2322                           ;dc_motor.c: 72: mL->power--;
  2323  000A0E  C026  FFD9         	movff	stop@mL,fsr2l
  2324  000A12  C027  FFDA         	movff	stop@mL+1,fsr2h
  2325  000A16  06DF               	decf	indf2,f,c
  2326  000A18                     l2215:
  2327                           
  2328                           ;dc_motor.c: 73: }
  2329                           ;dc_motor.c: 74: if(mR->power>0){
  2330  000A18  C028  FFD9         	movff	stop@mR,fsr2l
  2331  000A1C  C029  FFDA         	movff	stop@mR+1,fsr2h
  2332  000A20  50DF               	movf	indf2,w,c
  2333  000A22  B4D8               	btfsc	status,2,c
  2334  000A24  D005               	goto	l2219
  2335                           
  2336                           ;dc_motor.c: 75: mR->power--;
  2337  000A26  C028  FFD9         	movff	stop@mR,fsr2l
  2338  000A2A  C029  FFDA         	movff	stop@mR+1,fsr2h
  2339  000A2E  06DF               	decf	indf2,f,c
  2340  000A30                     l2219:
  2341                           
  2342                           ;dc_motor.c: 76: }
  2343                           ;dc_motor.c: 77: setMotorPWM(mL);
  2344  000A30  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2345  000A34  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2346  000A38  EC01  F004         	call	_setMotorPWM	;wreg free
  2347                           
  2348                           ;dc_motor.c: 78: setMotorPWM(mR);
  2349  000A3C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2350  000A40  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2351  000A44  EC01  F004         	call	_setMotorPWM	;wreg free
  2352                           
  2353                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2354  000A48  0E21               	movlw	33
  2355  000A4A                     u1927:
  2356  000A4A  2EE8               	decfsz	wreg,f,c
  2357  000A4C  D7FE               	goto	u1927
  2358  000A4E  F000               	nop	
  2359  000A50                     l2225:
  2360  000A50  C026  FFD9         	movff	stop@mL,fsr2l
  2361  000A54  C027  FFDA         	movff	stop@mL+1,fsr2h
  2362  000A58  50DF               	movf	indf2,w,c
  2363  000A5A  A4D8               	btfss	status,2,c
  2364  000A5C  D7D1               	goto	l2211
  2365  000A5E  C028  FFD9         	movff	stop@mR,fsr2l
  2366  000A62  C029  FFDA         	movff	stop@mR+1,fsr2h
  2367  000A66  50DF               	movf	indf2,w,c
  2368  000A68  A4D8               	btfss	status,2,c
  2369  000A6A  D7CA               	goto	l2211
  2370                           
  2371                           ;dc_motor.c: 80: }
  2372                           ;dc_motor.c: 81: mL->direction=1;
  2373  000A6C  EE20 F001          	lfsr	2,1
  2374  000A70  5026               	movf	stop@mL,w,c
  2375  000A72  26D9               	addwf	fsr2l,f,c
  2376  000A74  5027               	movf	stop@mL+1,w,c
  2377  000A76  22DA               	addwfc	fsr2h,f,c
  2378  000A78  0E01               	movlw	1
  2379  000A7A  6EDF               	movwf	indf2,c
  2380                           
  2381                           ;dc_motor.c: 82: mR->direction=1;
  2382  000A7C  EE20 F001          	lfsr	2,1
  2383  000A80  5028               	movf	stop@mR,w,c
  2384  000A82  26D9               	addwf	fsr2l,f,c
  2385  000A84  5029               	movf	stop@mR+1,w,c
  2386  000A86  22DA               	addwfc	fsr2h,f,c
  2387  000A88  0E01               	movlw	1
  2388  000A8A  6EDF               	movwf	indf2,c
  2389  000A8C  0012               	return		;funcret
  2390  000A8E                     __end_of_stop:
  2391                           	opt stack 0
  2392                           tblptru	equ	0xFF8
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           indf2	equ	0xFDF
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _fullSpeedAhead *****************
  2404 ;; Defined at:
  2405 ;;		line 108 in file "dc_motor.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2408 ;;		 -> main@mL(9), 
  2409 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2410 ;;		 -> main@mR(9), 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;		None               void
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2422 ;;      Params:         4       0       0       0
  2423 ;;      Locals:         0       0       0       0
  2424 ;;      Temps:          1       0       0       0
  2425 ;;      Totals:         5       0       0       0
  2426 ;;Total ram usage:        5 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    3
  2429 ;; This function calls:
  2430 ;;		_setMotorPWM
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;;		_turnLeft
  2434 ;;		_turnRight
  2435 ;;		_fullSpeedBack
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text11
  2440  000BFE                     __ptext11:
  2441                           	opt stack 0
  2442  000BFE                     _fullSpeedAhead:
  2443                           	opt stack 26
  2444                           
  2445                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2446                           
  2447                           ;incstack = 0
  2448  000BFE  D028               	goto	l137
  2449  000C00                     l2193:
  2450                           
  2451                           ;dc_motor.c: 112: if(mL->power<100){
  2452  000C00  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2453  000C04  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2454  000C08  0E64               	movlw	100
  2455  000C0A  60DF               	cpfslt	indf2,c
  2456  000C0C  D005               	goto	l2197
  2457                           
  2458                           ;dc_motor.c: 113: mL->power++;
  2459  000C0E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2460  000C12  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2461  000C16  2ADF               	incf	indf2,f,c
  2462  000C18                     l2197:
  2463                           
  2464                           ;dc_motor.c: 114: }
  2465                           ;dc_motor.c: 115: if(mR->power<100){
  2466  000C18  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2467  000C1C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2468  000C20  0E64               	movlw	100
  2469  000C22  60DF               	cpfslt	indf2,c
  2470  000C24  D005               	goto	l2201
  2471                           
  2472                           ;dc_motor.c: 116: mR->power++;
  2473  000C26  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2474  000C2A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2475  000C2E  2ADF               	incf	indf2,f,c
  2476  000C30                     l2201:
  2477                           
  2478                           ;dc_motor.c: 117: }
  2479                           ;dc_motor.c: 118: setMotorPWM(mL);
  2480  000C30  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2481  000C34  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2482  000C38  EC01  F004         	call	_setMotorPWM	;wreg free
  2483                           
  2484                           ;dc_motor.c: 119: setMotorPWM(mR);
  2485  000C3C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2486  000C40  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2487  000C44  EC01  F004         	call	_setMotorPWM	;wreg free
  2488                           
  2489                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2490  000C48  0E21               	movlw	33
  2491  000C4A                     u1937:
  2492  000C4A  2EE8               	decfsz	wreg,f,c
  2493  000C4C  D7FE               	goto	u1937
  2494  000C4E  F000               	nop	
  2495  000C50                     l137:
  2496  000C50  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2497  000C54  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2498  000C58  0E63               	movlw	99
  2499  000C5A  64DF               	cpfsgt	indf2,c
  2500  000C5C  D7D1               	goto	l2193
  2501  000C5E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2502  000C62  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2503  000C66  0E63               	movlw	99
  2504  000C68  64DF               	cpfsgt	indf2,c
  2505  000C6A  D7CA               	goto	l2193
  2506  000C6C  0012               	return	
  2507  000C6E                     __end_of_fullSpeedAhead:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           prodh	equ	0xFF4
  2511                           prodl	equ	0xFF3
  2512                           intcon	equ	0xFF2
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           indf2	equ	0xFDF
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _setMotorPWM *****************
  2521 ;; Defined at:
  2522 ;;		line 26 in file "dc_motor.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2525 ;;		 -> main@mR(9), main@mL(9), 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  PWMduty         2   35[COMRAM] int 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;		None               void
  2530 ;; Registers used:
  2531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2537 ;;      Params:         2       0       0       0
  2538 ;;      Locals:         2       0       0       0
  2539 ;;      Temps:          5       0       0       0
  2540 ;;      Totals:         9       0       0       0
  2541 ;;Total ram usage:        9 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    2
  2544 ;; This function calls:
  2545 ;;		___awdiv
  2546 ;;		___wmul
  2547 ;; This function is called by:
  2548 ;;		_stop
  2549 ;;		_fullSpeedAhead
  2550 ;;		_setMotorFullSpeed
  2551 ;;		_stopMotor
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text12
  2556  000802                     __ptext12:
  2557                           	opt stack 0
  2558  000802                     _setMotorPWM:
  2559                           	opt stack 27
  2560                           
  2561                           ;dc_motor.c: 28: int PWMduty;
  2562                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2563                           
  2564                           ;incstack = 0
  2565  000802  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2566  000806  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2567  00080A  50DF               	movf	indf2,w,c
  2568  00080C  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2569  00080E  501F               	movf	??_setMotorPWM,w,c
  2570  000810  6E0F               	movwf	___wmul@multiplier,c
  2571  000812  6A10               	clrf	___wmul@multiplier+1,c
  2572  000814  EE20 F007          	lfsr	2,7
  2573  000818  501D               	movf	setMotorPWM@m,w,c
  2574  00081A  26D9               	addwf	fsr2l,f,c
  2575  00081C  501E               	movf	setMotorPWM@m+1,w,c
  2576  00081E  22DA               	addwfc	fsr2h,f,c
  2577  000820  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2578  000824  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2579  000828  EC00  F007         	call	___wmul	;wreg free
  2580  00082C  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2581  000830  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2582  000834  0E00               	movlw	0
  2583  000836  6E18               	movwf	___awdiv@divisor+1,c
  2584  000838  0E64               	movlw	100
  2585  00083A  6E17               	movwf	___awdiv@divisor,c
  2586  00083C  EC47  F005         	call	___awdiv	;wreg free
  2587  000840  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2588  000844  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2589                           
  2590                           ;dc_motor.c: 32: if (m->direction)
  2591  000848  EE20 F001          	lfsr	2,1
  2592  00084C  501D               	movf	setMotorPWM@m,w,c
  2593  00084E  26D9               	addwf	fsr2l,f,c
  2594  000850  501E               	movf	setMotorPWM@m+1,w,c
  2595  000852  22DA               	addwfc	fsr2h,f,c
  2596  000854  50DF               	movf	indf2,w,c
  2597  000856  B4D8               	btfsc	status,2,c
  2598  000858  D02C               	goto	l2189
  2599                           
  2600                           ;dc_motor.c: 33: {
  2601                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2602  00085A  EE20 F006          	lfsr	2,6
  2603  00085E  501D               	movf	setMotorPWM@m,w,c
  2604  000860  26D9               	addwf	fsr2l,f,c
  2605  000862  501E               	movf	setMotorPWM@m+1,w,c
  2606  000864  22DA               	addwfc	fsr2h,f,c
  2607  000866  50DF               	movf	indf2,w,c
  2608  000868  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2609  00086A  0E01               	movlw	1
  2610  00086C  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2611  00086E  2A1F               	incf	??_setMotorPWM,f,c
  2612  000870  D002               	goto	u1444
  2613  000872                     u1445:
  2614  000872  90D8               	bcf	status,0,c
  2615  000874  3620               	rlcf	??_setMotorPWM+1,f,c
  2616  000876                     u1444:
  2617  000876  2E1F               	decfsz	??_setMotorPWM,f,c
  2618  000878  D7FC               	goto	u1445
  2619  00087A  5020               	movf	??_setMotorPWM+1,w,c
  2620  00087C  108A               	iorwf	3978,w,c	;volatile
  2621  00087E  6E8A               	movwf	3978,c	;volatile
  2622                           
  2623                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2624  000880  EE20 F007          	lfsr	2,7
  2625  000884  501D               	movf	setMotorPWM@m,w,c
  2626  000886  26D9               	addwf	fsr2l,f,c
  2627  000888  501E               	movf	setMotorPWM@m+1,w,c
  2628  00088A  22DA               	addwfc	fsr2h,f,c
  2629  00088C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2630  000890  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2631  000894  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2632  000898  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2633  00089C  1E21               	comf	??_setMotorPWM+2,f,c
  2634  00089E  1E22               	comf	??_setMotorPWM+3,f,c
  2635  0008A0  4A21               	infsnz	??_setMotorPWM+2,f,c
  2636  0008A2  2A22               	incf	??_setMotorPWM+3,f,c
  2637  0008A4  501F               	movf	??_setMotorPWM,w,c
  2638  0008A6  2421               	addwf	??_setMotorPWM+2,w,c
  2639  0008A8  6E24               	movwf	setMotorPWM@PWMduty,c
  2640  0008AA  5020               	movf	??_setMotorPWM+1,w,c
  2641  0008AC  2022               	addwfc	??_setMotorPWM+3,w,c
  2642  0008AE  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2643                           
  2644                           ;dc_motor.c: 36: }
  2645  0008B0  D014               	goto	l107
  2646  0008B2                     l2189:
  2647                           
  2648                           ;dc_motor.c: 37: else
  2649                           ;dc_motor.c: 38: {
  2650                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2651  0008B2  EE20 F006          	lfsr	2,6
  2652  0008B6  501D               	movf	setMotorPWM@m,w,c
  2653  0008B8  26D9               	addwf	fsr2l,f,c
  2654  0008BA  501E               	movf	setMotorPWM@m+1,w,c
  2655  0008BC  22DA               	addwfc	fsr2h,f,c
  2656  0008BE  50DF               	movf	indf2,w,c
  2657  0008C0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2658  0008C2  0E01               	movlw	1
  2659  0008C4  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2660  0008C6  2A1F               	incf	??_setMotorPWM,f,c
  2661  0008C8  D002               	goto	u1454
  2662  0008CA                     u1455:
  2663  0008CA  90D8               	bcf	status,0,c
  2664  0008CC  3620               	rlcf	??_setMotorPWM+1,f,c
  2665  0008CE                     u1454:
  2666  0008CE  2E1F               	decfsz	??_setMotorPWM,f,c
  2667  0008D0  D7FC               	goto	u1455
  2668  0008D2  5020               	movf	??_setMotorPWM+1,w,c
  2669  0008D4  0AFF               	xorlw	255
  2670  0008D6  148A               	andwf	3978,w,c	;volatile
  2671  0008D8  6E8A               	movwf	3978,c	;volatile
  2672  0008DA                     l107:
  2673                           
  2674                           ;dc_motor.c: 40: }
  2675                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2676  0008DA  EE20 F002          	lfsr	2,2
  2677  0008DE  501D               	movf	setMotorPWM@m,w,c
  2678  0008E0  26D9               	addwf	fsr2l,f,c
  2679  0008E2  501E               	movf	setMotorPWM@m+1,w,c
  2680  0008E4  22DA               	addwfc	fsr2h,f,c
  2681  0008E6  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2682  0008EA  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2683  0008EE  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2684  0008F2  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2685  0008F6  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2686  0008F8  46E8               	rlncf	wreg,f,c
  2687  0008FA  0BFC               	andlw	252
  2688  0008FC  6EDF               	movwf	indf2,c
  2689                           
  2690                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2691  0008FE  EE20 F004          	lfsr	2,4
  2692  000902  501D               	movf	setMotorPWM@m,w,c
  2693  000904  26D9               	addwf	fsr2l,f,c
  2694  000906  501E               	movf	setMotorPWM@m+1,w,c
  2695  000908  22DA               	addwfc	fsr2h,f,c
  2696  00090A  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2697  00090E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2698  000912  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2699  000916  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2700  00091A  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2701  00091E  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2702  000922  0E06               	movlw	6
  2703  000924  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2704  000926                     u1465:
  2705  000926  3422               	rlcf	??_setMotorPWM+3,w,c
  2706  000928  3222               	rrcf	??_setMotorPWM+3,f,c
  2707  00092A  3221               	rrcf	??_setMotorPWM+2,f,c
  2708  00092C  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2709  00092E  D7FB               	goto	u1465
  2710  000930  5021               	movf	??_setMotorPWM+2,w,c
  2711  000932  6EDF               	movwf	indf2,c
  2712  000934  0012               	return		;funcret
  2713  000936                     __end_of_setMotorPWM:
  2714                           	opt stack 0
  2715                           tblptru	equ	0xFF8
  2716                           prodh	equ	0xFF4
  2717                           prodl	equ	0xFF3
  2718                           intcon	equ	0xFF2
  2719                           postinc0	equ	0xFEE
  2720                           wreg	equ	0xFE8
  2721                           indf2	equ	0xFDF
  2722                           postinc2	equ	0xFDE
  2723                           postdec2	equ	0xFDD
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function ___wmul *****************
  2729 ;; Defined at:
  2730 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  multiplier      2   14[COMRAM] unsigned int 
  2733 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  product         2   18[COMRAM] unsigned int 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   14[COMRAM] unsigned int 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0, prodl, prodh
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2745 ;;      Params:         4       0       0       0
  2746 ;;      Locals:         2       0       0       0
  2747 ;;      Temps:          0       0       0       0
  2748 ;;      Totals:         6       0       0       0
  2749 ;;Total ram usage:        6 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    1
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_setMotorPWM
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text13
  2760  000E00                     __ptext13:
  2761                           	opt stack 0
  2762  000E00                     ___wmul:
  2763                           	opt stack 27
  2764                           
  2765                           ;incstack = 0
  2766  000E00  500F               	movf	___wmul@multiplier,w,c
  2767  000E02  0211               	mulwf	___wmul@multiplicand,c
  2768  000E04  CFF3 F013          	movff	prodl,___wmul@product
  2769  000E08  CFF4 F014          	movff	prodh,___wmul@product+1
  2770  000E0C  500F               	movf	___wmul@multiplier,w,c
  2771  000E0E  0212               	mulwf	___wmul@multiplicand+1,c
  2772  000E10  50F3               	movf	prodl,w,c
  2773  000E12  2614               	addwf	___wmul@product+1,f,c
  2774  000E14  5010               	movf	___wmul@multiplier+1,w,c
  2775  000E16  0211               	mulwf	___wmul@multiplicand,c
  2776  000E18  50F3               	movf	prodl,w,c
  2777  000E1A  2614               	addwf	___wmul@product+1,f,c
  2778  000E1C  C013  F00F         	movff	___wmul@product,?___wmul
  2779  000E20  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2780  000E24  0012               	return	
  2781  000E26                     __end_of___wmul:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           intcon	equ	0xFF2
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           indf2	equ	0xFDF
  2790                           postinc2	equ	0xFDE
  2791                           postdec2	equ	0xFDD
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function ___awdiv *****************
  2797 ;; Defined at:
  2798 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  dividend        2   20[COMRAM] int 
  2801 ;;  divisor         2   22[COMRAM] int 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  quotient        2   26[COMRAM] int 
  2804 ;;  sign            1   25[COMRAM] unsigned char 
  2805 ;;  counter         1   24[COMRAM] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  2   20[COMRAM] int 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2815 ;;      Params:         4       0       0       0
  2816 ;;      Locals:         4       0       0       0
  2817 ;;      Temps:          0       0       0       0
  2818 ;;      Totals:         8       0       0       0
  2819 ;;Total ram usage:        8 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    1
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_setMotorPWM
  2826 ;;		_ScanWithRange
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text14
  2831  000A8E                     __ptext14:
  2832                           	opt stack 0
  2833  000A8E                     ___awdiv:
  2834                           	opt stack 27
  2835                           
  2836                           ;incstack = 0
  2837  000A8E  0E00               	movlw	0
  2838  000A90  6E1A               	movwf	___awdiv@sign,c
  2839  000A92  AE18               	btfss	___awdiv@divisor+1,7,c
  2840  000A94  D006               	goto	l2147
  2841  000A96  6C17               	negf	___awdiv@divisor,c
  2842  000A98  1E18               	comf	___awdiv@divisor+1,f,c
  2843  000A9A  B0D8               	btfsc	status,0,c
  2844  000A9C  2A18               	incf	___awdiv@divisor+1,f,c
  2845  000A9E  0E01               	movlw	1
  2846  000AA0  6E1A               	movwf	___awdiv@sign,c
  2847  000AA2                     l2147:
  2848  000AA2  AE16               	btfss	___awdiv@dividend+1,7,c
  2849  000AA4  D006               	goto	l2153
  2850  000AA6  6C15               	negf	___awdiv@dividend,c
  2851  000AA8  1E16               	comf	___awdiv@dividend+1,f,c
  2852  000AAA  B0D8               	btfsc	status,0,c
  2853  000AAC  2A16               	incf	___awdiv@dividend+1,f,c
  2854  000AAE  0E01               	movlw	1
  2855  000AB0  1A1A               	xorwf	___awdiv@sign,f,c
  2856  000AB2                     l2153:
  2857  000AB2  0E00               	movlw	0
  2858  000AB4  6E1C               	movwf	___awdiv@quotient+1,c
  2859  000AB6  0E00               	movlw	0
  2860  000AB8  6E1B               	movwf	___awdiv@quotient,c
  2861  000ABA  5017               	movf	___awdiv@divisor,w,c
  2862  000ABC  1018               	iorwf	___awdiv@divisor+1,w,c
  2863  000ABE  B4D8               	btfsc	status,2,c
  2864  000AC0  D01C               	goto	l2175
  2865  000AC2  0E01               	movlw	1
  2866  000AC4  6E19               	movwf	___awdiv@counter,c
  2867  000AC6  D004               	goto	l2161
  2868  000AC8                     l2159:
  2869  000AC8  90D8               	bcf	status,0,c
  2870  000ACA  3617               	rlcf	___awdiv@divisor,f,c
  2871  000ACC  3618               	rlcf	___awdiv@divisor+1,f,c
  2872  000ACE  2A19               	incf	___awdiv@counter,f,c
  2873  000AD0                     l2161:
  2874  000AD0  AE18               	btfss	___awdiv@divisor+1,7,c
  2875  000AD2  D7FA               	goto	l2159
  2876  000AD4                     l2163:
  2877  000AD4  90D8               	bcf	status,0,c
  2878  000AD6  361B               	rlcf	___awdiv@quotient,f,c
  2879  000AD8  361C               	rlcf	___awdiv@quotient+1,f,c
  2880  000ADA  5017               	movf	___awdiv@divisor,w,c
  2881  000ADC  5C15               	subwf	___awdiv@dividend,w,c
  2882  000ADE  5018               	movf	___awdiv@divisor+1,w,c
  2883  000AE0  5816               	subwfb	___awdiv@dividend+1,w,c
  2884  000AE2  A0D8               	btfss	status,0,c
  2885  000AE4  D005               	goto	l2171
  2886  000AE6  5017               	movf	___awdiv@divisor,w,c
  2887  000AE8  5E15               	subwf	___awdiv@dividend,f,c
  2888  000AEA  5018               	movf	___awdiv@divisor+1,w,c
  2889  000AEC  5A16               	subwfb	___awdiv@dividend+1,f,c
  2890  000AEE  801B               	bsf	___awdiv@quotient,0,c
  2891  000AF0                     l2171:
  2892  000AF0  90D8               	bcf	status,0,c
  2893  000AF2  3218               	rrcf	___awdiv@divisor+1,f,c
  2894  000AF4  3217               	rrcf	___awdiv@divisor,f,c
  2895  000AF6  2E19               	decfsz	___awdiv@counter,f,c
  2896  000AF8  D7ED               	goto	l2163
  2897  000AFA                     l2175:
  2898  000AFA  501A               	movf	___awdiv@sign,w,c
  2899  000AFC  B4D8               	btfsc	status,2,c
  2900  000AFE  D004               	goto	l2179
  2901  000B00  6C1B               	negf	___awdiv@quotient,c
  2902  000B02  1E1C               	comf	___awdiv@quotient+1,f,c
  2903  000B04  B0D8               	btfsc	status,0,c
  2904  000B06  2A1C               	incf	___awdiv@quotient+1,f,c
  2905  000B08                     l2179:
  2906  000B08  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2907  000B0C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2908  000B10  0012               	return	
  2909  000B12                     __end_of___awdiv:
  2910                           	opt stack 0
  2911                           tblptru	equ	0xFF8
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           intcon	equ	0xFF2
  2915                           postinc0	equ	0xFEE
  2916                           wreg	equ	0xFE8
  2917                           indf2	equ	0xFDF
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _grabRightIR *****************
  2925 ;; Defined at:
  2926 ;;		line 74 in file "IR_Reading.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  IR_signal       2   19[COMRAM] unsigned int 
  2931 ;;  i               1   21[COMRAM] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  2   14[COMRAM] unsigned int 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2941 ;;      Params:         2       0       0       0
  2942 ;;      Locals:         3       0       0       0
  2943 ;;      Temps:          3       0       0       0
  2944 ;;      Totals:         8       0       0       0
  2945 ;;Total ram usage:        8 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    1
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_ScanIR
  2952 ;;		_ScanWithRange
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text15
  2957  000B12                     __ptext15:
  2958                           	opt stack 0
  2959  000B12                     _grabRightIR:
  2960                           	opt stack 28
  2961                           
  2962                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2963                           
  2964                           ;incstack = 0
  2965  000B12  0E00               	movlw	0
  2966  000B14  6E15               	movwf	grabRightIR@IR_signal+1,c
  2967  000B16  0E00               	movlw	0
  2968  000B18  6E14               	movwf	grabRightIR@IR_signal,c
  2969                           
  2970                           ;IR_Reading.c: 77: unsigned char i=0;
  2971  000B1A  0E00               	movlw	0
  2972  000B1C  6E16               	movwf	grabRightIR@i,c
  2973                           
  2974                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  2975  000B1E  0E00               	movlw	0
  2976  000B20  6E16               	movwf	grabRightIR@i,c
  2977  000B22                     l2269:
  2978  000B22  0E03               	movlw	3
  2979  000B24  6416               	cpfsgt	grabRightIR@i,c
  2980  000B26  D001               	goto	l2273
  2981  000B28  D020               	goto	l2279
  2982  000B2A                     l2273:
  2983                           
  2984                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  2985  000B2A  5069               	movf	3945,w,c	;volatile
  2986  000B2C  6E11               	movwf	??_grabRightIR& (0+255),c
  2987  000B2E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2988  000B30  0E06               	movlw	6
  2989  000B32                     u1605:
  2990  000B32  90D8               	bcf	status,0,c
  2991  000B34  3611               	rlcf	??_grabRightIR,f,c
  2992  000B36  3612               	rlcf	??_grabRightIR+1,f,c
  2993  000B38  2EE8               	decfsz	wreg,f,c
  2994  000B3A  D7FB               	goto	u1605
  2995  000B3C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  2996  000B40  90D8               	bcf	status,0,c
  2997  000B42  3213               	rrcf	??_grabRightIR+2,f,c
  2998  000B44  90D8               	bcf	status,0,c
  2999  000B46  3213               	rrcf	??_grabRightIR+2,f,c
  3000  000B48  5013               	movf	??_grabRightIR+2,w,c
  3001  000B4A  1211               	iorwf	??_grabRightIR,f,c
  3002  000B4C  0E00               	movlw	0
  3003  000B4E  1212               	iorwf	??_grabRightIR+1,f,c
  3004  000B50  5011               	movf	??_grabRightIR,w,c
  3005  000B52  2614               	addwf	grabRightIR@IR_signal,f,c
  3006  000B54  5012               	movf	??_grabRightIR+1,w,c
  3007  000B56  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3008                           
  3009                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3010  000B58  0E82               	movlw	130
  3011  000B5A  6E11               	movwf	??_grabRightIR& (0+255),c
  3012  000B5C  0EDE               	movlw	222
  3013  000B5E                     u1947:
  3014  000B5E  2EE8               	decfsz	wreg,f,c
  3015  000B60  D7FE               	goto	u1947
  3016  000B62  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3017  000B64  D7FC               	goto	u1947
  3018  000B66  2A16               	incf	grabRightIR@i,f,c
  3019  000B68  D7DC               	goto	l2269
  3020  000B6A                     l2279:
  3021                           
  3022                           ;IR_Reading.c: 83: }
  3023                           ;IR_Reading.c: 85: return IR_signal>>2;
  3024  000B6A  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3025  000B6E  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3026  000B72  90D8               	bcf	status,0,c
  3027  000B74  3212               	rrcf	??_grabRightIR+1,f,c
  3028  000B76  3211               	rrcf	??_grabRightIR,f,c
  3029  000B78  90D8               	bcf	status,0,c
  3030  000B7A  3212               	rrcf	??_grabRightIR+1,f,c
  3031  000B7C  3211               	rrcf	??_grabRightIR,f,c
  3032  000B7E  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3033  000B82  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3034  000B86  0012               	return	
  3035  000B88                     __end_of_grabRightIR:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           prodh	equ	0xFF4
  3039                           prodl	equ	0xFF3
  3040                           intcon	equ	0xFF2
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           indf2	equ	0xFDF
  3044                           postinc2	equ	0xFDE
  3045                           postdec2	equ	0xFDD
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _grabLeftIR *****************
  3051 ;; Defined at:
  3052 ;;		line 90 in file "IR_Reading.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3057 ;;  i               1   21[COMRAM] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  2   14[COMRAM] unsigned int 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3067 ;;      Params:         2       0       0       0
  3068 ;;      Locals:         3       0       0       0
  3069 ;;      Temps:          3       0       0       0
  3070 ;;      Totals:         8       0       0       0
  3071 ;;Total ram usage:        8 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_ScanIR
  3078 ;;		_ScanWithRange
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text16
  3083  000B88                     __ptext16:
  3084                           	opt stack 0
  3085  000B88                     _grabLeftIR:
  3086                           	opt stack 28
  3087                           
  3088                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3089                           
  3090                           ;incstack = 0
  3091  000B88  0E00               	movlw	0
  3092  000B8A  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3093  000B8C  0E00               	movlw	0
  3094  000B8E  6E14               	movwf	grabLeftIR@IR_signal,c
  3095                           
  3096                           ;IR_Reading.c: 93: unsigned char i=0;
  3097  000B90  0E00               	movlw	0
  3098  000B92  6E16               	movwf	grabLeftIR@i,c
  3099                           
  3100                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3101  000B94  0E00               	movlw	0
  3102  000B96  6E16               	movwf	grabLeftIR@i,c
  3103  000B98                     l2253:
  3104  000B98  0E03               	movlw	3
  3105  000B9A  6416               	cpfsgt	grabLeftIR@i,c
  3106  000B9C  D001               	goto	l2257
  3107  000B9E  D020               	goto	l2263
  3108  000BA0                     l2257:
  3109                           
  3110                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3111  000BA0  5067               	movf	3943,w,c	;volatile
  3112  000BA2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3113  000BA4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3114  000BA6  0E06               	movlw	6
  3115  000BA8                     u1575:
  3116  000BA8  90D8               	bcf	status,0,c
  3117  000BAA  3611               	rlcf	??_grabLeftIR,f,c
  3118  000BAC  3612               	rlcf	??_grabLeftIR+1,f,c
  3119  000BAE  2EE8               	decfsz	wreg,f,c
  3120  000BB0  D7FB               	goto	u1575
  3121  000BB2  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3122  000BB6  90D8               	bcf	status,0,c
  3123  000BB8  3213               	rrcf	??_grabLeftIR+2,f,c
  3124  000BBA  90D8               	bcf	status,0,c
  3125  000BBC  3213               	rrcf	??_grabLeftIR+2,f,c
  3126  000BBE  5013               	movf	??_grabLeftIR+2,w,c
  3127  000BC0  1211               	iorwf	??_grabLeftIR,f,c
  3128  000BC2  0E00               	movlw	0
  3129  000BC4  1212               	iorwf	??_grabLeftIR+1,f,c
  3130  000BC6  5011               	movf	??_grabLeftIR,w,c
  3131  000BC8  2614               	addwf	grabLeftIR@IR_signal,f,c
  3132  000BCA  5012               	movf	??_grabLeftIR+1,w,c
  3133  000BCC  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3134                           
  3135                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3136  000BCE  0E82               	movlw	130
  3137  000BD0  6E11               	movwf	??_grabLeftIR& (0+255),c
  3138  000BD2  0EDE               	movlw	222
  3139  000BD4                     u1957:
  3140  000BD4  2EE8               	decfsz	wreg,f,c
  3141  000BD6  D7FE               	goto	u1957
  3142  000BD8  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3143  000BDA  D7FC               	goto	u1957
  3144  000BDC  2A16               	incf	grabLeftIR@i,f,c
  3145  000BDE  D7DC               	goto	l2253
  3146  000BE0                     l2263:
  3147                           
  3148                           ;IR_Reading.c: 99: }
  3149                           ;IR_Reading.c: 101: return IR_signal>>2;
  3150  000BE0  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3151  000BE4  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3152  000BE8  90D8               	bcf	status,0,c
  3153  000BEA  3212               	rrcf	??_grabLeftIR+1,f,c
  3154  000BEC  3211               	rrcf	??_grabLeftIR,f,c
  3155  000BEE  90D8               	bcf	status,0,c
  3156  000BF0  3212               	rrcf	??_grabLeftIR+1,f,c
  3157  000BF2  3211               	rrcf	??_grabLeftIR,f,c
  3158  000BF4  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3159  000BF8  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3160  000BFC  0012               	return	
  3161  000BFE                     __end_of_grabLeftIR:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           intcon	equ	0xFF2
  3167                           postinc0	equ	0xFEE
  3168                           wreg	equ	0xFE8
  3169                           indf2	equ	0xFDF
  3170                           postinc2	equ	0xFDE
  3171                           postdec2	equ	0xFDD
  3172                           fsr2h	equ	0xFDA
  3173                           fsr2l	equ	0xFD9
  3174                           status	equ	0xFD8
  3175                           
  3176 ;; *************** function _delay_tenth_s *****************
  3177 ;; Defined at:
  3178 ;;		line 19 in file "Movement.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  tenth_second    1    wreg     unsigned char 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3183 ;;  i               2   16[COMRAM] unsigned int 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;		None               void
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3193 ;;      Params:         0       0       0       0
  3194 ;;      Locals:         3       0       0       0
  3195 ;;      Temps:          1       0       0       0
  3196 ;;      Totals:         4       0       0       0
  3197 ;;Total ram usage:        4 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    1
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_ScanIR
  3204 ;;		_ScanWithRange
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text17
  3209  000D3A                     __ptext17:
  3210                           	opt stack 0
  3211  000D3A                     _delay_tenth_s:
  3212                           	opt stack 28
  3213                           
  3214                           ;incstack = 0
  3215                           ;delay_tenth_s@tenth_seconds stored from wreg
  3216  000D3A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3217                           
  3218                           ;Movement.c: 20: unsigned int i=0;
  3219  000D3C  0E00               	movlw	0
  3220  000D3E  6E12               	movwf	delay_tenth_s@i+1,c
  3221  000D40  0E00               	movlw	0
  3222  000D42  6E11               	movwf	delay_tenth_s@i,c
  3223                           
  3224                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3225  000D44  0E00               	movlw	0
  3226  000D46  6E12               	movwf	delay_tenth_s@i+1,c
  3227  000D48  0E01               	movlw	1
  3228  000D4A  6E11               	movwf	delay_tenth_s@i,c
  3229  000D4C  D009               	goto	l2249
  3230  000D4E                     l2245:
  3231                           
  3232                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3233  000D4E  0E82               	movlw	130
  3234  000D50  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3235  000D52  0EDE               	movlw	222
  3236  000D54                     u1967:
  3237  000D54  2EE8               	decfsz	wreg,f,c
  3238  000D56  D7FE               	goto	u1967
  3239  000D58  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3240  000D5A  D7FC               	goto	u1967
  3241  000D5C  4A11               	infsnz	delay_tenth_s@i,f,c
  3242  000D5E  2A12               	incf	delay_tenth_s@i+1,f,c
  3243  000D60                     l2249:
  3244  000D60  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3245  000D62  0D02               	mullw	2
  3246  000D64  5011               	movf	delay_tenth_s@i,w,c
  3247  000D66  5CF3               	subwf	prodl,w,c
  3248  000D68  5012               	movf	delay_tenth_s@i+1,w,c
  3249  000D6A  58F4               	subwfb	prodh,w,c
  3250  000D6C  A0D8               	btfss	status,0,c
  3251  000D6E  0012               	return	
  3252  000D70  D7EE               	goto	l2245
  3253  000D72                     __end_of_delay_tenth_s:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _BombDirectionFound *****************
  3269 ;; Defined at:
  3270 ;;		line 210 in file "Movement.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  SensorResult    2   14[COMRAM] PTR unsigned int 
  3273 ;;		 -> RAM(767), 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  DirectionFou    2   23[COMRAM] const unsigned int 
  3276 ;;  DirectionFou    2   21[COMRAM] const unsigned int 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      unsigned char 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3286 ;;      Params:         2       0       0       0
  3287 ;;      Locals:         5       0       0       0
  3288 ;;      Temps:          4       0       0       0
  3289 ;;      Totals:        11       0       0       0
  3290 ;;Total ram usage:       11 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    1
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_ScanIR
  3297 ;;		_ScanWithRange
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text18
  3302  000936                     __ptext18:
  3303                           	opt stack 0
  3304  000936                     _BombDirectionFound:
  3305                           	opt stack 28
  3306                           
  3307                           ;Movement.c: 212: const unsigned int DirectionFoundLimit=2500;
  3308                           
  3309                           ;incstack = 0
  3310  000936  0E09               	movlw	9
  3311  000938  6E17               	movwf	BombDirectionFound@DirectionFoundLimit+1,c
  3312  00093A  0EC4               	movlw	196
  3313  00093C  6E16               	movwf	BombDirectionFound@DirectionFoundLimit,c
  3314                           
  3315                           ;Movement.c: 213: const unsigned int DirectionFoundTolerance=100;
  3316  00093E  0E00               	movlw	0
  3317  000940  6E19               	movwf	BombDirectionFound@DirectionFoundTolerance+1,c
  3318  000942  0E64               	movlw	100
  3319  000944  6E18               	movwf	BombDirectionFound@DirectionFoundTolerance,c
  3320                           
  3321                           ;Movement.c: 215: return (SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>Directi
      +                          onFoundLimit)
  3322                           ;Movement.c: 216: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3323                           ;Movement.c: 217: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance));
  3324  000946  0E00               	movlw	0
  3325  000948  6E15               	movwf	_BombDirectionFound$1381,c
  3326  00094A  C00F  FFD9         	movff	BombDirectionFound@SensorResult,fsr2l
  3327  00094E  C010  FFDA         	movff	BombDirectionFound@SensorResult+1,fsr2h
  3328  000952  50DE               	movf	postinc2,w,c
  3329  000954  5C16               	subwf	BombDirectionFound@DirectionFoundLimit,w,c
  3330  000956  50DE               	movf	postinc2,w,c
  3331  000958  5817               	subwfb	BombDirectionFound@DirectionFoundLimit+1,w,c
  3332  00095A  B0D8               	btfsc	status,0,c
  3333  00095C  D04E               	goto	l295
  3334  00095E  EE20 F002          	lfsr	2,2
  3335  000962  500F               	movf	BombDirectionFound@SensorResult,w,c
  3336  000964  26D9               	addwf	fsr2l,f,c
  3337  000966  5010               	movf	BombDirectionFound@SensorResult+1,w,c
  3338  000968  22DA               	addwfc	fsr2h,f,c
  3339  00096A  50DE               	movf	postinc2,w,c
  3340  00096C  5C16               	subwf	BombDirectionFound@DirectionFoundLimit,w,c
  3341  00096E  50DE               	movf	postinc2,w,c
  3342  000970  5817               	subwfb	BombDirectionFound@DirectionFoundLimit+1,w,c
  3343  000972  B0D8               	btfsc	status,0,c
  3344  000974  D042               	goto	l295
  3345  000976  C00F  FFD9         	movff	BombDirectionFound@SensorResult,fsr2l
  3346  00097A  C010  FFDA         	movff	BombDirectionFound@SensorResult+1,fsr2h
  3347  00097E  CFDE F011          	movff	postinc2,??_BombDirectionFound
  3348  000982  CFDD F012          	movff	postdec2,??_BombDirectionFound+1
  3349  000986  EE20 F002          	lfsr	2,2
  3350  00098A  500F               	movf	BombDirectionFound@SensorResult,w,c
  3351  00098C  26D9               	addwf	fsr2l,f,c
  3352  00098E  5010               	movf	BombDirectionFound@SensorResult+1,w,c
  3353  000990  22DA               	addwfc	fsr2h,f,c
  3354  000992  CFDE F013          	movff	postinc2,??_BombDirectionFound+2
  3355  000996  CFDD F014          	movff	postdec2,??_BombDirectionFound+3
  3356  00099A  1E13               	comf	??_BombDirectionFound+2,f,c
  3357  00099C  1E14               	comf	??_BombDirectionFound+3,f,c
  3358  00099E  4A13               	infsnz	??_BombDirectionFound+2,f,c
  3359  0009A0  2A14               	incf	??_BombDirectionFound+3,f,c
  3360  0009A2  5011               	movf	??_BombDirectionFound,w,c
  3361  0009A4  2613               	addwf	??_BombDirectionFound+2,f,c
  3362  0009A6  5012               	movf	??_BombDirectionFound+1,w,c
  3363  0009A8  2214               	addwfc	??_BombDirectionFound+3,f,c
  3364  0009AA  5018               	movf	BombDirectionFound@DirectionFoundTolerance,w,c
  3365  0009AC  5C13               	subwf	??_BombDirectionFound+2,w,c
  3366  0009AE  5019               	movf	BombDirectionFound@DirectionFoundTolerance+1,w,c
  3367  0009B0  5814               	subwfb	??_BombDirectionFound+3,w,c
  3368  0009B2  A0D8               	btfss	status,0,c
  3369  0009B4  D020               	goto	l2293
  3370  0009B6  EE20 F002          	lfsr	2,2
  3371  0009BA  500F               	movf	BombDirectionFound@SensorResult,w,c
  3372  0009BC  26D9               	addwf	fsr2l,f,c
  3373  0009BE  5010               	movf	BombDirectionFound@SensorResult+1,w,c
  3374  0009C0  22DA               	addwfc	fsr2h,f,c
  3375  0009C2  CFDE F011          	movff	postinc2,??_BombDirectionFound
  3376  0009C6  CFDD F012          	movff	postdec2,??_BombDirectionFound+1
  3377  0009CA  C00F  FFD9         	movff	BombDirectionFound@SensorResult,fsr2l
  3378  0009CE  C010  FFDA         	movff	BombDirectionFound@SensorResult+1,fsr2h
  3379  0009D2  CFDE F013          	movff	postinc2,??_BombDirectionFound+2
  3380  0009D6  CFDD F014          	movff	postdec2,??_BombDirectionFound+3
  3381  0009DA  1E13               	comf	??_BombDirectionFound+2,f,c
  3382  0009DC  1E14               	comf	??_BombDirectionFound+3,f,c
  3383  0009DE  4A13               	infsnz	??_BombDirectionFound+2,f,c
  3384  0009E0  2A14               	incf	??_BombDirectionFound+3,f,c
  3385  0009E2  5011               	movf	??_BombDirectionFound,w,c
  3386  0009E4  2613               	addwf	??_BombDirectionFound+2,f,c
  3387  0009E6  5012               	movf	??_BombDirectionFound+1,w,c
  3388  0009E8  2214               	addwfc	??_BombDirectionFound+3,f,c
  3389  0009EA  5018               	movf	BombDirectionFound@DirectionFoundTolerance,w,c
  3390  0009EC  5C13               	subwf	??_BombDirectionFound+2,w,c
  3391  0009EE  5019               	movf	BombDirectionFound@DirectionFoundTolerance+1,w,c
  3392  0009F0  5814               	subwfb	??_BombDirectionFound+3,w,c
  3393  0009F2  B0D8               	btfsc	status,0,c
  3394  0009F4  D002               	goto	l295
  3395  0009F6                     l2293:
  3396  0009F6  0E01               	movlw	1
  3397  0009F8  6E15               	movwf	_BombDirectionFound$1381,c
  3398  0009FA                     l295:
  3399  0009FA  5015               	movf	_BombDirectionFound$1381,w,c
  3400  0009FC  0012               	return	
  3401  0009FE                     __end_of_BombDirectionFound:
  3402                           	opt stack 0
  3403                           tblptru	equ	0xFF8
  3404                           prodh	equ	0xFF4
  3405                           prodl	equ	0xFF3
  3406                           intcon	equ	0xFF2
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _InterruptHandlerHigh *****************
  3417 ;; Defined at:
  3418 ;;		line 16 in file "main.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;		None               void
  3425 ;; Registers used:
  3426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3432 ;;      Params:         0       0       0       0
  3433 ;;      Locals:         0       0       0       0
  3434 ;;      Temps:         14       0       0       0
  3435 ;;      Totals:        14       0       0       0
  3436 ;;Total ram usage:       14 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		Interrupt level 2
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	intcode
  3446  000008                     __pintcode:
  3447                           	opt stack 0
  3448  000008                     _InterruptHandlerHigh:
  3449                           	opt stack 25
  3450                           
  3451                           ;incstack = 0
  3452  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3453  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3454  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3455  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3456  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3457  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3458  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3459  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3460  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3461  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3462  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3463  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3464  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3465  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3466  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3467                           
  3468                           ;main.c: 18: if (PIR1bits.RCIF) {
  3469  000042  AA9E               	btfss	3998,5,c	;volatile
  3470  000044  D013               	goto	i2l52
  3471                           
  3472                           ;main.c: 19: ReceivedString[i]=RCREG;
  3473  000046  504B               	movf	_i,w,c	;volatile
  3474  000048  0D01               	mullw	1
  3475  00004A  0E3B               	movlw	low _ReceivedString
  3476  00004C  24F3               	addwf	prodl,w,c
  3477  00004E  6ED9               	movwf	fsr2l,c
  3478  000050  0E00               	movlw	high _ReceivedString
  3479  000052  20F4               	addwfc	prodh,w,c
  3480  000054  6EDA               	movwf	fsr2h,c
  3481  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3482                           
  3483                           ;main.c: 20: if (i==15){
  3484  00005A  0E0F               	movlw	15
  3485  00005C  184B               	xorwf	_i,w,c	;volatile
  3486  00005E  A4D8               	btfss	status,2,c
  3487  000060  D003               	goto	i2l1429
  3488                           
  3489                           ;main.c: 21: i=0;
  3490  000062  0E00               	movlw	0
  3491  000064  6E4B               	movwf	_i,c	;volatile
  3492                           
  3493                           ;main.c: 22: }else{
  3494  000066  D001               	goto	i2l1431
  3495  000068                     i2l1429:
  3496                           
  3497                           ;main.c: 23: i++;
  3498  000068  2A4B               	incf	_i,f,c	;volatile
  3499  00006A                     i2l1431:
  3500                           
  3501                           ;main.c: 24: }
  3502                           ;main.c: 25: PIR1bits.RCIF=0;
  3503  00006A  9A9E               	bcf	3998,5,c	;volatile
  3504  00006C                     i2l52:
  3505  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3506  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3507  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3508  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3509  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3510  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3511  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3512  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3513  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3514  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3515  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3516  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3517  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3518  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3519  0000A4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3520  0000A6  0011               	retfie		f
  3521  0000A8                     __end_of_InterruptHandlerHigh:
  3522                           	opt stack 0
  3523  0000                     pclatu	equ	0xFFB
  3524                           pclath	equ	0xFFA
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           intcon	equ	0xFF2
  3532                           postinc0	equ	0xFEE
  3533                           fsr0h	equ	0xFEA
  3534                           fsr0l	equ	0xFE9
  3535                           wreg	equ	0xFE8
  3536                           fsr1h	equ	0xFE2
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           pclatu	equ	0xFFB
  3545                           pclath	equ	0xFFA
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           postinc0	equ	0xFEE
  3554                           fsr0h	equ	0xFEA
  3555                           fsr0l	equ	0xFE9
  3556                           wreg	equ	0xFE8
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566                           	psect	rparam
  3567  0000                     pclatu	equ	0xFFB
  3568                           pclath	equ	0xFFA
  3569                           tblptru	equ	0xFF8
  3570                           tblptrh	equ	0xFF7
  3571                           tblptrl	equ	0xFF6
  3572                           tablat	equ	0xFF5
  3573                           prodh	equ	0xFF4
  3574                           prodl	equ	0xFF3
  3575                           intcon	equ	0xFF2
  3576                           postinc0	equ	0xFEE
  3577                           fsr0h	equ	0xFEA
  3578                           fsr0l	equ	0xFE9
  3579                           wreg	equ	0xFE8
  3580                           fsr1h	equ	0xFE2
  3581                           fsr1l	equ	0xFE1
  3582                           indf2	equ	0xFDF
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589                           	psect	temp
  3590  00004C                     btemp:
  3591                           	opt stack 0
  3592  00004C                     	ds	1
  3593  0000                     int$flags	set	btemp
  3594                           pclatu	equ	0xFFB
  3595                           pclath	equ	0xFFA
  3596                           tblptru	equ	0xFF8
  3597                           tblptrh	equ	0xFF7
  3598                           tblptrl	equ	0xFF6
  3599                           tablat	equ	0xFF5
  3600                           prodh	equ	0xFF4
  3601                           prodl	equ	0xFF3
  3602                           intcon	equ	0xFF2
  3603                           postinc0	equ	0xFEE
  3604                           fsr0h	equ	0xFEA
  3605                           fsr0l	equ	0xFE9
  3606                           wreg	equ	0xFE8
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           postinc2	equ	0xFDE
  3611                           postdec2	equ	0xFDD
  3612                           fsr2h	equ	0xFDA
  3613                           fsr2l	equ	0xFD9
  3614                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      75
    BANK0           160     41      41
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    BombDirectionFound@SensorResult	PTR unsigned int  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   72809
                                             17 BANK0     24    24      0
                             _ScanIR
                      _ScanWithRange
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3322
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       24    19      5   30850
                                             46 COMRAM     7     2      5
                                              0 BANK0     17    17      0
                 _BombDirectionFound
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              12     8      4   28310
                                             46 COMRAM    12     8      4
                 _BombDirectionFound
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    9724
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   10494
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    5878
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3044
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2026
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     869
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _BombDirectionFound                                  11     9      2     661
                                             14 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _BombDirectionFound
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     _BombDirectionFound
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     29      29       4       25.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4B       1       79.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74       5        0.0%
DATA                 0      0      74      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 19:09:10 2018

                             ?_grabRightIR 000F                                          _i 004B  
                                       l55 056C                               ___awdiv@sign 001A  
                      ___wmul@multiplicand 0011                                        l107 08DA  
                                      l137 0C50                                        l295 09FA  
                              grabLeftIR@i 0016                                        prod 000FF3  
                                      wreg 000FE8                                       l2201 0C30  
                                     l2211 0A00                                       l2215 0A18  
                                     l2161 0AD0                                       l2153 0AB2  
                                     l2225 0A50                                       l2171 0AF0  
                                     l2163 0AD4                                       l2147 0AA2  
                                     l2219 0A30                                       l2245 0D4E  
                                     l2253 0B98                                       l2263 0BE0  
                                     l2159 0AC8                                       l2175 0AFA  
                                     l2511 07C4                                       l2423 03F2  
                                     l2343 0252                                       l2335 01D6  
                                     l2249 0D60                                       l2257 0BA0  
                                     l2273 0B2A                                       l2193 0C00  
                                     l2409 03AC                                       l2179 0B08  
                                     l2371 02F4                                       l2339 0214  
                                     l1811 0D28                                       l2293 09F6  
                                     l2269 0B22                                       l2189 08B2  
                                     l2197 0C18                                       l2357 02AC  
                                     l1821 0DEE                                       l2279 0B6A  
                                     l2439 0464                                       l1807 0D16  
                                     l2385 0338                                       l2483 0720  
                                     l2395 0362                                       l2571 0610  
                                     l2547 0572                                       l2469 06CE  
                                     l2495 0772                                       l2575 0632  
                                     l2567 05EC                                       l2585 0660  
                                     l2579 0640                                       l2589 0666  
                                     u1115 0DFC                                       u1116 0DFE  
                                     _LATB 000F8A                                       u1095 0DEA  
                                     u1096 0DEC                                       u1444 0876  
                                     u1605 0B32                                       u1445 0872  
                                     u1454 08CE                                       u1455 08CA  
                                     u1465 0926                                       u1575 0BA8  
                                     u1917 0D1C                                       u1927 0A4A  
                                     u1937 0C4A                                       u1947 0B5E  
                                     u1957 0BD4                                       u1967 0D54  
                                     i2l52 006C                                       _main 04D0  
           BombDirectionFound@SensorResult 000F                              main@ScanAngle 0074  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     fsr0l 000FE9                                       fsr2h 000FDA  
                                     fsr1l 000FE1                                       indf2 000FDF  
                                     fsr2l 000FD9                                       btemp 004C  
                                     _stop 09FE                                       pclat 000FFA  
                                     prodh 000FF4                                       prodl 000FF3  
                                     start 00A8                             delay_s@seconds 0010  
                             ___param_bank 000010                                      ?_main 0001  
                          __end_of___awdiv 0B12                                      ?_stop 0026  
                          ___awdiv@divisor 0017                                      _PDC0H 000F78  
                                    _PDC1H 000F76                                      _PDC0L 000F79  
                                    _PDC1L 000F77                                      _T5CON 000FB7  
                             grabRightIR@i 0016                            ___awdiv@counter 0019  
                                    _RCREG 000FAE                                      _SPBRG 000FAF  
                                    _TRISC 000F94                                      _TXREG 000FAD  
                          __end_of_delay_s 0D3A                                      main@i 0073  
                                    tablat 000FF5                                      status 000FD8  
                   __size_of_ScanWithRange 0424                            __initialization 0E48  
                             __end_of_main 0680                               __end_of_stop 0A8E  
                           delay_tenth_s@i 0011                             __CFG_OSC$IRCIO 000000  
                     __end_of_enableSensor 0E00                                     ??_main 003B  
                                   ??_stop 002A                              __activetblptr 000002  
                            ?_initMotorPWM 0001                               ?_setMotorPWM 001D  
                   __size_of_fullSpeedBack 0036                           ___awdiv@dividend 0015  
                                   i2l1431 006A                                     i2l1429 0068  
                           __CFG_WDTEN$OFF 000000                      __end_of_delay_tenth_s 0D72  
                                   _OSCCON 000FD3                         _BombDirectionFound 0936  
                                   _PTCON0 000F7F                                     _PTCON1 000F7E  
                                   _SPBRGH 000FB0                                     _PTPERH 000F7A  
                                   _PTPERL 000F7B                                     _ScanIR 0680  
                      ?_BombDirectionFound 000F                                     ___wmul 0E00  
                                ??___awdiv 0019                                     _initIR 0E26  
                     __size_of_grabRightIR 0076                                     clear_0 0E4E  
                         ___awdiv@quotient 001B                                  ??_delay_s 000F  
                                   main@mL 0077                                     main@mR 0080  
                           ??_initMotorPWM 000F                              _ScanWithRange 00AC  
                     ??_BombDirectionFound 0011                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                                   stop@mL 0026                                     stop@mR 0028  
                         __end_of_turnLeft 0D02                            fullSpeedBack@mL 002B  
                          fullSpeedBack@mR 002D                                 __accesstop 0060  
                  __end_of__initialization 0E54                              ___rparam_used 000001  
                           __pcstackCOMRAM 0001                              _fullSpeedBack 0D72  
                           ?_ScanWithRange 002F              __size_of_InterruptHandlerHigh 00A0  
               delay_tenth_s@tenth_seconds 0010                                    ?_ScanIR 002F  
                           ?_fullSpeedBack 002B                      __size_of_enableSensor 0026  
                                  ?___wmul 000F                        grabLeftIR@IR_signal 0014  
                                  _CAP1CON 000F63                                    _CAP2CON 000F62  
                                  ?_initIR 0001                    __size_of_fullSpeedAhead 0070  
                               _grabLeftIR 0B88                                    _PWMCON0 000F6F  
                                  _PWMCON1 000F6E                       __size_of_setMotorPWM 0134  
                             _enableSensor 0DDA                         __size_of_turnRight 004A  
                     __end_of_initMotorPWM 0DDA                                    __Hparam 0000  
                                  __Lparam 0000                            __size_of_ScanIR 0182  
                                  ___awdiv 0A8E                            __size_of___wmul 0026  
                          __size_of_initIR 0022                                    __pcinit 0E48  
                          ??_ScanWithRange 0034                                    _delay_s 0D02  
                                  __ramtop 0300                                  ?_turnLeft 002B  
                                  __ptext0 04D0                                    __ptext1 0DA8  
                                  __ptext2 0E26                                    __ptext3 0D72  
                                  __ptext4 0DDA                                    __ptext5 0D02  
                                  __ptext6 00AC                                    __ptext7 0680  
                                  __ptext8 0C6E                                    __ptext9 0CB8  
    BombDirectionFound@DirectionFoundLimit 0016                       end_of_initialization 0E54  
                       setMotorPWM@PWMduty 0024                              __Lmediumconst 0000  
                       ScanIR@SensorResult 0037                            ??_fullSpeedBack 002F  
                                _RCSTAbits 000FAB                                    postdec2 000FDD  
                                  postinc0 000FEE                                    postinc2 000FDE  
                               ??_turnLeft 002F                          __end_of_turnRight 0CB8  
                              ?_grabLeftIR 000F                                  _TRISAbits 000F92  
                                _TRISBbits 000F93                                  _TRISCbits 000F94  
                                _TRISDbits 000F95                                  _TRISEbits 000F96  
                         fullSpeedAhead@mL 0026                           fullSpeedAhead@mR 0028  
                                _TXSTAbits 000FAC                              ??_grabRightIR 0011  
                           __end_of_ScanIR 0802                             _fullSpeedAhead 0BFE  
                           _ReceivedString 003B                             __end_of___wmul 0E26  
                              _BAUDCONbits 000FAA                             __end_of_initIR 0E48  
                   __size_of_delay_tenth_s 0038                        start_initialization 0E48  
              __size_of_BombDirectionFound 00C8                      __size_of_initMotorPWM 0032  
             __end_of_InterruptHandlerHigh 00A8                                   ??_ScanIR 0033  
                   __end_of_fullSpeedAhead 0C6E                        __size_of_grabLeftIR 0076  
                                 ??___wmul 0013                                   ??_initIR 000F  
                      __end_of_grabRightIR 0B88                               _initMotorPWM 0DA8  
                              __pbssCOMRAM 003B                              __pcstackBANK0 0060  
                            _delay_tenth_s 0D3A          ScanWithRange@ClearSignalTolerance 0063  
                          ?_fullSpeedAhead 0026                                  __pintcode 0008  
                                 ?___awdiv 0015                                   ?_delay_s 0001  
                                 _CAP1BUFH 000F69                                   _CAP1BUFL 000F68  
                                 _CAP2BUFH 000F67                                   _CAP2BUFL 000F66  
                        __size_of_turnLeft 004A                 ScanWithRange@SensorResultC 0069  
               ScanWithRange@SensorResultL 0065                 ScanWithRange@SensorResultR 006D  
                            ??_setMotorPWM 001F                             ?_delay_tenth_s 0001  
                           ___wmul@product 0013                                   _LATAbits 000F89  
                                 _LATCbits 000F8B                                   _LATDbits 000F8C  
                                 _LATEbits 000F8D                                   _IPR1bits 000F9F  
                                 _PIE1bits 000F9D                                turnRight@mL 002B  
                              turnRight@mR 002D                                   _PIR1bits 000F9E  
                                 _RCONbits 000FD0                                _grabRightIR 0B12  
                     grabRightIR@IR_signal 0014                          ___wmul@multiplier 000F  
                    __end_of_ScanWithRange 04D0                               setMotorPWM@m 001D  
                     _InterruptHandlerHigh 0008                                   ScanIR@mL 002F  
                                 ScanIR@mR 0031                               ??_grabLeftIR 0011  
                                _turnRight 0C6E                 ScanIR@ClearSignalTolerance 0035  
                      __end_of_setMotorPWM 0936                                   __Hrparam 0000  
                                 __Lrparam 0000                      __end_of_fullSpeedBack 0DA8  
                       __end_of_grabLeftIR 0BFE                           __size_of___awdiv 0084  
                               _ANSEL0bits 000FB8                           __size_of_delay_s 0038  
                    ?_InterruptHandlerHigh 0001                                 ?_turnRight 002B  
                                 __ptext10 09FE                                   __ptext11 0BFE  
                                 __ptext12 0802                                   __ptext13 0E00  
                                 __ptext14 0A8E                                   __ptext15 0B12  
                                 __ptext16 0B88                                   __ptext17 0D3A  
                                 __ptext18 0936                            ??_delay_tenth_s 000F  
                            __size_of_main 01B0                  ScanWithRange@ResultFalseC 0061  
                       main@DirectionFound 0076                  ScanWithRange@ResultFalseL 0060  
                ScanWithRange@ResultFalseR 0062                              __size_of_stop 0090  
                               turnLeft@mL 002B                                 turnLeft@mR 002D  
                                 delay_s@i 0011                    _BombDirectionFound$1381 0015  
                                 int$flags 004C                                   main@mode 0075  
                                 main@test 0071                                   _turnLeft 0CB8  
                          ScanWithRange@mL 002F                            ScanWithRange@mR 0031  
                       enableSensor@sensor 0010                 __end_of_BombDirectionFound 09FE  
                       enableSensor@status 000F                                 _INTCONbits 000FF2  
               ScanWithRange@tenth_seconds 0033                                _setMotorPWM 0802  
                                 intlevel2 0000                              ?_enableSensor 000F  
                         ??_fullSpeedAhead 002A                                 _OSCCONbits 000FD3  
BombDirectionFound@DirectionFoundTolerance 0018                     ??_InterruptHandlerHigh 0001  
                              ??_turnRight 002F                             ??_enableSensor 0010  
