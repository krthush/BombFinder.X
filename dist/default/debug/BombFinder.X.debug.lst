

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 13:13:26 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     _CAP1BUFH	set	3945
    41  0000                     _CAP1BUFL	set	3944
    42  0000                     _CAP1CON	set	3939
    43  0000                     _CAP2BUFH	set	3943
    44  0000                     _CAP2BUFL	set	3942
    45  0000                     _CAP2CON	set	3938
    46  0000                     _LATAbits	set	3977
    47  0000                     _LATB	set	3978
    48  0000                     _LATCbits	set	3979
    49  0000                     _LATDbits	set	3980
    50  0000                     _LATEbits	set	3981
    51  0000                     _PTCON0	set	3967
    52  0000                     _PTCON1	set	3966
    53  0000                     _PTPERH	set	3962
    54  0000                     _PTPERL	set	3963
    55  0000                     _PWMCON0	set	3951
    56  0000                     _PWMCON1	set	3950
    57  0000                     _TRISAbits	set	3986
    58  0000                     _TRISBbits	set	3987
    59  0000                     _TRISC	set	3988
    60  0000                     _TRISCbits	set	3988
    61  0000                     _TRISDbits	set	3989
    62  0000                     _TRISEbits	set	3990
    63  0000                     _PDC0H	set	3960
    64  0000                     _PDC0L	set	3961
    65  0000                     _PDC1H	set	3958
    66  0000                     _PDC1L	set	3959
    67  0000                     _ANSEL0bits	set	4024
    68  0000                     _BAUDCONbits	set	4010
    69  0000                     _IPR1bits	set	3999
    70  0000                     _OSCCON	set	4051
    71  0000                     _OSCCONbits	set	4051
    72  0000                     _PIE1bits	set	3997
    73  0000                     _PIR1bits	set	3998
    74  0000                     _RCONbits	set	4048
    75  0000                     _RCREG	set	4014
    76  0000                     _RCSTAbits	set	4011
    77  0000                     _SPBRG	set	4015
    78  0000                     _SPBRGH	set	4016
    79  0000                     _T5CON	set	4023
    80  0000                     _TXREG	set	4013
    81  0000                     _TXSTAbits	set	4012
    82  0000                     _INTCONbits	set	4082
    83                           
    84                           ; #config settings
    85  0000                     
    86                           	psect	cinit
    87  001482                     __pcinit:
    88                           	opt stack 0
    89  001482                     start_initialization:
    90                           	opt stack 0
    91  001482                     __initialization:
    92                           	opt stack 0
    93                           
    94                           ; Clear objects allocated to BANK1 (17 bytes)
    95  001482  EE01  F0EB         	lfsr	0,__pbssBANK1
    96  001486  0E11               	movlw	17
    97  001488                     clear_0:
    98  001488  6AEE               	clrf	postinc0,c
    99  00148A  06E8               	decf	wreg,f,c
   100  00148C  E1FD               	bnz	clear_0
   101                           
   102                           ; Clear objects allocated to BANK0 (4 bytes)
   103  00148E  0100               	movlb	0
   104  001490  6B78               	clrf	(__pbssBANK0+3)& (0+255),b
   105  001492  6B77               	clrf	(__pbssBANK0+2)& (0+255),b
   106  001494  6B76               	clrf	(__pbssBANK0+1)& (0+255),b
   107  001496  6B75               	clrf	__pbssBANK0& (0+255),b
   108                           
   109                           ; Clear objects allocated to COMRAM (13 bytes)
   110  001498  EE00  F041         	lfsr	0,__pbssCOMRAM
   111  00149C  0E0D               	movlw	13
   112  00149E                     clear_1:
   113  00149E  6AEE               	clrf	postinc0,c
   114  0014A0  06E8               	decf	wreg,f,c
   115  0014A2  E1FD               	bnz	clear_1
   116  0014A4                     end_of_initialization:
   117                           	opt stack 0
   118  0014A4                     __end_of__initialization:
   119                           	opt stack 0
   120  0014A4  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121  0014A6  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122  0014A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   123  0014AA  6EF8               	movwf	tblptru,c
   124  0014AC  0100               	movlb	0
   125  0014AE  EF7F  F003         	goto	_main	;jump to C main() function
   126                           tblptru	equ	0xFF8
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           
   130                           	psect	bssCOMRAM
   131  000041                     __pbssCOMRAM:
   132                           	opt stack 0
   133  000041                     ScanIR@F3710:
   134                           	opt stack 0
   135  000041                     	ds	4
   136  000045                     ScanWithRange@F3719:
   137                           	opt stack 0
   138  000045                     	ds	4
   139  000049                     ScanWithRange@F3721:
   140                           	opt stack 0
   141  000049                     	ds	4
   142  00004D                     _i:
   143                           	opt stack 0
   144  00004D                     	ds	1
   145                           tblptru	equ	0xFF8
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssBANK0
   150  000075                     __pbssBANK0:
   151                           	opt stack 0
   152  000075                     ScanWithRange@F3723:
   153                           	opt stack 0
   154  000075                     	ds	4
   155                           tblptru	equ	0xFF8
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	bssBANK1
   160  0001EB                     __pbssBANK1:
   161                           	opt stack 0
   162  0001EB                     _RFID_Read:
   163                           	opt stack 0
   164  0001EB                     	ds	1
   165  0001EC                     _ReceivedString:
   166                           	opt stack 0
   167  0001EC                     	ds	16
   168                           tblptru	equ	0xFF8
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           
   172                           	psect	cstackBANK1
   173  000100                     __pcstackBANK1:
   174                           	opt stack 0
   175  000100                     main@MoveType:
   176                           	opt stack 0
   177                           
   178                           ; 100 bytes @ 0x0
   179  000100                     	ds	100
   180  000164                     main@MoveTime:
   181                           	opt stack 0
   182                           
   183                           ; 100 bytes @ 0x64
   184  000164                     	ds	100
   185  0001C8                     main@Message:
   186                           	opt stack 0
   187                           
   188                           ; 10 bytes @ 0xC8
   189  0001C8                     	ds	10
   190  0001D2                     main@test:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0xD2
   194  0001D2                     	ds	2
   195  0001D4                     main@ScanAngle:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0xD4
   199  0001D4                     	ds	1
   200  0001D5                     main@mode:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0xD5
   204  0001D5                     	ds	1
   205  0001D6                     main@DirectionFound:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0xD6
   209  0001D6                     	ds	1
   210  0001D7                     main@i:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0xD7
   214  0001D7                     	ds	1
   215  0001D8                     main@Move:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0xD8
   219  0001D8                     	ds	1
   220  0001D9                     main@mL:
   221                           	opt stack 0
   222                           
   223                           ; 9 bytes @ 0xD9
   224  0001D9                     	ds	9
   225  0001E2                     main@mR:
   226                           	opt stack 0
   227                           
   228                           ; 9 bytes @ 0xE2
   229  0001E2                     	ds	9
   230                           tblptru	equ	0xFF8
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	cstackBANK0
   235  000060                     __pcstackBANK0:
   236                           	opt stack 0
   237  000060                     ScanWithRange@ResultFalseL:
   238                           	opt stack 0
   239                           
   240                           ; 1 bytes @ 0x0
   241  000060                     	ds	1
   242  000061                     ScanWithRange@ResultFalseC:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x1
   246  000061                     	ds	1
   247  000062                     ScanWithRange@ResultFalseR:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x2
   251  000062                     	ds	1
   252  000063                     ScanWithRange@ClearSignalTolerance:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000063                     	ds	2
   257  000065                     ScanWithRange@DirectionFoundLimit:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x5
   261  000065                     	ds	2
   262  000067                     ScanWithRange@DirectionFoundTolerance:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x7
   266  000067                     	ds	2
   267  000069                     ScanWithRange@SensorResultL:
   268                           	opt stack 0
   269                           
   270                           ; 4 bytes @ 0x9
   271  000069                     	ds	4
   272  00006D                     ScanWithRange@SensorResultC:
   273                           	opt stack 0
   274                           
   275                           ; 4 bytes @ 0xD
   276  00006D                     	ds	4
   277  000071                     ScanWithRange@SensorResultR:
   278                           	opt stack 0
   279                           
   280                           ; 4 bytes @ 0x11
   281  000071                     	ds	4
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	cstackCOMRAM
   287  000001                     __pcstackCOMRAM:
   288                           	opt stack 0
   289  000001                     ??_InterruptHandlerHigh:
   290  000001                     
   291                           ; 2 bytes @ 0x0
   292  000001                     	ds	14
   293  00000F                     ??_delay_s:
   294  00000F                     ??_delay_tenth_s:
   295  00000F                     ??_LCDout:
   296  00000F                     ?_grabLeftIR:
   297                           	opt stack 0
   298  00000F                     ?_grabRightIR:
   299                           	opt stack 0
   300  00000F                     ?___wmul:
   301                           	opt stack 0
   302  00000F                     _initRFID$1317:
   303                           	opt stack 0
   304  00000F                     enableSensor@status:
   305                           	opt stack 0
   306  00000F                     VerifySignal@Signal:
   307                           	opt stack 0
   308  00000F                     ___wmul@multiplier:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0xE
   312  00000F                     	ds	1
   313  000010                     delay_s@seconds:
   314                           	opt stack 0
   315  000010                     delay_tenth_s@tenth_seconds:
   316                           	opt stack 0
   317  000010                     enableSensor@sensor:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xF
   321  000010                     	ds	1
   322  000011                     ??_VerifySignal:
   323  000011                     ??_grabLeftIR:
   324  000011                     ??_grabRightIR:
   325  000011                     delay_s@i:
   326                           	opt stack 0
   327  000011                     delay_tenth_s@i:
   328                           	opt stack 0
   329  000011                     ___wmul@multiplicand:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x10
   333  000011                     	ds	1
   334  000012                     LCDout@number:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x11
   338  000012                     	ds	1
   339  000013                     SendLCD@type:
   340                           	opt stack 0
   341  000013                     ___wmul@product:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x12
   345  000013                     	ds	1
   346  000014                     SendLCD@Byte:
   347                           	opt stack 0
   348  000014                     grabRightIR@IR_signal:
   349                           	opt stack 0
   350  000014                     grabLeftIR@IR_signal:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x13
   354  000014                     	ds	1
   355  000015                     ??_initLCD:
   356  000015                     ?___awdiv:
   357                           	opt stack 0
   358  000015                     ___awdiv@dividend:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x14
   362  000015                     	ds	1
   363  000016                     grabRightIR@i:
   364                           	opt stack 0
   365  000016                     grabLeftIR@i:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x15
   369  000016                     	ds	1
   370  000017                     VerifySignal@checksum:
   371                           	opt stack 0
   372  000017                     ___awdiv@divisor:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x16
   376  000017                     	ds	1
   377  000018                     VerifySignal@hexByte:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x17
   381  000018                     	ds	1
   382  000019                     ___awdiv@counter:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x18
   386  000019                     	ds	1
   387  00001A                     VerifySignal@i:
   388                           	opt stack 0
   389  00001A                     ___awdiv@sign:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x19
   393  00001A                     	ds	1
   394  00001B                     ___awdiv@quotient:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x1A
   398  00001B                     	ds	2
   399  00001D                     setMotorPWM@m:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x1C
   403  00001D                     	ds	2
   404  00001F                     ??_setMotorPWM:
   405                           
   406                           ; 0 bytes @ 0x1E
   407  00001F                     	ds	5
   408  000024                     setMotorPWM@PWMduty:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x23
   412  000024                     	ds	2
   413  000026                     stop@mL:
   414                           	opt stack 0
   415  000026                     fullSpeedAhead@mL:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x25
   419  000026                     	ds	2
   420  000028                     stop@mR:
   421                           	opt stack 0
   422  000028                     fullSpeedAhead@mR:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x27
   426  000028                     	ds	2
   427  00002A                     
   428                           ; 0 bytes @ 0x29
   429  00002A                     	ds	1
   430  00002B                     turnLeft@mL:
   431                           	opt stack 0
   432  00002B                     turnRight@mL:
   433                           	opt stack 0
   434  00002B                     fullSpeedBack@mL:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x2A
   438  00002B                     	ds	2
   439  00002D                     turnLeft@mR:
   440                           	opt stack 0
   441  00002D                     turnRight@mR:
   442                           	opt stack 0
   443  00002D                     fullSpeedBack@mR:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x2C
   447  00002D                     	ds	2
   448  00002F                     ScanIR@mL:
   449                           	opt stack 0
   450  00002F                     ScanWithRange@mL:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x2E
   454  00002F                     	ds	2
   455  000031                     ScanIR@mR:
   456                           	opt stack 0
   457  000031                     ScanWithRange@mR:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x30
   461  000031                     	ds	2
   462  000033                     ??_ScanIR:
   463  000033                     ScanWithRange@tenth_seconds:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x32
   467  000033                     	ds	1
   468  000034                     ScanWithRange@MoveTime:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x33
   472  000034                     	ds	1
   473  000035                     ScanIR@ClearSignalTolerance:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x34
   477  000035                     	ds	1
   478  000036                     ??_ScanWithRange:
   479                           
   480                           ; 0 bytes @ 0x35
   481  000036                     	ds	1
   482  000037                     ScanIR@DirectionFoundLimit:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x36
   486  000037                     	ds	2
   487  000039                     ScanIR@DirectionFoundTolerance:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x38
   491  000039                     	ds	2
   492  00003B                     ScanIR@SensorResult:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x3A
   496  00003B                     	ds	4
   497  00003F                     ??_main:
   498                           
   499                           ; 0 bytes @ 0x3E
   500  00003F                     	ds	2
   501                           tblptru	equ	0xFF8
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           
   505 ;;
   506 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   507 ;;
   508 ;; *************** function _main *****************
   509 ;; Defined at:
   510 ;;		line 31 in file "main.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;		None
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   515 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   516 ;;  PathTaken     100    0        unsigned char [100]
   517 ;;  Message        10  200[BANK1 ] unsigned char [10]
   518 ;;  mR              9  226[BANK1 ] struct DC_motor
   519 ;;  mL              9  217[BANK1 ] struct DC_motor
   520 ;;  SignalStreng    3    0        unsigned char [3]
   521 ;;  test            2  210[BANK1 ] unsigned int 
   522 ;;  Move            1  216[BANK1 ] unsigned char 
   523 ;;  i               1  215[BANK1 ] unsigned char 
   524 ;;  DirectionFou    1  214[BANK1 ] unsigned char 
   525 ;;  mode            1  213[BANK1 ] unsigned char 
   526 ;;  ScanAngle       1  212[BANK1 ] unsigned char 
   527 ;; Return value:  Size  Location     Type
   528 ;;		None               void
   529 ;; Registers used:
   530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   536 ;;      Params:         0       0       0       0
   537 ;;      Locals:         0       0     235       0
   538 ;;      Temps:          2       0       0       0
   539 ;;      Totals:         2       0     235       0
   540 ;;Total ram usage:      237 bytes
   541 ;; Hardware stack levels required when called:    6
   542 ;; This function calls:
   543 ;;		_ScanIR
   544 ;;		_ScanWithRange
   545 ;;		_VerifySignal
   546 ;;		_delay_s
   547 ;;		_delay_tenth_s
   548 ;;		_enableSensor
   549 ;;		_fullSpeedAhead
   550 ;;		_fullSpeedBack
   551 ;;		_initIR
   552 ;;		_initLCD
   553 ;;		_initMotorPWM
   554 ;;		_initRFID
   555 ;;		_stop
   556 ;;		_turnLeft
   557 ;;		_turnRight
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           	psect	text0
   564  0006FE                     __ptext0:
   565                           	opt stack 0
   566  0006FE                     _main:
   567                           	opt stack 25
   568                           
   569                           ;main.c: 34: unsigned char Message[10];
   570                           ;main.c: 35: unsigned char i=0;
   571                           
   572                           ;incstack = 0
   573  0006FE  0E00               	movlw	0
   574  000700  0101               	movlb	1	; () banked
   575  000702  6FD7               	movwf	main@i& (0+255),b
   576                           
   577                           ;main.c: 36: unsigned char mode=0;
   578  000704  0E00               	movlw	0
   579  000706  0101               	movlb	1	; () banked
   580  000708  6FD5               	movwf	main@mode& (0+255),b
   581                           
   582                           ;main.c: 37: char DirectionFound=0;
   583  00070A  0E00               	movlw	0
   584  00070C  0101               	movlb	1	; () banked
   585  00070E  6FD6               	movwf	main@DirectionFound& (0+255),b
   586                           
   587                           ;main.c: 38: unsigned char SignalStrength[3];
   588                           ;main.c: 39: char PathTaken[100];
   589                           ;main.c: 40: unsigned int test=0;
   590  000710  0E00               	movlw	0
   591  000712  0101               	movlb	1	; () banked
   592  000714  6FD3               	movwf	(main@test+1)& (0+255),b
   593  000716  0E00               	movlw	0
   594  000718  6FD2               	movwf	main@test& (0+255),b
   595                           
   596                           ;main.c: 41: char MoveTime[100];
   597                           ;main.c: 42: char MoveType[100];
   598                           ;main.c: 43: char Move=0;
   599  00071A  0E00               	movlw	0
   600  00071C  0101               	movlb	1	; () banked
   601  00071E  6FD8               	movwf	main@Move& (0+255),b
   602                           
   603                           ;main.c: 45: unsigned char ScanAngle=6;
   604  000720  0E06               	movlw	6
   605  000722  0101               	movlb	1	; () banked
   606  000724  6FD4               	movwf	main@ScanAngle& (0+255),b
   607                           
   608                           ; BSR set to: 1
   609                           ;main.c: 48: INTCONbits.GIEH = 1;
   610  000726  8EF2               	bsf	intcon,7,c	;volatile
   611                           
   612                           ; BSR set to: 1
   613                           ;main.c: 49: INTCONbits.GIEL = 1;
   614  000728  8CF2               	bsf	intcon,6,c	;volatile
   615                           
   616                           ; BSR set to: 1
   617                           ;main.c: 50: INTCONbits.PEIE = 1;
   618  00072A  8CF2               	bsf	intcon,6,c	;volatile
   619                           
   620                           ; BSR set to: 1
   621                           ;main.c: 51: RCONbits.IPEN = 1;
   622  00072C  8ED0               	bsf	4048,7,c	;volatile
   623                           
   624                           ; BSR set to: 1
   625                           ;main.c: 54: IPR1bits.RCIP=1;
   626  00072E  8A9F               	bsf	3999,5,c	;volatile
   627                           
   628                           ; BSR set to: 1
   629                           ;main.c: 55: PIE1bits.RCIE=1;
   630  000730  8A9D               	bsf	3997,5,c	;volatile
   631                           
   632                           ; BSR set to: 1
   633                           ;main.c: 56: PIR1bits.RCIF=0;
   634  000732  9A9E               	bcf	3998,5,c	;volatile
   635                           
   636                           ;main.c: 59: struct DC_motor mL, mR;
   637                           ;main.c: 60: mL.power=0;
   638  000734  0E00               	movlw	0
   639  000736  0101               	movlb	1	; () banked
   640  000738  6FD9               	movwf	main@mL& (0+255),b
   641                           
   642                           ;main.c: 61: mL.direction=1;
   643  00073A  0E01               	movlw	1
   644  00073C  0101               	movlb	1	; () banked
   645  00073E  6FDA               	movwf	(main@mL+1)& (0+255),b
   646                           
   647                           ; BSR set to: 1
   648                           ;main.c: 62: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   649  000740  0E79               	movlw	121
   650  000742  0101               	movlb	1	; () banked
   651  000744  6FDB               	movwf	(main@mL+2)& (0+255),b
   652  000746  0E0F               	movlw	15
   653  000748  0101               	movlb	1	; () banked
   654  00074A  6FDC               	movwf	(main@mL+3)& (0+255),b
   655                           
   656                           ; BSR set to: 1
   657                           ;main.c: 63: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   658  00074C  0E78               	movlw	120
   659  00074E  0101               	movlb	1	; () banked
   660  000750  6FDD               	movwf	(main@mL+4)& (0+255),b
   661  000752  0E0F               	movlw	15
   662  000754  0101               	movlb	1	; () banked
   663  000756  6FDE               	movwf	(main@mL+5)& (0+255),b
   664                           
   665                           ;main.c: 64: mL.dir_pin=0;
   666  000758  0E00               	movlw	0
   667  00075A  0101               	movlb	1	; () banked
   668  00075C  6FDF               	movwf	(main@mL+6)& (0+255),b
   669                           
   670                           ;main.c: 65: mL.PWMperiod=199;
   671  00075E  0E00               	movlw	0
   672  000760  0101               	movlb	1	; () banked
   673  000762  6FE1               	movwf	(main@mL+8)& (0+255),b
   674  000764  0EC7               	movlw	199
   675  000766  6FE0               	movwf	(main@mL+7)& (0+255),b
   676                           
   677                           ;main.c: 67: mR.power=0;
   678  000768  0E00               	movlw	0
   679  00076A  0101               	movlb	1	; () banked
   680  00076C  6FE2               	movwf	main@mR& (0+255),b
   681                           
   682                           ;main.c: 68: mR.direction=1;
   683  00076E  0E01               	movlw	1
   684  000770  0101               	movlb	1	; () banked
   685  000772  6FE3               	movwf	(main@mR+1)& (0+255),b
   686                           
   687                           ; BSR set to: 1
   688                           ;main.c: 69: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   689  000774  0E77               	movlw	119
   690  000776  0101               	movlb	1	; () banked
   691  000778  6FE4               	movwf	(main@mR+2)& (0+255),b
   692  00077A  0E0F               	movlw	15
   693  00077C  0101               	movlb	1	; () banked
   694  00077E  6FE5               	movwf	(main@mR+3)& (0+255),b
   695                           
   696                           ; BSR set to: 1
   697                           ;main.c: 70: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   698  000780  0E76               	movlw	118
   699  000782  0101               	movlb	1	; () banked
   700  000784  6FE6               	movwf	(main@mR+4)& (0+255),b
   701  000786  0E0F               	movlw	15
   702  000788  0101               	movlb	1	; () banked
   703  00078A  6FE7               	movwf	(main@mR+5)& (0+255),b
   704                           
   705                           ;main.c: 71: mR.dir_pin=2;
   706  00078C  0E02               	movlw	2
   707  00078E  0101               	movlb	1	; () banked
   708  000790  6FE8               	movwf	(main@mR+6)& (0+255),b
   709                           
   710                           ;main.c: 72: mR.PWMperiod=199;
   711  000792  0E00               	movlw	0
   712  000794  0101               	movlb	1	; () banked
   713  000796  6FEA               	movwf	(main@mR+8)& (0+255),b
   714  000798  0EC7               	movlw	199
   715  00079A  6FE9               	movwf	(main@mR+7)& (0+255),b
   716                           
   717                           ;main.c: 74: OSCCON = 0x72;
   718  00079C  0E72               	movlw	114
   719  00079E  6ED3               	movwf	4051,c	;volatile
   720  0007A0                     l69:
   721  0007A0  B4D3               	btfsc	4051,2,c	;volatile
   722  0007A2  D1B5               	goto	l3124
   723  0007A4  D7FD               	goto	l69
   724  0007A6                     l3008:
   725                           
   726                           ;main.c: 82: initMotorPWM();
   727  0007A6  EC28  F00A         	call	_initMotorPWM	;wreg free
   728                           
   729                           ;main.c: 83: initRFID();
   730  0007AA  ECA8  F00A         	call	_initRFID	;wreg free
   731                           
   732                           ;main.c: 84: initIR();
   733  0007AE  EC97  F00A         	call	_initIR	;wreg free
   734                           
   735                           ;main.c: 85: initLCD();
   736  0007B2  EC9B  F007         	call	_initLCD	;wreg free
   737                           
   738                           ;main.c: 86: initIR();
   739  0007B6  EC97  F00A         	call	_initIR	;wreg free
   740                           
   741                           ;main.c: 90: fullSpeedAhead(&mL, &mR);
   742  0007BA  0ED9               	movlw	low main@mL
   743  0007BC  6E26               	movwf	fullSpeedAhead@mL,c
   744  0007BE  0E01               	movlw	high main@mL
   745  0007C0  6E27               	movwf	fullSpeedAhead@mL+1,c
   746  0007C2  0EE2               	movlw	low main@mR
   747  0007C4  6E28               	movwf	fullSpeedAhead@mR,c
   748  0007C6  0E01               	movlw	high main@mR
   749  0007C8  6E29               	movwf	fullSpeedAhead@mR+1,c
   750  0007CA  EC53  F009         	call	_fullSpeedAhead	;wreg free
   751                           
   752                           ;main.c: 91: delay_s(1);
   753  0007CE  0E01               	movlw	1
   754  0007D0  ECD5  F009         	call	_delay_s
   755                           
   756                           ;main.c: 92: stop(&mL, &mR);
   757  0007D4  0ED9               	movlw	low main@mL
   758  0007D6  6E26               	movwf	stop@mL,c
   759  0007D8  0E01               	movlw	high main@mL
   760  0007DA  6E27               	movwf	stop@mL+1,c
   761  0007DC  0EE2               	movlw	low main@mR
   762  0007DE  6E28               	movwf	stop@mR,c
   763  0007E0  0E01               	movlw	high main@mR
   764  0007E2  6E29               	movwf	stop@mR+1,c
   765  0007E4  EC53  F008         	call	_stop	;wreg free
   766                           
   767                           ;main.c: 93: fullSpeedBack(&mL, &mR);
   768  0007E8  0ED9               	movlw	low main@mL
   769  0007EA  6E2B               	movwf	fullSpeedBack@mL,c
   770  0007EC  0E01               	movlw	high main@mL
   771  0007EE  6E2C               	movwf	fullSpeedBack@mL+1,c
   772  0007F0  0EE2               	movlw	low main@mR
   773  0007F2  6E2D               	movwf	fullSpeedBack@mR,c
   774  0007F4  0E01               	movlw	high main@mR
   775  0007F6  6E2E               	movwf	fullSpeedBack@mR+1,c
   776  0007F8  EC0D  F00A         	call	_fullSpeedBack	;wreg free
   777                           
   778                           ;main.c: 94: delay_s(1);
   779  0007FC  0E01               	movlw	1
   780  0007FE  ECD5  F009         	call	_delay_s
   781                           
   782                           ;main.c: 95: stop(&mL, &mR);
   783  000802  0ED9               	movlw	low main@mL
   784  000804  6E26               	movwf	stop@mL,c
   785  000806  0E01               	movlw	high main@mL
   786  000808  6E27               	movwf	stop@mL+1,c
   787  00080A  0EE2               	movlw	low main@mR
   788  00080C  6E28               	movwf	stop@mR,c
   789  00080E  0E01               	movlw	high main@mR
   790  000810  6E29               	movwf	stop@mR+1,c
   791  000812  EC53  F008         	call	_stop	;wreg free
   792                           
   793                           ;main.c: 97: enableSensor(0, 1);
   794  000816  0E01               	movlw	1
   795  000818  6E0F               	movwf	enableSensor@status,c
   796  00081A  0E00               	movlw	0
   797  00081C  EC71  F00A         	call	_enableSensor
   798                           
   799                           ;main.c: 98: enableSensor(1, 1);
   800  000820  0E01               	movlw	1
   801  000822  6E0F               	movwf	enableSensor@status,c
   802  000824  0E01               	movlw	1
   803  000826  EC71  F00A         	call	_enableSensor
   804                           
   805                           ;main.c: 99: mode = 1;
   806  00082A  0E01               	movlw	1
   807  00082C  D0C7               	goto	L1
   808  00082E                     l3028:
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 105: if (DirectionFound==0) {
   812  00082E  0101               	movlb	1	; () banked
   813  000830  51D6               	movf	main@DirectionFound& (0+255),w,b
   814  000832  0101               	movlb	1	; () banked
   815  000834  A4D8               	btfss	status,2,c
   816  000836  D016               	goto	l3032
   817                           
   818                           ; BSR set to: 1
   819                           ;main.c: 107: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   820  000838  0ED9               	movlw	low main@mL
   821  00083A  6E2F               	movwf	ScanWithRange@mL,c
   822  00083C  0E01               	movlw	high main@mL
   823  00083E  6E30               	movwf	ScanWithRange@mL+1,c
   824  000840  0EE2               	movlw	low main@mR
   825  000842  6E31               	movwf	ScanWithRange@mR,c
   826  000844  0E01               	movlw	high main@mR
   827  000846  6E32               	movwf	ScanWithRange@mR+1,c
   828  000848  C1D4  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   829  00084C  0101               	movlb	1	; () banked
   830  00084E  51D8               	movf	main@Move& (0+255),w,b
   831  000850  0D01               	mullw	1
   832  000852  0E64               	movlw	low main@MoveTime
   833  000854  24F3               	addwf	prodl,w,c
   834  000856  6E34               	movwf	ScanWithRange@MoveTime,c
   835  000858  0E01               	movlw	high main@MoveTime
   836  00085A  20F4               	addwfc	prodh,w,c
   837  00085C  6E35               	movwf	ScanWithRange@MoveTime+1,c
   838  00085E  EC59  F000         	call	_ScanWithRange	;wreg free
   839  000862  D036               	goto	L3
   840  000864                     l3032:
   841                           
   842                           ; BSR set to: 1
   843  000864  0101               	movlb	1	; () banked
   844  000866  05D6               	decf	main@DirectionFound& (0+255),w,b
   845  000868  A4D8               	btfss	status,2,c
   846  00086A  D00B               	goto	l3036
   847                           
   848                           ; BSR set to: 1
   849                           ;main.c: 110: DirectionFound = ScanIR(&mL, &mR);
   850  00086C  0ED9               	movlw	low main@mL
   851  00086E  6E2F               	movwf	ScanIR@mL,c
   852  000870  0E01               	movlw	high main@mL
   853  000872  6E30               	movwf	ScanIR@mL+1,c
   854  000874  0EE2               	movlw	low main@mR
   855  000876  6E31               	movwf	ScanIR@mR,c
   856  000878  0E01               	movlw	high main@mR
   857  00087A  6E32               	movwf	ScanIR@mR+1,c
   858  00087C  EC96  F005         	call	_ScanIR	;wreg free
   859  000880  D027               	goto	L3
   860  000882                     l3036:
   861                           
   862                           ; BSR set to: 1
   863  000882  0E02               	movlw	2
   864  000884  0101               	movlb	1	; () banked
   865  000886  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   866  000888  A4D8               	btfss	status,2,c
   867  00088A  D004               	goto	l3040
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 113: mode=2;
   871  00088C  0E02               	movlw	2
   872  00088E  0101               	movlb	1	; () banked
   873  000890  6FD5               	movwf	main@mode& (0+255),b
   874                           
   875                           ;main.c: 114: } else if (DirectionFound==3) {
   876  000892  D020               	goto	l3050
   877  000894                     l3040:
   878                           
   879                           ; BSR set to: 1
   880  000894  0E03               	movlw	3
   881  000896  0101               	movlb	1	; () banked
   882  000898  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   883  00089A  A4D8               	btfss	status,2,c
   884  00089C  D01B               	goto	l3050
   885                           
   886                           ; BSR set to: 1
   887                           ;main.c: 119: fullSpeedAhead(&mL, &mR);
   888  00089E  0ED9               	movlw	low main@mL
   889  0008A0  6E26               	movwf	fullSpeedAhead@mL,c
   890  0008A2  0E01               	movlw	high main@mL
   891  0008A4  6E27               	movwf	fullSpeedAhead@mL+1,c
   892  0008A6  0EE2               	movlw	low main@mR
   893  0008A8  6E28               	movwf	fullSpeedAhead@mR,c
   894  0008AA  0E01               	movlw	high main@mR
   895  0008AC  6E29               	movwf	fullSpeedAhead@mR+1,c
   896  0008AE  EC53  F009         	call	_fullSpeedAhead	;wreg free
   897                           
   898                           ;main.c: 120: delay_tenth_s(ScanAngle);
   899  0008B2  0101               	movlb	1	; () banked
   900  0008B4  51D4               	movf	main@ScanAngle& (0+255),w,b
   901  0008B6  ECF1  F009         	call	_delay_tenth_s
   902                           
   903                           ;main.c: 121: stop(&mL,&mR);
   904  0008BA  0ED9               	movlw	low main@mL
   905  0008BC  6E26               	movwf	stop@mL,c
   906  0008BE  0E01               	movlw	high main@mL
   907  0008C0  6E27               	movwf	stop@mL+1,c
   908  0008C2  0EE2               	movlw	low main@mR
   909  0008C4  6E28               	movwf	stop@mR,c
   910  0008C6  0E01               	movlw	high main@mR
   911  0008C8  6E29               	movwf	stop@mR+1,c
   912  0008CA  EC53  F008         	call	_stop	;wreg free
   913                           
   914                           ;main.c: 122: DirectionFound=0;
   915  0008CE  0E00               	movlw	0
   916  0008D0                     L3:
   917  0008D0  0101               	movlb	1	; () banked
   918  0008D2  6FD6               	movwf	main@DirectionFound& (0+255),b
   919  0008D4                     l3050:
   920                           
   921                           ; BSR set to: 1
   922                           ;main.c: 123: }
   923                           ;main.c: 125: MoveType[Move] = 1;
   924  0008D4  0101               	movlb	1	; () banked
   925  0008D6  51D8               	movf	main@Move& (0+255),w,b
   926  0008D8  0D01               	mullw	1
   927  0008DA  0E00               	movlw	low main@MoveType
   928  0008DC  24F3               	addwf	prodl,w,c
   929  0008DE  6ED9               	movwf	fsr2l,c
   930  0008E0  0E01               	movlw	high main@MoveType
   931  0008E2  20F4               	addwfc	prodh,w,c
   932  0008E4  6EDA               	movwf	fsr2h,c
   933  0008E6  0E01               	movlw	1
   934  0008E8  6EDF               	movwf	indf2,c
   935                           
   936                           ; BSR set to: 1
   937                           ;main.c: 126: Move++;
   938  0008EA  0101               	movlb	1	; () banked
   939  0008EC  2BD8               	incf	main@Move& (0+255),f,b
   940                           
   941                           ;main.c: 128: break;
   942  0008EE  D10F               	goto	l3124
   943  0008F0                     l3054:
   944                           
   945                           ; BSR set to: 1
   946                           ;main.c: 134: if (RFID_Read) {
   947  0008F0  0101               	movlb	1	; () banked
   948  0008F2  51EB               	movf	_RFID_Read& (0+255),w,b	;volatile
   949  0008F4  B4D8               	btfsc	status,2,c
   950  0008F6  D087               	goto	l3096
   951                           
   952                           ; BSR set to: 1
   953                           ;main.c: 135: stop(&mL, &mR);
   954  0008F8  0ED9               	movlw	low main@mL
   955  0008FA  6E26               	movwf	stop@mL,c
   956  0008FC  0E01               	movlw	high main@mL
   957  0008FE  6E27               	movwf	stop@mL+1,c
   958  000900  0EE2               	movlw	low main@mR
   959  000902  6E28               	movwf	stop@mR,c
   960  000904  0E01               	movlw	high main@mR
   961  000906  6E29               	movwf	stop@mR+1,c
   962  000908  EC53  F008         	call	_stop	;wreg free
   963                           
   964                           ;main.c: 136: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   965  00090C  0E03               	movlw	3
   966  00090E  0101               	movlb	1	; () banked
   967  000910  19FB               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   968  000912  A4D8               	btfss	status,2,c
   969  000914  D002               	goto	u2600
   970  000916  0E01               	movlw	1
   971  000918  D001               	goto	u2602
   972  00091A                     u2600:
   973  00091A  0E00               	movlw	0
   974  00091C                     u2602:
   975  00091C  6E3F               	movwf	??_main& (0+255),c
   976  00091E  0E02               	movlw	2
   977  000920  0101               	movlb	1	; () banked
   978  000922  19EC               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   979  000924  A4D8               	btfss	status,2,c
   980  000926  D002               	goto	u2610
   981  000928  0E01               	movlw	1
   982  00092A  D001               	goto	u2612
   983  00092C                     u2610:
   984  00092C  0E00               	movlw	0
   985  00092E                     u2612:
   986  00092E  143F               	andwf	??_main,w,c
   987  000930  A0E8               	btfss	wreg,0,c
   988  000932  D0ED               	goto	l3124
   989                           
   990                           ; BSR set to: 1
   991                           ;main.c: 137: if (VerifySignal(ReceivedString)){
   992  000934  0EEC               	movlw	low _ReceivedString
   993  000936  6E0F               	movwf	VerifySignal@Signal,c
   994  000938  0E01               	movlw	high _ReceivedString
   995  00093A  6E10               	movwf	VerifySignal@Signal+1,c
   996  00093C  ECF9  F007         	call	_VerifySignal	;wreg free
   997  000940  0900               	iorlw	0
   998  000942  B4D8               	btfsc	status,2,c
   999  000944  D03E               	goto	l3088
  1000                           
  1001                           ;main.c: 139: for (i=0; i<10; i++){
  1002  000946  0E00               	movlw	0
  1003  000948  0101               	movlb	1	; () banked
  1004  00094A  6FD7               	movwf	main@i& (0+255),b
  1005  00094C                     l3064:
  1006                           
  1007                           ; BSR set to: 1
  1008  00094C  0E09               	movlw	9
  1009  00094E  0101               	movlb	1	; () banked
  1010  000950  65D7               	cpfsgt	main@i& (0+255),b
  1011  000952  D001               	goto	l3068
  1012  000954  D01C               	goto	l3074
  1013  000956                     l3068:
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 140: Message[i] = ReceivedString[i+1];
  1017  000956  0101               	movlb	1	; () banked
  1018  000958  51D7               	movf	main@i& (0+255),w,b
  1019  00095A  6E3F               	movwf	??_main& (0+255),c
  1020  00095C  6A40               	clrf	(??_main+1)& (0+255),c
  1021  00095E  0E01               	movlw	1
  1022  000960  263F               	addwf	??_main,f,c
  1023  000962  0E00               	movlw	0
  1024  000964  2240               	addwfc	??_main+1,f,c
  1025  000966  0EEC               	movlw	low _ReceivedString
  1026  000968  243F               	addwf	??_main,w,c
  1027  00096A  6ED9               	movwf	fsr2l,c
  1028  00096C  0E01               	movlw	high _ReceivedString
  1029  00096E  2040               	addwfc	??_main+1,w,c
  1030  000970  6EDA               	movwf	fsr2h,c
  1031  000972  0101               	movlb	1	; () banked
  1032  000974  51D7               	movf	main@i& (0+255),w,b
  1033  000976  0D01               	mullw	1
  1034  000978  0EC8               	movlw	low main@Message
  1035  00097A  24F3               	addwf	prodl,w,c
  1036  00097C  6EE1               	movwf	fsr1l,c
  1037  00097E  0E01               	movlw	high main@Message
  1038  000980  20F4               	addwfc	prodh,w,c
  1039  000982  6EE2               	movwf	fsr1h,c
  1040  000984  CFDF FFE7          	movff	indf2,indf1
  1041                           
  1042                           ; BSR set to: 1
  1043  000988  0101               	movlb	1	; () banked
  1044  00098A  2BD7               	incf	main@i& (0+255),f,b
  1045  00098C  D7DF               	goto	l3064
  1046  00098E                     l3074:
  1047                           
  1048                           ; BSR set to: 1
  1049                           ;main.c: 141: }
  1050                           ;main.c: 144: for (i=0; i<16; i++) {
  1051  00098E  0E00               	movlw	0
  1052  000990  0101               	movlb	1	; () banked
  1053  000992  6FD7               	movwf	main@i& (0+255),b
  1054  000994                     l3076:
  1055                           
  1056                           ; BSR set to: 1
  1057  000994  0E0F               	movlw	15
  1058  000996  0101               	movlb	1	; () banked
  1059  000998  65D7               	cpfsgt	main@i& (0+255),b
  1060  00099A  D001               	goto	l3080
  1061  00099C  D00E               	goto	l3086
  1062  00099E                     l3080:
  1063                           
  1064                           ; BSR set to: 1
  1065                           ;main.c: 145: ReceivedString[i]=0;
  1066  00099E  0101               	movlb	1	; () banked
  1067  0009A0  51D7               	movf	main@i& (0+255),w,b
  1068  0009A2  0D01               	mullw	1
  1069  0009A4  0EEC               	movlw	low _ReceivedString
  1070  0009A6  24F3               	addwf	prodl,w,c
  1071  0009A8  6ED9               	movwf	fsr2l,c
  1072  0009AA  0E01               	movlw	high _ReceivedString
  1073  0009AC  20F4               	addwfc	prodh,w,c
  1074  0009AE  6EDA               	movwf	fsr2h,c
  1075  0009B0  0E00               	movlw	0
  1076  0009B2  6EDF               	movwf	indf2,c
  1077                           
  1078                           ; BSR set to: 1
  1079  0009B4  0101               	movlb	1	; () banked
  1080  0009B6  2BD7               	incf	main@i& (0+255),f,b
  1081  0009B8  D7ED               	goto	l3076
  1082  0009BA                     l3086:
  1083                           
  1084                           ; BSR set to: 1
  1085                           ;main.c: 146: }
  1086                           ;main.c: 147: mode = 3;
  1087  0009BA  0E03               	movlw	3
  1088  0009BC                     L1:
  1089  0009BC  0101               	movlb	1	; () banked
  1090  0009BE  6FD5               	movwf	main@mode& (0+255),b
  1091                           
  1092                           ;main.c: 149: } else {
  1093  0009C0  D0A6               	goto	l3124
  1094  0009C2                     l3088:
  1095                           
  1096                           ;main.c: 150: fullSpeedBack(&mL,&mR);
  1097  0009C2  0ED9               	movlw	low main@mL
  1098  0009C4  6E2B               	movwf	fullSpeedBack@mL,c
  1099  0009C6  0E01               	movlw	high main@mL
  1100  0009C8  6E2C               	movwf	fullSpeedBack@mL+1,c
  1101  0009CA  0EE2               	movlw	low main@mR
  1102  0009CC  6E2D               	movwf	fullSpeedBack@mR,c
  1103  0009CE  0E01               	movlw	high main@mR
  1104  0009D0  6E2E               	movwf	fullSpeedBack@mR+1,c
  1105  0009D2  EC0D  F00A         	call	_fullSpeedBack	;wreg free
  1106                           
  1107                           ;main.c: 151: delay_tenth_s(5);
  1108  0009D6  0E05               	movlw	5
  1109  0009D8  ECF1  F009         	call	_delay_tenth_s
  1110                           
  1111                           ;main.c: 152: stop(&mL,&mR);
  1112  0009DC  0ED9               	movlw	low main@mL
  1113  0009DE  6E26               	movwf	stop@mL,c
  1114  0009E0  0E01               	movlw	high main@mL
  1115  0009E2  6E27               	movwf	stop@mL+1,c
  1116  0009E4  0EE2               	movlw	low main@mR
  1117  0009E6  6E28               	movwf	stop@mR,c
  1118  0009E8  0E01               	movlw	high main@mR
  1119  0009EA  6E29               	movwf	stop@mR+1,c
  1120  0009EC  EC53  F008         	call	_stop	;wreg free
  1121                           
  1122                           ;main.c: 153: fullSpeedAhead(&mL,&mR);
  1123  0009F0  0ED9               	movlw	low main@mL
  1124  0009F2  6E26               	movwf	fullSpeedAhead@mL,c
  1125  0009F4  0E01               	movlw	high main@mL
  1126  0009F6  6E27               	movwf	fullSpeedAhead@mL+1,c
  1127  0009F8  0EE2               	movlw	low main@mR
  1128  0009FA  6E28               	movwf	fullSpeedAhead@mR,c
  1129  0009FC  0E01               	movlw	high main@mR
  1130  0009FE  6E29               	movwf	fullSpeedAhead@mR+1,c
  1131  000A00  EC53  F009         	call	_fullSpeedAhead	;wreg free
  1132                           
  1133                           ;main.c: 154: }
  1134                           ;main.c: 155: }
  1135                           ;main.c: 156: } else {
  1136  000A04  D084               	goto	l3124
  1137  000A06                     l3096:
  1138                           
  1139                           ;main.c: 157: DirectionFound=1;
  1140  000A06  0E01               	movlw	1
  1141  000A08  0101               	movlb	1	; () banked
  1142  000A0A  6FD6               	movwf	main@DirectionFound& (0+255),b
  1143                           
  1144                           ;main.c: 158: mode=1;
  1145  000A0C  0E01               	movlw	1
  1146  000A0E  0101               	movlb	1	; () banked
  1147  000A10  6FD5               	movwf	main@mode& (0+255),b
  1148                           
  1149                           ; BSR set to: 1
  1150                           ;main.c: 159: fullSpeedAhead(&mL,&mR);
  1151  000A12  0ED9               	movlw	low main@mL
  1152  000A14  6E26               	movwf	fullSpeedAhead@mL,c
  1153  000A16  0E01               	movlw	high main@mL
  1154  000A18  6E27               	movwf	fullSpeedAhead@mL+1,c
  1155  000A1A  0EE2               	movlw	low main@mR
  1156  000A1C  6E28               	movwf	fullSpeedAhead@mR,c
  1157  000A1E  0E01               	movlw	high main@mR
  1158  000A20  6E29               	movwf	fullSpeedAhead@mR+1,c
  1159  000A22  EC53  F009         	call	_fullSpeedAhead	;wreg free
  1160                           
  1161                           ;main.c: 160: delay_tenth_s(5);
  1162  000A26  0E05               	movlw	5
  1163  000A28  ECF1  F009         	call	_delay_tenth_s
  1164                           
  1165                           ;main.c: 161: }
  1166                           ;main.c: 163: break;
  1167  000A2C  D070               	goto	l3124
  1168  000A2E                     l3102:
  1169  000A2E  0101               	movlb	1	; () banked
  1170  000A30  51D8               	movf	main@Move& (0+255),w,b
  1171  000A32  0101               	movlb	1	; () banked
  1172  000A34  B4D8               	btfsc	status,2,c
  1173  000A36  D06B               	goto	l3124
  1174                           
  1175                           ; BSR set to: 1
  1176                           ;main.c: 168: if (MoveType[Move]==0) {
  1177                           
  1178                           ; BSR set to: 1
  1179                           
  1180                           ; BSR set to: 1
  1181  000A38  0101               	movlb	1	; () banked
  1182  000A3A  51D8               	movf	main@Move& (0+255),w,b
  1183  000A3C  0D01               	mullw	1
  1184  000A3E  0E00               	movlw	low main@MoveType
  1185  000A40  24F3               	addwf	prodl,w,c
  1186  000A42  6ED9               	movwf	fsr2l,c
  1187  000A44  0E01               	movlw	high main@MoveType
  1188  000A46  20F4               	addwfc	prodh,w,c
  1189  000A48  6EDA               	movwf	fsr2h,c
  1190  000A4A  50DF               	movf	indf2,w,c
  1191  000A4C  A4D8               	btfss	status,2,c
  1192  000A4E  D017               	goto	l3110
  1193                           
  1194                           ; BSR set to: 1
  1195                           ;main.c: 169: fullSpeedBack(&mL,&mR);
  1196  000A50  0ED9               	movlw	low main@mL
  1197  000A52  6E2B               	movwf	fullSpeedBack@mL,c
  1198  000A54  0E01               	movlw	high main@mL
  1199  000A56  6E2C               	movwf	fullSpeedBack@mL+1,c
  1200  000A58  0EE2               	movlw	low main@mR
  1201  000A5A  6E2D               	movwf	fullSpeedBack@mR,c
  1202  000A5C  0E01               	movlw	high main@mR
  1203  000A5E  6E2E               	movwf	fullSpeedBack@mR+1,c
  1204  000A60  EC0D  F00A         	call	_fullSpeedBack	;wreg free
  1205                           
  1206                           ;main.c: 170: delay_tenth_s(MoveTime[Move]);
  1207  000A64  0101               	movlb	1	; () banked
  1208  000A66  51D8               	movf	main@Move& (0+255),w,b
  1209  000A68  0D01               	mullw	1
  1210  000A6A  0E64               	movlw	low main@MoveTime
  1211  000A6C  24F3               	addwf	prodl,w,c
  1212  000A6E  6ED9               	movwf	fsr2l,c
  1213  000A70  0E01               	movlw	high main@MoveTime
  1214  000A72  20F4               	addwfc	prodh,w,c
  1215  000A74  6EDA               	movwf	fsr2h,c
  1216  000A76  50DF               	movf	indf2,w,c
  1217  000A78  ECF1  F009         	call	_delay_tenth_s
  1218                           
  1219                           ;main.c: 171: } else if (MoveType[Move]==1) {
  1220  000A7C  D045               	goto	l3118
  1221  000A7E                     l3110:
  1222  000A7E  0101               	movlb	1	; () banked
  1223  000A80  51D8               	movf	main@Move& (0+255),w,b
  1224  000A82  0D01               	mullw	1
  1225  000A84  0E00               	movlw	low main@MoveType
  1226  000A86  24F3               	addwf	prodl,w,c
  1227  000A88  6ED9               	movwf	fsr2l,c
  1228  000A8A  0E01               	movlw	high main@MoveType
  1229  000A8C  20F4               	addwfc	prodh,w,c
  1230  000A8E  6EDA               	movwf	fsr2h,c
  1231  000A90  04DE               	decf	postinc2,w,c
  1232  000A92  A4D8               	btfss	status,2,c
  1233  000A94  D039               	goto	l3118
  1234                           
  1235                           ; BSR set to: 1
  1236                           ;main.c: 172: if (MoveTime[Move]>0) {
  1237  000A96  0101               	movlb	1	; () banked
  1238  000A98  51D8               	movf	main@Move& (0+255),w,b
  1239  000A9A  0D01               	mullw	1
  1240  000A9C  0E64               	movlw	low main@MoveTime
  1241  000A9E  24F3               	addwf	prodl,w,c
  1242  000AA0  6ED9               	movwf	fsr2l,c
  1243  000AA2  0E01               	movlw	high main@MoveTime
  1244  000AA4  20F4               	addwfc	prodh,w,c
  1245  000AA6  6EDA               	movwf	fsr2h,c
  1246  000AA8  50DF               	movf	indf2,w,c
  1247  000AAA  B4D8               	btfsc	status,2,c
  1248  000AAC  D017               	goto	l3116
  1249                           
  1250                           ; BSR set to: 1
  1251                           ;main.c: 173: turnRight(&mL,&mR);
  1252  000AAE  0ED9               	movlw	low main@mL
  1253  000AB0  6E2B               	movwf	turnRight@mL,c
  1254  000AB2  0E01               	movlw	high main@mL
  1255  000AB4  6E2C               	movwf	turnRight@mL+1,c
  1256  000AB6  0EE2               	movlw	low main@mR
  1257  000AB8  6E2D               	movwf	turnRight@mR,c
  1258  000ABA  0E01               	movlw	high main@mR
  1259  000ABC  6E2E               	movwf	turnRight@mR+1,c
  1260  000ABE  EC8B  F009         	call	_turnRight	;wreg free
  1261                           
  1262                           ;main.c: 174: delay_tenth_s(MoveTime[Move]);
  1263  000AC2  0101               	movlb	1	; () banked
  1264  000AC4  51D8               	movf	main@Move& (0+255),w,b
  1265  000AC6  0D01               	mullw	1
  1266  000AC8  0E64               	movlw	low main@MoveTime
  1267  000ACA  24F3               	addwf	prodl,w,c
  1268  000ACC  6ED9               	movwf	fsr2l,c
  1269  000ACE  0E01               	movlw	high main@MoveTime
  1270  000AD0  20F4               	addwfc	prodh,w,c
  1271  000AD2  6EDA               	movwf	fsr2h,c
  1272  000AD4  50DF               	movf	indf2,w,c
  1273  000AD6  ECF1  F009         	call	_delay_tenth_s
  1274                           
  1275                           ;main.c: 175: } else {
  1276  000ADA  D016               	goto	l3118
  1277  000ADC                     l3116:
  1278                           
  1279                           ;main.c: 176: turnLeft(&mL,&mR);
  1280  000ADC  0ED9               	movlw	low main@mL
  1281  000ADE  6E2B               	movwf	turnLeft@mL,c
  1282  000AE0  0E01               	movlw	high main@mL
  1283  000AE2  6E2C               	movwf	turnLeft@mL+1,c
  1284  000AE4  0EE2               	movlw	low main@mR
  1285  000AE6  6E2D               	movwf	turnLeft@mR,c
  1286  000AE8  0E01               	movlw	high main@mR
  1287  000AEA  6E2E               	movwf	turnLeft@mR+1,c
  1288  000AEC  ECB0  F009         	call	_turnLeft	;wreg free
  1289                           
  1290                           ;main.c: 177: delay_tenth_s(MoveTime[Move]);
  1291  000AF0  0101               	movlb	1	; () banked
  1292  000AF2  51D8               	movf	main@Move& (0+255),w,b
  1293  000AF4  0D01               	mullw	1
  1294  000AF6  0E64               	movlw	low main@MoveTime
  1295  000AF8  24F3               	addwf	prodl,w,c
  1296  000AFA  6ED9               	movwf	fsr2l,c
  1297  000AFC  0E01               	movlw	high main@MoveTime
  1298  000AFE  20F4               	addwfc	prodh,w,c
  1299  000B00  6EDA               	movwf	fsr2h,c
  1300  000B02  50DF               	movf	indf2,w,c
  1301  000B04  ECF1  F009         	call	_delay_tenth_s
  1302  000B08                     l3118:
  1303  000B08  0101               	movlb	1	; () banked
  1304  000B0A  07D8               	decf	main@Move& (0+255),f,b
  1305  000B0C  D790               	goto	l3102
  1306  000B0E                     l3124:
  1307  000B0E  0101               	movlb	1	; () banked
  1308  000B10  51D5               	movf	main@mode& (0+255),w,b
  1309                           
  1310                           ; Switch size 1, requested type "space"
  1311                           ; Number of cases is 4, Range of values is 0 to 3
  1312                           ; switch strategies available:
  1313                           ; Name         Instructions Cycles
  1314                           ; simple_byte           13     7 (average)
  1315                           ;	Chosen strategy is simple_byte
  1316  000B12  0A00               	xorlw	0	; case 0
  1317  000B14  B4D8               	btfsc	status,2,c
  1318  000B16  D647               	goto	l3008
  1319  000B18  0A01               	xorlw	1	; case 1
  1320  000B1A  B4D8               	btfsc	status,2,c
  1321  000B1C  D688               	goto	l3028
  1322  000B1E  0A03               	xorlw	3	; case 2
  1323  000B20  B4D8               	btfsc	status,2,c
  1324  000B22  D6E6               	goto	l3054
  1325  000B24  0A01               	xorlw	1	; case 3
  1326  000B26  B4D8               	btfsc	status,2,c
  1327  000B28  D782               	goto	l3102
  1328                           
  1329                           ; BSR set to: 1
  1330                           
  1331                           ; BSR set to: 1
  1332  000B2A  D7F1               	goto	l3124
  1333  000B2C                     __end_of_main:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           prodh	equ	0xFF4
  1337                           prodl	equ	0xFF3
  1338                           intcon	equ	0xFF2
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           indf1	equ	0xFE7
  1342                           fsr1h	equ	0xFE2
  1343                           fsr1l	equ	0xFE1
  1344                           indf2	equ	0xFDF
  1345                           postinc2	equ	0xFDE
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _initRFID *****************
  1351 ;; Defined at:
  1352 ;;		line 5 in file "RFID_Reader.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;		None               void
  1359 ;; Registers used:
  1360 ;;		wreg, status,2
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1366 ;;      Params:         0       0       0       0
  1367 ;;      Locals:         1       0       0       0
  1368 ;;      Temps:          0       0       0       0
  1369 ;;      Totals:         1       0       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    1
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text1
  1381  001550                     __ptext1:
  1382                           	opt stack 0
  1383  001550                     _initRFID:
  1384                           	opt stack 29
  1385                           
  1386                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1387                           
  1388                           ; BSR set to: 1
  1389                           ;incstack = 0
  1390  001550  0E01               	movlw	1
  1391  001552  6E0F               	movwf	_initRFID$1317,c
  1392  001554  5094               	movf	3988,w,c	;volatile
  1393  001556  C00F  FF94         	movff	_initRFID$1317,3988	;volatile
  1394                           
  1395                           ;RFID_Reader.c: 10: SPBRG=205;
  1396  00155A  0ECD               	movlw	205
  1397  00155C  6EAF               	movwf	4015,c	;volatile
  1398                           
  1399                           ;RFID_Reader.c: 11: SPBRGH=0;
  1400  00155E  0E00               	movlw	0
  1401  001560  6EB0               	movwf	4016,c	;volatile
  1402                           
  1403                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1404  001562  86AA               	bsf	4010,3,c	;volatile
  1405                           
  1406                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1407  001564  84AC               	bsf	4012,2,c	;volatile
  1408                           
  1409                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1410  001566  88AB               	bsf	4011,4,c	;volatile
  1411                           
  1412                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1413  001568  8EAB               	bsf	4011,7,c	;volatile
  1414                           
  1415                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1416  00156A  98AC               	bcf	4012,4,c	;volatile
  1417                           
  1418                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1419  00156C  9CAB               	bcf	4011,6,c	;volatile
  1420  00156E  0012               	return		;funcret
  1421  001570                     __end_of_initRFID:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           intcon	equ	0xFF2
  1427                           postinc0	equ	0xFEE
  1428                           wreg	equ	0xFE8
  1429                           indf1	equ	0xFE7
  1430                           fsr1h	equ	0xFE2
  1431                           fsr1l	equ	0xFE1
  1432                           indf2	equ	0xFDF
  1433                           postinc2	equ	0xFDE
  1434                           fsr2h	equ	0xFDA
  1435                           fsr2l	equ	0xFD9
  1436                           status	equ	0xFD8
  1437                           
  1438 ;; *************** function _initMotorPWM *****************
  1439 ;; Defined at:
  1440 ;;		line 4 in file "dc_motor.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;		None
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;		None
  1445 ;; Return value:  Size  Location     Type
  1446 ;;		None               void
  1447 ;; Registers used:
  1448 ;;		wreg, status,2
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1454 ;;      Params:         0       0       0       0
  1455 ;;      Locals:         0       0       0       0
  1456 ;;      Temps:          0       0       0       0
  1457 ;;      Totals:         0       0       0       0
  1458 ;;Total ram usage:        0 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text2
  1469  001450                     __ptext2:
  1470                           	opt stack 0
  1471  001450                     _initMotorPWM:
  1472                           	opt stack 29
  1473                           
  1474                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1475                           
  1476                           ;incstack = 0
  1477  001450  0E00               	movlw	0
  1478  001452  6E7F               	movwf	3967,c	;volatile
  1479                           
  1480                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1481  001454  0E80               	movlw	128
  1482  001456  6E7E               	movwf	3966,c	;volatile
  1483                           
  1484                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1485  001458  0E6F               	movlw	111
  1486  00145A  6E6F               	movwf	3951,c	;volatile
  1487                           
  1488                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1489  00145C  0E00               	movlw	0
  1490  00145E  6E6E               	movwf	3950,c	;volatile
  1491                           
  1492                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1493  001460  0EC7               	movlw	199
  1494  001462  6E7B               	movwf	3963,c	;volatile
  1495                           
  1496                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1497  001464  0E00               	movlw	0
  1498  001466  6E7A               	movwf	3962,c	;volatile
  1499                           
  1500                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1501  001468  0E00               	movlw	0
  1502  00146A  6E79               	movwf	3961,c	;volatile
  1503                           
  1504                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1505  00146C  0E00               	movlw	0
  1506  00146E  6E78               	movwf	3960,c	;volatile
  1507                           
  1508                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1509  001470  0E00               	movlw	0
  1510  001472  6E77               	movwf	3959,c	;volatile
  1511                           
  1512                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1513  001474  0E00               	movlw	0
  1514  001476  6E76               	movwf	3958,c	;volatile
  1515                           
  1516                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1517  001478  9093               	bcf	3987,0,c	;volatile
  1518                           
  1519                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1520  00147A  9293               	bcf	3987,1,c	;volatile
  1521                           
  1522                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1523  00147C  9493               	bcf	3987,2,c	;volatile
  1524                           
  1525                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1526  00147E  9693               	bcf	3987,3,c	;volatile
  1527  001480  0012               	return		;funcret
  1528  001482                     __end_of_initMotorPWM:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           prodh	equ	0xFF4
  1532                           prodl	equ	0xFF3
  1533                           intcon	equ	0xFF2
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           indf1	equ	0xFE7
  1537                           fsr1h	equ	0xFE2
  1538                           fsr1l	equ	0xFE1
  1539                           indf2	equ	0xFDF
  1540                           postinc2	equ	0xFDE
  1541                           fsr2h	equ	0xFDA
  1542                           fsr2l	equ	0xFD9
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _initLCD *****************
  1546 ;; Defined at:
  1547 ;;		line 38 in file "LCD.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  2   32[None  ] int 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1561 ;;      Params:         0       0       0       0
  1562 ;;      Locals:         0       0       0       0
  1563 ;;      Temps:          1       0       0       0
  1564 ;;      Totals:         1       0       0       0
  1565 ;;Total ram usage:        1 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    4
  1568 ;; This function calls:
  1569 ;;		_LCDout
  1570 ;;		_SendLCD
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text3
  1577  000F36                     __ptext3:
  1578                           	opt stack 0
  1579  000F36                     _initLCD:
  1580                           	opt stack 26
  1581                           
  1582                           ;LCD.c: 44: TRISAbits.RA6=0;
  1583                           
  1584                           ;incstack = 0
  1585  000F36  9C92               	bcf	3986,6,c	;volatile
  1586                           
  1587                           ;LCD.c: 45: TRISCbits.RC0=0;
  1588  000F38  9094               	bcf	3988,0,c	;volatile
  1589                           
  1590                           ;LCD.c: 46: TRISCbits.RC1=0;
  1591  000F3A  9294               	bcf	3988,1,c	;volatile
  1592                           
  1593                           ;LCD.c: 47: TRISCbits.RC2=0;
  1594  000F3C  9494               	bcf	3988,2,c	;volatile
  1595                           
  1596                           ;LCD.c: 48: TRISDbits.RD0=0;
  1597  000F3E  9095               	bcf	3989,0,c	;volatile
  1598                           
  1599                           ;LCD.c: 49: TRISDbits.RD1=0;
  1600  000F40  9295               	bcf	3989,1,c	;volatile
  1601                           
  1602                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1603  000F42  0E27               	movlw	39
  1604  000F44  6E15               	movwf	??_initLCD& (0+255),c
  1605  000F46  0EF5               	movlw	245
  1606  000F48                     u2757:
  1607  000F48  2EE8               	decfsz	wreg,f,c
  1608  000F4A  D7FE               	goto	u2757
  1609  000F4C  2E15               	decfsz	??_initLCD& (0+255),f,c
  1610  000F4E  D7FC               	goto	u2757
  1611  000F50  F000               	nop	
  1612                           
  1613                           ;LCD.c: 52: LCDout(0b0011);
  1614  000F52  0E03               	movlw	3
  1615  000F54  EC38  F007         	call	_LCDout
  1616                           
  1617                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1618  000F58  0E0D               	movlw	13
  1619  000F5A  6E15               	movwf	??_initLCD& (0+255),c
  1620  000F5C  0EFC               	movlw	252
  1621  000F5E                     u2767:
  1622  000F5E  2EE8               	decfsz	wreg,f,c
  1623  000F60  D7FE               	goto	u2767
  1624  000F62  2E15               	decfsz	??_initLCD& (0+255),f,c
  1625  000F64  D7FC               	goto	u2767
  1626                           
  1627                           ;LCD.c: 54: LCDout(0b0011);
  1628  000F66  0E03               	movlw	3
  1629  000F68  EC38  F007         	call	_LCDout
  1630                           
  1631                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1632  000F6C  0E85               	movlw	133
  1633  000F6E                     u2777:
  1634  000F6E  2EE8               	decfsz	wreg,f,c
  1635  000F70  D7FE               	goto	u2777
  1636  000F72  F000               	nop	
  1637                           
  1638                           ;LCD.c: 56: LCDout(0b0011);
  1639  000F74  0E03               	movlw	3
  1640  000F76  EC38  F007         	call	_LCDout
  1641                           
  1642                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1643  000F7A  0E21               	movlw	33
  1644  000F7C                     u2787:
  1645  000F7C  2EE8               	decfsz	wreg,f,c
  1646  000F7E  D7FE               	goto	u2787
  1647  000F80  F000               	nop	
  1648                           
  1649                           ;LCD.c: 58: LCDout(0b0010);
  1650  000F82  0E02               	movlw	2
  1651  000F84  EC38  F007         	call	_LCDout
  1652                           
  1653                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1654  000F88  0E21               	movlw	33
  1655  000F8A                     u2797:
  1656  000F8A  2EE8               	decfsz	wreg,f,c
  1657  000F8C  D7FE               	goto	u2797
  1658  000F8E  F000               	nop	
  1659                           
  1660                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1661  000F90  0E00               	movlw	0
  1662  000F92  6E13               	movwf	SendLCD@type,c
  1663  000F94  0E28               	movlw	40
  1664  000F96  EC59  F00A         	call	_SendLCD
  1665                           
  1666                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1667  000F9A  0E21               	movlw	33
  1668  000F9C                     u2807:
  1669  000F9C  2EE8               	decfsz	wreg,f,c
  1670  000F9E  D7FE               	goto	u2807
  1671  000FA0  F000               	nop	
  1672                           
  1673                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1674  000FA2  0E00               	movlw	0
  1675  000FA4  6E13               	movwf	SendLCD@type,c
  1676  000FA6  0E08               	movlw	8
  1677  000FA8  EC59  F00A         	call	_SendLCD
  1678                           
  1679                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1680  000FAC  0E21               	movlw	33
  1681  000FAE                     u2817:
  1682  000FAE  2EE8               	decfsz	wreg,f,c
  1683  000FB0  D7FE               	goto	u2817
  1684  000FB2  F000               	nop	
  1685                           
  1686                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1687  000FB4  0E00               	movlw	0
  1688  000FB6  6E13               	movwf	SendLCD@type,c
  1689  000FB8  0E01               	movlw	1
  1690  000FBA  EC59  F00A         	call	_SendLCD
  1691                           
  1692                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1693  000FBE  0E0D               	movlw	13
  1694  000FC0  6E15               	movwf	??_initLCD& (0+255),c
  1695  000FC2  0EFC               	movlw	252
  1696  000FC4                     u2827:
  1697  000FC4  2EE8               	decfsz	wreg,f,c
  1698  000FC6  D7FE               	goto	u2827
  1699  000FC8  2E15               	decfsz	??_initLCD& (0+255),f,c
  1700  000FCA  D7FC               	goto	u2827
  1701                           
  1702                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1703  000FCC  0E00               	movlw	0
  1704  000FCE  6E13               	movwf	SendLCD@type,c
  1705  000FD0  0E06               	movlw	6
  1706  000FD2  EC59  F00A         	call	_SendLCD
  1707                           
  1708                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1709  000FD6  0E21               	movlw	33
  1710  000FD8                     u2837:
  1711  000FD8  2EE8               	decfsz	wreg,f,c
  1712  000FDA  D7FE               	goto	u2837
  1713  000FDC  F000               	nop	
  1714                           
  1715                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1716  000FDE  0E00               	movlw	0
  1717  000FE0  6E13               	movwf	SendLCD@type,c
  1718  000FE2  0E0C               	movlw	12
  1719  000FE4  EC59  F00A         	call	_SendLCD
  1720                           
  1721                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1722  000FE8  0E21               	movlw	33
  1723  000FEA                     u2847:
  1724  000FEA  2EE8               	decfsz	wreg,f,c
  1725  000FEC  D7FE               	goto	u2847
  1726  000FEE  F000               	nop	
  1727  000FF0  0012               	return		;funcret
  1728  000FF2                     __end_of_initLCD:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           indf1	equ	0xFE7
  1737                           fsr1h	equ	0xFE2
  1738                           fsr1l	equ	0xFE1
  1739                           indf2	equ	0xFDF
  1740                           postinc2	equ	0xFDE
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _SendLCD *****************
  1746 ;; Defined at:
  1747 ;;		line 27 in file "LCD.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  Byte            1    wreg     unsigned char 
  1750 ;;  type            1   18[COMRAM] unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  Byte            1   19[COMRAM] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;		None               void
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, status,0, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1762 ;;      Params:         1       0       0       0
  1763 ;;      Locals:         1       0       0       0
  1764 ;;      Temps:          0       0       0       0
  1765 ;;      Totals:         2       0       0       0
  1766 ;;Total ram usage:        2 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    3
  1769 ;; This function calls:
  1770 ;;		_LCDout
  1771 ;; This function is called by:
  1772 ;;		_initLCD
  1773 ;;		_SetLine
  1774 ;;		_LCD_String
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text4
  1779  0014B2                     __ptext4:
  1780                           	opt stack 0
  1781  0014B2                     _SendLCD:
  1782                           	opt stack 26
  1783                           
  1784                           ;incstack = 0
  1785                           ;SendLCD@Byte stored from wreg
  1786  0014B2  6E14               	movwf	SendLCD@Byte,c
  1787                           
  1788                           ;LCD.c: 30: LATAbits.LATA6=type;
  1789  0014B4  B013               	btfsc	SendLCD@type,0,c
  1790  0014B6  D002               	bra	u1275
  1791  0014B8  9C89               	bcf	3977,6,c	;volatile
  1792  0014BA  D001               	bra	u1276
  1793  0014BC                     u1275:
  1794  0014BC  8C89               	bsf	3977,6,c	;volatile
  1795  0014BE                     u1276:
  1796                           
  1797                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1798  0014BE  3814               	swapf	SendLCD@Byte,w,c
  1799  0014C0  0B0F               	andlw	15
  1800  0014C2  0B0F               	andlw	15
  1801  0014C4  EC38  F007         	call	_LCDout
  1802                           
  1803                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1804  0014C8  0E06               	movlw	6
  1805  0014CA                     u2857:
  1806  0014CA  2EE8               	decfsz	wreg,f,c
  1807  0014CC  D7FE               	goto	u2857
  1808  0014CE  D000               	nop2		;nop
  1809                           
  1810                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1811  0014D0  5014               	movf	SendLCD@Byte,w,c
  1812  0014D2  0B0F               	andlw	15
  1813  0014D4  EC38  F007         	call	_LCDout
  1814                           
  1815                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1816  0014D8  0E21               	movlw	33
  1817  0014DA                     u2867:
  1818  0014DA  2EE8               	decfsz	wreg,f,c
  1819  0014DC  D7FE               	goto	u2867
  1820  0014DE  F000               	nop	
  1821  0014E0  0012               	return		;funcret
  1822  0014E2                     __end_of_SendLCD:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           indf1	equ	0xFE7
  1831                           fsr1h	equ	0xFE2
  1832                           fsr1l	equ	0xFE1
  1833                           indf2	equ	0xFDF
  1834                           postinc2	equ	0xFDE
  1835                           fsr2h	equ	0xFDA
  1836                           fsr2l	equ	0xFD9
  1837                           status	equ	0xFD8
  1838                           
  1839 ;; *************** function _LCDout *****************
  1840 ;; Defined at:
  1841 ;;		line 14 in file "LCD.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  number          1    wreg     unsigned char 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  number          1   17[COMRAM] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;		None               void
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1855 ;;      Params:         0       0       0       0
  1856 ;;      Locals:         1       0       0       0
  1857 ;;      Temps:          3       0       0       0
  1858 ;;      Totals:         4       0       0       0
  1859 ;;Total ram usage:        4 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    2
  1862 ;; This function calls:
  1863 ;;		_E_TOG
  1864 ;; This function is called by:
  1865 ;;		_SendLCD
  1866 ;;		_initLCD
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           	psect	text5
  1871  000E70                     __ptext5:
  1872                           	opt stack 0
  1873  000E70                     _LCDout:
  1874                           	opt stack 26
  1875                           
  1876                           ;incstack = 0
  1877                           ;LCDout@number stored from wreg
  1878  000E70  6E12               	movwf	LCDout@number,c
  1879                           
  1880                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1881  000E72  5012               	movf	LCDout@number,w,c
  1882  000E74  6E0F               	movwf	??_LCDout& (0+255),c
  1883  000E76  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1884  000E78  0E07               	movlw	7
  1885  000E7A                     u1195:
  1886  000E7A  90D8               	bcf	status,0,c
  1887  000E7C  360F               	rlcf	??_LCDout,f,c
  1888  000E7E  3610               	rlcf	??_LCDout+1,f,c
  1889  000E80  2EE8               	decfsz	wreg,f,c
  1890  000E82  D7FB               	goto	u1195
  1891  000E84  0E07               	movlw	7
  1892  000E86  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1893  000E88                     u1205:
  1894  000E88  3410               	rlcf	??_LCDout+1,w,c
  1895  000E8A  3210               	rrcf	??_LCDout+1,f,c
  1896  000E8C  320F               	rrcf	??_LCDout,f,c
  1897  000E8E  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1898  000E90  D7FB               	goto	u1205
  1899  000E92  460F               	rlncf	??_LCDout,f,c
  1900  000E94  508B               	movf	3979,w,c	;volatile
  1901  000E96  180F               	xorwf	??_LCDout,w,c
  1902  000E98  0BFD               	andlw	-3
  1903  000E9A  180F               	xorwf	??_LCDout,w,c
  1904  000E9C  6E8B               	movwf	3979,c	;volatile
  1905                           
  1906                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1907  000E9E  5012               	movf	LCDout@number,w,c
  1908  000EA0  6E0F               	movwf	??_LCDout& (0+255),c
  1909  000EA2  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1910  000EA4  0E06               	movlw	6
  1911  000EA6                     u1215:
  1912  000EA6  90D8               	bcf	status,0,c
  1913  000EA8  360F               	rlcf	??_LCDout,f,c
  1914  000EAA  3610               	rlcf	??_LCDout+1,f,c
  1915  000EAC  2EE8               	decfsz	wreg,f,c
  1916  000EAE  D7FB               	goto	u1215
  1917  000EB0  0E07               	movlw	7
  1918  000EB2  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1919  000EB4                     u1225:
  1920  000EB4  3410               	rlcf	??_LCDout+1,w,c
  1921  000EB6  3210               	rrcf	??_LCDout+1,f,c
  1922  000EB8  320F               	rrcf	??_LCDout,f,c
  1923  000EBA  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1924  000EBC  D7FB               	goto	u1225
  1925  000EBE  460F               	rlncf	??_LCDout,f,c
  1926  000EC0  460F               	rlncf	??_LCDout,f,c
  1927  000EC2  508B               	movf	3979,w,c	;volatile
  1928  000EC4  180F               	xorwf	??_LCDout,w,c
  1929  000EC6  0BFB               	andlw	-5
  1930  000EC8  180F               	xorwf	??_LCDout,w,c
  1931  000ECA  6E8B               	movwf	3979,c	;volatile
  1932                           
  1933                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1934  000ECC  5012               	movf	LCDout@number,w,c
  1935  000ECE  6E0F               	movwf	??_LCDout& (0+255),c
  1936  000ED0  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1937  000ED2  0E05               	movlw	5
  1938  000ED4                     u1235:
  1939  000ED4  90D8               	bcf	status,0,c
  1940  000ED6  360F               	rlcf	??_LCDout,f,c
  1941  000ED8  3610               	rlcf	??_LCDout+1,f,c
  1942  000EDA  2EE8               	decfsz	wreg,f,c
  1943  000EDC  D7FB               	goto	u1235
  1944  000EDE  0E07               	movlw	7
  1945  000EE0  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1946  000EE2                     u1245:
  1947  000EE2  3410               	rlcf	??_LCDout+1,w,c
  1948  000EE4  3210               	rrcf	??_LCDout+1,f,c
  1949  000EE6  320F               	rrcf	??_LCDout,f,c
  1950  000EE8  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1951  000EEA  D7FB               	goto	u1245
  1952  000EEC  508C               	movf	3980,w,c	;volatile
  1953  000EEE  180F               	xorwf	??_LCDout,w,c
  1954  000EF0  0BFE               	andlw	-2
  1955  000EF2  180F               	xorwf	??_LCDout,w,c
  1956  000EF4  6E8C               	movwf	3980,c	;volatile
  1957                           
  1958                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1959  000EF6  5012               	movf	LCDout@number,w,c
  1960  000EF8  6E0F               	movwf	??_LCDout& (0+255),c
  1961  000EFA  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1962  000EFC  3A0F               	swapf	??_LCDout,f,c
  1963  000EFE  3A10               	swapf	??_LCDout+1,f,c
  1964  000F00  0EF0               	movlw	240
  1965  000F02  1610               	andwf	??_LCDout+1,f,c
  1966  000F04  500F               	movf	??_LCDout,w,c
  1967  000F06  0B0F               	andlw	15
  1968  000F08  1210               	iorwf	??_LCDout+1,f,c
  1969  000F0A  0EF0               	movlw	240
  1970  000F0C  160F               	andwf	??_LCDout,f,c
  1971  000F0E  0E07               	movlw	7
  1972  000F10  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1973  000F12                     u1255:
  1974  000F12  3410               	rlcf	??_LCDout+1,w,c
  1975  000F14  3210               	rrcf	??_LCDout+1,f,c
  1976  000F16  320F               	rrcf	??_LCDout,f,c
  1977  000F18  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1978  000F1A  D7FB               	goto	u1255
  1979  000F1C  460F               	rlncf	??_LCDout,f,c
  1980  000F1E  508C               	movf	3980,w,c	;volatile
  1981  000F20  180F               	xorwf	??_LCDout,w,c
  1982  000F22  0BFD               	andlw	-3
  1983  000F24  180F               	xorwf	??_LCDout,w,c
  1984  000F26  6E8C               	movwf	3980,c	;volatile
  1985                           
  1986                           ;LCD.c: 21: E_TOG();
  1987  000F28  ECB8  F00A         	call	_E_TOG	;wreg free
  1988                           
  1989                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1990  000F2C  0E03               	movlw	3
  1991  000F2E                     u2877:
  1992  000F2E  2EE8               	decfsz	wreg,f,c
  1993  000F30  D7FE               	goto	u2877
  1994  000F32  F000               	nop	
  1995  000F34  0012               	return		;funcret
  1996  000F36                     __end_of_LCDout:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           intcon	equ	0xFF2
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           indf1	equ	0xFE7
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _E_TOG *****************
  2014 ;; Defined at:
  2015 ;;		line 5 in file "LCD.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;		None
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;		None
  2020 ;; Return value:  Size  Location     Type
  2021 ;;		None               void
  2022 ;; Registers used:
  2023 ;;		wreg
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2029 ;;      Params:         0       0       0       0
  2030 ;;      Locals:         0       0       0       0
  2031 ;;      Temps:          0       0       0       0
  2032 ;;      Totals:         0       0       0       0
  2033 ;;Total ram usage:        0 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_LCDout
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text6
  2044  001570                     __ptext6:
  2045                           	opt stack 0
  2046  001570                     _E_TOG:
  2047                           	opt stack 26
  2048                           
  2049                           ;LCD.c: 8: LATCbits.LATC0=1;
  2050                           
  2051                           ;incstack = 0
  2052  001570  808B               	bsf	3979,0,c	;volatile
  2053                           
  2054                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2055  001572  0E03               	movlw	3
  2056  001574                     u2887:
  2057  001574  2EE8               	decfsz	wreg,f,c
  2058  001576  D7FE               	goto	u2887
  2059  001578  F000               	nop	
  2060                           
  2061                           ;LCD.c: 10: LATCbits.LATC0=0;
  2062  00157A  908B               	bcf	3979,0,c	;volatile
  2063  00157C  0012               	return		;funcret
  2064  00157E                     __end_of_E_TOG:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           intcon	equ	0xFF2
  2070                           postinc0	equ	0xFEE
  2071                           wreg	equ	0xFE8
  2072                           indf1	equ	0xFE7
  2073                           fsr1h	equ	0xFE2
  2074                           fsr1l	equ	0xFE1
  2075                           indf2	equ	0xFDF
  2076                           postinc2	equ	0xFDE
  2077                           fsr2h	equ	0xFDA
  2078                           fsr2l	equ	0xFD9
  2079                           status	equ	0xFD8
  2080                           
  2081 ;; *************** function _initIR *****************
  2082 ;; Defined at:
  2083 ;;		line 30 in file "IR_Reading.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;		None
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, status,2
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2097 ;;      Params:         0       0       0       0
  2098 ;;      Locals:         0       0       0       0
  2099 ;;      Temps:          0       0       0       0
  2100 ;;      Totals:         0       0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text7
  2112  00152E                     __ptext7:
  2113                           	opt stack 0
  2114  00152E                     _initIR:
  2115                           	opt stack 29
  2116                           
  2117                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2118                           
  2119                           ;incstack = 0
  2120  00152E  9489               	bcf	3977,2,c	;volatile
  2121                           
  2122                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2123  001530  9689               	bcf	3977,3,c	;volatile
  2124                           
  2125                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2126  001532  8492               	bsf	3986,2,c	;volatile
  2127                           
  2128                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2129  001534  8692               	bsf	3986,3,c	;volatile
  2130                           
  2131                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2132  001536  94B8               	bcf	4024,2,c	;volatile
  2133                           
  2134                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2135  001538  96B8               	bcf	4024,3,c	;volatile
  2136                           
  2137                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2138  00153A  9CB8               	bcf	4024,6,c	;volatile
  2139                           
  2140                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2141  00153C  9EB8               	bcf	4024,7,c	;volatile
  2142                           
  2143                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2144  00153E  0E06               	movlw	6
  2145  001540  6E63               	movwf	3939,c	;volatile
  2146                           
  2147                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2148  001542  0E06               	movlw	6
  2149  001544  6E62               	movwf	3938,c	;volatile
  2150                           
  2151                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2152  001546  9096               	bcf	3990,0,c	;volatile
  2153                           
  2154                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2155  001548  9296               	bcf	3990,1,c	;volatile
  2156                           
  2157                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2158  00154A  0E59               	movlw	89
  2159  00154C  6EB7               	movwf	4023,c	;volatile
  2160  00154E  0012               	return		;funcret
  2161  001550                     __end_of_initIR:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           intcon	equ	0xFF2
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           indf1	equ	0xFE7
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _fullSpeedBack *****************
  2179 ;; Defined at:
  2180 ;;		line 125 in file "dc_motor.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2183 ;;		 -> main@mL(9), 
  2184 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2185 ;;		 -> main@mR(9), 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;		None               void
  2190 ;; Registers used:
  2191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2197 ;;      Params:         4       0       0       0
  2198 ;;      Locals:         0       0       0       0
  2199 ;;      Temps:          0       0       0       0
  2200 ;;      Totals:         4       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    4
  2204 ;; This function calls:
  2205 ;;		_fullSpeedAhead
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text8
  2212  00141A                     __ptext8:
  2213                           	opt stack 0
  2214  00141A                     _fullSpeedBack:
  2215                           	opt stack 26
  2216                           
  2217                           ;dc_motor.c: 128: mL->direction=0;
  2218                           
  2219                           ;incstack = 0
  2220  00141A  EE20 F001          	lfsr	2,1
  2221  00141E  502B               	movf	fullSpeedBack@mL,w,c
  2222  001420  26D9               	addwf	fsr2l,f,c
  2223  001422  502C               	movf	fullSpeedBack@mL+1,w,c
  2224  001424  22DA               	addwfc	fsr2h,f,c
  2225  001426  0E00               	movlw	0
  2226  001428  6EDF               	movwf	indf2,c
  2227                           
  2228                           ;dc_motor.c: 129: mR->direction=0;
  2229  00142A  EE20 F001          	lfsr	2,1
  2230  00142E  502D               	movf	fullSpeedBack@mR,w,c
  2231  001430  26D9               	addwf	fsr2l,f,c
  2232  001432  502E               	movf	fullSpeedBack@mR+1,w,c
  2233  001434  22DA               	addwfc	fsr2h,f,c
  2234  001436  0E00               	movlw	0
  2235  001438  6EDF               	movwf	indf2,c
  2236                           
  2237                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2238  00143A  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2239  00143E  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2240  001442  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2241  001446  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2242  00144A  EC53  F009         	call	_fullSpeedAhead	;wreg free
  2243  00144E  0012               	return		;funcret
  2244  001450                     __end_of_fullSpeedBack:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           indf1	equ	0xFE7
  2253                           fsr1h	equ	0xFE2
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function _enableSensor *****************
  2262 ;; Defined at:
  2263 ;;		line 106 in file "IR_Reading.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  sensor          1    wreg     unsigned char 
  2266 ;;  status          1   14[COMRAM] unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  sensor          1   15[COMRAM] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;		None               void
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2278 ;;      Params:         1       0       0       0
  2279 ;;      Locals:         1       0       0       0
  2280 ;;      Temps:          0       0       0       0
  2281 ;;      Totals:         2       0       0       0
  2282 ;;Total ram usage:        2 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    1
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text9
  2293  0014E2                     __ptext9:
  2294                           	opt stack 0
  2295  0014E2                     _enableSensor:
  2296                           	opt stack 29
  2297                           
  2298                           ;incstack = 0
  2299                           ;enableSensor@sensor stored from wreg
  2300  0014E2  6E10               	movwf	enableSensor@sensor,c
  2301                           
  2302                           ;IR_Reading.c: 108: if (sensor==0){
  2303  0014E4  5010               	movf	enableSensor@sensor,w,c
  2304  0014E6  A4D8               	btfss	status,2,c
  2305  0014E8  D006               	goto	l2032
  2306                           
  2307                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2308  0014EA  B00F               	btfsc	enableSensor@status,0,c
  2309  0014EC  D002               	bra	u1365
  2310  0014EE  908D               	bcf	3981,0,c	;volatile
  2311  0014F0  D001               	bra	u1366
  2312  0014F2                     u1365:
  2313  0014F2  808D               	bsf	3981,0,c	;volatile
  2314  0014F4                     u1366:
  2315                           
  2316                           ;IR_Reading.c: 110: } else if (sensor==1){
  2317  0014F4  0012               	return	
  2318  0014F6                     l2032:
  2319  0014F6  0410               	decf	enableSensor@sensor,w,c
  2320  0014F8  A4D8               	btfss	status,2,c
  2321  0014FA  0012               	return	
  2322                           
  2323                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2324  0014FC  B00F               	btfsc	enableSensor@status,0,c
  2325  0014FE  D002               	bra	u1385
  2326  001500  928D               	bcf	3981,1,c	;volatile
  2327  001502  D001               	bra	u1386
  2328  001504                     u1385:
  2329  001504  828D               	bsf	3981,1,c	;volatile
  2330  001506                     u1386:
  2331  001506  0012               	return	
  2332  001508                     __end_of_enableSensor:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf1	equ	0xFE7
  2341                           fsr1h	equ	0xFE2
  2342                           fsr1l	equ	0xFE1
  2343                           indf2	equ	0xFDF
  2344                           postinc2	equ	0xFDE
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _delay_s *****************
  2350 ;; Defined at:
  2351 ;;		line 10 in file "Movement.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  seconds         1    wreg     unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  seconds         1   15[COMRAM] unsigned char 
  2356 ;;  i               2   16[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;		None               void
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         0       0       0       0
  2367 ;;      Locals:         3       0       0       0
  2368 ;;      Temps:          1       0       0       0
  2369 ;;      Totals:         4       0       0       0
  2370 ;;Total ram usage:        4 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    1
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text10
  2381  0013AA                     __ptext10:
  2382                           	opt stack 0
  2383  0013AA                     _delay_s:
  2384                           	opt stack 29
  2385                           
  2386                           ;incstack = 0
  2387                           ;delay_s@seconds stored from wreg
  2388  0013AA  6E10               	movwf	delay_s@seconds,c
  2389                           
  2390                           ;Movement.c: 11: unsigned int i=0;
  2391  0013AC  0E00               	movlw	0
  2392  0013AE  6E12               	movwf	delay_s@i+1,c
  2393  0013B0  0E00               	movlw	0
  2394  0013B2  6E11               	movwf	delay_s@i,c
  2395                           
  2396                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2397  0013B4  0E00               	movlw	0
  2398  0013B6  6E12               	movwf	delay_s@i+1,c
  2399  0013B8  0E01               	movlw	1
  2400  0013BA  6E11               	movwf	delay_s@i,c
  2401  0013BC  D009               	goto	l2022
  2402  0013BE                     l2018:
  2403                           
  2404                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2405  0013BE  0E82               	movlw	130
  2406  0013C0  6E0F               	movwf	??_delay_s& (0+255),c
  2407  0013C2  0EDE               	movlw	222
  2408  0013C4                     u2897:
  2409  0013C4  2EE8               	decfsz	wreg,f,c
  2410  0013C6  D7FE               	goto	u2897
  2411  0013C8  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2412  0013CA  D7FC               	goto	u2897
  2413  0013CC  4A11               	infsnz	delay_s@i,f,c
  2414  0013CE  2A12               	incf	delay_s@i+1,f,c
  2415  0013D0                     l2022:
  2416  0013D0  5010               	movf	delay_s@seconds,w,c
  2417  0013D2  0D14               	mullw	20
  2418  0013D4  5011               	movf	delay_s@i,w,c
  2419  0013D6  5CF3               	subwf	prodl,w,c
  2420  0013D8  5012               	movf	delay_s@i+1,w,c
  2421  0013DA  58F4               	subwfb	prodh,w,c
  2422  0013DC  A0D8               	btfss	status,0,c
  2423  0013DE  0012               	return	
  2424  0013E0  D7EE               	goto	l2018
  2425  0013E2                     __end_of_delay_s:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           intcon	equ	0xFF2
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           indf1	equ	0xFE7
  2434                           fsr1h	equ	0xFE2
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _VerifySignal *****************
  2443 ;; Defined at:
  2444 ;;		line 56 in file "RFID_Reader.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  2447 ;;		 -> ReceivedString(16), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  hexByte         2   23[COMRAM] unsigned int 
  2450 ;;  i               1   25[COMRAM] unsigned char 
  2451 ;;  checksum        1   22[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      unsigned char 
  2454 ;; Registers used:
  2455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2461 ;;      Params:         2       0       0       0
  2462 ;;      Locals:         4       0       0       0
  2463 ;;      Temps:          6       0       0       0
  2464 ;;      Totals:        12       0       0       0
  2465 ;;Total ram usage:       12 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           	psect	text11
  2476  000FF2                     __ptext11:
  2477                           	opt stack 0
  2478  000FF2                     _VerifySignal:
  2479                           	opt stack 29
  2480                           
  2481                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  2482                           
  2483                           ;incstack = 0
  2484  000FF2  0E00               	movlw	0
  2485  000FF4  6E17               	movwf	VerifySignal@checksum,c
  2486                           
  2487                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  2488  000FF6  0E00               	movlw	0
  2489  000FF8  6E19               	movwf	VerifySignal@hexByte+1,c
  2490  000FFA  0E00               	movlw	0
  2491  000FFC  6E18               	movwf	VerifySignal@hexByte,c
  2492                           
  2493                           ;RFID_Reader.c: 59: unsigned char i=0;
  2494  000FFE  0E00               	movlw	0
  2495  001000  6E1A               	movwf	VerifySignal@i,c
  2496                           
  2497                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  2498  001002  EE20 F004          	lfsr	2,4
  2499  001006  500F               	movf	VerifySignal@Signal,w,c
  2500  001008  26D9               	addwf	fsr2l,f,c
  2501  00100A  5010               	movf	VerifySignal@Signal+1,w,c
  2502  00100C  22DA               	addwfc	fsr2h,f,c
  2503  00100E  50DF               	movf	indf2,w,c
  2504  001010  6E11               	movwf	??_VerifySignal& (0+255),c
  2505  001012  EE20 F003          	lfsr	2,3
  2506  001016  500F               	movf	VerifySignal@Signal,w,c
  2507  001018  26D9               	addwf	fsr2l,f,c
  2508  00101A  5010               	movf	VerifySignal@Signal+1,w,c
  2509  00101C  22DA               	addwfc	fsr2h,f,c
  2510  00101E  50DF               	movf	indf2,w,c
  2511  001020  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  2512  001022  5012               	movf	??_VerifySignal+1,w,c
  2513  001024  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2514  001026  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  2515  001028  5011               	movf	??_VerifySignal,w,c
  2516  00102A  2413               	addwf	??_VerifySignal+2,w,c
  2517  00102C  6E18               	movwf	VerifySignal@hexByte,c
  2518  00102E  0E00               	movlw	0
  2519  001030  2014               	addwfc	??_VerifySignal+3,w,c
  2520  001032  6E19               	movwf	VerifySignal@hexByte+1,c
  2521                           
  2522                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2523  001034  EE20 F002          	lfsr	2,2
  2524  001038  500F               	movf	VerifySignal@Signal,w,c
  2525  00103A  26D9               	addwf	fsr2l,f,c
  2526  00103C  5010               	movf	VerifySignal@Signal+1,w,c
  2527  00103E  22DA               	addwfc	fsr2h,f,c
  2528  001040  50DF               	movf	indf2,w,c
  2529  001042  1818               	xorwf	VerifySignal@hexByte,w,c
  2530  001044  6E17               	movwf	VerifySignal@checksum,c
  2531                           
  2532                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  2533  001046  0E05               	movlw	5
  2534  001048  6E1A               	movwf	VerifySignal@i,c
  2535  00104A                     l2332:
  2536  00104A  0E09               	movlw	9
  2537  00104C  641A               	cpfsgt	VerifySignal@i,c
  2538  00104E  D001               	goto	l2336
  2539  001050  D028               	goto	l2344
  2540  001052                     l2336:
  2541                           
  2542                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  2543  001052  501A               	movf	VerifySignal@i,w,c
  2544  001054  6E11               	movwf	??_VerifySignal& (0+255),c
  2545  001056  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  2546  001058  0E01               	movlw	1
  2547  00105A  2611               	addwf	??_VerifySignal,f,c
  2548  00105C  0E00               	movlw	0
  2549  00105E  2212               	addwfc	??_VerifySignal+1,f,c
  2550  001060  5011               	movf	??_VerifySignal,w,c
  2551  001062  240F               	addwf	VerifySignal@Signal,w,c
  2552  001064  6ED9               	movwf	fsr2l,c
  2553  001066  5012               	movf	??_VerifySignal+1,w,c
  2554  001068  2010               	addwfc	VerifySignal@Signal+1,w,c
  2555  00106A  6EDA               	movwf	fsr2h,c
  2556  00106C  50DF               	movf	indf2,w,c
  2557  00106E  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  2558  001070  501A               	movf	VerifySignal@i,w,c
  2559  001072  0D01               	mullw	1
  2560  001074  50F3               	movf	prodl,w,c
  2561  001076  240F               	addwf	VerifySignal@Signal,w,c
  2562  001078  6ED9               	movwf	fsr2l,c
  2563  00107A  50F4               	movf	prodh,w,c
  2564  00107C  2010               	addwfc	VerifySignal@Signal+1,w,c
  2565  00107E  6EDA               	movwf	fsr2h,c
  2566  001080  50DF               	movf	indf2,w,c
  2567  001082  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2568  001084  5014               	movf	??_VerifySignal+3,w,c
  2569  001086  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  2570  001088  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  2571  00108A  5013               	movf	??_VerifySignal+2,w,c
  2572  00108C  2415               	addwf	??_VerifySignal+4,w,c
  2573  00108E  6E18               	movwf	VerifySignal@hexByte,c
  2574  001090  0E00               	movlw	0
  2575  001092  2016               	addwfc	??_VerifySignal+5,w,c
  2576  001094  6E19               	movwf	VerifySignal@hexByte+1,c
  2577                           
  2578                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  2579  001096  5017               	movf	VerifySignal@checksum,w,c
  2580  001098  1818               	xorwf	VerifySignal@hexByte,w,c
  2581  00109A  6E17               	movwf	VerifySignal@checksum,c
  2582  00109C  0E02               	movlw	2
  2583  00109E  261A               	addwf	VerifySignal@i,f,c
  2584  0010A0  D7D4               	goto	l2332
  2585  0010A2                     l2344:
  2586                           
  2587                           ;RFID_Reader.c: 69: }
  2588                           ;RFID_Reader.c: 72: return 1;
  2589  0010A2  0E01               	movlw	1
  2590  0010A4  0012               	return	
  2591  0010A6                     __end_of_VerifySignal:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           indf1	equ	0xFE7
  2600                           fsr1h	equ	0xFE2
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           postinc2	equ	0xFDE
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _ScanWithRange *****************
  2609 ;; Defined at:
  2610 ;;		line 101 in file "Movement.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2613 ;;		 -> main@mL(9), 
  2614 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2615 ;;		 -> main@mR(9), 
  2616 ;;  tenth_second    1   50[COMRAM] unsigned char 
  2617 ;;  MoveTime        2   51[COMRAM] PTR unsigned char 
  2618 ;;		 -> main@MoveTime(100), 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  SensorResult    4   17[BANK0 ] unsigned int [2]
  2621 ;;  SensorResult    4   13[BANK0 ] unsigned int [2]
  2622 ;;  SensorResult    4    9[BANK0 ] unsigned int [2]
  2623 ;;  DirectionFou    2    7[BANK0 ] const unsigned int 
  2624 ;;  DirectionFou    2    5[BANK0 ] const unsigned int 
  2625 ;;  ClearSignalT    2    3[BANK0 ] const unsigned int 
  2626 ;;  ResultFalseR    1    2[BANK0 ] unsigned char 
  2627 ;;  ResultFalseC    1    1[BANK0 ] unsigned char 
  2628 ;;  ResultFalseL    1    0[BANK0 ] unsigned char 
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      unsigned char 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2638 ;;      Params:         7       0       0       0
  2639 ;;      Locals:         0      21       0       0
  2640 ;;      Temps:          2       0       0       0
  2641 ;;      Totals:         9      21       0       0
  2642 ;;Total ram usage:       30 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    5
  2645 ;; This function calls:
  2646 ;;		___awdiv
  2647 ;;		_delay_tenth_s
  2648 ;;		_grabLeftIR
  2649 ;;		_grabRightIR
  2650 ;;		_stop
  2651 ;;		_turnLeft
  2652 ;;		_turnRight
  2653 ;; This function is called by:
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text12
  2659  0000B2                     __ptext12:
  2660                           	opt stack 0
  2661  0000B2                     _ScanWithRange:
  2662                           	opt stack 25
  2663                           
  2664                           ;Movement.c: 104: unsigned int SensorResultL[2]={0,0};
  2665                           
  2666                           ;incstack = 0
  2667  0000B2  C045  F069         	movff	ScanWithRange@F3719,ScanWithRange@SensorResultL
  2668  0000B6  C046  F06A         	movff	ScanWithRange@F3719+1,ScanWithRange@SensorResultL+1
  2669  0000BA  C047  F06B         	movff	ScanWithRange@F3719+2,ScanWithRange@SensorResultL+2
  2670  0000BE  C048  F06C         	movff	ScanWithRange@F3719+3,ScanWithRange@SensorResultL+3
  2671                           
  2672                           ;Movement.c: 105: unsigned int SensorResultC[2]={0,0};
  2673  0000C2  C049  F06D         	movff	ScanWithRange@F3721,ScanWithRange@SensorResultC
  2674  0000C6  C04A  F06E         	movff	ScanWithRange@F3721+1,ScanWithRange@SensorResultC+1
  2675  0000CA  C04B  F06F         	movff	ScanWithRange@F3721+2,ScanWithRange@SensorResultC+2
  2676  0000CE  C04C  F070         	movff	ScanWithRange@F3721+3,ScanWithRange@SensorResultC+3
  2677                           
  2678                           ;Movement.c: 106: unsigned int SensorResultR[2]={0,0};
  2679  0000D2  C075  F071         	movff	ScanWithRange@F3723,ScanWithRange@SensorResultR
  2680  0000D6  C076  F072         	movff	ScanWithRange@F3723+1,ScanWithRange@SensorResultR+1
  2681  0000DA  C077  F073         	movff	ScanWithRange@F3723+2,ScanWithRange@SensorResultR+2
  2682  0000DE  C078  F074         	movff	ScanWithRange@F3723+3,ScanWithRange@SensorResultR+3
  2683                           
  2684                           ;Movement.c: 107: unsigned char ResultFalseL=0;
  2685  0000E2  0E00               	movlw	0
  2686  0000E4  0100               	movlb	0	; () banked
  2687  0000E6  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2688                           
  2689                           ;Movement.c: 108: unsigned char ResultFalseC=0;
  2690  0000E8  0E00               	movlw	0
  2691  0000EA  0100               	movlb	0	; () banked
  2692  0000EC  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2693                           
  2694                           ;Movement.c: 109: unsigned char ResultFalseR=0;
  2695  0000EE  0E00               	movlw	0
  2696  0000F0  0100               	movlb	0	; () banked
  2697  0000F2  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2698                           
  2699                           ;Movement.c: 112: const unsigned int ClearSignalTolerance=200;
  2700  0000F4  0E00               	movlw	0
  2701  0000F6  0100               	movlb	0	; () banked
  2702  0000F8  6F64               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  2703  0000FA  0EC8               	movlw	200
  2704  0000FC  6F63               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  2705                           
  2706                           ;Movement.c: 113: const unsigned int DirectionFoundLimit=1500;
  2707  0000FE  0E05               	movlw	5
  2708  000100  0100               	movlb	0	; () banked
  2709  000102  6F66               	movwf	(ScanWithRange@DirectionFoundLimit+1)& (0+255),b
  2710  000104  0EDC               	movlw	220
  2711  000106  6F65               	movwf	ScanWithRange@DirectionFoundLimit& (0+255),b
  2712                           
  2713                           ;Movement.c: 114: const unsigned int DirectionFoundTolerance=500;
  2714  000108  0E01               	movlw	1
  2715  00010A  0100               	movlb	0	; () banked
  2716  00010C  6F68               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  2717  00010E  0EF4               	movlw	244
  2718  000110  6F67               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;Movement.c: 121: stop(mL,mR);
  2722  000112  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2723  000116  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2724  00011A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2725  00011E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2726  000122  EC53  F008         	call	_stop	;wreg free
  2727                           
  2728                           ;Movement.c: 122: SensorResultC[0]=grabLeftIR();
  2729  000126  EC18  F009         	call	_grabLeftIR	;wreg free
  2730  00012A  C00F  F06D         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2731  00012E  C010  F06E         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2732                           
  2733                           ;Movement.c: 123: SensorResultC[1]=grabRightIR();
  2734  000132  ECDD  F008         	call	_grabRightIR	;wreg free
  2735  000136  C00F  F06F         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2736  00013A  C010  F070         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2737                           
  2738                           ;Movement.c: 127: CAP1BUFH=0;
  2739  00013E  0E00               	movlw	0
  2740  000140  6E69               	movwf	3945,c	;volatile
  2741                           
  2742                           ;Movement.c: 128: CAP1BUFL=0;
  2743  000142  0E00               	movlw	0
  2744  000144  6E68               	movwf	3944,c	;volatile
  2745                           
  2746                           ;Movement.c: 131: turnLeft(mL,mR);
  2747  000146  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2748  00014A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2749  00014E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2750  000152  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2751  000156  ECB0  F009         	call	_turnLeft	;wreg free
  2752                           
  2753                           ;Movement.c: 132: delay_tenth_s(tenth_seconds);
  2754  00015A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2755  00015C  ECF1  F009         	call	_delay_tenth_s
  2756                           
  2757                           ;Movement.c: 133: MoveTime += tenth_seconds;
  2758  000160  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2759  000162  0D01               	mullw	1
  2760  000164  50F3               	movf	prodl,w,c
  2761  000166  2634               	addwf	ScanWithRange@MoveTime,f,c
  2762  000168  50F4               	movf	prodh,w,c
  2763  00016A  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2764                           
  2765                           ;Movement.c: 135: stop(mL,mR);
  2766  00016C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2767  000170  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2768  000174  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2769  000178  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2770  00017C  EC53  F008         	call	_stop	;wreg free
  2771                           
  2772                           ;Movement.c: 136: SensorResultL[0]=grabLeftIR();
  2773  000180  EC18  F009         	call	_grabLeftIR	;wreg free
  2774  000184  C00F  F069         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2775  000188  C010  F06A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2776                           
  2777                           ;Movement.c: 137: SensorResultL[1]=grabRightIR();
  2778  00018C  ECDD  F008         	call	_grabRightIR	;wreg free
  2779  000190  C00F  F06B         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2780  000194  C010  F06C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2781                           
  2782                           ;Movement.c: 141: CAP1BUFH=0;
  2783  000198  0E00               	movlw	0
  2784  00019A  6E69               	movwf	3945,c	;volatile
  2785                           
  2786                           ;Movement.c: 142: CAP1BUFL=0;
  2787  00019C  0E00               	movlw	0
  2788  00019E  6E68               	movwf	3944,c	;volatile
  2789                           
  2790                           ;Movement.c: 145: turnRight(mL,mR);
  2791  0001A0  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2792  0001A4  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2793  0001A8  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2794  0001AC  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2795  0001B0  EC8B  F009         	call	_turnRight	;wreg free
  2796                           
  2797                           ;Movement.c: 146: delay_tenth_s(2*tenth_seconds);
  2798  0001B4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2799  0001B6  0D02               	mullw	2
  2800  0001B8  50F3               	movf	prodl,w,c
  2801  0001BA  ECF1  F009         	call	_delay_tenth_s
  2802                           
  2803                           ;Movement.c: 147: MoveTime -= 2*tenth_seconds;
  2804  0001BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2805  0001C0  0D02               	mullw	2
  2806  0001C2  50F3               	movf	prodl,w,c
  2807  0001C4  5E34               	subwf	ScanWithRange@MoveTime,f,c
  2808  0001C6  50F4               	movf	prodh,w,c
  2809  0001C8  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  2810                           
  2811                           ;Movement.c: 149: stop(mL,mR);
  2812  0001CA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2813  0001CE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2814  0001D2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2815  0001D6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2816  0001DA  EC53  F008         	call	_stop	;wreg free
  2817                           
  2818                           ;Movement.c: 150: SensorResultR[0]=grabLeftIR();
  2819  0001DE  EC18  F009         	call	_grabLeftIR	;wreg free
  2820  0001E2  C00F  F071         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2821  0001E6  C010  F072         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2822                           
  2823                           ;Movement.c: 151: SensorResultR[1]=grabRightIR();
  2824  0001EA  ECDD  F008         	call	_grabRightIR	;wreg free
  2825  0001EE  C00F  F073         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2826  0001F2  C010  F074         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2827                           
  2828                           ;Movement.c: 155: CAP1BUFH=0;
  2829  0001F6  0E00               	movlw	0
  2830  0001F8  6E69               	movwf	3945,c	;volatile
  2831                           
  2832                           ;Movement.c: 156: CAP1BUFL=0;
  2833  0001FA  0E00               	movlw	0
  2834  0001FC  6E68               	movwf	3944,c	;volatile
  2835                           
  2836                           ;Movement.c: 167: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  2837  0001FE  0100               	movlb	0	; () banked
  2838  000200  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2839  000202  0100               	movlb	0	; () banked
  2840  000204  256B               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2841  000206  6E36               	movwf	??_ScanWithRange& (0+255),c
  2842  000208  0100               	movlb	0	; () banked
  2843  00020A  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2844  00020C  0100               	movlb	0	; () banked
  2845  00020E  216C               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2846  000210  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2847  000212  0100               	movlb	0	; () banked
  2848  000214  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2849  000216  5C36               	subwf	??_ScanWithRange,w,c
  2850  000218  0100               	movlb	0	; () banked
  2851  00021A  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2852  00021C  5837               	subwfb	??_ScanWithRange+1,w,c
  2853  00021E  B0D8               	btfsc	status,0,c
  2854  000220  D00D               	goto	l2744
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;Movement.c: 168: SensorResultL[0]=0;
  2858  000222  0E00               	movlw	0
  2859  000224  0100               	movlb	0	; () banked
  2860  000226  6F6A               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2861  000228  0E00               	movlw	0
  2862  00022A  6F69               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2863                           
  2864                           ;Movement.c: 169: SensorResultL[1]=0;
  2865  00022C  0E00               	movlw	0
  2866  00022E  0100               	movlb	0	; () banked
  2867  000230  6F6C               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2868  000232  0E00               	movlw	0
  2869  000234  6F6B               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2870                           
  2871                           ;Movement.c: 170: ResultFalseL=1;
  2872  000236  0E01               	movlw	1
  2873  000238  0100               	movlb	0	; () banked
  2874  00023A  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2875  00023C                     l2744:
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;Movement.c: 171: }
  2879                           ;Movement.c: 172: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  2880  00023C  0100               	movlb	0	; () banked
  2881  00023E  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2882  000240  0100               	movlb	0	; () banked
  2883  000242  256F               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2884  000244  6E36               	movwf	??_ScanWithRange& (0+255),c
  2885  000246  0100               	movlb	0	; () banked
  2886  000248  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2887  00024A  0100               	movlb	0	; () banked
  2888  00024C  2170               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2889  00024E  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2890  000250  0100               	movlb	0	; () banked
  2891  000252  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2892  000254  5C36               	subwf	??_ScanWithRange,w,c
  2893  000256  0100               	movlb	0	; () banked
  2894  000258  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2895  00025A  5837               	subwfb	??_ScanWithRange+1,w,c
  2896  00025C  B0D8               	btfsc	status,0,c
  2897  00025E  D00D               	goto	l2748
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;Movement.c: 173: SensorResultC[0]=0;
  2901  000260  0E00               	movlw	0
  2902  000262  0100               	movlb	0	; () banked
  2903  000264  6F6E               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2904  000266  0E00               	movlw	0
  2905  000268  6F6D               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2906                           
  2907                           ;Movement.c: 174: SensorResultC[1]=0;
  2908  00026A  0E00               	movlw	0
  2909  00026C  0100               	movlb	0	; () banked
  2910  00026E  6F70               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2911  000270  0E00               	movlw	0
  2912  000272  6F6F               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2913                           
  2914                           ;Movement.c: 175: ResultFalseC=1;
  2915  000274  0E01               	movlw	1
  2916  000276  0100               	movlb	0	; () banked
  2917  000278  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2918  00027A                     l2748:
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;Movement.c: 176: }
  2922                           ;Movement.c: 177: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2923  00027A  0100               	movlb	0	; () banked
  2924  00027C  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2925  00027E  0100               	movlb	0	; () banked
  2926  000280  2573               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2927  000282  6E36               	movwf	??_ScanWithRange& (0+255),c
  2928  000284  0100               	movlb	0	; () banked
  2929  000286  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2930  000288  0100               	movlb	0	; () banked
  2931  00028A  2174               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2932  00028C  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2933  00028E  0100               	movlb	0	; () banked
  2934  000290  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2935  000292  5C36               	subwf	??_ScanWithRange,w,c
  2936  000294  0100               	movlb	0	; () banked
  2937  000296  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2938  000298  5837               	subwfb	??_ScanWithRange+1,w,c
  2939  00029A  B0D8               	btfsc	status,0,c
  2940  00029C  D00D               	goto	l2752
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Movement.c: 178: SensorResultR[0]=0;
  2944  00029E  0E00               	movlw	0
  2945  0002A0  0100               	movlb	0	; () banked
  2946  0002A2  6F72               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2947  0002A4  0E00               	movlw	0
  2948  0002A6  6F71               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2949                           
  2950                           ;Movement.c: 179: SensorResultR[1]=0;
  2951  0002A8  0E00               	movlw	0
  2952  0002AA  0100               	movlb	0	; () banked
  2953  0002AC  6F74               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2954  0002AE  0E00               	movlw	0
  2955  0002B0  6F73               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2956                           
  2957                           ;Movement.c: 180: ResultFalseR=1;
  2958  0002B2  0E01               	movlw	1
  2959  0002B4  0100               	movlb	0	; () banked
  2960  0002B6  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2961  0002B8                     l2752:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;Movement.c: 181: }
  2965                           ;Movement.c: 183: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2966  0002B8  0100               	movlb	0	; () banked
  2967  0002BA  5161               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2968  0002BC  C060  F036         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2969  0002C0  6A37               	clrf	(??_ScanWithRange+1)& (0+255),c
  2970  0002C2  2636               	addwf	??_ScanWithRange,f,c
  2971  0002C4  0E00               	movlw	0
  2972  0002C6  2237               	addwfc	??_ScanWithRange+1,f,c
  2973  0002C8  0100               	movlb	0	; () banked
  2974  0002CA  5162               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2975  0002CC  2636               	addwf	??_ScanWithRange,f,c
  2976  0002CE  0E00               	movlw	0
  2977  0002D0  2237               	addwfc	??_ScanWithRange+1,f,c
  2978  0002D2  0E03               	movlw	3
  2979  0002D4  1836               	xorwf	??_ScanWithRange,w,c
  2980  0002D6  1037               	iorwf	??_ScanWithRange+1,w,c
  2981  0002D8  A4D8               	btfss	status,2,c
  2982  0002DA  D021               	goto	l2768
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;Movement.c: 185: turnLeft(mL,mR);
  2986  0002DC  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2987  0002E0  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2988  0002E4  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2989  0002E8  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2990  0002EC  ECB0  F009         	call	_turnLeft	;wreg free
  2991                           
  2992                           ;Movement.c: 186: delay_tenth_s(5*tenth_seconds);
  2993  0002F0  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2994  0002F2  0D05               	mullw	5
  2995  0002F4  50F3               	movf	prodl,w,c
  2996  0002F6  ECF1  F009         	call	_delay_tenth_s
  2997                           
  2998                           ;Movement.c: 187: MoveTime += 5*tenth_seconds;
  2999  0002FA  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3000  0002FC  0D05               	mullw	5
  3001  0002FE  50F3               	movf	prodl,w,c
  3002  000300  2634               	addwf	ScanWithRange@MoveTime,f,c
  3003  000302  50F4               	movf	prodh,w,c
  3004  000304  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3005                           
  3006                           ;Movement.c: 188: stop(mL,mR);
  3007  000306  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3008  00030A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3009  00030E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3010  000312  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3011  000316  EC53  F008         	call	_stop	;wreg free
  3012                           
  3013                           ;Movement.c: 189: return 3;
  3014  00031A  0E03               	movlw	3
  3015  00031C  0012               	return	
  3016  00031E                     l2768:
  3017                           
  3018                           ;Movement.c: 192: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  3019                           ;Movement.c: 193: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  3020                           ;Movement.c: 194: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  3021  00031E  0100               	movlb	0	; () banked
  3022  000320  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3023  000322  0100               	movlb	0	; () banked
  3024  000324  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3025  000326  0100               	movlb	0	; () banked
  3026  000328  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3027  00032A  0100               	movlb	0	; () banked
  3028  00032C  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3029  00032E  B0D8               	btfsc	status,0,c
  3030  000330  D059               	goto	l2790
  3031                           
  3032                           ; BSR set to: 0
  3033  000332  0100               	movlb	0	; () banked
  3034  000334  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3035  000336  0100               	movlb	0	; () banked
  3036  000338  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3037  00033A  0100               	movlb	0	; () banked
  3038  00033C  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3039  00033E  0100               	movlb	0	; () banked
  3040  000340  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3041  000342  B0D8               	btfsc	status,0,c
  3042  000344  D04F               	goto	l2790
  3043                           
  3044                           ; BSR set to: 0
  3045  000346  EE20  F06B         	lfsr	2,ScanWithRange@SensorResultL+2
  3046  00034A  CFDE F036          	movff	postinc2,??_ScanWithRange
  3047  00034E  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3048  000352  1E36               	comf	??_ScanWithRange,f,c
  3049  000354  1E37               	comf	??_ScanWithRange+1,f,c
  3050  000356  4A36               	infsnz	??_ScanWithRange,f,c
  3051  000358  2A37               	incf	??_ScanWithRange+1,f,c
  3052  00035A  0100               	movlb	0	; () banked
  3053  00035C  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3054  00035E  2636               	addwf	??_ScanWithRange,f,c
  3055  000360  0100               	movlb	0	; () banked
  3056  000362  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3057  000364  2237               	addwfc	??_ScanWithRange+1,f,c
  3058  000366  0100               	movlb	0	; () banked
  3059  000368  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3060  00036A  5C36               	subwf	??_ScanWithRange,w,c
  3061  00036C  0100               	movlb	0	; () banked
  3062  00036E  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3063  000370  5837               	subwfb	??_ScanWithRange+1,w,c
  3064  000372  A0D8               	btfss	status,0,c
  3065  000374  D016               	goto	l2776
  3066                           
  3067                           ; BSR set to: 0
  3068  000376  C069  F036         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  3069  00037A  C06A  F037         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  3070  00037E  1E36               	comf	??_ScanWithRange,f,c
  3071  000380  1E37               	comf	??_ScanWithRange+1,f,c
  3072  000382  4A36               	infsnz	??_ScanWithRange,f,c
  3073  000384  2A37               	incf	??_ScanWithRange+1,f,c
  3074  000386  0100               	movlb	0	; () banked
  3075  000388  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3076  00038A  2636               	addwf	??_ScanWithRange,f,c
  3077  00038C  0100               	movlb	0	; () banked
  3078  00038E  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3079  000390  2237               	addwfc	??_ScanWithRange+1,f,c
  3080  000392  0100               	movlb	0	; () banked
  3081  000394  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3082  000396  5C36               	subwf	??_ScanWithRange,w,c
  3083  000398  0100               	movlb	0	; () banked
  3084  00039A  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3085  00039C  5837               	subwfb	??_ScanWithRange+1,w,c
  3086  00039E  B0D8               	btfsc	status,0,c
  3087  0003A0  D021               	goto	l2790
  3088  0003A2                     l2776:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;Movement.c: 196: turnLeft(mL,mR);
  3092  0003A2  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3093  0003A6  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3094  0003AA  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3095  0003AE  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3096  0003B2  ECB0  F009         	call	_turnLeft	;wreg free
  3097                           
  3098                           ;Movement.c: 197: delay_tenth_s(2*(tenth_seconds));
  3099  0003B6  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3100  0003B8  0D02               	mullw	2
  3101  0003BA  50F3               	movf	prodl,w,c
  3102  0003BC  ECF1  F009         	call	_delay_tenth_s
  3103                           
  3104                           ;Movement.c: 198: MoveTime += 2*tenth_seconds;
  3105  0003C0  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3106  0003C2  0D02               	mullw	2
  3107  0003C4  50F3               	movf	prodl,w,c
  3108  0003C6  2634               	addwf	ScanWithRange@MoveTime,f,c
  3109  0003C8  50F4               	movf	prodh,w,c
  3110  0003CA  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3111                           
  3112                           ;Movement.c: 199: stop(mL,mR);
  3113  0003CC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3114  0003D0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3115  0003D4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3116  0003D8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3117  0003DC  EC53  F008         	call	_stop	;wreg free
  3118  0003E0                     l2784:
  3119                           
  3120                           ;Movement.c: 200: return 2;
  3121  0003E0  0E02               	movlw	2
  3122  0003E2  0012               	return	
  3123  0003E4                     l2790:
  3124                           
  3125                           ;Movement.c: 202: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3126                           ;Movement.c: 203: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3127  0003E4  0100               	movlb	0	; () banked
  3128  0003E6  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3129  0003E8  0100               	movlb	0	; () banked
  3130  0003EA  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3131  0003EC  0100               	movlb	0	; () banked
  3132  0003EE  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3133  0003F0  0100               	movlb	0	; () banked
  3134  0003F2  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3135  0003F4  B0D8               	btfsc	status,0,c
  3136  0003F6  D056               	goto	l2812
  3137                           
  3138                           ; BSR set to: 0
  3139  0003F8  0100               	movlb	0	; () banked
  3140  0003FA  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3141  0003FC  0100               	movlb	0	; () banked
  3142  0003FE  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3143  000400  0100               	movlb	0	; () banked
  3144  000402  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3145  000404  0100               	movlb	0	; () banked
  3146  000406  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3147  000408  B0D8               	btfsc	status,0,c
  3148  00040A  D04C               	goto	l2812
  3149                           
  3150                           ; BSR set to: 0
  3151  00040C  EE20  F06F         	lfsr	2,ScanWithRange@SensorResultC+2
  3152  000410  CFDE F036          	movff	postinc2,??_ScanWithRange
  3153  000414  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3154  000418  1E36               	comf	??_ScanWithRange,f,c
  3155  00041A  1E37               	comf	??_ScanWithRange+1,f,c
  3156  00041C  4A36               	infsnz	??_ScanWithRange,f,c
  3157  00041E  2A37               	incf	??_ScanWithRange+1,f,c
  3158  000420  0100               	movlb	0	; () banked
  3159  000422  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3160  000424  2636               	addwf	??_ScanWithRange,f,c
  3161  000426  0100               	movlb	0	; () banked
  3162  000428  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3163  00042A  2237               	addwfc	??_ScanWithRange+1,f,c
  3164  00042C  0100               	movlb	0	; () banked
  3165  00042E  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3166  000430  5C36               	subwf	??_ScanWithRange,w,c
  3167  000432  0100               	movlb	0	; () banked
  3168  000434  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3169  000436  5837               	subwfb	??_ScanWithRange+1,w,c
  3170  000438  A0D8               	btfss	status,0,c
  3171  00043A  D016               	goto	l2798
  3172                           
  3173                           ; BSR set to: 0
  3174  00043C  C06D  F036         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3175  000440  C06E  F037         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3176  000444  1E36               	comf	??_ScanWithRange,f,c
  3177  000446  1E37               	comf	??_ScanWithRange+1,f,c
  3178  000448  4A36               	infsnz	??_ScanWithRange,f,c
  3179  00044A  2A37               	incf	??_ScanWithRange+1,f,c
  3180  00044C  0100               	movlb	0	; () banked
  3181  00044E  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3182  000450  2636               	addwf	??_ScanWithRange,f,c
  3183  000452  0100               	movlb	0	; () banked
  3184  000454  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3185  000456  2237               	addwfc	??_ScanWithRange+1,f,c
  3186  000458  0100               	movlb	0	; () banked
  3187  00045A  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3188  00045C  5C36               	subwf	??_ScanWithRange,w,c
  3189  00045E  0100               	movlb	0	; () banked
  3190  000460  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3191  000462  5837               	subwfb	??_ScanWithRange+1,w,c
  3192  000464  B0D8               	btfsc	status,0,c
  3193  000466  D01E               	goto	l2812
  3194  000468                     l2798:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;Movement.c: 205: turnLeft(mL,mR);
  3198  000468  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3199  00046C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3200  000470  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3201  000474  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3202  000478  ECB0  F009         	call	_turnLeft	;wreg free
  3203                           
  3204                           ;Movement.c: 206: delay_tenth_s(tenth_seconds);
  3205  00047C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3206  00047E  ECF1  F009         	call	_delay_tenth_s
  3207                           
  3208                           ;Movement.c: 207: MoveTime += tenth_seconds;
  3209  000482  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3210  000484  0D01               	mullw	1
  3211  000486  50F3               	movf	prodl,w,c
  3212  000488  2634               	addwf	ScanWithRange@MoveTime,f,c
  3213  00048A  50F4               	movf	prodh,w,c
  3214  00048C  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3215                           
  3216                           ;Movement.c: 208: stop(mL,mR);
  3217  00048E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3218  000492  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3219  000496  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3220  00049A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3221  00049E  EC53  F008         	call	_stop	;wreg free
  3222  0004A2  D79E               	goto	l2784
  3223  0004A4                     l2812:
  3224                           
  3225                           ;Movement.c: 211: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3226                           ;Movement.c: 212: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3227  0004A4  0100               	movlb	0	; () banked
  3228  0004A6  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3229  0004A8  0100               	movlb	0	; () banked
  3230  0004AA  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3231  0004AC  0100               	movlb	0	; () banked
  3232  0004AE  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3233  0004B0  0100               	movlb	0	; () banked
  3234  0004B2  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3235  0004B4  B0D8               	btfsc	status,0,c
  3236  0004B6  D043               	goto	l2828
  3237                           
  3238                           ; BSR set to: 0
  3239  0004B8  0100               	movlb	0	; () banked
  3240  0004BA  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3241  0004BC  0100               	movlb	0	; () banked
  3242  0004BE  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3243  0004C0  0100               	movlb	0	; () banked
  3244  0004C2  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3245  0004C4  0100               	movlb	0	; () banked
  3246  0004C6  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3247  0004C8  B0D8               	btfsc	status,0,c
  3248  0004CA  D039               	goto	l2828
  3249                           
  3250                           ; BSR set to: 0
  3251  0004CC  EE20  F073         	lfsr	2,ScanWithRange@SensorResultR+2
  3252  0004D0  CFDE F036          	movff	postinc2,??_ScanWithRange
  3253  0004D4  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3254  0004D8  1E36               	comf	??_ScanWithRange,f,c
  3255  0004DA  1E37               	comf	??_ScanWithRange+1,f,c
  3256  0004DC  4A36               	infsnz	??_ScanWithRange,f,c
  3257  0004DE  2A37               	incf	??_ScanWithRange+1,f,c
  3258  0004E0  0100               	movlb	0	; () banked
  3259  0004E2  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3260  0004E4  2636               	addwf	??_ScanWithRange,f,c
  3261  0004E6  0100               	movlb	0	; () banked
  3262  0004E8  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3263  0004EA  2237               	addwfc	??_ScanWithRange+1,f,c
  3264  0004EC  0100               	movlb	0	; () banked
  3265  0004EE  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3266  0004F0  5C36               	subwf	??_ScanWithRange,w,c
  3267  0004F2  0100               	movlb	0	; () banked
  3268  0004F4  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3269  0004F6  5837               	subwfb	??_ScanWithRange+1,w,c
  3270  0004F8  A0D8               	btfss	status,0,c
  3271  0004FA  D016               	goto	l2820
  3272                           
  3273                           ; BSR set to: 0
  3274  0004FC  C071  F036         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3275  000500  C072  F037         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3276  000504  1E36               	comf	??_ScanWithRange,f,c
  3277  000506  1E37               	comf	??_ScanWithRange+1,f,c
  3278  000508  4A36               	infsnz	??_ScanWithRange,f,c
  3279  00050A  2A37               	incf	??_ScanWithRange+1,f,c
  3280  00050C  0100               	movlb	0	; () banked
  3281  00050E  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3282  000510  2636               	addwf	??_ScanWithRange,f,c
  3283  000512  0100               	movlb	0	; () banked
  3284  000514  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3285  000516  2237               	addwfc	??_ScanWithRange+1,f,c
  3286  000518  0100               	movlb	0	; () banked
  3287  00051A  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3288  00051C  5C36               	subwf	??_ScanWithRange,w,c
  3289  00051E  0100               	movlb	0	; () banked
  3290  000520  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3291  000522  5837               	subwfb	??_ScanWithRange+1,w,c
  3292  000524  B0D8               	btfsc	status,0,c
  3293  000526  D00B               	goto	l2828
  3294  000528                     l2820:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;Movement.c: 214: stop(mL,mR);
  3298  000528  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3299  00052C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3300  000530  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3301  000534  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3302  000538  EC53  F008         	call	_stop	;wreg free
  3303  00053C  D751               	goto	l2784
  3304  00053E                     l2828:
  3305  00053E  0100               	movlb	0	; () banked
  3306  000540  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3307  000542  0100               	movlb	0	; () banked
  3308  000544  5D6B               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3309  000546  0100               	movlb	0	; () banked
  3310  000548  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3311  00054A  0100               	movlb	0	; () banked
  3312  00054C  596C               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3313  00054E  B0D8               	btfsc	status,0,c
  3314  000550  D021               	goto	l2844
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;Movement.c: 220: turnLeft(mL,mR);
  3318  000552  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3319  000556  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3320  00055A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3321  00055E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3322  000562  ECB0  F009         	call	_turnLeft	;wreg free
  3323                           
  3324                           ;Movement.c: 221: delay_tenth_s(3*tenth_seconds);
  3325  000566  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3326  000568  0D03               	mullw	3
  3327  00056A  50F3               	movf	prodl,w,c
  3328  00056C  ECF1  F009         	call	_delay_tenth_s
  3329                           
  3330                           ;Movement.c: 222: MoveTime += 3*tenth_seconds;
  3331  000570  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3332  000572  0D03               	mullw	3
  3333  000574  50F3               	movf	prodl,w,c
  3334  000576  2634               	addwf	ScanWithRange@MoveTime,f,c
  3335  000578  50F4               	movf	prodh,w,c
  3336  00057A  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3337                           
  3338                           ;Movement.c: 223: stop(mL,mR);
  3339  00057C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3340  000580  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3341  000584  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3342  000588  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3343  00058C  EC53  F008         	call	_stop	;wreg free
  3344  000590                     l2838:
  3345                           
  3346                           ;Movement.c: 224: return 0;
  3347  000590  0E00               	movlw	0
  3348  000592  0012               	return	
  3349  000594                     l2844:
  3350  000594  0100               	movlb	0	; () banked
  3351  000596  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3352  000598  0100               	movlb	0	; () banked
  3353  00059A  5D71               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3354  00059C  0100               	movlb	0	; () banked
  3355  00059E  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3356  0005A0  0100               	movlb	0	; () banked
  3357  0005A2  5972               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3358  0005A4  B0D8               	btfsc	status,0,c
  3359  0005A6  D01E               	goto	l2860
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;Movement.c: 227: turnRight(mL,mR);
  3363  0005A8  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  3364  0005AC  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3365  0005B0  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  3366  0005B4  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3367  0005B8  EC8B  F009         	call	_turnRight	;wreg free
  3368                           
  3369                           ;Movement.c: 228: delay_tenth_s(tenth_seconds);
  3370  0005BC  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3371  0005BE  ECF1  F009         	call	_delay_tenth_s
  3372                           
  3373                           ;Movement.c: 229: MoveTime -= tenth_seconds;
  3374  0005C2  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3375  0005C4  0D01               	mullw	1
  3376  0005C6  50F3               	movf	prodl,w,c
  3377  0005C8  5E34               	subwf	ScanWithRange@MoveTime,f,c
  3378  0005CA  50F4               	movf	prodh,w,c
  3379  0005CC  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  3380                           
  3381                           ;Movement.c: 230: stop(mL,mR);
  3382  0005CE  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3383  0005D2  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3384  0005D6  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3385  0005DA  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3386  0005DE  EC53  F008         	call	_stop	;wreg free
  3387  0005E2  D7D6               	goto	l2838
  3388  0005E4                     l2860:
  3389  0005E4  0100               	movlb	0	; () banked
  3390  0005E6  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3391  0005E8  0100               	movlb	0	; () banked
  3392  0005EA  5D69               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3393  0005EC  0100               	movlb	0	; () banked
  3394  0005EE  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3395  0005F0  0100               	movlb	0	; () banked
  3396  0005F2  596A               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3397  0005F4  B0D8               	btfsc	status,0,c
  3398  0005F6  D03F               	goto	l2876
  3399                           
  3400                           ; BSR set to: 0
  3401  0005F8  0100               	movlb	0	; () banked
  3402  0005FA  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3403  0005FC  0100               	movlb	0	; () banked
  3404  0005FE  5D6F               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3405  000600  0100               	movlb	0	; () banked
  3406  000602  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3407  000604  0100               	movlb	0	; () banked
  3408  000606  5970               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3409  000608  B0D8               	btfsc	status,0,c
  3410  00060A  D035               	goto	l2876
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;Movement.c: 236: turnLeft(mL,mR);
  3414  00060C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3415  000610  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3416  000614  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3417  000618  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3418  00061C  ECB0  F009         	call	_turnLeft	;wreg free
  3419                           
  3420                           ;Movement.c: 237: delay_tenth_s((3*tenth_seconds)/2);
  3421  000620  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3422  000622  0D03               	mullw	3
  3423  000624  CFF3 F015          	movff	prodl,___awdiv@dividend
  3424  000628  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3425  00062C  0E00               	movlw	0
  3426  00062E  6E18               	movwf	___awdiv@divisor+1,c
  3427  000630  0E02               	movlw	2
  3428  000632  6E17               	movwf	___awdiv@divisor,c
  3429  000634  EC9B  F008         	call	___awdiv	;wreg free
  3430  000638  5015               	movf	?___awdiv,w,c
  3431  00063A  ECF1  F009         	call	_delay_tenth_s
  3432                           
  3433                           ;Movement.c: 238: MoveTime += 3*tenth_seconds/2;
  3434  00063E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3435  000640  0D03               	mullw	3
  3436  000642  CFF3 F015          	movff	prodl,___awdiv@dividend
  3437  000646  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3438  00064A  0E00               	movlw	0
  3439  00064C  6E18               	movwf	___awdiv@divisor+1,c
  3440  00064E  0E02               	movlw	2
  3441  000650  6E17               	movwf	___awdiv@divisor,c
  3442  000652  EC9B  F008         	call	___awdiv	;wreg free
  3443  000656  5015               	movf	?___awdiv,w,c
  3444  000658  2634               	addwf	ScanWithRange@MoveTime,f,c
  3445  00065A  5016               	movf	?___awdiv+1,w,c
  3446  00065C  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3447                           
  3448                           ;Movement.c: 239: stop(mL,mR);
  3449  00065E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3450  000662  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3451  000666  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3452  00066A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3453  00066E  EC53  F008         	call	_stop	;wreg free
  3454  000672                     l2870:
  3455                           
  3456                           ;Movement.c: 240: return 1;
  3457  000672  0E01               	movlw	1
  3458  000674  0012               	return	
  3459  000676                     l2876:
  3460  000676  0100               	movlb	0	; () banked
  3461  000678  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3462  00067A  0100               	movlb	0	; () banked
  3463  00067C  5D73               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3464  00067E  0100               	movlb	0	; () banked
  3465  000680  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3466  000682  0100               	movlb	0	; () banked
  3467  000684  5974               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3468  000686  B0D8               	btfsc	status,0,c
  3469  000688  D038               	goto	l2892
  3470                           
  3471                           ; BSR set to: 0
  3472  00068A  0100               	movlb	0	; () banked
  3473  00068C  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3474  00068E  0100               	movlb	0	; () banked
  3475  000690  5D6D               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3476  000692  0100               	movlb	0	; () banked
  3477  000694  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3478  000696  0100               	movlb	0	; () banked
  3479  000698  596E               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3480  00069A  B0D8               	btfsc	status,0,c
  3481  00069C  D02E               	goto	l2892
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;Movement.c: 243: turnLeft(mL,mR);
  3485  00069E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3486  0006A2  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3487  0006A6  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3488  0006AA  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3489  0006AE  ECB0  F009         	call	_turnLeft	;wreg free
  3490                           
  3491                           ;Movement.c: 244: delay_tenth_s((tenth_seconds)/2);
  3492  0006B2  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3493  0006B6  6A16               	clrf	___awdiv@dividend+1,c
  3494  0006B8  0E00               	movlw	0
  3495  0006BA  6E18               	movwf	___awdiv@divisor+1,c
  3496  0006BC  0E02               	movlw	2
  3497  0006BE  6E17               	movwf	___awdiv@divisor,c
  3498  0006C0  EC9B  F008         	call	___awdiv	;wreg free
  3499  0006C4  5015               	movf	?___awdiv,w,c
  3500  0006C6  ECF1  F009         	call	_delay_tenth_s
  3501                           
  3502                           ;Movement.c: 245: MoveTime += tenth_seconds/2;
  3503  0006CA  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3504  0006CE  6A16               	clrf	___awdiv@dividend+1,c
  3505  0006D0  0E00               	movlw	0
  3506  0006D2  6E18               	movwf	___awdiv@divisor+1,c
  3507  0006D4  0E02               	movlw	2
  3508  0006D6  6E17               	movwf	___awdiv@divisor,c
  3509  0006D8  EC9B  F008         	call	___awdiv	;wreg free
  3510  0006DC  5015               	movf	?___awdiv,w,c
  3511  0006DE  2634               	addwf	ScanWithRange@MoveTime,f,c
  3512  0006E0  5016               	movf	?___awdiv+1,w,c
  3513  0006E2  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3514                           
  3515                           ;Movement.c: 246: stop(mL,mR);
  3516  0006E4  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3517  0006E8  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3518  0006EC  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3519  0006F0  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3520  0006F4  EC53  F008         	call	_stop	;wreg free
  3521  0006F8  D7BC               	goto	l2870
  3522  0006FA                     l2892:
  3523                           
  3524                           ;Movement.c: 248: }
  3525                           ;Movement.c: 249: }
  3526                           ;Movement.c: 250: return 0;
  3527  0006FA  0E00               	movlw	0
  3528  0006FC  0012               	return	
  3529  0006FE                     __end_of_ScanWithRange:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           prodh	equ	0xFF4
  3533                           prodl	equ	0xFF3
  3534                           intcon	equ	0xFF2
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           indf1	equ	0xFE7
  3538                           fsr1h	equ	0xFE2
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _ScanIR *****************
  3548 ;; Defined at:
  3549 ;;		line 32 in file "Movement.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  3552 ;;		 -> main@mL(9), 
  3553 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  3554 ;;		 -> main@mR(9), 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  3557 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  3558 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  3559 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      unsigned char 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3569 ;;      Params:         4       0       0       0
  3570 ;;      Locals:        10       0       0       0
  3571 ;;      Temps:          2       0       0       0
  3572 ;;      Totals:        16       0       0       0
  3573 ;;Total ram usage:       16 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    5
  3576 ;; This function calls:
  3577 ;;		_delay_tenth_s
  3578 ;;		_grabLeftIR
  3579 ;;		_grabRightIR
  3580 ;;		_stop
  3581 ;;		_turnLeft
  3582 ;;		_turnRight
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text13
  3589  000B2C                     __ptext13:
  3590                           	opt stack 0
  3591  000B2C                     _ScanIR:
  3592                           	opt stack 25
  3593                           
  3594                           ;Movement.c: 34: unsigned int SensorResult[2]={0,0};
  3595                           
  3596                           ;incstack = 0
  3597  000B2C  C041  F03B         	movff	ScanIR@F3710,ScanIR@SensorResult
  3598  000B30  C042  F03C         	movff	ScanIR@F3710+1,ScanIR@SensorResult+1
  3599  000B34  C043  F03D         	movff	ScanIR@F3710+2,ScanIR@SensorResult+2
  3600  000B38  C044  F03E         	movff	ScanIR@F3710+3,ScanIR@SensorResult+3
  3601                           
  3602                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  3603  000B3C  0E00               	movlw	0
  3604  000B3E  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  3605  000B40  0EC8               	movlw	200
  3606  000B42  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  3607                           
  3608                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  3609  000B44  0E05               	movlw	5
  3610  000B46  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  3611  000B48  0EDC               	movlw	220
  3612  000B4A  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  3613                           
  3614                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  3615  000B4C  0E01               	movlw	1
  3616  000B4E  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  3617  000B50  0EF4               	movlw	244
  3618  000B52  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  3619                           
  3620                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  3621  000B54  EC18  F009         	call	_grabLeftIR	;wreg free
  3622  000B58  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  3623  000B5C  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3624                           
  3625                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  3626  000B60  ECDD  F008         	call	_grabRightIR	;wreg free
  3627  000B64  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3628  000B68  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3629                           
  3630                           ;Movement.c: 45: stop(mL,mR);
  3631  000B6C  C02F  F026         	movff	ScanIR@mL,stop@mL
  3632  000B70  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3633  000B74  C031  F028         	movff	ScanIR@mR,stop@mR
  3634  000B78  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3635  000B7C  EC53  F008         	call	_stop	;wreg free
  3636                           
  3637                           ;Movement.c: 49: CAP1BUFH=0;
  3638  000B80  0E00               	movlw	0
  3639  000B82  6E69               	movwf	3945,c	;volatile
  3640                           
  3641                           ;Movement.c: 50: CAP1BUFL=0;
  3642  000B84  0E00               	movlw	0
  3643  000B86  6E68               	movwf	3944,c	;volatile
  3644                           
  3645                           ;Movement.c: 54: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  3646  000B88  503B               	movf	ScanIR@SensorResult,w,c
  3647  000B8A  243D               	addwf	ScanIR@SensorResult+2,w,c
  3648  000B8C  6E33               	movwf	??_ScanIR& (0+255),c
  3649  000B8E  503C               	movf	ScanIR@SensorResult+1,w,c
  3650  000B90  203E               	addwfc	ScanIR@SensorResult+3,w,c
  3651  000B92  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  3652  000B94  5033               	movf	??_ScanIR,w,c
  3653  000B96  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  3654  000B98  5034               	movf	??_ScanIR+1,w,c
  3655  000B9A  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  3656  000B9C  B0D8               	btfsc	status,0,c
  3657  000B9E  D085               	goto	l2952
  3658                           
  3659                           ;Movement.c: 57: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  3660                           ;Movement.c: 58: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3661                           ;Movement.c: 59: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3662  000BA0  503B               	movf	ScanIR@SensorResult,w,c
  3663  000BA2  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3664  000BA4  503C               	movf	ScanIR@SensorResult+1,w,c
  3665  000BA6  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3666  000BA8  B0D8               	btfsc	status,0,c
  3667  000BAA  D02E               	goto	l2926
  3668  000BAC  503D               	movf	ScanIR@SensorResult+2,w,c
  3669  000BAE  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3670  000BB0  503E               	movf	ScanIR@SensorResult+3,w,c
  3671  000BB2  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3672  000BB4  B0D8               	btfsc	status,0,c
  3673  000BB6  D028               	goto	l2926
  3674  000BB8  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  3675  000BBC  CFDE F033          	movff	postinc2,??_ScanIR
  3676  000BC0  CFDD F034          	movff	postdec2,??_ScanIR+1
  3677  000BC4  1E33               	comf	??_ScanIR,f,c
  3678  000BC6  1E34               	comf	??_ScanIR+1,f,c
  3679  000BC8  4A33               	infsnz	??_ScanIR,f,c
  3680  000BCA  2A34               	incf	??_ScanIR+1,f,c
  3681  000BCC  503B               	movf	ScanIR@SensorResult,w,c
  3682  000BCE  2633               	addwf	??_ScanIR,f,c
  3683  000BD0  503C               	movf	ScanIR@SensorResult+1,w,c
  3684  000BD2  2234               	addwfc	??_ScanIR+1,f,c
  3685  000BD4  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3686  000BD6  5C33               	subwf	??_ScanIR,w,c
  3687  000BD8  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3688  000BDA  5834               	subwfb	??_ScanIR+1,w,c
  3689  000BDC  A0D8               	btfss	status,0,c
  3690  000BDE  D012               	goto	l2920
  3691  000BE0  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  3692  000BE4  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3693  000BE8  1E33               	comf	??_ScanIR,f,c
  3694  000BEA  1E34               	comf	??_ScanIR+1,f,c
  3695  000BEC  4A33               	infsnz	??_ScanIR,f,c
  3696  000BEE  2A34               	incf	??_ScanIR+1,f,c
  3697  000BF0  503D               	movf	ScanIR@SensorResult+2,w,c
  3698  000BF2  2633               	addwf	??_ScanIR,f,c
  3699  000BF4  503E               	movf	ScanIR@SensorResult+3,w,c
  3700  000BF6  2234               	addwfc	??_ScanIR+1,f,c
  3701  000BF8  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3702  000BFA  5C33               	subwf	??_ScanIR,w,c
  3703  000BFC  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3704  000BFE  5834               	subwfb	??_ScanIR+1,w,c
  3705  000C00  B0D8               	btfsc	status,0,c
  3706  000C02  D002               	goto	l2926
  3707  000C04                     l2920:
  3708                           
  3709                           ;Movement.c: 60: return 2;
  3710  000C04  0E02               	movlw	2
  3711  000C06  0012               	return	
  3712  000C08                     l2926:
  3713  000C08  503B               	movf	ScanIR@SensorResult,w,c
  3714  000C0A  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3715  000C0C  503C               	movf	ScanIR@SensorResult+1,w,c
  3716  000C0E  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3717  000C10  A0D8               	btfss	status,0,c
  3718  000C12  D023               	goto	l2940
  3719                           
  3720                           ;Movement.c: 63: stop(mL,mR);
  3721  000C14  C02F  F026         	movff	ScanIR@mL,stop@mL
  3722  000C18  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3723  000C1C  C031  F028         	movff	ScanIR@mR,stop@mR
  3724  000C20  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3725  000C24  EC53  F008         	call	_stop	;wreg free
  3726                           
  3727                           ;Movement.c: 64: turnLeft(mL,mR);
  3728  000C28  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3729  000C2C  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3730  000C30  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3731  000C34  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3732  000C38  ECB0  F009         	call	_turnLeft	;wreg free
  3733                           
  3734                           ;Movement.c: 65: delay_tenth_s(3);
  3735  000C3C  0E03               	movlw	3
  3736  000C3E  ECF1  F009         	call	_delay_tenth_s
  3737                           
  3738                           ;Movement.c: 66: stop(mL,mR);
  3739  000C42  C02F  F026         	movff	ScanIR@mL,stop@mL
  3740  000C46  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3741  000C4A  C031  F028         	movff	ScanIR@mR,stop@mR
  3742  000C4E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3743  000C52  EC53  F008         	call	_stop	;wreg free
  3744  000C56                     l2934:
  3745                           
  3746                           ;Movement.c: 67: return 1;
  3747  000C56  0E01               	movlw	1
  3748  000C58  0012               	return	
  3749  000C5A                     l2940:
  3750  000C5A  503B               	movf	ScanIR@SensorResult,w,c
  3751  000C5C  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3752  000C5E  503C               	movf	ScanIR@SensorResult+1,w,c
  3753  000C60  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3754  000C62  B0D8               	btfsc	status,0,c
  3755  000C64  D069               	goto	l2980
  3756                           
  3757                           ;Movement.c: 70: stop(mL,mR);
  3758  000C66  C02F  F026         	movff	ScanIR@mL,stop@mL
  3759  000C6A  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3760  000C6E  C031  F028         	movff	ScanIR@mR,stop@mR
  3761  000C72  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3762  000C76  EC53  F008         	call	_stop	;wreg free
  3763                           
  3764                           ;Movement.c: 71: turnRight(mL,mR);
  3765  000C7A  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3766  000C7E  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3767  000C82  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3768  000C86  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3769  000C8A  EC8B  F009         	call	_turnRight	;wreg free
  3770                           
  3771                           ;Movement.c: 72: delay_tenth_s(3);
  3772  000C8E  0E03               	movlw	3
  3773  000C90  ECF1  F009         	call	_delay_tenth_s
  3774                           
  3775                           ;Movement.c: 73: stop(mL,mR);
  3776  000C94  C02F  F026         	movff	ScanIR@mL,stop@mL
  3777  000C98  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3778  000C9C  C031  F028         	movff	ScanIR@mR,stop@mR
  3779  000CA0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3780  000CA4  EC53  F008         	call	_stop	;wreg free
  3781  000CA8  D7D6               	goto	l2934
  3782  000CAA                     l2952:
  3783                           
  3784                           ;Movement.c: 78: stop(mL,mR);
  3785  000CAA  C02F  F026         	movff	ScanIR@mL,stop@mL
  3786  000CAE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3787  000CB2  C031  F028         	movff	ScanIR@mR,stop@mR
  3788  000CB6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3789  000CBA  EC53  F008         	call	_stop	;wreg free
  3790                           
  3791                           ;Movement.c: 81: if (SensorResult[0]<=SensorResult[1]) {
  3792  000CBE  503B               	movf	ScanIR@SensorResult,w,c
  3793  000CC0  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3794  000CC2  503C               	movf	ScanIR@SensorResult+1,w,c
  3795  000CC4  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3796  000CC6  A0D8               	btfss	status,0,c
  3797  000CC8  D019               	goto	l2968
  3798                           
  3799                           ;Movement.c: 82: turnLeft(mL,mR);
  3800  000CCA  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3801  000CCE  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3802  000CD2  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3803  000CD6  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3804  000CDA  ECB0  F009         	call	_turnLeft	;wreg free
  3805                           
  3806                           ;Movement.c: 83: delay_tenth_s(5);
  3807  000CDE  0E05               	movlw	5
  3808  000CE0  ECF1  F009         	call	_delay_tenth_s
  3809                           
  3810                           ;Movement.c: 84: stop(mL,mR);
  3811  000CE4  C02F  F026         	movff	ScanIR@mL,stop@mL
  3812  000CE8  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3813  000CEC  C031  F028         	movff	ScanIR@mR,stop@mR
  3814  000CF0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3815  000CF4  EC53  F008         	call	_stop	;wreg free
  3816  000CF8                     l2962:
  3817                           
  3818                           ;Movement.c: 85: return 0;
  3819  000CF8  0E00               	movlw	0
  3820  000CFA  0012               	return	
  3821  000CFC                     l2968:
  3822  000CFC  503B               	movf	ScanIR@SensorResult,w,c
  3823  000CFE  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3824  000D00  503C               	movf	ScanIR@SensorResult+1,w,c
  3825  000D02  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3826  000D04  B0D8               	btfsc	status,0,c
  3827  000D06  D018               	goto	l2980
  3828                           
  3829                           ;Movement.c: 88: turnRight(mL,mR);
  3830  000D08  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3831  000D0C  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3832  000D10  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3833  000D14  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3834  000D18  EC8B  F009         	call	_turnRight	;wreg free
  3835                           
  3836                           ;Movement.c: 89: delay_tenth_s(5);
  3837  000D1C  0E05               	movlw	5
  3838  000D1E  ECF1  F009         	call	_delay_tenth_s
  3839                           
  3840                           ;Movement.c: 90: stop(mL,mR);
  3841  000D22  C02F  F026         	movff	ScanIR@mL,stop@mL
  3842  000D26  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3843  000D2A  C031  F028         	movff	ScanIR@mR,stop@mR
  3844  000D2E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3845  000D32  EC53  F008         	call	_stop	;wreg free
  3846  000D36  D7E0               	goto	l2962
  3847  000D38                     l2980:
  3848                           
  3849                           ;Movement.c: 92: }
  3850                           ;Movement.c: 93: }
  3851                           ;Movement.c: 94: return 0;
  3852  000D38  0E00               	movlw	0
  3853  000D3A  0012               	return	
  3854  000D3C                     __end_of_ScanIR:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           indf1	equ	0xFE7
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           indf2	equ	0xFDF
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _turnRight *****************
  3873 ;; Defined at:
  3874 ;;		line 98 in file "dc_motor.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3877 ;;		 -> main@mL(9), 
  3878 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3879 ;;		 -> main@mR(9), 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;		None               void
  3884 ;; Registers used:
  3885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3891 ;;      Params:         4       0       0       0
  3892 ;;      Locals:         0       0       0       0
  3893 ;;      Temps:          0       0       0       0
  3894 ;;      Totals:         4       0       0       0
  3895 ;;Total ram usage:        4 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    4
  3898 ;; This function calls:
  3899 ;;		_fullSpeedAhead
  3900 ;;		_stop
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;;		_ScanIR
  3904 ;;		_ScanWithRange
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text14
  3909  001316                     __ptext14:
  3910                           	opt stack 0
  3911  001316                     _turnRight:
  3912                           	opt stack 26
  3913                           
  3914                           ;dc_motor.c: 100: stop(mL, mR);
  3915                           
  3916                           ;incstack = 0
  3917  001316  C02B  F026         	movff	turnRight@mL,stop@mL
  3918  00131A  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  3919  00131E  C02D  F028         	movff	turnRight@mR,stop@mR
  3920  001322  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  3921  001326  EC53  F008         	call	_stop	;wreg free
  3922                           
  3923                           ;dc_motor.c: 102: mL->direction=1;
  3924  00132A  EE20 F001          	lfsr	2,1
  3925  00132E  502B               	movf	turnRight@mL,w,c
  3926  001330  26D9               	addwf	fsr2l,f,c
  3927  001332  502C               	movf	turnRight@mL+1,w,c
  3928  001334  22DA               	addwfc	fsr2h,f,c
  3929  001336  0E01               	movlw	1
  3930  001338  6EDF               	movwf	indf2,c
  3931                           
  3932                           ;dc_motor.c: 103: mR->direction=0;
  3933  00133A  EE20 F001          	lfsr	2,1
  3934  00133E  502D               	movf	turnRight@mR,w,c
  3935  001340  26D9               	addwf	fsr2l,f,c
  3936  001342  502E               	movf	turnRight@mR+1,w,c
  3937  001344  22DA               	addwfc	fsr2h,f,c
  3938  001346  0E00               	movlw	0
  3939  001348  6EDF               	movwf	indf2,c
  3940                           
  3941                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3942  00134A  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  3943  00134E  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3944  001352  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  3945  001356  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3946  00135A  EC53  F009         	call	_fullSpeedAhead	;wreg free
  3947  00135E  0012               	return		;funcret
  3948  001360                     __end_of_turnRight:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           intcon	equ	0xFF2
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf1	equ	0xFE7
  3957                           fsr1h	equ	0xFE2
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _turnLeft *****************
  3967 ;; Defined at:
  3968 ;;		line 87 in file "dc_motor.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3971 ;;		 -> main@mL(9), 
  3972 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3973 ;;		 -> main@mR(9), 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3985 ;;      Params:         4       0       0       0
  3986 ;;      Locals:         0       0       0       0
  3987 ;;      Temps:          0       0       0       0
  3988 ;;      Totals:         4       0       0       0
  3989 ;;Total ram usage:        4 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    4
  3992 ;; This function calls:
  3993 ;;		_fullSpeedAhead
  3994 ;;		_stop
  3995 ;; This function is called by:
  3996 ;;		_main
  3997 ;;		_ScanIR
  3998 ;;		_ScanWithRange
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text15
  4003  001360                     __ptext15:
  4004                           	opt stack 0
  4005  001360                     _turnLeft:
  4006                           	opt stack 26
  4007                           
  4008                           ;dc_motor.c: 89: stop(mL, mR);
  4009                           
  4010                           ;incstack = 0
  4011  001360  C02B  F026         	movff	turnLeft@mL,stop@mL
  4012  001364  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  4013  001368  C02D  F028         	movff	turnLeft@mR,stop@mR
  4014  00136C  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  4015  001370  EC53  F008         	call	_stop	;wreg free
  4016                           
  4017                           ;dc_motor.c: 91: mL->direction=0;
  4018  001374  EE20 F001          	lfsr	2,1
  4019  001378  502B               	movf	turnLeft@mL,w,c
  4020  00137A  26D9               	addwf	fsr2l,f,c
  4021  00137C  502C               	movf	turnLeft@mL+1,w,c
  4022  00137E  22DA               	addwfc	fsr2h,f,c
  4023  001380  0E00               	movlw	0
  4024  001382  6EDF               	movwf	indf2,c
  4025                           
  4026                           ;dc_motor.c: 92: mR->direction=1;
  4027  001384  EE20 F001          	lfsr	2,1
  4028  001388  502D               	movf	turnLeft@mR,w,c
  4029  00138A  26D9               	addwf	fsr2l,f,c
  4030  00138C  502E               	movf	turnLeft@mR+1,w,c
  4031  00138E  22DA               	addwfc	fsr2h,f,c
  4032  001390  0E01               	movlw	1
  4033  001392  6EDF               	movwf	indf2,c
  4034                           
  4035                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4036  001394  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  4037  001398  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4038  00139C  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  4039  0013A0  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4040  0013A4  EC53  F009         	call	_fullSpeedAhead	;wreg free
  4041  0013A8  0012               	return		;funcret
  4042  0013AA                     __end_of_turnLeft:
  4043                           	opt stack 0
  4044                           tblptru	equ	0xFF8
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf1	equ	0xFE7
  4051                           fsr1h	equ	0xFE2
  4052                           fsr1l	equ	0xFE1
  4053                           indf2	equ	0xFDF
  4054                           postinc2	equ	0xFDE
  4055                           postdec2	equ	0xFDD
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function _stop *****************
  4061 ;; Defined at:
  4062 ;;		line 67 in file "dc_motor.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  4065 ;;		 -> main@mL(9), 
  4066 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  4067 ;;		 -> main@mR(9), 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;		None               void
  4072 ;; Registers used:
  4073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4079 ;;      Params:         4       0       0       0
  4080 ;;      Locals:         0       0       0       0
  4081 ;;      Temps:          0       0       0       0
  4082 ;;      Totals:         4       0       0       0
  4083 ;;Total ram usage:        4 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    3
  4086 ;; This function calls:
  4087 ;;		_setMotorPWM
  4088 ;; This function is called by:
  4089 ;;		_main
  4090 ;;		_turnLeft
  4091 ;;		_turnRight
  4092 ;;		_ScanIR
  4093 ;;		_ScanWithRange
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text16
  4098  0010A6                     __ptext16:
  4099                           	opt stack 0
  4100  0010A6                     _stop:
  4101                           	opt stack 26
  4102                           
  4103                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4104                           
  4105                           ;incstack = 0
  4106  0010A6  D028               	goto	l2632
  4107  0010A8                     l2618:
  4108                           
  4109                           ;dc_motor.c: 71: if(mL->power>0){
  4110  0010A8  C026  FFD9         	movff	stop@mL,fsr2l
  4111  0010AC  C027  FFDA         	movff	stop@mL+1,fsr2h
  4112  0010B0  50DF               	movf	indf2,w,c
  4113  0010B2  B4D8               	btfsc	status,2,c
  4114  0010B4  D005               	goto	l2622
  4115                           
  4116                           ;dc_motor.c: 72: mL->power--;
  4117  0010B6  C026  FFD9         	movff	stop@mL,fsr2l
  4118  0010BA  C027  FFDA         	movff	stop@mL+1,fsr2h
  4119  0010BE  06DF               	decf	indf2,f,c
  4120  0010C0                     l2622:
  4121                           
  4122                           ;dc_motor.c: 73: }
  4123                           ;dc_motor.c: 74: if(mR->power>0){
  4124  0010C0  C028  FFD9         	movff	stop@mR,fsr2l
  4125  0010C4  C029  FFDA         	movff	stop@mR+1,fsr2h
  4126  0010C8  50DF               	movf	indf2,w,c
  4127  0010CA  B4D8               	btfsc	status,2,c
  4128  0010CC  D005               	goto	l2626
  4129                           
  4130                           ;dc_motor.c: 75: mR->power--;
  4131  0010CE  C028  FFD9         	movff	stop@mR,fsr2l
  4132  0010D2  C029  FFDA         	movff	stop@mR+1,fsr2h
  4133  0010D6  06DF               	decf	indf2,f,c
  4134  0010D8                     l2626:
  4135                           
  4136                           ;dc_motor.c: 76: }
  4137                           ;dc_motor.c: 77: setMotorPWM(mL);
  4138  0010D8  C026  F01D         	movff	stop@mL,setMotorPWM@m
  4139  0010DC  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  4140  0010E0  EC9E  F006         	call	_setMotorPWM	;wreg free
  4141                           
  4142                           ;dc_motor.c: 78: setMotorPWM(mR);
  4143  0010E4  C028  F01D         	movff	stop@mR,setMotorPWM@m
  4144  0010E8  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  4145  0010EC  EC9E  F006         	call	_setMotorPWM	;wreg free
  4146                           
  4147                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4148  0010F0  0E21               	movlw	33
  4149  0010F2                     u2907:
  4150  0010F2  2EE8               	decfsz	wreg,f,c
  4151  0010F4  D7FE               	goto	u2907
  4152  0010F6  F000               	nop	
  4153  0010F8                     l2632:
  4154  0010F8  C026  FFD9         	movff	stop@mL,fsr2l
  4155  0010FC  C027  FFDA         	movff	stop@mL+1,fsr2h
  4156  001100  50DF               	movf	indf2,w,c
  4157  001102  A4D8               	btfss	status,2,c
  4158  001104  D7D1               	goto	l2618
  4159  001106  C028  FFD9         	movff	stop@mR,fsr2l
  4160  00110A  C029  FFDA         	movff	stop@mR+1,fsr2h
  4161  00110E  50DF               	movf	indf2,w,c
  4162  001110  A4D8               	btfss	status,2,c
  4163  001112  D7CA               	goto	l2618
  4164                           
  4165                           ;dc_motor.c: 80: }
  4166                           ;dc_motor.c: 81: mL->direction=1;
  4167  001114  EE20 F001          	lfsr	2,1
  4168  001118  5026               	movf	stop@mL,w,c
  4169  00111A  26D9               	addwf	fsr2l,f,c
  4170  00111C  5027               	movf	stop@mL+1,w,c
  4171  00111E  22DA               	addwfc	fsr2h,f,c
  4172  001120  0E01               	movlw	1
  4173  001122  6EDF               	movwf	indf2,c
  4174                           
  4175                           ;dc_motor.c: 82: mR->direction=1;
  4176  001124  EE20 F001          	lfsr	2,1
  4177  001128  5028               	movf	stop@mR,w,c
  4178  00112A  26D9               	addwf	fsr2l,f,c
  4179  00112C  5029               	movf	stop@mR+1,w,c
  4180  00112E  22DA               	addwfc	fsr2h,f,c
  4181  001130  0E01               	movlw	1
  4182  001132  6EDF               	movwf	indf2,c
  4183  001134  0012               	return		;funcret
  4184  001136                     __end_of_stop:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           prodh	equ	0xFF4
  4188                           prodl	equ	0xFF3
  4189                           intcon	equ	0xFF2
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           indf1	equ	0xFE7
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _fullSpeedAhead *****************
  4203 ;; Defined at:
  4204 ;;		line 108 in file "dc_motor.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  4207 ;;		 -> main@mL(9), 
  4208 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  4209 ;;		 -> main@mR(9), 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4221 ;;      Params:         4       0       0       0
  4222 ;;      Locals:         0       0       0       0
  4223 ;;      Temps:          1       0       0       0
  4224 ;;      Totals:         5       0       0       0
  4225 ;;Total ram usage:        5 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    3
  4228 ;; This function calls:
  4229 ;;		_setMotorPWM
  4230 ;; This function is called by:
  4231 ;;		_main
  4232 ;;		_turnLeft
  4233 ;;		_turnRight
  4234 ;;		_fullSpeedBack
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text17
  4239  0012A6                     __ptext17:
  4240                           	opt stack 0
  4241  0012A6                     _fullSpeedAhead:
  4242                           	opt stack 26
  4243                           
  4244                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4245                           
  4246                           ;incstack = 0
  4247  0012A6  D028               	goto	l169
  4248  0012A8                     l2600:
  4249                           
  4250                           ;dc_motor.c: 112: if(mL->power<100){
  4251  0012A8  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4252  0012AC  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4253  0012B0  0E64               	movlw	100
  4254  0012B2  60DF               	cpfslt	indf2,c
  4255  0012B4  D005               	goto	l2604
  4256                           
  4257                           ;dc_motor.c: 113: mL->power++;
  4258  0012B6  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4259  0012BA  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4260  0012BE  2ADF               	incf	indf2,f,c
  4261  0012C0                     l2604:
  4262                           
  4263                           ;dc_motor.c: 114: }
  4264                           ;dc_motor.c: 115: if(mR->power<100){
  4265  0012C0  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4266  0012C4  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4267  0012C8  0E64               	movlw	100
  4268  0012CA  60DF               	cpfslt	indf2,c
  4269  0012CC  D005               	goto	l2608
  4270                           
  4271                           ;dc_motor.c: 116: mR->power++;
  4272  0012CE  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4273  0012D2  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4274  0012D6  2ADF               	incf	indf2,f,c
  4275  0012D8                     l2608:
  4276                           
  4277                           ;dc_motor.c: 117: }
  4278                           ;dc_motor.c: 118: setMotorPWM(mL);
  4279  0012D8  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4280  0012DC  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4281  0012E0  EC9E  F006         	call	_setMotorPWM	;wreg free
  4282                           
  4283                           ;dc_motor.c: 119: setMotorPWM(mR);
  4284  0012E4  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4285  0012E8  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4286  0012EC  EC9E  F006         	call	_setMotorPWM	;wreg free
  4287                           
  4288                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4289  0012F0  0E21               	movlw	33
  4290  0012F2                     u2917:
  4291  0012F2  2EE8               	decfsz	wreg,f,c
  4292  0012F4  D7FE               	goto	u2917
  4293  0012F6  F000               	nop	
  4294  0012F8                     l169:
  4295  0012F8  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4296  0012FC  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4297  001300  0E63               	movlw	99
  4298  001302  64DF               	cpfsgt	indf2,c
  4299  001304  D7D1               	goto	l2600
  4300  001306  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4301  00130A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4302  00130E  0E63               	movlw	99
  4303  001310  64DF               	cpfsgt	indf2,c
  4304  001312  D7CA               	goto	l2600
  4305  001314  0012               	return	
  4306  001316                     __end_of_fullSpeedAhead:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           intcon	equ	0xFF2
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           indf1	equ	0xFE7
  4315                           fsr1h	equ	0xFE2
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function _setMotorPWM *****************
  4325 ;; Defined at:
  4326 ;;		line 26 in file "dc_motor.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  m               2   28[COMRAM] PTR struct DC_motor
  4329 ;;		 -> main@mR(9), main@mL(9), 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  PWMduty         2   35[COMRAM] int 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;		None               void
  4334 ;; Registers used:
  4335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4341 ;;      Params:         2       0       0       0
  4342 ;;      Locals:         2       0       0       0
  4343 ;;      Temps:          5       0       0       0
  4344 ;;      Totals:         9       0       0       0
  4345 ;;Total ram usage:        9 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    2
  4348 ;; This function calls:
  4349 ;;		___awdiv
  4350 ;;		___wmul
  4351 ;; This function is called by:
  4352 ;;		_stop
  4353 ;;		_fullSpeedAhead
  4354 ;;		_setMotorFullSpeed
  4355 ;;		_stopMotor
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text18
  4360  000D3C                     __ptext18:
  4361                           	opt stack 0
  4362  000D3C                     _setMotorPWM:
  4363                           	opt stack 26
  4364                           
  4365                           ;dc_motor.c: 28: int PWMduty;
  4366                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4367                           
  4368                           ;incstack = 0
  4369  000D3C  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  4370  000D40  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4371  000D44  50DF               	movf	indf2,w,c
  4372  000D46  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4373  000D48  501F               	movf	??_setMotorPWM,w,c
  4374  000D4A  6E0F               	movwf	___wmul@multiplier,c
  4375  000D4C  6A10               	clrf	___wmul@multiplier+1,c
  4376  000D4E  EE20 F007          	lfsr	2,7
  4377  000D52  501D               	movf	setMotorPWM@m,w,c
  4378  000D54  26D9               	addwf	fsr2l,f,c
  4379  000D56  501E               	movf	setMotorPWM@m+1,w,c
  4380  000D58  22DA               	addwfc	fsr2h,f,c
  4381  000D5A  CFDE F011          	movff	postinc2,___wmul@multiplicand
  4382  000D5E  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  4383  000D62  EC84  F00A         	call	___wmul	;wreg free
  4384  000D66  C00F  F015         	movff	?___wmul,___awdiv@dividend
  4385  000D6A  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  4386  000D6E  0E00               	movlw	0
  4387  000D70  6E18               	movwf	___awdiv@divisor+1,c
  4388  000D72  0E64               	movlw	100
  4389  000D74  6E17               	movwf	___awdiv@divisor,c
  4390  000D76  EC9B  F008         	call	___awdiv	;wreg free
  4391  000D7A  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  4392  000D7E  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4393                           
  4394                           ;dc_motor.c: 32: if (m->direction)
  4395  000D82  EE20 F001          	lfsr	2,1
  4396  000D86  501D               	movf	setMotorPWM@m,w,c
  4397  000D88  26D9               	addwf	fsr2l,f,c
  4398  000D8A  501E               	movf	setMotorPWM@m+1,w,c
  4399  000D8C  22DA               	addwfc	fsr2h,f,c
  4400  000D8E  50DF               	movf	indf2,w,c
  4401  000D90  B4D8               	btfsc	status,2,c
  4402  000D92  D02C               	goto	l2596
  4403                           
  4404                           ;dc_motor.c: 33: {
  4405                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4406  000D94  EE20 F006          	lfsr	2,6
  4407  000D98  501D               	movf	setMotorPWM@m,w,c
  4408  000D9A  26D9               	addwf	fsr2l,f,c
  4409  000D9C  501E               	movf	setMotorPWM@m+1,w,c
  4410  000D9E  22DA               	addwfc	fsr2h,f,c
  4411  000DA0  50DF               	movf	indf2,w,c
  4412  000DA2  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4413  000DA4  0E01               	movlw	1
  4414  000DA6  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4415  000DA8  2A1F               	incf	??_setMotorPWM,f,c
  4416  000DAA  D002               	goto	u2054
  4417  000DAC                     u2055:
  4418  000DAC  90D8               	bcf	status,0,c
  4419  000DAE  3620               	rlcf	??_setMotorPWM+1,f,c
  4420  000DB0                     u2054:
  4421  000DB0  2E1F               	decfsz	??_setMotorPWM,f,c
  4422  000DB2  D7FC               	goto	u2055
  4423  000DB4  5020               	movf	??_setMotorPWM+1,w,c
  4424  000DB6  108A               	iorwf	3978,w,c	;volatile
  4425  000DB8  6E8A               	movwf	3978,c	;volatile
  4426                           
  4427                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4428  000DBA  EE20 F007          	lfsr	2,7
  4429  000DBE  501D               	movf	setMotorPWM@m,w,c
  4430  000DC0  26D9               	addwf	fsr2l,f,c
  4431  000DC2  501E               	movf	setMotorPWM@m+1,w,c
  4432  000DC4  22DA               	addwfc	fsr2h,f,c
  4433  000DC6  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4434  000DCA  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4435  000DCE  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4436  000DD2  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4437  000DD6  1E21               	comf	??_setMotorPWM+2,f,c
  4438  000DD8  1E22               	comf	??_setMotorPWM+3,f,c
  4439  000DDA  4A21               	infsnz	??_setMotorPWM+2,f,c
  4440  000DDC  2A22               	incf	??_setMotorPWM+3,f,c
  4441  000DDE  501F               	movf	??_setMotorPWM,w,c
  4442  000DE0  2421               	addwf	??_setMotorPWM+2,w,c
  4443  000DE2  6E24               	movwf	setMotorPWM@PWMduty,c
  4444  000DE4  5020               	movf	??_setMotorPWM+1,w,c
  4445  000DE6  2022               	addwfc	??_setMotorPWM+3,w,c
  4446  000DE8  6E25               	movwf	setMotorPWM@PWMduty+1,c
  4447                           
  4448                           ;dc_motor.c: 36: }
  4449  000DEA  D014               	goto	l139
  4450  000DEC                     l2596:
  4451                           
  4452                           ;dc_motor.c: 37: else
  4453                           ;dc_motor.c: 38: {
  4454                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4455  000DEC  EE20 F006          	lfsr	2,6
  4456  000DF0  501D               	movf	setMotorPWM@m,w,c
  4457  000DF2  26D9               	addwf	fsr2l,f,c
  4458  000DF4  501E               	movf	setMotorPWM@m+1,w,c
  4459  000DF6  22DA               	addwfc	fsr2h,f,c
  4460  000DF8  50DF               	movf	indf2,w,c
  4461  000DFA  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4462  000DFC  0E01               	movlw	1
  4463  000DFE  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4464  000E00  2A1F               	incf	??_setMotorPWM,f,c
  4465  000E02  D002               	goto	u2064
  4466  000E04                     u2065:
  4467  000E04  90D8               	bcf	status,0,c
  4468  000E06  3620               	rlcf	??_setMotorPWM+1,f,c
  4469  000E08                     u2064:
  4470  000E08  2E1F               	decfsz	??_setMotorPWM,f,c
  4471  000E0A  D7FC               	goto	u2065
  4472  000E0C  5020               	movf	??_setMotorPWM+1,w,c
  4473  000E0E  0AFF               	xorlw	255
  4474  000E10  148A               	andwf	3978,w,c	;volatile
  4475  000E12  6E8A               	movwf	3978,c	;volatile
  4476  000E14                     l139:
  4477                           
  4478                           ;dc_motor.c: 40: }
  4479                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4480  000E14  EE20 F002          	lfsr	2,2
  4481  000E18  501D               	movf	setMotorPWM@m,w,c
  4482  000E1A  26D9               	addwf	fsr2l,f,c
  4483  000E1C  501E               	movf	setMotorPWM@m+1,w,c
  4484  000E1E  22DA               	addwfc	fsr2h,f,c
  4485  000E20  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4486  000E24  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4487  000E28  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4488  000E2C  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4489  000E30  4424               	rlncf	setMotorPWM@PWMduty,w,c
  4490  000E32  46E8               	rlncf	wreg,f,c
  4491  000E34  0BFC               	andlw	252
  4492  000E36  6EDF               	movwf	indf2,c
  4493                           
  4494                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4495  000E38  EE20 F004          	lfsr	2,4
  4496  000E3C  501D               	movf	setMotorPWM@m,w,c
  4497  000E3E  26D9               	addwf	fsr2l,f,c
  4498  000E40  501E               	movf	setMotorPWM@m+1,w,c
  4499  000E42  22DA               	addwfc	fsr2h,f,c
  4500  000E44  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4501  000E48  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4502  000E4C  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4503  000E50  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4504  000E54  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4505  000E58  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4506  000E5C  0E06               	movlw	6
  4507  000E5E  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  4508  000E60                     u2075:
  4509  000E60  3422               	rlcf	??_setMotorPWM+3,w,c
  4510  000E62  3222               	rrcf	??_setMotorPWM+3,f,c
  4511  000E64  3221               	rrcf	??_setMotorPWM+2,f,c
  4512  000E66  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4513  000E68  D7FB               	goto	u2075
  4514  000E6A  5021               	movf	??_setMotorPWM+2,w,c
  4515  000E6C  6EDF               	movwf	indf2,c
  4516  000E6E  0012               	return		;funcret
  4517  000E70                     __end_of_setMotorPWM:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           indf1	equ	0xFE7
  4526                           fsr1h	equ	0xFE2
  4527                           fsr1l	equ	0xFE1
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function ___wmul *****************
  4536 ;; Defined at:
  4537 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  multiplier      2   14[COMRAM] unsigned int 
  4540 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  product         2   18[COMRAM] unsigned int 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2   14[COMRAM] unsigned int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0, prodl, prodh
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4552 ;;      Params:         4       0       0       0
  4553 ;;      Locals:         2       0       0       0
  4554 ;;      Temps:          0       0       0       0
  4555 ;;      Totals:         6       0       0       0
  4556 ;;Total ram usage:        6 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    1
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_setMotorPWM
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text19
  4567  001508                     __ptext19:
  4568                           	opt stack 0
  4569  001508                     ___wmul:
  4570                           	opt stack 26
  4571                           
  4572                           ;incstack = 0
  4573  001508  500F               	movf	___wmul@multiplier,w,c
  4574  00150A  0211               	mulwf	___wmul@multiplicand,c
  4575  00150C  CFF3 F013          	movff	prodl,___wmul@product
  4576  001510  CFF4 F014          	movff	prodh,___wmul@product+1
  4577  001514  500F               	movf	___wmul@multiplier,w,c
  4578  001516  0212               	mulwf	___wmul@multiplicand+1,c
  4579  001518  50F3               	movf	prodl,w,c
  4580  00151A  2614               	addwf	___wmul@product+1,f,c
  4581  00151C  5010               	movf	___wmul@multiplier+1,w,c
  4582  00151E  0211               	mulwf	___wmul@multiplicand,c
  4583  001520  50F3               	movf	prodl,w,c
  4584  001522  2614               	addwf	___wmul@product+1,f,c
  4585  001524  C013  F00F         	movff	___wmul@product,?___wmul
  4586  001528  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4587  00152C  0012               	return	
  4588  00152E                     __end_of___wmul:
  4589                           	opt stack 0
  4590                           tblptru	equ	0xFF8
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           postinc0	equ	0xFEE
  4595                           wreg	equ	0xFE8
  4596                           indf1	equ	0xFE7
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function ___awdiv *****************
  4607 ;; Defined at:
  4608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  dividend        2   20[COMRAM] int 
  4611 ;;  divisor         2   22[COMRAM] int 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  quotient        2   26[COMRAM] int 
  4614 ;;  sign            1   25[COMRAM] unsigned char 
  4615 ;;  counter         1   24[COMRAM] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  2   20[COMRAM] int 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4625 ;;      Params:         4       0       0       0
  4626 ;;      Locals:         4       0       0       0
  4627 ;;      Temps:          0       0       0       0
  4628 ;;      Totals:         8       0       0       0
  4629 ;;Total ram usage:        8 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    1
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_setMotorPWM
  4636 ;;		_ScanWithRange
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text20
  4641  001136                     __ptext20:
  4642                           	opt stack 0
  4643  001136                     ___awdiv:
  4644                           	opt stack 26
  4645                           
  4646                           ;incstack = 0
  4647  001136  0E00               	movlw	0
  4648  001138  6E1A               	movwf	___awdiv@sign,c
  4649  00113A  AE18               	btfss	___awdiv@divisor+1,7,c
  4650  00113C  D006               	goto	l2554
  4651  00113E  6C17               	negf	___awdiv@divisor,c
  4652  001140  1E18               	comf	___awdiv@divisor+1,f,c
  4653  001142  B0D8               	btfsc	status,0,c
  4654  001144  2A18               	incf	___awdiv@divisor+1,f,c
  4655  001146  0E01               	movlw	1
  4656  001148  6E1A               	movwf	___awdiv@sign,c
  4657  00114A                     l2554:
  4658  00114A  AE16               	btfss	___awdiv@dividend+1,7,c
  4659  00114C  D006               	goto	l2560
  4660  00114E  6C15               	negf	___awdiv@dividend,c
  4661  001150  1E16               	comf	___awdiv@dividend+1,f,c
  4662  001152  B0D8               	btfsc	status,0,c
  4663  001154  2A16               	incf	___awdiv@dividend+1,f,c
  4664  001156  0E01               	movlw	1
  4665  001158  1A1A               	xorwf	___awdiv@sign,f,c
  4666  00115A                     l2560:
  4667  00115A  0E00               	movlw	0
  4668  00115C  6E1C               	movwf	___awdiv@quotient+1,c
  4669  00115E  0E00               	movlw	0
  4670  001160  6E1B               	movwf	___awdiv@quotient,c
  4671  001162  5017               	movf	___awdiv@divisor,w,c
  4672  001164  1018               	iorwf	___awdiv@divisor+1,w,c
  4673  001166  B4D8               	btfsc	status,2,c
  4674  001168  D01C               	goto	l2582
  4675  00116A  0E01               	movlw	1
  4676  00116C  6E19               	movwf	___awdiv@counter,c
  4677  00116E  D004               	goto	l2568
  4678  001170                     l2566:
  4679  001170  90D8               	bcf	status,0,c
  4680  001172  3617               	rlcf	___awdiv@divisor,f,c
  4681  001174  3618               	rlcf	___awdiv@divisor+1,f,c
  4682  001176  2A19               	incf	___awdiv@counter,f,c
  4683  001178                     l2568:
  4684  001178  AE18               	btfss	___awdiv@divisor+1,7,c
  4685  00117A  D7FA               	goto	l2566
  4686  00117C                     l2570:
  4687  00117C  90D8               	bcf	status,0,c
  4688  00117E  361B               	rlcf	___awdiv@quotient,f,c
  4689  001180  361C               	rlcf	___awdiv@quotient+1,f,c
  4690  001182  5017               	movf	___awdiv@divisor,w,c
  4691  001184  5C15               	subwf	___awdiv@dividend,w,c
  4692  001186  5018               	movf	___awdiv@divisor+1,w,c
  4693  001188  5816               	subwfb	___awdiv@dividend+1,w,c
  4694  00118A  A0D8               	btfss	status,0,c
  4695  00118C  D005               	goto	l2578
  4696  00118E  5017               	movf	___awdiv@divisor,w,c
  4697  001190  5E15               	subwf	___awdiv@dividend,f,c
  4698  001192  5018               	movf	___awdiv@divisor+1,w,c
  4699  001194  5A16               	subwfb	___awdiv@dividend+1,f,c
  4700  001196  801B               	bsf	___awdiv@quotient,0,c
  4701  001198                     l2578:
  4702  001198  90D8               	bcf	status,0,c
  4703  00119A  3218               	rrcf	___awdiv@divisor+1,f,c
  4704  00119C  3217               	rrcf	___awdiv@divisor,f,c
  4705  00119E  2E19               	decfsz	___awdiv@counter,f,c
  4706  0011A0  D7ED               	goto	l2570
  4707  0011A2                     l2582:
  4708  0011A2  501A               	movf	___awdiv@sign,w,c
  4709  0011A4  B4D8               	btfsc	status,2,c
  4710  0011A6  D004               	goto	l2586
  4711  0011A8  6C1B               	negf	___awdiv@quotient,c
  4712  0011AA  1E1C               	comf	___awdiv@quotient+1,f,c
  4713  0011AC  B0D8               	btfsc	status,0,c
  4714  0011AE  2A1C               	incf	___awdiv@quotient+1,f,c
  4715  0011B0                     l2586:
  4716  0011B0  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4717  0011B4  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4718  0011B8  0012               	return	
  4719  0011BA                     __end_of___awdiv:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           indf1	equ	0xFE7
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _grabRightIR *****************
  4738 ;; Defined at:
  4739 ;;		line 74 in file "IR_Reading.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4744 ;;  i               1   21[COMRAM] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2   14[COMRAM] unsigned int 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4754 ;;      Params:         2       0       0       0
  4755 ;;      Locals:         3       0       0       0
  4756 ;;      Temps:          3       0       0       0
  4757 ;;      Totals:         8       0       0       0
  4758 ;;Total ram usage:        8 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_ScanIR
  4765 ;;		_ScanWithRange
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text21
  4770  0011BA                     __ptext21:
  4771                           	opt stack 0
  4772  0011BA                     _grabRightIR:
  4773                           	opt stack 28
  4774                           
  4775                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4776                           
  4777                           ;incstack = 0
  4778  0011BA  0E00               	movlw	0
  4779  0011BC  6E15               	movwf	grabRightIR@IR_signal+1,c
  4780  0011BE  0E00               	movlw	0
  4781  0011C0  6E14               	movwf	grabRightIR@IR_signal,c
  4782                           
  4783                           ;IR_Reading.c: 77: unsigned char i=0;
  4784  0011C2  0E00               	movlw	0
  4785  0011C4  6E16               	movwf	grabRightIR@i,c
  4786                           
  4787                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4788  0011C6  0E00               	movlw	0
  4789  0011C8  6E16               	movwf	grabRightIR@i,c
  4790  0011CA                     l2676:
  4791  0011CA  0E03               	movlw	3
  4792  0011CC  6416               	cpfsgt	grabRightIR@i,c
  4793  0011CE  D001               	goto	l2680
  4794  0011D0  D020               	goto	l2686
  4795  0011D2                     l2680:
  4796                           
  4797                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  4798  0011D2  5069               	movf	3945,w,c	;volatile
  4799  0011D4  6E11               	movwf	??_grabRightIR& (0+255),c
  4800  0011D6  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  4801  0011D8  0E06               	movlw	6
  4802  0011DA                     u2215:
  4803  0011DA  90D8               	bcf	status,0,c
  4804  0011DC  3611               	rlcf	??_grabRightIR,f,c
  4805  0011DE  3612               	rlcf	??_grabRightIR+1,f,c
  4806  0011E0  2EE8               	decfsz	wreg,f,c
  4807  0011E2  D7FB               	goto	u2215
  4808  0011E4  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  4809  0011E8  90D8               	bcf	status,0,c
  4810  0011EA  3213               	rrcf	??_grabRightIR+2,f,c
  4811  0011EC  90D8               	bcf	status,0,c
  4812  0011EE  3213               	rrcf	??_grabRightIR+2,f,c
  4813  0011F0  5013               	movf	??_grabRightIR+2,w,c
  4814  0011F2  1211               	iorwf	??_grabRightIR,f,c
  4815  0011F4  0E00               	movlw	0
  4816  0011F6  1212               	iorwf	??_grabRightIR+1,f,c
  4817  0011F8  5011               	movf	??_grabRightIR,w,c
  4818  0011FA  2614               	addwf	grabRightIR@IR_signal,f,c
  4819  0011FC  5012               	movf	??_grabRightIR+1,w,c
  4820  0011FE  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  4821                           
  4822                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4823  001200  0E82               	movlw	130
  4824  001202  6E11               	movwf	??_grabRightIR& (0+255),c
  4825  001204  0EDE               	movlw	222
  4826  001206                     u2927:
  4827  001206  2EE8               	decfsz	wreg,f,c
  4828  001208  D7FE               	goto	u2927
  4829  00120A  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  4830  00120C  D7FC               	goto	u2927
  4831  00120E  2A16               	incf	grabRightIR@i,f,c
  4832  001210  D7DC               	goto	l2676
  4833  001212                     l2686:
  4834                           
  4835                           ;IR_Reading.c: 83: }
  4836                           ;IR_Reading.c: 85: return IR_signal>>2;
  4837  001212  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  4838  001216  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4839  00121A  90D8               	bcf	status,0,c
  4840  00121C  3212               	rrcf	??_grabRightIR+1,f,c
  4841  00121E  3211               	rrcf	??_grabRightIR,f,c
  4842  001220  90D8               	bcf	status,0,c
  4843  001222  3212               	rrcf	??_grabRightIR+1,f,c
  4844  001224  3211               	rrcf	??_grabRightIR,f,c
  4845  001226  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  4846  00122A  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  4847  00122E  0012               	return	
  4848  001230                     __end_of_grabRightIR:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           indf1	equ	0xFE7
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _grabLeftIR *****************
  4867 ;; Defined at:
  4868 ;;		line 90 in file "IR_Reading.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4873 ;;  i               1   21[COMRAM] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  2   14[COMRAM] unsigned int 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4883 ;;      Params:         2       0       0       0
  4884 ;;      Locals:         3       0       0       0
  4885 ;;      Temps:          3       0       0       0
  4886 ;;      Totals:         8       0       0       0
  4887 ;;Total ram usage:        8 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    1
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_ScanIR
  4894 ;;		_ScanWithRange
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text22
  4899  001230                     __ptext22:
  4900                           	opt stack 0
  4901  001230                     _grabLeftIR:
  4902                           	opt stack 28
  4903                           
  4904                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  4905                           
  4906                           ;incstack = 0
  4907  001230  0E00               	movlw	0
  4908  001232  6E15               	movwf	grabLeftIR@IR_signal+1,c
  4909  001234  0E00               	movlw	0
  4910  001236  6E14               	movwf	grabLeftIR@IR_signal,c
  4911                           
  4912                           ;IR_Reading.c: 93: unsigned char i=0;
  4913  001238  0E00               	movlw	0
  4914  00123A  6E16               	movwf	grabLeftIR@i,c
  4915                           
  4916                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  4917  00123C  0E00               	movlw	0
  4918  00123E  6E16               	movwf	grabLeftIR@i,c
  4919  001240                     l2660:
  4920  001240  0E03               	movlw	3
  4921  001242  6416               	cpfsgt	grabLeftIR@i,c
  4922  001244  D001               	goto	l2664
  4923  001246  D020               	goto	l2670
  4924  001248                     l2664:
  4925                           
  4926                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  4927  001248  5067               	movf	3943,w,c	;volatile
  4928  00124A  6E11               	movwf	??_grabLeftIR& (0+255),c
  4929  00124C  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  4930  00124E  0E06               	movlw	6
  4931  001250                     u2185:
  4932  001250  90D8               	bcf	status,0,c
  4933  001252  3611               	rlcf	??_grabLeftIR,f,c
  4934  001254  3612               	rlcf	??_grabLeftIR+1,f,c
  4935  001256  2EE8               	decfsz	wreg,f,c
  4936  001258  D7FB               	goto	u2185
  4937  00125A  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  4938  00125E  90D8               	bcf	status,0,c
  4939  001260  3213               	rrcf	??_grabLeftIR+2,f,c
  4940  001262  90D8               	bcf	status,0,c
  4941  001264  3213               	rrcf	??_grabLeftIR+2,f,c
  4942  001266  5013               	movf	??_grabLeftIR+2,w,c
  4943  001268  1211               	iorwf	??_grabLeftIR,f,c
  4944  00126A  0E00               	movlw	0
  4945  00126C  1212               	iorwf	??_grabLeftIR+1,f,c
  4946  00126E  5011               	movf	??_grabLeftIR,w,c
  4947  001270  2614               	addwf	grabLeftIR@IR_signal,f,c
  4948  001272  5012               	movf	??_grabLeftIR+1,w,c
  4949  001274  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  4950                           
  4951                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  4952  001276  0E82               	movlw	130
  4953  001278  6E11               	movwf	??_grabLeftIR& (0+255),c
  4954  00127A  0EDE               	movlw	222
  4955  00127C                     u2937:
  4956  00127C  2EE8               	decfsz	wreg,f,c
  4957  00127E  D7FE               	goto	u2937
  4958  001280  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  4959  001282  D7FC               	goto	u2937
  4960  001284  2A16               	incf	grabLeftIR@i,f,c
  4961  001286  D7DC               	goto	l2660
  4962  001288                     l2670:
  4963                           
  4964                           ;IR_Reading.c: 99: }
  4965                           ;IR_Reading.c: 101: return IR_signal>>2;
  4966  001288  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  4967  00128C  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  4968  001290  90D8               	bcf	status,0,c
  4969  001292  3212               	rrcf	??_grabLeftIR+1,f,c
  4970  001294  3211               	rrcf	??_grabLeftIR,f,c
  4971  001296  90D8               	bcf	status,0,c
  4972  001298  3212               	rrcf	??_grabLeftIR+1,f,c
  4973  00129A  3211               	rrcf	??_grabLeftIR,f,c
  4974  00129C  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  4975  0012A0  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  4976  0012A4  0012               	return	
  4977  0012A6                     __end_of_grabLeftIR:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           intcon	equ	0xFF2
  4983                           postinc0	equ	0xFEE
  4984                           wreg	equ	0xFE8
  4985                           indf1	equ	0xFE7
  4986                           fsr1h	equ	0xFE2
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           fsr2h	equ	0xFDA
  4992                           fsr2l	equ	0xFD9
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _delay_tenth_s *****************
  4996 ;; Defined at:
  4997 ;;		line 19 in file "Movement.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  tenth_second    1    wreg     unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  tenth_second    1   15[COMRAM] unsigned char 
  5002 ;;  i               2   16[COMRAM] unsigned int 
  5003 ;; Return value:  Size  Location     Type
  5004 ;;		None               void
  5005 ;; Registers used:
  5006 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5012 ;;      Params:         0       0       0       0
  5013 ;;      Locals:         3       0       0       0
  5014 ;;      Temps:          1       0       0       0
  5015 ;;      Totals:         4       0       0       0
  5016 ;;Total ram usage:        4 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    1
  5019 ;; This function calls:
  5020 ;;		Nothing
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;;		_ScanIR
  5024 ;;		_ScanWithRange
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text23
  5029  0013E2                     __ptext23:
  5030                           	opt stack 0
  5031  0013E2                     _delay_tenth_s:
  5032                           	opt stack 29
  5033                           
  5034                           ;incstack = 0
  5035                           ;delay_tenth_s@tenth_seconds stored from wreg
  5036  0013E2  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  5037                           
  5038                           ;Movement.c: 20: unsigned int i=0;
  5039  0013E4  0E00               	movlw	0
  5040  0013E6  6E12               	movwf	delay_tenth_s@i+1,c
  5041  0013E8  0E00               	movlw	0
  5042  0013EA  6E11               	movwf	delay_tenth_s@i,c
  5043                           
  5044                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  5045  0013EC  0E00               	movlw	0
  5046  0013EE  6E12               	movwf	delay_tenth_s@i+1,c
  5047  0013F0  0E01               	movlw	1
  5048  0013F2  6E11               	movwf	delay_tenth_s@i,c
  5049  0013F4  D009               	goto	l2644
  5050  0013F6                     l2640:
  5051                           
  5052                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  5053  0013F6  0E82               	movlw	130
  5054  0013F8  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  5055  0013FA  0EDE               	movlw	222
  5056  0013FC                     u2947:
  5057  0013FC  2EE8               	decfsz	wreg,f,c
  5058  0013FE  D7FE               	goto	u2947
  5059  001400  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  5060  001402  D7FC               	goto	u2947
  5061  001404  4A11               	infsnz	delay_tenth_s@i,f,c
  5062  001406  2A12               	incf	delay_tenth_s@i+1,f,c
  5063  001408                     l2644:
  5064  001408  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  5065  00140A  0D02               	mullw	2
  5066  00140C  5011               	movf	delay_tenth_s@i,w,c
  5067  00140E  5CF3               	subwf	prodl,w,c
  5068  001410  5012               	movf	delay_tenth_s@i+1,w,c
  5069  001412  58F4               	subwfb	prodh,w,c
  5070  001414  A0D8               	btfss	status,0,c
  5071  001416  0012               	return	
  5072  001418  D7EE               	goto	l2640
  5073  00141A                     __end_of_delay_tenth_s:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           indf1	equ	0xFE7
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _InterruptHandlerHigh *****************
  5092 ;; Defined at:
  5093 ;;		line 17 in file "main.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5107 ;;      Params:         0       0       0       0
  5108 ;;      Locals:         0       0       0       0
  5109 ;;      Temps:         14       0       0       0
  5110 ;;      Totals:        14       0       0       0
  5111 ;;Total ram usage:       14 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		Interrupt level 2
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	intcode
  5121  000008                     __pintcode:
  5122                           	opt stack 0
  5123  000008                     _InterruptHandlerHigh:
  5124                           	opt stack 25
  5125                           
  5126                           ;incstack = 0
  5127  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5128  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  5129  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  5130  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  5131  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  5132  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  5133  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  5134  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  5135  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  5136  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  5137  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  5138  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  5139  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  5140  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  5141  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  5142                           
  5143                           ;main.c: 19: if (PIR1bits.RCIF) {
  5144  000042  AA9E               	btfss	3998,5,c	;volatile
  5145  000044  D016               	goto	i2l66
  5146                           
  5147                           ;main.c: 20: ReceivedString[i]=RCREG;
  5148  000046  504D               	movf	_i,w,c	;volatile
  5149  000048  0D01               	mullw	1
  5150  00004A  0EEC               	movlw	low _ReceivedString
  5151  00004C  24F3               	addwf	prodl,w,c
  5152  00004E  6ED9               	movwf	fsr2l,c
  5153  000050  0E01               	movlw	high _ReceivedString
  5154  000052  20F4               	addwfc	prodh,w,c
  5155  000054  6EDA               	movwf	fsr2h,c
  5156  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  5157                           
  5158                           ;main.c: 21: RFID_Read=1;
  5159  00005A  0E01               	movlw	1
  5160  00005C  0101               	movlb	1	; () banked
  5161  00005E  6FEB               	movwf	_RFID_Read& (0+255),b	;volatile
  5162                           
  5163                           ; BSR set to: 1
  5164                           ;main.c: 22: if (i==15){
  5165  000060  0E0F               	movlw	15
  5166  000062  184D               	xorwf	_i,w,c	;volatile
  5167  000064  A4D8               	btfss	status,2,c
  5168  000066  D003               	goto	i2l2358
  5169                           
  5170                           ; BSR set to: 1
  5171                           ;main.c: 23: i=0;
  5172  000068  0E00               	movlw	0
  5173  00006A  6E4D               	movwf	_i,c	;volatile
  5174                           
  5175                           ;main.c: 24: }else{
  5176  00006C  D001               	goto	i2l2360
  5177  00006E                     i2l2358:
  5178                           
  5179                           ; BSR set to: 1
  5180                           ;main.c: 25: i++;
  5181  00006E  2A4D               	incf	_i,f,c	;volatile
  5182  000070                     i2l2360:
  5183                           
  5184                           ; BSR set to: 1
  5185                           ;main.c: 26: }
  5186                           ;main.c: 27: PIR1bits.RCIF=0;
  5187  000070  9A9E               	bcf	3998,5,c	;volatile
  5188  000072                     i2l66:
  5189  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  5190  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  5191  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  5192  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  5193  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  5194  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  5195  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  5196  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  5197  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  5198  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  5199  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  5200  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  5201  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  5202  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  5203  0000AA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5204  0000AC  0011               	retfie		f
  5205  0000AE                     __end_of_InterruptHandlerHigh:
  5206                           	opt stack 0
  5207  0000                     pclatu	equ	0xFFB
  5208                           pclath	equ	0xFFA
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           postinc0	equ	0xFEE
  5217                           fsr0h	equ	0xFEA
  5218                           fsr0l	equ	0xFE9
  5219                           wreg	equ	0xFE8
  5220                           indf1	equ	0xFE7
  5221                           fsr1h	equ	0xFE2
  5222                           fsr1l	equ	0xFE1
  5223                           indf2	equ	0xFDF
  5224                           postinc2	equ	0xFDE
  5225                           postdec2	equ	0xFDD
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           pclatu	equ	0xFFB
  5230                           pclath	equ	0xFFA
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           intcon	equ	0xFF2
  5238                           postinc0	equ	0xFEE
  5239                           fsr0h	equ	0xFEA
  5240                           fsr0l	equ	0xFE9
  5241                           wreg	equ	0xFE8
  5242                           indf1	equ	0xFE7
  5243                           fsr1h	equ	0xFE2
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252                           	psect	rparam
  5253  0000                     pclatu	equ	0xFFB
  5254                           pclath	equ	0xFFA
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           postinc0	equ	0xFEE
  5263                           fsr0h	equ	0xFEA
  5264                           fsr0l	equ	0xFE9
  5265                           wreg	equ	0xFE8
  5266                           indf1	equ	0xFE7
  5267                           fsr1h	equ	0xFE2
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           fsr2h	equ	0xFDA
  5273                           fsr2l	equ	0xFD9
  5274                           status	equ	0xFD8
  5275                           
  5276                           	psect	temp
  5277  00004E                     btemp:
  5278                           	opt stack 0
  5279  00004E                     	ds	1
  5280  0000                     int$flags	set	btemp
  5281                           pclatu	equ	0xFFB
  5282                           pclath	equ	0xFFA
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodh	equ	0xFF4
  5288                           prodl	equ	0xFF3
  5289                           intcon	equ	0xFF2
  5290                           postinc0	equ	0xFEE
  5291                           fsr0h	equ	0xFEA
  5292                           fsr0l	equ	0xFE9
  5293                           wreg	equ	0xFE8
  5294                           indf1	equ	0xFE7
  5295                           fsr1h	equ	0xFE2
  5296                           fsr1l	equ	0xFE1
  5297                           indf2	equ	0xFDF
  5298                           postinc2	equ	0xFDE
  5299                           postdec2	equ	0xFDD
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      77
    BANK0           160     21      25
    BANK1           256    235     252
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               340   340      0  109331
                                             62 COMRAM     2     2      0
                                              0 BANK1    235   235      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             20 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             18 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             14 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    4246
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       30    23      7   35547
                                             46 COMRAM     9     2      7
                                              0 BANK0     21    21      0
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   31858
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4   11264
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4   12034
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    6648
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3660
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2334
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1177
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EB      FC       7       98.4%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     15      19       4       15.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4D       1       81.9%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     162       5        0.0%
DATA                 0      0     162      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 13:13:26 2018

                        ?_grabRightIR 000F                                     _i 004D  
                                  l69 07A0                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 01C8  
                                 l139 0E14                                   l169 12F8  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0164  
                        main@MoveType 0100                                  l2022 13D0  
                                l2032 14F6                                  l2018 13BE  
                                l3110 0A7E                                  l3102 0A2E  
                                l3040 0894                                  l3032 0864  
                                l3008 07A6                                  l3050 08D4  
                                l2332 104A                                  l3116 0ADC  
                                l3036 0882                                  l3028 082E  
                                l3124 0B0E                                  l3118 0B08  
                                l3054 08F0                                  l2600 12A8  
                                l2344 10A2                                  l2336 1052  
                                l3080 099E                                  l3064 094C  
                                l3074 098E                                  l2604 12C0  
                                l3076 0994                                  l3068 0956  
                                l2622 10C0                                  l3086 09BA  
                                l2640 13F6                                  l2560 115A  
                                l2608 12D8                                  l2632 10F8  
                                l3088 09C2                                  l3096 0A06  
                                l2570 117C                                  l2554 114A  
                                l2626 10D8                                  l2618 10A8  
                                l2644 1408                                  l2660 1240  
                                l2820 0528                                  l2812 04A4  
                                l2670 1288                                  l2566 1170  
                                l2582 11A2                                  l2664 1248  
                                l2680 11D2                                  l2568 1178  
                                l2920 0C04                                  l2752 02B8  
                                l2744 023C                                  l2586 11B0  
                                l2578 1198                                  l2676 11CA  
                                l2596 0DEC                                  l2940 0C5A  
                                l2860 05E4                                  l2844 0594  
                                l2828 053E                                  l2748 027A  
                                l2686 1212                                  l2934 0C56  
                                l2926 0C08                                  l2870 0672  
                                l2838 0590                                  l2790 03E4  
                                l2952 0CAA                                  l2784 03E0  
                                l2776 03A2                                  l2768 031E  
                                l2962 0CF8                                  l2980 0D38  
                                l2876 0676                                  l2892 06FA  
                                l2798 0468                                  l2968 0CFC  
                                u1205 0E88                                  u1215 0EA6  
                                u1225 0EB4                                  u1235 0ED4  
                                u1245 0EE2                                  u2054 0DB0  
                                _LATB 000F8A                                  u2215 11DA  
                                u2055 0DAC                                  u1255 0F12  
                                u2064 0E08                                  u2065 0E04  
                                u2075 0E60                                  u1195 0E7A  
                                u1275 14BC                                  u1276 14BE  
                                u1365 14F2                                  u1366 14F4  
                                u2600 091A                                  u2185 1250  
                                u1385 1504                                  u1386 1506  
                                u2610 092C                                  u2602 091C  
                                u2612 092E                                  u2807 0F9C  
                                u2817 0FAE                                  u2907 10F2  
                                u2827 0FC4                                  u2917 12F2  
                                u2837 0FD8                                  u2757 0F48  
                                u2927 1206                                  u2847 0FEA  
                                u2767 0F5E                                  u2937 127C  
                                u2857 14CA                                  u2777 0F6E  
                                u2947 13FC                                  u2867 14DA  
                                u2787 0F7C                                  u2877 0F2E  
                                u2797 0F8A                                  u2887 1574  
                                u2897 13C4                                  i2l66 0072  
                                _main 06FE                         main@ScanAngle 01D4  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 004E                                  _stop 10A6  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00AE  
                      delay_s@seconds 0010                          ___param_bank 000010  
                     __end_of_SendLCD 14E2                    ScanWithRange@F3721 0049  
                  ScanWithRange@F3723 0075                    ScanWithRange@F3719 0045  
                         ScanIR@F3710 0041                                 ?_main 0001  
                     __end_of___awdiv 11BA                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                         _initRFID$1317 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _E_TOG 1570                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 13E2                       __end_of_initLCD 0FF2  
                               main@i 01D7                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 064C  
                     __initialization 1482                          __end_of_main 0B2C  
                        __end_of_stop 1136                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 1508  
                 VerifySignal@hexByte 0018                                ??_main 003F  
                              ??_stop 002A                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 001D                __size_of_fullSpeedBack 0036  
                    ___awdiv@dividend 0015                                i2l2360 0070  
                              i2l2358 006E                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 141A                                _LCDout 0E70  
                         SendLCD@Byte 0014                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B                           SendLCD@type 0013  
                           ??_SendLCD 0014                                _ScanIR 0B2C  
                              ___wmul 1508                             ??___awdiv 0019  
                    __end_of_initRFID 1570                                _initIR 152E  
                __size_of_grabRightIR 0076                                clear_0 1488  
                              clear_1 149E                      ___awdiv@quotient 001B  
                           ??_delay_s 000F                                main@mL 01D9  
                              main@mR 01E2                        ??_initMotorPWM 000F  
                           ??_initLCD 0015                         _ScanWithRange 00B2  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 13AA  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 14A4  
                       ___rparam_used 000001                         __end_of_E_TOG 157E  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 141A  
                      ?_ScanWithRange 002F                  VerifySignal@checksum 0017  
                             ??_E_TOG 000F         __size_of_InterruptHandlerHigh 00A6  
          delay_tenth_s@tenth_seconds 0010                            __pbssBANK0 0075  
                          __pbssBANK1 01EB                               ?_LCDout 0001  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 1230  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                     __size_of_LCDout 00C6                          _enableSensor 14E2  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 1482  
                             _SendLCD 14B2                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 0210  
                             ___awdiv 1136                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 1482  
                     ??_ScanWithRange 0036                               _delay_s 13AA  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 06FE                               __ptext1 1550  
                             __ptext2 1450                               __ptext3 0F36  
                             __ptext4 14B2                               __ptext5 0E70  
                             __ptext6 1570                               __ptext7 152E  
                             __ptext8 141A                               __ptext9 14E2  
                             _initLCD 0F36                          LCDout@number 0012  
                       ?_VerifySignal 000F                  end_of_initialization 14A4  
                  setMotorPWM@PWMduty 0024                            ??_initRFID 000F  
                       __Lmediumconst 0000                    ScanIR@SensorResult 003B  
                     ??_fullSpeedBack 002F                             _RFID_Read 01EB  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 1360  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0011                      fullSpeedAhead@mL 0026  
                    fullSpeedAhead@mR 0028         ScanIR@DirectionFoundTolerance 0039  
                      __end_of_LCDout 0F36                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 0D3C  
                      _fullSpeedAhead 12A6                        _ReceivedString 01EC  
                      __end_of___wmul 152E                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1550                __size_of_delay_tenth_s 0038  
                 start_initialization 1482                    VerifySignal@Signal 000F  
               __size_of_initMotorPWM 0032                              ??_LCDout 000F  
        __end_of_InterruptHandlerHigh 00AE                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 1316                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 1230                          _initMotorPWM 1450  
                         __pbssCOMRAM 0041                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100      ScanWithRange@DirectionFoundLimit 0065  
                       _delay_tenth_s 13E2                     __size_of_initRFID 0020  
   ScanWithRange@ClearSignalTolerance 0063                              ?_SendLCD 0013  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                __end_of_VerifySignal 10A6                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                      __size_of_E_TOG 000E                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 006D            ScanWithRange@SensorResultL 0069  
          ScanWithRange@SensorResultR 0071                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 11BA                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 06FE  
                        setMotorPWM@m 001D                 ScanWithRange@MoveTime 0034  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 1316            ScanIR@ClearSignalTolerance 0035  
                 __end_of_setMotorPWM 0E70                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1450                    __end_of_grabLeftIR 12A6  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                    __size_of_initLCD 00BC                            ?_turnRight 002B  
                            __ptext10 13AA                              __ptext11 0FF2  
                            __ptext20 1136                              __ptext12 00B2  
                            __ptext21 11BA                              __ptext13 0B2C  
                            __ptext22 1230                              __ptext14 1316  
                            __ptext23 13E2                              __ptext15 1360  
                            __ptext16 10A6                              __ptext17 12A6  
                            __ptext18 0D3C                              __ptext19 1508  
                     ??_delay_tenth_s 000F                              _initRFID 1550  
                       __size_of_main 042E             ScanWithRange@ResultFalseC 0061  
                  main@DirectionFound 01D6             ScanWithRange@ResultFalseL 0060  
           ScanWithRange@ResultFalseR 0062                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
               __size_of_VerifySignal 00B4                              delay_s@i 0011  
                            int$flags 004E                              main@Move 01D8  
                            main@mode 01D5                              main@test 01D2  
                            _turnLeft 1360                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                         VerifySignal@i 001A  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 0D3C                          _VerifySignal 0FF2  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0067                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
