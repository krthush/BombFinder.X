

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Mar 15 23:07:17 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     _CAP1BUFH	set	3945
    32  0000                     _CAP1BUFL	set	3944
    33  0000                     _CAP1CON	set	3939
    34  0000                     _CAP2BUFH	set	3943
    35  0000                     _CAP2BUFL	set	3942
    36  0000                     _CAP2CON	set	3938
    37  0000                     _LATAbits	set	3977
    38  0000                     _LATB	set	3978
    39  0000                     _LATCbits	set	3979
    40  0000                     _LATDbits	set	3980
    41  0000                     _LATEbits	set	3981
    42  0000                     _PTCON0	set	3967
    43  0000                     _PTCON1	set	3966
    44  0000                     _PTPERH	set	3962
    45  0000                     _PTPERL	set	3963
    46  0000                     _PWMCON0	set	3951
    47  0000                     _PWMCON1	set	3950
    48  0000                     _TRISAbits	set	3986
    49  0000                     _TRISBbits	set	3987
    50  0000                     _TRISC	set	3988
    51  0000                     _TRISCbits	set	3988
    52  0000                     _TRISDbits	set	3989
    53  0000                     _TRISEbits	set	3990
    54  0000                     _PDC0H	set	3960
    55  0000                     _PDC0L	set	3961
    56  0000                     _PDC1H	set	3958
    57  0000                     _PDC1L	set	3959
    58  0000                     _ANSEL0bits	set	4024
    59  0000                     _BAUDCONbits	set	4010
    60  0000                     _IPR1bits	set	3999
    61  0000                     _OSCCON	set	4051
    62  0000                     _OSCCONbits	set	4051
    63  0000                     _PIE1bits	set	3997
    64  0000                     _PIR1bits	set	3998
    65  0000                     _RCONbits	set	4048
    66  0000                     _RCREG	set	4014
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _SPBRG	set	4015
    69  0000                     _SPBRGH	set	4016
    70  0000                     _T5CON	set	4023
    71  0000                     _TXREG	set	4013
    72  0000                     _TXSTAbits	set	4012
    73  0000                     _INTCONbits	set	4082
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  0008B6                     __pcinit:
    79                           	opt stack 0
    80  0008B6                     start_initialization:
    81                           	opt stack 0
    82  0008B6                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (17 bytes)
    86  0008B6  EE00  F03B         	lfsr	0,__pbssCOMRAM
    87  0008BA  0E11               	movlw	17
    88  0008BC                     clear_0:
    89  0008BC  6AEE               	clrf	postinc0,c
    90  0008BE  06E8               	decf	wreg,f,c
    91  0008C0  E1FD               	bnz	clear_0
    92  0008C2                     end_of_initialization:
    93                           	opt stack 0
    94  0008C2                     __end_of__initialization:
    95                           	opt stack 0
    96  0008C2  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    97  0008C4  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    98  0008C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  0008C8  6EF8               	movwf	tblptru,c
   100  0008CA  0100               	movlb	0
   101  0008CC  EF56  F000         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssCOMRAM
   107  00003B                     __pbssCOMRAM:
   108                           	opt stack 0
   109  00003B                     _ReceivedString:
   110                           	opt stack 0
   111  00003B                     	ds	16
   112  00004B                     _i:
   113                           	opt stack 0
   114  00004B                     	ds	1
   115                           tblptru	equ	0xFF8
   116                           postinc0	equ	0xFEE
   117                           wreg	equ	0xFE8
   118                           
   119                           	psect	cstackBANK0
   120  000060                     __pcstackBANK0:
   121                           	opt stack 0
   122  000060                     main@test:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x0
   126  000060                     	ds	2
   127  000062                     main@i:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x2
   131  000062                     	ds	1
   132  000063                     main@ScanAngle:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x3
   136  000063                     	ds	1
   137  000064                     main@mode:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x4
   141  000064                     	ds	1
   142  000065                     main@DirectionFound:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x5
   146  000065                     	ds	1
   147  000066                     main@motorL:
   148                           	opt stack 0
   149                           
   150                           ; 9 bytes @ 0x6
   151  000066                     	ds	9
   152  00006F                     main@motorR:
   153                           	opt stack 0
   154                           
   155                           ; 9 bytes @ 0xF
   156  00006F                     	ds	9
   157                           tblptru	equ	0xFF8
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt stack 0
   164  000001                     ??_InterruptHandlerHigh:
   165  000001                     
   166                           ; 0 bytes @ 0x0
   167  000001                     	ds	14
   168  00000F                     ??_delay_s:
   169  00000F                     ??_delay_tenth_s:
   170  00000F                     ?_grabLeftIR:
   171                           	opt stack 0
   172  00000F                     ?_grabRightIR:
   173                           	opt stack 0
   174  00000F                     ?___wmul:
   175                           	opt stack 0
   176  00000F                     _initRFID$1286:
   177                           	opt stack 0
   178  00000F                     enableSensor@status:
   179                           	opt stack 0
   180  00000F                     ___wmul@multiplier:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xE
   184  00000F                     	ds	1
   185  000010                     delay_s@seconds:
   186                           	opt stack 0
   187  000010                     delay_tenth_s@tenth_seconds:
   188                           	opt stack 0
   189  000010                     enableSensor@sensor:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0xF
   193  000010                     	ds	1
   194  000011                     ??_grabLeftIR:
   195  000011                     ??_grabRightIR:
   196  000011                     delay_s@i:
   197                           	opt stack 0
   198  000011                     delay_tenth_s@i:
   199                           	opt stack 0
   200  000011                     ___wmul@multiplicand:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x10
   204  000011                     	ds	2
   205  000013                     grabRightIR@IR_signal:
   206                           	opt stack 0
   207  000013                     grabLeftIR@IR_signal:
   208                           	opt stack 0
   209  000013                     ___wmul@product:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x12
   213  000013                     	ds	2
   214  000015                     ?___awdiv:
   215                           	opt stack 0
   216  000015                     grabRightIR@i:
   217                           	opt stack 0
   218  000015                     grabLeftIR@i:
   219                           	opt stack 0
   220  000015                     ___awdiv@dividend:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x14
   224  000015                     	ds	2
   225  000017                     ___awdiv@divisor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x16
   229  000017                     	ds	2
   230  000019                     ___awdiv@counter:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x18
   234  000019                     	ds	1
   235  00001A                     ___awdiv@sign:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x19
   239  00001A                     	ds	1
   240  00001B                     ___awdiv@quotient:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x1A
   244  00001B                     	ds	2
   245  00001D                     setMotorPWM@m:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x1C
   249  00001D                     	ds	2
   250  00001F                     ??_setMotorPWM:
   251                           
   252                           ; 0 bytes @ 0x1E
   253  00001F                     	ds	5
   254  000024                     setMotorPWM@PWMduty:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x23
   258  000024                     	ds	2
   259  000026                     stop@mL:
   260                           	opt stack 0
   261  000026                     fullSpeedAhead@mL:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x25
   265  000026                     	ds	2
   266  000028                     stop@mR:
   267                           	opt stack 0
   268  000028                     fullSpeedAhead@mR:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x27
   272  000028                     	ds	2
   273  00002A                     
   274                           ; 0 bytes @ 0x29
   275  00002A                     	ds	1
   276  00002B                     turnLeft@mL:
   277                           	opt stack 0
   278  00002B                     turnRight@mL:
   279                           	opt stack 0
   280  00002B                     fullSpeedBack@mL:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x2A
   284  00002B                     	ds	2
   285  00002D                     turnLeft@mR:
   286                           	opt stack 0
   287  00002D                     turnRight@mR:
   288                           	opt stack 0
   289  00002D                     fullSpeedBack@mR:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x2C
   293  00002D                     	ds	2
   294  00002F                     ScanIR@mL:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x2E
   298  00002F                     	ds	2
   299  000031                     ScanIR@mR:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x30
   303  000031                     	ds	2
   304  000033                     ??_ScanIR:
   305                           
   306                           ; 0 bytes @ 0x32
   307  000033                     	ds	2
   308  000035                     ScanIR@DirectionFoundTolerance:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x34
   312  000035                     	ds	2
   313  000037                     ScanIR@SensorResult:
   314                           	opt stack 0
   315                           
   316                           ; 4 bytes @ 0x36
   317  000037                     	ds	4
   318  00003B                     tblptru	equ	0xFF8
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           ; 0 bytes @ 0x3A
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 29 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  PathTaken     100    0        unsigned char [100]
   333 ;;  Message        10    0        unsigned char [10]
   334 ;;  motorR          9   15[BANK0 ] struct DC_motor
   335 ;;  motorL          9    6[BANK0 ] struct DC_motor
   336 ;;  SignalStreng    3    0        unsigned char [3]
   337 ;;  test            2    0[BANK0 ] unsigned int 
   338 ;;  DirectionFou    1    5[BANK0 ] unsigned char 
   339 ;;  mode            1    4[BANK0 ] unsigned char 
   340 ;;  ScanAngle       1    3[BANK0 ] unsigned char 
   341 ;;  i               1    2[BANK0 ] unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;		None               void
   344 ;; Registers used:
   345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   351 ;;      Params:         0       0       0       0
   352 ;;      Locals:         0      24       0       0
   353 ;;      Temps:          0       0       0       0
   354 ;;      Totals:         0      24       0       0
   355 ;;Total ram usage:       24 bytes
   356 ;; Hardware stack levels required when called:    6
   357 ;; This function calls:
   358 ;;		_ScanIR
   359 ;;		_delay_s
   360 ;;		_enableSensor
   361 ;;		_fullSpeedBack
   362 ;;		_initIR
   363 ;;		_initMotorPWM
   364 ;;		_initRFID
   365 ;;		_stop
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text0
   372  0000AC                     __ptext0:
   373                           	opt stack 0
   374  0000AC                     _main:
   375                           	opt stack 25
   376                           
   377                           ;main.c: 32: unsigned char Message[10];
   378                           ;main.c: 33: unsigned char i=0;
   379                           
   380                           ;incstack = 0
   381  0000AC  0E00               	movlw	0
   382  0000AE  0100               	movlb	0	; () banked
   383  0000B0  6F62               	movwf	main@i& (0+255),b
   384                           
   385                           ;main.c: 34: unsigned char mode=0;
   386  0000B2  0E00               	movlw	0
   387  0000B4  0100               	movlb	0	; () banked
   388  0000B6  6F64               	movwf	main@mode& (0+255),b
   389                           
   390                           ;main.c: 35: char DirectionFound=0;
   391  0000B8  0E00               	movlw	0
   392  0000BA  0100               	movlb	0	; () banked
   393  0000BC  6F65               	movwf	main@DirectionFound& (0+255),b
   394                           
   395                           ;main.c: 36: unsigned char SignalStrength[3];
   396                           ;main.c: 37: char PathTaken[100];
   397                           ;main.c: 38: unsigned int test=0;
   398  0000BE  0E00               	movlw	0
   399  0000C0  0100               	movlb	0	; () banked
   400  0000C2  6F61               	movwf	(main@test+1)& (0+255),b
   401  0000C4  0E00               	movlw	0
   402  0000C6  6F60               	movwf	main@test& (0+255),b
   403                           
   404                           ;main.c: 40: unsigned char ScanAngle=6;
   405  0000C8  0E06               	movlw	6
   406  0000CA  0100               	movlb	0	; () banked
   407  0000CC  6F63               	movwf	main@ScanAngle& (0+255),b
   408                           
   409                           ; BSR set to: 0
   410                           ;main.c: 43: INTCONbits.GIEH = 1;
   411  0000CE  8EF2               	bsf	intcon,7,c	;volatile
   412                           
   413                           ; BSR set to: 0
   414                           ;main.c: 44: RCONbits.IPEN = 1;
   415  0000D0  8ED0               	bsf	4048,7,c	;volatile
   416                           
   417                           ; BSR set to: 0
   418                           ;main.c: 45: INTCONbits.GIEL = 1;
   419  0000D2  8CF2               	bsf	intcon,6,c	;volatile
   420                           
   421                           ; BSR set to: 0
   422                           ;main.c: 46: INTCONbits.INT0IE = 1;
   423  0000D4  88F2               	bsf	intcon,4,c	;volatile
   424                           
   425                           ; BSR set to: 0
   426                           ;main.c: 47: INTCONbits.PEIE = 1;
   427  0000D6  8CF2               	bsf	intcon,6,c	;volatile
   428                           
   429                           ; BSR set to: 0
   430                           ;main.c: 49: IPR1bits.RCIP=1;
   431  0000D8  8A9F               	bsf	3999,5,c	;volatile
   432                           
   433                           ; BSR set to: 0
   434                           ;main.c: 50: PIE1bits.RCIE=1;
   435  0000DA  8A9D               	bsf	3997,5,c	;volatile
   436                           
   437                           ;main.c: 53: struct DC_motor motorL, motorR;
   438                           ;main.c: 54: motorL.power=0;
   439  0000DC  0E00               	movlw	0
   440  0000DE  0100               	movlb	0	; () banked
   441  0000E0  6F66               	movwf	main@motorL& (0+255),b
   442                           
   443                           ;main.c: 55: motorL.direction=1;
   444  0000E2  0E01               	movlw	1
   445  0000E4  0100               	movlb	0	; () banked
   446  0000E6  6F67               	movwf	(main@motorL+1)& (0+255),b
   447                           
   448                           ; BSR set to: 0
   449                           ;main.c: 56: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   450  0000E8  0E79               	movlw	121
   451  0000EA  0100               	movlb	0	; () banked
   452  0000EC  6F68               	movwf	(main@motorL+2)& (0+255),b
   453  0000EE  0E0F               	movlw	15
   454  0000F0  0100               	movlb	0	; () banked
   455  0000F2  6F69               	movwf	(main@motorL+3)& (0+255),b
   456                           
   457                           ; BSR set to: 0
   458                           ;main.c: 57: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   459  0000F4  0E78               	movlw	120
   460  0000F6  0100               	movlb	0	; () banked
   461  0000F8  6F6A               	movwf	(main@motorL+4)& (0+255),b
   462  0000FA  0E0F               	movlw	15
   463  0000FC  0100               	movlb	0	; () banked
   464  0000FE  6F6B               	movwf	(main@motorL+5)& (0+255),b
   465                           
   466                           ;main.c: 58: motorL.dir_pin=0;
   467  000100  0E00               	movlw	0
   468  000102  0100               	movlb	0	; () banked
   469  000104  6F6C               	movwf	(main@motorL+6)& (0+255),b
   470                           
   471                           ;main.c: 59: motorL.PWMperiod=199;
   472  000106  0E00               	movlw	0
   473  000108  0100               	movlb	0	; () banked
   474  00010A  6F6E               	movwf	(main@motorL+8)& (0+255),b
   475  00010C  0EC7               	movlw	199
   476  00010E  6F6D               	movwf	(main@motorL+7)& (0+255),b
   477                           
   478                           ;main.c: 61: motorR.power=0;
   479  000110  0E00               	movlw	0
   480  000112  0100               	movlb	0	; () banked
   481  000114  6F6F               	movwf	main@motorR& (0+255),b
   482                           
   483                           ;main.c: 62: motorR.direction=1;
   484  000116  0E01               	movlw	1
   485  000118  0100               	movlb	0	; () banked
   486  00011A  6F70               	movwf	(main@motorR+1)& (0+255),b
   487                           
   488                           ; BSR set to: 0
   489                           ;main.c: 63: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   490  00011C  0E77               	movlw	119
   491  00011E  0100               	movlb	0	; () banked
   492  000120  6F71               	movwf	(main@motorR+2)& (0+255),b
   493  000122  0E0F               	movlw	15
   494  000124  0100               	movlb	0	; () banked
   495  000126  6F72               	movwf	(main@motorR+3)& (0+255),b
   496                           
   497                           ; BSR set to: 0
   498                           ;main.c: 64: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   499  000128  0E76               	movlw	118
   500  00012A  0100               	movlb	0	; () banked
   501  00012C  6F73               	movwf	(main@motorR+4)& (0+255),b
   502  00012E  0E0F               	movlw	15
   503  000130  0100               	movlb	0	; () banked
   504  000132  6F74               	movwf	(main@motorR+5)& (0+255),b
   505                           
   506                           ;main.c: 65: motorR.dir_pin=2;
   507  000134  0E02               	movlw	2
   508  000136  0100               	movlb	0	; () banked
   509  000138  6F75               	movwf	(main@motorR+6)& (0+255),b
   510                           
   511                           ;main.c: 66: motorR.PWMperiod=199;
   512  00013A  0E00               	movlw	0
   513  00013C  0100               	movlb	0	; () banked
   514  00013E  6F77               	movwf	(main@motorR+8)& (0+255),b
   515  000140  0EC7               	movlw	199
   516  000142  6F76               	movwf	(main@motorR+7)& (0+255),b
   517                           
   518                           ;main.c: 68: OSCCON = 0x72;
   519  000144  0E72               	movlw	114
   520  000146  6ED3               	movwf	4051,c	;volatile
   521  000148                     l53:
   522  000148  B4D3               	btfsc	4051,2,c	;volatile
   523  00014A  D05D               	goto	l1846
   524  00014C  D7FD               	goto	l53
   525  00014E                     l1812:
   526                           
   527                           ;main.c: 76: initMotorPWM();
   528  00014E  ECFB  F003         	call	_initMotorPWM	;wreg free
   529                           
   530                           ;main.c: 77: initRFID();
   531  000152  EC4B  F004         	call	_initRFID	;wreg free
   532                           
   533                           ;main.c: 78: initIR();
   534  000156  EC3A  F004         	call	_initIR	;wreg free
   535                           
   536                           ;main.c: 80: mode = 1;
   537  00015A  0E01               	movlw	1
   538  00015C  0100               	movlb	0	; () banked
   539  00015E  6F64               	movwf	main@mode& (0+255),b
   540                           
   541                           ; BSR set to: 0
   542                           ;main.c: 81: enableSensor(0, 1);
   543  000160  0E01               	movlw	1
   544  000162  6E0F               	movwf	enableSensor@status,c
   545  000164  0E00               	movlw	0
   546  000166  EC14  F004         	call	_enableSensor
   547                           
   548                           ;main.c: 82: enableSensor(1, 1);
   549  00016A  0E01               	movlw	1
   550  00016C  6E0F               	movwf	enableSensor@status,c
   551  00016E  0E01               	movlw	1
   552  000170  EC14  F004         	call	_enableSensor
   553                           
   554                           ;main.c: 84: fullSpeedBack(&motorL, &motorR);
   555  000174  0E66               	movlw	low main@motorL
   556  000176  6E2B               	movwf	fullSpeedBack@mL,c
   557  000178  0E00               	movlw	high main@motorL
   558  00017A  6E2C               	movwf	fullSpeedBack@mL+1,c
   559  00017C  0E6F               	movlw	low main@motorR
   560  00017E  6E2D               	movwf	fullSpeedBack@mR,c
   561  000180  0E00               	movlw	high main@motorR
   562  000182  6E2E               	movwf	fullSpeedBack@mR+1,c
   563  000184  ECE0  F003         	call	_fullSpeedBack	;wreg free
   564                           
   565                           ;main.c: 85: delay_s(1);
   566  000188  0E01               	movlw	1
   567  00018A  ECC4  F003         	call	_delay_s
   568                           
   569                           ;main.c: 86: stop(&motorL, &motorR);
   570  00018E  0E66               	movlw	low main@motorL
   571  000190  6E26               	movwf	stop@mL,c
   572  000192  0E00               	movlw	high main@motorL
   573  000194  6E27               	movwf	stop@mL+1,c
   574  000196  0E6F               	movlw	low main@motorR
   575  000198  6E28               	movwf	stop@mR,c
   576  00019A  0E00               	movlw	high main@motorR
   577  00019C  6E29               	movwf	stop@mR+1,c
   578  00019E  EC38  F002         	call	_stop	;wreg free
   579                           
   580                           ;main.c: 88: break;
   581  0001A2  D031               	goto	l1846
   582  0001A4                     l1826:
   583                           
   584                           ;main.c: 102: if (DirectionFound==0) {
   585  0001A4  0100               	movlb	0	; () banked
   586  0001A6  5165               	movf	main@DirectionFound& (0+255),w,b
   587  0001A8  0100               	movlb	0	; () banked
   588  0001AA  A4D8               	btfss	status,2,c
   589  0001AC  D00B               	goto	l1830
   590                           
   591                           ; BSR set to: 0
   592                           ;main.c: 104: DirectionFound = ScanIR(&motorL, &motorR);
   593  0001AE  0E66               	movlw	low main@motorL
   594  0001B0  6E2F               	movwf	ScanIR@mL,c
   595  0001B2  0E00               	movlw	high main@motorL
   596  0001B4  6E30               	movwf	ScanIR@mL+1,c
   597  0001B6  0E6F               	movlw	low main@motorR
   598  0001B8  6E31               	movwf	ScanIR@mR,c
   599  0001BA  0E00               	movlw	high main@motorR
   600  0001BC  6E32               	movwf	ScanIR@mR+1,c
   601  0001BE  ECAA  F001         	call	_ScanIR	;wreg free
   602  0001C2  D00E               	goto	L1
   603  0001C4                     l1830:
   604                           
   605                           ; BSR set to: 0
   606  0001C4  0100               	movlb	0	; () banked
   607  0001C6  0565               	decf	main@DirectionFound& (0+255),w,b
   608  0001C8  A4D8               	btfss	status,2,c
   609  0001CA  D00D               	goto	l1834
   610                           
   611                           ; BSR set to: 0
   612                           ;main.c: 107: DirectionFound = ScanIR(&motorL, &motorR);
   613  0001CC  0E66               	movlw	low main@motorL
   614  0001CE  6E2F               	movwf	ScanIR@mL,c
   615  0001D0  0E00               	movlw	high main@motorL
   616  0001D2  6E30               	movwf	ScanIR@mL+1,c
   617  0001D4  0E6F               	movlw	low main@motorR
   618  0001D6  6E31               	movwf	ScanIR@mR,c
   619  0001D8  0E00               	movlw	high main@motorR
   620  0001DA  6E32               	movwf	ScanIR@mR+1,c
   621  0001DC  ECAA  F001         	call	_ScanIR	;wreg free
   622  0001E0                     L1:
   623  0001E0  0100               	movlb	0	; () banked
   624  0001E2  6F65               	movwf	main@DirectionFound& (0+255),b
   625                           
   626                           ;main.c: 108: } else if (DirectionFound==2) {
   627  0001E4  D010               	goto	l1846
   628  0001E6                     l1834:
   629                           
   630                           ; BSR set to: 0
   631  0001E6  0E02               	movlw	2
   632  0001E8  0100               	movlb	0	; () banked
   633  0001EA  1965               	xorwf	main@DirectionFound& (0+255),w,b
   634  0001EC  A4D8               	btfss	status,2,c
   635  0001EE  D00B               	goto	l1846
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 109: mode=2;
   639  0001F0  0E02               	movlw	2
   640  0001F2  D007               	goto	L2
   641  0001F4                     l1838:
   642                           
   643                           ; BSR set to: 0
   644                           ;main.c: 117: delay_s(3);
   645  0001F4  0E03               	movlw	3
   646  0001F6  ECC4  F003         	call	_delay_s
   647                           
   648                           ;main.c: 118: DirectionFound=1;
   649  0001FA  0E01               	movlw	1
   650  0001FC  0100               	movlb	0	; () banked
   651  0001FE  6F65               	movwf	main@DirectionFound& (0+255),b
   652                           
   653                           ; BSR set to: 0
   654                           ;main.c: 119: mode = 1;
   655  000200  0E01               	movlw	1
   656  000202                     L2:
   657  000202  0100               	movlb	0	; () banked
   658  000204  6F64               	movwf	main@mode& (0+255),b
   659  000206                     l1846:
   660  000206  0100               	movlb	0	; () banked
   661  000208  5164               	movf	main@mode& (0+255),w,b
   662                           
   663                           ; Switch size 1, requested type "space"
   664                           ; Number of cases is 4, Range of values is 0 to 3
   665                           ; switch strategies available:
   666                           ; Name         Instructions Cycles
   667                           ; simple_byte           13     7 (average)
   668                           ;	Chosen strategy is simple_byte
   669  00020A  0A00               	xorlw	0	; case 0
   670  00020C  B4D8               	btfsc	status,2,c
   671  00020E  D79F               	goto	l1812
   672  000210  0A01               	xorlw	1	; case 1
   673  000212  B4D8               	btfsc	status,2,c
   674  000214  D7C7               	goto	l1826
   675  000216  0A03               	xorlw	3	; case 2
   676  000218  B4D8               	btfsc	status,2,c
   677  00021A  D7EC               	goto	l1838
   678  00021C  0A01               	xorlw	1	; case 3
   679                           
   680                           ; BSR set to: 0
   681                           
   682                           ; BSR set to: 0
   683  00021E  D7F3               	goto	l1846
   684  000220                     __end_of_main:
   685                           	opt stack 0
   686                           tblptru	equ	0xFF8
   687                           intcon	equ	0xFF2
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           status	equ	0xFD8
   691                           
   692 ;; *************** function _initRFID *****************
   693 ;; Defined at:
   694 ;;		line 5 in file "RFID_Reader.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;		None               void
   701 ;; Registers used:
   702 ;;		wreg, status,2
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         1       0       0       0
   710 ;;      Temps:          0       0       0       0
   711 ;;      Totals:         1       0       0       0
   712 ;;Total ram usage:        1 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text1
   723  000896                     __ptext1:
   724                           	opt stack 0
   725  000896                     _initRFID:
   726                           	opt stack 29
   727                           
   728                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   729                           
   730                           ; BSR set to: 0
   731                           ;incstack = 0
   732  000896  0E01               	movlw	1
   733  000898  6E0F               	movwf	_initRFID$1286,c
   734  00089A  5094               	movf	3988,w,c	;volatile
   735  00089C  C00F  FF94         	movff	_initRFID$1286,3988	;volatile
   736                           
   737                           ;RFID_Reader.c: 10: SPBRG=205;
   738  0008A0  0ECD               	movlw	205
   739  0008A2  6EAF               	movwf	4015,c	;volatile
   740                           
   741                           ;RFID_Reader.c: 11: SPBRGH=0;
   742  0008A4  0E00               	movlw	0
   743  0008A6  6EB0               	movwf	4016,c	;volatile
   744                           
   745                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   746  0008A8  86AA               	bsf	4010,3,c	;volatile
   747                           
   748                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   749  0008AA  84AC               	bsf	4012,2,c	;volatile
   750                           
   751                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   752  0008AC  88AB               	bsf	4011,4,c	;volatile
   753                           
   754                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   755  0008AE  8EAB               	bsf	4011,7,c	;volatile
   756                           
   757                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   758  0008B0  98AC               	bcf	4012,4,c	;volatile
   759                           
   760                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   761  0008B2  9CAB               	bcf	4011,6,c	;volatile
   762  0008B4  0012               	return		;funcret
   763  0008B6                     __end_of_initRFID:
   764                           	opt stack 0
   765                           tblptru	equ	0xFF8
   766                           intcon	equ	0xFF2
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           status	equ	0xFD8
   770                           
   771 ;; *************** function _initMotorPWM *****************
   772 ;; Defined at:
   773 ;;		line 4 in file "dc_motor.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;		None               void
   780 ;; Registers used:
   781 ;;		wreg, status,2
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   787 ;;      Params:         0       0       0       0
   788 ;;      Locals:         0       0       0       0
   789 ;;      Temps:          0       0       0       0
   790 ;;      Totals:         0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    1
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_main
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           	psect	text2
   802  0007F6                     __ptext2:
   803                           	opt stack 0
   804  0007F6                     _initMotorPWM:
   805                           	opt stack 29
   806                           
   807                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   808                           
   809                           ;incstack = 0
   810  0007F6  0E00               	movlw	0
   811  0007F8  6E7F               	movwf	3967,c	;volatile
   812                           
   813                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   814  0007FA  0E80               	movlw	128
   815  0007FC  6E7E               	movwf	3966,c	;volatile
   816                           
   817                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   818  0007FE  0E6F               	movlw	111
   819  000800  6E6F               	movwf	3951,c	;volatile
   820                           
   821                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   822  000802  0E00               	movlw	0
   823  000804  6E6E               	movwf	3950,c	;volatile
   824                           
   825                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   826  000806  0EC7               	movlw	199
   827  000808  6E7B               	movwf	3963,c	;volatile
   828                           
   829                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   830  00080A  0E00               	movlw	0
   831  00080C  6E7A               	movwf	3962,c	;volatile
   832                           
   833                           ;dc_motor.c: 13: PDC0L = 0<<2;
   834  00080E  0E00               	movlw	0
   835  000810  6E79               	movwf	3961,c	;volatile
   836                           
   837                           ;dc_motor.c: 14: PDC0H = 0>>6;
   838  000812  0E00               	movlw	0
   839  000814  6E78               	movwf	3960,c	;volatile
   840                           
   841                           ;dc_motor.c: 15: PDC1L = 0<<2;
   842  000816  0E00               	movlw	0
   843  000818  6E77               	movwf	3959,c	;volatile
   844                           
   845                           ;dc_motor.c: 16: PDC1H = 0>>6;
   846  00081A  0E00               	movlw	0
   847  00081C  6E76               	movwf	3958,c	;volatile
   848                           
   849                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   850  00081E  9093               	bcf	3987,0,c	;volatile
   851                           
   852                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   853  000820  9293               	bcf	3987,1,c	;volatile
   854                           
   855                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   856  000822  9493               	bcf	3987,2,c	;volatile
   857                           
   858                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   859  000824  9693               	bcf	3987,3,c	;volatile
   860  000826  0012               	return		;funcret
   861  000828                     __end_of_initMotorPWM:
   862                           	opt stack 0
   863                           tblptru	equ	0xFF8
   864                           intcon	equ	0xFF2
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           status	equ	0xFD8
   868                           
   869 ;; *************** function _initIR *****************
   870 ;; Defined at:
   871 ;;		line 30 in file "IR_Reading.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;		None               void
   878 ;; Registers used:
   879 ;;		wreg, status,2
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   885 ;;      Params:         0       0       0       0
   886 ;;      Locals:         0       0       0       0
   887 ;;      Temps:          0       0       0       0
   888 ;;      Totals:         0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_main
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text3
   900  000874                     __ptext3:
   901                           	opt stack 0
   902  000874                     _initIR:
   903                           	opt stack 29
   904                           
   905                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   906                           
   907                           ;incstack = 0
   908  000874  9489               	bcf	3977,2,c	;volatile
   909                           
   910                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   911  000876  9689               	bcf	3977,3,c	;volatile
   912                           
   913                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   914  000878  8492               	bsf	3986,2,c	;volatile
   915                           
   916                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   917  00087A  8692               	bsf	3986,3,c	;volatile
   918                           
   919                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   920  00087C  94B8               	bcf	4024,2,c	;volatile
   921                           
   922                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   923  00087E  96B8               	bcf	4024,3,c	;volatile
   924                           
   925                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   926  000880  9CB8               	bcf	4024,6,c	;volatile
   927                           
   928                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   929  000882  9EB8               	bcf	4024,7,c	;volatile
   930                           
   931                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   932  000884  0E06               	movlw	6
   933  000886  6E63               	movwf	3939,c	;volatile
   934                           
   935                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   936  000888  0E06               	movlw	6
   937  00088A  6E62               	movwf	3938,c	;volatile
   938                           
   939                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   940  00088C  9096               	bcf	3990,0,c	;volatile
   941                           
   942                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   943  00088E  9296               	bcf	3990,1,c	;volatile
   944                           
   945                           ;IR_Reading.c: 69: T5CON=0b01011001;
   946  000890  0E59               	movlw	89
   947  000892  6EB7               	movwf	4023,c	;volatile
   948  000894  0012               	return		;funcret
   949  000896                     __end_of_initIR:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           intcon	equ	0xFF2
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           status	equ	0xFD8
   956                           
   957 ;; *************** function _fullSpeedBack *****************
   958 ;; Defined at:
   959 ;;		line 125 in file "dc_motor.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   962 ;;		 -> main@motorL(9), 
   963 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   964 ;;		 -> main@motorR(9), 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;		None
   967 ;; Return value:  Size  Location     Type
   968 ;;		None               void
   969 ;; Registers used:
   970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   976 ;;      Params:         4       0       0       0
   977 ;;      Locals:         0       0       0       0
   978 ;;      Temps:          0       0       0       0
   979 ;;      Totals:         4       0       0       0
   980 ;;Total ram usage:        4 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    4
   983 ;; This function calls:
   984 ;;		_fullSpeedAhead
   985 ;; This function is called by:
   986 ;;		_main
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text4
   991  0007C0                     __ptext4:
   992                           	opt stack 0
   993  0007C0                     _fullSpeedBack:
   994                           	opt stack 26
   995                           
   996                           ;dc_motor.c: 128: mL->direction=0;
   997                           
   998                           ;incstack = 0
   999  0007C0  EE20 F001          	lfsr	2,1
  1000  0007C4  502B               	movf	fullSpeedBack@mL,w,c
  1001  0007C6  26D9               	addwf	fsr2l,f,c
  1002  0007C8  502C               	movf	fullSpeedBack@mL+1,w,c
  1003  0007CA  22DA               	addwfc	fsr2h,f,c
  1004  0007CC  0E00               	movlw	0
  1005  0007CE  6EDF               	movwf	indf2,c
  1006                           
  1007                           ;dc_motor.c: 129: mR->direction=0;
  1008  0007D0  EE20 F001          	lfsr	2,1
  1009  0007D4  502D               	movf	fullSpeedBack@mR,w,c
  1010  0007D6  26D9               	addwf	fsr2l,f,c
  1011  0007D8  502E               	movf	fullSpeedBack@mR+1,w,c
  1012  0007DA  22DA               	addwfc	fsr2h,f,c
  1013  0007DC  0E00               	movlw	0
  1014  0007DE  6EDF               	movwf	indf2,c
  1015                           
  1016                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1017  0007E0  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1018  0007E4  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1019  0007E8  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1020  0007EC  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1021  0007F0  ECC2  F002         	call	_fullSpeedAhead	;wreg free
  1022  0007F4  0012               	return		;funcret
  1023  0007F6                     __end_of_fullSpeedBack:
  1024                           	opt stack 0
  1025                           tblptru	equ	0xFF8
  1026                           intcon	equ	0xFF2
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           indf2	equ	0xFDF
  1030                           fsr2h	equ	0xFDA
  1031                           fsr2l	equ	0xFD9
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _enableSensor *****************
  1035 ;; Defined at:
  1036 ;;		line 106 in file "IR_Reading.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  sensor          1    wreg     unsigned char 
  1039 ;;  status          1   14[COMRAM] unsigned char 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  sensor          1   15[COMRAM] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;		None               void
  1044 ;; Registers used:
  1045 ;;		wreg, status,2, status,0
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1051 ;;      Params:         1       0       0       0
  1052 ;;      Locals:         1       0       0       0
  1053 ;;      Temps:          0       0       0       0
  1054 ;;      Totals:         2       0       0       0
  1055 ;;Total ram usage:        2 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    1
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;;		_ScanWithRange
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text5
  1067  000828                     __ptext5:
  1068                           	opt stack 0
  1069  000828                     _enableSensor:
  1070                           	opt stack 29
  1071                           
  1072                           ;incstack = 0
  1073                           ;enableSensor@sensor stored from wreg
  1074  000828  6E10               	movwf	enableSensor@sensor,c
  1075                           
  1076                           ;IR_Reading.c: 108: if (sensor==0){
  1077  00082A  5010               	movf	enableSensor@sensor,w,c
  1078  00082C  A4D8               	btfss	status,2,c
  1079  00082E  D006               	goto	l1728
  1080                           
  1081                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1082  000830  B00F               	btfsc	enableSensor@status,0,c
  1083  000832  D002               	bra	u965
  1084  000834  908D               	bcf	3981,0,c	;volatile
  1085  000836  D001               	bra	u966
  1086  000838                     u965:
  1087  000838  808D               	bsf	3981,0,c	;volatile
  1088  00083A                     u966:
  1089                           
  1090                           ;IR_Reading.c: 110: } else if (sensor==1){
  1091  00083A  0012               	return	
  1092  00083C                     l1728:
  1093  00083C  0410               	decf	enableSensor@sensor,w,c
  1094  00083E  A4D8               	btfss	status,2,c
  1095  000840  0012               	return	
  1096                           
  1097                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1098  000842  B00F               	btfsc	enableSensor@status,0,c
  1099  000844  D002               	bra	u985
  1100  000846  928D               	bcf	3981,1,c	;volatile
  1101  000848  D001               	bra	u986
  1102  00084A                     u985:
  1103  00084A  828D               	bsf	3981,1,c	;volatile
  1104  00084C                     u986:
  1105  00084C  0012               	return	
  1106  00084E                     __end_of_enableSensor:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           intcon	equ	0xFF2
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           indf2	equ	0xFDF
  1113                           fsr2h	equ	0xFDA
  1114                           fsr2l	equ	0xFD9
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function _ScanIR *****************
  1118 ;; Defined at:
  1119 ;;		line 27 in file "Movement.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1122 ;;		 -> main@motorL(9), 
  1123 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1124 ;;		 -> main@motorR(9), 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  SensorResult    4   54[COMRAM] unsigned int [2]
  1127 ;;  DirectionFou    2   52[COMRAM] unsigned int 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      unsigned char 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1137 ;;      Params:         4       0       0       0
  1138 ;;      Locals:         6       0       0       0
  1139 ;;      Temps:          2       0       0       0
  1140 ;;      Totals:        12       0       0       0
  1141 ;;Total ram usage:       12 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; Hardware stack levels required when called:    5
  1144 ;; This function calls:
  1145 ;;		_delay_s
  1146 ;;		_delay_tenth_s
  1147 ;;		_grabLeftIR
  1148 ;;		_grabRightIR
  1149 ;;		_stop
  1150 ;;		_turnLeft
  1151 ;;		_turnRight
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text6
  1158  000354                     __ptext6:
  1159                           	opt stack 0
  1160  000354                     _ScanIR:
  1161                           	opt stack 25
  1162                           
  1163                           ;Movement.c: 29: unsigned int SensorResult[2];
  1164                           ;Movement.c: 31: unsigned int DirectionFoundTolerance=100;
  1165                           
  1166                           ;incstack = 0
  1167  000354  0E00               	movlw	0
  1168  000356  6E36               	movwf	ScanIR@DirectionFoundTolerance+1,c
  1169  000358  0E64               	movlw	100
  1170  00035A  6E35               	movwf	ScanIR@DirectionFoundTolerance,c
  1171                           
  1172                           ;Movement.c: 34: stop(mL,mR);
  1173  00035C  C02F  F026         	movff	ScanIR@mL,stop@mL
  1174  000360  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1175  000364  C031  F028         	movff	ScanIR@mR,stop@mR
  1176  000368  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1177  00036C  EC38  F002         	call	_stop	;wreg free
  1178                           
  1179                           ;Movement.c: 35: delay_s(2);
  1180  000370  0E02               	movlw	2
  1181  000372  ECC4  F003         	call	_delay_s
  1182                           
  1183                           ;Movement.c: 36: SensorResult[0]=grabLeftIR();
  1184  000376  EC2C  F003         	call	_grabLeftIR	;wreg free
  1185  00037A  C00F  F037         	movff	?_grabLeftIR,ScanIR@SensorResult
  1186  00037E  C010  F038         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  1187                           
  1188                           ;Movement.c: 37: SensorResult[1]=grabRightIR();
  1189  000382  ECFA  F002         	call	_grabRightIR	;wreg free
  1190  000386  C00F  F039         	movff	?_grabRightIR,ScanIR@SensorResult+2
  1191  00038A  C010  F03A         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  1192                           
  1193                           ;Movement.c: 38: stop(mL,mR);
  1194  00038E  C02F  F026         	movff	ScanIR@mL,stop@mL
  1195  000392  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1196  000396  C031  F028         	movff	ScanIR@mR,stop@mR
  1197  00039A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1198  00039E  EC38  F002         	call	_stop	;wreg free
  1199                           
  1200                           ;Movement.c: 40: if (((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)
  1201                           ;Movement.c: 41: ||((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)) {
  1202  0003A2  C037  F033         	movff	ScanIR@SensorResult,??_ScanIR
  1203  0003A6  C038  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  1204  0003AA  1E33               	comf	??_ScanIR,f,c
  1205  0003AC  1E34               	comf	??_ScanIR+1,f,c
  1206  0003AE  4A33               	infsnz	??_ScanIR,f,c
  1207  0003B0  2A34               	incf	??_ScanIR+1,f,c
  1208  0003B2  5039               	movf	ScanIR@SensorResult+2,w,c
  1209  0003B4  2633               	addwf	??_ScanIR,f,c
  1210  0003B6  503A               	movf	ScanIR@SensorResult+3,w,c
  1211  0003B8  2234               	addwfc	??_ScanIR+1,f,c
  1212  0003BA  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1213  0003BC  5C33               	subwf	??_ScanIR,w,c
  1214  0003BE  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1215  0003C0  5834               	subwfb	??_ScanIR+1,w,c
  1216  0003C2  A0D8               	btfss	status,0,c
  1217  0003C4  D014               	goto	l1752
  1218  0003C6  EE20  F039         	lfsr	2,ScanIR@SensorResult+2
  1219  0003CA  CFDE F033          	movff	postinc2,??_ScanIR
  1220  0003CE  CFDD F034          	movff	postdec2,??_ScanIR+1
  1221  0003D2  1E33               	comf	??_ScanIR,f,c
  1222  0003D4  1E34               	comf	??_ScanIR+1,f,c
  1223  0003D6  4A33               	infsnz	??_ScanIR,f,c
  1224  0003D8  2A34               	incf	??_ScanIR+1,f,c
  1225  0003DA  5037               	movf	ScanIR@SensorResult,w,c
  1226  0003DC  2633               	addwf	??_ScanIR,f,c
  1227  0003DE  5038               	movf	ScanIR@SensorResult+1,w,c
  1228  0003E0  2234               	addwfc	??_ScanIR+1,f,c
  1229  0003E2  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1230  0003E4  5C33               	subwf	??_ScanIR,w,c
  1231  0003E6  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1232  0003E8  5834               	subwfb	??_ScanIR+1,w,c
  1233  0003EA  B0D8               	btfsc	status,0,c
  1234  0003EC  D002               	goto	l1758
  1235  0003EE                     l1752:
  1236                           
  1237                           ;Movement.c: 43: return 2;
  1238  0003EE  0E02               	movlw	2
  1239  0003F0  0012               	return	
  1240  0003F2                     l1758:
  1241  0003F2  5039               	movf	ScanIR@SensorResult+2,w,c
  1242  0003F4  5C37               	subwf	ScanIR@SensorResult,w,c
  1243  0003F6  503A               	movf	ScanIR@SensorResult+3,w,c
  1244  0003F8  5838               	subwfb	ScanIR@SensorResult+1,w,c
  1245  0003FA  B0D8               	btfsc	status,0,c
  1246  0003FC  D019               	goto	l1772
  1247                           
  1248                           ;Movement.c: 47: turnLeft(mL,mR);
  1249  0003FE  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1250  000402  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1251  000406  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1252  00040A  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1253  00040E  EC83  F003         	call	_turnLeft	;wreg free
  1254                           
  1255                           ;Movement.c: 48: delay_tenth_s(4);
  1256  000412  0E04               	movlw	4
  1257  000414  ECA8  F003         	call	_delay_tenth_s
  1258                           
  1259                           ;Movement.c: 49: stop(mL,mR);
  1260  000418  C02F  F026         	movff	ScanIR@mL,stop@mL
  1261  00041C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1262  000420  C031  F028         	movff	ScanIR@mR,stop@mR
  1263  000424  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1264  000428  EC38  F002         	call	_stop	;wreg free
  1265  00042C                     l1766:
  1266                           
  1267                           ;Movement.c: 50: return 0;
  1268  00042C  0E00               	movlw	0
  1269  00042E  0012               	return	
  1270  000430                     l1772:
  1271  000430  5037               	movf	ScanIR@SensorResult,w,c
  1272  000432  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1273  000434  5038               	movf	ScanIR@SensorResult+1,w,c
  1274  000436  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1275  000438  B0D8               	btfsc	status,0,c
  1276  00043A  D018               	goto	l1784
  1277                           
  1278                           ;Movement.c: 54: turnRight(mL,mR);
  1279  00043C  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  1280  000440  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  1281  000444  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  1282  000448  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  1283  00044C  EC5E  F003         	call	_turnRight	;wreg free
  1284                           
  1285                           ;Movement.c: 55: delay_tenth_s(4);
  1286  000450  0E04               	movlw	4
  1287  000452  ECA8  F003         	call	_delay_tenth_s
  1288                           
  1289                           ;Movement.c: 56: stop(mL,mR);
  1290  000456  C02F  F026         	movff	ScanIR@mL,stop@mL
  1291  00045A  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1292  00045E  C031  F028         	movff	ScanIR@mR,stop@mR
  1293  000462  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1294  000466  EC38  F002         	call	_stop	;wreg free
  1295  00046A  D7E0               	goto	l1766
  1296  00046C                     l1784:
  1297                           
  1298                           ;Movement.c: 58: }
  1299                           ;Movement.c: 59: return 0;
  1300  00046C  0E00               	movlw	0
  1301  00046E  0012               	return	
  1302  000470                     __end_of_ScanIR:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           intcon	equ	0xFF2
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           indf2	equ	0xFDF
  1309                           postinc2	equ	0xFDE
  1310                           postdec2	equ	0xFDD
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _turnRight *****************
  1316 ;; Defined at:
  1317 ;;		line 98 in file "dc_motor.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1320 ;;		 -> main@motorL(9), 
  1321 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1322 ;;		 -> main@motorR(9), 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1334 ;;      Params:         4       0       0       0
  1335 ;;      Locals:         0       0       0       0
  1336 ;;      Temps:          0       0       0       0
  1337 ;;      Totals:         4       0       0       0
  1338 ;;Total ram usage:        4 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    4
  1341 ;; This function calls:
  1342 ;;		_fullSpeedAhead
  1343 ;;		_stop
  1344 ;; This function is called by:
  1345 ;;		_ScanIR
  1346 ;;		_ScanWithRange
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text7
  1351  0006BC                     __ptext7:
  1352                           	opt stack 0
  1353  0006BC                     _turnRight:
  1354                           	opt stack 25
  1355                           
  1356                           ;dc_motor.c: 100: stop(mL, mR);
  1357                           
  1358                           ;incstack = 0
  1359  0006BC  C02B  F026         	movff	turnRight@mL,stop@mL
  1360  0006C0  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1361  0006C4  C02D  F028         	movff	turnRight@mR,stop@mR
  1362  0006C8  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1363  0006CC  EC38  F002         	call	_stop	;wreg free
  1364                           
  1365                           ;dc_motor.c: 102: mL->direction=1;
  1366  0006D0  EE20 F001          	lfsr	2,1
  1367  0006D4  502B               	movf	turnRight@mL,w,c
  1368  0006D6  26D9               	addwf	fsr2l,f,c
  1369  0006D8  502C               	movf	turnRight@mL+1,w,c
  1370  0006DA  22DA               	addwfc	fsr2h,f,c
  1371  0006DC  0E01               	movlw	1
  1372  0006DE  6EDF               	movwf	indf2,c
  1373                           
  1374                           ;dc_motor.c: 103: mR->direction=0;
  1375  0006E0  EE20 F001          	lfsr	2,1
  1376  0006E4  502D               	movf	turnRight@mR,w,c
  1377  0006E6  26D9               	addwf	fsr2l,f,c
  1378  0006E8  502E               	movf	turnRight@mR+1,w,c
  1379  0006EA  22DA               	addwfc	fsr2h,f,c
  1380  0006EC  0E00               	movlw	0
  1381  0006EE  6EDF               	movwf	indf2,c
  1382                           
  1383                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1384  0006F0  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1385  0006F4  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1386  0006F8  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1387  0006FC  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1388  000700  ECC2  F002         	call	_fullSpeedAhead	;wreg free
  1389  000704  0012               	return		;funcret
  1390  000706                     __end_of_turnRight:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           intcon	equ	0xFF2
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           indf2	equ	0xFDF
  1397                           postinc2	equ	0xFDE
  1398                           postdec2	equ	0xFDD
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function _turnLeft *****************
  1404 ;; Defined at:
  1405 ;;		line 87 in file "dc_motor.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1408 ;;		 -> main@motorL(9), 
  1409 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1410 ;;		 -> main@motorR(9), 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;		None
  1413 ;; Return value:  Size  Location     Type
  1414 ;;		None               void
  1415 ;; Registers used:
  1416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1422 ;;      Params:         4       0       0       0
  1423 ;;      Locals:         0       0       0       0
  1424 ;;      Temps:          0       0       0       0
  1425 ;;      Totals:         4       0       0       0
  1426 ;;Total ram usage:        4 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:    4
  1429 ;; This function calls:
  1430 ;;		_fullSpeedAhead
  1431 ;;		_stop
  1432 ;; This function is called by:
  1433 ;;		_ScanIR
  1434 ;;		_ScanWithRange
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text8
  1439  000706                     __ptext8:
  1440                           	opt stack 0
  1441  000706                     _turnLeft:
  1442                           	opt stack 25
  1443                           
  1444                           ;dc_motor.c: 89: stop(mL, mR);
  1445                           
  1446                           ;incstack = 0
  1447  000706  C02B  F026         	movff	turnLeft@mL,stop@mL
  1448  00070A  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1449  00070E  C02D  F028         	movff	turnLeft@mR,stop@mR
  1450  000712  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1451  000716  EC38  F002         	call	_stop	;wreg free
  1452                           
  1453                           ;dc_motor.c: 91: mL->direction=0;
  1454  00071A  EE20 F001          	lfsr	2,1
  1455  00071E  502B               	movf	turnLeft@mL,w,c
  1456  000720  26D9               	addwf	fsr2l,f,c
  1457  000722  502C               	movf	turnLeft@mL+1,w,c
  1458  000724  22DA               	addwfc	fsr2h,f,c
  1459  000726  0E00               	movlw	0
  1460  000728  6EDF               	movwf	indf2,c
  1461                           
  1462                           ;dc_motor.c: 92: mR->direction=1;
  1463  00072A  EE20 F001          	lfsr	2,1
  1464  00072E  502D               	movf	turnLeft@mR,w,c
  1465  000730  26D9               	addwf	fsr2l,f,c
  1466  000732  502E               	movf	turnLeft@mR+1,w,c
  1467  000734  22DA               	addwfc	fsr2h,f,c
  1468  000736  0E01               	movlw	1
  1469  000738  6EDF               	movwf	indf2,c
  1470                           
  1471                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1472  00073A  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1473  00073E  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1474  000742  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1475  000746  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1476  00074A  ECC2  F002         	call	_fullSpeedAhead	;wreg free
  1477  00074E  0012               	return		;funcret
  1478  000750                     __end_of_turnLeft:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           intcon	equ	0xFF2
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           indf2	equ	0xFDF
  1485                           postinc2	equ	0xFDE
  1486                           postdec2	equ	0xFDD
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _stop *****************
  1492 ;; Defined at:
  1493 ;;		line 67 in file "dc_motor.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1496 ;;		 -> main@motorL(9), 
  1497 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1498 ;;		 -> main@motorR(9), 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;		None               void
  1503 ;; Registers used:
  1504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1510 ;;      Params:         4       0       0       0
  1511 ;;      Locals:         0       0       0       0
  1512 ;;      Temps:          0       0       0       0
  1513 ;;      Totals:         4       0       0       0
  1514 ;;Total ram usage:        4 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    3
  1517 ;; This function calls:
  1518 ;;		_setMotorPWM
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;;		_turnLeft
  1522 ;;		_turnRight
  1523 ;;		_ScanIR
  1524 ;;		_ScanWithRange
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text9
  1529  000470                     __ptext9:
  1530                           	opt stack 0
  1531  000470                     _stop:
  1532                           	opt stack 27
  1533                           
  1534                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1535                           
  1536                           ;incstack = 0
  1537  000470  D028               	goto	l1602
  1538  000472                     l1588:
  1539                           
  1540                           ;dc_motor.c: 71: if(mL->power>0){
  1541  000472  C026  FFD9         	movff	stop@mL,fsr2l
  1542  000476  C027  FFDA         	movff	stop@mL+1,fsr2h
  1543  00047A  50DF               	movf	indf2,w,c
  1544  00047C  B4D8               	btfsc	status,2,c
  1545  00047E  D005               	goto	l1592
  1546                           
  1547                           ;dc_motor.c: 72: mL->power--;
  1548  000480  C026  FFD9         	movff	stop@mL,fsr2l
  1549  000484  C027  FFDA         	movff	stop@mL+1,fsr2h
  1550  000488  06DF               	decf	indf2,f,c
  1551  00048A                     l1592:
  1552                           
  1553                           ;dc_motor.c: 73: }
  1554                           ;dc_motor.c: 74: if(mR->power>0){
  1555  00048A  C028  FFD9         	movff	stop@mR,fsr2l
  1556  00048E  C029  FFDA         	movff	stop@mR+1,fsr2h
  1557  000492  50DF               	movf	indf2,w,c
  1558  000494  B4D8               	btfsc	status,2,c
  1559  000496  D005               	goto	l1596
  1560                           
  1561                           ;dc_motor.c: 75: mR->power--;
  1562  000498  C028  FFD9         	movff	stop@mR,fsr2l
  1563  00049C  C029  FFDA         	movff	stop@mR+1,fsr2h
  1564  0004A0  06DF               	decf	indf2,f,c
  1565  0004A2                     l1596:
  1566                           
  1567                           ;dc_motor.c: 76: }
  1568                           ;dc_motor.c: 77: setMotorPWM(mL);
  1569  0004A2  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1570  0004A6  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1571  0004AA  EC10  F001         	call	_setMotorPWM	;wreg free
  1572                           
  1573                           ;dc_motor.c: 78: setMotorPWM(mR);
  1574  0004AE  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1575  0004B2  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1576  0004B6  EC10  F001         	call	_setMotorPWM	;wreg free
  1577                           
  1578                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1579  0004BA  0E21               	movlw	33
  1580  0004BC                     u1237:
  1581  0004BC  2EE8               	decfsz	wreg,f,c
  1582  0004BE  D7FE               	goto	u1237
  1583  0004C0  F000               	nop	
  1584  0004C2                     l1602:
  1585  0004C2  C026  FFD9         	movff	stop@mL,fsr2l
  1586  0004C6  C027  FFDA         	movff	stop@mL+1,fsr2h
  1587  0004CA  50DF               	movf	indf2,w,c
  1588  0004CC  A4D8               	btfss	status,2,c
  1589  0004CE  D7D1               	goto	l1588
  1590  0004D0  C028  FFD9         	movff	stop@mR,fsr2l
  1591  0004D4  C029  FFDA         	movff	stop@mR+1,fsr2h
  1592  0004D8  50DF               	movf	indf2,w,c
  1593  0004DA  A4D8               	btfss	status,2,c
  1594  0004DC  D7CA               	goto	l1588
  1595                           
  1596                           ;dc_motor.c: 80: }
  1597                           ;dc_motor.c: 81: mL->direction=1;
  1598  0004DE  EE20 F001          	lfsr	2,1
  1599  0004E2  5026               	movf	stop@mL,w,c
  1600  0004E4  26D9               	addwf	fsr2l,f,c
  1601  0004E6  5027               	movf	stop@mL+1,w,c
  1602  0004E8  22DA               	addwfc	fsr2h,f,c
  1603  0004EA  0E01               	movlw	1
  1604  0004EC  6EDF               	movwf	indf2,c
  1605                           
  1606                           ;dc_motor.c: 82: mR->direction=1;
  1607  0004EE  EE20 F001          	lfsr	2,1
  1608  0004F2  5028               	movf	stop@mR,w,c
  1609  0004F4  26D9               	addwf	fsr2l,f,c
  1610  0004F6  5029               	movf	stop@mR+1,w,c
  1611  0004F8  22DA               	addwfc	fsr2h,f,c
  1612  0004FA  0E01               	movlw	1
  1613  0004FC  6EDF               	movwf	indf2,c
  1614  0004FE  0012               	return		;funcret
  1615  000500                     __end_of_stop:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           intcon	equ	0xFF2
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           postdec2	equ	0xFDD
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _fullSpeedAhead *****************
  1629 ;; Defined at:
  1630 ;;		line 108 in file "dc_motor.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1633 ;;		 -> main@motorL(9), 
  1634 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1635 ;;		 -> main@motorR(9), 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;		None               void
  1640 ;; Registers used:
  1641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1647 ;;      Params:         4       0       0       0
  1648 ;;      Locals:         0       0       0       0
  1649 ;;      Temps:          1       0       0       0
  1650 ;;      Totals:         5       0       0       0
  1651 ;;Total ram usage:        5 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    3
  1654 ;; This function calls:
  1655 ;;		_setMotorPWM
  1656 ;; This function is called by:
  1657 ;;		_turnLeft
  1658 ;;		_turnRight
  1659 ;;		_fullSpeedBack
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text10
  1664  000584                     __ptext10:
  1665                           	opt stack 0
  1666  000584                     _fullSpeedAhead:
  1667                           	opt stack 26
  1668                           
  1669                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  1670                           
  1671                           ;incstack = 0
  1672  000584  D028               	goto	l135
  1673  000586                     l1610:
  1674                           
  1675                           ;dc_motor.c: 112: if(mL->power<100){
  1676  000586  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1677  00058A  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1678  00058E  0E64               	movlw	100
  1679  000590  60DF               	cpfslt	indf2,c
  1680  000592  D005               	goto	l1614
  1681                           
  1682                           ;dc_motor.c: 113: mL->power++;
  1683  000594  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1684  000598  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1685  00059C  2ADF               	incf	indf2,f,c
  1686  00059E                     l1614:
  1687                           
  1688                           ;dc_motor.c: 114: }
  1689                           ;dc_motor.c: 115: if(mR->power<100){
  1690  00059E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1691  0005A2  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1692  0005A6  0E64               	movlw	100
  1693  0005A8  60DF               	cpfslt	indf2,c
  1694  0005AA  D005               	goto	l1618
  1695                           
  1696                           ;dc_motor.c: 116: mR->power++;
  1697  0005AC  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1698  0005B0  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1699  0005B4  2ADF               	incf	indf2,f,c
  1700  0005B6                     l1618:
  1701                           
  1702                           ;dc_motor.c: 117: }
  1703                           ;dc_motor.c: 118: setMotorPWM(mL);
  1704  0005B6  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1705  0005BA  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1706  0005BE  EC10  F001         	call	_setMotorPWM	;wreg free
  1707                           
  1708                           ;dc_motor.c: 119: setMotorPWM(mR);
  1709  0005C2  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1710  0005C6  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1711  0005CA  EC10  F001         	call	_setMotorPWM	;wreg free
  1712                           
  1713                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1714  0005CE  0E21               	movlw	33
  1715  0005D0                     u1247:
  1716  0005D0  2EE8               	decfsz	wreg,f,c
  1717  0005D2  D7FE               	goto	u1247
  1718  0005D4  F000               	nop	
  1719  0005D6                     l135:
  1720  0005D6  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1721  0005DA  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1722  0005DE  0E63               	movlw	99
  1723  0005E0  64DF               	cpfsgt	indf2,c
  1724  0005E2  D7D1               	goto	l1610
  1725  0005E4  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1726  0005E8  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1727  0005EC  0E63               	movlw	99
  1728  0005EE  64DF               	cpfsgt	indf2,c
  1729  0005F0  D7CA               	goto	l1610
  1730  0005F2  0012               	return	
  1731  0005F4                     __end_of_fullSpeedAhead:
  1732                           	opt stack 0
  1733                           tblptru	equ	0xFF8
  1734                           intcon	equ	0xFF2
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           postdec2	equ	0xFDD
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _setMotorPWM *****************
  1745 ;; Defined at:
  1746 ;;		line 26 in file "dc_motor.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1749 ;;		 -> main@motorR(9), main@motorL(9), 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  PWMduty         2   35[COMRAM] int 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1761 ;;      Params:         2       0       0       0
  1762 ;;      Locals:         2       0       0       0
  1763 ;;      Temps:          5       0       0       0
  1764 ;;      Totals:         9       0       0       0
  1765 ;;Total ram usage:        9 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    2
  1768 ;; This function calls:
  1769 ;;		___awdiv
  1770 ;;		___wmul
  1771 ;; This function is called by:
  1772 ;;		_stop
  1773 ;;		_fullSpeedAhead
  1774 ;;		_setMotorFullSpeed
  1775 ;;		_stopMotor
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text11
  1780  000220                     __ptext11:
  1781                           	opt stack 0
  1782  000220                     _setMotorPWM:
  1783                           	opt stack 27
  1784                           
  1785                           ;dc_motor.c: 28: int PWMduty;
  1786                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1787                           
  1788                           ;incstack = 0
  1789  000220  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1790  000224  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1791  000228  50DF               	movf	indf2,w,c
  1792  00022A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1793  00022C  501F               	movf	??_setMotorPWM,w,c
  1794  00022E  6E0F               	movwf	___wmul@multiplier,c
  1795  000230  6A10               	clrf	___wmul@multiplier+1,c
  1796  000232  EE20 F007          	lfsr	2,7
  1797  000236  501D               	movf	setMotorPWM@m,w,c
  1798  000238  26D9               	addwf	fsr2l,f,c
  1799  00023A  501E               	movf	setMotorPWM@m+1,w,c
  1800  00023C  22DA               	addwfc	fsr2h,f,c
  1801  00023E  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1802  000242  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1803  000246  EC27  F004         	call	___wmul	;wreg free
  1804  00024A  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1805  00024E  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1806  000252  0E00               	movlw	0
  1807  000254  6E18               	movwf	___awdiv@divisor+1,c
  1808  000256  0E64               	movlw	100
  1809  000258  6E17               	movwf	___awdiv@divisor,c
  1810  00025A  EC80  F002         	call	___awdiv	;wreg free
  1811  00025E  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1812  000262  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1813                           
  1814                           ;dc_motor.c: 32: if (m->direction)
  1815  000266  EE20 F001          	lfsr	2,1
  1816  00026A  501D               	movf	setMotorPWM@m,w,c
  1817  00026C  26D9               	addwf	fsr2l,f,c
  1818  00026E  501E               	movf	setMotorPWM@m+1,w,c
  1819  000270  22DA               	addwfc	fsr2h,f,c
  1820  000272  50DF               	movf	indf2,w,c
  1821  000274  B4D8               	btfsc	status,2,c
  1822  000276  D02C               	goto	l1584
  1823                           
  1824                           ;dc_motor.c: 33: {
  1825                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1826  000278  EE20 F006          	lfsr	2,6
  1827  00027C  501D               	movf	setMotorPWM@m,w,c
  1828  00027E  26D9               	addwf	fsr2l,f,c
  1829  000280  501E               	movf	setMotorPWM@m+1,w,c
  1830  000282  22DA               	addwfc	fsr2h,f,c
  1831  000284  50DF               	movf	indf2,w,c
  1832  000286  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1833  000288  0E01               	movlw	1
  1834  00028A  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1835  00028C  2A1F               	incf	??_setMotorPWM,f,c
  1836  00028E  D002               	goto	u784
  1837  000290                     u785:
  1838  000290  90D8               	bcf	status,0,c
  1839  000292  3620               	rlcf	??_setMotorPWM+1,f,c
  1840  000294                     u784:
  1841  000294  2E1F               	decfsz	??_setMotorPWM,f,c
  1842  000296  D7FC               	goto	u785
  1843  000298  5020               	movf	??_setMotorPWM+1,w,c
  1844  00029A  108A               	iorwf	3978,w,c	;volatile
  1845  00029C  6E8A               	movwf	3978,c	;volatile
  1846                           
  1847                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1848  00029E  EE20 F007          	lfsr	2,7
  1849  0002A2  501D               	movf	setMotorPWM@m,w,c
  1850  0002A4  26D9               	addwf	fsr2l,f,c
  1851  0002A6  501E               	movf	setMotorPWM@m+1,w,c
  1852  0002A8  22DA               	addwfc	fsr2h,f,c
  1853  0002AA  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1854  0002AE  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1855  0002B2  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1856  0002B6  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1857  0002BA  1E21               	comf	??_setMotorPWM+2,f,c
  1858  0002BC  1E22               	comf	??_setMotorPWM+3,f,c
  1859  0002BE  4A21               	infsnz	??_setMotorPWM+2,f,c
  1860  0002C0  2A22               	incf	??_setMotorPWM+3,f,c
  1861  0002C2  501F               	movf	??_setMotorPWM,w,c
  1862  0002C4  2421               	addwf	??_setMotorPWM+2,w,c
  1863  0002C6  6E24               	movwf	setMotorPWM@PWMduty,c
  1864  0002C8  5020               	movf	??_setMotorPWM+1,w,c
  1865  0002CA  2022               	addwfc	??_setMotorPWM+3,w,c
  1866  0002CC  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1867                           
  1868                           ;dc_motor.c: 36: }
  1869  0002CE  D014               	goto	l105
  1870  0002D0                     l1584:
  1871                           
  1872                           ;dc_motor.c: 37: else
  1873                           ;dc_motor.c: 38: {
  1874                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  1875  0002D0  EE20 F006          	lfsr	2,6
  1876  0002D4  501D               	movf	setMotorPWM@m,w,c
  1877  0002D6  26D9               	addwf	fsr2l,f,c
  1878  0002D8  501E               	movf	setMotorPWM@m+1,w,c
  1879  0002DA  22DA               	addwfc	fsr2h,f,c
  1880  0002DC  50DF               	movf	indf2,w,c
  1881  0002DE  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1882  0002E0  0E01               	movlw	1
  1883  0002E2  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1884  0002E4  2A1F               	incf	??_setMotorPWM,f,c
  1885  0002E6  D002               	goto	u794
  1886  0002E8                     u795:
  1887  0002E8  90D8               	bcf	status,0,c
  1888  0002EA  3620               	rlcf	??_setMotorPWM+1,f,c
  1889  0002EC                     u794:
  1890  0002EC  2E1F               	decfsz	??_setMotorPWM,f,c
  1891  0002EE  D7FC               	goto	u795
  1892  0002F0  5020               	movf	??_setMotorPWM+1,w,c
  1893  0002F2  0AFF               	xorlw	255
  1894  0002F4  148A               	andwf	3978,w,c	;volatile
  1895  0002F6  6E8A               	movwf	3978,c	;volatile
  1896  0002F8                     l105:
  1897                           
  1898                           ;dc_motor.c: 40: }
  1899                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  1900  0002F8  EE20 F002          	lfsr	2,2
  1901  0002FC  501D               	movf	setMotorPWM@m,w,c
  1902  0002FE  26D9               	addwf	fsr2l,f,c
  1903  000300  501E               	movf	setMotorPWM@m+1,w,c
  1904  000302  22DA               	addwfc	fsr2h,f,c
  1905  000304  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1906  000308  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1907  00030C  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1908  000310  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1909  000314  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1910  000316  46E8               	rlncf	wreg,f,c
  1911  000318  0BFC               	andlw	252
  1912  00031A  6EDF               	movwf	indf2,c
  1913                           
  1914                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  1915  00031C  EE20 F004          	lfsr	2,4
  1916  000320  501D               	movf	setMotorPWM@m,w,c
  1917  000322  26D9               	addwf	fsr2l,f,c
  1918  000324  501E               	movf	setMotorPWM@m+1,w,c
  1919  000326  22DA               	addwfc	fsr2h,f,c
  1920  000328  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1921  00032C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1922  000330  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1923  000334  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1924  000338  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1925  00033C  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1926  000340  0E06               	movlw	6
  1927  000342  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  1928  000344                     u805:
  1929  000344  3422               	rlcf	??_setMotorPWM+3,w,c
  1930  000346  3222               	rrcf	??_setMotorPWM+3,f,c
  1931  000348  3221               	rrcf	??_setMotorPWM+2,f,c
  1932  00034A  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1933  00034C  D7FB               	goto	u805
  1934  00034E  5021               	movf	??_setMotorPWM+2,w,c
  1935  000350  6EDF               	movwf	indf2,c
  1936  000352  0012               	return		;funcret
  1937  000354                     __end_of_setMotorPWM:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           indf2	equ	0xFDF
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function ___wmul *****************
  1951 ;; Defined at:
  1952 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  multiplier      2   14[COMRAM] unsigned int 
  1955 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  product         2   18[COMRAM] unsigned int 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2   14[COMRAM] unsigned int 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0, prodl, prodh
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1967 ;;      Params:         4       0       0       0
  1968 ;;      Locals:         2       0       0       0
  1969 ;;      Temps:          0       0       0       0
  1970 ;;      Totals:         6       0       0       0
  1971 ;;Total ram usage:        6 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_setMotorPWM
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text12
  1982  00084E                     __ptext12:
  1983                           	opt stack 0
  1984  00084E                     ___wmul:
  1985                           	opt stack 27
  1986                           
  1987                           ;incstack = 0
  1988  00084E  500F               	movf	___wmul@multiplier,w,c
  1989  000850  0211               	mulwf	___wmul@multiplicand,c
  1990  000852  CFF3 F013          	movff	prodl,___wmul@product
  1991  000856  CFF4 F014          	movff	prodh,___wmul@product+1
  1992  00085A  500F               	movf	___wmul@multiplier,w,c
  1993  00085C  0212               	mulwf	___wmul@multiplicand+1,c
  1994  00085E  50F3               	movf	prodl,w,c
  1995  000860  2614               	addwf	___wmul@product+1,f,c
  1996  000862  5010               	movf	___wmul@multiplier+1,w,c
  1997  000864  0211               	mulwf	___wmul@multiplicand,c
  1998  000866  50F3               	movf	prodl,w,c
  1999  000868  2614               	addwf	___wmul@product+1,f,c
  2000  00086A  C013  F00F         	movff	___wmul@product,?___wmul
  2001  00086E  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2002  000872  0012               	return	
  2003  000874                     __end_of___wmul:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           prodh	equ	0xFF4
  2007                           prodl	equ	0xFF3
  2008                           intcon	equ	0xFF2
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           indf2	equ	0xFDF
  2012                           postinc2	equ	0xFDE
  2013                           postdec2	equ	0xFDD
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function ___awdiv *****************
  2019 ;; Defined at:
  2020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  dividend        2   20[COMRAM] int 
  2023 ;;  divisor         2   22[COMRAM] int 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  quotient        2   26[COMRAM] int 
  2026 ;;  sign            1   25[COMRAM] unsigned char 
  2027 ;;  counter         1   24[COMRAM] unsigned char 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2   20[COMRAM] int 
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2037 ;;      Params:         4       0       0       0
  2038 ;;      Locals:         4       0       0       0
  2039 ;;      Temps:          0       0       0       0
  2040 ;;      Totals:         8       0       0       0
  2041 ;;Total ram usage:        8 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_setMotorPWM
  2048 ;;		_ScanWithRange
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text13
  2053  000500                     __ptext13:
  2054                           	opt stack 0
  2055  000500                     ___awdiv:
  2056                           	opt stack 27
  2057                           
  2058                           ;incstack = 0
  2059  000500  0E00               	movlw	0
  2060  000502  6E1A               	movwf	___awdiv@sign,c
  2061  000504  AE18               	btfss	___awdiv@divisor+1,7,c
  2062  000506  D006               	goto	l1542
  2063  000508  6C17               	negf	___awdiv@divisor,c
  2064  00050A  1E18               	comf	___awdiv@divisor+1,f,c
  2065  00050C  B0D8               	btfsc	status,0,c
  2066  00050E  2A18               	incf	___awdiv@divisor+1,f,c
  2067  000510  0E01               	movlw	1
  2068  000512  6E1A               	movwf	___awdiv@sign,c
  2069  000514                     l1542:
  2070  000514  AE16               	btfss	___awdiv@dividend+1,7,c
  2071  000516  D006               	goto	l1548
  2072  000518  6C15               	negf	___awdiv@dividend,c
  2073  00051A  1E16               	comf	___awdiv@dividend+1,f,c
  2074  00051C  B0D8               	btfsc	status,0,c
  2075  00051E  2A16               	incf	___awdiv@dividend+1,f,c
  2076  000520  0E01               	movlw	1
  2077  000522  1A1A               	xorwf	___awdiv@sign,f,c
  2078  000524                     l1548:
  2079  000524  0E00               	movlw	0
  2080  000526  6E1C               	movwf	___awdiv@quotient+1,c
  2081  000528  0E00               	movlw	0
  2082  00052A  6E1B               	movwf	___awdiv@quotient,c
  2083  00052C  5017               	movf	___awdiv@divisor,w,c
  2084  00052E  1018               	iorwf	___awdiv@divisor+1,w,c
  2085  000530  B4D8               	btfsc	status,2,c
  2086  000532  D01C               	goto	l1570
  2087  000534  0E01               	movlw	1
  2088  000536  6E19               	movwf	___awdiv@counter,c
  2089  000538  D004               	goto	l1556
  2090  00053A                     l1554:
  2091  00053A  90D8               	bcf	status,0,c
  2092  00053C  3617               	rlcf	___awdiv@divisor,f,c
  2093  00053E  3618               	rlcf	___awdiv@divisor+1,f,c
  2094  000540  2A19               	incf	___awdiv@counter,f,c
  2095  000542                     l1556:
  2096  000542  AE18               	btfss	___awdiv@divisor+1,7,c
  2097  000544  D7FA               	goto	l1554
  2098  000546                     l1558:
  2099  000546  90D8               	bcf	status,0,c
  2100  000548  361B               	rlcf	___awdiv@quotient,f,c
  2101  00054A  361C               	rlcf	___awdiv@quotient+1,f,c
  2102  00054C  5017               	movf	___awdiv@divisor,w,c
  2103  00054E  5C15               	subwf	___awdiv@dividend,w,c
  2104  000550  5018               	movf	___awdiv@divisor+1,w,c
  2105  000552  5816               	subwfb	___awdiv@dividend+1,w,c
  2106  000554  A0D8               	btfss	status,0,c
  2107  000556  D005               	goto	l1566
  2108  000558  5017               	movf	___awdiv@divisor,w,c
  2109  00055A  5E15               	subwf	___awdiv@dividend,f,c
  2110  00055C  5018               	movf	___awdiv@divisor+1,w,c
  2111  00055E  5A16               	subwfb	___awdiv@dividend+1,f,c
  2112  000560  801B               	bsf	___awdiv@quotient,0,c
  2113  000562                     l1566:
  2114  000562  90D8               	bcf	status,0,c
  2115  000564  3218               	rrcf	___awdiv@divisor+1,f,c
  2116  000566  3217               	rrcf	___awdiv@divisor,f,c
  2117  000568  2E19               	decfsz	___awdiv@counter,f,c
  2118  00056A  D7ED               	goto	l1558
  2119  00056C                     l1570:
  2120  00056C  501A               	movf	___awdiv@sign,w,c
  2121  00056E  B4D8               	btfsc	status,2,c
  2122  000570  D004               	goto	l1574
  2123  000572  6C1B               	negf	___awdiv@quotient,c
  2124  000574  1E1C               	comf	___awdiv@quotient+1,f,c
  2125  000576  B0D8               	btfsc	status,0,c
  2126  000578  2A1C               	incf	___awdiv@quotient+1,f,c
  2127  00057A                     l1574:
  2128  00057A  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2129  00057E  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2130  000582  0012               	return	
  2131  000584                     __end_of___awdiv:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           postdec2	equ	0xFDD
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _grabRightIR *****************
  2147 ;; Defined at:
  2148 ;;		line 74 in file "IR_Reading.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2153 ;;  i               1   20[COMRAM] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  2   14[COMRAM] unsigned int 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2163 ;;      Params:         2       0       0       0
  2164 ;;      Locals:         3       0       0       0
  2165 ;;      Temps:          2       0       0       0
  2166 ;;      Totals:         7       0       0       0
  2167 ;;Total ram usage:        7 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    1
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		_ScanIR
  2174 ;;		_ScanWithRange
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text14
  2179  0005F4                     __ptext14:
  2180                           	opt stack 0
  2181  0005F4                     _grabRightIR:
  2182                           	opt stack 28
  2183                           
  2184                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2185                           
  2186                           ;incstack = 0
  2187  0005F4  0E00               	movlw	0
  2188  0005F6  6E14               	movwf	grabRightIR@IR_signal+1,c
  2189  0005F8  0E00               	movlw	0
  2190  0005FA  6E13               	movwf	grabRightIR@IR_signal,c
  2191                           
  2192                           ;IR_Reading.c: 77: unsigned char i=0;
  2193  0005FC  0E00               	movlw	0
  2194  0005FE  6E15               	movwf	grabRightIR@i,c
  2195                           
  2196                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  2197  000600  0E00               	movlw	0
  2198  000602  6E15               	movwf	grabRightIR@i,c
  2199  000604                     l1672:
  2200  000604  0E03               	movlw	3
  2201  000606  6415               	cpfsgt	grabRightIR@i,c
  2202  000608  D001               	goto	l1676
  2203  00060A  D017               	goto	l1682
  2204  00060C                     l1676:
  2205                           
  2206                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2207  00060C  5068               	movf	3944,w,c	;volatile
  2208  00060E  CF69 F011          	movff	3945,??_grabRightIR	;volatile
  2209  000612  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2210  000614  C011  F012         	movff	??_grabRightIR,??_grabRightIR+1
  2211  000618  6A11               	clrf	??_grabRightIR,c
  2212  00061A  1211               	iorwf	??_grabRightIR,f,c
  2213  00061C  0E00               	movlw	0
  2214  00061E  1212               	iorwf	??_grabRightIR+1,f,c
  2215  000620  5011               	movf	??_grabRightIR,w,c
  2216  000622  2613               	addwf	grabRightIR@IR_signal,f,c
  2217  000624  5012               	movf	??_grabRightIR+1,w,c
  2218  000626  2214               	addwfc	grabRightIR@IR_signal+1,f,c
  2219                           
  2220                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  2221  000628  0E82               	movlw	130
  2222  00062A  6E11               	movwf	??_grabRightIR& (0+255),c
  2223  00062C  0EDE               	movlw	222
  2224  00062E                     u1257:
  2225  00062E  2EE8               	decfsz	wreg,f,c
  2226  000630  D7FE               	goto	u1257
  2227  000632  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2228  000634  D7FC               	goto	u1257
  2229  000636  2A15               	incf	grabRightIR@i,f,c
  2230  000638  D7E5               	goto	l1672
  2231  00063A                     l1682:
  2232                           
  2233                           ;IR_Reading.c: 83: }
  2234                           ;IR_Reading.c: 85: return IR_signal>>2;
  2235  00063A  C013  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2236  00063E  C014  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2237  000642  90D8               	bcf	status,0,c
  2238  000644  3212               	rrcf	??_grabRightIR+1,f,c
  2239  000646  3211               	rrcf	??_grabRightIR,f,c
  2240  000648  90D8               	bcf	status,0,c
  2241  00064A  3212               	rrcf	??_grabRightIR+1,f,c
  2242  00064C  3211               	rrcf	??_grabRightIR,f,c
  2243  00064E  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2244  000652  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2245  000656  0012               	return	
  2246  000658                     __end_of_grabRightIR:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           indf2	equ	0xFDF
  2255                           postinc2	equ	0xFDE
  2256                           postdec2	equ	0xFDD
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function _grabLeftIR *****************
  2262 ;; Defined at:
  2263 ;;		line 90 in file "IR_Reading.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;		None
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2268 ;;  i               1   20[COMRAM] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  2   14[COMRAM] unsigned int 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2278 ;;      Params:         2       0       0       0
  2279 ;;      Locals:         3       0       0       0
  2280 ;;      Temps:          2       0       0       0
  2281 ;;      Totals:         7       0       0       0
  2282 ;;Total ram usage:        7 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    1
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_ScanIR
  2289 ;;		_ScanWithRange
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text15
  2294  000658                     __ptext15:
  2295                           	opt stack 0
  2296  000658                     _grabLeftIR:
  2297                           	opt stack 28
  2298                           
  2299                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  2300                           
  2301                           ;incstack = 0
  2302  000658  0E00               	movlw	0
  2303  00065A  6E14               	movwf	grabLeftIR@IR_signal+1,c
  2304  00065C  0E00               	movlw	0
  2305  00065E  6E13               	movwf	grabLeftIR@IR_signal,c
  2306                           
  2307                           ;IR_Reading.c: 93: unsigned char i=0;
  2308  000660  0E00               	movlw	0
  2309  000662  6E15               	movwf	grabLeftIR@i,c
  2310                           
  2311                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  2312  000664  0E00               	movlw	0
  2313  000666  6E15               	movwf	grabLeftIR@i,c
  2314  000668                     l1656:
  2315  000668  0E03               	movlw	3
  2316  00066A  6415               	cpfsgt	grabLeftIR@i,c
  2317  00066C  D001               	goto	l1660
  2318  00066E  D017               	goto	l1666
  2319  000670                     l1660:
  2320                           
  2321                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 8) | CAP2BUFL);
  2322  000670  5066               	movf	3942,w,c	;volatile
  2323  000672  CF67 F011          	movff	3943,??_grabLeftIR	;volatile
  2324  000676  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  2325  000678  C011  F012         	movff	??_grabLeftIR,??_grabLeftIR+1
  2326  00067C  6A11               	clrf	??_grabLeftIR,c
  2327  00067E  1211               	iorwf	??_grabLeftIR,f,c
  2328  000680  0E00               	movlw	0
  2329  000682  1212               	iorwf	??_grabLeftIR+1,f,c
  2330  000684  5011               	movf	??_grabLeftIR,w,c
  2331  000686  2613               	addwf	grabLeftIR@IR_signal,f,c
  2332  000688  5012               	movf	??_grabLeftIR+1,w,c
  2333  00068A  2214               	addwfc	grabLeftIR@IR_signal+1,f,c
  2334                           
  2335                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  2336  00068C  0E82               	movlw	130
  2337  00068E  6E11               	movwf	??_grabLeftIR& (0+255),c
  2338  000690  0EDE               	movlw	222
  2339  000692                     u1267:
  2340  000692  2EE8               	decfsz	wreg,f,c
  2341  000694  D7FE               	goto	u1267
  2342  000696  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  2343  000698  D7FC               	goto	u1267
  2344  00069A  2A15               	incf	grabLeftIR@i,f,c
  2345  00069C  D7E5               	goto	l1656
  2346  00069E                     l1666:
  2347                           
  2348                           ;IR_Reading.c: 99: }
  2349                           ;IR_Reading.c: 101: return IR_signal>>2;
  2350  00069E  C013  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  2351  0006A2  C014  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  2352  0006A6  90D8               	bcf	status,0,c
  2353  0006A8  3212               	rrcf	??_grabLeftIR+1,f,c
  2354  0006AA  3211               	rrcf	??_grabLeftIR,f,c
  2355  0006AC  90D8               	bcf	status,0,c
  2356  0006AE  3212               	rrcf	??_grabLeftIR+1,f,c
  2357  0006B0  3211               	rrcf	??_grabLeftIR,f,c
  2358  0006B2  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  2359  0006B6  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  2360  0006BA  0012               	return	
  2361  0006BC                     __end_of_grabLeftIR:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           intcon	equ	0xFF2
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _delay_tenth_s *****************
  2377 ;; Defined at:
  2378 ;;		line 19 in file "Movement.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  tenth_second    1    wreg     unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2383 ;;  i               2   16[COMRAM] unsigned int 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;		None               void
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2393 ;;      Params:         0       0       0       0
  2394 ;;      Locals:         3       0       0       0
  2395 ;;      Temps:          1       0       0       0
  2396 ;;      Totals:         4       0       0       0
  2397 ;;Total ram usage:        4 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    1
  2400 ;; This function calls:
  2401 ;;		Nothing
  2402 ;; This function is called by:
  2403 ;;		_ScanIR
  2404 ;;		_ScanWithRange
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text16
  2409  000750                     __ptext16:
  2410                           	opt stack 0
  2411  000750                     _delay_tenth_s:
  2412                           	opt stack 28
  2413                           
  2414                           ;incstack = 0
  2415                           ;delay_tenth_s@tenth_seconds stored from wreg
  2416  000750  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2417                           
  2418                           ;Movement.c: 20: unsigned int i=0;
  2419  000752  0E00               	movlw	0
  2420  000754  6E12               	movwf	delay_tenth_s@i+1,c
  2421  000756  0E00               	movlw	0
  2422  000758  6E11               	movwf	delay_tenth_s@i,c
  2423                           
  2424                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2425  00075A  0E00               	movlw	0
  2426  00075C  6E12               	movwf	delay_tenth_s@i+1,c
  2427  00075E  0E01               	movlw	1
  2428  000760  6E11               	movwf	delay_tenth_s@i,c
  2429  000762  D009               	goto	l1652
  2430  000764                     l1648:
  2431                           
  2432                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2433  000764  0E82               	movlw	130
  2434  000766  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2435  000768  0EDE               	movlw	222
  2436  00076A                     u1277:
  2437  00076A  2EE8               	decfsz	wreg,f,c
  2438  00076C  D7FE               	goto	u1277
  2439  00076E  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2440  000770  D7FC               	goto	u1277
  2441  000772  4A11               	infsnz	delay_tenth_s@i,f,c
  2442  000774  2A12               	incf	delay_tenth_s@i+1,f,c
  2443  000776                     l1652:
  2444  000776  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2445  000778  0D02               	mullw	2
  2446  00077A  5011               	movf	delay_tenth_s@i,w,c
  2447  00077C  5CF3               	subwf	prodl,w,c
  2448  00077E  5012               	movf	delay_tenth_s@i+1,w,c
  2449  000780  58F4               	subwfb	prodh,w,c
  2450  000782  A0D8               	btfss	status,0,c
  2451  000784  0012               	return	
  2452  000786  D7EE               	goto	l1648
  2453  000788                     __end_of_delay_tenth_s:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           intcon	equ	0xFF2
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           indf2	equ	0xFDF
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _delay_s *****************
  2469 ;; Defined at:
  2470 ;;		line 10 in file "Movement.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  seconds         1    wreg     unsigned char 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  seconds         1   15[COMRAM] unsigned char 
  2475 ;;  i               2   16[COMRAM] unsigned int 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;		None               void
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2485 ;;      Params:         0       0       0       0
  2486 ;;      Locals:         3       0       0       0
  2487 ;;      Temps:          1       0       0       0
  2488 ;;      Totals:         4       0       0       0
  2489 ;;Total ram usage:        4 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    1
  2492 ;; This function calls:
  2493 ;;		Nothing
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;;		_ScanIR
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text17
  2501  000788                     __ptext17:
  2502                           	opt stack 0
  2503  000788                     _delay_s:
  2504                           	opt stack 29
  2505                           
  2506                           ;incstack = 0
  2507                           ;delay_s@seconds stored from wreg
  2508  000788  6E10               	movwf	delay_s@seconds,c
  2509                           
  2510                           ;Movement.c: 11: unsigned int i=0;
  2511  00078A  0E00               	movlw	0
  2512  00078C  6E12               	movwf	delay_s@i+1,c
  2513  00078E  0E00               	movlw	0
  2514  000790  6E11               	movwf	delay_s@i,c
  2515                           
  2516                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2517  000792  0E00               	movlw	0
  2518  000794  6E12               	movwf	delay_s@i+1,c
  2519  000796  0E01               	movlw	1
  2520  000798  6E11               	movwf	delay_s@i,c
  2521  00079A  D009               	goto	l1632
  2522  00079C                     l1628:
  2523                           
  2524                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2525  00079C  0E82               	movlw	130
  2526  00079E  6E0F               	movwf	??_delay_s& (0+255),c
  2527  0007A0  0EDE               	movlw	222
  2528  0007A2                     u1287:
  2529  0007A2  2EE8               	decfsz	wreg,f,c
  2530  0007A4  D7FE               	goto	u1287
  2531  0007A6  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2532  0007A8  D7FC               	goto	u1287
  2533  0007AA  4A11               	infsnz	delay_s@i,f,c
  2534  0007AC  2A12               	incf	delay_s@i+1,f,c
  2535  0007AE                     l1632:
  2536  0007AE  5010               	movf	delay_s@seconds,w,c
  2537  0007B0  0D14               	mullw	20
  2538  0007B2  5011               	movf	delay_s@i,w,c
  2539  0007B4  5CF3               	subwf	prodl,w,c
  2540  0007B6  5012               	movf	delay_s@i+1,w,c
  2541  0007B8  58F4               	subwfb	prodh,w,c
  2542  0007BA  A0D8               	btfss	status,0,c
  2543  0007BC  0012               	return	
  2544  0007BE  D7EE               	goto	l1628
  2545  0007C0                     __end_of_delay_s:
  2546                           	opt stack 0
  2547                           tblptru	equ	0xFF8
  2548                           prodh	equ	0xFF4
  2549                           prodl	equ	0xFF3
  2550                           intcon	equ	0xFF2
  2551                           postinc0	equ	0xFEE
  2552                           wreg	equ	0xFE8
  2553                           indf2	equ	0xFDF
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560 ;; *************** function _InterruptHandlerHigh *****************
  2561 ;; Defined at:
  2562 ;;		line 16 in file "main.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;		None               void
  2569 ;; Registers used:
  2570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2576 ;;      Params:         0       0       0       0
  2577 ;;      Locals:         0       0       0       0
  2578 ;;      Temps:         14       0       0       0
  2579 ;;      Totals:        14       0       0       0
  2580 ;;Total ram usage:       14 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		Interrupt level 2
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	intcode
  2590  000008                     __pintcode:
  2591                           	opt stack 0
  2592  000008                     _InterruptHandlerHigh:
  2593                           	opt stack 25
  2594                           
  2595                           ;incstack = 0
  2596  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2597  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2598  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2599  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2600  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2601  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2602  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2603  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2604  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2605  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2606  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2607  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2608  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2609  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2610  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2611                           
  2612                           ;main.c: 18: if (PIR1bits.RCIF) {
  2613  000042  AA9E               	btfss	3998,5,c	;volatile
  2614  000044  D013               	goto	i2l50
  2615                           
  2616                           ;main.c: 19: ReceivedString[i]=RCREG;
  2617  000046  504B               	movf	_i,w,c	;volatile
  2618  000048  0D01               	mullw	1
  2619  00004A  0E3B               	movlw	low _ReceivedString
  2620  00004C  24F3               	addwf	prodl,w,c
  2621  00004E  6ED9               	movwf	fsr2l,c
  2622  000050  0E00               	movlw	high _ReceivedString
  2623  000052  20F4               	addwfc	prodh,w,c
  2624  000054  6EDA               	movwf	fsr2h,c
  2625  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2626                           
  2627                           ;main.c: 20: if (i==15){
  2628  00005A  0E0F               	movlw	15
  2629  00005C  184B               	xorwf	_i,w,c	;volatile
  2630  00005E  A4D8               	btfss	status,2,c
  2631  000060  D003               	goto	i2l1238
  2632                           
  2633                           ;main.c: 21: i=0;
  2634  000062  0E00               	movlw	0
  2635  000064  6E4B               	movwf	_i,c	;volatile
  2636                           
  2637                           ;main.c: 22: }else{
  2638  000066  D001               	goto	i2l1240
  2639  000068                     i2l1238:
  2640                           
  2641                           ;main.c: 23: i++;
  2642  000068  2A4B               	incf	_i,f,c	;volatile
  2643  00006A                     i2l1240:
  2644                           
  2645                           ;main.c: 24: }
  2646                           ;main.c: 25: PIR1bits.RCIF=0;
  2647  00006A  9A9E               	bcf	3998,5,c	;volatile
  2648  00006C                     i2l50:
  2649  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2650  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2651  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2652  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2653  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2654  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2655  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2656  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2657  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2658  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2659  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2660  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2661  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2662  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2663  0000A4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2664  0000A6  0011               	retfie		f
  2665  0000A8                     __end_of_InterruptHandlerHigh:
  2666                           	opt stack 0
  2667  0000                     pclatu	equ	0xFFB
  2668                           pclath	equ	0xFFA
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           fsr0h	equ	0xFEA
  2678                           fsr0l	equ	0xFE9
  2679                           wreg	equ	0xFE8
  2680                           fsr1h	equ	0xFE2
  2681                           fsr1l	equ	0xFE1
  2682                           indf2	equ	0xFDF
  2683                           postinc2	equ	0xFDE
  2684                           postdec2	equ	0xFDD
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           pclatu	equ	0xFFB
  2689                           pclath	equ	0xFFA
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           intcon	equ	0xFF2
  2697                           postinc0	equ	0xFEE
  2698                           fsr0h	equ	0xFEA
  2699                           fsr0l	equ	0xFE9
  2700                           wreg	equ	0xFE8
  2701                           fsr1h	equ	0xFE2
  2702                           fsr1l	equ	0xFE1
  2703                           indf2	equ	0xFDF
  2704                           postinc2	equ	0xFDE
  2705                           postdec2	equ	0xFDD
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710                           	psect	rparam
  2711  0000                     pclatu	equ	0xFFB
  2712                           pclath	equ	0xFFA
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           intcon	equ	0xFF2
  2720                           postinc0	equ	0xFEE
  2721                           fsr0h	equ	0xFEA
  2722                           fsr0l	equ	0xFE9
  2723                           wreg	equ	0xFE8
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           fsr2h	equ	0xFDA
  2730                           fsr2l	equ	0xFD9
  2731                           status	equ	0xFD8
  2732                           
  2733                           	psect	temp
  2734  00004C                     btemp:
  2735                           	opt stack 0
  2736  00004C                     	ds	1
  2737  0000                     int$flags	set	btemp
  2738                           pclatu	equ	0xFFB
  2739                           pclath	equ	0xFFA
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           prodh	equ	0xFF4
  2745                           prodl	equ	0xFF3
  2746                           intcon	equ	0xFF2
  2747                           postinc0	equ	0xFEE
  2748                           fsr0h	equ	0xFEA
  2749                           fsr0l	equ	0xFE9
  2750                           wreg	equ	0xFE8
  2751                           fsr1h	equ	0xFE2
  2752                           fsr1l	equ	0xFE1
  2753                           indf2	equ	0xFDF
  2754                           postinc2	equ	0xFDE
  2755                           postdec2	equ	0xFDD
  2756                           fsr2h	equ	0xFDA
  2757                           fsr2l	equ	0xFD9
  2758                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      75
    BANK0           160     24      24
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   25855
                                              0 BANK0     24    24      0
                             _ScanIR
                            _delay_s
                       _enableSensor
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2307
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     472
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              12     8      4   18513
                                             46 COMRAM    12     8      4
                            _delay_s
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    6534
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    7046
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3927
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2091
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1531
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     650
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_s
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     18      18       4       15.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4B       1       79.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       5        0.0%
DATA                 0      0      63      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Mar 15 23:07:17 2018

                 ?_grabRightIR 000F                              _i 004B                             l53 0148  
                 ___awdiv@sign 001A            ___wmul@multiplicand 0011                            l105 02F8  
                          l135 05D6                            u805 0344                            u784 0294  
                          u785 0290                            u794 02EC                            u795 02E8  
                          u965 0838                            u966 083A                            u985 084A  
                          u986 084C                    grabLeftIR@i 0015                            prod 000FF3  
                          wreg 000FE8                           l1610 0586                           l1602 04C2  
                         l1542 0514                           l1614 059E                           l1632 07AE  
                         l1554 053A                           l1570 056C                           l1618 05B6  
                         l1628 079C                           l1652 0776                           l1660 0670  
                         l1556 0542                           l1548 0524                           l1812 014E  
                         l1574 057A                           l1566 0562                           l1558 0546  
                         l1830 01C4                           l1648 0764                           l1656 0668  
                         l1672 0604                           l1584 02D0                           l1592 048A  
                         l1752 03EE                           l1728 083C                           l1666 069E  
                         l1682 063A                           l1834 01E6                           l1826 01A4  
                         l1676 060C                           l1596 04A2                           l1588 0472  
                         l1772 0430                           l1766 042C                           l1758 03F2  
                         l1838 01F4                           l1846 0206                           l1784 046C  
                         u1237 04BC                           _LATB 000F8A                           u1247 05D0  
                         u1257 062E                           u1267 0692                           u1277 076A  
                         u1287 07A2                           i2l50 006C                           _main 00AC  
                main@ScanAngle 0063                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           btemp 004C  
                         _stop 0470                           pclat 000FFA                           prodh 000FF4  
                         prodl 000FF3                           start 00A8                 delay_s@seconds 0010  
                 ___param_bank 000010                          ?_main 0001                __end_of___awdiv 0584  
                        ?_stop 0026                ___awdiv@divisor 0017                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                   grabRightIR@i 0015                  _initRFID$1286 000F  
              ___awdiv@counter 0019                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                __end_of_delay_s 07C0  
                        main@i 0062                          tablat 000FF5                          status 000FD8  
              __initialization 08B6                   __end_of_main 0220                   __end_of_stop 0500  
               delay_tenth_s@i 0011                 __CFG_OSC$IRCIO 000000           __end_of_enableSensor 084E  
                       ??_main 003B                         ??_stop 002A                  __activetblptr 000002  
                ?_initMotorPWM 0001                   ?_setMotorPWM 001D         __size_of_fullSpeedBack 0036  
             ___awdiv@dividend 0015                         i2l1240 006A                         i2l1238 0068  
               __CFG_WDTEN$OFF 000000          __end_of_delay_tenth_s 0788                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         _ScanIR 0354  
                       ___wmul 084E                      ??___awdiv 0019               __end_of_initRFID 08B6  
                       _initIR 0874           __size_of_grabRightIR 0064                         clear_0 08BC  
             ___awdiv@quotient 001B                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0026                         stop@mR 0028               __end_of_turnLeft 0750  
              fullSpeedBack@mL 002B                fullSpeedBack@mR 002D                     __accesstop 0060  
      __end_of__initialization 08C2                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
                _fullSpeedBack 07C0  __size_of_InterruptHandlerHigh 00A0     delay_tenth_s@tenth_seconds 0010  
                      ?_ScanIR 002F                 ?_fullSpeedBack 002B          __size_of_enableSensor 0026  
                      ?___wmul 000F            grabLeftIR@IR_signal 0013                        _CAP1CON 000F63  
                      _CAP2CON 000F62                        ?_initIR 0001        __size_of_fullSpeedAhead 0070  
                   _grabLeftIR 0658                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initRFID 0001           __size_of_setMotorPWM 0134                   _enableSensor 0828  
           __size_of_turnRight 004A           __end_of_initMotorPWM 0828                        __Hparam 0000  
                      __Lparam 0000                __size_of_ScanIR 011C                        ___awdiv 0500  
              __size_of___wmul 0026                __size_of_initIR 0022                        __pcinit 08B6  
                      _delay_s 0788                        __ramtop 0300                      ?_turnLeft 002B  
                      __ptext0 00AC                        __ptext1 0896                        __ptext2 07F6  
                      __ptext3 0874                        __ptext4 07C0                        __ptext5 0828  
                      __ptext6 0354                        __ptext7 06BC                        __ptext8 0706  
                      __ptext9 0470           end_of_initialization 08C2             setMotorPWM@PWMduty 0024  
                   ??_initRFID 000F                  __Lmediumconst 0000             ScanIR@SensorResult 0037  
              ??_fullSpeedBack 002F                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     ??_turnLeft 002F  
            __end_of_turnRight 0706                    ?_grabLeftIR 000F                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
                    _TRISEbits 000F96               fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028  
ScanIR@DirectionFoundTolerance 0035                      _TXSTAbits 000FAC                     main@motorL 0066  
                   main@motorR 006F                  ??_grabRightIR 0011                 __end_of_ScanIR 0470  
               _fullSpeedAhead 0584                 _ReceivedString 003B                 __end_of___wmul 0874  
                  _BAUDCONbits 000FAA                 __end_of_initIR 0896         __size_of_delay_tenth_s 0038  
          start_initialization 08B6          __size_of_initMotorPWM 0032   __end_of_InterruptHandlerHigh 00A8  
                     ??_ScanIR 0033         __end_of_fullSpeedAhead 05F4            __size_of_grabLeftIR 0064  
                     ??___wmul 0013                       ??_initIR 000F            __end_of_grabRightIR 0658  
                 _initMotorPWM 07F6                    __pbssCOMRAM 003B                  __pcstackBANK0 0060  
                _delay_tenth_s 0750              __size_of_initRFID 0020                ?_fullSpeedAhead 0026  
                    __pintcode 0008                       ?___awdiv 0015                       ?_delay_s 0001  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66              __size_of_turnLeft 004A                  ??_setMotorPWM 001F  
               ?_delay_tenth_s 0001                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 002B  
                  turnRight@mR 002D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                  _grabRightIR 05F4           grabRightIR@IR_signal 0013              ___wmul@multiplier 000F  
                 setMotorPWM@m 001D           _InterruptHandlerHigh 0008                       ScanIR@mL 002F  
                     ScanIR@mR 0031                   ??_grabLeftIR 0011                      _turnRight 06BC  
          __end_of_setMotorPWM 0354                       __Hrparam 0000                       __Lrparam 0000  
        __end_of_fullSpeedBack 07F6             __end_of_grabLeftIR 06BC               __size_of___awdiv 0084  
                   _ANSEL0bits 000FB8               __size_of_delay_s 0038          ?_InterruptHandlerHigh 0001  
                   ?_turnRight 002B                       __ptext10 0584                       __ptext11 0220  
                     __ptext12 084E                       __ptext13 0500                       __ptext14 05F4  
                     __ptext15 0658                       __ptext16 0750                       __ptext17 0788  
              ??_delay_tenth_s 000F                       _initRFID 0896                  __size_of_main 0174  
           main@DirectionFound 0065                  __size_of_stop 0090                     turnLeft@mL 002B  
                   turnLeft@mR 002D                       delay_s@i 0011                       int$flags 004C  
                     main@mode 0064                       main@test 0060                       _turnLeft 0706  
           enableSensor@sensor 0010             enableSensor@status 000F                     _INTCONbits 000FF2  
                  _setMotorPWM 0220                       intlevel2 0000                  ?_enableSensor 000F  
             ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001  
                  ??_turnRight 002F                 ??_enableSensor 0010  
