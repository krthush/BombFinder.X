

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Mar 15 20:57:03 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     _CAP1BUFH	set	3945
    31  0000                     _CAP1BUFL	set	3944
    32  0000                     _CAP1CON	set	3939
    33  0000                     _CAP2BUFH	set	3943
    34  0000                     _CAP2BUFL	set	3942
    35  0000                     _CAP2CON	set	3938
    36  0000                     _LATAbits	set	3977
    37  0000                     _LATB	set	3978
    38  0000                     _LATCbits	set	3979
    39  0000                     _LATDbits	set	3980
    40  0000                     _LATEbits	set	3981
    41  0000                     _PTCON0	set	3967
    42  0000                     _PTCON1	set	3966
    43  0000                     _PTPERH	set	3962
    44  0000                     _PTPERL	set	3963
    45  0000                     _PWMCON0	set	3951
    46  0000                     _PWMCON1	set	3950
    47  0000                     _TRISAbits	set	3986
    48  0000                     _TRISBbits	set	3987
    49  0000                     _TRISC	set	3988
    50  0000                     _TRISCbits	set	3988
    51  0000                     _TRISDbits	set	3989
    52  0000                     _TRISEbits	set	3990
    53  0000                     _PDC0H	set	3960
    54  0000                     _PDC0L	set	3961
    55  0000                     _PDC1H	set	3958
    56  0000                     _PDC1L	set	3959
    57  0000                     _ANSEL0bits	set	4024
    58  0000                     _BAUDCONbits	set	4010
    59  0000                     _IPR1bits	set	3999
    60  0000                     _OSCCON	set	4051
    61  0000                     _OSCCONbits	set	4051
    62  0000                     _PIE1bits	set	3997
    63  0000                     _PIR1bits	set	3998
    64  0000                     _RCONbits	set	4048
    65  0000                     _RCREG	set	4014
    66  0000                     _RCSTAbits	set	4011
    67  0000                     _SPBRG	set	4015
    68  0000                     _SPBRGH	set	4016
    69  0000                     _T5CON	set	4023
    70  0000                     _TXREG	set	4013
    71  0000                     _TXSTAbits	set	4012
    72  0000                     _INTCONbits	set	4082
    73                           
    74                           ; #config settings
    75  0000                     
    76                           	psect	cinit
    77  000BA8                     __pcinit:
    78                           	opt stack 0
    79  000BA8                     start_initialization:
    80                           	opt stack 0
    81  000BA8                     __initialization:
    82                           	opt stack 0
    83                           
    84                           ; Clear objects allocated to COMRAM (17 bytes)
    85  000BA8  EE00  F036         	lfsr	0,__pbssCOMRAM
    86  000BAC  0E11               	movlw	17
    87  000BAE                     clear_0:
    88  000BAE  6AEE               	clrf	postinc0,c
    89  000BB0  06E8               	decf	wreg,f,c
    90  000BB2  E1FD               	bnz	clear_0
    91  000BB4                     end_of_initialization:
    92                           	opt stack 0
    93  000BB4                     __end_of__initialization:
    94                           	opt stack 0
    95  000BB4  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    96  000BB6  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    97  000BB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
    98  000BBA  6EF8               	movwf	tblptru,c
    99  000BBC  0100               	movlb	0
   100  000BBE  EF8C  F002         	goto	_main	;jump to C main() function
   101                           tblptru	equ	0xFF8
   102                           postinc0	equ	0xFEE
   103                           wreg	equ	0xFE8
   104                           
   105                           	psect	bssCOMRAM
   106  000036                     __pbssCOMRAM:
   107                           	opt stack 0
   108  000036                     _ReceivedString:
   109                           	opt stack 0
   110  000036                     	ds	16
   111  000046                     _i:
   112                           	opt stack 0
   113  000046                     	ds	1
   114                           tblptru	equ	0xFF8
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	cstackBANK0
   119  000060                     __pcstackBANK0:
   120                           	opt stack 0
   121  000060                     ScanWithRange@SensorResultL:
   122                           	opt stack 0
   123                           
   124                           ; 4 bytes @ 0x0
   125  000060                     	ds	4
   126  000064                     ScanWithRange@SensorResultR:
   127                           	opt stack 0
   128                           
   129                           ; 4 bytes @ 0x4
   130  000064                     	ds	4
   131  000068                     ScanWithRange@DirectionFoundTolerance:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x8
   135  000068                     	ds	2
   136  00006A                     ScanWithRange@SensorResultC:
   137                           	opt stack 0
   138                           
   139                           ; 4 bytes @ 0xA
   140  00006A                     	ds	4
   141  00006E                     main@test:
   142                           	opt stack 0
   143                           
   144                           ; 2 bytes @ 0xE
   145  00006E                     	ds	2
   146  000070                     main@i:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x10
   150  000070                     	ds	1
   151  000071                     _main$2133:
   152                           	opt stack 0
   153                           
   154                           ; 1 bytes @ 0x11
   155  000071                     	ds	1
   156  000072                     main@mode:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x12
   160  000072                     	ds	1
   161  000073                     main@ScanAngle:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x13
   165  000073                     	ds	1
   166  000074                     main@DirectionFound:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x14
   170  000074                     	ds	1
   171  000075                     main@motorL:
   172                           	opt stack 0
   173                           
   174                           ; 9 bytes @ 0x15
   175  000075                     	ds	9
   176  00007E                     main@motorR:
   177                           	opt stack 0
   178                           
   179                           ; 9 bytes @ 0x1E
   180  00007E                     	ds	9
   181                           tblptru	equ	0xFF8
   182                           postinc0	equ	0xFEE
   183                           wreg	equ	0xFE8
   184                           
   185                           	psect	cstackCOMRAM
   186  000001                     __pcstackCOMRAM:
   187                           	opt stack 0
   188  000001                     ??_InterruptHandlerHigh:
   189  000001                     
   190                           ; 0 bytes @ 0x0
   191  000001                     	ds	14
   192  00000F                     ??_delay_s:
   193  00000F                     ??_delay_tenth_s:
   194  00000F                     ?_grabRightIR:
   195                           	opt stack 0
   196  00000F                     ?_grabLeftIR:
   197                           	opt stack 0
   198  00000F                     ?___wmul:
   199                           	opt stack 0
   200  00000F                     _initRFID$1270:
   201                           	opt stack 0
   202  00000F                     enableSensor@status:
   203                           	opt stack 0
   204  00000F                     ___wmul@multiplier:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0xE
   208  00000F                     	ds	1
   209  000010                     delay_s@seconds:
   210                           	opt stack 0
   211  000010                     delay_tenth_s@tenth_seconds:
   212                           	opt stack 0
   213  000010                     enableSensor@sensor:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0xF
   217  000010                     	ds	1
   218  000011                     ??_grabRightIR:
   219  000011                     ??_grabLeftIR:
   220  000011                     delay_s@i:
   221                           	opt stack 0
   222  000011                     delay_tenth_s@i:
   223                           	opt stack 0
   224  000011                     ___wmul@multiplicand:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x10
   228  000011                     	ds	2
   229  000013                     grabRightIR@IR_signal:
   230                           	opt stack 0
   231  000013                     grabLeftIR@IR_signal:
   232                           	opt stack 0
   233  000013                     ___wmul@product:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x12
   237  000013                     	ds	2
   238  000015                     ?___awdiv:
   239                           	opt stack 0
   240  000015                     grabRightIR@i:
   241                           	opt stack 0
   242  000015                     grabLeftIR@i:
   243                           	opt stack 0
   244  000015                     ___awdiv@dividend:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x14
   248  000015                     	ds	2
   249  000017                     ___awdiv@divisor:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x16
   253  000017                     	ds	2
   254  000019                     ___awdiv@counter:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x18
   258  000019                     	ds	1
   259  00001A                     ___awdiv@sign:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x19
   263  00001A                     	ds	1
   264  00001B                     ___awdiv@quotient:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x1A
   268  00001B                     	ds	2
   269  00001D                     setMotorPWM@m:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x1C
   273  00001D                     	ds	2
   274  00001F                     ??_setMotorPWM:
   275                           
   276                           ; 0 bytes @ 0x1E
   277  00001F                     	ds	5
   278  000024                     setMotorPWM@PWMduty:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x23
   282  000024                     	ds	2
   283  000026                     stop@mL:
   284                           	opt stack 0
   285  000026                     fullSpeedAhead@mL:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x25
   289  000026                     	ds	2
   290  000028                     stop@mR:
   291                           	opt stack 0
   292  000028                     fullSpeedAhead@mR:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x27
   296  000028                     	ds	2
   297  00002A                     
   298                           ; 0 bytes @ 0x29
   299  00002A                     	ds	1
   300  00002B                     turnLeft@mL:
   301                           	opt stack 0
   302  00002B                     turnRight@mL:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x2A
   306  00002B                     	ds	2
   307  00002D                     turnLeft@mR:
   308                           	opt stack 0
   309  00002D                     turnRight@mR:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x2C
   313  00002D                     	ds	2
   314  00002F                     ScanWithRange@mL:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x2E
   318  00002F                     	ds	2
   319  000031                     ScanWithRange@mR:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x30
   323  000031                     	ds	2
   324  000033                     ScanWithRange@tenth_seconds:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x32
   328  000033                     	ds	1
   329  000034                     ??_ScanWithRange:
   330                           
   331                           ; 0 bytes @ 0x33
   332  000034                     	ds	2
   333  000036                     tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           ; 0 bytes @ 0x35
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 29 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;  PathTaken     100    0        unsigned char [100]
   348 ;;  Message        10    0        unsigned char [10]
   349 ;;  motorR          9   30[BANK0 ] struct DC_motor
   350 ;;  motorL          9   21[BANK0 ] struct DC_motor
   351 ;;  SignalStreng    3    0        unsigned char [3]
   352 ;;  test            2   14[BANK0 ] unsigned int 
   353 ;;  DirectionFou    1   20[BANK0 ] unsigned char 
   354 ;;  ScanAngle       1   19[BANK0 ] unsigned char 
   355 ;;  mode            1   18[BANK0 ] unsigned char 
   356 ;;  i               1   16[BANK0 ] unsigned char 
   357 ;; Return value:  Size  Location     Type
   358 ;;		None               void
   359 ;; Registers used:
   360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   366 ;;      Params:         0       0       0       0
   367 ;;      Locals:         0      25       0       0
   368 ;;      Temps:          0       0       0       0
   369 ;;      Totals:         0      25       0       0
   370 ;;Total ram usage:       25 bytes
   371 ;; Hardware stack levels required when called:    6
   372 ;; This function calls:
   373 ;;		_ScanWithRange
   374 ;;		___awdiv
   375 ;;		_delay_s
   376 ;;		_initIR
   377 ;;		_initMotorPWM
   378 ;;		_initRFID
   379 ;; This function is called by:
   380 ;;		Startup code after reset
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           	psect	text0
   385  000518                     __ptext0:
   386                           	opt stack 0
   387  000518                     _main:
   388                           	opt stack 25
   389                           
   390                           ;main.c: 32: unsigned char Message[10];
   391                           ;main.c: 33: unsigned char i=0;
   392                           
   393                           ;incstack = 0
   394  000518  0E00               	movlw	0
   395  00051A  0100               	movlb	0	; () banked
   396  00051C  6F70               	movwf	main@i& (0+255),b
   397                           
   398                           ;main.c: 34: unsigned char mode=0;
   399  00051E  0E00               	movlw	0
   400  000520  0100               	movlb	0	; () banked
   401  000522  6F72               	movwf	main@mode& (0+255),b
   402                           
   403                           ;main.c: 35: char DirectionFound=0;
   404  000524  0E00               	movlw	0
   405  000526  0100               	movlb	0	; () banked
   406  000528  6F74               	movwf	main@DirectionFound& (0+255),b
   407                           
   408                           ;main.c: 36: unsigned char SignalStrength[3];
   409                           ;main.c: 37: char PathTaken[100];
   410                           ;main.c: 38: unsigned int test=0;
   411  00052A  0E00               	movlw	0
   412  00052C  0100               	movlb	0	; () banked
   413  00052E  6F6F               	movwf	(main@test+1)& (0+255),b
   414  000530  0E00               	movlw	0
   415  000532  6F6E               	movwf	main@test& (0+255),b
   416                           
   417                           ;main.c: 40: unsigned char ScanAngle=6;
   418  000534  0E06               	movlw	6
   419  000536  0100               	movlb	0	; () banked
   420  000538  6F73               	movwf	main@ScanAngle& (0+255),b
   421                           
   422                           ; BSR set to: 0
   423                           ;main.c: 43: INTCONbits.GIEH = 1;
   424  00053A  8EF2               	bsf	intcon,7,c	;volatile
   425                           
   426                           ; BSR set to: 0
   427                           ;main.c: 44: RCONbits.IPEN = 1;
   428  00053C  8ED0               	bsf	4048,7,c	;volatile
   429                           
   430                           ; BSR set to: 0
   431                           ;main.c: 45: INTCONbits.GIEL = 1;
   432  00053E  8CF2               	bsf	intcon,6,c	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 46: INTCONbits.INT0IE = 1;
   436  000540  88F2               	bsf	intcon,4,c	;volatile
   437                           
   438                           ; BSR set to: 0
   439                           ;main.c: 47: INTCONbits.PEIE = 1;
   440  000542  8CF2               	bsf	intcon,6,c	;volatile
   441                           
   442                           ; BSR set to: 0
   443                           ;main.c: 49: IPR1bits.RCIP=1;
   444  000544  8A9F               	bsf	3999,5,c	;volatile
   445                           
   446                           ; BSR set to: 0
   447                           ;main.c: 50: PIE1bits.RCIE=1;
   448  000546  8A9D               	bsf	3997,5,c	;volatile
   449                           
   450                           ;main.c: 53: struct DC_motor motorL, motorR;
   451                           ;main.c: 54: motorL.power=0;
   452  000548  0E00               	movlw	0
   453  00054A  0100               	movlb	0	; () banked
   454  00054C  6F75               	movwf	main@motorL& (0+255),b
   455                           
   456                           ;main.c: 55: motorL.direction=1;
   457  00054E  0E01               	movlw	1
   458  000550  0100               	movlb	0	; () banked
   459  000552  6F76               	movwf	(main@motorL+1)& (0+255),b
   460                           
   461                           ; BSR set to: 0
   462                           ;main.c: 56: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   463  000554  0E79               	movlw	121
   464  000556  0100               	movlb	0	; () banked
   465  000558  6F77               	movwf	(main@motorL+2)& (0+255),b
   466  00055A  0E0F               	movlw	15
   467  00055C  0100               	movlb	0	; () banked
   468  00055E  6F78               	movwf	(main@motorL+3)& (0+255),b
   469                           
   470                           ; BSR set to: 0
   471                           ;main.c: 57: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   472  000560  0E78               	movlw	120
   473  000562  0100               	movlb	0	; () banked
   474  000564  6F79               	movwf	(main@motorL+4)& (0+255),b
   475  000566  0E0F               	movlw	15
   476  000568  0100               	movlb	0	; () banked
   477  00056A  6F7A               	movwf	(main@motorL+5)& (0+255),b
   478                           
   479                           ;main.c: 58: motorL.dir_pin=0;
   480  00056C  0E00               	movlw	0
   481  00056E  0100               	movlb	0	; () banked
   482  000570  6F7B               	movwf	(main@motorL+6)& (0+255),b
   483                           
   484                           ;main.c: 59: motorL.PWMperiod=199;
   485  000572  0E00               	movlw	0
   486  000574  0100               	movlb	0	; () banked
   487  000576  6F7D               	movwf	(main@motorL+8)& (0+255),b
   488  000578  0EC7               	movlw	199
   489  00057A  6F7C               	movwf	(main@motorL+7)& (0+255),b
   490                           
   491                           ;main.c: 61: motorR.power=0;
   492  00057C  0E00               	movlw	0
   493  00057E  0100               	movlb	0	; () banked
   494  000580  6F7E               	movwf	main@motorR& (0+255),b
   495                           
   496                           ;main.c: 62: motorR.direction=1;
   497  000582  0E01               	movlw	1
   498  000584  0100               	movlb	0	; () banked
   499  000586  6F7F               	movwf	(main@motorR+1)& (0+255),b
   500                           
   501                           ; BSR set to: 0
   502                           ;main.c: 63: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   503  000588  0E77               	movlw	119
   504  00058A  0100               	movlb	0	; () banked
   505  00058C  6F80               	movwf	(main@motorR+2)& (0+255),b
   506  00058E  0E0F               	movlw	15
   507  000590  0100               	movlb	0	; () banked
   508  000592  6F81               	movwf	(main@motorR+3)& (0+255),b
   509                           
   510                           ; BSR set to: 0
   511                           ;main.c: 64: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   512  000594  0E76               	movlw	118
   513  000596  0100               	movlb	0	; () banked
   514  000598  6F82               	movwf	(main@motorR+4)& (0+255),b
   515  00059A  0E0F               	movlw	15
   516  00059C  0100               	movlb	0	; () banked
   517  00059E  6F83               	movwf	(main@motorR+5)& (0+255),b
   518                           
   519                           ;main.c: 65: motorR.dir_pin=2;
   520  0005A0  0E02               	movlw	2
   521  0005A2  0100               	movlb	0	; () banked
   522  0005A4  6F84               	movwf	(main@motorR+6)& (0+255),b
   523                           
   524                           ;main.c: 66: motorR.PWMperiod=199;
   525  0005A6  0E00               	movlw	0
   526  0005A8  0100               	movlb	0	; () banked
   527  0005AA  6F86               	movwf	(main@motorR+8)& (0+255),b
   528  0005AC  0EC7               	movlw	199
   529  0005AE  6F85               	movwf	(main@motorR+7)& (0+255),b
   530                           
   531                           ;main.c: 68: OSCCON = 0x72;
   532  0005B0  0E72               	movlw	114
   533  0005B2  6ED3               	movwf	4051,c	;volatile
   534  0005B4                     l47:
   535  0005B4  B4D3               	btfsc	4051,2,c	;volatile
   536  0005B6  D049               	goto	l2301
   537  0005B8  D7FD               	goto	l47
   538  0005BA                     l2275:
   539                           
   540                           ;main.c: 76: initMotorPWM();
   541  0005BA  EC74  F005         	call	_initMotorPWM	;wreg free
   542                           
   543                           ;main.c: 77: initRFID();
   544  0005BE  ECC4  F005         	call	_initRFID	;wreg free
   545                           
   546                           ;main.c: 78: initIR();
   547  0005C2  ECB3  F005         	call	_initIR	;wreg free
   548  0005C6  D03E               	goto	l2297
   549  0005C8                     l2279:
   550                           
   551                           ; BSR set to: 0
   552                           ;main.c: 87: if (DirectionFound==0) {
   553  0005C8  0100               	movlb	0	; () banked
   554  0005CA  5174               	movf	main@DirectionFound& (0+255),w,b
   555  0005CC  0100               	movlb	0	; () banked
   556  0005CE  A4D8               	btfss	status,2,c
   557  0005D0  D00D               	goto	l2283
   558                           
   559                           ; BSR set to: 0
   560                           ;main.c: 89: DirectionFound = ScanWithRange(&motorL, &motorR, ScanAngle);
   561  0005D2  0E75               	movlw	low main@motorL
   562  0005D4  6E2F               	movwf	ScanWithRange@mL,c
   563  0005D6  0E00               	movlw	high main@motorL
   564  0005D8  6E30               	movwf	ScanWithRange@mL+1,c
   565  0005DA  0E7E               	movlw	low main@motorR
   566  0005DC  6E31               	movwf	ScanWithRange@mR,c
   567  0005DE  0E00               	movlw	high main@motorR
   568  0005E0  6E32               	movwf	ScanWithRange@mR+1,c
   569  0005E2  C073  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   570  0005E6  EC56  F000         	call	_ScanWithRange	;wreg free
   571  0005EA  D01C               	goto	L2
   572  0005EC                     l2283:
   573                           
   574                           ; BSR set to: 0
   575  0005EC  0100               	movlb	0	; () banked
   576  0005EE  0574               	decf	main@DirectionFound& (0+255),w,b
   577  0005F0  A4D8               	btfss	status,2,c
   578  0005F2  D01B               	goto	l2289
   579                           
   580                           ; BSR set to: 0
   581                           ;main.c: 92: DirectionFound = ScanWithRange(&motorL, &motorR, ScanAngle/2);
   582  0005F4  C073  F015         	movff	main@ScanAngle,___awdiv@dividend
   583  0005F8  6A16               	clrf	___awdiv@dividend+1,c
   584  0005FA  0E00               	movlw	0
   585  0005FC  6E18               	movwf	___awdiv@divisor+1,c
   586  0005FE  0E02               	movlw	2
   587  000600  6E17               	movwf	___awdiv@divisor,c
   588  000602  EC14  F004         	call	___awdiv	;wreg free
   589  000606  5015               	movf	?___awdiv,w,c
   590  000608  0100               	movlb	0	; () banked
   591  00060A  6F71               	movwf	_main$2133& (0+255),b
   592                           
   593                           ; BSR set to: 0
   594                           ;main.c: 92: DirectionFound = ScanWithRange(&motorL, &motorR, ScanAngle/2);
   595  00060C  0E75               	movlw	low main@motorL
   596  00060E  6E2F               	movwf	ScanWithRange@mL,c
   597  000610  0E00               	movlw	high main@motorL
   598  000612  6E30               	movwf	ScanWithRange@mL+1,c
   599  000614  0E7E               	movlw	low main@motorR
   600  000616  6E31               	movwf	ScanWithRange@mR,c
   601  000618  0E00               	movlw	high main@motorR
   602  00061A  6E32               	movwf	ScanWithRange@mR+1,c
   603  00061C  C071  F033         	movff	_main$2133,ScanWithRange@tenth_seconds
   604  000620  EC56  F000         	call	_ScanWithRange	;wreg free
   605  000624                     L2:
   606  000624  0100               	movlb	0	; () banked
   607  000626  6F74               	movwf	main@DirectionFound& (0+255),b
   608                           
   609                           ;main.c: 93: } else if (DirectionFound==2) {
   610  000628  D010               	goto	l2301
   611  00062A                     l2289:
   612                           
   613                           ; BSR set to: 0
   614  00062A  0E02               	movlw	2
   615  00062C  0100               	movlb	0	; () banked
   616  00062E  1974               	xorwf	main@DirectionFound& (0+255),w,b
   617  000630  A4D8               	btfss	status,2,c
   618  000632  D00B               	goto	l2301
   619                           
   620                           ; BSR set to: 0
   621                           ;main.c: 94: mode=2;
   622  000634  0E02               	movlw	2
   623  000636  D007               	goto	L3
   624  000638                     l2293:
   625                           
   626                           ; BSR set to: 0
   627                           ;main.c: 102: delay_s(3);
   628  000638  0E03               	movlw	3
   629  00063A  EC3C  F005         	call	_delay_s
   630                           
   631                           ;main.c: 103: DirectionFound=1;
   632  00063E  0E01               	movlw	1
   633  000640  0100               	movlb	0	; () banked
   634  000642  6F74               	movwf	main@DirectionFound& (0+255),b
   635  000644                     l2297:
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 104: mode = 1;
   639  000644  0E01               	movlw	1
   640  000646                     L3:
   641  000646  0100               	movlb	0	; () banked
   642  000648  6F72               	movwf	main@mode& (0+255),b
   643  00064A                     l2301:
   644  00064A  0100               	movlb	0	; () banked
   645  00064C  5172               	movf	main@mode& (0+255),w,b
   646                           
   647                           ; Switch size 1, requested type "space"
   648                           ; Number of cases is 4, Range of values is 0 to 3
   649                           ; switch strategies available:
   650                           ; Name         Instructions Cycles
   651                           ; simple_byte           13     7 (average)
   652                           ;	Chosen strategy is simple_byte
   653  00064E  0A00               	xorlw	0	; case 0
   654  000650  B4D8               	btfsc	status,2,c
   655  000652  D7B3               	goto	l2275
   656  000654  0A01               	xorlw	1	; case 1
   657  000656  B4D8               	btfsc	status,2,c
   658  000658  D7B7               	goto	l2279
   659  00065A  0A03               	xorlw	3	; case 2
   660  00065C  B4D8               	btfsc	status,2,c
   661  00065E  D7EC               	goto	l2293
   662  000660  0A01               	xorlw	1	; case 3
   663                           
   664                           ; BSR set to: 0
   665                           
   666                           ; BSR set to: 0
   667  000662  D7F3               	goto	l2301
   668  000664                     __end_of_main:
   669                           	opt stack 0
   670                           tblptru	equ	0xFF8
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           status	equ	0xFD8
   675                           
   676 ;; *************** function _initRFID *****************
   677 ;; Defined at:
   678 ;;		line 5 in file "RFID_Reader.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;		None
   681 ;; Auto vars:     Size  Location     Type
   682 ;;		None
   683 ;; Return value:  Size  Location     Type
   684 ;;		None               void
   685 ;; Registers used:
   686 ;;		wreg, status,2
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   692 ;;      Params:         0       0       0       0
   693 ;;      Locals:         1       0       0       0
   694 ;;      Temps:          0       0       0       0
   695 ;;      Totals:         1       0       0       0
   696 ;;Total ram usage:        1 bytes
   697 ;; Hardware stack levels used:    1
   698 ;; Hardware stack levels required when called:    1
   699 ;; This function calls:
   700 ;;		Nothing
   701 ;; This function is called by:
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text1
   707  000B88                     __ptext1:
   708                           	opt stack 0
   709  000B88                     _initRFID:
   710                           	opt stack 29
   711                           
   712                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   713                           
   714                           ; BSR set to: 0
   715                           ;incstack = 0
   716  000B88  0E01               	movlw	1
   717  000B8A  6E0F               	movwf	_initRFID$1270,c
   718  000B8C  5094               	movf	3988,w,c	;volatile
   719  000B8E  C00F  FF94         	movff	_initRFID$1270,3988	;volatile
   720                           
   721                           ;RFID_Reader.c: 10: SPBRG=205;
   722  000B92  0ECD               	movlw	205
   723  000B94  6EAF               	movwf	4015,c	;volatile
   724                           
   725                           ;RFID_Reader.c: 11: SPBRGH=0;
   726  000B96  0E00               	movlw	0
   727  000B98  6EB0               	movwf	4016,c	;volatile
   728                           
   729                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   730  000B9A  86AA               	bsf	4010,3,c	;volatile
   731                           
   732                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   733  000B9C  84AC               	bsf	4012,2,c	;volatile
   734                           
   735                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   736  000B9E  88AB               	bsf	4011,4,c	;volatile
   737                           
   738                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   739  000BA0  8EAB               	bsf	4011,7,c	;volatile
   740                           
   741                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   742  000BA2  98AC               	bcf	4012,4,c	;volatile
   743                           
   744                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   745  000BA4  9CAB               	bcf	4011,6,c	;volatile
   746  000BA6  0012               	return		;funcret
   747  000BA8                     __end_of_initRFID:
   748                           	opt stack 0
   749                           tblptru	equ	0xFF8
   750                           intcon	equ	0xFF2
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           status	equ	0xFD8
   754                           
   755 ;; *************** function _initMotorPWM *****************
   756 ;; Defined at:
   757 ;;		line 4 in file "dc_motor.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;		None
   760 ;; Auto vars:     Size  Location     Type
   761 ;;		None
   762 ;; Return value:  Size  Location     Type
   763 ;;		None               void
   764 ;; Registers used:
   765 ;;		wreg, status,2
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   771 ;;      Params:         0       0       0       0
   772 ;;      Locals:         0       0       0       0
   773 ;;      Temps:          0       0       0       0
   774 ;;      Totals:         0       0       0       0
   775 ;;Total ram usage:        0 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    1
   778 ;; This function calls:
   779 ;;		Nothing
   780 ;; This function is called by:
   781 ;;		_main
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text2
   786  000AE8                     __ptext2:
   787                           	opt stack 0
   788  000AE8                     _initMotorPWM:
   789                           	opt stack 29
   790                           
   791                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   792                           
   793                           ;incstack = 0
   794  000AE8  0E00               	movlw	0
   795  000AEA  6E7F               	movwf	3967,c	;volatile
   796                           
   797                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   798  000AEC  0E80               	movlw	128
   799  000AEE  6E7E               	movwf	3966,c	;volatile
   800                           
   801                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   802  000AF0  0E6F               	movlw	111
   803  000AF2  6E6F               	movwf	3951,c	;volatile
   804                           
   805                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   806  000AF4  0E00               	movlw	0
   807  000AF6  6E6E               	movwf	3950,c	;volatile
   808                           
   809                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   810  000AF8  0EC7               	movlw	199
   811  000AFA  6E7B               	movwf	3963,c	;volatile
   812                           
   813                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   814  000AFC  0E00               	movlw	0
   815  000AFE  6E7A               	movwf	3962,c	;volatile
   816                           
   817                           ;dc_motor.c: 13: PDC0L = 0<<2;
   818  000B00  0E00               	movlw	0
   819  000B02  6E79               	movwf	3961,c	;volatile
   820                           
   821                           ;dc_motor.c: 14: PDC0H = 0>>6;
   822  000B04  0E00               	movlw	0
   823  000B06  6E78               	movwf	3960,c	;volatile
   824                           
   825                           ;dc_motor.c: 15: PDC1L = 0<<2;
   826  000B08  0E00               	movlw	0
   827  000B0A  6E77               	movwf	3959,c	;volatile
   828                           
   829                           ;dc_motor.c: 16: PDC1H = 0>>6;
   830  000B0C  0E00               	movlw	0
   831  000B0E  6E76               	movwf	3958,c	;volatile
   832                           
   833                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   834  000B10  9093               	bcf	3987,0,c	;volatile
   835                           
   836                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   837  000B12  9293               	bcf	3987,1,c	;volatile
   838                           
   839                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   840  000B14  9493               	bcf	3987,2,c	;volatile
   841                           
   842                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   843  000B16  9693               	bcf	3987,3,c	;volatile
   844  000B18  0012               	return		;funcret
   845  000B1A                     __end_of_initMotorPWM:
   846                           	opt stack 0
   847                           tblptru	equ	0xFF8
   848                           intcon	equ	0xFF2
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _initIR *****************
   854 ;; Defined at:
   855 ;;		line 30 in file "IR_Reading.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;		None               void
   862 ;; Registers used:
   863 ;;		wreg, status,2
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   869 ;;      Params:         0       0       0       0
   870 ;;      Locals:         0       0       0       0
   871 ;;      Temps:          0       0       0       0
   872 ;;      Totals:         0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text3
   884  000B66                     __ptext3:
   885                           	opt stack 0
   886  000B66                     _initIR:
   887                           	opt stack 29
   888                           
   889                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   890                           
   891                           ;incstack = 0
   892  000B66  9489               	bcf	3977,2,c	;volatile
   893                           
   894                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   895  000B68  9689               	bcf	3977,3,c	;volatile
   896                           
   897                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   898  000B6A  8492               	bsf	3986,2,c	;volatile
   899                           
   900                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   901  000B6C  8692               	bsf	3986,3,c	;volatile
   902                           
   903                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   904  000B6E  94B8               	bcf	4024,2,c	;volatile
   905                           
   906                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   907  000B70  96B8               	bcf	4024,3,c	;volatile
   908                           
   909                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   910  000B72  9CB8               	bcf	4024,6,c	;volatile
   911                           
   912                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   913  000B74  9EB8               	bcf	4024,7,c	;volatile
   914                           
   915                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   916  000B76  0E06               	movlw	6
   917  000B78  6E63               	movwf	3939,c	;volatile
   918                           
   919                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   920  000B7A  0E06               	movlw	6
   921  000B7C  6E62               	movwf	3938,c	;volatile
   922                           
   923                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   924  000B7E  9096               	bcf	3990,0,c	;volatile
   925                           
   926                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   927  000B80  9296               	bcf	3990,1,c	;volatile
   928                           
   929                           ;IR_Reading.c: 69: T5CON=0b01011001;
   930  000B82  0E59               	movlw	89
   931  000B84  6EB7               	movwf	4023,c	;volatile
   932  000B86  0012               	return		;funcret
   933  000B88                     __end_of_initIR:
   934                           	opt stack 0
   935                           tblptru	equ	0xFF8
   936                           intcon	equ	0xFF2
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _delay_s *****************
   942 ;; Defined at:
   943 ;;		line 10 in file "Movement.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  seconds         1    wreg     unsigned char 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  seconds         1   15[COMRAM] unsigned char 
   948 ;;  i               2   16[COMRAM] unsigned int 
   949 ;; Return value:  Size  Location     Type
   950 ;;		None               void
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   958 ;;      Params:         0       0       0       0
   959 ;;      Locals:         3       0       0       0
   960 ;;      Temps:          1       0       0       0
   961 ;;      Totals:         4       0       0       0
   962 ;;Total ram usage:        4 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    1
   965 ;; This function calls:
   966 ;;		Nothing
   967 ;; This function is called by:
   968 ;;		_main
   969 ;;		_ScanIR
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           	psect	text4
   974  000A78                     __ptext4:
   975                           	opt stack 0
   976  000A78                     _delay_s:
   977                           	opt stack 29
   978                           
   979                           ;incstack = 0
   980                           ;delay_s@seconds stored from wreg
   981  000A78  6E10               	movwf	delay_s@seconds,c
   982                           
   983                           ;Movement.c: 11: unsigned int i=0;
   984  000A7A  0E00               	movlw	0
   985  000A7C  6E12               	movwf	delay_s@i+1,c
   986  000A7E  0E00               	movlw	0
   987  000A80  6E11               	movwf	delay_s@i,c
   988                           
   989                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
   990  000A82  0E00               	movlw	0
   991  000A84  6E12               	movwf	delay_s@i+1,c
   992  000A86  0E01               	movlw	1
   993  000A88  6E11               	movwf	delay_s@i,c
   994  000A8A  D009               	goto	l1847
   995  000A8C                     l1843:
   996                           
   997                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
   998  000A8C  0E82               	movlw	130
   999  000A8E  6E0F               	movwf	??_delay_s& (0+255),c
  1000  000A90  0EDE               	movlw	222
  1001  000A92                     u1627:
  1002  000A92  2EE8               	decfsz	wreg,f,c
  1003  000A94  D7FE               	goto	u1627
  1004  000A96  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1005  000A98  D7FC               	goto	u1627
  1006  000A9A  4A11               	infsnz	delay_s@i,f,c
  1007  000A9C  2A12               	incf	delay_s@i+1,f,c
  1008  000A9E                     l1847:
  1009  000A9E  5010               	movf	delay_s@seconds,w,c
  1010  000AA0  0D14               	mullw	20
  1011  000AA2  5011               	movf	delay_s@i,w,c
  1012  000AA4  5CF3               	subwf	prodl,w,c
  1013  000AA6  5012               	movf	delay_s@i+1,w,c
  1014  000AA8  58F4               	subwfb	prodh,w,c
  1015  000AAA  A0D8               	btfss	status,0,c
  1016  000AAC  0012               	return	
  1017  000AAE  D7EE               	goto	l1843
  1018  000AB0                     __end_of_delay_s:
  1019                           	opt stack 0
  1020                           tblptru	equ	0xFF8
  1021                           prodh	equ	0xFF4
  1022                           prodl	equ	0xFF3
  1023                           intcon	equ	0xFF2
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _ScanWithRange *****************
  1029 ;; Defined at:
  1030 ;;		line 75 in file "Movement.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1033 ;;		 -> main@motorL(9), 
  1034 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1035 ;;		 -> main@motorR(9), 
  1036 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  SensorResult    4   10[BANK0 ] unsigned int [2]
  1039 ;;  SensorResult    4    4[BANK0 ] unsigned int [2]
  1040 ;;  SensorResult    4    0[BANK0 ] unsigned int [2]
  1041 ;;  DirectionFou    2    8[BANK0 ] unsigned int 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      unsigned char 
  1044 ;; Registers used:
  1045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1051 ;;      Params:         5       0       0       0
  1052 ;;      Locals:         0      14       0       0
  1053 ;;      Temps:          2       0       0       0
  1054 ;;      Totals:         7      14       0       0
  1055 ;;Total ram usage:       21 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    5
  1058 ;; This function calls:
  1059 ;;		___awdiv
  1060 ;;		_delay_tenth_s
  1061 ;;		_enableSensor
  1062 ;;		_grabLeftIR
  1063 ;;		_grabRightIR
  1064 ;;		_stop
  1065 ;;		_turnLeft
  1066 ;;		_turnRight
  1067 ;; This function is called by:
  1068 ;;		_main
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text5
  1073  0000AC                     __ptext5:
  1074                           	opt stack 0
  1075  0000AC                     _ScanWithRange:
  1076                           	opt stack 25
  1077                           
  1078                           ;Movement.c: 78: unsigned int SensorResultL[2];
  1079                           ;Movement.c: 79: unsigned int SensorResultC[2];
  1080                           ;Movement.c: 80: unsigned int SensorResultR[2];
  1081                           ;Movement.c: 82: unsigned int DirectionFoundTolerance=500;
  1082                           
  1083                           ;incstack = 0
  1084  0000AC  0E01               	movlw	1
  1085  0000AE  0100               	movlb	0	; () banked
  1086  0000B0  6F69               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  1087  0000B2  0EF4               	movlw	244
  1088  0000B4  6F68               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;Movement.c: 85: enableSensor(0, 1);
  1092  0000B6  0E01               	movlw	1
  1093  0000B8  6E0F               	movwf	enableSensor@status,c
  1094  0000BA  0E00               	movlw	0
  1095  0000BC  ECA0  F005         	call	_enableSensor
  1096                           
  1097                           ;Movement.c: 86: enableSensor(1, 1);
  1098  0000C0  0E01               	movlw	1
  1099  0000C2  6E0F               	movwf	enableSensor@status,c
  1100  0000C4  0E01               	movlw	1
  1101  0000C6  ECA0  F005         	call	_enableSensor
  1102                           
  1103                           ;Movement.c: 88: stop(mL,mR);
  1104  0000CA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1105  0000CE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1106  0000D2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1107  0000D6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1108  0000DA  ECCC  F003         	call	_stop	;wreg free
  1109                           
  1110                           ;Movement.c: 89: SensorResultC[0]=grabLeftIR();
  1111  0000DE  ECC0  F004         	call	_grabLeftIR	;wreg free
  1112  0000E2  C00F  F06A         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1113  0000E6  C010  F06B         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1114                           
  1115                           ;Movement.c: 90: SensorResultC[1]=grabRightIR();
  1116  0000EA  EC8E  F004         	call	_grabRightIR	;wreg free
  1117  0000EE  C00F  F06C         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1118  0000F2  C010  F06D         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1119                           
  1120                           ;Movement.c: 93: turnLeft(mL,mR);
  1121  0000F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1122  0000FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1123  0000FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1124  000102  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1125  000106  EC17  F005         	call	_turnLeft	;wreg free
  1126                           
  1127                           ;Movement.c: 94: delay_tenth_s(tenth_seconds);
  1128  00010A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1129  00010C  EC58  F005         	call	_delay_tenth_s
  1130                           
  1131                           ;Movement.c: 96: stop(mL,mR);
  1132  000110  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1133  000114  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1134  000118  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1135  00011C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1136  000120  ECCC  F003         	call	_stop	;wreg free
  1137                           
  1138                           ;Movement.c: 97: SensorResultL[0]=grabLeftIR();
  1139  000124  ECC0  F004         	call	_grabLeftIR	;wreg free
  1140  000128  C00F  F060         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1141  00012C  C010  F061         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1142                           
  1143                           ;Movement.c: 98: SensorResultL[1]=grabRightIR();
  1144  000130  EC8E  F004         	call	_grabRightIR	;wreg free
  1145  000134  C00F  F062         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1146  000138  C010  F063         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1147                           
  1148                           ;Movement.c: 101: turnRight(mL,mR);
  1149  00013C  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1150  000140  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1151  000144  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1152  000148  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1153  00014C  ECF2  F004         	call	_turnRight	;wreg free
  1154                           
  1155                           ;Movement.c: 102: delay_tenth_s(2*tenth_seconds);
  1156  000150  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1157  000152  0D02               	mullw	2
  1158  000154  50F3               	movf	prodl,w,c
  1159  000156  EC58  F005         	call	_delay_tenth_s
  1160                           
  1161                           ;Movement.c: 104: stop(mL,mR);
  1162  00015A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1163  00015E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1164  000162  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1165  000166  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1166  00016A  ECCC  F003         	call	_stop	;wreg free
  1167                           
  1168                           ;Movement.c: 105: SensorResultR[0]=grabLeftIR();
  1169  00016E  ECC0  F004         	call	_grabLeftIR	;wreg free
  1170  000172  C00F  F064         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1171  000176  C010  F065         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1172                           
  1173                           ;Movement.c: 106: SensorResultR[1]=grabRightIR();
  1174  00017A  EC8E  F004         	call	_grabRightIR	;wreg free
  1175  00017E  C00F  F066         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1176  000182  C010  F067         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1177                           
  1178                           ;Movement.c: 109: enableSensor(0, 0);
  1179  000186  0E00               	movlw	0
  1180  000188  6E0F               	movwf	enableSensor@status,c
  1181  00018A  0E00               	movlw	0
  1182  00018C  ECA0  F005         	call	_enableSensor
  1183                           
  1184                           ;Movement.c: 110: enableSensor(1, 0);
  1185  000190  0E00               	movlw	0
  1186  000192  6E0F               	movwf	enableSensor@status,c
  1187  000194  0E01               	movlw	1
  1188  000196  ECA0  F005         	call	_enableSensor
  1189                           
  1190                           ;Movement.c: 117: if (((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)
  1191                           ;Movement.c: 118: ||((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)) {
  1192  00019A  C060  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1193  00019E  C061  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1194  0001A2  1E34               	comf	??_ScanWithRange,f,c
  1195  0001A4  1E35               	comf	??_ScanWithRange+1,f,c
  1196  0001A6  4A34               	infsnz	??_ScanWithRange,f,c
  1197  0001A8  2A35               	incf	??_ScanWithRange+1,f,c
  1198  0001AA  0100               	movlb	0	; () banked
  1199  0001AC  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1200  0001AE  2634               	addwf	??_ScanWithRange,f,c
  1201  0001B0  0100               	movlb	0	; () banked
  1202  0001B2  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1203  0001B4  2235               	addwfc	??_ScanWithRange+1,f,c
  1204  0001B6  0100               	movlb	0	; () banked
  1205  0001B8  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1206  0001BA  5C34               	subwf	??_ScanWithRange,w,c
  1207  0001BC  0100               	movlb	0	; () banked
  1208  0001BE  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1209  0001C0  5835               	subwfb	??_ScanWithRange+1,w,c
  1210  0001C2  A0D8               	btfss	status,0,c
  1211  0001C4  D018               	goto	l2145
  1212                           
  1213                           ; BSR set to: 0
  1214  0001C6  EE20  F062         	lfsr	2,ScanWithRange@SensorResultL+2
  1215  0001CA  CFDE F034          	movff	postinc2,??_ScanWithRange
  1216  0001CE  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1217  0001D2  1E34               	comf	??_ScanWithRange,f,c
  1218  0001D4  1E35               	comf	??_ScanWithRange+1,f,c
  1219  0001D6  4A34               	infsnz	??_ScanWithRange,f,c
  1220  0001D8  2A35               	incf	??_ScanWithRange+1,f,c
  1221  0001DA  0100               	movlb	0	; () banked
  1222  0001DC  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1223  0001DE  2634               	addwf	??_ScanWithRange,f,c
  1224  0001E0  0100               	movlb	0	; () banked
  1225  0001E2  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1226  0001E4  2235               	addwfc	??_ScanWithRange+1,f,c
  1227  0001E6  0100               	movlb	0	; () banked
  1228  0001E8  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1229  0001EA  5C34               	subwf	??_ScanWithRange,w,c
  1230  0001EC  0100               	movlb	0	; () banked
  1231  0001EE  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1232  0001F0  5835               	subwfb	??_ScanWithRange+1,w,c
  1233  0001F2  B0D8               	btfsc	status,0,c
  1234  0001F4  D01B               	goto	l2157
  1235  0001F6                     l2145:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;Movement.c: 120: turnLeft(mL,mR);
  1239  0001F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1240  0001FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1241  0001FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1242  000202  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1243  000206  EC17  F005         	call	_turnLeft	;wreg free
  1244                           
  1245                           ;Movement.c: 121: delay_tenth_s(2*(tenth_seconds));
  1246  00020A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1247  00020C  0D02               	mullw	2
  1248  00020E  50F3               	movf	prodl,w,c
  1249  000210  EC58  F005         	call	_delay_tenth_s
  1250                           
  1251                           ;Movement.c: 122: stop(mL,mR);
  1252  000214  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1253  000218  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1254  00021C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1255  000220  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1256  000224  ECCC  F003         	call	_stop	;wreg free
  1257  000228                     l2151:
  1258                           
  1259                           ;Movement.c: 123: return 2;
  1260  000228  0E02               	movlw	2
  1261  00022A  0012               	return	
  1262  00022C                     l2157:
  1263                           
  1264                           ;Movement.c: 125: ||((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)) {
  1265  00022C  C06A  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1266  000230  C06B  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1267  000234  1E34               	comf	??_ScanWithRange,f,c
  1268  000236  1E35               	comf	??_ScanWithRange+1,f,c
  1269  000238  4A34               	infsnz	??_ScanWithRange,f,c
  1270  00023A  2A35               	incf	??_ScanWithRange+1,f,c
  1271  00023C  0100               	movlb	0	; () banked
  1272  00023E  516C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1273  000240  2634               	addwf	??_ScanWithRange,f,c
  1274  000242  0100               	movlb	0	; () banked
  1275  000244  516D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1276  000246  2235               	addwfc	??_ScanWithRange+1,f,c
  1277  000248  0100               	movlb	0	; () banked
  1278  00024A  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1279  00024C  5C34               	subwf	??_ScanWithRange,w,c
  1280  00024E  0100               	movlb	0	; () banked
  1281  000250  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1282  000252  5835               	subwfb	??_ScanWithRange+1,w,c
  1283  000254  A0D8               	btfss	status,0,c
  1284  000256  D018               	goto	l2161
  1285                           
  1286                           ; BSR set to: 0
  1287  000258  EE20  F06C         	lfsr	2,ScanWithRange@SensorResultC+2
  1288  00025C  CFDE F034          	movff	postinc2,??_ScanWithRange
  1289  000260  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1290  000264  1E34               	comf	??_ScanWithRange,f,c
  1291  000266  1E35               	comf	??_ScanWithRange+1,f,c
  1292  000268  4A34               	infsnz	??_ScanWithRange,f,c
  1293  00026A  2A35               	incf	??_ScanWithRange+1,f,c
  1294  00026C  0100               	movlb	0	; () banked
  1295  00026E  516A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1296  000270  2634               	addwf	??_ScanWithRange,f,c
  1297  000272  0100               	movlb	0	; () banked
  1298  000274  516B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1299  000276  2235               	addwfc	??_ScanWithRange+1,f,c
  1300  000278  0100               	movlb	0	; () banked
  1301  00027A  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1302  00027C  5C34               	subwf	??_ScanWithRange,w,c
  1303  00027E  0100               	movlb	0	; () banked
  1304  000280  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1305  000282  5835               	subwfb	??_ScanWithRange+1,w,c
  1306  000284  B0D8               	btfsc	status,0,c
  1307  000286  D018               	goto	l2173
  1308  000288                     l2161:
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;Movement.c: 127: turnLeft(mL,mR);
  1312  000288  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1313  00028C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1314  000290  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1315  000294  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1316  000298  EC17  F005         	call	_turnLeft	;wreg free
  1317                           
  1318                           ;Movement.c: 128: delay_tenth_s(tenth_seconds);
  1319  00029C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1320  00029E  EC58  F005         	call	_delay_tenth_s
  1321                           
  1322                           ;Movement.c: 129: stop(mL,mR);
  1323  0002A2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1324  0002A6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1325  0002AA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1326  0002AE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1327  0002B2  ECCC  F003         	call	_stop	;wreg free
  1328  0002B6  D7B8               	goto	l2151
  1329  0002B8                     l2173:
  1330                           
  1331                           ;Movement.c: 132: ||((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)) {
  1332  0002B8  C064  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1333  0002BC  C065  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1334  0002C0  1E34               	comf	??_ScanWithRange,f,c
  1335  0002C2  1E35               	comf	??_ScanWithRange+1,f,c
  1336  0002C4  4A34               	infsnz	??_ScanWithRange,f,c
  1337  0002C6  2A35               	incf	??_ScanWithRange+1,f,c
  1338  0002C8  0100               	movlb	0	; () banked
  1339  0002CA  5166               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1340  0002CC  2634               	addwf	??_ScanWithRange,f,c
  1341  0002CE  0100               	movlb	0	; () banked
  1342  0002D0  5167               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1343  0002D2  2235               	addwfc	??_ScanWithRange+1,f,c
  1344  0002D4  0100               	movlb	0	; () banked
  1345  0002D6  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1346  0002D8  5C34               	subwf	??_ScanWithRange,w,c
  1347  0002DA  0100               	movlb	0	; () banked
  1348  0002DC  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1349  0002DE  5835               	subwfb	??_ScanWithRange+1,w,c
  1350  0002E0  A0D8               	btfss	status,0,c
  1351  0002E2  D018               	goto	l2177
  1352                           
  1353                           ; BSR set to: 0
  1354  0002E4  EE20  F066         	lfsr	2,ScanWithRange@SensorResultR+2
  1355  0002E8  CFDE F034          	movff	postinc2,??_ScanWithRange
  1356  0002EC  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1357  0002F0  1E34               	comf	??_ScanWithRange,f,c
  1358  0002F2  1E35               	comf	??_ScanWithRange+1,f,c
  1359  0002F4  4A34               	infsnz	??_ScanWithRange,f,c
  1360  0002F6  2A35               	incf	??_ScanWithRange+1,f,c
  1361  0002F8  0100               	movlb	0	; () banked
  1362  0002FA  5164               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1363  0002FC  2634               	addwf	??_ScanWithRange,f,c
  1364  0002FE  0100               	movlb	0	; () banked
  1365  000300  5165               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1366  000302  2235               	addwfc	??_ScanWithRange+1,f,c
  1367  000304  0100               	movlb	0	; () banked
  1368  000306  5168               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1369  000308  5C34               	subwf	??_ScanWithRange,w,c
  1370  00030A  0100               	movlb	0	; () banked
  1371  00030C  5169               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1372  00030E  5835               	subwfb	??_ScanWithRange+1,w,c
  1373  000310  B0D8               	btfsc	status,0,c
  1374  000312  D00B               	goto	l2185
  1375  000314                     l2177:
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;Movement.c: 134: stop(mL,mR);
  1379  000314  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1380  000318  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1381  00031C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1382  000320  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1383  000324  ECCC  F003         	call	_stop	;wreg free
  1384  000328  D77F               	goto	l2151
  1385  00032A                     l2185:
  1386  00032A  EE20  F062         	lfsr	2,ScanWithRange@SensorResultL+2
  1387  00032E  CFDE F034          	movff	postinc2,??_ScanWithRange
  1388  000332  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1389  000336  1E34               	comf	??_ScanWithRange,f,c
  1390  000338  1E35               	comf	??_ScanWithRange+1,f,c
  1391  00033A  4A34               	infsnz	??_ScanWithRange,f,c
  1392  00033C  2A35               	incf	??_ScanWithRange+1,f,c
  1393  00033E  0100               	movlb	0	; () banked
  1394  000340  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1395  000342  2634               	addwf	??_ScanWithRange,f,c
  1396  000344  0100               	movlb	0	; () banked
  1397  000346  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1398  000348  2235               	addwfc	??_ScanWithRange+1,f,c
  1399  00034A  0E89               	movlw	137
  1400  00034C  5C34               	subwf	??_ScanWithRange,w,c
  1401  00034E  0E13               	movlw	19
  1402  000350  5835               	subwfb	??_ScanWithRange+1,w,c
  1403  000352  A0D8               	btfss	status,0,c
  1404  000354  D02F               	goto	l2201
  1405                           
  1406                           ; BSR set to: 0
  1407  000356  C06A  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1408  00035A  C06B  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1409  00035E  1E34               	comf	??_ScanWithRange,f,c
  1410  000360  1E35               	comf	??_ScanWithRange+1,f,c
  1411  000362  4A34               	infsnz	??_ScanWithRange,f,c
  1412  000364  2A35               	incf	??_ScanWithRange+1,f,c
  1413  000366  0100               	movlb	0	; () banked
  1414  000368  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1415  00036A  2634               	addwf	??_ScanWithRange,f,c
  1416  00036C  0100               	movlb	0	; () banked
  1417  00036E  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1418  000370  2235               	addwfc	??_ScanWithRange+1,f,c
  1419  000372  0E11               	movlw	17
  1420  000374  5C34               	subwf	??_ScanWithRange,w,c
  1421  000376  0E27               	movlw	39
  1422  000378  5835               	subwfb	??_ScanWithRange+1,w,c
  1423  00037A  A0D8               	btfss	status,0,c
  1424  00037C  D01B               	goto	l2201
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;Movement.c: 140: turnLeft(mL,mR);
  1428  00037E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1429  000382  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1430  000386  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1431  00038A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1432  00038E  EC17  F005         	call	_turnLeft	;wreg free
  1433                           
  1434                           ;Movement.c: 141: delay_tenth_s(3*tenth_seconds);
  1435  000392  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1436  000394  0D03               	mullw	3
  1437  000396  50F3               	movf	prodl,w,c
  1438  000398  EC58  F005         	call	_delay_tenth_s
  1439                           
  1440                           ;Movement.c: 142: stop(mL,mR);
  1441  00039C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1442  0003A0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1443  0003A4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1444  0003A8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1445  0003AC  ECCC  F003         	call	_stop	;wreg free
  1446  0003B0                     l2195:
  1447                           
  1448                           ;Movement.c: 143: return 0;
  1449  0003B0  0E00               	movlw	0
  1450  0003B2  0012               	return	
  1451  0003B4                     l2201:
  1452  0003B4  C064  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1453  0003B8  C065  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1454  0003BC  1E34               	comf	??_ScanWithRange,f,c
  1455  0003BE  1E35               	comf	??_ScanWithRange+1,f,c
  1456  0003C0  4A34               	infsnz	??_ScanWithRange,f,c
  1457  0003C2  2A35               	incf	??_ScanWithRange+1,f,c
  1458  0003C4  0100               	movlb	0	; () banked
  1459  0003C6  5166               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1460  0003C8  2634               	addwf	??_ScanWithRange,f,c
  1461  0003CA  0100               	movlb	0	; () banked
  1462  0003CC  5167               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1463  0003CE  2235               	addwfc	??_ScanWithRange+1,f,c
  1464  0003D0  0E89               	movlw	137
  1465  0003D2  5C34               	subwf	??_ScanWithRange,w,c
  1466  0003D4  0E13               	movlw	19
  1467  0003D6  5835               	subwfb	??_ScanWithRange+1,w,c
  1468  0003D8  A0D8               	btfss	status,0,c
  1469  0003DA  D02E               	goto	l2217
  1470                           
  1471                           ; BSR set to: 0
  1472  0003DC  EE20  F06C         	lfsr	2,ScanWithRange@SensorResultC+2
  1473  0003E0  CFDE F034          	movff	postinc2,??_ScanWithRange
  1474  0003E4  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1475  0003E8  1E34               	comf	??_ScanWithRange,f,c
  1476  0003EA  1E35               	comf	??_ScanWithRange+1,f,c
  1477  0003EC  4A34               	infsnz	??_ScanWithRange,f,c
  1478  0003EE  2A35               	incf	??_ScanWithRange+1,f,c
  1479  0003F0  0100               	movlb	0	; () banked
  1480  0003F2  5166               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1481  0003F4  2634               	addwf	??_ScanWithRange,f,c
  1482  0003F6  0100               	movlb	0	; () banked
  1483  0003F8  5167               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1484  0003FA  2235               	addwfc	??_ScanWithRange+1,f,c
  1485  0003FC  0E11               	movlw	17
  1486  0003FE  5C34               	subwf	??_ScanWithRange,w,c
  1487  000400  0E27               	movlw	39
  1488  000402  5835               	subwfb	??_ScanWithRange+1,w,c
  1489  000404  A0D8               	btfss	status,0,c
  1490  000406  D018               	goto	l2217
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;Movement.c: 146: turnRight(mL,mR);
  1494  000408  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1495  00040C  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1496  000410  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1497  000414  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1498  000418  ECF2  F004         	call	_turnRight	;wreg free
  1499                           
  1500                           ;Movement.c: 147: delay_tenth_s(tenth_seconds);
  1501  00041C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1502  00041E  EC58  F005         	call	_delay_tenth_s
  1503                           
  1504                           ;Movement.c: 148: stop(mL,mR);
  1505  000422  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1506  000426  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1507  00042A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1508  00042E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1509  000432  ECCC  F003         	call	_stop	;wreg free
  1510  000436  D7BC               	goto	l2195
  1511  000438                     l2217:
  1512  000438  0100               	movlb	0	; () banked
  1513  00043A  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1514  00043C  0100               	movlb	0	; () banked
  1515  00043E  5D60               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1516  000440  0100               	movlb	0	; () banked
  1517  000442  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1518  000444  0100               	movlb	0	; () banked
  1519  000446  5961               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1520  000448  B0D8               	btfsc	status,0,c
  1521  00044A  D02F               	goto	l2233
  1522                           
  1523                           ; BSR set to: 0
  1524  00044C  0100               	movlb	0	; () banked
  1525  00044E  516A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1526  000450  0100               	movlb	0	; () banked
  1527  000452  5D6C               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1528  000454  0100               	movlb	0	; () banked
  1529  000456  516B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1530  000458  0100               	movlb	0	; () banked
  1531  00045A  596D               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1532  00045C  B0D8               	btfsc	status,0,c
  1533  00045E  D025               	goto	l2233
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;Movement.c: 154: turnLeft(mL,mR);
  1537  000460  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1538  000464  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1539  000468  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1540  00046C  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1541  000470  EC17  F005         	call	_turnLeft	;wreg free
  1542                           
  1543                           ;Movement.c: 155: delay_tenth_s((3*tenth_seconds)/2);
  1544  000474  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1545  000476  0D03               	mullw	3
  1546  000478  CFF3 F015          	movff	prodl,___awdiv@dividend
  1547  00047C  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1548  000480  0E00               	movlw	0
  1549  000482  6E18               	movwf	___awdiv@divisor+1,c
  1550  000484  0E02               	movlw	2
  1551  000486  6E17               	movwf	___awdiv@divisor,c
  1552  000488  EC14  F004         	call	___awdiv	;wreg free
  1553  00048C  5015               	movf	?___awdiv,w,c
  1554  00048E  EC58  F005         	call	_delay_tenth_s
  1555                           
  1556                           ;Movement.c: 156: stop(mL,mR);
  1557  000492  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1558  000496  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1559  00049A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1560  00049E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1561  0004A2  ECCC  F003         	call	_stop	;wreg free
  1562  0004A6                     l2227:
  1563                           
  1564                           ;Movement.c: 157: return 1;
  1565  0004A6  0E01               	movlw	1
  1566  0004A8  0012               	return	
  1567  0004AA                     l2233:
  1568  0004AA  0100               	movlb	0	; () banked
  1569  0004AC  5164               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1570  0004AE  0100               	movlb	0	; () banked
  1571  0004B0  5D66               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1572  0004B2  0100               	movlb	0	; () banked
  1573  0004B4  5165               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1574  0004B6  0100               	movlb	0	; () banked
  1575  0004B8  5967               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1576  0004BA  B0D8               	btfsc	status,0,c
  1577  0004BC  D02B               	goto	l2247
  1578                           
  1579                           ; BSR set to: 0
  1580  0004BE  0100               	movlb	0	; () banked
  1581  0004C0  516C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1582  0004C2  0100               	movlb	0	; () banked
  1583  0004C4  5D6A               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  1584  0004C6  0100               	movlb	0	; () banked
  1585  0004C8  516D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1586  0004CA  0100               	movlb	0	; () banked
  1587  0004CC  596B               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1588  0004CE  B0D8               	btfsc	status,0,c
  1589  0004D0  D021               	goto	l2247
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;Movement.c: 160: turnLeft(mL,mR);
  1593  0004D2  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1594  0004D6  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1595  0004DA  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1596  0004DE  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1597  0004E2  EC17  F005         	call	_turnLeft	;wreg free
  1598                           
  1599                           ;Movement.c: 161: delay_tenth_s((tenth_seconds)/2);
  1600  0004E6  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  1601  0004EA  6A16               	clrf	___awdiv@dividend+1,c
  1602  0004EC  0E00               	movlw	0
  1603  0004EE  6E18               	movwf	___awdiv@divisor+1,c
  1604  0004F0  0E02               	movlw	2
  1605  0004F2  6E17               	movwf	___awdiv@divisor,c
  1606  0004F4  EC14  F004         	call	___awdiv	;wreg free
  1607  0004F8  5015               	movf	?___awdiv,w,c
  1608  0004FA  EC58  F005         	call	_delay_tenth_s
  1609                           
  1610                           ;Movement.c: 162: stop(mL,mR);
  1611  0004FE  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1612  000502  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1613  000506  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1614  00050A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1615  00050E  ECCC  F003         	call	_stop	;wreg free
  1616  000512  D7C9               	goto	l2227
  1617  000514                     l2247:
  1618                           
  1619                           ;Movement.c: 164: }
  1620                           ;Movement.c: 166: return 0;
  1621  000514  0E00               	movlw	0
  1622  000516  0012               	return	
  1623  000518                     __end_of_ScanWithRange:
  1624                           	opt stack 0
  1625                           tblptru	equ	0xFF8
  1626                           prodh	equ	0xFF4
  1627                           prodl	equ	0xFF3
  1628                           intcon	equ	0xFF2
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postinc2	equ	0xFDE
  1632                           postdec2	equ	0xFDD
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _turnRight *****************
  1636 ;; Defined at:
  1637 ;;		line 98 in file "dc_motor.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1640 ;;		 -> main@motorL(9), 
  1641 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1642 ;;		 -> main@motorR(9), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;		None               void
  1647 ;; Registers used:
  1648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1654 ;;      Params:         4       0       0       0
  1655 ;;      Locals:         0       0       0       0
  1656 ;;      Temps:          0       0       0       0
  1657 ;;      Totals:         4       0       0       0
  1658 ;;Total ram usage:        4 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    4
  1661 ;; This function calls:
  1662 ;;		_fullSpeedAhead
  1663 ;;		_stop
  1664 ;; This function is called by:
  1665 ;;		_ScanWithRange
  1666 ;;		_ScanIR
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text6
  1671  0009E4                     __ptext6:
  1672                           	opt stack 0
  1673  0009E4                     _turnRight:
  1674                           	opt stack 25
  1675                           
  1676                           ;dc_motor.c: 100: stop(mL, mR);
  1677                           
  1678                           ;incstack = 0
  1679  0009E4  C02B  F026         	movff	turnRight@mL,stop@mL
  1680  0009E8  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  1681  0009EC  C02D  F028         	movff	turnRight@mR,stop@mR
  1682  0009F0  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  1683  0009F4  ECCC  F003         	call	_stop	;wreg free
  1684                           
  1685                           ;dc_motor.c: 102: mL->direction=1;
  1686  0009F8  EE20 F001          	lfsr	2,1
  1687  0009FC  502B               	movf	turnRight@mL,w,c
  1688  0009FE  26D9               	addwf	fsr2l,f,c
  1689  000A00  502C               	movf	turnRight@mL+1,w,c
  1690  000A02  22DA               	addwfc	fsr2h,f,c
  1691  000A04  0E01               	movlw	1
  1692  000A06  6EDF               	movwf	indf2,c
  1693                           
  1694                           ;dc_motor.c: 103: mR->direction=0;
  1695  000A08  EE20 F001          	lfsr	2,1
  1696  000A0C  502D               	movf	turnRight@mR,w,c
  1697  000A0E  26D9               	addwf	fsr2l,f,c
  1698  000A10  502E               	movf	turnRight@mR+1,w,c
  1699  000A12  22DA               	addwfc	fsr2h,f,c
  1700  000A14  0E00               	movlw	0
  1701  000A16  6EDF               	movwf	indf2,c
  1702                           
  1703                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  1704  000A18  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1705  000A1C  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1706  000A20  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1707  000A24  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1708  000A28  EC56  F004         	call	_fullSpeedAhead	;wreg free
  1709  000A2C  0012               	return		;funcret
  1710  000A2E                     __end_of_turnRight:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           prodh	equ	0xFF4
  1714                           prodl	equ	0xFF3
  1715                           intcon	equ	0xFF2
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           indf2	equ	0xFDF
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _turnLeft *****************
  1726 ;; Defined at:
  1727 ;;		line 87 in file "dc_motor.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1730 ;;		 -> main@motorL(9), 
  1731 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1732 ;;		 -> main@motorR(9), 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;		None               void
  1737 ;; Registers used:
  1738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1744 ;;      Params:         4       0       0       0
  1745 ;;      Locals:         0       0       0       0
  1746 ;;      Temps:          0       0       0       0
  1747 ;;      Totals:         4       0       0       0
  1748 ;;Total ram usage:        4 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    4
  1751 ;; This function calls:
  1752 ;;		_fullSpeedAhead
  1753 ;;		_stop
  1754 ;; This function is called by:
  1755 ;;		_ScanWithRange
  1756 ;;		_ScanIR
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text7
  1761  000A2E                     __ptext7:
  1762                           	opt stack 0
  1763  000A2E                     _turnLeft:
  1764                           	opt stack 25
  1765                           
  1766                           ;dc_motor.c: 89: stop(mL, mR);
  1767                           
  1768                           ;incstack = 0
  1769  000A2E  C02B  F026         	movff	turnLeft@mL,stop@mL
  1770  000A32  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  1771  000A36  C02D  F028         	movff	turnLeft@mR,stop@mR
  1772  000A3A  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  1773  000A3E  ECCC  F003         	call	_stop	;wreg free
  1774                           
  1775                           ;dc_motor.c: 91: mL->direction=0;
  1776  000A42  EE20 F001          	lfsr	2,1
  1777  000A46  502B               	movf	turnLeft@mL,w,c
  1778  000A48  26D9               	addwf	fsr2l,f,c
  1779  000A4A  502C               	movf	turnLeft@mL+1,w,c
  1780  000A4C  22DA               	addwfc	fsr2h,f,c
  1781  000A4E  0E00               	movlw	0
  1782  000A50  6EDF               	movwf	indf2,c
  1783                           
  1784                           ;dc_motor.c: 92: mR->direction=1;
  1785  000A52  EE20 F001          	lfsr	2,1
  1786  000A56  502D               	movf	turnLeft@mR,w,c
  1787  000A58  26D9               	addwf	fsr2l,f,c
  1788  000A5A  502E               	movf	turnLeft@mR+1,w,c
  1789  000A5C  22DA               	addwfc	fsr2h,f,c
  1790  000A5E  0E01               	movlw	1
  1791  000A60  6EDF               	movwf	indf2,c
  1792                           
  1793                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  1794  000A62  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1795  000A66  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1796  000A6A  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1797  000A6E  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1798  000A72  EC56  F004         	call	_fullSpeedAhead	;wreg free
  1799  000A76  0012               	return		;funcret
  1800  000A78                     __end_of_turnLeft:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf2	equ	0xFDF
  1809                           postinc2	equ	0xFDE
  1810                           postdec2	equ	0xFDD
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _stop *****************
  1816 ;; Defined at:
  1817 ;;		line 67 in file "dc_motor.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1820 ;;		 -> main@motorL(9), 
  1821 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1822 ;;		 -> main@motorR(9), 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;		None               void
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1834 ;;      Params:         4       0       0       0
  1835 ;;      Locals:         0       0       0       0
  1836 ;;      Temps:          0       0       0       0
  1837 ;;      Totals:         4       0       0       0
  1838 ;;Total ram usage:        4 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    3
  1841 ;; This function calls:
  1842 ;;		_setMotorPWM
  1843 ;; This function is called by:
  1844 ;;		_turnLeft
  1845 ;;		_turnRight
  1846 ;;		_ScanWithRange
  1847 ;;		_ScanIR
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text8
  1852  000798                     __ptext8:
  1853                           	opt stack 0
  1854  000798                     _stop:
  1855                           	opt stack 25
  1856                           
  1857                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1858                           
  1859                           ;incstack = 0
  1860  000798  D028               	goto	l2021
  1861  00079A                     l2007:
  1862                           
  1863                           ;dc_motor.c: 71: if(mL->power>0){
  1864  00079A  C026  FFD9         	movff	stop@mL,fsr2l
  1865  00079E  C027  FFDA         	movff	stop@mL+1,fsr2h
  1866  0007A2  50DF               	movf	indf2,w,c
  1867  0007A4  B4D8               	btfsc	status,2,c
  1868  0007A6  D005               	goto	l2011
  1869                           
  1870                           ;dc_motor.c: 72: mL->power--;
  1871  0007A8  C026  FFD9         	movff	stop@mL,fsr2l
  1872  0007AC  C027  FFDA         	movff	stop@mL+1,fsr2h
  1873  0007B0  06DF               	decf	indf2,f,c
  1874  0007B2                     l2011:
  1875                           
  1876                           ;dc_motor.c: 73: }
  1877                           ;dc_motor.c: 74: if(mR->power>0){
  1878  0007B2  C028  FFD9         	movff	stop@mR,fsr2l
  1879  0007B6  C029  FFDA         	movff	stop@mR+1,fsr2h
  1880  0007BA  50DF               	movf	indf2,w,c
  1881  0007BC  B4D8               	btfsc	status,2,c
  1882  0007BE  D005               	goto	l2015
  1883                           
  1884                           ;dc_motor.c: 75: mR->power--;
  1885  0007C0  C028  FFD9         	movff	stop@mR,fsr2l
  1886  0007C4  C029  FFDA         	movff	stop@mR+1,fsr2h
  1887  0007C8  06DF               	decf	indf2,f,c
  1888  0007CA                     l2015:
  1889                           
  1890                           ;dc_motor.c: 76: }
  1891                           ;dc_motor.c: 77: setMotorPWM(mL);
  1892  0007CA  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1893  0007CE  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1894  0007D2  EC32  F003         	call	_setMotorPWM	;wreg free
  1895                           
  1896                           ;dc_motor.c: 78: setMotorPWM(mR);
  1897  0007D6  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1898  0007DA  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1899  0007DE  EC32  F003         	call	_setMotorPWM	;wreg free
  1900                           
  1901                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1902  0007E2  0E21               	movlw	33
  1903  0007E4                     u1637:
  1904  0007E4  2EE8               	decfsz	wreg,f,c
  1905  0007E6  D7FE               	goto	u1637
  1906  0007E8  F000               	nop	
  1907  0007EA                     l2021:
  1908  0007EA  C026  FFD9         	movff	stop@mL,fsr2l
  1909  0007EE  C027  FFDA         	movff	stop@mL+1,fsr2h
  1910  0007F2  50DF               	movf	indf2,w,c
  1911  0007F4  A4D8               	btfss	status,2,c
  1912  0007F6  D7D1               	goto	l2007
  1913  0007F8  C028  FFD9         	movff	stop@mR,fsr2l
  1914  0007FC  C029  FFDA         	movff	stop@mR+1,fsr2h
  1915  000800  50DF               	movf	indf2,w,c
  1916  000802  A4D8               	btfss	status,2,c
  1917  000804  D7CA               	goto	l2007
  1918                           
  1919                           ;dc_motor.c: 80: }
  1920                           ;dc_motor.c: 81: mL->direction=1;
  1921  000806  EE20 F001          	lfsr	2,1
  1922  00080A  5026               	movf	stop@mL,w,c
  1923  00080C  26D9               	addwf	fsr2l,f,c
  1924  00080E  5027               	movf	stop@mL+1,w,c
  1925  000810  22DA               	addwfc	fsr2h,f,c
  1926  000812  0E01               	movlw	1
  1927  000814  6EDF               	movwf	indf2,c
  1928                           
  1929                           ;dc_motor.c: 82: mR->direction=1;
  1930  000816  EE20 F001          	lfsr	2,1
  1931  00081A  5028               	movf	stop@mR,w,c
  1932  00081C  26D9               	addwf	fsr2l,f,c
  1933  00081E  5029               	movf	stop@mR+1,w,c
  1934  000820  22DA               	addwfc	fsr2h,f,c
  1935  000822  0E01               	movlw	1
  1936  000824  6EDF               	movwf	indf2,c
  1937  000826  0012               	return		;funcret
  1938  000828                     __end_of_stop:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           intcon	equ	0xFF2
  1944                           postinc0	equ	0xFEE
  1945                           wreg	equ	0xFE8
  1946                           indf2	equ	0xFDF
  1947                           postinc2	equ	0xFDE
  1948                           postdec2	equ	0xFDD
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _fullSpeedAhead *****************
  1954 ;; Defined at:
  1955 ;;		line 108 in file "dc_motor.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1958 ;;		 -> main@motorL(9), 
  1959 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1960 ;;		 -> main@motorR(9), 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1972 ;;      Params:         4       0       0       0
  1973 ;;      Locals:         0       0       0       0
  1974 ;;      Temps:          1       0       0       0
  1975 ;;      Totals:         5       0       0       0
  1976 ;;Total ram usage:        5 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    3
  1979 ;; This function calls:
  1980 ;;		_setMotorPWM
  1981 ;; This function is called by:
  1982 ;;		_turnLeft
  1983 ;;		_turnRight
  1984 ;;		_fullSpeedBack
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text9
  1989  0008AC                     __ptext9:
  1990                           	opt stack 0
  1991  0008AC                     _fullSpeedAhead:
  1992                           	opt stack 25
  1993                           
  1994                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  1995                           
  1996                           ;incstack = 0
  1997  0008AC  D028               	goto	l129
  1998  0008AE                     l2029:
  1999                           
  2000                           ;dc_motor.c: 112: if(mL->power<100){
  2001  0008AE  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2002  0008B2  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2003  0008B6  0E64               	movlw	100
  2004  0008B8  60DF               	cpfslt	indf2,c
  2005  0008BA  D005               	goto	l2033
  2006                           
  2007                           ;dc_motor.c: 113: mL->power++;
  2008  0008BC  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2009  0008C0  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2010  0008C4  2ADF               	incf	indf2,f,c
  2011  0008C6                     l2033:
  2012                           
  2013                           ;dc_motor.c: 114: }
  2014                           ;dc_motor.c: 115: if(mR->power<100){
  2015  0008C6  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2016  0008CA  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2017  0008CE  0E64               	movlw	100
  2018  0008D0  60DF               	cpfslt	indf2,c
  2019  0008D2  D005               	goto	l2037
  2020                           
  2021                           ;dc_motor.c: 116: mR->power++;
  2022  0008D4  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2023  0008D8  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2024  0008DC  2ADF               	incf	indf2,f,c
  2025  0008DE                     l2037:
  2026                           
  2027                           ;dc_motor.c: 117: }
  2028                           ;dc_motor.c: 118: setMotorPWM(mL);
  2029  0008DE  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2030  0008E2  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2031  0008E6  EC32  F003         	call	_setMotorPWM	;wreg free
  2032                           
  2033                           ;dc_motor.c: 119: setMotorPWM(mR);
  2034  0008EA  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2035  0008EE  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2036  0008F2  EC32  F003         	call	_setMotorPWM	;wreg free
  2037                           
  2038                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2039  0008F6  0E21               	movlw	33
  2040  0008F8                     u1647:
  2041  0008F8  2EE8               	decfsz	wreg,f,c
  2042  0008FA  D7FE               	goto	u1647
  2043  0008FC  F000               	nop	
  2044  0008FE                     l129:
  2045  0008FE  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2046  000902  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2047  000906  0E63               	movlw	99
  2048  000908  64DF               	cpfsgt	indf2,c
  2049  00090A  D7D1               	goto	l2029
  2050  00090C  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2051  000910  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2052  000914  0E63               	movlw	99
  2053  000916  64DF               	cpfsgt	indf2,c
  2054  000918  D7CA               	goto	l2029
  2055  00091A  0012               	return	
  2056  00091C                     __end_of_fullSpeedAhead:
  2057                           	opt stack 0
  2058                           tblptru	equ	0xFF8
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           intcon	equ	0xFF2
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _setMotorPWM *****************
  2072 ;; Defined at:
  2073 ;;		line 26 in file "dc_motor.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2076 ;;		 -> main@motorR(9), main@motorL(9), 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  PWMduty         2   35[COMRAM] int 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;		None               void
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2088 ;;      Params:         2       0       0       0
  2089 ;;      Locals:         2       0       0       0
  2090 ;;      Temps:          5       0       0       0
  2091 ;;      Totals:         9       0       0       0
  2092 ;;Total ram usage:        9 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    2
  2095 ;; This function calls:
  2096 ;;		___awdiv
  2097 ;;		___wmul
  2098 ;; This function is called by:
  2099 ;;		_stop
  2100 ;;		_fullSpeedAhead
  2101 ;;		_setMotorFullSpeed
  2102 ;;		_stopMotor
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text10
  2107  000664                     __ptext10:
  2108                           	opt stack 0
  2109  000664                     _setMotorPWM:
  2110                           	opt stack 25
  2111                           
  2112                           ;dc_motor.c: 28: int PWMduty;
  2113                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2114                           
  2115                           ;incstack = 0
  2116  000664  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2117  000668  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2118  00066C  50DF               	movf	indf2,w,c
  2119  00066E  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2120  000670  501F               	movf	??_setMotorPWM,w,c
  2121  000672  6E0F               	movwf	___wmul@multiplier,c
  2122  000674  6A10               	clrf	___wmul@multiplier+1,c
  2123  000676  EE20 F007          	lfsr	2,7
  2124  00067A  501D               	movf	setMotorPWM@m,w,c
  2125  00067C  26D9               	addwf	fsr2l,f,c
  2126  00067E  501E               	movf	setMotorPWM@m+1,w,c
  2127  000680  22DA               	addwfc	fsr2h,f,c
  2128  000682  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2129  000686  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2130  00068A  EC8D  F005         	call	___wmul	;wreg free
  2131  00068E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2132  000692  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2133  000696  0E00               	movlw	0
  2134  000698  6E18               	movwf	___awdiv@divisor+1,c
  2135  00069A  0E64               	movlw	100
  2136  00069C  6E17               	movwf	___awdiv@divisor,c
  2137  00069E  EC14  F004         	call	___awdiv	;wreg free
  2138  0006A2  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2139  0006A6  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2140                           
  2141                           ;dc_motor.c: 32: if (m->direction)
  2142  0006AA  EE20 F001          	lfsr	2,1
  2143  0006AE  501D               	movf	setMotorPWM@m,w,c
  2144  0006B0  26D9               	addwf	fsr2l,f,c
  2145  0006B2  501E               	movf	setMotorPWM@m+1,w,c
  2146  0006B4  22DA               	addwfc	fsr2h,f,c
  2147  0006B6  50DF               	movf	indf2,w,c
  2148  0006B8  B4D8               	btfsc	status,2,c
  2149  0006BA  D02C               	goto	l2003
  2150                           
  2151                           ;dc_motor.c: 33: {
  2152                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2153  0006BC  EE20 F006          	lfsr	2,6
  2154  0006C0  501D               	movf	setMotorPWM@m,w,c
  2155  0006C2  26D9               	addwf	fsr2l,f,c
  2156  0006C4  501E               	movf	setMotorPWM@m+1,w,c
  2157  0006C6  22DA               	addwfc	fsr2h,f,c
  2158  0006C8  50DF               	movf	indf2,w,c
  2159  0006CA  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2160  0006CC  0E01               	movlw	1
  2161  0006CE  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2162  0006D0  2A1F               	incf	??_setMotorPWM,f,c
  2163  0006D2  D002               	goto	u1224
  2164  0006D4                     u1225:
  2165  0006D4  90D8               	bcf	status,0,c
  2166  0006D6  3620               	rlcf	??_setMotorPWM+1,f,c
  2167  0006D8                     u1224:
  2168  0006D8  2E1F               	decfsz	??_setMotorPWM,f,c
  2169  0006DA  D7FC               	goto	u1225
  2170  0006DC  5020               	movf	??_setMotorPWM+1,w,c
  2171  0006DE  108A               	iorwf	3978,w,c	;volatile
  2172  0006E0  6E8A               	movwf	3978,c	;volatile
  2173                           
  2174                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2175  0006E2  EE20 F007          	lfsr	2,7
  2176  0006E6  501D               	movf	setMotorPWM@m,w,c
  2177  0006E8  26D9               	addwf	fsr2l,f,c
  2178  0006EA  501E               	movf	setMotorPWM@m+1,w,c
  2179  0006EC  22DA               	addwfc	fsr2h,f,c
  2180  0006EE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2181  0006F2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2182  0006F6  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2183  0006FA  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2184  0006FE  1E21               	comf	??_setMotorPWM+2,f,c
  2185  000700  1E22               	comf	??_setMotorPWM+3,f,c
  2186  000702  4A21               	infsnz	??_setMotorPWM+2,f,c
  2187  000704  2A22               	incf	??_setMotorPWM+3,f,c
  2188  000706  501F               	movf	??_setMotorPWM,w,c
  2189  000708  2421               	addwf	??_setMotorPWM+2,w,c
  2190  00070A  6E24               	movwf	setMotorPWM@PWMduty,c
  2191  00070C  5020               	movf	??_setMotorPWM+1,w,c
  2192  00070E  2022               	addwfc	??_setMotorPWM+3,w,c
  2193  000710  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2194                           
  2195                           ;dc_motor.c: 36: }
  2196  000712  D014               	goto	l99
  2197  000714                     l2003:
  2198                           
  2199                           ;dc_motor.c: 37: else
  2200                           ;dc_motor.c: 38: {
  2201                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2202  000714  EE20 F006          	lfsr	2,6
  2203  000718  501D               	movf	setMotorPWM@m,w,c
  2204  00071A  26D9               	addwf	fsr2l,f,c
  2205  00071C  501E               	movf	setMotorPWM@m+1,w,c
  2206  00071E  22DA               	addwfc	fsr2h,f,c
  2207  000720  50DF               	movf	indf2,w,c
  2208  000722  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2209  000724  0E01               	movlw	1
  2210  000726  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2211  000728  2A1F               	incf	??_setMotorPWM,f,c
  2212  00072A  D002               	goto	u1234
  2213  00072C                     u1235:
  2214  00072C  90D8               	bcf	status,0,c
  2215  00072E  3620               	rlcf	??_setMotorPWM+1,f,c
  2216  000730                     u1234:
  2217  000730  2E1F               	decfsz	??_setMotorPWM,f,c
  2218  000732  D7FC               	goto	u1235
  2219  000734  5020               	movf	??_setMotorPWM+1,w,c
  2220  000736  0AFF               	xorlw	255
  2221  000738  148A               	andwf	3978,w,c	;volatile
  2222  00073A  6E8A               	movwf	3978,c	;volatile
  2223  00073C                     l99:
  2224                           
  2225                           ;dc_motor.c: 40: }
  2226                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2227  00073C  EE20 F002          	lfsr	2,2
  2228  000740  501D               	movf	setMotorPWM@m,w,c
  2229  000742  26D9               	addwf	fsr2l,f,c
  2230  000744  501E               	movf	setMotorPWM@m+1,w,c
  2231  000746  22DA               	addwfc	fsr2h,f,c
  2232  000748  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2233  00074C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2234  000750  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2235  000754  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2236  000758  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2237  00075A  46E8               	rlncf	wreg,f,c
  2238  00075C  0BFC               	andlw	252
  2239  00075E  6EDF               	movwf	indf2,c
  2240                           
  2241                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2242  000760  EE20 F004          	lfsr	2,4
  2243  000764  501D               	movf	setMotorPWM@m,w,c
  2244  000766  26D9               	addwf	fsr2l,f,c
  2245  000768  501E               	movf	setMotorPWM@m+1,w,c
  2246  00076A  22DA               	addwfc	fsr2h,f,c
  2247  00076C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2248  000770  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2249  000774  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2250  000778  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2251  00077C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2252  000780  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2253  000784  0E06               	movlw	6
  2254  000786  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2255  000788                     u1245:
  2256  000788  3422               	rlcf	??_setMotorPWM+3,w,c
  2257  00078A  3222               	rrcf	??_setMotorPWM+3,f,c
  2258  00078C  3221               	rrcf	??_setMotorPWM+2,f,c
  2259  00078E  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2260  000790  D7FB               	goto	u1245
  2261  000792  5021               	movf	??_setMotorPWM+2,w,c
  2262  000794  6EDF               	movwf	indf2,c
  2263  000796  0012               	return		;funcret
  2264  000798                     __end_of_setMotorPWM:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           intcon	equ	0xFF2
  2270                           postinc0	equ	0xFEE
  2271                           wreg	equ	0xFE8
  2272                           indf2	equ	0xFDF
  2273                           postinc2	equ	0xFDE
  2274                           postdec2	equ	0xFDD
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8
  2278                           
  2279 ;; *************** function ___wmul *****************
  2280 ;; Defined at:
  2281 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  multiplier      2   14[COMRAM] unsigned int 
  2284 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  product         2   18[COMRAM] unsigned int 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  2   14[COMRAM] unsigned int 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0, prodl, prodh
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2296 ;;      Params:         4       0       0       0
  2297 ;;      Locals:         2       0       0       0
  2298 ;;      Temps:          0       0       0       0
  2299 ;;      Totals:         6       0       0       0
  2300 ;;Total ram usage:        6 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_setMotorPWM
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text11
  2311  000B1A                     __ptext11:
  2312                           	opt stack 0
  2313  000B1A                     ___wmul:
  2314                           	opt stack 25
  2315                           
  2316                           ;incstack = 0
  2317  000B1A  500F               	movf	___wmul@multiplier,w,c
  2318  000B1C  0211               	mulwf	___wmul@multiplicand,c
  2319  000B1E  CFF3 F013          	movff	prodl,___wmul@product
  2320  000B22  CFF4 F014          	movff	prodh,___wmul@product+1
  2321  000B26  500F               	movf	___wmul@multiplier,w,c
  2322  000B28  0212               	mulwf	___wmul@multiplicand+1,c
  2323  000B2A  50F3               	movf	prodl,w,c
  2324  000B2C  2614               	addwf	___wmul@product+1,f,c
  2325  000B2E  5010               	movf	___wmul@multiplier+1,w,c
  2326  000B30  0211               	mulwf	___wmul@multiplicand,c
  2327  000B32  50F3               	movf	prodl,w,c
  2328  000B34  2614               	addwf	___wmul@product+1,f,c
  2329  000B36  C013  F00F         	movff	___wmul@product,?___wmul
  2330  000B3A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2331  000B3E  0012               	return	
  2332  000B40                     __end_of___wmul:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf2	equ	0xFDF
  2341                           postinc2	equ	0xFDE
  2342                           postdec2	equ	0xFDD
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function ___awdiv *****************
  2348 ;; Defined at:
  2349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  dividend        2   20[COMRAM] int 
  2352 ;;  divisor         2   22[COMRAM] int 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  quotient        2   26[COMRAM] int 
  2355 ;;  sign            1   25[COMRAM] unsigned char 
  2356 ;;  counter         1   24[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2   20[COMRAM] int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         4       0       0       0
  2367 ;;      Locals:         4       0       0       0
  2368 ;;      Temps:          0       0       0       0
  2369 ;;      Totals:         8       0       0       0
  2370 ;;Total ram usage:        8 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    1
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;;		_setMotorPWM
  2378 ;;		_ScanWithRange
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text12
  2383  000828                     __ptext12:
  2384                           	opt stack 0
  2385  000828                     ___awdiv:
  2386                           	opt stack 29
  2387                           
  2388                           ;incstack = 0
  2389  000828  0E00               	movlw	0
  2390  00082A  6E1A               	movwf	___awdiv@sign,c
  2391  00082C  AE18               	btfss	___awdiv@divisor+1,7,c
  2392  00082E  D006               	goto	l1961
  2393  000830  6C17               	negf	___awdiv@divisor,c
  2394  000832  1E18               	comf	___awdiv@divisor+1,f,c
  2395  000834  B0D8               	btfsc	status,0,c
  2396  000836  2A18               	incf	___awdiv@divisor+1,f,c
  2397  000838  0E01               	movlw	1
  2398  00083A  6E1A               	movwf	___awdiv@sign,c
  2399  00083C                     l1961:
  2400  00083C  AE16               	btfss	___awdiv@dividend+1,7,c
  2401  00083E  D006               	goto	l1967
  2402  000840  6C15               	negf	___awdiv@dividend,c
  2403  000842  1E16               	comf	___awdiv@dividend+1,f,c
  2404  000844  B0D8               	btfsc	status,0,c
  2405  000846  2A16               	incf	___awdiv@dividend+1,f,c
  2406  000848  0E01               	movlw	1
  2407  00084A  1A1A               	xorwf	___awdiv@sign,f,c
  2408  00084C                     l1967:
  2409  00084C  0E00               	movlw	0
  2410  00084E  6E1C               	movwf	___awdiv@quotient+1,c
  2411  000850  0E00               	movlw	0
  2412  000852  6E1B               	movwf	___awdiv@quotient,c
  2413  000854  5017               	movf	___awdiv@divisor,w,c
  2414  000856  1018               	iorwf	___awdiv@divisor+1,w,c
  2415  000858  B4D8               	btfsc	status,2,c
  2416  00085A  D01C               	goto	l1989
  2417  00085C  0E01               	movlw	1
  2418  00085E  6E19               	movwf	___awdiv@counter,c
  2419  000860  D004               	goto	l1975
  2420  000862                     l1973:
  2421  000862  90D8               	bcf	status,0,c
  2422  000864  3617               	rlcf	___awdiv@divisor,f,c
  2423  000866  3618               	rlcf	___awdiv@divisor+1,f,c
  2424  000868  2A19               	incf	___awdiv@counter,f,c
  2425  00086A                     l1975:
  2426  00086A  AE18               	btfss	___awdiv@divisor+1,7,c
  2427  00086C  D7FA               	goto	l1973
  2428  00086E                     l1977:
  2429  00086E  90D8               	bcf	status,0,c
  2430  000870  361B               	rlcf	___awdiv@quotient,f,c
  2431  000872  361C               	rlcf	___awdiv@quotient+1,f,c
  2432  000874  5017               	movf	___awdiv@divisor,w,c
  2433  000876  5C15               	subwf	___awdiv@dividend,w,c
  2434  000878  5018               	movf	___awdiv@divisor+1,w,c
  2435  00087A  5816               	subwfb	___awdiv@dividend+1,w,c
  2436  00087C  A0D8               	btfss	status,0,c
  2437  00087E  D005               	goto	l1985
  2438  000880  5017               	movf	___awdiv@divisor,w,c
  2439  000882  5E15               	subwf	___awdiv@dividend,f,c
  2440  000884  5018               	movf	___awdiv@divisor+1,w,c
  2441  000886  5A16               	subwfb	___awdiv@dividend+1,f,c
  2442  000888  801B               	bsf	___awdiv@quotient,0,c
  2443  00088A                     l1985:
  2444  00088A  90D8               	bcf	status,0,c
  2445  00088C  3218               	rrcf	___awdiv@divisor+1,f,c
  2446  00088E  3217               	rrcf	___awdiv@divisor,f,c
  2447  000890  2E19               	decfsz	___awdiv@counter,f,c
  2448  000892  D7ED               	goto	l1977
  2449  000894                     l1989:
  2450  000894  501A               	movf	___awdiv@sign,w,c
  2451  000896  B4D8               	btfsc	status,2,c
  2452  000898  D004               	goto	l1993
  2453  00089A  6C1B               	negf	___awdiv@quotient,c
  2454  00089C  1E1C               	comf	___awdiv@quotient+1,f,c
  2455  00089E  B0D8               	btfsc	status,0,c
  2456  0008A0  2A1C               	incf	___awdiv@quotient+1,f,c
  2457  0008A2                     l1993:
  2458  0008A2  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2459  0008A6  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2460  0008AA  0012               	return	
  2461  0008AC                     __end_of___awdiv:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _grabRightIR *****************
  2477 ;; Defined at:
  2478 ;;		line 74 in file "IR_Reading.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;		None
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2483 ;;  i               1   20[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  2   14[COMRAM] unsigned int 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2493 ;;      Params:         2       0       0       0
  2494 ;;      Locals:         3       0       0       0
  2495 ;;      Temps:          2       0       0       0
  2496 ;;      Totals:         7       0       0       0
  2497 ;;Total ram usage:        7 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_ScanWithRange
  2504 ;;		_ScanIR
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text13
  2509  00091C                     __ptext13:
  2510                           	opt stack 0
  2511  00091C                     _grabRightIR:
  2512                           	opt stack 28
  2513                           
  2514                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2515                           
  2516                           ;incstack = 0
  2517  00091C  0E00               	movlw	0
  2518  00091E  6E14               	movwf	grabRightIR@IR_signal+1,c
  2519  000920  0E00               	movlw	0
  2520  000922  6E13               	movwf	grabRightIR@IR_signal,c
  2521                           
  2522                           ;IR_Reading.c: 77: unsigned char i=0;
  2523  000924  0E00               	movlw	0
  2524  000926  6E15               	movwf	grabRightIR@i,c
  2525                           
  2526                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  2527  000928  0E00               	movlw	0
  2528  00092A  6E15               	movwf	grabRightIR@i,c
  2529  00092C                     l2067:
  2530  00092C  0E03               	movlw	3
  2531  00092E  6415               	cpfsgt	grabRightIR@i,c
  2532  000930  D001               	goto	l2071
  2533  000932  D017               	goto	l2077
  2534  000934                     l2071:
  2535                           
  2536                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2537  000934  5068               	movf	3944,w,c	;volatile
  2538  000936  CF69 F011          	movff	3945,??_grabRightIR	;volatile
  2539  00093A  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2540  00093C  C011  F012         	movff	??_grabRightIR,??_grabRightIR+1
  2541  000940  6A11               	clrf	??_grabRightIR,c
  2542  000942  1211               	iorwf	??_grabRightIR,f,c
  2543  000944  0E00               	movlw	0
  2544  000946  1212               	iorwf	??_grabRightIR+1,f,c
  2545  000948  5011               	movf	??_grabRightIR,w,c
  2546  00094A  2613               	addwf	grabRightIR@IR_signal,f,c
  2547  00094C  5012               	movf	??_grabRightIR+1,w,c
  2548  00094E  2214               	addwfc	grabRightIR@IR_signal+1,f,c
  2549                           
  2550                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  2551  000950  0E82               	movlw	130
  2552  000952  6E11               	movwf	??_grabRightIR& (0+255),c
  2553  000954  0EDE               	movlw	222
  2554  000956                     u1657:
  2555  000956  2EE8               	decfsz	wreg,f,c
  2556  000958  D7FE               	goto	u1657
  2557  00095A  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2558  00095C  D7FC               	goto	u1657
  2559  00095E  2A15               	incf	grabRightIR@i,f,c
  2560  000960  D7E5               	goto	l2067
  2561  000962                     l2077:
  2562                           
  2563                           ;IR_Reading.c: 83: }
  2564                           ;IR_Reading.c: 85: return IR_signal<<2;
  2565  000962  C013  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2566  000966  C014  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2567  00096A  90D8               	bcf	status,0,c
  2568  00096C  3611               	rlcf	??_grabRightIR,f,c
  2569  00096E  3612               	rlcf	??_grabRightIR+1,f,c
  2570  000970  90D8               	bcf	status,0,c
  2571  000972  3611               	rlcf	??_grabRightIR,f,c
  2572  000974  3612               	rlcf	??_grabRightIR+1,f,c
  2573  000976  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2574  00097A  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2575  00097E  0012               	return	
  2576  000980                     __end_of_grabRightIR:
  2577                           	opt stack 0
  2578                           tblptru	equ	0xFF8
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           indf2	equ	0xFDF
  2585                           postinc2	equ	0xFDE
  2586                           postdec2	equ	0xFDD
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _grabLeftIR *****************
  2592 ;; Defined at:
  2593 ;;		line 90 in file "IR_Reading.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2598 ;;  i               1   20[COMRAM] unsigned char 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  2   14[COMRAM] unsigned int 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2608 ;;      Params:         2       0       0       0
  2609 ;;      Locals:         3       0       0       0
  2610 ;;      Temps:          2       0       0       0
  2611 ;;      Totals:         7       0       0       0
  2612 ;;Total ram usage:        7 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_ScanWithRange
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text14
  2623  000980                     __ptext14:
  2624                           	opt stack 0
  2625  000980                     _grabLeftIR:
  2626                           	opt stack 28
  2627                           
  2628                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  2629                           
  2630                           ;incstack = 0
  2631  000980  0E00               	movlw	0
  2632  000982  6E14               	movwf	grabLeftIR@IR_signal+1,c
  2633  000984  0E00               	movlw	0
  2634  000986  6E13               	movwf	grabLeftIR@IR_signal,c
  2635                           
  2636                           ;IR_Reading.c: 93: unsigned char i=0;
  2637  000988  0E00               	movlw	0
  2638  00098A  6E15               	movwf	grabLeftIR@i,c
  2639                           
  2640                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  2641  00098C  0E00               	movlw	0
  2642  00098E  6E15               	movwf	grabLeftIR@i,c
  2643  000990                     l2091:
  2644  000990  0E03               	movlw	3
  2645  000992  6415               	cpfsgt	grabLeftIR@i,c
  2646  000994  D001               	goto	l2095
  2647  000996  D017               	goto	l2101
  2648  000998                     l2095:
  2649                           
  2650                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 8) | CAP2BUFL);
  2651  000998  5066               	movf	3942,w,c	;volatile
  2652  00099A  CF67 F011          	movff	3943,??_grabLeftIR	;volatile
  2653  00099E  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  2654  0009A0  C011  F012         	movff	??_grabLeftIR,??_grabLeftIR+1
  2655  0009A4  6A11               	clrf	??_grabLeftIR,c
  2656  0009A6  1211               	iorwf	??_grabLeftIR,f,c
  2657  0009A8  0E00               	movlw	0
  2658  0009AA  1212               	iorwf	??_grabLeftIR+1,f,c
  2659  0009AC  5011               	movf	??_grabLeftIR,w,c
  2660  0009AE  2613               	addwf	grabLeftIR@IR_signal,f,c
  2661  0009B0  5012               	movf	??_grabLeftIR+1,w,c
  2662  0009B2  2214               	addwfc	grabLeftIR@IR_signal+1,f,c
  2663                           
  2664                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  2665  0009B4  0E82               	movlw	130
  2666  0009B6  6E11               	movwf	??_grabLeftIR& (0+255),c
  2667  0009B8  0EDE               	movlw	222
  2668  0009BA                     u1667:
  2669  0009BA  2EE8               	decfsz	wreg,f,c
  2670  0009BC  D7FE               	goto	u1667
  2671  0009BE  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  2672  0009C0  D7FC               	goto	u1667
  2673  0009C2  2A15               	incf	grabLeftIR@i,f,c
  2674  0009C4  D7E5               	goto	l2091
  2675  0009C6                     l2101:
  2676                           
  2677                           ;IR_Reading.c: 99: }
  2678                           ;IR_Reading.c: 101: return IR_signal<<2;
  2679  0009C6  C013  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  2680  0009CA  C014  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  2681  0009CE  90D8               	bcf	status,0,c
  2682  0009D0  3611               	rlcf	??_grabLeftIR,f,c
  2683  0009D2  3612               	rlcf	??_grabLeftIR+1,f,c
  2684  0009D4  90D8               	bcf	status,0,c
  2685  0009D6  3611               	rlcf	??_grabLeftIR,f,c
  2686  0009D8  3612               	rlcf	??_grabLeftIR+1,f,c
  2687  0009DA  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  2688  0009DE  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  2689  0009E2  0012               	return	
  2690  0009E4                     __end_of_grabLeftIR:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _enableSensor *****************
  2706 ;; Defined at:
  2707 ;;		line 106 in file "IR_Reading.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  sensor          1    wreg     unsigned char 
  2710 ;;  status          1   14[COMRAM] unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  sensor          1   15[COMRAM] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2722 ;;      Params:         1       0       0       0
  2723 ;;      Locals:         1       0       0       0
  2724 ;;      Temps:          0       0       0       0
  2725 ;;      Totals:         2       0       0       0
  2726 ;;Total ram usage:        2 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_ScanWithRange
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text15
  2737  000B40                     __ptext15:
  2738                           	opt stack 0
  2739  000B40                     _enableSensor:
  2740                           	opt stack 28
  2741                           
  2742                           ;incstack = 0
  2743                           ;enableSensor@sensor stored from wreg
  2744  000B40  6E10               	movwf	enableSensor@sensor,c
  2745                           
  2746                           ;IR_Reading.c: 108: if (sensor==0){
  2747  000B42  5010               	movf	enableSensor@sensor,w,c
  2748  000B44  A4D8               	btfss	status,2,c
  2749  000B46  D006               	goto	l2085
  2750                           
  2751                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2752  000B48  B00F               	btfsc	enableSensor@status,0,c
  2753  000B4A  D002               	bra	u1375
  2754  000B4C  908D               	bcf	3981,0,c	;volatile
  2755  000B4E  D001               	bra	u1376
  2756  000B50                     u1375:
  2757  000B50  808D               	bsf	3981,0,c	;volatile
  2758  000B52                     u1376:
  2759                           
  2760                           ;IR_Reading.c: 110: } else if (sensor==1){
  2761  000B52  0012               	return	
  2762  000B54                     l2085:
  2763  000B54  0410               	decf	enableSensor@sensor,w,c
  2764  000B56  A4D8               	btfss	status,2,c
  2765  000B58  0012               	return	
  2766                           
  2767                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2768  000B5A  B00F               	btfsc	enableSensor@status,0,c
  2769  000B5C  D002               	bra	u1395
  2770  000B5E  928D               	bcf	3981,1,c	;volatile
  2771  000B60  D001               	bra	u1396
  2772  000B62                     u1395:
  2773  000B62  828D               	bsf	3981,1,c	;volatile
  2774  000B64                     u1396:
  2775  000B64  0012               	return	
  2776  000B66                     __end_of_enableSensor:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           postinc0	equ	0xFEE
  2783                           wreg	equ	0xFE8
  2784                           indf2	equ	0xFDF
  2785                           postinc2	equ	0xFDE
  2786                           postdec2	equ	0xFDD
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function _delay_tenth_s *****************
  2792 ;; Defined at:
  2793 ;;		line 19 in file "Movement.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  tenth_second    1    wreg     unsigned char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  tenth_second    1   15[COMRAM] unsigned char 
  2798 ;;  i               2   16[COMRAM] unsigned int 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;		None               void
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2808 ;;      Params:         0       0       0       0
  2809 ;;      Locals:         3       0       0       0
  2810 ;;      Temps:          1       0       0       0
  2811 ;;      Totals:         4       0       0       0
  2812 ;;Total ram usage:        4 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    1
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_ScanWithRange
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text16
  2823  000AB0                     __ptext16:
  2824                           	opt stack 0
  2825  000AB0                     _delay_tenth_s:
  2826                           	opt stack 28
  2827                           
  2828                           ;incstack = 0
  2829                           ;delay_tenth_s@tenth_seconds stored from wreg
  2830  000AB0  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  2831                           
  2832                           ;Movement.c: 20: unsigned int i=0;
  2833  000AB2  0E00               	movlw	0
  2834  000AB4  6E12               	movwf	delay_tenth_s@i+1,c
  2835  000AB6  0E00               	movlw	0
  2836  000AB8  6E11               	movwf	delay_tenth_s@i,c
  2837                           
  2838                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  2839  000ABA  0E00               	movlw	0
  2840  000ABC  6E12               	movwf	delay_tenth_s@i+1,c
  2841  000ABE  0E01               	movlw	1
  2842  000AC0  6E11               	movwf	delay_tenth_s@i,c
  2843  000AC2  D009               	goto	l2063
  2844  000AC4                     l2059:
  2845                           
  2846                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  2847  000AC4  0E82               	movlw	130
  2848  000AC6  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  2849  000AC8  0EDE               	movlw	222
  2850  000ACA                     u1677:
  2851  000ACA  2EE8               	decfsz	wreg,f,c
  2852  000ACC  D7FE               	goto	u1677
  2853  000ACE  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  2854  000AD0  D7FC               	goto	u1677
  2855  000AD2  4A11               	infsnz	delay_tenth_s@i,f,c
  2856  000AD4  2A12               	incf	delay_tenth_s@i+1,f,c
  2857  000AD6                     l2063:
  2858  000AD6  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  2859  000AD8  0D02               	mullw	2
  2860  000ADA  5011               	movf	delay_tenth_s@i,w,c
  2861  000ADC  5CF3               	subwf	prodl,w,c
  2862  000ADE  5012               	movf	delay_tenth_s@i+1,w,c
  2863  000AE0  58F4               	subwfb	prodh,w,c
  2864  000AE2  A0D8               	btfss	status,0,c
  2865  000AE4  0012               	return	
  2866  000AE6  D7EE               	goto	l2059
  2867  000AE8                     __end_of_delay_tenth_s:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           indf2	equ	0xFDF
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _InterruptHandlerHigh *****************
  2883 ;; Defined at:
  2884 ;;		line 16 in file "main.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;		None               void
  2891 ;; Registers used:
  2892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2898 ;;      Params:         0       0       0       0
  2899 ;;      Locals:         0       0       0       0
  2900 ;;      Temps:         14       0       0       0
  2901 ;;      Totals:        14       0       0       0
  2902 ;;Total ram usage:       14 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		Interrupt level 2
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	intcode
  2912  000008                     __pintcode:
  2913                           	opt stack 0
  2914  000008                     _InterruptHandlerHigh:
  2915                           	opt stack 25
  2916                           
  2917                           ;incstack = 0
  2918  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2919  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2920  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2921  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2922  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2923  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2924  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2925  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2926  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2927  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2928  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2929  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2930  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2931  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2932  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2933                           
  2934                           ;main.c: 18: if (PIR1bits.RCIF) {
  2935  000042  AA9E               	btfss	3998,5,c	;volatile
  2936  000044  D013               	goto	i2l44
  2937                           
  2938                           ;main.c: 19: ReceivedString[i]=RCREG;
  2939  000046  5046               	movf	_i,w,c	;volatile
  2940  000048  0D01               	mullw	1
  2941  00004A  0E36               	movlw	low _ReceivedString
  2942  00004C  24F3               	addwf	prodl,w,c
  2943  00004E  6ED9               	movwf	fsr2l,c
  2944  000050  0E00               	movlw	high _ReceivedString
  2945  000052  20F4               	addwfc	prodh,w,c
  2946  000054  6EDA               	movwf	fsr2h,c
  2947  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2948                           
  2949                           ;main.c: 20: if (i==15){
  2950  00005A  0E0F               	movlw	15
  2951  00005C  1846               	xorwf	_i,w,c	;volatile
  2952  00005E  A4D8               	btfss	status,2,c
  2953  000060  D003               	goto	i2l1315
  2954                           
  2955                           ;main.c: 21: i=0;
  2956  000062  0E00               	movlw	0
  2957  000064  6E46               	movwf	_i,c	;volatile
  2958                           
  2959                           ;main.c: 22: }else{
  2960  000066  D001               	goto	i2l1317
  2961  000068                     i2l1315:
  2962                           
  2963                           ;main.c: 23: i++;
  2964  000068  2A46               	incf	_i,f,c	;volatile
  2965  00006A                     i2l1317:
  2966                           
  2967                           ;main.c: 24: }
  2968                           ;main.c: 25: PIR1bits.RCIF=0;
  2969  00006A  9A9E               	bcf	3998,5,c	;volatile
  2970  00006C                     i2l44:
  2971  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2972  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2973  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2974  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2975  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2976  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2977  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2978  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2979  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2980  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2981  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2982  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2983  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2984  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2985  0000A4  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2986  0000A6  0011               	retfie		f
  2987  0000A8                     __end_of_InterruptHandlerHigh:
  2988                           	opt stack 0
  2989  0000                     pclatu	equ	0xFFB
  2990                           pclath	equ	0xFFA
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           fsr0h	equ	0xFEA
  3000                           fsr0l	equ	0xFE9
  3001                           wreg	equ	0xFE8
  3002                           fsr1h	equ	0xFE2
  3003                           fsr1l	equ	0xFE1
  3004                           indf2	equ	0xFDF
  3005                           postinc2	equ	0xFDE
  3006                           postdec2	equ	0xFDD
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           pclatu	equ	0xFFB
  3011                           pclath	equ	0xFFA
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           postinc0	equ	0xFEE
  3020                           fsr0h	equ	0xFEA
  3021                           fsr0l	equ	0xFE9
  3022                           wreg	equ	0xFE8
  3023                           fsr1h	equ	0xFE2
  3024                           fsr1l	equ	0xFE1
  3025                           indf2	equ	0xFDF
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032                           	psect	rparam
  3033  0000                     pclatu	equ	0xFFB
  3034                           pclath	equ	0xFFA
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           postinc0	equ	0xFEE
  3043                           fsr0h	equ	0xFEA
  3044                           fsr0l	equ	0xFE9
  3045                           wreg	equ	0xFE8
  3046                           fsr1h	equ	0xFE2
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           postinc2	equ	0xFDE
  3050                           postdec2	equ	0xFDD
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055                           	psect	temp
  3056  000047                     btemp:
  3057                           	opt stack 0
  3058  000047                     	ds	1
  3059  0000                     int$flags	set	btemp
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           fsr0h	equ	0xFEA
  3071                           fsr0l	equ	0xFE9
  3072                           wreg	equ	0xFE8
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      70
    BANK0           160     39      39
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               138   138      0   29474
                                             14 BANK0     25    25      0
                      _ScanWithRange
                            ___awdiv
                            _delay_s
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       21    16      5   27495
                                             46 COMRAM     7     2      5
                                              0 BANK0     14    14      0
                            ___awdiv
                      _delay_tenth_s
                       _enableSensor
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8492
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    9262
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 4     0      4    4954
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     1      4    2890
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          9     7      2    2180
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1023
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          7     5      2     108
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           7     5      2     108
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _enableSensor                                         2     1      1     432
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _enableSensor
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   ___awdiv
     ___wmul (ARG)
   _delay_s
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     27      27       4       24.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      46       1       74.5%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D       5        0.0%
DATA                 0      0      6D      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Mar 15 20:57:03 2018

                        ?_grabRightIR 000F                                     _i 0046  
                                  l47 05B4                                    l99 073C  
                        ___awdiv@sign 001A                   ___wmul@multiplicand 0011  
                                 l129 08FE                           grabLeftIR@i 0015  
                                 prod 000FF3                                   wreg 000FE8  
                                l2003 0714                                  l2011 07B2  
                                l2101 09C6                                  l2021 07EA  
                                l2015 07CA                                  l2007 079A  
                                l2033 08C6                                  l2201 03B4  
                                l2037 08DE                                  l2029 08AE  
                                l2301 064A                                  l2063 0AD6  
                                l2071 0934                                  l2151 0228  
                                l2233 04AA                                  l2217 0438  
                                l2161 0288                                  l2145 01F6  
                                l2059 0AC4                                  l2091 0990  
                                l2067 092C                                  l2227 04A6  
                                l2085 0B54                                  l2077 0962  
                                l2173 02B8                                  l2157 022C  
                                l2095 0998                                  l2247 0514  
                                l2185 032A                                  l2177 0314  
                                l2195 03B0                                  l2283 05EC  
                                l2275 05BA                                  l2293 0638  
                                l2279 05C8                                  l2297 0644  
                                l2289 062A                                  l1843 0A8C  
                                l1847 0A9E                                  l1961 083C  
                                l1973 0862                                  l1975 086A  
                                l1967 084C                                  l1993 08A2  
                                l1985 088A                                  l1977 086E  
                                l1989 0894                                  u1224 06D8  
                                u1225 06D4                                  u1234 0730  
                                u1235 072C                                  u1245 0788  
                                _LATB 000F8A                                  u1375 0B50  
                                u1376 0B52                                  u1395 0B62  
                                u1627 0A92                                  u1396 0B64  
                                u1637 07E4                                  u1647 08F8  
                                u1657 0956                                  u1667 09BA  
                                u1677 0ACA                                  i2l44 006C  
                                _main 0518                         main@ScanAngle 0073  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0047  
                                _stop 0798                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 08AC                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0015                         _initRFID$1270 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 0AB0  
                               main@i 0070                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 046C  
                     __initialization 0BA8                          __end_of_main 0664  
                        __end_of_stop 0828                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 0B66  
                              ??_main 0036                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                        ?_setMotorPWM 001D                      ___awdiv@dividend 0015  
                              i2l1315 0068                                i2l1317 006A  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 0AE8  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                              ___wmul 0B1A                             ??___awdiv 0019  
                    __end_of_initRFID 0BA8                                _initIR 0B66  
                __size_of_grabRightIR 0064                                clear_0 0BAE  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                      ??_initMotorPWM 000F                         _ScanWithRange 00AC  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0A78  
                          __accesstop 0060               __end_of__initialization 0BB4  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                      ?_ScanWithRange 002F         __size_of_InterruptHandlerHigh 00A0  
          delay_tenth_s@tenth_seconds 0010                 __size_of_enableSensor 0026  
                             ?___wmul 000F                   grabLeftIR@IR_signal 0013  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0070  
                          _grabLeftIR 0980                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 0134                          _enableSensor 0B40  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 0B1A  
                             __Hparam 0000                               __Lparam 0000  
                             ___awdiv 0828                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 0BA8  
                     ??_ScanWithRange 0034                               _delay_s 0A78  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 0518                               __ptext1 0B88  
                             __ptext2 0AE8                               __ptext3 0B66  
                             __ptext4 0A78                               __ptext5 00AC  
                             __ptext6 09E4                               __ptext7 0A2E  
                             __ptext8 0798                               __ptext9 08AC  
                end_of_initialization 0BB4                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0A2E  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
                           _TXSTAbits 000FAC                            main@motorL 0075  
                          main@motorR 007E                         ??_grabRightIR 0011  
                      _fullSpeedAhead 08AC                        _ReceivedString 0036  
                      __end_of___wmul 0B40                           _BAUDCONbits 000FAA  
                      __end_of_initIR 0B88                __size_of_delay_tenth_s 0038  
                 start_initialization 0BA8                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00A8                __end_of_fullSpeedAhead 091C  
                 __size_of_grabLeftIR 0064                              ??___wmul 0013  
                            ??_initIR 000F                   __end_of_grabRightIR 0980  
                        _initMotorPWM 0AE8                           __pbssCOMRAM 0036  
                       __pcstackBANK0 0060                         _delay_tenth_s 0AB0  
                   __size_of_initRFID 0020                             _main$2133 0071  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                            ?___awdiv 0015                              ?_delay_s 0001  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                   __size_of_turnLeft 004A            ScanWithRange@SensorResultC 006A  
          ScanWithRange@SensorResultL 0060            ScanWithRange@SensorResultR 0064  
                       ??_setMotorPWM 001F                        ?_delay_tenth_s 0001  
                      ___wmul@product 0013                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 002B  
                         turnRight@mR 002D                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                           _grabRightIR 091C  
                grabRightIR@IR_signal 0013                     ___wmul@multiplier 000F  
               __end_of_ScanWithRange 0518                          setMotorPWM@m 001D  
                _InterruptHandlerHigh 0008                          ??_grabLeftIR 0011  
                           _turnRight 09E4                   __end_of_setMotorPWM 0798  
                            __Hrparam 0000                              __Lrparam 0000  
                  __end_of_grabLeftIR 09E4                      __size_of___awdiv 0084  
                          _ANSEL0bits 000FB8                      __size_of_delay_s 0038  
               ?_InterruptHandlerHigh 0001                            ?_turnRight 002B  
                            __ptext10 0664                              __ptext11 0B1A  
                            __ptext12 0828                              __ptext13 091C  
                            __ptext14 0980                              __ptext15 0B40  
                            __ptext16 0AB0                       ??_delay_tenth_s 000F  
                            _initRFID 0B88                         __size_of_main 014C  
                  main@DirectionFound 0074                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
                            delay_s@i 0011                              int$flags 0047  
                            main@mode 0072                              main@test 006E  
                            _turnLeft 0A2E                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                            _INTCONbits 000FF2  
          ScanWithRange@tenth_seconds 0033                           _setMotorPWM 0664  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0068                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
