

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 16:45:25 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     _CAP1BUFH	set	3945
    33  0000                     _CAP1BUFL	set	3944
    34  0000                     _CAP1CON	set	3939
    35  0000                     _CAP2BUFH	set	3943
    36  0000                     _CAP2BUFL	set	3942
    37  0000                     _CAP2CON	set	3938
    38  0000                     _LATAbits	set	3977
    39  0000                     _LATB	set	3978
    40  0000                     _LATCbits	set	3979
    41  0000                     _LATDbits	set	3980
    42  0000                     _LATEbits	set	3981
    43  0000                     _PTCON0	set	3967
    44  0000                     _PTCON1	set	3966
    45  0000                     _PTPERH	set	3962
    46  0000                     _PTPERL	set	3963
    47  0000                     _PWMCON0	set	3951
    48  0000                     _PWMCON1	set	3950
    49  0000                     _TRISAbits	set	3986
    50  0000                     _TRISBbits	set	3987
    51  0000                     _TRISC	set	3988
    52  0000                     _TRISCbits	set	3988
    53  0000                     _TRISDbits	set	3989
    54  0000                     _TRISEbits	set	3990
    55  0000                     _PDC0H	set	3960
    56  0000                     _PDC0L	set	3961
    57  0000                     _PDC1H	set	3958
    58  0000                     _PDC1L	set	3959
    59  0000                     _ANSEL0bits	set	4024
    60  0000                     _BAUDCONbits	set	4010
    61  0000                     _IPR1bits	set	3999
    62  0000                     _OSCCON	set	4051
    63  0000                     _OSCCONbits	set	4051
    64  0000                     _PIE1bits	set	3997
    65  0000                     _PIR1bits	set	3998
    66  0000                     _RCONbits	set	4048
    67  0000                     _RCREG	set	4014
    68  0000                     _RCSTAbits	set	4011
    69  0000                     _SPBRG	set	4015
    70  0000                     _SPBRGH	set	4016
    71  0000                     _T5CON	set	4023
    72  0000                     _TXREG	set	4013
    73  0000                     _TXSTAbits	set	4012
    74  0000                     _INTCONbits	set	4082
    75                           
    76                           ; #config settings
    77  0000                     
    78                           	psect	cinit
    79  000D28                     __pcinit:
    80                           	opt stack 0
    81  000D28                     start_initialization:
    82                           	opt stack 0
    83  000D28                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to COMRAM (17 bytes)
    87  000D28  EE00  F03B         	lfsr	0,__pbssCOMRAM
    88  000D2C  0E11               	movlw	17
    89  000D2E                     clear_0:
    90  000D2E  6AEE               	clrf	postinc0,c
    91  000D30  06E8               	decf	wreg,f,c
    92  000D32  E1FD               	bnz	clear_0
    93  000D34                     end_of_initialization:
    94                           	opt stack 0
    95  000D34                     __end_of__initialization:
    96                           	opt stack 0
    97  000D34  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    98  000D36  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    99  000D38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   100  000D3A  6EF8               	movwf	tblptru,c
   101  000D3C  0100               	movlb	0
   102  000D3E  EF4C  F002         	goto	_main	;jump to C main() function
   103                           tblptru	equ	0xFF8
   104                           postinc0	equ	0xFEE
   105                           wreg	equ	0xFE8
   106                           
   107                           	psect	bssCOMRAM
   108  00003B                     __pbssCOMRAM:
   109                           	opt stack 0
   110  00003B                     _ReceivedString:
   111                           	opt stack 0
   112  00003B                     	ds	16
   113  00004B                     _i:
   114                           	opt stack 0
   115  00004B                     	ds	1
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	cstackBANK0
   121  000060                     __pcstackBANK0:
   122                           	opt stack 0
   123  000060                     ScanWithRange@SensorResultL:
   124                           	opt stack 0
   125                           
   126                           ; 4 bytes @ 0x0
   127  000060                     	ds	4
   128  000064                     ScanWithRange@SensorResultC:
   129                           	opt stack 0
   130                           
   131                           ; 4 bytes @ 0x4
   132  000064                     	ds	4
   133  000068                     ScanWithRange@SensorResultR:
   134                           	opt stack 0
   135                           
   136                           ; 4 bytes @ 0x8
   137  000068                     	ds	4
   138  00006C                     ScanWithRange@DirectionFoundTolerance:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0xC
   142  00006C                     	ds	2
   143  00006E                     main@test:
   144                           	opt stack 0
   145                           
   146                           ; 2 bytes @ 0xE
   147  00006E                     	ds	2
   148  000070                     main@i:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0x10
   152  000070                     	ds	1
   153  000071                     main@ScanAngle:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x11
   157  000071                     	ds	1
   158  000072                     main@mode:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0x12
   162  000072                     	ds	1
   163  000073                     main@DirectionFound:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0x13
   167  000073                     	ds	1
   168  000074                     main@mL:
   169                           	opt stack 0
   170                           
   171                           ; 9 bytes @ 0x14
   172  000074                     	ds	9
   173  00007D                     main@mR:
   174                           	opt stack 0
   175                           
   176                           ; 9 bytes @ 0x1D
   177  00007D                     	ds	9
   178                           tblptru	equ	0xFF8
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	opt stack 0
   185  000001                     ??_InterruptHandlerHigh:
   186  000001                     
   187                           ; 0 bytes @ 0x0
   188  000001                     	ds	14
   189  00000F                     ??_delay_s:
   190  00000F                     ??_delay_tenth_s:
   191  00000F                     ?_grabLeftIR:
   192                           	opt stack 0
   193  00000F                     ?_grabRightIR:
   194                           	opt stack 0
   195  00000F                     ?___wmul:
   196                           	opt stack 0
   197  00000F                     _initRFID$1294:
   198                           	opt stack 0
   199  00000F                     enableSensor@status:
   200                           	opt stack 0
   201  00000F                     ___wmul@multiplier:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0xE
   205  00000F                     	ds	1
   206  000010                     delay_s@seconds:
   207                           	opt stack 0
   208  000010                     delay_tenth_s@tenth_seconds:
   209                           	opt stack 0
   210  000010                     enableSensor@sensor:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0xF
   214  000010                     	ds	1
   215  000011                     ??_grabLeftIR:
   216  000011                     ??_grabRightIR:
   217  000011                     delay_s@i:
   218                           	opt stack 0
   219  000011                     delay_tenth_s@i:
   220                           	opt stack 0
   221  000011                     ___wmul@multiplicand:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x10
   225  000011                     	ds	2
   226  000013                     ___wmul@product:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x12
   230  000013                     	ds	1
   231  000014                     grabRightIR@IR_signal:
   232                           	opt stack 0
   233  000014                     grabLeftIR@IR_signal:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x13
   237  000014                     	ds	1
   238  000015                     ?___awdiv:
   239                           	opt stack 0
   240  000015                     ___awdiv@dividend:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x14
   244  000015                     	ds	1
   245  000016                     grabRightIR@i:
   246                           	opt stack 0
   247  000016                     grabLeftIR@i:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x15
   251  000016                     	ds	1
   252  000017                     ___awdiv@divisor:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x16
   256  000017                     	ds	2
   257  000019                     ___awdiv@counter:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x18
   261  000019                     	ds	1
   262  00001A                     ___awdiv@sign:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x19
   266  00001A                     	ds	1
   267  00001B                     ___awdiv@quotient:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x1A
   271  00001B                     	ds	2
   272  00001D                     setMotorPWM@m:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x1C
   276  00001D                     	ds	2
   277  00001F                     ??_setMotorPWM:
   278                           
   279                           ; 0 bytes @ 0x1E
   280  00001F                     	ds	5
   281  000024                     setMotorPWM@PWMduty:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x23
   285  000024                     	ds	2
   286  000026                     stop@mL:
   287                           	opt stack 0
   288  000026                     fullSpeedAhead@mL:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x25
   292  000026                     	ds	2
   293  000028                     stop@mR:
   294                           	opt stack 0
   295  000028                     fullSpeedAhead@mR:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x27
   299  000028                     	ds	2
   300  00002A                     
   301                           ; 0 bytes @ 0x29
   302  00002A                     	ds	1
   303  00002B                     turnLeft@mL:
   304                           	opt stack 0
   305  00002B                     turnRight@mL:
   306                           	opt stack 0
   307  00002B                     fullSpeedBack@mL:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x2A
   311  00002B                     	ds	2
   312  00002D                     turnLeft@mR:
   313                           	opt stack 0
   314  00002D                     turnRight@mR:
   315                           	opt stack 0
   316  00002D                     fullSpeedBack@mR:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x2C
   320  00002D                     	ds	2
   321  00002F                     ScanIR@mL:
   322                           	opt stack 0
   323  00002F                     ScanWithRange@mL:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x2E
   327  00002F                     	ds	2
   328  000031                     ScanIR@mR:
   329                           	opt stack 0
   330  000031                     ScanWithRange@mR:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x30
   334  000031                     	ds	2
   335  000033                     ??_ScanIR:
   336  000033                     ScanWithRange@tenth_seconds:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x32
   340  000033                     	ds	1
   341  000034                     ??_ScanWithRange:
   342                           
   343                           ; 0 bytes @ 0x33
   344  000034                     	ds	1
   345  000035                     ScanIR@DirectionFoundTolerance:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x34
   349  000035                     	ds	2
   350  000037                     ScanIR@SensorResult:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x36
   354  000037                     	ds	4
   355  00003B                     tblptru	equ	0xFF8
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           
   359                           ; 0 bytes @ 0x3A
   360 ;;
   361 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   362 ;;
   363 ;; *************** function _main *****************
   364 ;; Defined at:
   365 ;;		line 29 in file "main.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  PathTaken     100    0        unsigned char [100]
   370 ;;  Message        10    0        unsigned char [10]
   371 ;;  mR              9   29[BANK0 ] struct DC_motor
   372 ;;  mL              9   20[BANK0 ] struct DC_motor
   373 ;;  SignalStreng    3    0        unsigned char [3]
   374 ;;  test            2   14[BANK0 ] unsigned int 
   375 ;;  DirectionFou    1   19[BANK0 ] unsigned char 
   376 ;;  mode            1   18[BANK0 ] unsigned char 
   377 ;;  ScanAngle       1   17[BANK0 ] unsigned char 
   378 ;;  i               1   16[BANK0 ] unsigned char 
   379 ;; Return value:  Size  Location     Type
   380 ;;		None               void
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   388 ;;      Params:         0       0       0       0
   389 ;;      Locals:         0      24       0       0
   390 ;;      Temps:          0       0       0       0
   391 ;;      Totals:         0      24       0       0
   392 ;;Total ram usage:       24 bytes
   393 ;; Hardware stack levels required when called:    6
   394 ;; This function calls:
   395 ;;		_ScanIR
   396 ;;		_ScanWithRange
   397 ;;		_delay_s
   398 ;;		_enableSensor
   399 ;;		_fullSpeedAhead
   400 ;;		_fullSpeedBack
   401 ;;		_initIR
   402 ;;		_initMotorPWM
   403 ;;		_initRFID
   404 ;;		_stop
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           	psect	text0
   411  000498                     __ptext0:
   412                           	opt stack 0
   413  000498                     _main:
   414                           	opt stack 25
   415                           
   416                           ;main.c: 32: unsigned char Message[10];
   417                           ;main.c: 33: unsigned char i=0;
   418                           
   419                           ;incstack = 0
   420  000498  0E00               	movlw	0
   421  00049A  0100               	movlb	0	; () banked
   422  00049C  6F70               	movwf	main@i& (0+255),b
   423                           
   424                           ;main.c: 34: unsigned char mode=0;
   425  00049E  0E00               	movlw	0
   426  0004A0  0100               	movlb	0	; () banked
   427  0004A2  6F72               	movwf	main@mode& (0+255),b
   428                           
   429                           ;main.c: 35: char DirectionFound=0;
   430  0004A4  0E00               	movlw	0
   431  0004A6  0100               	movlb	0	; () banked
   432  0004A8  6F73               	movwf	main@DirectionFound& (0+255),b
   433                           
   434                           ;main.c: 36: unsigned char SignalStrength[3];
   435                           ;main.c: 37: char PathTaken[100];
   436                           ;main.c: 38: unsigned int test=0;
   437  0004AA  0E00               	movlw	0
   438  0004AC  0100               	movlb	0	; () banked
   439  0004AE  6F6F               	movwf	(main@test+1)& (0+255),b
   440  0004B0  0E00               	movlw	0
   441  0004B2  6F6E               	movwf	main@test& (0+255),b
   442                           
   443                           ;main.c: 40: unsigned char ScanAngle=6;
   444  0004B4  0E06               	movlw	6
   445  0004B6  0100               	movlb	0	; () banked
   446  0004B8  6F71               	movwf	main@ScanAngle& (0+255),b
   447                           
   448                           ; BSR set to: 0
   449                           ;main.c: 43: INTCONbits.GIEH = 1;
   450  0004BA  8EF2               	bsf	intcon,7,c	;volatile
   451                           
   452                           ; BSR set to: 0
   453                           ;main.c: 44: RCONbits.IPEN = 1;
   454  0004BC  8ED0               	bsf	4048,7,c	;volatile
   455                           
   456                           ; BSR set to: 0
   457                           ;main.c: 45: INTCONbits.GIEL = 1;
   458  0004BE  8CF2               	bsf	intcon,6,c	;volatile
   459                           
   460                           ; BSR set to: 0
   461                           ;main.c: 46: INTCONbits.INT0IE = 1;
   462  0004C0  88F2               	bsf	intcon,4,c	;volatile
   463                           
   464                           ; BSR set to: 0
   465                           ;main.c: 47: INTCONbits.PEIE = 1;
   466  0004C2  8CF2               	bsf	intcon,6,c	;volatile
   467                           
   468                           ; BSR set to: 0
   469                           ;main.c: 49: IPR1bits.RCIP=1;
   470  0004C4  8A9F               	bsf	3999,5,c	;volatile
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 50: PIE1bits.RCIE=1;
   474  0004C6  8A9D               	bsf	3997,5,c	;volatile
   475                           
   476                           ;main.c: 53: struct DC_motor mL, mR;
   477                           ;main.c: 54: mL.power=0;
   478  0004C8  0E00               	movlw	0
   479  0004CA  0100               	movlb	0	; () banked
   480  0004CC  6F74               	movwf	main@mL& (0+255),b
   481                           
   482                           ;main.c: 55: mL.direction=1;
   483  0004CE  0E01               	movlw	1
   484  0004D0  0100               	movlb	0	; () banked
   485  0004D2  6F75               	movwf	(main@mL+1)& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 56: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   489  0004D4  0E79               	movlw	121
   490  0004D6  0100               	movlb	0	; () banked
   491  0004D8  6F76               	movwf	(main@mL+2)& (0+255),b
   492  0004DA  0E0F               	movlw	15
   493  0004DC  0100               	movlb	0	; () banked
   494  0004DE  6F77               	movwf	(main@mL+3)& (0+255),b
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 57: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   498  0004E0  0E78               	movlw	120
   499  0004E2  0100               	movlb	0	; () banked
   500  0004E4  6F78               	movwf	(main@mL+4)& (0+255),b
   501  0004E6  0E0F               	movlw	15
   502  0004E8  0100               	movlb	0	; () banked
   503  0004EA  6F79               	movwf	(main@mL+5)& (0+255),b
   504                           
   505                           ;main.c: 58: mL.dir_pin=0;
   506  0004EC  0E00               	movlw	0
   507  0004EE  0100               	movlb	0	; () banked
   508  0004F0  6F7A               	movwf	(main@mL+6)& (0+255),b
   509                           
   510                           ;main.c: 59: mL.PWMperiod=199;
   511  0004F2  0E00               	movlw	0
   512  0004F4  0100               	movlb	0	; () banked
   513  0004F6  6F7C               	movwf	(main@mL+8)& (0+255),b
   514  0004F8  0EC7               	movlw	199
   515  0004FA  6F7B               	movwf	(main@mL+7)& (0+255),b
   516                           
   517                           ;main.c: 61: mR.power=0;
   518  0004FC  0E00               	movlw	0
   519  0004FE  0100               	movlb	0	; () banked
   520  000500  6F7D               	movwf	main@mR& (0+255),b
   521                           
   522                           ;main.c: 62: mR.direction=1;
   523  000502  0E01               	movlw	1
   524  000504  0100               	movlb	0	; () banked
   525  000506  6F7E               	movwf	(main@mR+1)& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 63: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   529  000508  0E77               	movlw	119
   530  00050A  0100               	movlb	0	; () banked
   531  00050C  6F7F               	movwf	(main@mR+2)& (0+255),b
   532  00050E  0E0F               	movlw	15
   533  000510  0100               	movlb	0	; () banked
   534  000512  6F80               	movwf	(main@mR+3)& (0+255),b
   535                           
   536                           ; BSR set to: 0
   537                           ;main.c: 64: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   538  000514  0E76               	movlw	118
   539  000516  0100               	movlb	0	; () banked
   540  000518  6F81               	movwf	(main@mR+4)& (0+255),b
   541  00051A  0E0F               	movlw	15
   542  00051C  0100               	movlb	0	; () banked
   543  00051E  6F82               	movwf	(main@mR+5)& (0+255),b
   544                           
   545                           ;main.c: 65: mR.dir_pin=2;
   546  000520  0E02               	movlw	2
   547  000522  0100               	movlb	0	; () banked
   548  000524  6F83               	movwf	(main@mR+6)& (0+255),b
   549                           
   550                           ;main.c: 66: mR.PWMperiod=199;
   551  000526  0E00               	movlw	0
   552  000528  0100               	movlb	0	; () banked
   553  00052A  6F85               	movwf	(main@mR+8)& (0+255),b
   554  00052C  0EC7               	movlw	199
   555  00052E  6F84               	movwf	(main@mR+7)& (0+255),b
   556                           
   557                           ;main.c: 68: OSCCON = 0x72;
   558  000530  0E72               	movlw	114
   559  000532  6ED3               	movwf	4051,c	;volatile
   560  000534                     l57:
   561  000534  B4D3               	btfsc	4051,2,c	;volatile
   562  000536  D070               	goto	l2458
   563  000538  D7FD               	goto	l57
   564  00053A                     l2422:
   565                           
   566                           ;main.c: 76: initMotorPWM();
   567  00053A  EC34  F006         	call	_initMotorPWM	;wreg free
   568                           
   569                           ;main.c: 77: initRFID();
   570  00053E  EC84  F006         	call	_initRFID	;wreg free
   571                           
   572                           ;main.c: 78: initIR();
   573  000542  EC73  F006         	call	_initIR	;wreg free
   574                           
   575                           ;main.c: 82: fullSpeedAhead(&mL, &mR);
   576  000546  0E74               	movlw	low main@mL
   577  000548  6E26               	movwf	fullSpeedAhead@mL,c
   578  00054A  0E00               	movlw	high main@mL
   579  00054C  6E27               	movwf	fullSpeedAhead@mL+1,c
   580  00054E  0E7D               	movlw	low main@mR
   581  000550  6E28               	movwf	fullSpeedAhead@mR,c
   582  000552  0E00               	movlw	high main@mR
   583  000554  6E29               	movwf	fullSpeedAhead@mR+1,c
   584  000556  EC5F  F005         	call	_fullSpeedAhead	;wreg free
   585                           
   586                           ;main.c: 83: delay_s(1);
   587  00055A  0E01               	movlw	1
   588  00055C  ECE1  F005         	call	_delay_s
   589                           
   590                           ;main.c: 84: stop(&mL, &mR);
   591  000560  0E74               	movlw	low main@mL
   592  000562  6E26               	movwf	stop@mL,c
   593  000564  0E00               	movlw	high main@mL
   594  000566  6E27               	movwf	stop@mL+1,c
   595  000568  0E7D               	movlw	low main@mR
   596  00056A  6E28               	movwf	stop@mR,c
   597  00056C  0E00               	movlw	high main@mR
   598  00056E  6E29               	movwf	stop@mR+1,c
   599  000570  EC5F  F004         	call	_stop	;wreg free
   600                           
   601                           ;main.c: 85: fullSpeedBack(&mL, &mR);
   602  000574  0E74               	movlw	low main@mL
   603  000576  6E2B               	movwf	fullSpeedBack@mL,c
   604  000578  0E00               	movlw	high main@mL
   605  00057A  6E2C               	movwf	fullSpeedBack@mL+1,c
   606  00057C  0E7D               	movlw	low main@mR
   607  00057E  6E2D               	movwf	fullSpeedBack@mR,c
   608  000580  0E00               	movlw	high main@mR
   609  000582  6E2E               	movwf	fullSpeedBack@mR+1,c
   610  000584  EC19  F006         	call	_fullSpeedBack	;wreg free
   611                           
   612                           ;main.c: 86: delay_s(1);
   613  000588  0E01               	movlw	1
   614  00058A  ECE1  F005         	call	_delay_s
   615                           
   616                           ;main.c: 87: stop(&mL, &mR);
   617  00058E  0E74               	movlw	low main@mL
   618  000590  6E26               	movwf	stop@mL,c
   619  000592  0E00               	movlw	high main@mL
   620  000594  6E27               	movwf	stop@mL+1,c
   621  000596  0E7D               	movlw	low main@mR
   622  000598  6E28               	movwf	stop@mR,c
   623  00059A  0E00               	movlw	high main@mR
   624  00059C  6E29               	movwf	stop@mR+1,c
   625  00059E  EC5F  F004         	call	_stop	;wreg free
   626                           
   627                           ;main.c: 89: enableSensor(0, 1);
   628  0005A2  0E01               	movlw	1
   629  0005A4  6E0F               	movwf	enableSensor@status,c
   630  0005A6  0E00               	movlw	0
   631  0005A8  EC4D  F006         	call	_enableSensor
   632                           
   633                           ;main.c: 90: enableSensor(1, 1);
   634  0005AC  0E01               	movlw	1
   635  0005AE  6E0F               	movwf	enableSensor@status,c
   636  0005B0  0E01               	movlw	1
   637  0005B2  EC4D  F006         	call	_enableSensor
   638  0005B6  D02D               	goto	L4
   639  0005B8                     l2442:
   640                           
   641                           ; BSR set to: 0
   642                           ;main.c: 97: if (DirectionFound==0) {
   643  0005B8  0100               	movlb	0	; () banked
   644  0005BA  5173               	movf	main@DirectionFound& (0+255),w,b
   645  0005BC  0100               	movlb	0	; () banked
   646  0005BE  A4D8               	btfss	status,2,c
   647  0005C0  D00D               	goto	l2446
   648                           
   649                           ; BSR set to: 0
   650                           ;main.c: 99: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   651  0005C2  0E74               	movlw	low main@mL
   652  0005C4  6E2F               	movwf	ScanWithRange@mL,c
   653  0005C6  0E00               	movlw	high main@mL
   654  0005C8  6E30               	movwf	ScanWithRange@mL+1,c
   655  0005CA  0E7D               	movlw	low main@mR
   656  0005CC  6E31               	movwf	ScanWithRange@mR,c
   657  0005CE  0E00               	movlw	high main@mR
   658  0005D0  6E32               	movwf	ScanWithRange@mR+1,c
   659  0005D2  C071  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   660  0005D6  EC56  F000         	call	_ScanWithRange	;wreg free
   661  0005DA  D00E               	goto	L2
   662  0005DC                     l2446:
   663                           
   664                           ; BSR set to: 0
   665  0005DC  0100               	movlb	0	; () banked
   666  0005DE  0573               	decf	main@DirectionFound& (0+255),w,b
   667  0005E0  A4D8               	btfss	status,2,c
   668  0005E2  D00D               	goto	l2450
   669                           
   670                           ; BSR set to: 0
   671                           ;main.c: 102: DirectionFound = ScanIR(&mL, &mR);
   672  0005E4  0E74               	movlw	low main@mL
   673  0005E6  6E2F               	movwf	ScanIR@mL,c
   674  0005E8  0E00               	movlw	high main@mL
   675  0005EA  6E30               	movwf	ScanIR@mL+1,c
   676  0005EC  0E7D               	movlw	low main@mR
   677  0005EE  6E31               	movwf	ScanIR@mR,c
   678  0005F0  0E00               	movlw	high main@mR
   679  0005F2  6E32               	movwf	ScanIR@mR+1,c
   680  0005F4  EC19  F003         	call	_ScanIR	;wreg free
   681  0005F8                     L2:
   682  0005F8  0100               	movlb	0	; () banked
   683  0005FA  6F73               	movwf	main@DirectionFound& (0+255),b
   684                           
   685                           ;main.c: 103: } else if (DirectionFound==2) {
   686  0005FC  D00D               	goto	l2458
   687  0005FE                     l2450:
   688                           
   689                           ; BSR set to: 0
   690  0005FE  0E02               	movlw	2
   691  000600  0100               	movlb	0	; () banked
   692  000602  1973               	xorwf	main@DirectionFound& (0+255),w,b
   693  000604  A4D8               	btfss	status,2,c
   694  000606  D008               	goto	l2458
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 104: mode=2;
   698  000608  0E02               	movlw	2
   699  00060A  D004               	goto	L3
   700  00060C                     l2454:
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 125: DirectionFound=1;
   704  00060C  0E01               	movlw	1
   705  00060E  0100               	movlb	0	; () banked
   706  000610  6F73               	movwf	main@DirectionFound& (0+255),b
   707  000612                     L4:
   708                           
   709                           ;main.c: 126: mode = 1;
   710  000612  0E01               	movlw	1
   711  000614                     L3:
   712  000614  0100               	movlb	0	; () banked
   713  000616  6F72               	movwf	main@mode& (0+255),b
   714  000618                     l2458:
   715  000618  0100               	movlb	0	; () banked
   716  00061A  5172               	movf	main@mode& (0+255),w,b
   717                           
   718                           ; Switch size 1, requested type "space"
   719                           ; Number of cases is 4, Range of values is 0 to 3
   720                           ; switch strategies available:
   721                           ; Name         Instructions Cycles
   722                           ; simple_byte           13     7 (average)
   723                           ;	Chosen strategy is simple_byte
   724  00061C  0A00               	xorlw	0	; case 0
   725  00061E  B4D8               	btfsc	status,2,c
   726  000620  D78C               	goto	l2422
   727  000622  0A01               	xorlw	1	; case 1
   728  000624  B4D8               	btfsc	status,2,c
   729  000626  D7C8               	goto	l2442
   730  000628  0A03               	xorlw	3	; case 2
   731  00062A  B4D8               	btfsc	status,2,c
   732  00062C  D7EF               	goto	l2454
   733  00062E  0A01               	xorlw	1	; case 3
   734                           
   735                           ; BSR set to: 0
   736                           
   737                           ; BSR set to: 0
   738  000630  D7F3               	goto	l2458
   739  000632                     __end_of_main:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           intcon	equ	0xFF2
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           status	equ	0xFD8
   746                           
   747 ;; *************** function _initRFID *****************
   748 ;; Defined at:
   749 ;;		line 5 in file "RFID_Reader.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, status,2
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   763 ;;      Params:         0       0       0       0
   764 ;;      Locals:         1       0       0       0
   765 ;;      Temps:          0       0       0       0
   766 ;;      Totals:         1       0       0       0
   767 ;;Total ram usage:        1 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    1
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  000D08                     __ptext1:
   779                           	opt stack 0
   780  000D08                     _initRFID:
   781                           	opt stack 29
   782                           
   783                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   784                           
   785                           ; BSR set to: 0
   786                           ;incstack = 0
   787  000D08  0E01               	movlw	1
   788  000D0A  6E0F               	movwf	_initRFID$1294,c
   789  000D0C  5094               	movf	3988,w,c	;volatile
   790  000D0E  C00F  FF94         	movff	_initRFID$1294,3988	;volatile
   791                           
   792                           ;RFID_Reader.c: 10: SPBRG=205;
   793  000D12  0ECD               	movlw	205
   794  000D14  6EAF               	movwf	4015,c	;volatile
   795                           
   796                           ;RFID_Reader.c: 11: SPBRGH=0;
   797  000D16  0E00               	movlw	0
   798  000D18  6EB0               	movwf	4016,c	;volatile
   799                           
   800                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   801  000D1A  86AA               	bsf	4010,3,c	;volatile
   802                           
   803                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   804  000D1C  84AC               	bsf	4012,2,c	;volatile
   805                           
   806                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   807  000D1E  88AB               	bsf	4011,4,c	;volatile
   808                           
   809                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   810  000D20  8EAB               	bsf	4011,7,c	;volatile
   811                           
   812                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   813  000D22  98AC               	bcf	4012,4,c	;volatile
   814                           
   815                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   816  000D24  9CAB               	bcf	4011,6,c	;volatile
   817  000D26  0012               	return		;funcret
   818  000D28                     __end_of_initRFID:
   819                           	opt stack 0
   820                           tblptru	equ	0xFF8
   821                           intcon	equ	0xFF2
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           status	equ	0xFD8
   825                           
   826 ;; *************** function _initMotorPWM *****************
   827 ;; Defined at:
   828 ;;		line 4 in file "dc_motor.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;		None
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;		None               void
   835 ;; Registers used:
   836 ;;		wreg, status,2
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   842 ;;      Params:         0       0       0       0
   843 ;;      Locals:         0       0       0       0
   844 ;;      Temps:          0       0       0       0
   845 ;;      Totals:         0       0       0       0
   846 ;;Total ram usage:        0 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    1
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text2
   857  000C68                     __ptext2:
   858                           	opt stack 0
   859  000C68                     _initMotorPWM:
   860                           	opt stack 29
   861                           
   862                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   863                           
   864                           ;incstack = 0
   865  000C68  0E00               	movlw	0
   866  000C6A  6E7F               	movwf	3967,c	;volatile
   867                           
   868                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   869  000C6C  0E80               	movlw	128
   870  000C6E  6E7E               	movwf	3966,c	;volatile
   871                           
   872                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   873  000C70  0E6F               	movlw	111
   874  000C72  6E6F               	movwf	3951,c	;volatile
   875                           
   876                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   877  000C74  0E00               	movlw	0
   878  000C76  6E6E               	movwf	3950,c	;volatile
   879                           
   880                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   881  000C78  0EC7               	movlw	199
   882  000C7A  6E7B               	movwf	3963,c	;volatile
   883                           
   884                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   885  000C7C  0E00               	movlw	0
   886  000C7E  6E7A               	movwf	3962,c	;volatile
   887                           
   888                           ;dc_motor.c: 13: PDC0L = 0<<2;
   889  000C80  0E00               	movlw	0
   890  000C82  6E79               	movwf	3961,c	;volatile
   891                           
   892                           ;dc_motor.c: 14: PDC0H = 0>>6;
   893  000C84  0E00               	movlw	0
   894  000C86  6E78               	movwf	3960,c	;volatile
   895                           
   896                           ;dc_motor.c: 15: PDC1L = 0<<2;
   897  000C88  0E00               	movlw	0
   898  000C8A  6E77               	movwf	3959,c	;volatile
   899                           
   900                           ;dc_motor.c: 16: PDC1H = 0>>6;
   901  000C8C  0E00               	movlw	0
   902  000C8E  6E76               	movwf	3958,c	;volatile
   903                           
   904                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   905  000C90  9093               	bcf	3987,0,c	;volatile
   906                           
   907                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   908  000C92  9293               	bcf	3987,1,c	;volatile
   909                           
   910                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   911  000C94  9493               	bcf	3987,2,c	;volatile
   912                           
   913                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   914  000C96  9693               	bcf	3987,3,c	;volatile
   915  000C98  0012               	return		;funcret
   916  000C9A                     __end_of_initMotorPWM:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           intcon	equ	0xFF2
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           status	equ	0xFD8
   923                           
   924 ;; *************** function _initIR *****************
   925 ;; Defined at:
   926 ;;		line 30 in file "IR_Reading.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;		None               void
   933 ;; Registers used:
   934 ;;		wreg, status,2
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   940 ;;      Params:         0       0       0       0
   941 ;;      Locals:         0       0       0       0
   942 ;;      Temps:          0       0       0       0
   943 ;;      Totals:         0       0       0       0
   944 ;;Total ram usage:        0 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; Hardware stack levels required when called:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text3
   955  000CE6                     __ptext3:
   956                           	opt stack 0
   957  000CE6                     _initIR:
   958                           	opt stack 29
   959                           
   960                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   961                           
   962                           ;incstack = 0
   963  000CE6  9489               	bcf	3977,2,c	;volatile
   964                           
   965                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   966  000CE8  9689               	bcf	3977,3,c	;volatile
   967                           
   968                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   969  000CEA  8492               	bsf	3986,2,c	;volatile
   970                           
   971                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   972  000CEC  8692               	bsf	3986,3,c	;volatile
   973                           
   974                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   975  000CEE  94B8               	bcf	4024,2,c	;volatile
   976                           
   977                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   978  000CF0  96B8               	bcf	4024,3,c	;volatile
   979                           
   980                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   981  000CF2  9CB8               	bcf	4024,6,c	;volatile
   982                           
   983                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   984  000CF4  9EB8               	bcf	4024,7,c	;volatile
   985                           
   986                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   987  000CF6  0E06               	movlw	6
   988  000CF8  6E63               	movwf	3939,c	;volatile
   989                           
   990                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   991  000CFA  0E06               	movlw	6
   992  000CFC  6E62               	movwf	3938,c	;volatile
   993                           
   994                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   995  000CFE  9096               	bcf	3990,0,c	;volatile
   996                           
   997                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   998  000D00  9296               	bcf	3990,1,c	;volatile
   999                           
  1000                           ;IR_Reading.c: 69: T5CON=0b01011001;
  1001  000D02  0E59               	movlw	89
  1002  000D04  6EB7               	movwf	4023,c	;volatile
  1003  000D06  0012               	return		;funcret
  1004  000D08                     __end_of_initIR:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           intcon	equ	0xFF2
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _fullSpeedBack *****************
  1013 ;; Defined at:
  1014 ;;		line 125 in file "dc_motor.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1017 ;;		 -> main@mL(9), 
  1018 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1019 ;;		 -> main@mR(9), 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;		None               void
  1024 ;; Registers used:
  1025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1031 ;;      Params:         4       0       0       0
  1032 ;;      Locals:         0       0       0       0
  1033 ;;      Temps:          0       0       0       0
  1034 ;;      Totals:         4       0       0       0
  1035 ;;Total ram usage:        4 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    4
  1038 ;; This function calls:
  1039 ;;		_fullSpeedAhead
  1040 ;; This function is called by:
  1041 ;;		_main
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text4
  1046  000C32                     __ptext4:
  1047                           	opt stack 0
  1048  000C32                     _fullSpeedBack:
  1049                           	opt stack 26
  1050                           
  1051                           ;dc_motor.c: 128: mL->direction=0;
  1052                           
  1053                           ;incstack = 0
  1054  000C32  EE20 F001          	lfsr	2,1
  1055  000C36  502B               	movf	fullSpeedBack@mL,w,c
  1056  000C38  26D9               	addwf	fsr2l,f,c
  1057  000C3A  502C               	movf	fullSpeedBack@mL+1,w,c
  1058  000C3C  22DA               	addwfc	fsr2h,f,c
  1059  000C3E  0E00               	movlw	0
  1060  000C40  6EDF               	movwf	indf2,c
  1061                           
  1062                           ;dc_motor.c: 129: mR->direction=0;
  1063  000C42  EE20 F001          	lfsr	2,1
  1064  000C46  502D               	movf	fullSpeedBack@mR,w,c
  1065  000C48  26D9               	addwf	fsr2l,f,c
  1066  000C4A  502E               	movf	fullSpeedBack@mR+1,w,c
  1067  000C4C  22DA               	addwfc	fsr2h,f,c
  1068  000C4E  0E00               	movlw	0
  1069  000C50  6EDF               	movwf	indf2,c
  1070                           
  1071                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1072  000C52  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1073  000C56  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1074  000C5A  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1075  000C5E  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1076  000C62  EC5F  F005         	call	_fullSpeedAhead	;wreg free
  1077  000C66  0012               	return		;funcret
  1078  000C68                     __end_of_fullSpeedBack:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           intcon	equ	0xFF2
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           indf2	equ	0xFDF
  1085                           fsr2h	equ	0xFDA
  1086                           fsr2l	equ	0xFD9
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _delay_s *****************
  1090 ;; Defined at:
  1091 ;;		line 10 in file "Movement.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  seconds         1    wreg     unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  seconds         1   15[COMRAM] unsigned char 
  1096 ;;  i               2   16[COMRAM] unsigned int 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;		None               void
  1099 ;; Registers used:
  1100 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1106 ;;      Params:         0       0       0       0
  1107 ;;      Locals:         3       0       0       0
  1108 ;;      Temps:          1       0       0       0
  1109 ;;      Totals:         4       0       0       0
  1110 ;;Total ram usage:        4 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    1
  1113 ;; This function calls:
  1114 ;;		Nothing
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text5
  1121  000BC2                     __ptext5:
  1122                           	opt stack 0
  1123  000BC2                     _delay_s:
  1124                           	opt stack 29
  1125                           
  1126                           ;incstack = 0
  1127                           ;delay_s@seconds stored from wreg
  1128  000BC2  6E10               	movwf	delay_s@seconds,c
  1129                           
  1130                           ;Movement.c: 11: unsigned int i=0;
  1131  000BC4  0E00               	movlw	0
  1132  000BC6  6E12               	movwf	delay_s@i+1,c
  1133  000BC8  0E00               	movlw	0
  1134  000BCA  6E11               	movwf	delay_s@i,c
  1135                           
  1136                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1137  000BCC  0E00               	movlw	0
  1138  000BCE  6E12               	movwf	delay_s@i+1,c
  1139  000BD0  0E01               	movlw	1
  1140  000BD2  6E11               	movwf	delay_s@i,c
  1141  000BD4  D009               	goto	l1756
  1142  000BD6                     l1752:
  1143                           
  1144                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1145  000BD6  0E82               	movlw	130
  1146  000BD8  6E0F               	movwf	??_delay_s& (0+255),c
  1147  000BDA  0EDE               	movlw	222
  1148  000BDC                     u1777:
  1149  000BDC  2EE8               	decfsz	wreg,f,c
  1150  000BDE  D7FE               	goto	u1777
  1151  000BE0  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1152  000BE2  D7FC               	goto	u1777
  1153  000BE4  4A11               	infsnz	delay_s@i,f,c
  1154  000BE6  2A12               	incf	delay_s@i+1,f,c
  1155  000BE8                     l1756:
  1156  000BE8  5010               	movf	delay_s@seconds,w,c
  1157  000BEA  0D14               	mullw	20
  1158  000BEC  5011               	movf	delay_s@i,w,c
  1159  000BEE  5CF3               	subwf	prodl,w,c
  1160  000BF0  5012               	movf	delay_s@i+1,w,c
  1161  000BF2  58F4               	subwfb	prodh,w,c
  1162  000BF4  A0D8               	btfss	status,0,c
  1163  000BF6  0012               	return	
  1164  000BF8  D7EE               	goto	l1752
  1165  000BFA                     __end_of_delay_s:
  1166                           	opt stack 0
  1167                           tblptru	equ	0xFF8
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           indf2	equ	0xFDF
  1174                           fsr2h	equ	0xFDA
  1175                           fsr2l	equ	0xFD9
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _ScanWithRange *****************
  1179 ;; Defined at:
  1180 ;;		line 79 in file "Movement.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1183 ;;		 -> main@mL(9), 
  1184 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1185 ;;		 -> main@mR(9), 
  1186 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  SensorResult    4    8[BANK0 ] unsigned int [2]
  1189 ;;  SensorResult    4    4[BANK0 ] unsigned int [2]
  1190 ;;  SensorResult    4    0[BANK0 ] unsigned int [2]
  1191 ;;  DirectionFou    2   12[BANK0 ] unsigned int 
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      unsigned char 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1201 ;;      Params:         5       0       0       0
  1202 ;;      Locals:         0      14       0       0
  1203 ;;      Temps:          2       0       0       0
  1204 ;;      Totals:         7      14       0       0
  1205 ;;Total ram usage:       21 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    5
  1208 ;; This function calls:
  1209 ;;		___awdiv
  1210 ;;		_delay_tenth_s
  1211 ;;		_enableSensor
  1212 ;;		_grabLeftIR
  1213 ;;		_grabRightIR
  1214 ;;		_stop
  1215 ;;		_turnLeft
  1216 ;;		_turnRight
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text6
  1223  0000AC                     __ptext6:
  1224                           	opt stack 0
  1225  0000AC                     _ScanWithRange:
  1226                           	opt stack 25
  1227                           
  1228                           ;Movement.c: 82: unsigned int SensorResultL[2];
  1229                           ;Movement.c: 83: unsigned int SensorResultC[2];
  1230                           ;Movement.c: 84: unsigned int SensorResultR[2];
  1231                           ;Movement.c: 86: unsigned int DirectionFoundTolerance=500;
  1232                           
  1233                           ;incstack = 0
  1234  0000AC  0E01               	movlw	1
  1235  0000AE  0100               	movlb	0	; () banked
  1236  0000B0  6F6D               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  1237  0000B2  0EF4               	movlw	244
  1238  0000B4  6F6C               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;Movement.c: 89: enableSensor(0, 1);
  1242  0000B6  0E01               	movlw	1
  1243  0000B8  6E0F               	movwf	enableSensor@status,c
  1244  0000BA  0E00               	movlw	0
  1245  0000BC  EC4D  F006         	call	_enableSensor
  1246                           
  1247                           ;Movement.c: 90: enableSensor(1, 1);
  1248  0000C0  0E01               	movlw	1
  1249  0000C2  6E0F               	movwf	enableSensor@status,c
  1250  0000C4  0E01               	movlw	1
  1251  0000C6  EC4D  F006         	call	_enableSensor
  1252                           
  1253                           ;Movement.c: 92: stop(mL,mR);
  1254  0000CA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1255  0000CE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1256  0000D2  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1257  0000D6  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1258  0000DA  EC5F  F004         	call	_stop	;wreg free
  1259                           
  1260                           ;Movement.c: 93: SensorResultC[0]=grabLeftIR();
  1261  0000DE  EC24  F005         	call	_grabLeftIR	;wreg free
  1262  0000E2  C00F  F064         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1263  0000E6  C010  F065         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1264                           
  1265                           ;Movement.c: 94: SensorResultC[1]=grabRightIR();
  1266  0000EA  ECE9  F004         	call	_grabRightIR	;wreg free
  1267  0000EE  C00F  F066         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1268  0000F2  C010  F067         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1269                           
  1270                           ;Movement.c: 97: turnLeft(mL,mR);
  1271  0000F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1272  0000FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1273  0000FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1274  000102  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1275  000106  ECBC  F005         	call	_turnLeft	;wreg free
  1276                           
  1277                           ;Movement.c: 98: delay_tenth_s(tenth_seconds);
  1278  00010A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1279  00010C  ECFD  F005         	call	_delay_tenth_s
  1280                           
  1281                           ;Movement.c: 100: stop(mL,mR);
  1282  000110  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1283  000114  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1284  000118  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1285  00011C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1286  000120  EC5F  F004         	call	_stop	;wreg free
  1287                           
  1288                           ;Movement.c: 101: SensorResultL[0]=grabLeftIR();
  1289  000124  EC24  F005         	call	_grabLeftIR	;wreg free
  1290  000128  C00F  F060         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1291  00012C  C010  F061         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1292                           
  1293                           ;Movement.c: 102: SensorResultL[1]=grabRightIR();
  1294  000130  ECE9  F004         	call	_grabRightIR	;wreg free
  1295  000134  C00F  F062         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1296  000138  C010  F063         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1297                           
  1298                           ;Movement.c: 105: turnRight(mL,mR);
  1299  00013C  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1300  000140  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1301  000144  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1302  000148  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1303  00014C  EC97  F005         	call	_turnRight	;wreg free
  1304                           
  1305                           ;Movement.c: 106: delay_tenth_s(2*tenth_seconds);
  1306  000150  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1307  000152  0D02               	mullw	2
  1308  000154  50F3               	movf	prodl,w,c
  1309  000156  ECFD  F005         	call	_delay_tenth_s
  1310                           
  1311                           ;Movement.c: 108: stop(mL,mR);
  1312  00015A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1313  00015E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1314  000162  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1315  000166  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1316  00016A  EC5F  F004         	call	_stop	;wreg free
  1317                           
  1318                           ;Movement.c: 109: SensorResultR[0]=grabLeftIR();
  1319  00016E  EC24  F005         	call	_grabLeftIR	;wreg free
  1320  000172  C00F  F068         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1321  000176  C010  F069         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1322                           
  1323                           ;Movement.c: 110: SensorResultR[1]=grabRightIR();
  1324  00017A  ECE9  F004         	call	_grabRightIR	;wreg free
  1325  00017E  C00F  F06A         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1326  000182  C010  F06B         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1327                           
  1328                           ;Movement.c: 113: enableSensor(0, 0);
  1329  000186  0E00               	movlw	0
  1330  000188  6E0F               	movwf	enableSensor@status,c
  1331  00018A  0E00               	movlw	0
  1332  00018C  EC4D  F006         	call	_enableSensor
  1333                           
  1334                           ;Movement.c: 114: enableSensor(1, 0);
  1335  000190  0E00               	movlw	0
  1336  000192  6E0F               	movwf	enableSensor@status,c
  1337  000194  0E01               	movlw	1
  1338  000196  EC4D  F006         	call	_enableSensor
  1339                           
  1340                           ;Movement.c: 121: if (((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)
  1341                           ;Movement.c: 122: ||((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)) {
  1342  00019A  C060  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1343  00019E  C061  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1344  0001A2  1E34               	comf	??_ScanWithRange,f,c
  1345  0001A4  1E35               	comf	??_ScanWithRange+1,f,c
  1346  0001A6  4A34               	infsnz	??_ScanWithRange,f,c
  1347  0001A8  2A35               	incf	??_ScanWithRange+1,f,c
  1348  0001AA  0100               	movlb	0	; () banked
  1349  0001AC  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1350  0001AE  2634               	addwf	??_ScanWithRange,f,c
  1351  0001B0  0100               	movlb	0	; () banked
  1352  0001B2  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1353  0001B4  2235               	addwfc	??_ScanWithRange+1,f,c
  1354  0001B6  0100               	movlb	0	; () banked
  1355  0001B8  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1356  0001BA  5C34               	subwf	??_ScanWithRange,w,c
  1357  0001BC  0100               	movlb	0	; () banked
  1358  0001BE  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1359  0001C0  5835               	subwfb	??_ScanWithRange+1,w,c
  1360  0001C2  A0D8               	btfss	status,0,c
  1361  0001C4  D018               	goto	l2240
  1362                           
  1363                           ; BSR set to: 0
  1364  0001C6  EE20  F062         	lfsr	2,ScanWithRange@SensorResultL+2
  1365  0001CA  CFDE F034          	movff	postinc2,??_ScanWithRange
  1366  0001CE  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1367  0001D2  1E34               	comf	??_ScanWithRange,f,c
  1368  0001D4  1E35               	comf	??_ScanWithRange+1,f,c
  1369  0001D6  4A34               	infsnz	??_ScanWithRange,f,c
  1370  0001D8  2A35               	incf	??_ScanWithRange+1,f,c
  1371  0001DA  0100               	movlb	0	; () banked
  1372  0001DC  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1373  0001DE  2634               	addwf	??_ScanWithRange,f,c
  1374  0001E0  0100               	movlb	0	; () banked
  1375  0001E2  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1376  0001E4  2235               	addwfc	??_ScanWithRange+1,f,c
  1377  0001E6  0100               	movlb	0	; () banked
  1378  0001E8  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1379  0001EA  5C34               	subwf	??_ScanWithRange,w,c
  1380  0001EC  0100               	movlb	0	; () banked
  1381  0001EE  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1382  0001F0  5835               	subwfb	??_ScanWithRange+1,w,c
  1383  0001F2  B0D8               	btfsc	status,0,c
  1384  0001F4  D01B               	goto	l2252
  1385  0001F6                     l2240:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;Movement.c: 124: turnLeft(mL,mR);
  1389  0001F6  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1390  0001FA  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1391  0001FE  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1392  000202  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1393  000206  ECBC  F005         	call	_turnLeft	;wreg free
  1394                           
  1395                           ;Movement.c: 125: delay_tenth_s(2*(tenth_seconds));
  1396  00020A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1397  00020C  0D02               	mullw	2
  1398  00020E  50F3               	movf	prodl,w,c
  1399  000210  ECFD  F005         	call	_delay_tenth_s
  1400                           
  1401                           ;Movement.c: 126: stop(mL,mR);
  1402  000214  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1403  000218  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1404  00021C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1405  000220  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1406  000224  EC5F  F004         	call	_stop	;wreg free
  1407  000228                     l2246:
  1408                           
  1409                           ;Movement.c: 127: return 2;
  1410  000228  0E02               	movlw	2
  1411  00022A  0012               	return	
  1412  00022C                     l2252:
  1413                           
  1414                           ;Movement.c: 129: ||((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)) {
  1415  00022C  C064  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1416  000230  C065  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1417  000234  1E34               	comf	??_ScanWithRange,f,c
  1418  000236  1E35               	comf	??_ScanWithRange+1,f,c
  1419  000238  4A34               	infsnz	??_ScanWithRange,f,c
  1420  00023A  2A35               	incf	??_ScanWithRange+1,f,c
  1421  00023C  0100               	movlb	0	; () banked
  1422  00023E  5166               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1423  000240  2634               	addwf	??_ScanWithRange,f,c
  1424  000242  0100               	movlb	0	; () banked
  1425  000244  5167               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1426  000246  2235               	addwfc	??_ScanWithRange+1,f,c
  1427  000248  0100               	movlb	0	; () banked
  1428  00024A  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1429  00024C  5C34               	subwf	??_ScanWithRange,w,c
  1430  00024E  0100               	movlb	0	; () banked
  1431  000250  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1432  000252  5835               	subwfb	??_ScanWithRange+1,w,c
  1433  000254  A0D8               	btfss	status,0,c
  1434  000256  D018               	goto	l2256
  1435                           
  1436                           ; BSR set to: 0
  1437  000258  EE20  F066         	lfsr	2,ScanWithRange@SensorResultC+2
  1438  00025C  CFDE F034          	movff	postinc2,??_ScanWithRange
  1439  000260  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1440  000264  1E34               	comf	??_ScanWithRange,f,c
  1441  000266  1E35               	comf	??_ScanWithRange+1,f,c
  1442  000268  4A34               	infsnz	??_ScanWithRange,f,c
  1443  00026A  2A35               	incf	??_ScanWithRange+1,f,c
  1444  00026C  0100               	movlb	0	; () banked
  1445  00026E  5164               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1446  000270  2634               	addwf	??_ScanWithRange,f,c
  1447  000272  0100               	movlb	0	; () banked
  1448  000274  5165               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1449  000276  2235               	addwfc	??_ScanWithRange+1,f,c
  1450  000278  0100               	movlb	0	; () banked
  1451  00027A  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1452  00027C  5C34               	subwf	??_ScanWithRange,w,c
  1453  00027E  0100               	movlb	0	; () banked
  1454  000280  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1455  000282  5835               	subwfb	??_ScanWithRange+1,w,c
  1456  000284  B0D8               	btfsc	status,0,c
  1457  000286  D018               	goto	l2268
  1458  000288                     l2256:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;Movement.c: 131: turnLeft(mL,mR);
  1462  000288  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1463  00028C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1464  000290  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1465  000294  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1466  000298  ECBC  F005         	call	_turnLeft	;wreg free
  1467                           
  1468                           ;Movement.c: 132: delay_tenth_s(tenth_seconds);
  1469  00029C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1470  00029E  ECFD  F005         	call	_delay_tenth_s
  1471                           
  1472                           ;Movement.c: 133: stop(mL,mR);
  1473  0002A2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1474  0002A6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1475  0002AA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1476  0002AE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1477  0002B2  EC5F  F004         	call	_stop	;wreg free
  1478  0002B6  D7B8               	goto	l2246
  1479  0002B8                     l2268:
  1480                           
  1481                           ;Movement.c: 136: ||((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)) {
  1482  0002B8  C068  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1483  0002BC  C069  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1484  0002C0  1E34               	comf	??_ScanWithRange,f,c
  1485  0002C2  1E35               	comf	??_ScanWithRange+1,f,c
  1486  0002C4  4A34               	infsnz	??_ScanWithRange,f,c
  1487  0002C6  2A35               	incf	??_ScanWithRange+1,f,c
  1488  0002C8  0100               	movlb	0	; () banked
  1489  0002CA  516A               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1490  0002CC  2634               	addwf	??_ScanWithRange,f,c
  1491  0002CE  0100               	movlb	0	; () banked
  1492  0002D0  516B               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1493  0002D2  2235               	addwfc	??_ScanWithRange+1,f,c
  1494  0002D4  0100               	movlb	0	; () banked
  1495  0002D6  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1496  0002D8  5C34               	subwf	??_ScanWithRange,w,c
  1497  0002DA  0100               	movlb	0	; () banked
  1498  0002DC  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1499  0002DE  5835               	subwfb	??_ScanWithRange+1,w,c
  1500  0002E0  A0D8               	btfss	status,0,c
  1501  0002E2  D018               	goto	l2272
  1502                           
  1503                           ; BSR set to: 0
  1504  0002E4  EE20  F06A         	lfsr	2,ScanWithRange@SensorResultR+2
  1505  0002E8  CFDE F034          	movff	postinc2,??_ScanWithRange
  1506  0002EC  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1507  0002F0  1E34               	comf	??_ScanWithRange,f,c
  1508  0002F2  1E35               	comf	??_ScanWithRange+1,f,c
  1509  0002F4  4A34               	infsnz	??_ScanWithRange,f,c
  1510  0002F6  2A35               	incf	??_ScanWithRange+1,f,c
  1511  0002F8  0100               	movlb	0	; () banked
  1512  0002FA  5168               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1513  0002FC  2634               	addwf	??_ScanWithRange,f,c
  1514  0002FE  0100               	movlb	0	; () banked
  1515  000300  5169               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1516  000302  2235               	addwfc	??_ScanWithRange+1,f,c
  1517  000304  0100               	movlb	0	; () banked
  1518  000306  516C               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1519  000308  5C34               	subwf	??_ScanWithRange,w,c
  1520  00030A  0100               	movlb	0	; () banked
  1521  00030C  516D               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1522  00030E  5835               	subwfb	??_ScanWithRange+1,w,c
  1523  000310  B0D8               	btfsc	status,0,c
  1524  000312  D00B               	goto	l2280
  1525  000314                     l2272:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;Movement.c: 138: stop(mL,mR);
  1529  000314  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1530  000318  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1531  00031C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1532  000320  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1533  000324  EC5F  F004         	call	_stop	;wreg free
  1534  000328  D77F               	goto	l2246
  1535  00032A                     l2280:
  1536  00032A  0100               	movlb	0	; () banked
  1537  00032C  5160               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1538  00032E  0100               	movlb	0	; () banked
  1539  000330  5D62               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1540  000332  0100               	movlb	0	; () banked
  1541  000334  5161               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1542  000336  0100               	movlb	0	; () banked
  1543  000338  5963               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1544  00033A  B0D8               	btfsc	status,0,c
  1545  00033C  D01B               	goto	l2294
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;Movement.c: 144: turnLeft(mL,mR);
  1549  00033E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1550  000342  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1551  000346  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1552  00034A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1553  00034E  ECBC  F005         	call	_turnLeft	;wreg free
  1554                           
  1555                           ;Movement.c: 145: delay_tenth_s(3*tenth_seconds);
  1556  000352  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1557  000354  0D03               	mullw	3
  1558  000356  50F3               	movf	prodl,w,c
  1559  000358  ECFD  F005         	call	_delay_tenth_s
  1560                           
  1561                           ;Movement.c: 146: stop(mL,mR);
  1562  00035C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1563  000360  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1564  000364  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1565  000368  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1566  00036C  EC5F  F004         	call	_stop	;wreg free
  1567  000370                     l2288:
  1568                           
  1569                           ;Movement.c: 147: return 0;
  1570  000370  0E00               	movlw	0
  1571  000372  0012               	return	
  1572  000374                     l2294:
  1573  000374  0100               	movlb	0	; () banked
  1574  000376  516A               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1575  000378  0100               	movlb	0	; () banked
  1576  00037A  5D68               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  1577  00037C  0100               	movlb	0	; () banked
  1578  00037E  516B               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1579  000380  0100               	movlb	0	; () banked
  1580  000382  5969               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1581  000384  B0D8               	btfsc	status,0,c
  1582  000386  D018               	goto	l2308
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;Movement.c: 150: turnRight(mL,mR);
  1586  000388  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1587  00038C  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1588  000390  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1589  000394  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1590  000398  EC97  F005         	call	_turnRight	;wreg free
  1591                           
  1592                           ;Movement.c: 151: delay_tenth_s(tenth_seconds);
  1593  00039C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1594  00039E  ECFD  F005         	call	_delay_tenth_s
  1595                           
  1596                           ;Movement.c: 152: stop(mL,mR);
  1597  0003A2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1598  0003A6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1599  0003AA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1600  0003AE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1601  0003B2  EC5F  F004         	call	_stop	;wreg free
  1602  0003B6  D7DC               	goto	l2288
  1603  0003B8                     l2308:
  1604  0003B8  0100               	movlb	0	; () banked
  1605  0003BA  5162               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1606  0003BC  0100               	movlb	0	; () banked
  1607  0003BE  5D60               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1608  0003C0  0100               	movlb	0	; () banked
  1609  0003C2  5163               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1610  0003C4  0100               	movlb	0	; () banked
  1611  0003C6  5961               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1612  0003C8  B0D8               	btfsc	status,0,c
  1613  0003CA  D02F               	goto	l2324
  1614                           
  1615                           ; BSR set to: 0
  1616  0003CC  0100               	movlb	0	; () banked
  1617  0003CE  5164               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1618  0003D0  0100               	movlb	0	; () banked
  1619  0003D2  5D66               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1620  0003D4  0100               	movlb	0	; () banked
  1621  0003D6  5165               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1622  0003D8  0100               	movlb	0	; () banked
  1623  0003DA  5967               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1624  0003DC  B0D8               	btfsc	status,0,c
  1625  0003DE  D025               	goto	l2324
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;Movement.c: 158: turnLeft(mL,mR);
  1629  0003E0  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1630  0003E4  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1631  0003E8  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1632  0003EC  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1633  0003F0  ECBC  F005         	call	_turnLeft	;wreg free
  1634                           
  1635                           ;Movement.c: 159: delay_tenth_s((3*tenth_seconds)/2);
  1636  0003F4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1637  0003F6  0D03               	mullw	3
  1638  0003F8  CFF3 F015          	movff	prodl,___awdiv@dividend
  1639  0003FC  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1640  000400  0E00               	movlw	0
  1641  000402  6E18               	movwf	___awdiv@divisor+1,c
  1642  000404  0E02               	movlw	2
  1643  000406  6E17               	movwf	___awdiv@divisor,c
  1644  000408  ECA7  F004         	call	___awdiv	;wreg free
  1645  00040C  5015               	movf	?___awdiv,w,c
  1646  00040E  ECFD  F005         	call	_delay_tenth_s
  1647                           
  1648                           ;Movement.c: 160: stop(mL,mR);
  1649  000412  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1650  000416  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1651  00041A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1652  00041E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1653  000422  EC5F  F004         	call	_stop	;wreg free
  1654  000426                     l2318:
  1655                           
  1656                           ;Movement.c: 161: return 1;
  1657  000426  0E01               	movlw	1
  1658  000428  0012               	return	
  1659  00042A                     l2324:
  1660  00042A  0100               	movlb	0	; () banked
  1661  00042C  5168               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1662  00042E  0100               	movlb	0	; () banked
  1663  000430  5D6A               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1664  000432  0100               	movlb	0	; () banked
  1665  000434  5169               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1666  000436  0100               	movlb	0	; () banked
  1667  000438  596B               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1668  00043A  B0D8               	btfsc	status,0,c
  1669  00043C  D02B               	goto	l2338
  1670                           
  1671                           ; BSR set to: 0
  1672  00043E  0100               	movlb	0	; () banked
  1673  000440  5166               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1674  000442  0100               	movlb	0	; () banked
  1675  000444  5D64               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  1676  000446  0100               	movlb	0	; () banked
  1677  000448  5167               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1678  00044A  0100               	movlb	0	; () banked
  1679  00044C  5965               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1680  00044E  B0D8               	btfsc	status,0,c
  1681  000450  D021               	goto	l2338
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;Movement.c: 164: turnLeft(mL,mR);
  1685  000452  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1686  000456  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1687  00045A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1688  00045E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1689  000462  ECBC  F005         	call	_turnLeft	;wreg free
  1690                           
  1691                           ;Movement.c: 165: delay_tenth_s((tenth_seconds)/2);
  1692  000466  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  1693  00046A  6A16               	clrf	___awdiv@dividend+1,c
  1694  00046C  0E00               	movlw	0
  1695  00046E  6E18               	movwf	___awdiv@divisor+1,c
  1696  000470  0E02               	movlw	2
  1697  000472  6E17               	movwf	___awdiv@divisor,c
  1698  000474  ECA7  F004         	call	___awdiv	;wreg free
  1699  000478  5015               	movf	?___awdiv,w,c
  1700  00047A  ECFD  F005         	call	_delay_tenth_s
  1701                           
  1702                           ;Movement.c: 166: stop(mL,mR);
  1703  00047E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1704  000482  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1705  000486  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1706  00048A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1707  00048E  EC5F  F004         	call	_stop	;wreg free
  1708  000492  D7C9               	goto	l2318
  1709  000494                     l2338:
  1710                           
  1711                           ;Movement.c: 168: }
  1712                           ;Movement.c: 169: return 0;
  1713  000494  0E00               	movlw	0
  1714  000496  0012               	return	
  1715  000498                     __end_of_ScanWithRange:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _enableSensor *****************
  1731 ;; Defined at:
  1732 ;;		line 106 in file "IR_Reading.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  sensor          1    wreg     unsigned char 
  1735 ;;  status          1   14[COMRAM] unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  sensor          1   15[COMRAM] unsigned char 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1747 ;;      Params:         1       0       0       0
  1748 ;;      Locals:         1       0       0       0
  1749 ;;      Temps:          0       0       0       0
  1750 ;;      Totals:         2       0       0       0
  1751 ;;Total ram usage:        2 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;;		_ScanWithRange
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text7
  1763  000C9A                     __ptext7:
  1764                           	opt stack 0
  1765  000C9A                     _enableSensor:
  1766                           	opt stack 29
  1767                           
  1768                           ;incstack = 0
  1769                           ;enableSensor@sensor stored from wreg
  1770  000C9A  6E10               	movwf	enableSensor@sensor,c
  1771                           
  1772                           ;IR_Reading.c: 108: if (sensor==0){
  1773  000C9C  5010               	movf	enableSensor@sensor,w,c
  1774  000C9E  A4D8               	btfss	status,2,c
  1775  000CA0  D006               	goto	l2140
  1776                           
  1777                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1778  000CA2  B00F               	btfsc	enableSensor@status,0,c
  1779  000CA4  D002               	bra	u1445
  1780  000CA6  908D               	bcf	3981,0,c	;volatile
  1781  000CA8  D001               	bra	u1446
  1782  000CAA                     u1445:
  1783  000CAA  808D               	bsf	3981,0,c	;volatile
  1784  000CAC                     u1446:
  1785                           
  1786                           ;IR_Reading.c: 110: } else if (sensor==1){
  1787  000CAC  0012               	return	
  1788  000CAE                     l2140:
  1789  000CAE  0410               	decf	enableSensor@sensor,w,c
  1790  000CB0  A4D8               	btfss	status,2,c
  1791  000CB2  0012               	return	
  1792                           
  1793                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1794  000CB4  B00F               	btfsc	enableSensor@status,0,c
  1795  000CB6  D002               	bra	u1465
  1796  000CB8  928D               	bcf	3981,1,c	;volatile
  1797  000CBA  D001               	bra	u1466
  1798  000CBC                     u1465:
  1799  000CBC  828D               	bsf	3981,1,c	;volatile
  1800  000CBE                     u1466:
  1801  000CBE  0012               	return	
  1802  000CC0                     __end_of_enableSensor:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           indf2	equ	0xFDF
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _ScanIR *****************
  1818 ;; Defined at:
  1819 ;;		line 32 in file "Movement.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1822 ;;		 -> main@mL(9), 
  1823 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1824 ;;		 -> main@mR(9), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  SensorResult    4   54[COMRAM] unsigned int [2]
  1827 ;;  DirectionFou    2   52[COMRAM] const unsigned int 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      unsigned char 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1837 ;;      Params:         4       0       0       0
  1838 ;;      Locals:         6       0       0       0
  1839 ;;      Temps:          2       0       0       0
  1840 ;;      Totals:        12       0       0       0
  1841 ;;Total ram usage:       12 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    5
  1844 ;; This function calls:
  1845 ;;		_delay_tenth_s
  1846 ;;		_grabLeftIR
  1847 ;;		_grabRightIR
  1848 ;;		_stop
  1849 ;;		_turnLeft
  1850 ;;		_turnRight
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text8
  1857  000632                     __ptext8:
  1858                           	opt stack 0
  1859  000632                     _ScanIR:
  1860                           	opt stack 25
  1861                           
  1862                           ;Movement.c: 34: unsigned int SensorResult[2];
  1863                           ;Movement.c: 36: const unsigned int DirectionFoundTolerance=100;
  1864                           
  1865                           ;incstack = 0
  1866  000632  0E00               	movlw	0
  1867  000634  6E36               	movwf	ScanIR@DirectionFoundTolerance+1,c
  1868  000636  0E64               	movlw	100
  1869  000638  6E35               	movwf	ScanIR@DirectionFoundTolerance,c
  1870                           
  1871                           ;Movement.c: 40: SensorResult[0]=grabLeftIR();
  1872  00063A  EC24  F005         	call	_grabLeftIR	;wreg free
  1873  00063E  C00F  F037         	movff	?_grabLeftIR,ScanIR@SensorResult
  1874  000642  C010  F038         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  1875                           
  1876                           ;Movement.c: 41: SensorResult[1]=grabRightIR();
  1877  000646  ECE9  F004         	call	_grabRightIR	;wreg free
  1878  00064A  C00F  F039         	movff	?_grabRightIR,ScanIR@SensorResult+2
  1879  00064E  C010  F03A         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  1880                           
  1881                           ;Movement.c: 42: stop(mL,mR);
  1882  000652  C02F  F026         	movff	ScanIR@mL,stop@mL
  1883  000656  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1884  00065A  C031  F028         	movff	ScanIR@mR,stop@mR
  1885  00065E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1886  000662  EC5F  F004         	call	_stop	;wreg free
  1887                           
  1888                           ;Movement.c: 45: if ((SensorResult[0]+SensorResult[1])>1000) {
  1889  000666  5037               	movf	ScanIR@SensorResult,w,c
  1890  000668  2439               	addwf	ScanIR@SensorResult+2,w,c
  1891  00066A  6E33               	movwf	??_ScanIR& (0+255),c
  1892  00066C  5038               	movf	ScanIR@SensorResult+1,w,c
  1893  00066E  203A               	addwfc	ScanIR@SensorResult+3,w,c
  1894  000670  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  1895  000672  0EE9               	movlw	233
  1896  000674  5C33               	subwf	??_ScanIR,w,c
  1897  000676  0E03               	movlw	3
  1898  000678  5834               	subwfb	??_ScanIR+1,w,c
  1899  00067A  A0D8               	btfss	status,0,c
  1900  00067C  D078               	goto	l2388
  1901                           
  1902                           ;Movement.c: 46: if (((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)
  1903                           ;Movement.c: 47: ||((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)) {
  1904  00067E  C037  F033         	movff	ScanIR@SensorResult,??_ScanIR
  1905  000682  C038  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  1906  000686  1E33               	comf	??_ScanIR,f,c
  1907  000688  1E34               	comf	??_ScanIR+1,f,c
  1908  00068A  4A33               	infsnz	??_ScanIR,f,c
  1909  00068C  2A34               	incf	??_ScanIR+1,f,c
  1910  00068E  5039               	movf	ScanIR@SensorResult+2,w,c
  1911  000690  2633               	addwf	??_ScanIR,f,c
  1912  000692  503A               	movf	ScanIR@SensorResult+3,w,c
  1913  000694  2234               	addwfc	??_ScanIR+1,f,c
  1914  000696  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1915  000698  5C33               	subwf	??_ScanIR,w,c
  1916  00069A  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1917  00069C  5834               	subwfb	??_ScanIR+1,w,c
  1918  00069E  A0D8               	btfss	status,0,c
  1919  0006A0  D014               	goto	l2356
  1920  0006A2  EE20  F039         	lfsr	2,ScanIR@SensorResult+2
  1921  0006A6  CFDE F033          	movff	postinc2,??_ScanIR
  1922  0006AA  CFDD F034          	movff	postdec2,??_ScanIR+1
  1923  0006AE  1E33               	comf	??_ScanIR,f,c
  1924  0006B0  1E34               	comf	??_ScanIR+1,f,c
  1925  0006B2  4A33               	infsnz	??_ScanIR,f,c
  1926  0006B4  2A34               	incf	??_ScanIR+1,f,c
  1927  0006B6  5037               	movf	ScanIR@SensorResult,w,c
  1928  0006B8  2633               	addwf	??_ScanIR,f,c
  1929  0006BA  5038               	movf	ScanIR@SensorResult+1,w,c
  1930  0006BC  2234               	addwfc	??_ScanIR+1,f,c
  1931  0006BE  5035               	movf	ScanIR@DirectionFoundTolerance,w,c
  1932  0006C0  5C33               	subwf	??_ScanIR,w,c
  1933  0006C2  5036               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  1934  0006C4  5834               	subwfb	??_ScanIR+1,w,c
  1935  0006C6  B0D8               	btfsc	status,0,c
  1936  0006C8  D002               	goto	l2362
  1937  0006CA                     l2356:
  1938                           
  1939                           ;Movement.c: 49: return 2;
  1940  0006CA  0E02               	movlw	2
  1941  0006CC  0012               	return	
  1942  0006CE                     l2362:
  1943  0006CE  5039               	movf	ScanIR@SensorResult+2,w,c
  1944  0006D0  5C37               	subwf	ScanIR@SensorResult,w,c
  1945  0006D2  503A               	movf	ScanIR@SensorResult+3,w,c
  1946  0006D4  5838               	subwfb	ScanIR@SensorResult+1,w,c
  1947  0006D6  B0D8               	btfsc	status,0,c
  1948  0006D8  D022               	goto	l2376
  1949                           
  1950                           ;Movement.c: 52: stop(mL,mR);
  1951  0006DA  C02F  F026         	movff	ScanIR@mL,stop@mL
  1952  0006DE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1953  0006E2  C031  F028         	movff	ScanIR@mR,stop@mR
  1954  0006E6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1955  0006EA  EC5F  F004         	call	_stop	;wreg free
  1956                           
  1957                           ;Movement.c: 54: turnLeft(mL,mR);
  1958  0006EE  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1959  0006F2  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1960  0006F6  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1961  0006FA  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1962  0006FE  ECBC  F005         	call	_turnLeft	;wreg free
  1963                           
  1964                           ;Movement.c: 55: delay_tenth_s(4);
  1965  000702  0E04               	movlw	4
  1966  000704  ECFD  F005         	call	_delay_tenth_s
  1967                           
  1968                           ;Movement.c: 56: stop(mL,mR);
  1969  000708  C02F  F026         	movff	ScanIR@mL,stop@mL
  1970  00070C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1971  000710  C031  F028         	movff	ScanIR@mR,stop@mR
  1972  000714  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1973  000718  EC5F  F004         	call	_stop	;wreg free
  1974  00071C  D7D6               	goto	l2356
  1975  00071E                     l2376:
  1976  00071E  5037               	movf	ScanIR@SensorResult,w,c
  1977  000720  5C39               	subwf	ScanIR@SensorResult+2,w,c
  1978  000722  5038               	movf	ScanIR@SensorResult+1,w,c
  1979  000724  583A               	subwfb	ScanIR@SensorResult+3,w,c
  1980  000726  B0D8               	btfsc	status,0,c
  1981  000728  D02E               	goto	l2394
  1982                           
  1983                           ;Movement.c: 60: stop(mL,mR);
  1984  00072A  C02F  F026         	movff	ScanIR@mL,stop@mL
  1985  00072E  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1986  000732  C031  F028         	movff	ScanIR@mR,stop@mR
  1987  000736  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1988  00073A  EC5F  F004         	call	_stop	;wreg free
  1989                           
  1990                           ;Movement.c: 62: turnRight(mL,mR);
  1991  00073E  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  1992  000742  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  1993  000746  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  1994  00074A  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  1995  00074E  EC97  F005         	call	_turnRight	;wreg free
  1996                           
  1997                           ;Movement.c: 63: delay_tenth_s(4);
  1998  000752  0E04               	movlw	4
  1999  000754  ECFD  F005         	call	_delay_tenth_s
  2000                           
  2001                           ;Movement.c: 64: stop(mL,mR);
  2002  000758  C02F  F026         	movff	ScanIR@mL,stop@mL
  2003  00075C  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2004  000760  C031  F028         	movff	ScanIR@mR,stop@mR
  2005  000764  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2006  000768  EC5F  F004         	call	_stop	;wreg free
  2007  00076C  D7AE               	goto	l2356
  2008  00076E                     l2388:
  2009                           
  2010                           ;Movement.c: 68: stop(mL,mR);
  2011  00076E  C02F  F026         	movff	ScanIR@mL,stop@mL
  2012  000772  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2013  000776  C031  F028         	movff	ScanIR@mR,stop@mR
  2014  00077A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2015  00077E  EC5F  F004         	call	_stop	;wreg free
  2016                           
  2017                           ;Movement.c: 69: return 0;
  2018  000782  0E00               	movlw	0
  2019  000784  0012               	return	
  2020  000786                     l2394:
  2021                           
  2022                           ;Movement.c: 70: }
  2023                           ;Movement.c: 72: return 0;
  2024  000786  0E00               	movlw	0
  2025  000788  0012               	return	
  2026  00078A                     __end_of_ScanIR:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           indf2	equ	0xFDF
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _turnRight *****************
  2042 ;; Defined at:
  2043 ;;		line 98 in file "dc_motor.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2046 ;;		 -> main@mL(9), 
  2047 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2048 ;;		 -> main@mR(9), 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2060 ;;      Params:         4       0       0       0
  2061 ;;      Locals:         0       0       0       0
  2062 ;;      Temps:          0       0       0       0
  2063 ;;      Totals:         4       0       0       0
  2064 ;;Total ram usage:        4 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    4
  2067 ;; This function calls:
  2068 ;;		_fullSpeedAhead
  2069 ;;		_stop
  2070 ;; This function is called by:
  2071 ;;		_ScanIR
  2072 ;;		_ScanWithRange
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text9
  2077  000B2E                     __ptext9:
  2078                           	opt stack 0
  2079  000B2E                     _turnRight:
  2080                           	opt stack 25
  2081                           
  2082                           ;dc_motor.c: 100: stop(mL, mR);
  2083                           
  2084                           ;incstack = 0
  2085  000B2E  C02B  F026         	movff	turnRight@mL,stop@mL
  2086  000B32  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2087  000B36  C02D  F028         	movff	turnRight@mR,stop@mR
  2088  000B3A  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2089  000B3E  EC5F  F004         	call	_stop	;wreg free
  2090                           
  2091                           ;dc_motor.c: 102: mL->direction=1;
  2092  000B42  EE20 F001          	lfsr	2,1
  2093  000B46  502B               	movf	turnRight@mL,w,c
  2094  000B48  26D9               	addwf	fsr2l,f,c
  2095  000B4A  502C               	movf	turnRight@mL+1,w,c
  2096  000B4C  22DA               	addwfc	fsr2h,f,c
  2097  000B4E  0E01               	movlw	1
  2098  000B50  6EDF               	movwf	indf2,c
  2099                           
  2100                           ;dc_motor.c: 103: mR->direction=0;
  2101  000B52  EE20 F001          	lfsr	2,1
  2102  000B56  502D               	movf	turnRight@mR,w,c
  2103  000B58  26D9               	addwf	fsr2l,f,c
  2104  000B5A  502E               	movf	turnRight@mR+1,w,c
  2105  000B5C  22DA               	addwfc	fsr2h,f,c
  2106  000B5E  0E00               	movlw	0
  2107  000B60  6EDF               	movwf	indf2,c
  2108                           
  2109                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2110  000B62  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2111  000B66  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2112  000B6A  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2113  000B6E  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2114  000B72  EC5F  F005         	call	_fullSpeedAhead	;wreg free
  2115  000B76  0012               	return		;funcret
  2116  000B78                     __end_of_turnRight:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           indf2	equ	0xFDF
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _turnLeft *****************
  2132 ;; Defined at:
  2133 ;;		line 87 in file "dc_motor.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2136 ;;		 -> main@mL(9), 
  2137 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2138 ;;		 -> main@mR(9), 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;		None               void
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2150 ;;      Params:         4       0       0       0
  2151 ;;      Locals:         0       0       0       0
  2152 ;;      Temps:          0       0       0       0
  2153 ;;      Totals:         4       0       0       0
  2154 ;;Total ram usage:        4 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    4
  2157 ;; This function calls:
  2158 ;;		_fullSpeedAhead
  2159 ;;		_stop
  2160 ;; This function is called by:
  2161 ;;		_ScanIR
  2162 ;;		_ScanWithRange
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text10
  2167  000B78                     __ptext10:
  2168                           	opt stack 0
  2169  000B78                     _turnLeft:
  2170                           	opt stack 25
  2171                           
  2172                           ;dc_motor.c: 89: stop(mL, mR);
  2173                           
  2174                           ;incstack = 0
  2175  000B78  C02B  F026         	movff	turnLeft@mL,stop@mL
  2176  000B7C  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2177  000B80  C02D  F028         	movff	turnLeft@mR,stop@mR
  2178  000B84  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2179  000B88  EC5F  F004         	call	_stop	;wreg free
  2180                           
  2181                           ;dc_motor.c: 91: mL->direction=0;
  2182  000B8C  EE20 F001          	lfsr	2,1
  2183  000B90  502B               	movf	turnLeft@mL,w,c
  2184  000B92  26D9               	addwf	fsr2l,f,c
  2185  000B94  502C               	movf	turnLeft@mL+1,w,c
  2186  000B96  22DA               	addwfc	fsr2h,f,c
  2187  000B98  0E00               	movlw	0
  2188  000B9A  6EDF               	movwf	indf2,c
  2189                           
  2190                           ;dc_motor.c: 92: mR->direction=1;
  2191  000B9C  EE20 F001          	lfsr	2,1
  2192  000BA0  502D               	movf	turnLeft@mR,w,c
  2193  000BA2  26D9               	addwf	fsr2l,f,c
  2194  000BA4  502E               	movf	turnLeft@mR+1,w,c
  2195  000BA6  22DA               	addwfc	fsr2h,f,c
  2196  000BA8  0E01               	movlw	1
  2197  000BAA  6EDF               	movwf	indf2,c
  2198                           
  2199                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2200  000BAC  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2201  000BB0  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2202  000BB4  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2203  000BB8  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2204  000BBC  EC5F  F005         	call	_fullSpeedAhead	;wreg free
  2205  000BC0  0012               	return		;funcret
  2206  000BC2                     __end_of_turnLeft:
  2207                           	opt stack 0
  2208                           tblptru	equ	0xFF8
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           intcon	equ	0xFF2
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           postdec2	equ	0xFDD
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _stop *****************
  2222 ;; Defined at:
  2223 ;;		line 67 in file "dc_motor.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2226 ;;		 -> main@mL(9), 
  2227 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2228 ;;		 -> main@mR(9), 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2240 ;;      Params:         4       0       0       0
  2241 ;;      Locals:         0       0       0       0
  2242 ;;      Temps:          0       0       0       0
  2243 ;;      Totals:         4       0       0       0
  2244 ;;Total ram usage:        4 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    3
  2247 ;; This function calls:
  2248 ;;		_setMotorPWM
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;;		_turnLeft
  2252 ;;		_turnRight
  2253 ;;		_ScanIR
  2254 ;;		_ScanWithRange
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text11
  2259  0008BE                     __ptext11:
  2260                           	opt stack 0
  2261  0008BE                     _stop:
  2262                           	opt stack 27
  2263                           
  2264                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2265                           
  2266                           ;incstack = 0
  2267  0008BE  D028               	goto	l2130
  2268  0008C0                     l2116:
  2269                           
  2270                           ;dc_motor.c: 71: if(mL->power>0){
  2271  0008C0  C026  FFD9         	movff	stop@mL,fsr2l
  2272  0008C4  C027  FFDA         	movff	stop@mL+1,fsr2h
  2273  0008C8  50DF               	movf	indf2,w,c
  2274  0008CA  B4D8               	btfsc	status,2,c
  2275  0008CC  D005               	goto	l2120
  2276                           
  2277                           ;dc_motor.c: 72: mL->power--;
  2278  0008CE  C026  FFD9         	movff	stop@mL,fsr2l
  2279  0008D2  C027  FFDA         	movff	stop@mL+1,fsr2h
  2280  0008D6  06DF               	decf	indf2,f,c
  2281  0008D8                     l2120:
  2282                           
  2283                           ;dc_motor.c: 73: }
  2284                           ;dc_motor.c: 74: if(mR->power>0){
  2285  0008D8  C028  FFD9         	movff	stop@mR,fsr2l
  2286  0008DC  C029  FFDA         	movff	stop@mR+1,fsr2h
  2287  0008E0  50DF               	movf	indf2,w,c
  2288  0008E2  B4D8               	btfsc	status,2,c
  2289  0008E4  D005               	goto	l2124
  2290                           
  2291                           ;dc_motor.c: 75: mR->power--;
  2292  0008E6  C028  FFD9         	movff	stop@mR,fsr2l
  2293  0008EA  C029  FFDA         	movff	stop@mR+1,fsr2h
  2294  0008EE  06DF               	decf	indf2,f,c
  2295  0008F0                     l2124:
  2296                           
  2297                           ;dc_motor.c: 76: }
  2298                           ;dc_motor.c: 77: setMotorPWM(mL);
  2299  0008F0  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2300  0008F4  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2301  0008F8  ECC5  F003         	call	_setMotorPWM	;wreg free
  2302                           
  2303                           ;dc_motor.c: 78: setMotorPWM(mR);
  2304  0008FC  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2305  000900  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2306  000904  ECC5  F003         	call	_setMotorPWM	;wreg free
  2307                           
  2308                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2309  000908  0E21               	movlw	33
  2310  00090A                     u1787:
  2311  00090A  2EE8               	decfsz	wreg,f,c
  2312  00090C  D7FE               	goto	u1787
  2313  00090E  F000               	nop	
  2314  000910                     l2130:
  2315  000910  C026  FFD9         	movff	stop@mL,fsr2l
  2316  000914  C027  FFDA         	movff	stop@mL+1,fsr2h
  2317  000918  50DF               	movf	indf2,w,c
  2318  00091A  A4D8               	btfss	status,2,c
  2319  00091C  D7D1               	goto	l2116
  2320  00091E  C028  FFD9         	movff	stop@mR,fsr2l
  2321  000922  C029  FFDA         	movff	stop@mR+1,fsr2h
  2322  000926  50DF               	movf	indf2,w,c
  2323  000928  A4D8               	btfss	status,2,c
  2324  00092A  D7CA               	goto	l2116
  2325                           
  2326                           ;dc_motor.c: 80: }
  2327                           ;dc_motor.c: 81: mL->direction=1;
  2328  00092C  EE20 F001          	lfsr	2,1
  2329  000930  5026               	movf	stop@mL,w,c
  2330  000932  26D9               	addwf	fsr2l,f,c
  2331  000934  5027               	movf	stop@mL+1,w,c
  2332  000936  22DA               	addwfc	fsr2h,f,c
  2333  000938  0E01               	movlw	1
  2334  00093A  6EDF               	movwf	indf2,c
  2335                           
  2336                           ;dc_motor.c: 82: mR->direction=1;
  2337  00093C  EE20 F001          	lfsr	2,1
  2338  000940  5028               	movf	stop@mR,w,c
  2339  000942  26D9               	addwf	fsr2l,f,c
  2340  000944  5029               	movf	stop@mR+1,w,c
  2341  000946  22DA               	addwfc	fsr2h,f,c
  2342  000948  0E01               	movlw	1
  2343  00094A  6EDF               	movwf	indf2,c
  2344  00094C  0012               	return		;funcret
  2345  00094E                     __end_of_stop:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           intcon	equ	0xFF2
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           indf2	equ	0xFDF
  2354                           postinc2	equ	0xFDE
  2355                           postdec2	equ	0xFDD
  2356                           fsr2h	equ	0xFDA
  2357                           fsr2l	equ	0xFD9
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _fullSpeedAhead *****************
  2361 ;; Defined at:
  2362 ;;		line 108 in file "dc_motor.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2365 ;;		 -> main@mL(9), 
  2366 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2367 ;;		 -> main@mR(9), 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;		None               void
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2379 ;;      Params:         4       0       0       0
  2380 ;;      Locals:         0       0       0       0
  2381 ;;      Temps:          1       0       0       0
  2382 ;;      Totals:         5       0       0       0
  2383 ;;Total ram usage:        5 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    3
  2386 ;; This function calls:
  2387 ;;		_setMotorPWM
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;;		_turnLeft
  2391 ;;		_turnRight
  2392 ;;		_fullSpeedBack
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text12
  2397  000ABE                     __ptext12:
  2398                           	opt stack 0
  2399  000ABE                     _fullSpeedAhead:
  2400                           	opt stack 26
  2401                           
  2402                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2403                           
  2404                           ;incstack = 0
  2405  000ABE  D028               	goto	l139
  2406  000AC0                     l2098:
  2407                           
  2408                           ;dc_motor.c: 112: if(mL->power<100){
  2409  000AC0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2410  000AC4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2411  000AC8  0E64               	movlw	100
  2412  000ACA  60DF               	cpfslt	indf2,c
  2413  000ACC  D005               	goto	l2102
  2414                           
  2415                           ;dc_motor.c: 113: mL->power++;
  2416  000ACE  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2417  000AD2  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2418  000AD6  2ADF               	incf	indf2,f,c
  2419  000AD8                     l2102:
  2420                           
  2421                           ;dc_motor.c: 114: }
  2422                           ;dc_motor.c: 115: if(mR->power<100){
  2423  000AD8  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2424  000ADC  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2425  000AE0  0E64               	movlw	100
  2426  000AE2  60DF               	cpfslt	indf2,c
  2427  000AE4  D005               	goto	l2106
  2428                           
  2429                           ;dc_motor.c: 116: mR->power++;
  2430  000AE6  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2431  000AEA  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2432  000AEE  2ADF               	incf	indf2,f,c
  2433  000AF0                     l2106:
  2434                           
  2435                           ;dc_motor.c: 117: }
  2436                           ;dc_motor.c: 118: setMotorPWM(mL);
  2437  000AF0  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2438  000AF4  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2439  000AF8  ECC5  F003         	call	_setMotorPWM	;wreg free
  2440                           
  2441                           ;dc_motor.c: 119: setMotorPWM(mR);
  2442  000AFC  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2443  000B00  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2444  000B04  ECC5  F003         	call	_setMotorPWM	;wreg free
  2445                           
  2446                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2447  000B08  0E21               	movlw	33
  2448  000B0A                     u1797:
  2449  000B0A  2EE8               	decfsz	wreg,f,c
  2450  000B0C  D7FE               	goto	u1797
  2451  000B0E  F000               	nop	
  2452  000B10                     l139:
  2453  000B10  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2454  000B14  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2455  000B18  0E63               	movlw	99
  2456  000B1A  64DF               	cpfsgt	indf2,c
  2457  000B1C  D7D1               	goto	l2098
  2458  000B1E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2459  000B22  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2460  000B26  0E63               	movlw	99
  2461  000B28  64DF               	cpfsgt	indf2,c
  2462  000B2A  D7CA               	goto	l2098
  2463  000B2C  0012               	return	
  2464  000B2E                     __end_of_fullSpeedAhead:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           intcon	equ	0xFF2
  2470                           postinc0	equ	0xFEE
  2471                           wreg	equ	0xFE8
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _setMotorPWM *****************
  2480 ;; Defined at:
  2481 ;;		line 26 in file "dc_motor.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2484 ;;		 -> main@mR(9), main@mL(9), 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  PWMduty         2   35[COMRAM] int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;		None               void
  2489 ;; Registers used:
  2490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         2       0       0       0
  2497 ;;      Locals:         2       0       0       0
  2498 ;;      Temps:          5       0       0       0
  2499 ;;      Totals:         9       0       0       0
  2500 ;;Total ram usage:        9 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    2
  2503 ;; This function calls:
  2504 ;;		___awdiv
  2505 ;;		___wmul
  2506 ;; This function is called by:
  2507 ;;		_stop
  2508 ;;		_fullSpeedAhead
  2509 ;;		_setMotorFullSpeed
  2510 ;;		_stopMotor
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text13
  2515  00078A                     __ptext13:
  2516                           	opt stack 0
  2517  00078A                     _setMotorPWM:
  2518                           	opt stack 27
  2519                           
  2520                           ;dc_motor.c: 28: int PWMduty;
  2521                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2522                           
  2523                           ;incstack = 0
  2524  00078A  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2525  00078E  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2526  000792  50DF               	movf	indf2,w,c
  2527  000794  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2528  000796  501F               	movf	??_setMotorPWM,w,c
  2529  000798  6E0F               	movwf	___wmul@multiplier,c
  2530  00079A  6A10               	clrf	___wmul@multiplier+1,c
  2531  00079C  EE20 F007          	lfsr	2,7
  2532  0007A0  501D               	movf	setMotorPWM@m,w,c
  2533  0007A2  26D9               	addwf	fsr2l,f,c
  2534  0007A4  501E               	movf	setMotorPWM@m+1,w,c
  2535  0007A6  22DA               	addwfc	fsr2h,f,c
  2536  0007A8  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2537  0007AC  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2538  0007B0  EC60  F006         	call	___wmul	;wreg free
  2539  0007B4  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2540  0007B8  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2541  0007BC  0E00               	movlw	0
  2542  0007BE  6E18               	movwf	___awdiv@divisor+1,c
  2543  0007C0  0E64               	movlw	100
  2544  0007C2  6E17               	movwf	___awdiv@divisor,c
  2545  0007C4  ECA7  F004         	call	___awdiv	;wreg free
  2546  0007C8  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2547  0007CC  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2548                           
  2549                           ;dc_motor.c: 32: if (m->direction)
  2550  0007D0  EE20 F001          	lfsr	2,1
  2551  0007D4  501D               	movf	setMotorPWM@m,w,c
  2552  0007D6  26D9               	addwf	fsr2l,f,c
  2553  0007D8  501E               	movf	setMotorPWM@m+1,w,c
  2554  0007DA  22DA               	addwfc	fsr2h,f,c
  2555  0007DC  50DF               	movf	indf2,w,c
  2556  0007DE  B4D8               	btfsc	status,2,c
  2557  0007E0  D02C               	goto	l2094
  2558                           
  2559                           ;dc_motor.c: 33: {
  2560                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2561  0007E2  EE20 F006          	lfsr	2,6
  2562  0007E6  501D               	movf	setMotorPWM@m,w,c
  2563  0007E8  26D9               	addwf	fsr2l,f,c
  2564  0007EA  501E               	movf	setMotorPWM@m+1,w,c
  2565  0007EC  22DA               	addwfc	fsr2h,f,c
  2566  0007EE  50DF               	movf	indf2,w,c
  2567  0007F0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2568  0007F2  0E01               	movlw	1
  2569  0007F4  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2570  0007F6  2A1F               	incf	??_setMotorPWM,f,c
  2571  0007F8  D002               	goto	u1324
  2572  0007FA                     u1325:
  2573  0007FA  90D8               	bcf	status,0,c
  2574  0007FC  3620               	rlcf	??_setMotorPWM+1,f,c
  2575  0007FE                     u1324:
  2576  0007FE  2E1F               	decfsz	??_setMotorPWM,f,c
  2577  000800  D7FC               	goto	u1325
  2578  000802  5020               	movf	??_setMotorPWM+1,w,c
  2579  000804  108A               	iorwf	3978,w,c	;volatile
  2580  000806  6E8A               	movwf	3978,c	;volatile
  2581                           
  2582                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2583  000808  EE20 F007          	lfsr	2,7
  2584  00080C  501D               	movf	setMotorPWM@m,w,c
  2585  00080E  26D9               	addwf	fsr2l,f,c
  2586  000810  501E               	movf	setMotorPWM@m+1,w,c
  2587  000812  22DA               	addwfc	fsr2h,f,c
  2588  000814  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2589  000818  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2590  00081C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2591  000820  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2592  000824  1E21               	comf	??_setMotorPWM+2,f,c
  2593  000826  1E22               	comf	??_setMotorPWM+3,f,c
  2594  000828  4A21               	infsnz	??_setMotorPWM+2,f,c
  2595  00082A  2A22               	incf	??_setMotorPWM+3,f,c
  2596  00082C  501F               	movf	??_setMotorPWM,w,c
  2597  00082E  2421               	addwf	??_setMotorPWM+2,w,c
  2598  000830  6E24               	movwf	setMotorPWM@PWMduty,c
  2599  000832  5020               	movf	??_setMotorPWM+1,w,c
  2600  000834  2022               	addwfc	??_setMotorPWM+3,w,c
  2601  000836  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2602                           
  2603                           ;dc_motor.c: 36: }
  2604  000838  D014               	goto	l109
  2605  00083A                     l2094:
  2606                           
  2607                           ;dc_motor.c: 37: else
  2608                           ;dc_motor.c: 38: {
  2609                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2610  00083A  EE20 F006          	lfsr	2,6
  2611  00083E  501D               	movf	setMotorPWM@m,w,c
  2612  000840  26D9               	addwf	fsr2l,f,c
  2613  000842  501E               	movf	setMotorPWM@m+1,w,c
  2614  000844  22DA               	addwfc	fsr2h,f,c
  2615  000846  50DF               	movf	indf2,w,c
  2616  000848  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2617  00084A  0E01               	movlw	1
  2618  00084C  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2619  00084E  2A1F               	incf	??_setMotorPWM,f,c
  2620  000850  D002               	goto	u1334
  2621  000852                     u1335:
  2622  000852  90D8               	bcf	status,0,c
  2623  000854  3620               	rlcf	??_setMotorPWM+1,f,c
  2624  000856                     u1334:
  2625  000856  2E1F               	decfsz	??_setMotorPWM,f,c
  2626  000858  D7FC               	goto	u1335
  2627  00085A  5020               	movf	??_setMotorPWM+1,w,c
  2628  00085C  0AFF               	xorlw	255
  2629  00085E  148A               	andwf	3978,w,c	;volatile
  2630  000860  6E8A               	movwf	3978,c	;volatile
  2631  000862                     l109:
  2632                           
  2633                           ;dc_motor.c: 40: }
  2634                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2635  000862  EE20 F002          	lfsr	2,2
  2636  000866  501D               	movf	setMotorPWM@m,w,c
  2637  000868  26D9               	addwf	fsr2l,f,c
  2638  00086A  501E               	movf	setMotorPWM@m+1,w,c
  2639  00086C  22DA               	addwfc	fsr2h,f,c
  2640  00086E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2641  000872  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2642  000876  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2643  00087A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2644  00087E  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2645  000880  46E8               	rlncf	wreg,f,c
  2646  000882  0BFC               	andlw	252
  2647  000884  6EDF               	movwf	indf2,c
  2648                           
  2649                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2650  000886  EE20 F004          	lfsr	2,4
  2651  00088A  501D               	movf	setMotorPWM@m,w,c
  2652  00088C  26D9               	addwf	fsr2l,f,c
  2653  00088E  501E               	movf	setMotorPWM@m+1,w,c
  2654  000890  22DA               	addwfc	fsr2h,f,c
  2655  000892  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2656  000896  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2657  00089A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2658  00089E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2659  0008A2  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2660  0008A6  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2661  0008AA  0E06               	movlw	6
  2662  0008AC  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2663  0008AE                     u1345:
  2664  0008AE  3422               	rlcf	??_setMotorPWM+3,w,c
  2665  0008B0  3222               	rrcf	??_setMotorPWM+3,f,c
  2666  0008B2  3221               	rrcf	??_setMotorPWM+2,f,c
  2667  0008B4  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2668  0008B6  D7FB               	goto	u1345
  2669  0008B8  5021               	movf	??_setMotorPWM+2,w,c
  2670  0008BA  6EDF               	movwf	indf2,c
  2671  0008BC  0012               	return		;funcret
  2672  0008BE                     __end_of_setMotorPWM:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           prodh	equ	0xFF4
  2676                           prodl	equ	0xFF3
  2677                           intcon	equ	0xFF2
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function ___wmul *****************
  2688 ;; Defined at:
  2689 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  multiplier      2   14[COMRAM] unsigned int 
  2692 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  product         2   18[COMRAM] unsigned int 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  2   14[COMRAM] unsigned int 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, prodl, prodh
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         4       0       0       0
  2705 ;;      Locals:         2       0       0       0
  2706 ;;      Temps:          0       0       0       0
  2707 ;;      Totals:         6       0       0       0
  2708 ;;Total ram usage:        6 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    1
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_setMotorPWM
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text14
  2719  000CC0                     __ptext14:
  2720                           	opt stack 0
  2721  000CC0                     ___wmul:
  2722                           	opt stack 27
  2723                           
  2724                           ;incstack = 0
  2725  000CC0  500F               	movf	___wmul@multiplier,w,c
  2726  000CC2  0211               	mulwf	___wmul@multiplicand,c
  2727  000CC4  CFF3 F013          	movff	prodl,___wmul@product
  2728  000CC8  CFF4 F014          	movff	prodh,___wmul@product+1
  2729  000CCC  500F               	movf	___wmul@multiplier,w,c
  2730  000CCE  0212               	mulwf	___wmul@multiplicand+1,c
  2731  000CD0  50F3               	movf	prodl,w,c
  2732  000CD2  2614               	addwf	___wmul@product+1,f,c
  2733  000CD4  5010               	movf	___wmul@multiplier+1,w,c
  2734  000CD6  0211               	mulwf	___wmul@multiplicand,c
  2735  000CD8  50F3               	movf	prodl,w,c
  2736  000CDA  2614               	addwf	___wmul@product+1,f,c
  2737  000CDC  C013  F00F         	movff	___wmul@product,?___wmul
  2738  000CE0  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2739  000CE4  0012               	return	
  2740  000CE6                     __end_of___wmul:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           intcon	equ	0xFF2
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           indf2	equ	0xFDF
  2749                           postinc2	equ	0xFDE
  2750                           postdec2	equ	0xFDD
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function ___awdiv *****************
  2756 ;; Defined at:
  2757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  dividend        2   20[COMRAM] int 
  2760 ;;  divisor         2   22[COMRAM] int 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  quotient        2   26[COMRAM] int 
  2763 ;;  sign            1   25[COMRAM] unsigned char 
  2764 ;;  counter         1   24[COMRAM] unsigned char 
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  2   20[COMRAM] int 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2774 ;;      Params:         4       0       0       0
  2775 ;;      Locals:         4       0       0       0
  2776 ;;      Temps:          0       0       0       0
  2777 ;;      Totals:         8       0       0       0
  2778 ;;Total ram usage:        8 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    1
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_setMotorPWM
  2785 ;;		_ScanWithRange
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text15
  2790  00094E                     __ptext15:
  2791                           	opt stack 0
  2792  00094E                     ___awdiv:
  2793                           	opt stack 27
  2794                           
  2795                           ;incstack = 0
  2796  00094E  0E00               	movlw	0
  2797  000950  6E1A               	movwf	___awdiv@sign,c
  2798  000952  AE18               	btfss	___awdiv@divisor+1,7,c
  2799  000954  D006               	goto	l2052
  2800  000956  6C17               	negf	___awdiv@divisor,c
  2801  000958  1E18               	comf	___awdiv@divisor+1,f,c
  2802  00095A  B0D8               	btfsc	status,0,c
  2803  00095C  2A18               	incf	___awdiv@divisor+1,f,c
  2804  00095E  0E01               	movlw	1
  2805  000960  6E1A               	movwf	___awdiv@sign,c
  2806  000962                     l2052:
  2807  000962  AE16               	btfss	___awdiv@dividend+1,7,c
  2808  000964  D006               	goto	l2058
  2809  000966  6C15               	negf	___awdiv@dividend,c
  2810  000968  1E16               	comf	___awdiv@dividend+1,f,c
  2811  00096A  B0D8               	btfsc	status,0,c
  2812  00096C  2A16               	incf	___awdiv@dividend+1,f,c
  2813  00096E  0E01               	movlw	1
  2814  000970  1A1A               	xorwf	___awdiv@sign,f,c
  2815  000972                     l2058:
  2816  000972  0E00               	movlw	0
  2817  000974  6E1C               	movwf	___awdiv@quotient+1,c
  2818  000976  0E00               	movlw	0
  2819  000978  6E1B               	movwf	___awdiv@quotient,c
  2820  00097A  5017               	movf	___awdiv@divisor,w,c
  2821  00097C  1018               	iorwf	___awdiv@divisor+1,w,c
  2822  00097E  B4D8               	btfsc	status,2,c
  2823  000980  D01C               	goto	l2080
  2824  000982  0E01               	movlw	1
  2825  000984  6E19               	movwf	___awdiv@counter,c
  2826  000986  D004               	goto	l2066
  2827  000988                     l2064:
  2828  000988  90D8               	bcf	status,0,c
  2829  00098A  3617               	rlcf	___awdiv@divisor,f,c
  2830  00098C  3618               	rlcf	___awdiv@divisor+1,f,c
  2831  00098E  2A19               	incf	___awdiv@counter,f,c
  2832  000990                     l2066:
  2833  000990  AE18               	btfss	___awdiv@divisor+1,7,c
  2834  000992  D7FA               	goto	l2064
  2835  000994                     l2068:
  2836  000994  90D8               	bcf	status,0,c
  2837  000996  361B               	rlcf	___awdiv@quotient,f,c
  2838  000998  361C               	rlcf	___awdiv@quotient+1,f,c
  2839  00099A  5017               	movf	___awdiv@divisor,w,c
  2840  00099C  5C15               	subwf	___awdiv@dividend,w,c
  2841  00099E  5018               	movf	___awdiv@divisor+1,w,c
  2842  0009A0  5816               	subwfb	___awdiv@dividend+1,w,c
  2843  0009A2  A0D8               	btfss	status,0,c
  2844  0009A4  D005               	goto	l2076
  2845  0009A6  5017               	movf	___awdiv@divisor,w,c
  2846  0009A8  5E15               	subwf	___awdiv@dividend,f,c
  2847  0009AA  5018               	movf	___awdiv@divisor+1,w,c
  2848  0009AC  5A16               	subwfb	___awdiv@dividend+1,f,c
  2849  0009AE  801B               	bsf	___awdiv@quotient,0,c
  2850  0009B0                     l2076:
  2851  0009B0  90D8               	bcf	status,0,c
  2852  0009B2  3218               	rrcf	___awdiv@divisor+1,f,c
  2853  0009B4  3217               	rrcf	___awdiv@divisor,f,c
  2854  0009B6  2E19               	decfsz	___awdiv@counter,f,c
  2855  0009B8  D7ED               	goto	l2068
  2856  0009BA                     l2080:
  2857  0009BA  501A               	movf	___awdiv@sign,w,c
  2858  0009BC  B4D8               	btfsc	status,2,c
  2859  0009BE  D004               	goto	l2084
  2860  0009C0  6C1B               	negf	___awdiv@quotient,c
  2861  0009C2  1E1C               	comf	___awdiv@quotient+1,f,c
  2862  0009C4  B0D8               	btfsc	status,0,c
  2863  0009C6  2A1C               	incf	___awdiv@quotient+1,f,c
  2864  0009C8                     l2084:
  2865  0009C8  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2866  0009CC  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2867  0009D0  0012               	return	
  2868  0009D2                     __end_of___awdiv:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           postdec2	equ	0xFDD
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _grabRightIR *****************
  2884 ;; Defined at:
  2885 ;;		line 74 in file "IR_Reading.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  IR_signal       2   19[COMRAM] unsigned int 
  2890 ;;  i               1   21[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2   14[COMRAM] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2900 ;;      Params:         2       0       0       0
  2901 ;;      Locals:         3       0       0       0
  2902 ;;      Temps:          3       0       0       0
  2903 ;;      Totals:         8       0       0       0
  2904 ;;Total ram usage:        8 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    1
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_ScanIR
  2911 ;;		_ScanWithRange
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text16
  2916  0009D2                     __ptext16:
  2917                           	opt stack 0
  2918  0009D2                     _grabRightIR:
  2919                           	opt stack 28
  2920                           
  2921                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  2922                           
  2923                           ;incstack = 0
  2924  0009D2  0E00               	movlw	0
  2925  0009D4  6E15               	movwf	grabRightIR@IR_signal+1,c
  2926  0009D6  0E00               	movlw	0
  2927  0009D8  6E14               	movwf	grabRightIR@IR_signal,c
  2928                           
  2929                           ;IR_Reading.c: 77: unsigned char i=0;
  2930  0009DA  0E00               	movlw	0
  2931  0009DC  6E16               	movwf	grabRightIR@i,c
  2932                           
  2933                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  2934  0009DE  0E00               	movlw	0
  2935  0009E0  6E16               	movwf	grabRightIR@i,c
  2936  0009E2                     l2182:
  2937  0009E2  0E03               	movlw	3
  2938  0009E4  6416               	cpfsgt	grabRightIR@i,c
  2939  0009E6  D001               	goto	l2186
  2940  0009E8  D020               	goto	l2192
  2941  0009EA                     l2186:
  2942                           
  2943                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  2944  0009EA  5069               	movf	3945,w,c	;volatile
  2945  0009EC  6E11               	movwf	??_grabRightIR& (0+255),c
  2946  0009EE  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  2947  0009F0  0E06               	movlw	6
  2948  0009F2                     u1525:
  2949  0009F2  90D8               	bcf	status,0,c
  2950  0009F4  3611               	rlcf	??_grabRightIR,f,c
  2951  0009F6  3612               	rlcf	??_grabRightIR+1,f,c
  2952  0009F8  2EE8               	decfsz	wreg,f,c
  2953  0009FA  D7FB               	goto	u1525
  2954  0009FC  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  2955  000A00  90D8               	bcf	status,0,c
  2956  000A02  3213               	rrcf	??_grabRightIR+2,f,c
  2957  000A04  90D8               	bcf	status,0,c
  2958  000A06  3213               	rrcf	??_grabRightIR+2,f,c
  2959  000A08  5013               	movf	??_grabRightIR+2,w,c
  2960  000A0A  1211               	iorwf	??_grabRightIR,f,c
  2961  000A0C  0E00               	movlw	0
  2962  000A0E  1212               	iorwf	??_grabRightIR+1,f,c
  2963  000A10  5011               	movf	??_grabRightIR,w,c
  2964  000A12  2614               	addwf	grabRightIR@IR_signal,f,c
  2965  000A14  5012               	movf	??_grabRightIR+1,w,c
  2966  000A16  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  2967                           
  2968                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  2969  000A18  0E82               	movlw	130
  2970  000A1A  6E11               	movwf	??_grabRightIR& (0+255),c
  2971  000A1C  0EDE               	movlw	222
  2972  000A1E                     u1807:
  2973  000A1E  2EE8               	decfsz	wreg,f,c
  2974  000A20  D7FE               	goto	u1807
  2975  000A22  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  2976  000A24  D7FC               	goto	u1807
  2977  000A26  2A16               	incf	grabRightIR@i,f,c
  2978  000A28  D7DC               	goto	l2182
  2979  000A2A                     l2192:
  2980                           
  2981                           ;IR_Reading.c: 83: }
  2982                           ;IR_Reading.c: 85: return IR_signal>>2;
  2983  000A2A  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  2984  000A2E  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  2985  000A32  90D8               	bcf	status,0,c
  2986  000A34  3212               	rrcf	??_grabRightIR+1,f,c
  2987  000A36  3211               	rrcf	??_grabRightIR,f,c
  2988  000A38  90D8               	bcf	status,0,c
  2989  000A3A  3212               	rrcf	??_grabRightIR+1,f,c
  2990  000A3C  3211               	rrcf	??_grabRightIR,f,c
  2991  000A3E  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  2992  000A42  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  2993  000A46  0012               	return	
  2994  000A48                     __end_of_grabRightIR:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           indf2	equ	0xFDF
  3003                           postinc2	equ	0xFDE
  3004                           postdec2	equ	0xFDD
  3005                           fsr2h	equ	0xFDA
  3006                           fsr2l	equ	0xFD9
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function _grabLeftIR *****************
  3010 ;; Defined at:
  3011 ;;		line 90 in file "IR_Reading.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3016 ;;  i               1   21[COMRAM] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  2   14[COMRAM] unsigned int 
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3026 ;;      Params:         2       0       0       0
  3027 ;;      Locals:         3       0       0       0
  3028 ;;      Temps:          3       0       0       0
  3029 ;;      Totals:         8       0       0       0
  3030 ;;Total ram usage:        8 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_ScanIR
  3037 ;;		_ScanWithRange
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text17
  3042  000A48                     __ptext17:
  3043                           	opt stack 0
  3044  000A48                     _grabLeftIR:
  3045                           	opt stack 28
  3046                           
  3047                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3048                           
  3049                           ;incstack = 0
  3050  000A48  0E00               	movlw	0
  3051  000A4A  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3052  000A4C  0E00               	movlw	0
  3053  000A4E  6E14               	movwf	grabLeftIR@IR_signal,c
  3054                           
  3055                           ;IR_Reading.c: 93: unsigned char i=0;
  3056  000A50  0E00               	movlw	0
  3057  000A52  6E16               	movwf	grabLeftIR@i,c
  3058                           
  3059                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3060  000A54  0E00               	movlw	0
  3061  000A56  6E16               	movwf	grabLeftIR@i,c
  3062  000A58                     l2166:
  3063  000A58  0E03               	movlw	3
  3064  000A5A  6416               	cpfsgt	grabLeftIR@i,c
  3065  000A5C  D001               	goto	l2170
  3066  000A5E  D020               	goto	l2176
  3067  000A60                     l2170:
  3068                           
  3069                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3070  000A60  5067               	movf	3943,w,c	;volatile
  3071  000A62  6E11               	movwf	??_grabLeftIR& (0+255),c
  3072  000A64  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3073  000A66  0E06               	movlw	6
  3074  000A68                     u1495:
  3075  000A68  90D8               	bcf	status,0,c
  3076  000A6A  3611               	rlcf	??_grabLeftIR,f,c
  3077  000A6C  3612               	rlcf	??_grabLeftIR+1,f,c
  3078  000A6E  2EE8               	decfsz	wreg,f,c
  3079  000A70  D7FB               	goto	u1495
  3080  000A72  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3081  000A76  90D8               	bcf	status,0,c
  3082  000A78  3213               	rrcf	??_grabLeftIR+2,f,c
  3083  000A7A  90D8               	bcf	status,0,c
  3084  000A7C  3213               	rrcf	??_grabLeftIR+2,f,c
  3085  000A7E  5013               	movf	??_grabLeftIR+2,w,c
  3086  000A80  1211               	iorwf	??_grabLeftIR,f,c
  3087  000A82  0E00               	movlw	0
  3088  000A84  1212               	iorwf	??_grabLeftIR+1,f,c
  3089  000A86  5011               	movf	??_grabLeftIR,w,c
  3090  000A88  2614               	addwf	grabLeftIR@IR_signal,f,c
  3091  000A8A  5012               	movf	??_grabLeftIR+1,w,c
  3092  000A8C  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3093                           
  3094                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3095  000A8E  0E82               	movlw	130
  3096  000A90  6E11               	movwf	??_grabLeftIR& (0+255),c
  3097  000A92  0EDE               	movlw	222
  3098  000A94                     u1817:
  3099  000A94  2EE8               	decfsz	wreg,f,c
  3100  000A96  D7FE               	goto	u1817
  3101  000A98  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3102  000A9A  D7FC               	goto	u1817
  3103  000A9C  2A16               	incf	grabLeftIR@i,f,c
  3104  000A9E  D7DC               	goto	l2166
  3105  000AA0                     l2176:
  3106                           
  3107                           ;IR_Reading.c: 99: }
  3108                           ;IR_Reading.c: 101: return IR_signal>>2;
  3109  000AA0  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3110  000AA4  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3111  000AA8  90D8               	bcf	status,0,c
  3112  000AAA  3212               	rrcf	??_grabLeftIR+1,f,c
  3113  000AAC  3211               	rrcf	??_grabLeftIR,f,c
  3114  000AAE  90D8               	bcf	status,0,c
  3115  000AB0  3212               	rrcf	??_grabLeftIR+1,f,c
  3116  000AB2  3211               	rrcf	??_grabLeftIR,f,c
  3117  000AB4  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3118  000AB8  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3119  000ABC  0012               	return	
  3120  000ABE                     __end_of_grabLeftIR:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function _delay_tenth_s *****************
  3136 ;; Defined at:
  3137 ;;		line 19 in file "Movement.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  tenth_second    1    wreg     unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3142 ;;  i               2   16[COMRAM] unsigned int 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;		None               void
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3152 ;;      Params:         0       0       0       0
  3153 ;;      Locals:         3       0       0       0
  3154 ;;      Temps:          1       0       0       0
  3155 ;;      Totals:         4       0       0       0
  3156 ;;Total ram usage:        4 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_ScanIR
  3163 ;;		_ScanWithRange
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text18
  3168  000BFA                     __ptext18:
  3169                           	opt stack 0
  3170  000BFA                     _delay_tenth_s:
  3171                           	opt stack 28
  3172                           
  3173                           ;incstack = 0
  3174                           ;delay_tenth_s@tenth_seconds stored from wreg
  3175  000BFA  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3176                           
  3177                           ;Movement.c: 20: unsigned int i=0;
  3178  000BFC  0E00               	movlw	0
  3179  000BFE  6E12               	movwf	delay_tenth_s@i+1,c
  3180  000C00  0E00               	movlw	0
  3181  000C02  6E11               	movwf	delay_tenth_s@i,c
  3182                           
  3183                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3184  000C04  0E00               	movlw	0
  3185  000C06  6E12               	movwf	delay_tenth_s@i+1,c
  3186  000C08  0E01               	movlw	1
  3187  000C0A  6E11               	movwf	delay_tenth_s@i,c
  3188  000C0C  D009               	goto	l2162
  3189  000C0E                     l2158:
  3190                           
  3191                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3192  000C0E  0E82               	movlw	130
  3193  000C10  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3194  000C12  0EDE               	movlw	222
  3195  000C14                     u1827:
  3196  000C14  2EE8               	decfsz	wreg,f,c
  3197  000C16  D7FE               	goto	u1827
  3198  000C18  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3199  000C1A  D7FC               	goto	u1827
  3200  000C1C  4A11               	infsnz	delay_tenth_s@i,f,c
  3201  000C1E  2A12               	incf	delay_tenth_s@i+1,f,c
  3202  000C20                     l2162:
  3203  000C20  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3204  000C22  0D02               	mullw	2
  3205  000C24  5011               	movf	delay_tenth_s@i,w,c
  3206  000C26  5CF3               	subwf	prodl,w,c
  3207  000C28  5012               	movf	delay_tenth_s@i+1,w,c
  3208  000C2A  58F4               	subwfb	prodh,w,c
  3209  000C2C  A0D8               	btfss	status,0,c
  3210  000C2E  0012               	return	
  3211  000C30  D7EE               	goto	l2158
  3212  000C32                     __end_of_delay_tenth_s:
  3213                           	opt stack 0
  3214                           tblptru	equ	0xFF8
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           intcon	equ	0xFF2
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           indf2	equ	0xFDF
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _InterruptHandlerHigh *****************
  3228 ;; Defined at:
  3229 ;;		line 16 in file "main.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;		None               void
  3236 ;; Registers used:
  3237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3243 ;;      Params:         0       0       0       0
  3244 ;;      Locals:         0       0       0       0
  3245 ;;      Temps:         14       0       0       0
  3246 ;;      Totals:        14       0       0       0
  3247 ;;Total ram usage:       14 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		Interrupt level 2
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           	psect	intcode
  3257  000008                     __pintcode:
  3258                           	opt stack 0
  3259  000008                     _InterruptHandlerHigh:
  3260                           	opt stack 25
  3261                           
  3262                           ;incstack = 0
  3263  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3264  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3265  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3266  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3267  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3268  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3269  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3270  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3271  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3272  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3273  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3274  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3275  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3276  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3277  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3278                           
  3279                           ;main.c: 18: if (PIR1bits.RCIF) {
  3280  000042  AA9E               	btfss	3998,5,c	;volatile
  3281  000044  D013               	goto	i2l54
  3282                           
  3283                           ;main.c: 19: ReceivedString[i]=RCREG;
  3284  000046  504B               	movf	_i,w,c	;volatile
  3285  000048  0D01               	mullw	1
  3286  00004A  0E3B               	movlw	low _ReceivedString
  3287  00004C  24F3               	addwf	prodl,w,c
  3288  00004E  6ED9               	movwf	fsr2l,c
  3289  000050  0E00               	movlw	high _ReceivedString
  3290  000052  20F4               	addwfc	prodh,w,c
  3291  000054  6EDA               	movwf	fsr2h,c
  3292  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3293                           
  3294                           ;main.c: 20: if (i==15){
  3295  00005A  0E0F               	movlw	15
  3296  00005C  184B               	xorwf	_i,w,c	;volatile
  3297  00005E  A4D8               	btfss	status,2,c
  3298  000060  D003               	goto	i2l1390
  3299                           
  3300                           ;main.c: 21: i=0;
  3301  000062  0E00               	movlw	0
  3302  000064  6E4B               	movwf	_i,c	;volatile
  3303                           
  3304                           ;main.c: 22: }else{
  3305  000066  D001               	goto	i2l1392
  3306  000068                     i2l1390:
  3307                           
  3308                           ;main.c: 23: i++;
  3309  000068  2A4B               	incf	_i,f,c	;volatile
  3310  00006A                     i2l1392:
  3311                           
  3312                           ;main.c: 24: }
  3313                           ;main.c: 25: PIR1bits.RCIF=0;
  3314  00006A  9A9E               	bcf	3998,5,c	;volatile
  3315  00006C                     i2l54:
  3316  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3317  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3318  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3319  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3320  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3321  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3322  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3323  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3324  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3325  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3326  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3327  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3328  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3329  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3330  0000A4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3331  0000A6  0011               	retfie		f
  3332  0000A8                     __end_of_InterruptHandlerHigh:
  3333                           	opt stack 0
  3334  0000                     pclatu	equ	0xFFB
  3335                           pclath	equ	0xFFA
  3336                           tblptru	equ	0xFF8
  3337                           tblptrh	equ	0xFF7
  3338                           tblptrl	equ	0xFF6
  3339                           tablat	equ	0xFF5
  3340                           prodh	equ	0xFF4
  3341                           prodl	equ	0xFF3
  3342                           intcon	equ	0xFF2
  3343                           postinc0	equ	0xFEE
  3344                           fsr0h	equ	0xFEA
  3345                           fsr0l	equ	0xFE9
  3346                           wreg	equ	0xFE8
  3347                           fsr1h	equ	0xFE2
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           pclatu	equ	0xFFB
  3356                           pclath	equ	0xFFA
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           fsr0h	equ	0xFEA
  3366                           fsr0l	equ	0xFE9
  3367                           wreg	equ	0xFE8
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377                           	psect	rparam
  3378  0000                     pclatu	equ	0xFFB
  3379                           pclath	equ	0xFFA
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           postinc0	equ	0xFEE
  3388                           fsr0h	equ	0xFEA
  3389                           fsr0l	equ	0xFE9
  3390                           wreg	equ	0xFE8
  3391                           fsr1h	equ	0xFE2
  3392                           fsr1l	equ	0xFE1
  3393                           indf2	equ	0xFDF
  3394                           postinc2	equ	0xFDE
  3395                           postdec2	equ	0xFDD
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400                           	psect	temp
  3401  00004C                     btemp:
  3402                           	opt stack 0
  3403  00004C                     	ds	1
  3404  0000                     int$flags	set	btemp
  3405                           pclatu	equ	0xFFB
  3406                           pclath	equ	0xFFA
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon	equ	0xFF2
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      75
    BANK0           160     38      38
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   66884
                                             14 BANK0     24    24      0
                             _ScanIR
                      _ScanWithRange
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3168
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       21    16      5   28366
                                             46 COMRAM     7     2      5
                                              0 BANK0     14    14      0
                            ___awdiv
                      _delay_tenth_s
                       _enableSensor
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     586
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              12     8      4   25307
                                             46 COMRAM    12     8      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8954
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    9570
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    5416
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2890
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2026
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     869
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _enableSensor
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     26      26       4       23.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4B       1       79.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      71       5        0.0%
DATA                 0      0      71      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 16:45:25 2018

                        ?_grabRightIR 000F                                     _i 004B  
                                  l57 0534                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                                   l109 0862  
                                 l139 0B10                           grabLeftIR@i 0016  
                                 prod 000FF3                                   wreg 000FE8  
                                l2102 0AD8                                  l2120 08D8  
                                l2106 0AF0                                  l2130 0910  
                                l2052 0962                                  l2124 08F0  
                                l2116 08C0                                  l2140 0CAE  
                                l2064 0988                                  l2080 09BA  
                                l2240 01F6                                  l2162 0C20  
                                l2170 0A60                                  l2066 0990  
                                l2058 0972                                  l2084 09C8  
                                l2076 09B0                                  l2068 0994  
                                l2324 042A                                  l2308 03B8  
                                l2252 022C                                  l2158 0C0E  
                                l2166 0A58                                  l2182 09E2  
                                l2094 083A                                  l2318 0426  
                                l2246 0228                                  l2422 053A  
                                l2176 0AA0                                  l2192 0A2A  
                                l2280 032A                                  l2272 0314  
                                l2256 0288                                  l2186 09EA  
                                l2098 0AC0                                  l2362 06CE  
                                l2338 0494                                  l2450 05FE  
                                l2442 05B8                                  l2356 06CA  
                                l2268 02B8                                  l2294 0374  
                                l2454 060C                                  l2446 05DC  
                                l2376 071E                                  l2288 0370  
                                l1752 0BD6                                  l2394 0786  
                                l2458 0618                                  l2388 076E  
                                l1756 0BE8                                  u1324 07FE  
                                u1325 07FA                                  u1334 0856  
                                _LATB 000F8A                                  u1335 0852  
                                u1345 08AE                                  u1525 09F2  
                                u1445 0CAA                                  u1446 0CAC  
                                u1465 0CBC                                  u1466 0CBE  
                                u1495 0A68                                  u1807 0A1E  
                                u1817 0A94                                  u1827 0C14  
                                u1777 0BDC                                  u1787 090A  
                                u1797 0B0A                                  i2l54 006C  
                                _main 0498                         main@ScanAngle 0071  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 004C  
                                _stop 08BE                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 09D2                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                         _initRFID$1294 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 0BFA  
                               main@i 0070                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 03EC  
                     __initialization 0D28                          __end_of_main 0632  
                        __end_of_stop 094E                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 0CC0  
                              ??_main 003B                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                        ?_setMotorPWM 001D                __size_of_fullSpeedBack 0036  
                    ___awdiv@dividend 0015                                i2l1390 0068  
                              i2l1392 006A                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 0C32                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B                                _ScanIR 0632  
                              ___wmul 0CC0                             ??___awdiv 0019  
                    __end_of_initRFID 0D28                                _initIR 0CE6  
                __size_of_grabRightIR 0076                                clear_0 0D2E  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                              main@mL 0074                                main@mR 007D  
                      ??_initMotorPWM 000F                         _ScanWithRange 00AC  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0BC2  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 0D34  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 0C32                        ?_ScanWithRange 002F  
       __size_of_InterruptHandlerHigh 00A0            delay_tenth_s@tenth_seconds 0010  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 0A48  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                        _enableSensor 0C9A                    __size_of_turnRight 004A  
                __end_of_initMotorPWM 0C9A                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 0158  
                             ___awdiv 094E                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 0D28  
                     ??_ScanWithRange 0034                               _delay_s 0BC2  
                             __ramtop 0300                             ?_turnLeft 002B  
                             __ptext0 0498                               __ptext1 0D08  
                             __ptext2 0C68                               __ptext3 0CE6  
                             __ptext4 0C32                               __ptext5 0BC2  
                             __ptext6 00AC                               __ptext7 0C9A  
                             __ptext8 0632                               __ptext9 0B2E  
                end_of_initialization 0D34                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                  ScanIR@SensorResult 0037                       ??_fullSpeedBack 002F  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0B78  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0035                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 078A  
                      _fullSpeedAhead 0ABE                        _ReceivedString 003B  
                      __end_of___wmul 0CE6                           _BAUDCONbits 000FAA  
                      __end_of_initIR 0D08                __size_of_delay_tenth_s 0038  
                 start_initialization 0D28                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00A8                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 0B2E                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 0A48                          _initMotorPWM 0C68  
                         __pbssCOMRAM 003B                         __pcstackBANK0 0060  
                       _delay_tenth_s 0BFA                     __size_of_initRFID 0020  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                            ?___awdiv 0015                              ?_delay_s 0001  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                   __size_of_turnLeft 004A            ScanWithRange@SensorResultC 0064  
          ScanWithRange@SensorResultL 0060            ScanWithRange@SensorResultR 0068  
                       ??_setMotorPWM 001F                        ?_delay_tenth_s 0001  
                      ___wmul@product 0013                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 002B  
                         turnRight@mR 002D                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                           _grabRightIR 09D2  
                grabRightIR@IR_signal 0014                     ___wmul@multiplier 000F  
               __end_of_ScanWithRange 0498                          setMotorPWM@m 001D  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 0B2E                   __end_of_setMotorPWM 08BE  
                            __Hrparam 0000                              __Lrparam 0000  
               __end_of_fullSpeedBack 0C68                    __end_of_grabLeftIR 0ABE  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                          ?_turnRight 002B                              __ptext10 0B78  
                            __ptext11 08BE                              __ptext12 0ABE  
                            __ptext13 078A                              __ptext14 0CC0  
                            __ptext15 094E                              __ptext16 09D2  
                            __ptext17 0A48                              __ptext18 0BFA  
                     ??_delay_tenth_s 000F                              _initRFID 0D08  
                       __size_of_main 019A                    main@DirectionFound 0073  
                       __size_of_stop 0090                            turnLeft@mL 002B  
                          turnLeft@mR 002D                              delay_s@i 0011  
                            int$flags 004C                              main@mode 0072  
                            main@test 006E                              _turnLeft 0B78  
                     ScanWithRange@mL 002F                       ScanWithRange@mR 0031  
                  enableSensor@sensor 0010                    enableSensor@status 000F  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 078A                              intlevel2 0000  
                       ?_enableSensor 000F                      ??_fullSpeedAhead 002A  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundTolerance 006C  
              ??_InterruptHandlerHigh 0001                           ??_turnRight 002F  
                      ??_enableSensor 0010  
