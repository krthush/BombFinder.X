

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 22:32:27 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     _CAP1BUFH	set	3945
    35  0000                     _CAP1BUFL	set	3944
    36  0000                     _CAP1CON	set	3939
    37  0000                     _CAP2BUFH	set	3943
    38  0000                     _CAP2BUFL	set	3942
    39  0000                     _CAP2CON	set	3938
    40  0000                     _LATAbits	set	3977
    41  0000                     _LATB	set	3978
    42  0000                     _LATCbits	set	3979
    43  0000                     _LATDbits	set	3980
    44  0000                     _LATEbits	set	3981
    45  0000                     _PTCON0	set	3967
    46  0000                     _PTCON1	set	3966
    47  0000                     _PTPERH	set	3962
    48  0000                     _PTPERL	set	3963
    49  0000                     _PWMCON0	set	3951
    50  0000                     _PWMCON1	set	3950
    51  0000                     _TRISAbits	set	3986
    52  0000                     _TRISBbits	set	3987
    53  0000                     _TRISC	set	3988
    54  0000                     _TRISCbits	set	3988
    55  0000                     _TRISDbits	set	3989
    56  0000                     _TRISEbits	set	3990
    57  0000                     _PDC0H	set	3960
    58  0000                     _PDC0L	set	3961
    59  0000                     _PDC1H	set	3958
    60  0000                     _PDC1L	set	3959
    61  0000                     _ANSEL0bits	set	4024
    62  0000                     _BAUDCONbits	set	4010
    63  0000                     _IPR1bits	set	3999
    64  0000                     _OSCCON	set	4051
    65  0000                     _OSCCONbits	set	4051
    66  0000                     _PIE1bits	set	3997
    67  0000                     _PIR1bits	set	3998
    68  0000                     _RCONbits	set	4048
    69  0000                     _RCREG	set	4014
    70  0000                     _RCSTAbits	set	4011
    71  0000                     _SPBRG	set	4015
    72  0000                     _SPBRGH	set	4016
    73  0000                     _T5CON	set	4023
    74  0000                     _TXREG	set	4013
    75  0000                     _TXSTAbits	set	4012
    76  0000                     _INTCONbits	set	4082
    77                           
    78                           ; #config settings
    79  0000                     
    80                           	psect	cinit
    81  001088                     __pcinit:
    82                           	opt stack 0
    83  001088                     start_initialization:
    84                           	opt stack 0
    85  001088                     __initialization:
    86                           	opt stack 0
    87                           
    88                           ; Clear objects allocated to BANK0 (17 bytes)
    89  001088  EE00  F082         	lfsr	0,__pbssBANK0
    90  00108C  0E11               	movlw	17
    91  00108E                     clear_0:
    92  00108E  6AEE               	clrf	postinc0,c
    93  001090  06E8               	decf	wreg,f,c
    94  001092  E1FD               	bnz	clear_0
    95                           
    96                           ; Clear objects allocated to COMRAM (1 bytes)
    97  001094  6A4D               	clrf	__pbssCOMRAM& (0+255),c
    98  001096                     end_of_initialization:
    99                           	opt stack 0
   100  001096                     __end_of__initialization:
   101                           	opt stack 0
   102  001096  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   103  001098  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   104  00109A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  00109C  6EF8               	movwf	tblptru,c
   106  00109E  0100               	movlb	0
   107  0010A0  EFA9  F002         	goto	_main	;jump to C main() function
   108                           tblptru	equ	0xFF8
   109                           postinc0	equ	0xFEE
   110                           wreg	equ	0xFE8
   111                           
   112                           	psect	bssCOMRAM
   113  00004D                     __pbssCOMRAM:
   114                           	opt stack 0
   115  00004D                     _i:
   116                           	opt stack 0
   117  00004D                     	ds	1
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	bssBANK0
   123  000082                     __pbssBANK0:
   124                           	opt stack 0
   125  000082                     _RFID_Read:
   126                           	opt stack 0
   127  000082                     	ds	1
   128  000083                     _ReceivedString:
   129                           	opt stack 0
   130  000083                     	ds	16
   131                           tblptru	equ	0xFF8
   132                           postinc0	equ	0xFEE
   133                           wreg	equ	0xFE8
   134                           
   135                           	psect	cstackBANK0
   136  000060                     __pcstackBANK0:
   137                           	opt stack 0
   138  000060                     main@Message:
   139                           	opt stack 0
   140                           
   141                           ; 10 bytes @ 0x0
   142  000060                     	ds	10
   143  00006A                     main@test:
   144                           	opt stack 0
   145                           
   146                           ; 2 bytes @ 0xA
   147  00006A                     	ds	2
   148  00006C                     main@mode:
   149                           	opt stack 0
   150                           
   151                           ; 1 bytes @ 0xC
   152  00006C                     	ds	1
   153  00006D                     main@ScanAngle:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0xD
   157  00006D                     	ds	1
   158  00006E                     main@DirectionFound:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0xE
   162  00006E                     	ds	1
   163  00006F                     main@i:
   164                           	opt stack 0
   165                           
   166                           ; 1 bytes @ 0xF
   167  00006F                     	ds	1
   168  000070                     main@mL:
   169                           	opt stack 0
   170                           
   171                           ; 9 bytes @ 0x10
   172  000070                     	ds	9
   173  000079                     main@mR:
   174                           	opt stack 0
   175                           
   176                           ; 9 bytes @ 0x19
   177  000079                     	ds	9
   178                           tblptru	equ	0xFF8
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	cstackCOMRAM
   183  000001                     __pcstackCOMRAM:
   184                           	opt stack 0
   185  000001                     ??_InterruptHandlerHigh:
   186  000001                     
   187                           ; 0 bytes @ 0x0
   188  000001                     	ds	14
   189  00000F                     ??_delay_s:
   190  00000F                     ??_delay_tenth_s:
   191  00000F                     ?_grabLeftIR:
   192                           	opt stack 0
   193  00000F                     ?_grabRightIR:
   194                           	opt stack 0
   195  00000F                     ?___wmul:
   196                           	opt stack 0
   197  00000F                     _initRFID$1305:
   198                           	opt stack 0
   199  00000F                     enableSensor@status:
   200                           	opt stack 0
   201  00000F                     VerifySignal@Signal:
   202                           	opt stack 0
   203  00000F                     ___wmul@multiplier:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0xE
   207  00000F                     	ds	1
   208  000010                     delay_s@seconds:
   209                           	opt stack 0
   210  000010                     delay_tenth_s@tenth_seconds:
   211                           	opt stack 0
   212  000010                     enableSensor@sensor:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0xF
   216  000010                     	ds	1
   217  000011                     ??_VerifySignal:
   218  000011                     ??_grabLeftIR:
   219  000011                     ??_grabRightIR:
   220  000011                     delay_s@i:
   221                           	opt stack 0
   222  000011                     delay_tenth_s@i:
   223                           	opt stack 0
   224  000011                     ___wmul@multiplicand:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x10
   228  000011                     	ds	2
   229  000013                     ___wmul@product:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x12
   233  000013                     	ds	1
   234  000014                     grabRightIR@IR_signal:
   235                           	opt stack 0
   236  000014                     grabLeftIR@IR_signal:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x13
   240  000014                     	ds	1
   241  000015                     ?___awdiv:
   242                           	opt stack 0
   243  000015                     ___awdiv@dividend:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x14
   247  000015                     	ds	1
   248  000016                     grabRightIR@i:
   249                           	opt stack 0
   250  000016                     grabLeftIR@i:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x15
   254  000016                     	ds	1
   255  000017                     VerifySignal@checksum:
   256                           	opt stack 0
   257  000017                     ___awdiv@divisor:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x16
   261  000017                     	ds	1
   262  000018                     VerifySignal@hexByte:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x17
   266  000018                     	ds	1
   267  000019                     ___awdiv@counter:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x18
   271  000019                     	ds	1
   272  00001A                     VerifySignal@i:
   273                           	opt stack 0
   274  00001A                     ___awdiv@sign:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x19
   278  00001A                     	ds	1
   279  00001B                     ___awdiv@quotient:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x1A
   283  00001B                     	ds	2
   284  00001D                     setMotorPWM@m:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x1C
   288  00001D                     	ds	2
   289  00001F                     ??_setMotorPWM:
   290                           
   291                           ; 0 bytes @ 0x1E
   292  00001F                     	ds	5
   293  000024                     setMotorPWM@PWMduty:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x23
   297  000024                     	ds	2
   298  000026                     stop@mL:
   299                           	opt stack 0
   300  000026                     fullSpeedAhead@mL:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x25
   304  000026                     	ds	2
   305  000028                     stop@mR:
   306                           	opt stack 0
   307  000028                     fullSpeedAhead@mR:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x27
   311  000028                     	ds	2
   312  00002A                     
   313                           ; 0 bytes @ 0x29
   314  00002A                     	ds	1
   315  00002B                     turnLeft@mL:
   316                           	opt stack 0
   317  00002B                     turnRight@mL:
   318                           	opt stack 0
   319  00002B                     fullSpeedBack@mL:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x2A
   323  00002B                     	ds	2
   324  00002D                     turnLeft@mR:
   325                           	opt stack 0
   326  00002D                     turnRight@mR:
   327                           	opt stack 0
   328  00002D                     fullSpeedBack@mR:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x2C
   332  00002D                     	ds	2
   333  00002F                     ScanIR@mL:
   334                           	opt stack 0
   335  00002F                     ScanWithRange@mL:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2E
   339  00002F                     	ds	2
   340  000031                     ScanIR@mR:
   341                           	opt stack 0
   342  000031                     ScanWithRange@mR:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x30
   346  000031                     	ds	2
   347  000033                     ??_ScanIR:
   348  000033                     ScanWithRange@tenth_seconds:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x32
   352  000033                     	ds	1
   353  000034                     ??_ScanWithRange:
   354                           
   355                           ; 0 bytes @ 0x33
   356  000034                     	ds	1
   357  000035                     ScanIR@ClearSignalTolerance:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x34
   361  000035                     	ds	1
   362  000036                     ScanWithRange@ResultFalseL:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x35
   366  000036                     	ds	1
   367  000037                     ScanWithRange@ResultFalseC:
   368                           	opt stack 0
   369  000037                     ScanIR@DirectionFoundLimit:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x36
   373  000037                     	ds	1
   374  000038                     ScanWithRange@ResultFalseR:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x37
   378  000038                     	ds	1
   379  000039                     ScanIR@DirectionFoundTolerance:
   380                           	opt stack 0
   381  000039                     ScanWithRange@ClearSignalTolerance:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x38
   385  000039                     	ds	2
   386  00003B                     ScanWithRange@DirectionFoundLimit:
   387                           	opt stack 0
   388  00003B                     ScanIR@SensorResult:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x3A
   392  00003B                     	ds	2
   393  00003D                     ScanWithRange@DirectionFoundTolerance:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x3C
   397  00003D                     	ds	2
   398  00003F                     ScanWithRange@SensorResultL:
   399                           	opt stack 0
   400                           
   401                           ; 4 bytes @ 0x3E
   402  00003F                     	ds	4
   403  000043                     ScanWithRange@SensorResultC:
   404                           	opt stack 0
   405                           
   406                           ; 4 bytes @ 0x42
   407  000043                     	ds	4
   408  000047                     ScanWithRange@SensorResultR:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0x46
   412  000047                     	ds	4
   413  00004B                     ??_main:
   414                           
   415                           ; 0 bytes @ 0x4A
   416  00004B                     	ds	2
   417                           tblptru	equ	0xFF8
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 31 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  PathTaken     100    0        unsigned char [100]
   431 ;;  Message        10    0[BANK0 ] unsigned char [10]
   432 ;;  mR              9   25[BANK0 ] struct DC_motor
   433 ;;  mL              9   16[BANK0 ] struct DC_motor
   434 ;;  SignalStreng    3    0        unsigned char [3]
   435 ;;  test            2   10[BANK0 ] unsigned int 
   436 ;;  i               1   15[BANK0 ] unsigned char 
   437 ;;  DirectionFou    1   14[BANK0 ] unsigned char 
   438 ;;  ScanAngle       1   13[BANK0 ] unsigned char 
   439 ;;  mode            1   12[BANK0 ] unsigned char 
   440 ;; Return value:  Size  Location     Type
   441 ;;		None               void
   442 ;; Registers used:
   443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   444 ;; Tracked objects:
   445 ;;		On entry : 0/0
   446 ;;		On exit  : 0/0
   447 ;;		Unchanged: 0/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   449 ;;      Params:         0       0       0       0
   450 ;;      Locals:         0      34       0       0
   451 ;;      Temps:          2       0       0       0
   452 ;;      Totals:         2      34       0       0
   453 ;;Total ram usage:       36 bytes
   454 ;; Hardware stack levels required when called:    6
   455 ;; This function calls:
   456 ;;		_ScanIR
   457 ;;		_ScanWithRange
   458 ;;		_VerifySignal
   459 ;;		_delay_s
   460 ;;		_delay_tenth_s
   461 ;;		_enableSensor
   462 ;;		_fullSpeedAhead
   463 ;;		_fullSpeedBack
   464 ;;		_initIR
   465 ;;		_initMotorPWM
   466 ;;		_initRFID
   467 ;;		_stop
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text0
   474  000552                     __ptext0:
   475                           	opt stack 0
   476  000552                     _main:
   477                           	opt stack 25
   478                           
   479                           ;main.c: 34: unsigned char Message[10];
   480                           ;main.c: 35: unsigned char i=0;
   481                           
   482                           ;incstack = 0
   483  000552  0E00               	movlw	0
   484  000554  0100               	movlb	0	; () banked
   485  000556  6F6F               	movwf	main@i& (0+255),b
   486                           
   487                           ;main.c: 36: unsigned char mode=0;
   488  000558  0E00               	movlw	0
   489  00055A  0100               	movlb	0	; () banked
   490  00055C  6F6C               	movwf	main@mode& (0+255),b
   491                           
   492                           ;main.c: 37: char DirectionFound=0;
   493  00055E  0E00               	movlw	0
   494  000560  0100               	movlb	0	; () banked
   495  000562  6F6E               	movwf	main@DirectionFound& (0+255),b
   496                           
   497                           ;main.c: 38: unsigned char SignalStrength[3];
   498                           ;main.c: 39: char PathTaken[100];
   499                           ;main.c: 40: unsigned int test=0;
   500  000564  0E00               	movlw	0
   501  000566  0100               	movlb	0	; () banked
   502  000568  6F6B               	movwf	(main@test+1)& (0+255),b
   503  00056A  0E00               	movlw	0
   504  00056C  6F6A               	movwf	main@test& (0+255),b
   505                           
   506                           ;main.c: 42: unsigned char ScanAngle=6;
   507  00056E  0E06               	movlw	6
   508  000570  0100               	movlb	0	; () banked
   509  000572  6F6D               	movwf	main@ScanAngle& (0+255),b
   510                           
   511                           ; BSR set to: 0
   512                           ;main.c: 45: INTCONbits.GIEH = 1;
   513  000574  8EF2               	bsf	intcon,7,c	;volatile
   514                           
   515                           ; BSR set to: 0
   516                           ;main.c: 46: RCONbits.IPEN = 1;
   517  000576  8ED0               	bsf	4048,7,c	;volatile
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 47: INTCONbits.GIEL = 1;
   521  000578  8CF2               	bsf	intcon,6,c	;volatile
   522                           
   523                           ; BSR set to: 0
   524                           ;main.c: 48: INTCONbits.INT0IE = 1;
   525  00057A  88F2               	bsf	intcon,4,c	;volatile
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 49: INTCONbits.PEIE = 1;
   529  00057C  8CF2               	bsf	intcon,6,c	;volatile
   530                           
   531                           ; BSR set to: 0
   532                           ;main.c: 51: IPR1bits.RCIP=1;
   533  00057E  8A9F               	bsf	3999,5,c	;volatile
   534                           
   535                           ; BSR set to: 0
   536                           ;main.c: 52: PIE1bits.RCIE=1;
   537  000580  8A9D               	bsf	3997,5,c	;volatile
   538                           
   539                           ; BSR set to: 0
   540                           ;main.c: 53: PIR1bits.RCIF = 0;
   541  000582  9A9E               	bcf	3998,5,c	;volatile
   542                           
   543                           ;main.c: 56: struct DC_motor mL, mR;
   544                           ;main.c: 57: mL.power=0;
   545  000584  0E00               	movlw	0
   546  000586  0100               	movlb	0	; () banked
   547  000588  6F70               	movwf	main@mL& (0+255),b
   548                           
   549                           ;main.c: 58: mL.direction=1;
   550  00058A  0E01               	movlw	1
   551  00058C  0100               	movlb	0	; () banked
   552  00058E  6F71               	movwf	(main@mL+1)& (0+255),b
   553                           
   554                           ; BSR set to: 0
   555                           ;main.c: 59: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   556  000590  0E79               	movlw	121
   557  000592  0100               	movlb	0	; () banked
   558  000594  6F72               	movwf	(main@mL+2)& (0+255),b
   559  000596  0E0F               	movlw	15
   560  000598  0100               	movlb	0	; () banked
   561  00059A  6F73               	movwf	(main@mL+3)& (0+255),b
   562                           
   563                           ; BSR set to: 0
   564                           ;main.c: 60: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   565  00059C  0E78               	movlw	120
   566  00059E  0100               	movlb	0	; () banked
   567  0005A0  6F74               	movwf	(main@mL+4)& (0+255),b
   568  0005A2  0E0F               	movlw	15
   569  0005A4  0100               	movlb	0	; () banked
   570  0005A6  6F75               	movwf	(main@mL+5)& (0+255),b
   571                           
   572                           ;main.c: 61: mL.dir_pin=0;
   573  0005A8  0E00               	movlw	0
   574  0005AA  0100               	movlb	0	; () banked
   575  0005AC  6F76               	movwf	(main@mL+6)& (0+255),b
   576                           
   577                           ;main.c: 62: mL.PWMperiod=199;
   578  0005AE  0E00               	movlw	0
   579  0005B0  0100               	movlb	0	; () banked
   580  0005B2  6F78               	movwf	(main@mL+8)& (0+255),b
   581  0005B4  0EC7               	movlw	199
   582  0005B6  6F77               	movwf	(main@mL+7)& (0+255),b
   583                           
   584                           ;main.c: 64: mR.power=0;
   585  0005B8  0E00               	movlw	0
   586  0005BA  0100               	movlb	0	; () banked
   587  0005BC  6F79               	movwf	main@mR& (0+255),b
   588                           
   589                           ;main.c: 65: mR.direction=1;
   590  0005BE  0E01               	movlw	1
   591  0005C0  0100               	movlb	0	; () banked
   592  0005C2  6F7A               	movwf	(main@mR+1)& (0+255),b
   593                           
   594                           ; BSR set to: 0
   595                           ;main.c: 66: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   596  0005C4  0E77               	movlw	119
   597  0005C6  0100               	movlb	0	; () banked
   598  0005C8  6F7B               	movwf	(main@mR+2)& (0+255),b
   599  0005CA  0E0F               	movlw	15
   600  0005CC  0100               	movlb	0	; () banked
   601  0005CE  6F7C               	movwf	(main@mR+3)& (0+255),b
   602                           
   603                           ; BSR set to: 0
   604                           ;main.c: 67: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   605  0005D0  0E76               	movlw	118
   606  0005D2  0100               	movlb	0	; () banked
   607  0005D4  6F7D               	movwf	(main@mR+4)& (0+255),b
   608  0005D6  0E0F               	movlw	15
   609  0005D8  0100               	movlb	0	; () banked
   610  0005DA  6F7E               	movwf	(main@mR+5)& (0+255),b
   611                           
   612                           ;main.c: 68: mR.dir_pin=2;
   613  0005DC  0E02               	movlw	2
   614  0005DE  0100               	movlb	0	; () banked
   615  0005E0  6F7F               	movwf	(main@mR+6)& (0+255),b
   616                           
   617                           ;main.c: 69: mR.PWMperiod=199;
   618  0005E2  0E00               	movlw	0
   619  0005E4  0100               	movlb	0	; () banked
   620  0005E6  6F81               	movwf	(main@mR+8)& (0+255),b
   621  0005E8  0EC7               	movlw	199
   622  0005EA  6F80               	movwf	(main@mR+7)& (0+255),b
   623                           
   624                           ;main.c: 71: OSCCON = 0x72;
   625  0005EC  0E72               	movlw	114
   626  0005EE  6ED3               	movwf	4051,c	;volatile
   627  0005F0                     l63:
   628  0005F0  B4D3               	btfsc	4051,2,c	;volatile
   629  0005F2  D122               	goto	l2340
   630  0005F4  D7FD               	goto	l63
   631  0005F6                     l2250:
   632                           
   633                           ;main.c: 79: initMotorPWM();
   634  0005F6  ECE4  F007         	call	_initMotorPWM	;wreg free
   635                           
   636                           ;main.c: 80: initRFID();
   637  0005FA  EC34  F008         	call	_initRFID	;wreg free
   638                           
   639                           ;main.c: 81: initIR();
   640  0005FE  EC23  F008         	call	_initIR	;wreg free
   641                           
   642                           ;main.c: 85: fullSpeedAhead(&mL, &mR);
   643  000602  0E70               	movlw	low main@mL
   644  000604  6E26               	movwf	fullSpeedAhead@mL,c
   645  000606  0E00               	movlw	high main@mL
   646  000608  6E27               	movwf	fullSpeedAhead@mL+1,c
   647  00060A  0E79               	movlw	low main@mR
   648  00060C  6E28               	movwf	fullSpeedAhead@mR,c
   649  00060E  0E00               	movlw	high main@mR
   650  000610  6E29               	movwf	fullSpeedAhead@mR+1,c
   651  000612  EC0F  F007         	call	_fullSpeedAhead	;wreg free
   652                           
   653                           ;main.c: 86: delay_s(1);
   654  000616  0E01               	movlw	1
   655  000618  EC91  F007         	call	_delay_s
   656                           
   657                           ;main.c: 87: stop(&mL, &mR);
   658  00061C  0E70               	movlw	low main@mL
   659  00061E  6E26               	movwf	stop@mL,c
   660  000620  0E00               	movlw	high main@mL
   661  000622  6E27               	movwf	stop@mL+1,c
   662  000624  0E79               	movlw	low main@mR
   663  000626  6E28               	movwf	stop@mR,c
   664  000628  0E00               	movlw	high main@mR
   665  00062A  6E29               	movwf	stop@mR+1,c
   666  00062C  EC0F  F006         	call	_stop	;wreg free
   667                           
   668                           ;main.c: 88: fullSpeedBack(&mL, &mR);
   669  000630  0E70               	movlw	low main@mL
   670  000632  6E2B               	movwf	fullSpeedBack@mL,c
   671  000634  0E00               	movlw	high main@mL
   672  000636  6E2C               	movwf	fullSpeedBack@mL+1,c
   673  000638  0E79               	movlw	low main@mR
   674  00063A  6E2D               	movwf	fullSpeedBack@mR,c
   675  00063C  0E00               	movlw	high main@mR
   676  00063E  6E2E               	movwf	fullSpeedBack@mR+1,c
   677  000640  ECC9  F007         	call	_fullSpeedBack	;wreg free
   678                           
   679                           ;main.c: 89: delay_s(1);
   680  000644  0E01               	movlw	1
   681  000646  EC91  F007         	call	_delay_s
   682                           
   683                           ;main.c: 90: stop(&mL, &mR);
   684  00064A  0E70               	movlw	low main@mL
   685  00064C  6E26               	movwf	stop@mL,c
   686  00064E  0E00               	movlw	high main@mL
   687  000650  6E27               	movwf	stop@mL+1,c
   688  000652  0E79               	movlw	low main@mR
   689  000654  6E28               	movwf	stop@mR,c
   690  000656  0E00               	movlw	high main@mR
   691  000658  6E29               	movwf	stop@mR+1,c
   692  00065A  EC0F  F006         	call	_stop	;wreg free
   693                           
   694                           ;main.c: 92: enableSensor(0, 1);
   695  00065E  0E01               	movlw	1
   696  000660  6E0F               	movwf	enableSensor@status,c
   697  000662  0E00               	movlw	0
   698  000664  ECFD  F007         	call	_enableSensor
   699                           
   700                           ;main.c: 93: enableSensor(1, 1);
   701  000668  0E01               	movlw	1
   702  00066A  6E0F               	movwf	enableSensor@status,c
   703  00066C  0E01               	movlw	1
   704  00066E  ECFD  F007         	call	_enableSensor
   705  000672  D0DF               	goto	l2336
   706  000674                     l2270:
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 100: if (DirectionFound==0) {
   710  000674  0100               	movlb	0	; () banked
   711  000676  516E               	movf	main@DirectionFound& (0+255),w,b
   712  000678  0100               	movlb	0	; () banked
   713  00067A  A4D8               	btfss	status,2,c
   714  00067C  D00D               	goto	l2274
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 102: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   718  00067E  0E70               	movlw	low main@mL
   719  000680  6E2F               	movwf	ScanWithRange@mL,c
   720  000682  0E00               	movlw	high main@mL
   721  000684  6E30               	movwf	ScanWithRange@mL+1,c
   722  000686  0E79               	movlw	low main@mR
   723  000688  6E31               	movwf	ScanWithRange@mR,c
   724  00068A  0E00               	movlw	high main@mR
   725  00068C  6E32               	movwf	ScanWithRange@mR+1,c
   726  00068E  C06D  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   727  000692  EC59  F000         	call	_ScanWithRange	;wreg free
   728  000696  D00E               	goto	L2
   729  000698                     l2274:
   730                           
   731                           ; BSR set to: 0
   732  000698  0100               	movlb	0	; () banked
   733  00069A  056E               	decf	main@DirectionFound& (0+255),w,b
   734  00069C  A4D8               	btfss	status,2,c
   735  00069E  D00D               	goto	l2278
   736                           
   737                           ; BSR set to: 0
   738                           ;main.c: 105: DirectionFound = ScanIR(&mL, &mR);
   739  0006A0  0E70               	movlw	low main@mL
   740  0006A2  6E2F               	movwf	ScanIR@mL,c
   741  0006A4  0E00               	movlw	high main@mL
   742  0006A6  6E30               	movwf	ScanIR@mL+1,c
   743  0006A8  0E79               	movlw	low main@mR
   744  0006AA  6E31               	movwf	ScanIR@mR,c
   745  0006AC  0E00               	movlw	high main@mR
   746  0006AE  6E32               	movwf	ScanIR@mR+1,c
   747  0006B0  EC29  F004         	call	_ScanIR	;wreg free
   748  0006B4                     L2:
   749  0006B4  0100               	movlb	0	; () banked
   750  0006B6  6F6E               	movwf	main@DirectionFound& (0+255),b
   751                           
   752                           ;main.c: 106: } else if (DirectionFound==2) {
   753  0006B8  D0BF               	goto	l2340
   754  0006BA                     l2278:
   755                           
   756                           ; BSR set to: 0
   757  0006BA  0E02               	movlw	2
   758  0006BC  0100               	movlb	0	; () banked
   759  0006BE  196E               	xorwf	main@DirectionFound& (0+255),w,b
   760  0006C0  A4D8               	btfss	status,2,c
   761  0006C2  D002               	goto	l2282
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 108: mode=2;
   765  0006C4  0E02               	movlw	2
   766  0006C6  D0B6               	goto	L3
   767  0006C8                     l2282:
   768                           
   769                           ; BSR set to: 0
   770  0006C8  0E03               	movlw	3
   771  0006CA  0100               	movlb	0	; () banked
   772  0006CC  196E               	xorwf	main@DirectionFound& (0+255),w,b
   773  0006CE  A4D8               	btfss	status,2,c
   774  0006D0  D0B3               	goto	l2340
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 114: fullSpeedAhead(&mL, &mR);
   778  0006D2  0E70               	movlw	low main@mL
   779  0006D4  6E26               	movwf	fullSpeedAhead@mL,c
   780  0006D6  0E00               	movlw	high main@mL
   781  0006D8  6E27               	movwf	fullSpeedAhead@mL+1,c
   782  0006DA  0E79               	movlw	low main@mR
   783  0006DC  6E28               	movwf	fullSpeedAhead@mR,c
   784  0006DE  0E00               	movlw	high main@mR
   785  0006E0  6E29               	movwf	fullSpeedAhead@mR+1,c
   786  0006E2  EC0F  F007         	call	_fullSpeedAhead	;wreg free
   787                           
   788                           ;main.c: 115: delay_tenth_s(ScanAngle);
   789  0006E6  0100               	movlb	0	; () banked
   790  0006E8  516D               	movf	main@ScanAngle& (0+255),w,b
   791  0006EA  ECAD  F007         	call	_delay_tenth_s
   792                           
   793                           ;main.c: 116: stop(&mL,&mR);
   794  0006EE  0E70               	movlw	low main@mL
   795  0006F0  6E26               	movwf	stop@mL,c
   796  0006F2  0E00               	movlw	high main@mL
   797  0006F4  6E27               	movwf	stop@mL+1,c
   798  0006F6  0E79               	movlw	low main@mR
   799  0006F8  6E28               	movwf	stop@mR,c
   800  0006FA  0E00               	movlw	high main@mR
   801  0006FC  6E29               	movwf	stop@mR+1,c
   802  0006FE  EC0F  F006         	call	_stop	;wreg free
   803                           
   804                           ;main.c: 117: }
   805                           ;main.c: 129: break;
   806  000702  D09A               	goto	l2340
   807  000704                     l2290:
   808                           
   809                           ;main.c: 135: if (!RFID_Read) {
   810  000704  0100               	movlb	0	; () banked
   811  000706  5182               	movf	_RFID_Read& (0+255),w,b	;volatile
   812  000708  A4D8               	btfss	status,2,c
   813  00070A  D00E               	goto	l2296
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 136: fullSpeedAhead(&mL, &mR);
   817  00070C  0E70               	movlw	low main@mL
   818  00070E  6E26               	movwf	fullSpeedAhead@mL,c
   819  000710  0E00               	movlw	high main@mL
   820  000712  6E27               	movwf	fullSpeedAhead@mL+1,c
   821  000714  0E79               	movlw	low main@mR
   822  000716  6E28               	movwf	fullSpeedAhead@mR,c
   823  000718  0E00               	movlw	high main@mR
   824  00071A  6E29               	movwf	fullSpeedAhead@mR+1,c
   825  00071C  EC0F  F007         	call	_fullSpeedAhead	;wreg free
   826                           
   827                           ;main.c: 137: delay_tenth_s(5);
   828  000720  0E05               	movlw	5
   829  000722  ECAD  F007         	call	_delay_tenth_s
   830                           
   831                           ;main.c: 138: } else {
   832  000726  D082               	goto	l2334
   833  000728                     l2296:
   834                           
   835                           ;main.c: 139: stop(&mL, &mR);
   836  000728  0E70               	movlw	low main@mL
   837  00072A  6E26               	movwf	stop@mL,c
   838  00072C  0E00               	movlw	high main@mL
   839  00072E  6E27               	movwf	stop@mL+1,c
   840  000730  0E79               	movlw	low main@mR
   841  000732  6E28               	movwf	stop@mR,c
   842  000734  0E00               	movlw	high main@mR
   843  000736  6E29               	movwf	stop@mR+1,c
   844  000738  EC0F  F006         	call	_stop	;wreg free
   845                           
   846                           ;main.c: 140: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   847  00073C  0E03               	movlw	3
   848  00073E  0100               	movlb	0	; () banked
   849  000740  1992               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   850  000742  A4D8               	btfss	status,2,c
   851  000744  D002               	goto	u1710
   852  000746  0E01               	movlw	1
   853  000748  D001               	goto	u1712
   854  00074A                     u1710:
   855  00074A  0E00               	movlw	0
   856  00074C                     u1712:
   857  00074C  6E4B               	movwf	??_main& (0+255),c
   858  00074E  0E02               	movlw	2
   859  000750  0100               	movlb	0	; () banked
   860  000752  1983               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   861  000754  A4D8               	btfss	status,2,c
   862  000756  D002               	goto	u1720
   863  000758  0E01               	movlw	1
   864  00075A  D001               	goto	u1722
   865  00075C                     u1720:
   866  00075C  0E00               	movlw	0
   867  00075E                     u1722:
   868  00075E  144B               	andwf	??_main,w,c
   869  000760  A0E8               	btfss	wreg,0,c
   870  000762  D064               	goto	l2334
   871                           
   872                           ; BSR set to: 0
   873                           ;main.c: 141: if (VerifySignal(ReceivedString)){
   874  000764  0E83               	movlw	low _ReceivedString
   875  000766  6E0F               	movwf	VerifySignal@Signal,c
   876  000768  0E00               	movlw	high _ReceivedString
   877  00076A  6E10               	movwf	VerifySignal@Signal+1,c
   878  00076C  ECB5  F005         	call	_VerifySignal	;wreg free
   879  000770  0900               	iorlw	0
   880  000772  B4D8               	btfsc	status,2,c
   881  000774  D03A               	goto	l2326
   882                           
   883                           ;main.c: 143: for (i=0; i<10; i++){
   884  000776  0E00               	movlw	0
   885  000778  0100               	movlb	0	; () banked
   886  00077A  6F6F               	movwf	main@i& (0+255),b
   887  00077C                     l2304:
   888                           
   889                           ; BSR set to: 0
   890  00077C  0E09               	movlw	9
   891  00077E  0100               	movlb	0	; () banked
   892  000780  656F               	cpfsgt	main@i& (0+255),b
   893  000782  D001               	goto	l2308
   894  000784  D01C               	goto	l2314
   895  000786                     l2308:
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 144: Message[i] = ReceivedString[i+1];
   899  000786  0100               	movlb	0	; () banked
   900  000788  516F               	movf	main@i& (0+255),w,b
   901  00078A  6E4B               	movwf	??_main& (0+255),c
   902  00078C  6A4C               	clrf	(??_main+1)& (0+255),c
   903  00078E  0E01               	movlw	1
   904  000790  264B               	addwf	??_main,f,c
   905  000792  0E00               	movlw	0
   906  000794  224C               	addwfc	??_main+1,f,c
   907  000796  0E83               	movlw	low _ReceivedString
   908  000798  244B               	addwf	??_main,w,c
   909  00079A  6ED9               	movwf	fsr2l,c
   910  00079C  0E00               	movlw	high _ReceivedString
   911  00079E  204C               	addwfc	??_main+1,w,c
   912  0007A0  6EDA               	movwf	fsr2h,c
   913  0007A2  0100               	movlb	0	; () banked
   914  0007A4  516F               	movf	main@i& (0+255),w,b
   915  0007A6  0D01               	mullw	1
   916  0007A8  0E60               	movlw	low main@Message
   917  0007AA  24F3               	addwf	prodl,w,c
   918  0007AC  6EE1               	movwf	fsr1l,c
   919  0007AE  0E00               	movlw	high main@Message
   920  0007B0  20F4               	addwfc	prodh,w,c
   921  0007B2  6EE2               	movwf	fsr1h,c
   922  0007B4  CFDF FFE7          	movff	indf2,indf1
   923                           
   924                           ; BSR set to: 0
   925  0007B8  0100               	movlb	0	; () banked
   926  0007BA  2B6F               	incf	main@i& (0+255),f,b
   927  0007BC  D7DF               	goto	l2304
   928  0007BE                     l2314:
   929                           
   930                           ; BSR set to: 0
   931                           ;main.c: 145: }
   932                           ;main.c: 147: for (i=0; i<16; i++) {
   933  0007BE  0E00               	movlw	0
   934  0007C0  0100               	movlb	0	; () banked
   935  0007C2  6F6F               	movwf	main@i& (0+255),b
   936  0007C4                     l2316:
   937                           
   938                           ; BSR set to: 0
   939  0007C4  0E0F               	movlw	15
   940  0007C6  0100               	movlb	0	; () banked
   941  0007C8  656F               	cpfsgt	main@i& (0+255),b
   942  0007CA  D001               	goto	l2320
   943  0007CC  D02F               	goto	l2334
   944  0007CE                     l2320:
   945                           
   946                           ; BSR set to: 0
   947                           ;main.c: 148: ReceivedString[i]=0;
   948  0007CE  0100               	movlb	0	; () banked
   949  0007D0  516F               	movf	main@i& (0+255),w,b
   950  0007D2  0D01               	mullw	1
   951  0007D4  0E83               	movlw	low _ReceivedString
   952  0007D6  24F3               	addwf	prodl,w,c
   953  0007D8  6ED9               	movwf	fsr2l,c
   954  0007DA  0E00               	movlw	high _ReceivedString
   955  0007DC  20F4               	addwfc	prodh,w,c
   956  0007DE  6EDA               	movwf	fsr2h,c
   957  0007E0  0E00               	movlw	0
   958  0007E2  6EDF               	movwf	indf2,c
   959                           
   960                           ; BSR set to: 0
   961  0007E4  0100               	movlb	0	; () banked
   962  0007E6  2B6F               	incf	main@i& (0+255),f,b
   963  0007E8  D7ED               	goto	l2316
   964  0007EA                     l2326:
   965                           
   966                           ;main.c: 152: fullSpeedBack(&mL,&mR);
   967  0007EA  0E70               	movlw	low main@mL
   968  0007EC  6E2B               	movwf	fullSpeedBack@mL,c
   969  0007EE  0E00               	movlw	high main@mL
   970  0007F0  6E2C               	movwf	fullSpeedBack@mL+1,c
   971  0007F2  0E79               	movlw	low main@mR
   972  0007F4  6E2D               	movwf	fullSpeedBack@mR,c
   973  0007F6  0E00               	movlw	high main@mR
   974  0007F8  6E2E               	movwf	fullSpeedBack@mR+1,c
   975  0007FA  ECC9  F007         	call	_fullSpeedBack	;wreg free
   976                           
   977                           ;main.c: 153: delay_s(1);
   978  0007FE  0E01               	movlw	1
   979  000800  EC91  F007         	call	_delay_s
   980                           
   981                           ;main.c: 154: stop(&mL,&mR);
   982  000804  0E70               	movlw	low main@mL
   983  000806  6E26               	movwf	stop@mL,c
   984  000808  0E00               	movlw	high main@mL
   985  00080A  6E27               	movwf	stop@mL+1,c
   986  00080C  0E79               	movlw	low main@mR
   987  00080E  6E28               	movwf	stop@mR,c
   988  000810  0E00               	movlw	high main@mR
   989  000812  6E29               	movwf	stop@mR+1,c
   990  000814  EC0F  F006         	call	_stop	;wreg free
   991                           
   992                           ;main.c: 155: fullSpeedAhead(&mL,&mR);
   993  000818  0E70               	movlw	low main@mL
   994  00081A  6E26               	movwf	fullSpeedAhead@mL,c
   995  00081C  0E00               	movlw	high main@mL
   996  00081E  6E27               	movwf	fullSpeedAhead@mL+1,c
   997  000820  0E79               	movlw	low main@mR
   998  000822  6E28               	movwf	fullSpeedAhead@mR,c
   999  000824  0E00               	movlw	high main@mR
  1000  000826  6E29               	movwf	fullSpeedAhead@mR+1,c
  1001  000828  EC0F  F007         	call	_fullSpeedAhead	;wreg free
  1002  00082C                     l2334:
  1003                           
  1004                           ;main.c: 156: }
  1005                           ;main.c: 157: }
  1006                           ;main.c: 158: }
  1007                           ;main.c: 159: DirectionFound=1;
  1008  00082C  0E01               	movlw	1
  1009  00082E  0100               	movlb	0	; () banked
  1010  000830  6F6E               	movwf	main@DirectionFound& (0+255),b
  1011  000832                     l2336:
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 160: mode = 1;
  1015  000832  0E01               	movlw	1
  1016  000834                     L3:
  1017  000834  0100               	movlb	0	; () banked
  1018  000836  6F6C               	movwf	main@mode& (0+255),b
  1019  000838                     l2340:
  1020  000838  0100               	movlb	0	; () banked
  1021  00083A  516C               	movf	main@mode& (0+255),w,b
  1022                           
  1023                           ; Switch size 1, requested type "space"
  1024                           ; Number of cases is 4, Range of values is 0 to 3
  1025                           ; switch strategies available:
  1026                           ; Name         Instructions Cycles
  1027                           ; simple_byte           13     7 (average)
  1028                           ;	Chosen strategy is simple_byte
  1029  00083C  0A00               	xorlw	0	; case 0
  1030  00083E  B4D8               	btfsc	status,2,c
  1031  000840  D6DA               	goto	l2250
  1032  000842  0A01               	xorlw	1	; case 1
  1033  000844  B4D8               	btfsc	status,2,c
  1034  000846  D716               	goto	l2270
  1035  000848  0A03               	xorlw	3	; case 2
  1036  00084A  B4D8               	btfsc	status,2,c
  1037  00084C  D75B               	goto	l2290
  1038  00084E  0A01               	xorlw	1	; case 3
  1039                           
  1040                           ; BSR set to: 0
  1041                           
  1042                           ; BSR set to: 0
  1043  000850  D7F3               	goto	l2340
  1044  000852                     __end_of_main:
  1045                           	opt stack 0
  1046                           tblptru	equ	0xFF8
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           indf1	equ	0xFE7
  1053                           fsr1h	equ	0xFE2
  1054                           fsr1l	equ	0xFE1
  1055                           indf2	equ	0xFDF
  1056                           fsr2h	equ	0xFDA
  1057                           fsr2l	equ	0xFD9
  1058                           status	equ	0xFD8
  1059                           
  1060 ;; *************** function _initRFID *****************
  1061 ;; Defined at:
  1062 ;;		line 5 in file "RFID_Reader.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;		None               void
  1069 ;; Registers used:
  1070 ;;		wreg, status,2
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1076 ;;      Params:         0       0       0       0
  1077 ;;      Locals:         1       0       0       0
  1078 ;;      Temps:          0       0       0       0
  1079 ;;      Totals:         1       0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    1
  1083 ;; This function calls:
  1084 ;;		Nothing
  1085 ;; This function is called by:
  1086 ;;		_main
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text1
  1091  001068                     __ptext1:
  1092                           	opt stack 0
  1093  001068                     _initRFID:
  1094                           	opt stack 29
  1095                           
  1096                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;incstack = 0
  1100  001068  0E01               	movlw	1
  1101  00106A  6E0F               	movwf	_initRFID$1305,c
  1102  00106C  5094               	movf	3988,w,c	;volatile
  1103  00106E  C00F  FF94         	movff	_initRFID$1305,3988	;volatile
  1104                           
  1105                           ;RFID_Reader.c: 10: SPBRG=205;
  1106  001072  0ECD               	movlw	205
  1107  001074  6EAF               	movwf	4015,c	;volatile
  1108                           
  1109                           ;RFID_Reader.c: 11: SPBRGH=0;
  1110  001076  0E00               	movlw	0
  1111  001078  6EB0               	movwf	4016,c	;volatile
  1112                           
  1113                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1114  00107A  86AA               	bsf	4010,3,c	;volatile
  1115                           
  1116                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1117  00107C  84AC               	bsf	4012,2,c	;volatile
  1118                           
  1119                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1120  00107E  88AB               	bsf	4011,4,c	;volatile
  1121                           
  1122                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1123  001080  8EAB               	bsf	4011,7,c	;volatile
  1124                           
  1125                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1126  001082  98AC               	bcf	4012,4,c	;volatile
  1127                           
  1128                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1129  001084  9CAB               	bcf	4011,6,c	;volatile
  1130  001086  0012               	return		;funcret
  1131  001088                     __end_of_initRFID:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           prodh	equ	0xFF4
  1135                           prodl	equ	0xFF3
  1136                           intcon	equ	0xFF2
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           indf1	equ	0xFE7
  1140                           fsr1h	equ	0xFE2
  1141                           fsr1l	equ	0xFE1
  1142                           indf2	equ	0xFDF
  1143                           fsr2h	equ	0xFDA
  1144                           fsr2l	equ	0xFD9
  1145                           status	equ	0xFD8
  1146                           
  1147 ;; *************** function _initMotorPWM *****************
  1148 ;; Defined at:
  1149 ;;		line 4 in file "dc_motor.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;		None               void
  1156 ;; Registers used:
  1157 ;;		wreg, status,2
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1163 ;;      Params:         0       0       0       0
  1164 ;;      Locals:         0       0       0       0
  1165 ;;      Temps:          0       0       0       0
  1166 ;;      Totals:         0       0       0       0
  1167 ;;Total ram usage:        0 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    1
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text2
  1178  000FC8                     __ptext2:
  1179                           	opt stack 0
  1180  000FC8                     _initMotorPWM:
  1181                           	opt stack 29
  1182                           
  1183                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1184                           
  1185                           ;incstack = 0
  1186  000FC8  0E00               	movlw	0
  1187  000FCA  6E7F               	movwf	3967,c	;volatile
  1188                           
  1189                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1190  000FCC  0E80               	movlw	128
  1191  000FCE  6E7E               	movwf	3966,c	;volatile
  1192                           
  1193                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1194  000FD0  0E6F               	movlw	111
  1195  000FD2  6E6F               	movwf	3951,c	;volatile
  1196                           
  1197                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1198  000FD4  0E00               	movlw	0
  1199  000FD6  6E6E               	movwf	3950,c	;volatile
  1200                           
  1201                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1202  000FD8  0EC7               	movlw	199
  1203  000FDA  6E7B               	movwf	3963,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1206  000FDC  0E00               	movlw	0
  1207  000FDE  6E7A               	movwf	3962,c	;volatile
  1208                           
  1209                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1210  000FE0  0E00               	movlw	0
  1211  000FE2  6E79               	movwf	3961,c	;volatile
  1212                           
  1213                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1214  000FE4  0E00               	movlw	0
  1215  000FE6  6E78               	movwf	3960,c	;volatile
  1216                           
  1217                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1218  000FE8  0E00               	movlw	0
  1219  000FEA  6E77               	movwf	3959,c	;volatile
  1220                           
  1221                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1222  000FEC  0E00               	movlw	0
  1223  000FEE  6E76               	movwf	3958,c	;volatile
  1224                           
  1225                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1226  000FF0  9093               	bcf	3987,0,c	;volatile
  1227                           
  1228                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1229  000FF2  9293               	bcf	3987,1,c	;volatile
  1230                           
  1231                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1232  000FF4  9493               	bcf	3987,2,c	;volatile
  1233                           
  1234                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1235  000FF6  9693               	bcf	3987,3,c	;volatile
  1236  000FF8  0012               	return		;funcret
  1237  000FFA                     __end_of_initMotorPWM:
  1238                           	opt stack 0
  1239                           tblptru	equ	0xFF8
  1240                           prodh	equ	0xFF4
  1241                           prodl	equ	0xFF3
  1242                           intcon	equ	0xFF2
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           indf1	equ	0xFE7
  1246                           fsr1h	equ	0xFE2
  1247                           fsr1l	equ	0xFE1
  1248                           indf2	equ	0xFDF
  1249                           fsr2h	equ	0xFDA
  1250                           fsr2l	equ	0xFD9
  1251                           status	equ	0xFD8
  1252                           
  1253 ;; *************** function _initIR *****************
  1254 ;; Defined at:
  1255 ;;		line 30 in file "IR_Reading.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;		None               void
  1262 ;; Registers used:
  1263 ;;		wreg, status,2
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1269 ;;      Params:         0       0       0       0
  1270 ;;      Locals:         0       0       0       0
  1271 ;;      Temps:          0       0       0       0
  1272 ;;      Totals:         0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels used:    1
  1275 ;; Hardware stack levels required when called:    1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text3
  1284  001046                     __ptext3:
  1285                           	opt stack 0
  1286  001046                     _initIR:
  1287                           	opt stack 29
  1288                           
  1289                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  1290                           
  1291                           ;incstack = 0
  1292  001046  9489               	bcf	3977,2,c	;volatile
  1293                           
  1294                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  1295  001048  9689               	bcf	3977,3,c	;volatile
  1296                           
  1297                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  1298  00104A  8492               	bsf	3986,2,c	;volatile
  1299                           
  1300                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  1301  00104C  8692               	bsf	3986,3,c	;volatile
  1302                           
  1303                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  1304  00104E  94B8               	bcf	4024,2,c	;volatile
  1305                           
  1306                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  1307  001050  96B8               	bcf	4024,3,c	;volatile
  1308                           
  1309                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  1310  001052  9CB8               	bcf	4024,6,c	;volatile
  1311                           
  1312                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  1313  001054  9EB8               	bcf	4024,7,c	;volatile
  1314                           
  1315                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  1316  001056  0E06               	movlw	6
  1317  001058  6E63               	movwf	3939,c	;volatile
  1318                           
  1319                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  1320  00105A  0E06               	movlw	6
  1321  00105C  6E62               	movwf	3938,c	;volatile
  1322                           
  1323                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  1324  00105E  9096               	bcf	3990,0,c	;volatile
  1325                           
  1326                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  1327  001060  9296               	bcf	3990,1,c	;volatile
  1328                           
  1329                           ;IR_Reading.c: 69: T5CON=0b01011001;
  1330  001062  0E59               	movlw	89
  1331  001064  6EB7               	movwf	4023,c	;volatile
  1332  001066  0012               	return		;funcret
  1333  001068                     __end_of_initIR:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           prodh	equ	0xFF4
  1337                           prodl	equ	0xFF3
  1338                           intcon	equ	0xFF2
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           indf1	equ	0xFE7
  1342                           fsr1h	equ	0xFE2
  1343                           fsr1l	equ	0xFE1
  1344                           indf2	equ	0xFDF
  1345                           fsr2h	equ	0xFDA
  1346                           fsr2l	equ	0xFD9
  1347                           status	equ	0xFD8
  1348                           
  1349 ;; *************** function _fullSpeedBack *****************
  1350 ;; Defined at:
  1351 ;;		line 125 in file "dc_motor.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1354 ;;		 -> main@mL(9), 
  1355 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1356 ;;		 -> main@mR(9), 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;		None               void
  1361 ;; Registers used:
  1362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1368 ;;      Params:         4       0       0       0
  1369 ;;      Locals:         0       0       0       0
  1370 ;;      Temps:          0       0       0       0
  1371 ;;      Totals:         4       0       0       0
  1372 ;;Total ram usage:        4 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    4
  1375 ;; This function calls:
  1376 ;;		_fullSpeedAhead
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text4
  1383  000F92                     __ptext4:
  1384                           	opt stack 0
  1385  000F92                     _fullSpeedBack:
  1386                           	opt stack 26
  1387                           
  1388                           ;dc_motor.c: 128: mL->direction=0;
  1389                           
  1390                           ;incstack = 0
  1391  000F92  EE20 F001          	lfsr	2,1
  1392  000F96  502B               	movf	fullSpeedBack@mL,w,c
  1393  000F98  26D9               	addwf	fsr2l,f,c
  1394  000F9A  502C               	movf	fullSpeedBack@mL+1,w,c
  1395  000F9C  22DA               	addwfc	fsr2h,f,c
  1396  000F9E  0E00               	movlw	0
  1397  000FA0  6EDF               	movwf	indf2,c
  1398                           
  1399                           ;dc_motor.c: 129: mR->direction=0;
  1400  000FA2  EE20 F001          	lfsr	2,1
  1401  000FA6  502D               	movf	fullSpeedBack@mR,w,c
  1402  000FA8  26D9               	addwf	fsr2l,f,c
  1403  000FAA  502E               	movf	fullSpeedBack@mR+1,w,c
  1404  000FAC  22DA               	addwfc	fsr2h,f,c
  1405  000FAE  0E00               	movlw	0
  1406  000FB0  6EDF               	movwf	indf2,c
  1407                           
  1408                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1409  000FB2  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1410  000FB6  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1411  000FBA  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1412  000FBE  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1413  000FC2  EC0F  F007         	call	_fullSpeedAhead	;wreg free
  1414  000FC6  0012               	return		;funcret
  1415  000FC8                     __end_of_fullSpeedBack:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           prodh	equ	0xFF4
  1419                           prodl	equ	0xFF3
  1420                           intcon	equ	0xFF2
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           indf1	equ	0xFE7
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           indf2	equ	0xFDF
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _enableSensor *****************
  1432 ;; Defined at:
  1433 ;;		line 106 in file "IR_Reading.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  sensor          1    wreg     unsigned char 
  1436 ;;  status          1   14[COMRAM] unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  sensor          1   15[COMRAM] unsigned char 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;		None               void
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1448 ;;      Params:         1       0       0       0
  1449 ;;      Locals:         1       0       0       0
  1450 ;;      Temps:          0       0       0       0
  1451 ;;      Totals:         2       0       0       0
  1452 ;;Total ram usage:        2 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    1
  1455 ;; This function calls:
  1456 ;;		Nothing
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text5
  1463  000FFA                     __ptext5:
  1464                           	opt stack 0
  1465  000FFA                     _enableSensor:
  1466                           	opt stack 29
  1467                           
  1468                           ;incstack = 0
  1469                           ;enableSensor@sensor stored from wreg
  1470  000FFA  6E10               	movwf	enableSensor@sensor,c
  1471                           
  1472                           ;IR_Reading.c: 108: if (sensor==0){
  1473  000FFC  5010               	movf	enableSensor@sensor,w,c
  1474  000FFE  A4D8               	btfss	status,2,c
  1475  001000  D006               	goto	l1932
  1476                           
  1477                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1478  001002  B00F               	btfsc	enableSensor@status,0,c
  1479  001004  D002               	bra	u1275
  1480  001006  908D               	bcf	3981,0,c	;volatile
  1481  001008  D001               	bra	u1276
  1482  00100A                     u1275:
  1483  00100A  808D               	bsf	3981,0,c	;volatile
  1484  00100C                     u1276:
  1485                           
  1486                           ;IR_Reading.c: 110: } else if (sensor==1){
  1487  00100C  0012               	return	
  1488  00100E                     l1932:
  1489  00100E  0410               	decf	enableSensor@sensor,w,c
  1490  001010  A4D8               	btfss	status,2,c
  1491  001012  0012               	return	
  1492                           
  1493                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1494  001014  B00F               	btfsc	enableSensor@status,0,c
  1495  001016  D002               	bra	u1295
  1496  001018  928D               	bcf	3981,1,c	;volatile
  1497  00101A  D001               	bra	u1296
  1498  00101C                     u1295:
  1499  00101C  828D               	bsf	3981,1,c	;volatile
  1500  00101E                     u1296:
  1501  00101E  0012               	return	
  1502  001020                     __end_of_enableSensor:
  1503                           	opt stack 0
  1504                           tblptru	equ	0xFF8
  1505                           prodh	equ	0xFF4
  1506                           prodl	equ	0xFF3
  1507                           intcon	equ	0xFF2
  1508                           postinc0	equ	0xFEE
  1509                           wreg	equ	0xFE8
  1510                           indf1	equ	0xFE7
  1511                           fsr1h	equ	0xFE2
  1512                           fsr1l	equ	0xFE1
  1513                           indf2	equ	0xFDF
  1514                           fsr2h	equ	0xFDA
  1515                           fsr2l	equ	0xFD9
  1516                           status	equ	0xFD8
  1517                           
  1518 ;; *************** function _delay_s *****************
  1519 ;; Defined at:
  1520 ;;		line 10 in file "Movement.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  seconds         1    wreg     unsigned char 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  seconds         1   15[COMRAM] unsigned char 
  1525 ;;  i               2   16[COMRAM] unsigned int 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;		None               void
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1535 ;;      Params:         0       0       0       0
  1536 ;;      Locals:         3       0       0       0
  1537 ;;      Temps:          1       0       0       0
  1538 ;;      Totals:         4       0       0       0
  1539 ;;Total ram usage:        4 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    1
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text6
  1550  000F22                     __ptext6:
  1551                           	opt stack 0
  1552  000F22                     _delay_s:
  1553                           	opt stack 29
  1554                           
  1555                           ;incstack = 0
  1556                           ;delay_s@seconds stored from wreg
  1557  000F22  6E10               	movwf	delay_s@seconds,c
  1558                           
  1559                           ;Movement.c: 11: unsigned int i=0;
  1560  000F24  0E00               	movlw	0
  1561  000F26  6E12               	movwf	delay_s@i+1,c
  1562  000F28  0E00               	movlw	0
  1563  000F2A  6E11               	movwf	delay_s@i,c
  1564                           
  1565                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1566  000F2C  0E00               	movlw	0
  1567  000F2E  6E12               	movwf	delay_s@i+1,c
  1568  000F30  0E01               	movlw	1
  1569  000F32  6E11               	movwf	delay_s@i,c
  1570  000F34  D009               	goto	l1922
  1571  000F36                     l1918:
  1572                           
  1573                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1574  000F36  0E82               	movlw	130
  1575  000F38  6E0F               	movwf	??_delay_s& (0+255),c
  1576  000F3A  0EDE               	movlw	222
  1577  000F3C                     u1817:
  1578  000F3C  2EE8               	decfsz	wreg,f,c
  1579  000F3E  D7FE               	goto	u1817
  1580  000F40  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1581  000F42  D7FC               	goto	u1817
  1582  000F44  4A11               	infsnz	delay_s@i,f,c
  1583  000F46  2A12               	incf	delay_s@i+1,f,c
  1584  000F48                     l1922:
  1585  000F48  5010               	movf	delay_s@seconds,w,c
  1586  000F4A  0D14               	mullw	20
  1587  000F4C  5011               	movf	delay_s@i,w,c
  1588  000F4E  5CF3               	subwf	prodl,w,c
  1589  000F50  5012               	movf	delay_s@i+1,w,c
  1590  000F52  58F4               	subwfb	prodh,w,c
  1591  000F54  A0D8               	btfss	status,0,c
  1592  000F56  0012               	return	
  1593  000F58  D7EE               	goto	l1918
  1594  000F5A                     __end_of_delay_s:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           prodh	equ	0xFF4
  1598                           prodl	equ	0xFF3
  1599                           intcon	equ	0xFF2
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           indf1	equ	0xFE7
  1603                           fsr1h	equ	0xFE2
  1604                           fsr1l	equ	0xFE1
  1605                           indf2	equ	0xFDF
  1606                           fsr2h	equ	0xFDA
  1607                           fsr2l	equ	0xFD9
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function _VerifySignal *****************
  1611 ;; Defined at:
  1612 ;;		line 56 in file "RFID_Reader.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1615 ;;		 -> ReceivedString(16), 
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;  hexByte         2   23[COMRAM] unsigned int 
  1618 ;;  i               1   25[COMRAM] unsigned char 
  1619 ;;  checksum        1   22[COMRAM] unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      unsigned char 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1629 ;;      Params:         2       0       0       0
  1630 ;;      Locals:         4       0       0       0
  1631 ;;      Temps:          6       0       0       0
  1632 ;;      Totals:        12       0       0       0
  1633 ;;Total ram usage:       12 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    1
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text7
  1644  000B6A                     __ptext7:
  1645                           	opt stack 0
  1646  000B6A                     _VerifySignal:
  1647                           	opt stack 29
  1648                           
  1649                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1650                           
  1651                           ;incstack = 0
  1652  000B6A  0E00               	movlw	0
  1653  000B6C  6E17               	movwf	VerifySignal@checksum,c
  1654                           
  1655                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1656  000B6E  0E00               	movlw	0
  1657  000B70  6E19               	movwf	VerifySignal@hexByte+1,c
  1658  000B72  0E00               	movlw	0
  1659  000B74  6E18               	movwf	VerifySignal@hexByte,c
  1660                           
  1661                           ;RFID_Reader.c: 59: unsigned char i=0;
  1662  000B76  0E00               	movlw	0
  1663  000B78  6E1A               	movwf	VerifySignal@i,c
  1664                           
  1665                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1666  000B7A  EE20 F004          	lfsr	2,4
  1667  000B7E  500F               	movf	VerifySignal@Signal,w,c
  1668  000B80  26D9               	addwf	fsr2l,f,c
  1669  000B82  5010               	movf	VerifySignal@Signal+1,w,c
  1670  000B84  22DA               	addwfc	fsr2h,f,c
  1671  000B86  50DF               	movf	indf2,w,c
  1672  000B88  6E11               	movwf	??_VerifySignal& (0+255),c
  1673  000B8A  EE20 F003          	lfsr	2,3
  1674  000B8E  500F               	movf	VerifySignal@Signal,w,c
  1675  000B90  26D9               	addwf	fsr2l,f,c
  1676  000B92  5010               	movf	VerifySignal@Signal+1,w,c
  1677  000B94  22DA               	addwfc	fsr2h,f,c
  1678  000B96  50DF               	movf	indf2,w,c
  1679  000B98  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1680  000B9A  5012               	movf	??_VerifySignal+1,w,c
  1681  000B9C  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1682  000B9E  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1683  000BA0  5011               	movf	??_VerifySignal,w,c
  1684  000BA2  2413               	addwf	??_VerifySignal+2,w,c
  1685  000BA4  6E18               	movwf	VerifySignal@hexByte,c
  1686  000BA6  0E00               	movlw	0
  1687  000BA8  2014               	addwfc	??_VerifySignal+3,w,c
  1688  000BAA  6E19               	movwf	VerifySignal@hexByte+1,c
  1689                           
  1690                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1691  000BAC  EE20 F002          	lfsr	2,2
  1692  000BB0  500F               	movf	VerifySignal@Signal,w,c
  1693  000BB2  26D9               	addwf	fsr2l,f,c
  1694  000BB4  5010               	movf	VerifySignal@Signal+1,w,c
  1695  000BB6  22DA               	addwfc	fsr2h,f,c
  1696  000BB8  50DF               	movf	indf2,w,c
  1697  000BBA  1818               	xorwf	VerifySignal@hexByte,w,c
  1698  000BBC  6E17               	movwf	VerifySignal@checksum,c
  1699                           
  1700                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1701  000BBE  0E05               	movlw	5
  1702  000BC0  6E1A               	movwf	VerifySignal@i,c
  1703  000BC2                     l2194:
  1704  000BC2  0E09               	movlw	9
  1705  000BC4  641A               	cpfsgt	VerifySignal@i,c
  1706  000BC6  D001               	goto	l2198
  1707  000BC8  D028               	goto	l2206
  1708  000BCA                     l2198:
  1709                           
  1710                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1711  000BCA  501A               	movf	VerifySignal@i,w,c
  1712  000BCC  6E11               	movwf	??_VerifySignal& (0+255),c
  1713  000BCE  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1714  000BD0  0E01               	movlw	1
  1715  000BD2  2611               	addwf	??_VerifySignal,f,c
  1716  000BD4  0E00               	movlw	0
  1717  000BD6  2212               	addwfc	??_VerifySignal+1,f,c
  1718  000BD8  5011               	movf	??_VerifySignal,w,c
  1719  000BDA  240F               	addwf	VerifySignal@Signal,w,c
  1720  000BDC  6ED9               	movwf	fsr2l,c
  1721  000BDE  5012               	movf	??_VerifySignal+1,w,c
  1722  000BE0  2010               	addwfc	VerifySignal@Signal+1,w,c
  1723  000BE2  6EDA               	movwf	fsr2h,c
  1724  000BE4  50DF               	movf	indf2,w,c
  1725  000BE6  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1726  000BE8  501A               	movf	VerifySignal@i,w,c
  1727  000BEA  0D01               	mullw	1
  1728  000BEC  50F3               	movf	prodl,w,c
  1729  000BEE  240F               	addwf	VerifySignal@Signal,w,c
  1730  000BF0  6ED9               	movwf	fsr2l,c
  1731  000BF2  50F4               	movf	prodh,w,c
  1732  000BF4  2010               	addwfc	VerifySignal@Signal+1,w,c
  1733  000BF6  6EDA               	movwf	fsr2h,c
  1734  000BF8  50DF               	movf	indf2,w,c
  1735  000BFA  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1736  000BFC  5014               	movf	??_VerifySignal+3,w,c
  1737  000BFE  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1738  000C00  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1739  000C02  5013               	movf	??_VerifySignal+2,w,c
  1740  000C04  2415               	addwf	??_VerifySignal+4,w,c
  1741  000C06  6E18               	movwf	VerifySignal@hexByte,c
  1742  000C08  0E00               	movlw	0
  1743  000C0A  2016               	addwfc	??_VerifySignal+5,w,c
  1744  000C0C  6E19               	movwf	VerifySignal@hexByte+1,c
  1745                           
  1746                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1747  000C0E  5017               	movf	VerifySignal@checksum,w,c
  1748  000C10  1818               	xorwf	VerifySignal@hexByte,w,c
  1749  000C12  6E17               	movwf	VerifySignal@checksum,c
  1750  000C14  0E02               	movlw	2
  1751  000C16  261A               	addwf	VerifySignal@i,f,c
  1752  000C18  D7D4               	goto	l2194
  1753  000C1A                     l2206:
  1754                           
  1755                           ;RFID_Reader.c: 69: }
  1756                           ;RFID_Reader.c: 72: return 1;
  1757  000C1A  0E01               	movlw	1
  1758  000C1C  0012               	return	
  1759  000C1E                     __end_of_VerifySignal:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           indf1	equ	0xFE7
  1768                           fsr1h	equ	0xFE2
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _ScanWithRange *****************
  1776 ;; Defined at:
  1777 ;;		line 93 in file "Movement.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1780 ;;		 -> main@mL(9), 
  1781 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1782 ;;		 -> main@mR(9), 
  1783 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  SensorResult    4   70[COMRAM] unsigned int [2]
  1786 ;;  SensorResult    4   66[COMRAM] unsigned int [2]
  1787 ;;  SensorResult    4   62[COMRAM] unsigned int [2]
  1788 ;;  DirectionFou    2   60[COMRAM] const unsigned int 
  1789 ;;  DirectionFou    2   58[COMRAM] const unsigned int 
  1790 ;;  ClearSignalT    2   56[COMRAM] const unsigned int 
  1791 ;;  ResultFalseR    1   55[COMRAM] unsigned char 
  1792 ;;  ResultFalseC    1   54[COMRAM] unsigned char 
  1793 ;;  ResultFalseL    1   53[COMRAM] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      unsigned char 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1803 ;;      Params:         5       0       0       0
  1804 ;;      Locals:        21       0       0       0
  1805 ;;      Temps:          2       0       0       0
  1806 ;;      Totals:        28       0       0       0
  1807 ;;Total ram usage:       28 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    5
  1810 ;; This function calls:
  1811 ;;		___awdiv
  1812 ;;		_delay_tenth_s
  1813 ;;		_grabLeftIR
  1814 ;;		_grabRightIR
  1815 ;;		_stop
  1816 ;;		_turnLeft
  1817 ;;		_turnRight
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text8
  1824  0000B2                     __ptext8:
  1825                           	opt stack 0
  1826  0000B2                     _ScanWithRange:
  1827                           	opt stack 25
  1828                           
  1829                           ;Movement.c: 96: unsigned int SensorResultL[2];
  1830                           ;Movement.c: 97: unsigned int SensorResultC[2];
  1831                           ;Movement.c: 98: unsigned int SensorResultR[2];
  1832                           ;Movement.c: 99: unsigned char ResultFalseL=0;
  1833                           
  1834                           ;incstack = 0
  1835  0000B2  0E00               	movlw	0
  1836  0000B4  6E36               	movwf	ScanWithRange@ResultFalseL,c
  1837                           
  1838                           ;Movement.c: 100: unsigned char ResultFalseC=0;
  1839  0000B6  0E00               	movlw	0
  1840  0000B8  6E37               	movwf	ScanWithRange@ResultFalseC,c
  1841                           
  1842                           ;Movement.c: 101: unsigned char ResultFalseR=0;
  1843  0000BA  0E00               	movlw	0
  1844  0000BC  6E38               	movwf	ScanWithRange@ResultFalseR,c
  1845                           
  1846                           ;Movement.c: 104: const unsigned int ClearSignalTolerance=200;
  1847  0000BE  0E00               	movlw	0
  1848  0000C0  6E3A               	movwf	ScanWithRange@ClearSignalTolerance+1,c
  1849  0000C2  0EC8               	movlw	200
  1850  0000C4  6E39               	movwf	ScanWithRange@ClearSignalTolerance,c
  1851                           
  1852                           ;Movement.c: 105: const unsigned int DirectionFoundLimit=1500;
  1853  0000C6  0E05               	movlw	5
  1854  0000C8  6E3C               	movwf	ScanWithRange@DirectionFoundLimit+1,c
  1855  0000CA  0EDC               	movlw	220
  1856  0000CC  6E3B               	movwf	ScanWithRange@DirectionFoundLimit,c
  1857                           
  1858                           ;Movement.c: 106: const unsigned int DirectionFoundTolerance=500;
  1859  0000CE  0E01               	movlw	1
  1860  0000D0  6E3E               	movwf	ScanWithRange@DirectionFoundTolerance+1,c
  1861  0000D2  0EF4               	movlw	244
  1862  0000D4  6E3D               	movwf	ScanWithRange@DirectionFoundTolerance,c
  1863                           
  1864                           ;Movement.c: 113: stop(mL,mR);
  1865  0000D6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1866  0000DA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1867  0000DE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1868  0000E2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1869  0000E6  EC0F  F006         	call	_stop	;wreg free
  1870                           
  1871                           ;Movement.c: 114: SensorResultC[0]=grabLeftIR();
  1872  0000EA  ECD4  F006         	call	_grabLeftIR	;wreg free
  1873  0000EE  C00F  F043         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1874  0000F2  C010  F044         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1875                           
  1876                           ;Movement.c: 115: SensorResultC[1]=grabRightIR();
  1877  0000F6  EC99  F006         	call	_grabRightIR	;wreg free
  1878  0000FA  C00F  F045         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1879  0000FE  C010  F046         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1880                           
  1881                           ;Movement.c: 118: turnLeft(mL,mR);
  1882  000102  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1883  000106  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1884  00010A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1885  00010E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1886  000112  EC6C  F007         	call	_turnLeft	;wreg free
  1887                           
  1888                           ;Movement.c: 119: delay_tenth_s(tenth_seconds);
  1889  000116  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1890  000118  ECAD  F007         	call	_delay_tenth_s
  1891                           
  1892                           ;Movement.c: 121: stop(mL,mR);
  1893  00011C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1894  000120  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1895  000124  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1896  000128  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1897  00012C  EC0F  F006         	call	_stop	;wreg free
  1898                           
  1899                           ;Movement.c: 122: SensorResultL[0]=grabLeftIR();
  1900  000130  ECD4  F006         	call	_grabLeftIR	;wreg free
  1901  000134  C00F  F03F         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1902  000138  C010  F040         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1903                           
  1904                           ;Movement.c: 123: SensorResultL[1]=grabRightIR();
  1905  00013C  EC99  F006         	call	_grabRightIR	;wreg free
  1906  000140  C00F  F041         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1907  000144  C010  F042         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1908                           
  1909                           ;Movement.c: 126: turnRight(mL,mR);
  1910  000148  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1911  00014C  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1912  000150  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1913  000154  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1914  000158  EC47  F007         	call	_turnRight	;wreg free
  1915                           
  1916                           ;Movement.c: 127: delay_tenth_s(2*tenth_seconds);
  1917  00015C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1918  00015E  0D02               	mullw	2
  1919  000160  50F3               	movf	prodl,w,c
  1920  000162  ECAD  F007         	call	_delay_tenth_s
  1921                           
  1922                           ;Movement.c: 129: stop(mL,mR);
  1923  000166  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1924  00016A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1925  00016E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1926  000172  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1927  000176  EC0F  F006         	call	_stop	;wreg free
  1928                           
  1929                           ;Movement.c: 130: SensorResultR[0]=grabLeftIR();
  1930  00017A  ECD4  F006         	call	_grabLeftIR	;wreg free
  1931  00017E  C00F  F047         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1932  000182  C010  F048         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1933                           
  1934                           ;Movement.c: 131: SensorResultR[1]=grabRightIR();
  1935  000186  EC99  F006         	call	_grabRightIR	;wreg free
  1936  00018A  C00F  F049         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1937  00018E  C010  F04A         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1938                           
  1939                           ;Movement.c: 142: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  1940  000192  503F               	movf	ScanWithRange@SensorResultL,w,c
  1941  000194  2441               	addwf	ScanWithRange@SensorResultL+2,w,c
  1942  000196  6E34               	movwf	??_ScanWithRange& (0+255),c
  1943  000198  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  1944  00019A  2042               	addwfc	ScanWithRange@SensorResultL+3,w,c
  1945  00019C  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1946  00019E  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  1947  0001A0  5C34               	subwf	??_ScanWithRange,w,c
  1948  0001A2  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  1949  0001A4  5835               	subwfb	??_ScanWithRange+1,w,c
  1950  0001A6  B0D8               	btfsc	status,0,c
  1951  0001A8  D00A               	goto	l1968
  1952                           
  1953                           ;Movement.c: 143: SensorResultL[0]=0;
  1954  0001AA  0E00               	movlw	0
  1955  0001AC  6E40               	movwf	ScanWithRange@SensorResultL+1,c
  1956  0001AE  0E00               	movlw	0
  1957  0001B0  6E3F               	movwf	ScanWithRange@SensorResultL,c
  1958                           
  1959                           ;Movement.c: 144: SensorResultL[1]=0;
  1960  0001B2  0E00               	movlw	0
  1961  0001B4  6E42               	movwf	ScanWithRange@SensorResultL+3,c
  1962  0001B6  0E00               	movlw	0
  1963  0001B8  6E41               	movwf	ScanWithRange@SensorResultL+2,c
  1964                           
  1965                           ;Movement.c: 145: ResultFalseL=1;
  1966  0001BA  0E01               	movlw	1
  1967  0001BC  6E36               	movwf	ScanWithRange@ResultFalseL,c
  1968  0001BE                     l1968:
  1969                           
  1970                           ;Movement.c: 146: }
  1971                           ;Movement.c: 147: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  1972  0001BE  5043               	movf	ScanWithRange@SensorResultC,w,c
  1973  0001C0  2445               	addwf	ScanWithRange@SensorResultC+2,w,c
  1974  0001C2  6E34               	movwf	??_ScanWithRange& (0+255),c
  1975  0001C4  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  1976  0001C6  2046               	addwfc	ScanWithRange@SensorResultC+3,w,c
  1977  0001C8  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1978  0001CA  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  1979  0001CC  5C34               	subwf	??_ScanWithRange,w,c
  1980  0001CE  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  1981  0001D0  5835               	subwfb	??_ScanWithRange+1,w,c
  1982  0001D2  B0D8               	btfsc	status,0,c
  1983  0001D4  D00A               	goto	l1972
  1984                           
  1985                           ;Movement.c: 148: SensorResultC[0]=0;
  1986  0001D6  0E00               	movlw	0
  1987  0001D8  6E44               	movwf	ScanWithRange@SensorResultC+1,c
  1988  0001DA  0E00               	movlw	0
  1989  0001DC  6E43               	movwf	ScanWithRange@SensorResultC,c
  1990                           
  1991                           ;Movement.c: 149: SensorResultC[1]=0;
  1992  0001DE  0E00               	movlw	0
  1993  0001E0  6E46               	movwf	ScanWithRange@SensorResultC+3,c
  1994  0001E2  0E00               	movlw	0
  1995  0001E4  6E45               	movwf	ScanWithRange@SensorResultC+2,c
  1996                           
  1997                           ;Movement.c: 150: ResultFalseC=1;
  1998  0001E6  0E01               	movlw	1
  1999  0001E8  6E37               	movwf	ScanWithRange@ResultFalseC,c
  2000  0001EA                     l1972:
  2001                           
  2002                           ;Movement.c: 151: }
  2003                           ;Movement.c: 152: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2004  0001EA  5047               	movf	ScanWithRange@SensorResultR,w,c
  2005  0001EC  2449               	addwf	ScanWithRange@SensorResultR+2,w,c
  2006  0001EE  6E34               	movwf	??_ScanWithRange& (0+255),c
  2007  0001F0  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2008  0001F2  204A               	addwfc	ScanWithRange@SensorResultR+3,w,c
  2009  0001F4  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  2010  0001F6  5039               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2011  0001F8  5C34               	subwf	??_ScanWithRange,w,c
  2012  0001FA  503A               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2013  0001FC  5835               	subwfb	??_ScanWithRange+1,w,c
  2014  0001FE  B0D8               	btfsc	status,0,c
  2015  000200  D00A               	goto	l1976
  2016                           
  2017                           ;Movement.c: 153: SensorResultR[0]=0;
  2018  000202  0E00               	movlw	0
  2019  000204  6E48               	movwf	ScanWithRange@SensorResultR+1,c
  2020  000206  0E00               	movlw	0
  2021  000208  6E47               	movwf	ScanWithRange@SensorResultR,c
  2022                           
  2023                           ;Movement.c: 154: SensorResultR[1]=0;
  2024  00020A  0E00               	movlw	0
  2025  00020C  6E4A               	movwf	ScanWithRange@SensorResultR+3,c
  2026  00020E  0E00               	movlw	0
  2027  000210  6E49               	movwf	ScanWithRange@SensorResultR+2,c
  2028                           
  2029                           ;Movement.c: 155: ResultFalseR=1;
  2030  000212  0E01               	movlw	1
  2031  000214  6E38               	movwf	ScanWithRange@ResultFalseR,c
  2032  000216                     l1976:
  2033                           
  2034                           ;Movement.c: 156: }
  2035                           ;Movement.c: 158: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2036  000216  5037               	movf	ScanWithRange@ResultFalseC,w,c
  2037  000218  C036  F034         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2038  00021C  6A35               	clrf	(??_ScanWithRange+1)& (0+255),c
  2039  00021E  2634               	addwf	??_ScanWithRange,f,c
  2040  000220  0E00               	movlw	0
  2041  000222  2235               	addwfc	??_ScanWithRange+1,f,c
  2042  000224  5038               	movf	ScanWithRange@ResultFalseR,w,c
  2043  000226  2634               	addwf	??_ScanWithRange,f,c
  2044  000228  0E00               	movlw	0
  2045  00022A  2235               	addwfc	??_ScanWithRange+1,f,c
  2046  00022C  0E03               	movlw	3
  2047  00022E  1834               	xorwf	??_ScanWithRange,w,c
  2048  000230  1035               	iorwf	??_ScanWithRange+1,w,c
  2049  000232  A4D8               	btfss	status,2,c
  2050  000234  D01B               	goto	l1990
  2051                           
  2052                           ;Movement.c: 160: turnLeft(mL,mR);
  2053  000236  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2054  00023A  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2055  00023E  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2056  000242  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2057  000246  EC6C  F007         	call	_turnLeft	;wreg free
  2058                           
  2059                           ;Movement.c: 161: delay_tenth_s(5*tenth_seconds);
  2060  00024A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2061  00024C  0D05               	mullw	5
  2062  00024E  50F3               	movf	prodl,w,c
  2063  000250  ECAD  F007         	call	_delay_tenth_s
  2064                           
  2065                           ;Movement.c: 162: stop(mL,mR);
  2066  000254  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2067  000258  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2068  00025C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2069  000260  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2070  000264  EC0F  F006         	call	_stop	;wreg free
  2071                           
  2072                           ;Movement.c: 163: return 3;
  2073  000268  0E03               	movlw	3
  2074  00026A  0012               	return	
  2075  00026C                     l1990:
  2076                           
  2077                           ;Movement.c: 166: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  2078                           ;Movement.c: 167: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2079                           ;Movement.c: 168: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2080  00026C  503F               	movf	ScanWithRange@SensorResultL,w,c
  2081  00026E  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2082  000270  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2083  000272  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2084  000274  B0D8               	btfsc	status,0,c
  2085  000276  D047               	goto	l2010
  2086  000278  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2087  00027A  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2088  00027C  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2089  00027E  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2090  000280  B0D8               	btfsc	status,0,c
  2091  000282  D041               	goto	l2010
  2092  000284  EE20  F041         	lfsr	2,ScanWithRange@SensorResultL+2
  2093  000288  CFDE F034          	movff	postinc2,??_ScanWithRange
  2094  00028C  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2095  000290  1E34               	comf	??_ScanWithRange,f,c
  2096  000292  1E35               	comf	??_ScanWithRange+1,f,c
  2097  000294  4A34               	infsnz	??_ScanWithRange,f,c
  2098  000296  2A35               	incf	??_ScanWithRange+1,f,c
  2099  000298  503F               	movf	ScanWithRange@SensorResultL,w,c
  2100  00029A  2634               	addwf	??_ScanWithRange,f,c
  2101  00029C  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2102  00029E  2235               	addwfc	??_ScanWithRange+1,f,c
  2103  0002A0  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2104  0002A2  5C34               	subwf	??_ScanWithRange,w,c
  2105  0002A4  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2106  0002A6  5835               	subwfb	??_ScanWithRange+1,w,c
  2107  0002A8  A0D8               	btfss	status,0,c
  2108  0002AA  D012               	goto	l1998
  2109  0002AC  C03F  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2110  0002B0  C040  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2111  0002B4  1E34               	comf	??_ScanWithRange,f,c
  2112  0002B6  1E35               	comf	??_ScanWithRange+1,f,c
  2113  0002B8  4A34               	infsnz	??_ScanWithRange,f,c
  2114  0002BA  2A35               	incf	??_ScanWithRange+1,f,c
  2115  0002BC  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2116  0002BE  2634               	addwf	??_ScanWithRange,f,c
  2117  0002C0  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2118  0002C2  2235               	addwfc	??_ScanWithRange+1,f,c
  2119  0002C4  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2120  0002C6  5C34               	subwf	??_ScanWithRange,w,c
  2121  0002C8  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2122  0002CA  5835               	subwfb	??_ScanWithRange+1,w,c
  2123  0002CC  B0D8               	btfsc	status,0,c
  2124  0002CE  D01B               	goto	l2010
  2125  0002D0                     l1998:
  2126                           
  2127                           ;Movement.c: 170: turnLeft(mL,mR);
  2128  0002D0  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2129  0002D4  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2130  0002D8  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2131  0002DC  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2132  0002E0  EC6C  F007         	call	_turnLeft	;wreg free
  2133                           
  2134                           ;Movement.c: 171: delay_tenth_s(2*(tenth_seconds));
  2135  0002E4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2136  0002E6  0D02               	mullw	2
  2137  0002E8  50F3               	movf	prodl,w,c
  2138  0002EA  ECAD  F007         	call	_delay_tenth_s
  2139                           
  2140                           ;Movement.c: 172: stop(mL,mR);
  2141  0002EE  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2142  0002F2  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2143  0002F6  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2144  0002FA  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2145  0002FE  EC0F  F006         	call	_stop	;wreg free
  2146  000302                     l2004:
  2147                           
  2148                           ;Movement.c: 173: return 2;
  2149  000302  0E02               	movlw	2
  2150  000304  0012               	return	
  2151  000306                     l2010:
  2152                           
  2153                           ;Movement.c: 175: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  2154                           ;Movement.c: 176: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  2155  000306  5043               	movf	ScanWithRange@SensorResultC,w,c
  2156  000308  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2157  00030A  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2158  00030C  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2159  00030E  B0D8               	btfsc	status,0,c
  2160  000310  D044               	goto	l2030
  2161  000312  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2162  000314  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2163  000316  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2164  000318  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2165  00031A  B0D8               	btfsc	status,0,c
  2166  00031C  D03E               	goto	l2030
  2167  00031E  EE20  F045         	lfsr	2,ScanWithRange@SensorResultC+2
  2168  000322  CFDE F034          	movff	postinc2,??_ScanWithRange
  2169  000326  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2170  00032A  1E34               	comf	??_ScanWithRange,f,c
  2171  00032C  1E35               	comf	??_ScanWithRange+1,f,c
  2172  00032E  4A34               	infsnz	??_ScanWithRange,f,c
  2173  000330  2A35               	incf	??_ScanWithRange+1,f,c
  2174  000332  5043               	movf	ScanWithRange@SensorResultC,w,c
  2175  000334  2634               	addwf	??_ScanWithRange,f,c
  2176  000336  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2177  000338  2235               	addwfc	??_ScanWithRange+1,f,c
  2178  00033A  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2179  00033C  5C34               	subwf	??_ScanWithRange,w,c
  2180  00033E  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2181  000340  5835               	subwfb	??_ScanWithRange+1,w,c
  2182  000342  A0D8               	btfss	status,0,c
  2183  000344  D012               	goto	l2018
  2184  000346  C043  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  2185  00034A  C044  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  2186  00034E  1E34               	comf	??_ScanWithRange,f,c
  2187  000350  1E35               	comf	??_ScanWithRange+1,f,c
  2188  000352  4A34               	infsnz	??_ScanWithRange,f,c
  2189  000354  2A35               	incf	??_ScanWithRange+1,f,c
  2190  000356  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2191  000358  2634               	addwf	??_ScanWithRange,f,c
  2192  00035A  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2193  00035C  2235               	addwfc	??_ScanWithRange+1,f,c
  2194  00035E  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2195  000360  5C34               	subwf	??_ScanWithRange,w,c
  2196  000362  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2197  000364  5835               	subwfb	??_ScanWithRange+1,w,c
  2198  000366  B0D8               	btfsc	status,0,c
  2199  000368  D018               	goto	l2030
  2200  00036A                     l2018:
  2201                           
  2202                           ;Movement.c: 178: turnLeft(mL,mR);
  2203  00036A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2204  00036E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2205  000372  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2206  000376  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2207  00037A  EC6C  F007         	call	_turnLeft	;wreg free
  2208                           
  2209                           ;Movement.c: 179: delay_tenth_s(tenth_seconds);
  2210  00037E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2211  000380  ECAD  F007         	call	_delay_tenth_s
  2212                           
  2213                           ;Movement.c: 180: stop(mL,mR);
  2214  000384  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2215  000388  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2216  00038C  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2217  000390  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2218  000394  EC0F  F006         	call	_stop	;wreg free
  2219  000398  D7B4               	goto	l2004
  2220  00039A                     l2030:
  2221                           
  2222                           ;Movement.c: 183: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  2223                           ;Movement.c: 184: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  2224  00039A  5047               	movf	ScanWithRange@SensorResultR,w,c
  2225  00039C  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2226  00039E  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2227  0003A0  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2228  0003A2  B0D8               	btfsc	status,0,c
  2229  0003A4  D037               	goto	l2046
  2230  0003A6  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2231  0003A8  5C3B               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2232  0003AA  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2233  0003AC  583C               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2234  0003AE  B0D8               	btfsc	status,0,c
  2235  0003B0  D031               	goto	l2046
  2236  0003B2  EE20  F049         	lfsr	2,ScanWithRange@SensorResultR+2
  2237  0003B6  CFDE F034          	movff	postinc2,??_ScanWithRange
  2238  0003BA  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  2239  0003BE  1E34               	comf	??_ScanWithRange,f,c
  2240  0003C0  1E35               	comf	??_ScanWithRange+1,f,c
  2241  0003C2  4A34               	infsnz	??_ScanWithRange,f,c
  2242  0003C4  2A35               	incf	??_ScanWithRange+1,f,c
  2243  0003C6  5047               	movf	ScanWithRange@SensorResultR,w,c
  2244  0003C8  2634               	addwf	??_ScanWithRange,f,c
  2245  0003CA  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2246  0003CC  2235               	addwfc	??_ScanWithRange+1,f,c
  2247  0003CE  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2248  0003D0  5C34               	subwf	??_ScanWithRange,w,c
  2249  0003D2  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2250  0003D4  5835               	subwfb	??_ScanWithRange+1,w,c
  2251  0003D6  A0D8               	btfss	status,0,c
  2252  0003D8  D012               	goto	l2038
  2253  0003DA  C047  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  2254  0003DE  C048  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  2255  0003E2  1E34               	comf	??_ScanWithRange,f,c
  2256  0003E4  1E35               	comf	??_ScanWithRange+1,f,c
  2257  0003E6  4A34               	infsnz	??_ScanWithRange,f,c
  2258  0003E8  2A35               	incf	??_ScanWithRange+1,f,c
  2259  0003EA  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2260  0003EC  2634               	addwf	??_ScanWithRange,f,c
  2261  0003EE  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2262  0003F0  2235               	addwfc	??_ScanWithRange+1,f,c
  2263  0003F2  503D               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2264  0003F4  5C34               	subwf	??_ScanWithRange,w,c
  2265  0003F6  503E               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2266  0003F8  5835               	subwfb	??_ScanWithRange+1,w,c
  2267  0003FA  B0D8               	btfsc	status,0,c
  2268  0003FC  D00B               	goto	l2046
  2269  0003FE                     l2038:
  2270                           
  2271                           ;Movement.c: 186: stop(mL,mR);
  2272  0003FE  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2273  000402  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2274  000406  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2275  00040A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2276  00040E  EC0F  F006         	call	_stop	;wreg free
  2277  000412  D777               	goto	l2004
  2278  000414                     l2046:
  2279  000414  503F               	movf	ScanWithRange@SensorResultL,w,c
  2280  000416  5C41               	subwf	ScanWithRange@SensorResultL+2,w,c
  2281  000418  5040               	movf	ScanWithRange@SensorResultL+1,w,c
  2282  00041A  5842               	subwfb	ScanWithRange@SensorResultL+3,w,c
  2283  00041C  B0D8               	btfsc	status,0,c
  2284  00041E  D01B               	goto	l2060
  2285                           
  2286                           ;Movement.c: 192: turnLeft(mL,mR);
  2287  000420  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2288  000424  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2289  000428  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2290  00042C  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2291  000430  EC6C  F007         	call	_turnLeft	;wreg free
  2292                           
  2293                           ;Movement.c: 193: delay_tenth_s(3*tenth_seconds);
  2294  000434  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2295  000436  0D03               	mullw	3
  2296  000438  50F3               	movf	prodl,w,c
  2297  00043A  ECAD  F007         	call	_delay_tenth_s
  2298                           
  2299                           ;Movement.c: 194: stop(mL,mR);
  2300  00043E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2301  000442  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2302  000446  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2303  00044A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2304  00044E  EC0F  F006         	call	_stop	;wreg free
  2305  000452                     l2054:
  2306                           
  2307                           ;Movement.c: 195: return 0;
  2308  000452  0E00               	movlw	0
  2309  000454  0012               	return	
  2310  000456                     l2060:
  2311  000456  5049               	movf	ScanWithRange@SensorResultR+2,w,c
  2312  000458  5C47               	subwf	ScanWithRange@SensorResultR,w,c
  2313  00045A  504A               	movf	ScanWithRange@SensorResultR+3,w,c
  2314  00045C  5848               	subwfb	ScanWithRange@SensorResultR+1,w,c
  2315  00045E  B0D8               	btfsc	status,0,c
  2316  000460  D018               	goto	l2074
  2317                           
  2318                           ;Movement.c: 198: turnRight(mL,mR);
  2319  000462  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2320  000466  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2321  00046A  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2322  00046E  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2323  000472  EC47  F007         	call	_turnRight	;wreg free
  2324                           
  2325                           ;Movement.c: 199: delay_tenth_s(tenth_seconds);
  2326  000476  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2327  000478  ECAD  F007         	call	_delay_tenth_s
  2328                           
  2329                           ;Movement.c: 200: stop(mL,mR);
  2330  00047C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2331  000480  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2332  000484  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2333  000488  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2334  00048C  EC0F  F006         	call	_stop	;wreg free
  2335  000490  D7E0               	goto	l2054
  2336  000492                     l2074:
  2337  000492  5041               	movf	ScanWithRange@SensorResultL+2,w,c
  2338  000494  5C3F               	subwf	ScanWithRange@SensorResultL,w,c
  2339  000496  5042               	movf	ScanWithRange@SensorResultL+3,w,c
  2340  000498  5840               	subwfb	ScanWithRange@SensorResultL+1,w,c
  2341  00049A  B0D8               	btfsc	status,0,c
  2342  00049C  D02B               	goto	l2090
  2343  00049E  5043               	movf	ScanWithRange@SensorResultC,w,c
  2344  0004A0  5C45               	subwf	ScanWithRange@SensorResultC+2,w,c
  2345  0004A2  5044               	movf	ScanWithRange@SensorResultC+1,w,c
  2346  0004A4  5846               	subwfb	ScanWithRange@SensorResultC+3,w,c
  2347  0004A6  B0D8               	btfsc	status,0,c
  2348  0004A8  D025               	goto	l2090
  2349                           
  2350                           ;Movement.c: 206: turnLeft(mL,mR);
  2351  0004AA  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2352  0004AE  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2353  0004B2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2354  0004B6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2355  0004BA  EC6C  F007         	call	_turnLeft	;wreg free
  2356                           
  2357                           ;Movement.c: 207: delay_tenth_s((3*tenth_seconds)/2);
  2358  0004BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2359  0004C0  0D03               	mullw	3
  2360  0004C2  CFF3 F015          	movff	prodl,___awdiv@dividend
  2361  0004C6  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  2362  0004CA  0E00               	movlw	0
  2363  0004CC  6E18               	movwf	___awdiv@divisor+1,c
  2364  0004CE  0E02               	movlw	2
  2365  0004D0  6E17               	movwf	___awdiv@divisor,c
  2366  0004D2  EC57  F006         	call	___awdiv	;wreg free
  2367  0004D6  5015               	movf	?___awdiv,w,c
  2368  0004D8  ECAD  F007         	call	_delay_tenth_s
  2369                           
  2370                           ;Movement.c: 208: stop(mL,mR);
  2371  0004DC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2372  0004E0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2373  0004E4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2374  0004E8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2375  0004EC  EC0F  F006         	call	_stop	;wreg free
  2376  0004F0                     l2084:
  2377                           
  2378                           ;Movement.c: 209: return 1;
  2379  0004F0  0E01               	movlw	1
  2380  0004F2  0012               	return	
  2381  0004F4                     l2090:
  2382  0004F4  5047               	movf	ScanWithRange@SensorResultR,w,c
  2383  0004F6  5C49               	subwf	ScanWithRange@SensorResultR+2,w,c
  2384  0004F8  5048               	movf	ScanWithRange@SensorResultR+1,w,c
  2385  0004FA  584A               	subwfb	ScanWithRange@SensorResultR+3,w,c
  2386  0004FC  B0D8               	btfsc	status,0,c
  2387  0004FE  D027               	goto	l2104
  2388  000500  5045               	movf	ScanWithRange@SensorResultC+2,w,c
  2389  000502  5C43               	subwf	ScanWithRange@SensorResultC,w,c
  2390  000504  5046               	movf	ScanWithRange@SensorResultC+3,w,c
  2391  000506  5844               	subwfb	ScanWithRange@SensorResultC+1,w,c
  2392  000508  B0D8               	btfsc	status,0,c
  2393  00050A  D021               	goto	l2104
  2394                           
  2395                           ;Movement.c: 212: turnLeft(mL,mR);
  2396  00050C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2397  000510  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2398  000514  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2399  000518  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2400  00051C  EC6C  F007         	call	_turnLeft	;wreg free
  2401                           
  2402                           ;Movement.c: 213: delay_tenth_s((tenth_seconds)/2);
  2403  000520  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  2404  000524  6A16               	clrf	___awdiv@dividend+1,c
  2405  000526  0E00               	movlw	0
  2406  000528  6E18               	movwf	___awdiv@divisor+1,c
  2407  00052A  0E02               	movlw	2
  2408  00052C  6E17               	movwf	___awdiv@divisor,c
  2409  00052E  EC57  F006         	call	___awdiv	;wreg free
  2410  000532  5015               	movf	?___awdiv,w,c
  2411  000534  ECAD  F007         	call	_delay_tenth_s
  2412                           
  2413                           ;Movement.c: 214: stop(mL,mR);
  2414  000538  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2415  00053C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2416  000540  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2417  000544  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2418  000548  EC0F  F006         	call	_stop	;wreg free
  2419  00054C  D7D1               	goto	l2084
  2420  00054E                     l2104:
  2421                           
  2422                           ;Movement.c: 216: }
  2423                           ;Movement.c: 217: }
  2424                           ;Movement.c: 218: return 0;
  2425  00054E  0E00               	movlw	0
  2426  000550  0012               	return	
  2427  000552                     __end_of_ScanWithRange:
  2428                           	opt stack 0
  2429                           tblptru	equ	0xFF8
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf1	equ	0xFE7
  2436                           fsr1h	equ	0xFE2
  2437                           fsr1l	equ	0xFE1
  2438                           indf2	equ	0xFDF
  2439                           postinc2	equ	0xFDE
  2440                           postdec2	equ	0xFDD
  2441                           fsr2h	equ	0xFDA
  2442                           fsr2l	equ	0xFD9
  2443                           status	equ	0xFD8
  2444                           
  2445 ;; *************** function _ScanIR *****************
  2446 ;; Defined at:
  2447 ;;		line 32 in file "Movement.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2450 ;;		 -> main@mL(9), 
  2451 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2452 ;;		 -> main@mR(9), 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  2455 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  2456 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  2457 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      unsigned char 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2467 ;;      Params:         4       0       0       0
  2468 ;;      Locals:        10       0       0       0
  2469 ;;      Temps:          2       0       0       0
  2470 ;;      Totals:        16       0       0       0
  2471 ;;Total ram usage:       16 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    5
  2474 ;; This function calls:
  2475 ;;		_delay_tenth_s
  2476 ;;		_grabLeftIR
  2477 ;;		_grabRightIR
  2478 ;;		_stop
  2479 ;;		_turnLeft
  2480 ;;		_turnRight
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text9
  2487  000852                     __ptext9:
  2488                           	opt stack 0
  2489  000852                     _ScanIR:
  2490                           	opt stack 25
  2491                           
  2492                           ;Movement.c: 34: unsigned int SensorResult[2];
  2493                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  2494                           
  2495                           ;incstack = 0
  2496  000852  0E00               	movlw	0
  2497  000854  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  2498  000856  0EC8               	movlw	200
  2499  000858  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  2500                           
  2501                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  2502  00085A  0E05               	movlw	5
  2503  00085C  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  2504  00085E  0EDC               	movlw	220
  2505  000860  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  2506                           
  2507                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  2508  000862  0E01               	movlw	1
  2509  000864  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  2510  000866  0EF4               	movlw	244
  2511  000868  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  2512                           
  2513                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  2514  00086A  ECD4  F006         	call	_grabLeftIR	;wreg free
  2515  00086E  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  2516  000872  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  2517                           
  2518                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  2519  000876  EC99  F006         	call	_grabRightIR	;wreg free
  2520  00087A  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  2521  00087E  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  2522                           
  2523                           ;Movement.c: 46: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  2524  000882  503B               	movf	ScanIR@SensorResult,w,c
  2525  000884  243D               	addwf	ScanIR@SensorResult+2,w,c
  2526  000886  6E33               	movwf	??_ScanIR& (0+255),c
  2527  000888  503C               	movf	ScanIR@SensorResult+1,w,c
  2528  00088A  203E               	addwfc	ScanIR@SensorResult+3,w,c
  2529  00088C  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  2530  00088E  5033               	movf	??_ScanIR,w,c
  2531  000890  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  2532  000892  5034               	movf	??_ScanIR+1,w,c
  2533  000894  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  2534  000896  B0D8               	btfsc	status,0,c
  2535  000898  D085               	goto	l2156
  2536                           
  2537                           ;Movement.c: 49: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  2538                           ;Movement.c: 50: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  2539                           ;Movement.c: 51: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  2540  00089A  503B               	movf	ScanIR@SensorResult,w,c
  2541  00089C  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2542  00089E  503C               	movf	ScanIR@SensorResult+1,w,c
  2543  0008A0  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2544  0008A2  B0D8               	btfsc	status,0,c
  2545  0008A4  D02E               	goto	l2130
  2546  0008A6  503D               	movf	ScanIR@SensorResult+2,w,c
  2547  0008A8  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2548  0008AA  503E               	movf	ScanIR@SensorResult+3,w,c
  2549  0008AC  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2550  0008AE  B0D8               	btfsc	status,0,c
  2551  0008B0  D028               	goto	l2130
  2552  0008B2  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  2553  0008B6  CFDE F033          	movff	postinc2,??_ScanIR
  2554  0008BA  CFDD F034          	movff	postdec2,??_ScanIR+1
  2555  0008BE  1E33               	comf	??_ScanIR,f,c
  2556  0008C0  1E34               	comf	??_ScanIR+1,f,c
  2557  0008C2  4A33               	infsnz	??_ScanIR,f,c
  2558  0008C4  2A34               	incf	??_ScanIR+1,f,c
  2559  0008C6  503B               	movf	ScanIR@SensorResult,w,c
  2560  0008C8  2633               	addwf	??_ScanIR,f,c
  2561  0008CA  503C               	movf	ScanIR@SensorResult+1,w,c
  2562  0008CC  2234               	addwfc	??_ScanIR+1,f,c
  2563  0008CE  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2564  0008D0  5C33               	subwf	??_ScanIR,w,c
  2565  0008D2  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2566  0008D4  5834               	subwfb	??_ScanIR+1,w,c
  2567  0008D6  A0D8               	btfss	status,0,c
  2568  0008D8  D012               	goto	l2124
  2569  0008DA  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  2570  0008DE  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  2571  0008E2  1E33               	comf	??_ScanIR,f,c
  2572  0008E4  1E34               	comf	??_ScanIR+1,f,c
  2573  0008E6  4A33               	infsnz	??_ScanIR,f,c
  2574  0008E8  2A34               	incf	??_ScanIR+1,f,c
  2575  0008EA  503D               	movf	ScanIR@SensorResult+2,w,c
  2576  0008EC  2633               	addwf	??_ScanIR,f,c
  2577  0008EE  503E               	movf	ScanIR@SensorResult+3,w,c
  2578  0008F0  2234               	addwfc	??_ScanIR+1,f,c
  2579  0008F2  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2580  0008F4  5C33               	subwf	??_ScanIR,w,c
  2581  0008F6  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2582  0008F8  5834               	subwfb	??_ScanIR+1,w,c
  2583  0008FA  B0D8               	btfsc	status,0,c
  2584  0008FC  D002               	goto	l2130
  2585  0008FE                     l2124:
  2586                           
  2587                           ;Movement.c: 52: return 2;
  2588  0008FE  0E02               	movlw	2
  2589  000900  0012               	return	
  2590  000902                     l2130:
  2591  000902  503B               	movf	ScanIR@SensorResult,w,c
  2592  000904  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2593  000906  503C               	movf	ScanIR@SensorResult+1,w,c
  2594  000908  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2595  00090A  A0D8               	btfss	status,0,c
  2596  00090C  D023               	goto	l2144
  2597                           
  2598                           ;Movement.c: 55: stop(mL,mR);
  2599  00090E  C02F  F026         	movff	ScanIR@mL,stop@mL
  2600  000912  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2601  000916  C031  F028         	movff	ScanIR@mR,stop@mR
  2602  00091A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2603  00091E  EC0F  F006         	call	_stop	;wreg free
  2604                           
  2605                           ;Movement.c: 56: turnLeft(mL,mR);
  2606  000922  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2607  000926  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2608  00092A  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2609  00092E  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2610  000932  EC6C  F007         	call	_turnLeft	;wreg free
  2611                           
  2612                           ;Movement.c: 57: delay_tenth_s(3);
  2613  000936  0E03               	movlw	3
  2614  000938  ECAD  F007         	call	_delay_tenth_s
  2615                           
  2616                           ;Movement.c: 58: stop(mL,mR);
  2617  00093C  C02F  F026         	movff	ScanIR@mL,stop@mL
  2618  000940  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2619  000944  C031  F028         	movff	ScanIR@mR,stop@mR
  2620  000948  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2621  00094C  EC0F  F006         	call	_stop	;wreg free
  2622  000950                     l2138:
  2623                           
  2624                           ;Movement.c: 59: return 1;
  2625  000950  0E01               	movlw	1
  2626  000952  0012               	return	
  2627  000954                     l2144:
  2628  000954  503B               	movf	ScanIR@SensorResult,w,c
  2629  000956  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2630  000958  503C               	movf	ScanIR@SensorResult+1,w,c
  2631  00095A  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2632  00095C  B0D8               	btfsc	status,0,c
  2633  00095E  D069               	goto	l2184
  2634                           
  2635                           ;Movement.c: 62: stop(mL,mR);
  2636  000960  C02F  F026         	movff	ScanIR@mL,stop@mL
  2637  000964  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2638  000968  C031  F028         	movff	ScanIR@mR,stop@mR
  2639  00096C  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2640  000970  EC0F  F006         	call	_stop	;wreg free
  2641                           
  2642                           ;Movement.c: 63: turnRight(mL,mR);
  2643  000974  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2644  000978  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2645  00097C  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2646  000980  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2647  000984  EC47  F007         	call	_turnRight	;wreg free
  2648                           
  2649                           ;Movement.c: 64: delay_tenth_s(3);
  2650  000988  0E03               	movlw	3
  2651  00098A  ECAD  F007         	call	_delay_tenth_s
  2652                           
  2653                           ;Movement.c: 65: stop(mL,mR);
  2654  00098E  C02F  F026         	movff	ScanIR@mL,stop@mL
  2655  000992  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2656  000996  C031  F028         	movff	ScanIR@mR,stop@mR
  2657  00099A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2658  00099E  EC0F  F006         	call	_stop	;wreg free
  2659  0009A2  D7D6               	goto	l2138
  2660  0009A4                     l2156:
  2661                           
  2662                           ;Movement.c: 70: stop(mL,mR);
  2663  0009A4  C02F  F026         	movff	ScanIR@mL,stop@mL
  2664  0009A8  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2665  0009AC  C031  F028         	movff	ScanIR@mR,stop@mR
  2666  0009B0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2667  0009B4  EC0F  F006         	call	_stop	;wreg free
  2668                           
  2669                           ;Movement.c: 73: if (SensorResult[0]<=SensorResult[1]) {
  2670  0009B8  503B               	movf	ScanIR@SensorResult,w,c
  2671  0009BA  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2672  0009BC  503C               	movf	ScanIR@SensorResult+1,w,c
  2673  0009BE  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2674  0009C0  A0D8               	btfss	status,0,c
  2675  0009C2  D019               	goto	l2172
  2676                           
  2677                           ;Movement.c: 74: turnLeft(mL,mR);
  2678  0009C4  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2679  0009C8  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2680  0009CC  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2681  0009D0  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2682  0009D4  EC6C  F007         	call	_turnLeft	;wreg free
  2683                           
  2684                           ;Movement.c: 75: delay_tenth_s(5);
  2685  0009D8  0E05               	movlw	5
  2686  0009DA  ECAD  F007         	call	_delay_tenth_s
  2687                           
  2688                           ;Movement.c: 76: stop(mL,mR);
  2689  0009DE  C02F  F026         	movff	ScanIR@mL,stop@mL
  2690  0009E2  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2691  0009E6  C031  F028         	movff	ScanIR@mR,stop@mR
  2692  0009EA  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2693  0009EE  EC0F  F006         	call	_stop	;wreg free
  2694  0009F2                     l2166:
  2695                           
  2696                           ;Movement.c: 77: return 0;
  2697  0009F2  0E00               	movlw	0
  2698  0009F4  0012               	return	
  2699  0009F6                     l2172:
  2700  0009F6  503B               	movf	ScanIR@SensorResult,w,c
  2701  0009F8  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2702  0009FA  503C               	movf	ScanIR@SensorResult+1,w,c
  2703  0009FC  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2704  0009FE  B0D8               	btfsc	status,0,c
  2705  000A00  D018               	goto	l2184
  2706                           
  2707                           ;Movement.c: 80: turnRight(mL,mR);
  2708  000A02  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2709  000A06  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2710  000A0A  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2711  000A0E  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2712  000A12  EC47  F007         	call	_turnRight	;wreg free
  2713                           
  2714                           ;Movement.c: 81: delay_tenth_s(5);
  2715  000A16  0E05               	movlw	5
  2716  000A18  ECAD  F007         	call	_delay_tenth_s
  2717                           
  2718                           ;Movement.c: 82: stop(mL,mR);
  2719  000A1C  C02F  F026         	movff	ScanIR@mL,stop@mL
  2720  000A20  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2721  000A24  C031  F028         	movff	ScanIR@mR,stop@mR
  2722  000A28  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2723  000A2C  EC0F  F006         	call	_stop	;wreg free
  2724  000A30  D7E0               	goto	l2166
  2725  000A32                     l2184:
  2726                           
  2727                           ;Movement.c: 84: }
  2728                           ;Movement.c: 85: }
  2729                           ;Movement.c: 86: return 0;
  2730  000A32  0E00               	movlw	0
  2731  000A34  0012               	return	
  2732  000A36                     __end_of_ScanIR:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           prodh	equ	0xFF4
  2736                           prodl	equ	0xFF3
  2737                           intcon	equ	0xFF2
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           indf1	equ	0xFE7
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _turnRight *****************
  2751 ;; Defined at:
  2752 ;;		line 98 in file "dc_motor.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2755 ;;		 -> main@mL(9), 
  2756 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2757 ;;		 -> main@mR(9), 
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;		None               void
  2762 ;; Registers used:
  2763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2769 ;;      Params:         4       0       0       0
  2770 ;;      Locals:         0       0       0       0
  2771 ;;      Temps:          0       0       0       0
  2772 ;;      Totals:         4       0       0       0
  2773 ;;Total ram usage:        4 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    4
  2776 ;; This function calls:
  2777 ;;		_fullSpeedAhead
  2778 ;;		_stop
  2779 ;; This function is called by:
  2780 ;;		_ScanIR
  2781 ;;		_ScanWithRange
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text10
  2786  000E8E                     __ptext10:
  2787                           	opt stack 0
  2788  000E8E                     _turnRight:
  2789                           	opt stack 25
  2790                           
  2791                           ;dc_motor.c: 100: stop(mL, mR);
  2792                           
  2793                           ;incstack = 0
  2794  000E8E  C02B  F026         	movff	turnRight@mL,stop@mL
  2795  000E92  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2796  000E96  C02D  F028         	movff	turnRight@mR,stop@mR
  2797  000E9A  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2798  000E9E  EC0F  F006         	call	_stop	;wreg free
  2799                           
  2800                           ;dc_motor.c: 102: mL->direction=1;
  2801  000EA2  EE20 F001          	lfsr	2,1
  2802  000EA6  502B               	movf	turnRight@mL,w,c
  2803  000EA8  26D9               	addwf	fsr2l,f,c
  2804  000EAA  502C               	movf	turnRight@mL+1,w,c
  2805  000EAC  22DA               	addwfc	fsr2h,f,c
  2806  000EAE  0E01               	movlw	1
  2807  000EB0  6EDF               	movwf	indf2,c
  2808                           
  2809                           ;dc_motor.c: 103: mR->direction=0;
  2810  000EB2  EE20 F001          	lfsr	2,1
  2811  000EB6  502D               	movf	turnRight@mR,w,c
  2812  000EB8  26D9               	addwf	fsr2l,f,c
  2813  000EBA  502E               	movf	turnRight@mR+1,w,c
  2814  000EBC  22DA               	addwfc	fsr2h,f,c
  2815  000EBE  0E00               	movlw	0
  2816  000EC0  6EDF               	movwf	indf2,c
  2817                           
  2818                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2819  000EC2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2820  000EC6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2821  000ECA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2822  000ECE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2823  000ED2  EC0F  F007         	call	_fullSpeedAhead	;wreg free
  2824  000ED6  0012               	return		;funcret
  2825  000ED8                     __end_of_turnRight:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           prodh	equ	0xFF4
  2829                           prodl	equ	0xFF3
  2830                           intcon	equ	0xFF2
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           indf1	equ	0xFE7
  2834                           fsr1h	equ	0xFE2
  2835                           fsr1l	equ	0xFE1
  2836                           indf2	equ	0xFDF
  2837                           postinc2	equ	0xFDE
  2838                           postdec2	equ	0xFDD
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _turnLeft *****************
  2844 ;; Defined at:
  2845 ;;		line 87 in file "dc_motor.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2848 ;;		 -> main@mL(9), 
  2849 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2850 ;;		 -> main@mR(9), 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2862 ;;      Params:         4       0       0       0
  2863 ;;      Locals:         0       0       0       0
  2864 ;;      Temps:          0       0       0       0
  2865 ;;      Totals:         4       0       0       0
  2866 ;;Total ram usage:        4 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    4
  2869 ;; This function calls:
  2870 ;;		_fullSpeedAhead
  2871 ;;		_stop
  2872 ;; This function is called by:
  2873 ;;		_ScanIR
  2874 ;;		_ScanWithRange
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text11
  2879  000ED8                     __ptext11:
  2880                           	opt stack 0
  2881  000ED8                     _turnLeft:
  2882                           	opt stack 25
  2883                           
  2884                           ;dc_motor.c: 89: stop(mL, mR);
  2885                           
  2886                           ;incstack = 0
  2887  000ED8  C02B  F026         	movff	turnLeft@mL,stop@mL
  2888  000EDC  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2889  000EE0  C02D  F028         	movff	turnLeft@mR,stop@mR
  2890  000EE4  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2891  000EE8  EC0F  F006         	call	_stop	;wreg free
  2892                           
  2893                           ;dc_motor.c: 91: mL->direction=0;
  2894  000EEC  EE20 F001          	lfsr	2,1
  2895  000EF0  502B               	movf	turnLeft@mL,w,c
  2896  000EF2  26D9               	addwf	fsr2l,f,c
  2897  000EF4  502C               	movf	turnLeft@mL+1,w,c
  2898  000EF6  22DA               	addwfc	fsr2h,f,c
  2899  000EF8  0E00               	movlw	0
  2900  000EFA  6EDF               	movwf	indf2,c
  2901                           
  2902                           ;dc_motor.c: 92: mR->direction=1;
  2903  000EFC  EE20 F001          	lfsr	2,1
  2904  000F00  502D               	movf	turnLeft@mR,w,c
  2905  000F02  26D9               	addwf	fsr2l,f,c
  2906  000F04  502E               	movf	turnLeft@mR+1,w,c
  2907  000F06  22DA               	addwfc	fsr2h,f,c
  2908  000F08  0E01               	movlw	1
  2909  000F0A  6EDF               	movwf	indf2,c
  2910                           
  2911                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2912  000F0C  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2913  000F10  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2914  000F14  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2915  000F18  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2916  000F1C  EC0F  F007         	call	_fullSpeedAhead	;wreg free
  2917  000F20  0012               	return		;funcret
  2918  000F22                     __end_of_turnLeft:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           prodh	equ	0xFF4
  2922                           prodl	equ	0xFF3
  2923                           intcon	equ	0xFF2
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           indf1	equ	0xFE7
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           indf2	equ	0xFDF
  2930                           postinc2	equ	0xFDE
  2931                           postdec2	equ	0xFDD
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _stop *****************
  2937 ;; Defined at:
  2938 ;;		line 67 in file "dc_motor.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2941 ;;		 -> main@mL(9), 
  2942 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2943 ;;		 -> main@mR(9), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;		None               void
  2948 ;; Registers used:
  2949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2955 ;;      Params:         4       0       0       0
  2956 ;;      Locals:         0       0       0       0
  2957 ;;      Temps:          0       0       0       0
  2958 ;;      Totals:         4       0       0       0
  2959 ;;Total ram usage:        4 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    3
  2962 ;; This function calls:
  2963 ;;		_setMotorPWM
  2964 ;; This function is called by:
  2965 ;;		_main
  2966 ;;		_turnLeft
  2967 ;;		_turnRight
  2968 ;;		_ScanIR
  2969 ;;		_ScanWithRange
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text12
  2974  000C1E                     __ptext12:
  2975                           	opt stack 0
  2976  000C1E                     _stop:
  2977                           	opt stack 27
  2978                           
  2979                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2980                           
  2981                           ;incstack = 0
  2982  000C1E  D028               	goto	l1820
  2983  000C20                     l1806:
  2984                           
  2985                           ;dc_motor.c: 71: if(mL->power>0){
  2986  000C20  C026  FFD9         	movff	stop@mL,fsr2l
  2987  000C24  C027  FFDA         	movff	stop@mL+1,fsr2h
  2988  000C28  50DF               	movf	indf2,w,c
  2989  000C2A  B4D8               	btfsc	status,2,c
  2990  000C2C  D005               	goto	l1810
  2991                           
  2992                           ;dc_motor.c: 72: mL->power--;
  2993  000C2E  C026  FFD9         	movff	stop@mL,fsr2l
  2994  000C32  C027  FFDA         	movff	stop@mL+1,fsr2h
  2995  000C36  06DF               	decf	indf2,f,c
  2996  000C38                     l1810:
  2997                           
  2998                           ;dc_motor.c: 73: }
  2999                           ;dc_motor.c: 74: if(mR->power>0){
  3000  000C38  C028  FFD9         	movff	stop@mR,fsr2l
  3001  000C3C  C029  FFDA         	movff	stop@mR+1,fsr2h
  3002  000C40  50DF               	movf	indf2,w,c
  3003  000C42  B4D8               	btfsc	status,2,c
  3004  000C44  D005               	goto	l1814
  3005                           
  3006                           ;dc_motor.c: 75: mR->power--;
  3007  000C46  C028  FFD9         	movff	stop@mR,fsr2l
  3008  000C4A  C029  FFDA         	movff	stop@mR+1,fsr2h
  3009  000C4E  06DF               	decf	indf2,f,c
  3010  000C50                     l1814:
  3011                           
  3012                           ;dc_motor.c: 76: }
  3013                           ;dc_motor.c: 77: setMotorPWM(mL);
  3014  000C50  C026  F01D         	movff	stop@mL,setMotorPWM@m
  3015  000C54  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  3016  000C58  EC1B  F005         	call	_setMotorPWM	;wreg free
  3017                           
  3018                           ;dc_motor.c: 78: setMotorPWM(mR);
  3019  000C5C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  3020  000C60  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  3021  000C64  EC1B  F005         	call	_setMotorPWM	;wreg free
  3022                           
  3023                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3024  000C68  0E21               	movlw	33
  3025  000C6A                     u1827:
  3026  000C6A  2EE8               	decfsz	wreg,f,c
  3027  000C6C  D7FE               	goto	u1827
  3028  000C6E  F000               	nop	
  3029  000C70                     l1820:
  3030  000C70  C026  FFD9         	movff	stop@mL,fsr2l
  3031  000C74  C027  FFDA         	movff	stop@mL+1,fsr2h
  3032  000C78  50DF               	movf	indf2,w,c
  3033  000C7A  A4D8               	btfss	status,2,c
  3034  000C7C  D7D1               	goto	l1806
  3035  000C7E  C028  FFD9         	movff	stop@mR,fsr2l
  3036  000C82  C029  FFDA         	movff	stop@mR+1,fsr2h
  3037  000C86  50DF               	movf	indf2,w,c
  3038  000C88  A4D8               	btfss	status,2,c
  3039  000C8A  D7CA               	goto	l1806
  3040                           
  3041                           ;dc_motor.c: 80: }
  3042                           ;dc_motor.c: 81: mL->direction=1;
  3043  000C8C  EE20 F001          	lfsr	2,1
  3044  000C90  5026               	movf	stop@mL,w,c
  3045  000C92  26D9               	addwf	fsr2l,f,c
  3046  000C94  5027               	movf	stop@mL+1,w,c
  3047  000C96  22DA               	addwfc	fsr2h,f,c
  3048  000C98  0E01               	movlw	1
  3049  000C9A  6EDF               	movwf	indf2,c
  3050                           
  3051                           ;dc_motor.c: 82: mR->direction=1;
  3052  000C9C  EE20 F001          	lfsr	2,1
  3053  000CA0  5028               	movf	stop@mR,w,c
  3054  000CA2  26D9               	addwf	fsr2l,f,c
  3055  000CA4  5029               	movf	stop@mR+1,w,c
  3056  000CA6  22DA               	addwfc	fsr2h,f,c
  3057  000CA8  0E01               	movlw	1
  3058  000CAA  6EDF               	movwf	indf2,c
  3059  000CAC  0012               	return		;funcret
  3060  000CAE                     __end_of_stop:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           indf1	equ	0xFE7
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           fsr2h	equ	0xFDA
  3075                           fsr2l	equ	0xFD9
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _fullSpeedAhead *****************
  3079 ;; Defined at:
  3080 ;;		line 108 in file "dc_motor.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3083 ;;		 -> main@mL(9), 
  3084 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3085 ;;		 -> main@mR(9), 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;		None               void
  3090 ;; Registers used:
  3091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3097 ;;      Params:         4       0       0       0
  3098 ;;      Locals:         0       0       0       0
  3099 ;;      Temps:          1       0       0       0
  3100 ;;      Totals:         5       0       0       0
  3101 ;;Total ram usage:        5 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    3
  3104 ;; This function calls:
  3105 ;;		_setMotorPWM
  3106 ;; This function is called by:
  3107 ;;		_main
  3108 ;;		_turnLeft
  3109 ;;		_turnRight
  3110 ;;		_fullSpeedBack
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text13
  3115  000E1E                     __ptext13:
  3116                           	opt stack 0
  3117  000E1E                     _fullSpeedAhead:
  3118                           	opt stack 26
  3119                           
  3120                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  3121                           
  3122                           ;incstack = 0
  3123  000E1E  D028               	goto	l156
  3124  000E20                     l1788:
  3125                           
  3126                           ;dc_motor.c: 112: if(mL->power<100){
  3127  000E20  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3128  000E24  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3129  000E28  0E64               	movlw	100
  3130  000E2A  60DF               	cpfslt	indf2,c
  3131  000E2C  D005               	goto	l1792
  3132                           
  3133                           ;dc_motor.c: 113: mL->power++;
  3134  000E2E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3135  000E32  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3136  000E36  2ADF               	incf	indf2,f,c
  3137  000E38                     l1792:
  3138                           
  3139                           ;dc_motor.c: 114: }
  3140                           ;dc_motor.c: 115: if(mR->power<100){
  3141  000E38  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3142  000E3C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3143  000E40  0E64               	movlw	100
  3144  000E42  60DF               	cpfslt	indf2,c
  3145  000E44  D005               	goto	l1796
  3146                           
  3147                           ;dc_motor.c: 116: mR->power++;
  3148  000E46  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3149  000E4A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3150  000E4E  2ADF               	incf	indf2,f,c
  3151  000E50                     l1796:
  3152                           
  3153                           ;dc_motor.c: 117: }
  3154                           ;dc_motor.c: 118: setMotorPWM(mL);
  3155  000E50  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3156  000E54  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3157  000E58  EC1B  F005         	call	_setMotorPWM	;wreg free
  3158                           
  3159                           ;dc_motor.c: 119: setMotorPWM(mR);
  3160  000E5C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3161  000E60  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3162  000E64  EC1B  F005         	call	_setMotorPWM	;wreg free
  3163                           
  3164                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3165  000E68  0E21               	movlw	33
  3166  000E6A                     u1837:
  3167  000E6A  2EE8               	decfsz	wreg,f,c
  3168  000E6C  D7FE               	goto	u1837
  3169  000E6E  F000               	nop	
  3170  000E70                     l156:
  3171  000E70  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3172  000E74  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3173  000E78  0E63               	movlw	99
  3174  000E7A  64DF               	cpfsgt	indf2,c
  3175  000E7C  D7D1               	goto	l1788
  3176  000E7E  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3177  000E82  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3178  000E86  0E63               	movlw	99
  3179  000E88  64DF               	cpfsgt	indf2,c
  3180  000E8A  D7CA               	goto	l1788
  3181  000E8C  0012               	return	
  3182  000E8E                     __end_of_fullSpeedAhead:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           prodh	equ	0xFF4
  3186                           prodl	equ	0xFF3
  3187                           intcon	equ	0xFF2
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           indf1	equ	0xFE7
  3191                           fsr1h	equ	0xFE2
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _setMotorPWM *****************
  3201 ;; Defined at:
  3202 ;;		line 26 in file "dc_motor.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  m               2   28[COMRAM] PTR struct DC_motor
  3205 ;;		 -> main@mR(9), main@mL(9), 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  PWMduty         2   35[COMRAM] int 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;		None               void
  3210 ;; Registers used:
  3211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3217 ;;      Params:         2       0       0       0
  3218 ;;      Locals:         2       0       0       0
  3219 ;;      Temps:          5       0       0       0
  3220 ;;      Totals:         9       0       0       0
  3221 ;;Total ram usage:        9 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    2
  3224 ;; This function calls:
  3225 ;;		___awdiv
  3226 ;;		___wmul
  3227 ;; This function is called by:
  3228 ;;		_stop
  3229 ;;		_fullSpeedAhead
  3230 ;;		_setMotorFullSpeed
  3231 ;;		_stopMotor
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text14
  3236  000A36                     __ptext14:
  3237                           	opt stack 0
  3238  000A36                     _setMotorPWM:
  3239                           	opt stack 27
  3240                           
  3241                           ;dc_motor.c: 28: int PWMduty;
  3242                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3243                           
  3244                           ;incstack = 0
  3245  000A36  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  3246  000A3A  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3247  000A3E  50DF               	movf	indf2,w,c
  3248  000A40  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3249  000A42  501F               	movf	??_setMotorPWM,w,c
  3250  000A44  6E0F               	movwf	___wmul@multiplier,c
  3251  000A46  6A10               	clrf	___wmul@multiplier+1,c
  3252  000A48  EE20 F007          	lfsr	2,7
  3253  000A4C  501D               	movf	setMotorPWM@m,w,c
  3254  000A4E  26D9               	addwf	fsr2l,f,c
  3255  000A50  501E               	movf	setMotorPWM@m+1,w,c
  3256  000A52  22DA               	addwfc	fsr2h,f,c
  3257  000A54  CFDE F011          	movff	postinc2,___wmul@multiplicand
  3258  000A58  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  3259  000A5C  EC10  F008         	call	___wmul	;wreg free
  3260  000A60  C00F  F015         	movff	?___wmul,___awdiv@dividend
  3261  000A64  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  3262  000A68  0E00               	movlw	0
  3263  000A6A  6E18               	movwf	___awdiv@divisor+1,c
  3264  000A6C  0E64               	movlw	100
  3265  000A6E  6E17               	movwf	___awdiv@divisor,c
  3266  000A70  EC57  F006         	call	___awdiv	;wreg free
  3267  000A74  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  3268  000A78  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3269                           
  3270                           ;dc_motor.c: 32: if (m->direction)
  3271  000A7C  EE20 F001          	lfsr	2,1
  3272  000A80  501D               	movf	setMotorPWM@m,w,c
  3273  000A82  26D9               	addwf	fsr2l,f,c
  3274  000A84  501E               	movf	setMotorPWM@m+1,w,c
  3275  000A86  22DA               	addwfc	fsr2h,f,c
  3276  000A88  50DF               	movf	indf2,w,c
  3277  000A8A  B4D8               	btfsc	status,2,c
  3278  000A8C  D02C               	goto	l1784
  3279                           
  3280                           ;dc_motor.c: 33: {
  3281                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3282  000A8E  EE20 F006          	lfsr	2,6
  3283  000A92  501D               	movf	setMotorPWM@m,w,c
  3284  000A94  26D9               	addwf	fsr2l,f,c
  3285  000A96  501E               	movf	setMotorPWM@m+1,w,c
  3286  000A98  22DA               	addwfc	fsr2h,f,c
  3287  000A9A  50DF               	movf	indf2,w,c
  3288  000A9C  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3289  000A9E  0E01               	movlw	1
  3290  000AA0  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3291  000AA2  2A1F               	incf	??_setMotorPWM,f,c
  3292  000AA4  D002               	goto	u1074
  3293  000AA6                     u1075:
  3294  000AA6  90D8               	bcf	status,0,c
  3295  000AA8  3620               	rlcf	??_setMotorPWM+1,f,c
  3296  000AAA                     u1074:
  3297  000AAA  2E1F               	decfsz	??_setMotorPWM,f,c
  3298  000AAC  D7FC               	goto	u1075
  3299  000AAE  5020               	movf	??_setMotorPWM+1,w,c
  3300  000AB0  108A               	iorwf	3978,w,c	;volatile
  3301  000AB2  6E8A               	movwf	3978,c	;volatile
  3302                           
  3303                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3304  000AB4  EE20 F007          	lfsr	2,7
  3305  000AB8  501D               	movf	setMotorPWM@m,w,c
  3306  000ABA  26D9               	addwf	fsr2l,f,c
  3307  000ABC  501E               	movf	setMotorPWM@m+1,w,c
  3308  000ABE  22DA               	addwfc	fsr2h,f,c
  3309  000AC0  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3310  000AC4  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3311  000AC8  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3312  000ACC  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3313  000AD0  1E21               	comf	??_setMotorPWM+2,f,c
  3314  000AD2  1E22               	comf	??_setMotorPWM+3,f,c
  3315  000AD4  4A21               	infsnz	??_setMotorPWM+2,f,c
  3316  000AD6  2A22               	incf	??_setMotorPWM+3,f,c
  3317  000AD8  501F               	movf	??_setMotorPWM,w,c
  3318  000ADA  2421               	addwf	??_setMotorPWM+2,w,c
  3319  000ADC  6E24               	movwf	setMotorPWM@PWMduty,c
  3320  000ADE  5020               	movf	??_setMotorPWM+1,w,c
  3321  000AE0  2022               	addwfc	??_setMotorPWM+3,w,c
  3322  000AE2  6E25               	movwf	setMotorPWM@PWMduty+1,c
  3323                           
  3324                           ;dc_motor.c: 36: }
  3325  000AE4  D014               	goto	l126
  3326  000AE6                     l1784:
  3327                           
  3328                           ;dc_motor.c: 37: else
  3329                           ;dc_motor.c: 38: {
  3330                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3331  000AE6  EE20 F006          	lfsr	2,6
  3332  000AEA  501D               	movf	setMotorPWM@m,w,c
  3333  000AEC  26D9               	addwf	fsr2l,f,c
  3334  000AEE  501E               	movf	setMotorPWM@m+1,w,c
  3335  000AF0  22DA               	addwfc	fsr2h,f,c
  3336  000AF2  50DF               	movf	indf2,w,c
  3337  000AF4  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3338  000AF6  0E01               	movlw	1
  3339  000AF8  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3340  000AFA  2A1F               	incf	??_setMotorPWM,f,c
  3341  000AFC  D002               	goto	u1084
  3342  000AFE                     u1085:
  3343  000AFE  90D8               	bcf	status,0,c
  3344  000B00  3620               	rlcf	??_setMotorPWM+1,f,c
  3345  000B02                     u1084:
  3346  000B02  2E1F               	decfsz	??_setMotorPWM,f,c
  3347  000B04  D7FC               	goto	u1085
  3348  000B06  5020               	movf	??_setMotorPWM+1,w,c
  3349  000B08  0AFF               	xorlw	255
  3350  000B0A  148A               	andwf	3978,w,c	;volatile
  3351  000B0C  6E8A               	movwf	3978,c	;volatile
  3352  000B0E                     l126:
  3353                           
  3354                           ;dc_motor.c: 40: }
  3355                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3356  000B0E  EE20 F002          	lfsr	2,2
  3357  000B12  501D               	movf	setMotorPWM@m,w,c
  3358  000B14  26D9               	addwf	fsr2l,f,c
  3359  000B16  501E               	movf	setMotorPWM@m+1,w,c
  3360  000B18  22DA               	addwfc	fsr2h,f,c
  3361  000B1A  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3362  000B1E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3363  000B22  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3364  000B26  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3365  000B2A  4424               	rlncf	setMotorPWM@PWMduty,w,c
  3366  000B2C  46E8               	rlncf	wreg,f,c
  3367  000B2E  0BFC               	andlw	252
  3368  000B30  6EDF               	movwf	indf2,c
  3369                           
  3370                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3371  000B32  EE20 F004          	lfsr	2,4
  3372  000B36  501D               	movf	setMotorPWM@m,w,c
  3373  000B38  26D9               	addwf	fsr2l,f,c
  3374  000B3A  501E               	movf	setMotorPWM@m+1,w,c
  3375  000B3C  22DA               	addwfc	fsr2h,f,c
  3376  000B3E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3377  000B42  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3378  000B46  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3379  000B4A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3380  000B4E  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3381  000B52  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3382  000B56  0E06               	movlw	6
  3383  000B58  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  3384  000B5A                     u1095:
  3385  000B5A  3422               	rlcf	??_setMotorPWM+3,w,c
  3386  000B5C  3222               	rrcf	??_setMotorPWM+3,f,c
  3387  000B5E  3221               	rrcf	??_setMotorPWM+2,f,c
  3388  000B60  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3389  000B62  D7FB               	goto	u1095
  3390  000B64  5021               	movf	??_setMotorPWM+2,w,c
  3391  000B66  6EDF               	movwf	indf2,c
  3392  000B68  0012               	return		;funcret
  3393  000B6A                     __end_of_setMotorPWM:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           indf1	equ	0xFE7
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function ___wmul *****************
  3412 ;; Defined at:
  3413 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  multiplier      2   14[COMRAM] unsigned int 
  3416 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  product         2   18[COMRAM] unsigned int 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  2   14[COMRAM] unsigned int 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, prodl, prodh
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3428 ;;      Params:         4       0       0       0
  3429 ;;      Locals:         2       0       0       0
  3430 ;;      Temps:          0       0       0       0
  3431 ;;      Totals:         6       0       0       0
  3432 ;;Total ram usage:        6 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    1
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_setMotorPWM
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text15
  3443  001020                     __ptext15:
  3444                           	opt stack 0
  3445  001020                     ___wmul:
  3446                           	opt stack 27
  3447                           
  3448                           ;incstack = 0
  3449  001020  500F               	movf	___wmul@multiplier,w,c
  3450  001022  0211               	mulwf	___wmul@multiplicand,c
  3451  001024  CFF3 F013          	movff	prodl,___wmul@product
  3452  001028  CFF4 F014          	movff	prodh,___wmul@product+1
  3453  00102C  500F               	movf	___wmul@multiplier,w,c
  3454  00102E  0212               	mulwf	___wmul@multiplicand+1,c
  3455  001030  50F3               	movf	prodl,w,c
  3456  001032  2614               	addwf	___wmul@product+1,f,c
  3457  001034  5010               	movf	___wmul@multiplier+1,w,c
  3458  001036  0211               	mulwf	___wmul@multiplicand,c
  3459  001038  50F3               	movf	prodl,w,c
  3460  00103A  2614               	addwf	___wmul@product+1,f,c
  3461  00103C  C013  F00F         	movff	___wmul@product,?___wmul
  3462  001040  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3463  001044  0012               	return	
  3464  001046                     __end_of___wmul:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           prodh	equ	0xFF4
  3468                           prodl	equ	0xFF3
  3469                           intcon	equ	0xFF2
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           indf1	equ	0xFE7
  3473                           fsr1h	equ	0xFE2
  3474                           fsr1l	equ	0xFE1
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           fsr2h	equ	0xFDA
  3479                           fsr2l	equ	0xFD9
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function ___awdiv *****************
  3483 ;; Defined at:
  3484 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;  dividend        2   20[COMRAM] int 
  3487 ;;  divisor         2   22[COMRAM] int 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  quotient        2   26[COMRAM] int 
  3490 ;;  sign            1   25[COMRAM] unsigned char 
  3491 ;;  counter         1   24[COMRAM] unsigned char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  2   20[COMRAM] int 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3501 ;;      Params:         4       0       0       0
  3502 ;;      Locals:         4       0       0       0
  3503 ;;      Temps:          0       0       0       0
  3504 ;;      Totals:         8       0       0       0
  3505 ;;Total ram usage:        8 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    1
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_setMotorPWM
  3512 ;;		_ScanWithRange
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text16
  3517  000CAE                     __ptext16:
  3518                           	opt stack 0
  3519  000CAE                     ___awdiv:
  3520                           	opt stack 27
  3521                           
  3522                           ;incstack = 0
  3523  000CAE  0E00               	movlw	0
  3524  000CB0  6E1A               	movwf	___awdiv@sign,c
  3525  000CB2  AE18               	btfss	___awdiv@divisor+1,7,c
  3526  000CB4  D006               	goto	l1742
  3527  000CB6  6C17               	negf	___awdiv@divisor,c
  3528  000CB8  1E18               	comf	___awdiv@divisor+1,f,c
  3529  000CBA  B0D8               	btfsc	status,0,c
  3530  000CBC  2A18               	incf	___awdiv@divisor+1,f,c
  3531  000CBE  0E01               	movlw	1
  3532  000CC0  6E1A               	movwf	___awdiv@sign,c
  3533  000CC2                     l1742:
  3534  000CC2  AE16               	btfss	___awdiv@dividend+1,7,c
  3535  000CC4  D006               	goto	l1748
  3536  000CC6  6C15               	negf	___awdiv@dividend,c
  3537  000CC8  1E16               	comf	___awdiv@dividend+1,f,c
  3538  000CCA  B0D8               	btfsc	status,0,c
  3539  000CCC  2A16               	incf	___awdiv@dividend+1,f,c
  3540  000CCE  0E01               	movlw	1
  3541  000CD0  1A1A               	xorwf	___awdiv@sign,f,c
  3542  000CD2                     l1748:
  3543  000CD2  0E00               	movlw	0
  3544  000CD4  6E1C               	movwf	___awdiv@quotient+1,c
  3545  000CD6  0E00               	movlw	0
  3546  000CD8  6E1B               	movwf	___awdiv@quotient,c
  3547  000CDA  5017               	movf	___awdiv@divisor,w,c
  3548  000CDC  1018               	iorwf	___awdiv@divisor+1,w,c
  3549  000CDE  B4D8               	btfsc	status,2,c
  3550  000CE0  D01C               	goto	l1770
  3551  000CE2  0E01               	movlw	1
  3552  000CE4  6E19               	movwf	___awdiv@counter,c
  3553  000CE6  D004               	goto	l1756
  3554  000CE8                     l1754:
  3555  000CE8  90D8               	bcf	status,0,c
  3556  000CEA  3617               	rlcf	___awdiv@divisor,f,c
  3557  000CEC  3618               	rlcf	___awdiv@divisor+1,f,c
  3558  000CEE  2A19               	incf	___awdiv@counter,f,c
  3559  000CF0                     l1756:
  3560  000CF0  AE18               	btfss	___awdiv@divisor+1,7,c
  3561  000CF2  D7FA               	goto	l1754
  3562  000CF4                     l1758:
  3563  000CF4  90D8               	bcf	status,0,c
  3564  000CF6  361B               	rlcf	___awdiv@quotient,f,c
  3565  000CF8  361C               	rlcf	___awdiv@quotient+1,f,c
  3566  000CFA  5017               	movf	___awdiv@divisor,w,c
  3567  000CFC  5C15               	subwf	___awdiv@dividend,w,c
  3568  000CFE  5018               	movf	___awdiv@divisor+1,w,c
  3569  000D00  5816               	subwfb	___awdiv@dividend+1,w,c
  3570  000D02  A0D8               	btfss	status,0,c
  3571  000D04  D005               	goto	l1766
  3572  000D06  5017               	movf	___awdiv@divisor,w,c
  3573  000D08  5E15               	subwf	___awdiv@dividend,f,c
  3574  000D0A  5018               	movf	___awdiv@divisor+1,w,c
  3575  000D0C  5A16               	subwfb	___awdiv@dividend+1,f,c
  3576  000D0E  801B               	bsf	___awdiv@quotient,0,c
  3577  000D10                     l1766:
  3578  000D10  90D8               	bcf	status,0,c
  3579  000D12  3218               	rrcf	___awdiv@divisor+1,f,c
  3580  000D14  3217               	rrcf	___awdiv@divisor,f,c
  3581  000D16  2E19               	decfsz	___awdiv@counter,f,c
  3582  000D18  D7ED               	goto	l1758
  3583  000D1A                     l1770:
  3584  000D1A  501A               	movf	___awdiv@sign,w,c
  3585  000D1C  B4D8               	btfsc	status,2,c
  3586  000D1E  D004               	goto	l1774
  3587  000D20  6C1B               	negf	___awdiv@quotient,c
  3588  000D22  1E1C               	comf	___awdiv@quotient+1,f,c
  3589  000D24  B0D8               	btfsc	status,0,c
  3590  000D26  2A1C               	incf	___awdiv@quotient+1,f,c
  3591  000D28                     l1774:
  3592  000D28  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  3593  000D2C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  3594  000D30  0012               	return	
  3595  000D32                     __end_of___awdiv:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           indf1	equ	0xFE7
  3604                           fsr1h	equ	0xFE2
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _grabRightIR *****************
  3614 ;; Defined at:
  3615 ;;		line 74 in file "IR_Reading.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3620 ;;  i               1   21[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  2   14[COMRAM] unsigned int 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3630 ;;      Params:         2       0       0       0
  3631 ;;      Locals:         3       0       0       0
  3632 ;;      Temps:          3       0       0       0
  3633 ;;      Totals:         8       0       0       0
  3634 ;;Total ram usage:        8 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    1
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_ScanIR
  3641 ;;		_ScanWithRange
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text17
  3646  000D32                     __ptext17:
  3647                           	opt stack 0
  3648  000D32                     _grabRightIR:
  3649                           	opt stack 28
  3650                           
  3651                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  3652                           
  3653                           ;incstack = 0
  3654  000D32  0E00               	movlw	0
  3655  000D34  6E15               	movwf	grabRightIR@IR_signal+1,c
  3656  000D36  0E00               	movlw	0
  3657  000D38  6E14               	movwf	grabRightIR@IR_signal,c
  3658                           
  3659                           ;IR_Reading.c: 77: unsigned char i=0;
  3660  000D3A  0E00               	movlw	0
  3661  000D3C  6E16               	movwf	grabRightIR@i,c
  3662                           
  3663                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  3664  000D3E  0E00               	movlw	0
  3665  000D40  6E16               	movwf	grabRightIR@i,c
  3666  000D42                     l1864:
  3667  000D42  0E03               	movlw	3
  3668  000D44  6416               	cpfsgt	grabRightIR@i,c
  3669  000D46  D001               	goto	l1868
  3670  000D48  D020               	goto	l1874
  3671  000D4A                     l1868:
  3672                           
  3673                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  3674  000D4A  5069               	movf	3945,w,c	;volatile
  3675  000D4C  6E11               	movwf	??_grabRightIR& (0+255),c
  3676  000D4E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  3677  000D50  0E06               	movlw	6
  3678  000D52                     u1235:
  3679  000D52  90D8               	bcf	status,0,c
  3680  000D54  3611               	rlcf	??_grabRightIR,f,c
  3681  000D56  3612               	rlcf	??_grabRightIR+1,f,c
  3682  000D58  2EE8               	decfsz	wreg,f,c
  3683  000D5A  D7FB               	goto	u1235
  3684  000D5C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  3685  000D60  90D8               	bcf	status,0,c
  3686  000D62  3213               	rrcf	??_grabRightIR+2,f,c
  3687  000D64  90D8               	bcf	status,0,c
  3688  000D66  3213               	rrcf	??_grabRightIR+2,f,c
  3689  000D68  5013               	movf	??_grabRightIR+2,w,c
  3690  000D6A  1211               	iorwf	??_grabRightIR,f,c
  3691  000D6C  0E00               	movlw	0
  3692  000D6E  1212               	iorwf	??_grabRightIR+1,f,c
  3693  000D70  5011               	movf	??_grabRightIR,w,c
  3694  000D72  2614               	addwf	grabRightIR@IR_signal,f,c
  3695  000D74  5012               	movf	??_grabRightIR+1,w,c
  3696  000D76  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3697                           
  3698                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3699  000D78  0E82               	movlw	130
  3700  000D7A  6E11               	movwf	??_grabRightIR& (0+255),c
  3701  000D7C  0EDE               	movlw	222
  3702  000D7E                     u1847:
  3703  000D7E  2EE8               	decfsz	wreg,f,c
  3704  000D80  D7FE               	goto	u1847
  3705  000D82  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3706  000D84  D7FC               	goto	u1847
  3707  000D86  2A16               	incf	grabRightIR@i,f,c
  3708  000D88  D7DC               	goto	l1864
  3709  000D8A                     l1874:
  3710                           
  3711                           ;IR_Reading.c: 83: }
  3712                           ;IR_Reading.c: 85: return IR_signal>>2;
  3713  000D8A  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3714  000D8E  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3715  000D92  90D8               	bcf	status,0,c
  3716  000D94  3212               	rrcf	??_grabRightIR+1,f,c
  3717  000D96  3211               	rrcf	??_grabRightIR,f,c
  3718  000D98  90D8               	bcf	status,0,c
  3719  000D9A  3212               	rrcf	??_grabRightIR+1,f,c
  3720  000D9C  3211               	rrcf	??_grabRightIR,f,c
  3721  000D9E  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3722  000DA2  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3723  000DA6  0012               	return	
  3724  000DA8                     __end_of_grabRightIR:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           indf1	equ	0xFE7
  3733                           fsr1h	equ	0xFE2
  3734                           fsr1l	equ	0xFE1
  3735                           indf2	equ	0xFDF
  3736                           postinc2	equ	0xFDE
  3737                           postdec2	equ	0xFDD
  3738                           fsr2h	equ	0xFDA
  3739                           fsr2l	equ	0xFD9
  3740                           status	equ	0xFD8
  3741                           
  3742 ;; *************** function _grabLeftIR *****************
  3743 ;; Defined at:
  3744 ;;		line 90 in file "IR_Reading.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3749 ;;  i               1   21[COMRAM] unsigned char 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  2   14[COMRAM] unsigned int 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2, status,0
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3759 ;;      Params:         2       0       0       0
  3760 ;;      Locals:         3       0       0       0
  3761 ;;      Temps:          3       0       0       0
  3762 ;;      Totals:         8       0       0       0
  3763 ;;Total ram usage:        8 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    1
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_ScanIR
  3770 ;;		_ScanWithRange
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           	psect	text18
  3775  000DA8                     __ptext18:
  3776                           	opt stack 0
  3777  000DA8                     _grabLeftIR:
  3778                           	opt stack 28
  3779                           
  3780                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3781                           
  3782                           ;incstack = 0
  3783  000DA8  0E00               	movlw	0
  3784  000DAA  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3785  000DAC  0E00               	movlw	0
  3786  000DAE  6E14               	movwf	grabLeftIR@IR_signal,c
  3787                           
  3788                           ;IR_Reading.c: 93: unsigned char i=0;
  3789  000DB0  0E00               	movlw	0
  3790  000DB2  6E16               	movwf	grabLeftIR@i,c
  3791                           
  3792                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3793  000DB4  0E00               	movlw	0
  3794  000DB6  6E16               	movwf	grabLeftIR@i,c
  3795  000DB8                     l1848:
  3796  000DB8  0E03               	movlw	3
  3797  000DBA  6416               	cpfsgt	grabLeftIR@i,c
  3798  000DBC  D001               	goto	l1852
  3799  000DBE  D020               	goto	l1858
  3800  000DC0                     l1852:
  3801                           
  3802                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3803  000DC0  5067               	movf	3943,w,c	;volatile
  3804  000DC2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3805  000DC4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3806  000DC6  0E06               	movlw	6
  3807  000DC8                     u1205:
  3808  000DC8  90D8               	bcf	status,0,c
  3809  000DCA  3611               	rlcf	??_grabLeftIR,f,c
  3810  000DCC  3612               	rlcf	??_grabLeftIR+1,f,c
  3811  000DCE  2EE8               	decfsz	wreg,f,c
  3812  000DD0  D7FB               	goto	u1205
  3813  000DD2  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3814  000DD6  90D8               	bcf	status,0,c
  3815  000DD8  3213               	rrcf	??_grabLeftIR+2,f,c
  3816  000DDA  90D8               	bcf	status,0,c
  3817  000DDC  3213               	rrcf	??_grabLeftIR+2,f,c
  3818  000DDE  5013               	movf	??_grabLeftIR+2,w,c
  3819  000DE0  1211               	iorwf	??_grabLeftIR,f,c
  3820  000DE2  0E00               	movlw	0
  3821  000DE4  1212               	iorwf	??_grabLeftIR+1,f,c
  3822  000DE6  5011               	movf	??_grabLeftIR,w,c
  3823  000DE8  2614               	addwf	grabLeftIR@IR_signal,f,c
  3824  000DEA  5012               	movf	??_grabLeftIR+1,w,c
  3825  000DEC  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3826                           
  3827                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3828  000DEE  0E82               	movlw	130
  3829  000DF0  6E11               	movwf	??_grabLeftIR& (0+255),c
  3830  000DF2  0EDE               	movlw	222
  3831  000DF4                     u1857:
  3832  000DF4  2EE8               	decfsz	wreg,f,c
  3833  000DF6  D7FE               	goto	u1857
  3834  000DF8  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3835  000DFA  D7FC               	goto	u1857
  3836  000DFC  2A16               	incf	grabLeftIR@i,f,c
  3837  000DFE  D7DC               	goto	l1848
  3838  000E00                     l1858:
  3839                           
  3840                           ;IR_Reading.c: 99: }
  3841                           ;IR_Reading.c: 101: return IR_signal>>2;
  3842  000E00  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3843  000E04  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3844  000E08  90D8               	bcf	status,0,c
  3845  000E0A  3212               	rrcf	??_grabLeftIR+1,f,c
  3846  000E0C  3211               	rrcf	??_grabLeftIR,f,c
  3847  000E0E  90D8               	bcf	status,0,c
  3848  000E10  3212               	rrcf	??_grabLeftIR+1,f,c
  3849  000E12  3211               	rrcf	??_grabLeftIR,f,c
  3850  000E14  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3851  000E18  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3852  000E1C  0012               	return	
  3853  000E1E                     __end_of_grabLeftIR:
  3854                           	opt stack 0
  3855                           tblptru	equ	0xFF8
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           intcon	equ	0xFF2
  3859                           postinc0	equ	0xFEE
  3860                           wreg	equ	0xFE8
  3861                           indf1	equ	0xFE7
  3862                           fsr1h	equ	0xFE2
  3863                           fsr1l	equ	0xFE1
  3864                           indf2	equ	0xFDF
  3865                           postinc2	equ	0xFDE
  3866                           postdec2	equ	0xFDD
  3867                           fsr2h	equ	0xFDA
  3868                           fsr2l	equ	0xFD9
  3869                           status	equ	0xFD8
  3870                           
  3871 ;; *************** function _delay_tenth_s *****************
  3872 ;; Defined at:
  3873 ;;		line 19 in file "Movement.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  tenth_second    1    wreg     unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3878 ;;  i               2   16[COMRAM] unsigned int 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3888 ;;      Params:         0       0       0       0
  3889 ;;      Locals:         3       0       0       0
  3890 ;;      Temps:          1       0       0       0
  3891 ;;      Totals:         4       0       0       0
  3892 ;;Total ram usage:        4 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    1
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_main
  3899 ;;		_ScanIR
  3900 ;;		_ScanWithRange
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text19
  3905  000F5A                     __ptext19:
  3906                           	opt stack 0
  3907  000F5A                     _delay_tenth_s:
  3908                           	opt stack 29
  3909                           
  3910                           ;incstack = 0
  3911                           ;delay_tenth_s@tenth_seconds stored from wreg
  3912  000F5A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3913                           
  3914                           ;Movement.c: 20: unsigned int i=0;
  3915  000F5C  0E00               	movlw	0
  3916  000F5E  6E12               	movwf	delay_tenth_s@i+1,c
  3917  000F60  0E00               	movlw	0
  3918  000F62  6E11               	movwf	delay_tenth_s@i,c
  3919                           
  3920                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3921  000F64  0E00               	movlw	0
  3922  000F66  6E12               	movwf	delay_tenth_s@i+1,c
  3923  000F68  0E01               	movlw	1
  3924  000F6A  6E11               	movwf	delay_tenth_s@i,c
  3925  000F6C  D009               	goto	l1832
  3926  000F6E                     l1828:
  3927                           
  3928                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3929  000F6E  0E82               	movlw	130
  3930  000F70  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3931  000F72  0EDE               	movlw	222
  3932  000F74                     u1867:
  3933  000F74  2EE8               	decfsz	wreg,f,c
  3934  000F76  D7FE               	goto	u1867
  3935  000F78  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3936  000F7A  D7FC               	goto	u1867
  3937  000F7C  4A11               	infsnz	delay_tenth_s@i,f,c
  3938  000F7E  2A12               	incf	delay_tenth_s@i+1,f,c
  3939  000F80                     l1832:
  3940  000F80  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3941  000F82  0D02               	mullw	2
  3942  000F84  5011               	movf	delay_tenth_s@i,w,c
  3943  000F86  5CF3               	subwf	prodl,w,c
  3944  000F88  5012               	movf	delay_tenth_s@i+1,w,c
  3945  000F8A  58F4               	subwfb	prodh,w,c
  3946  000F8C  A0D8               	btfss	status,0,c
  3947  000F8E  0012               	return	
  3948  000F90  D7EE               	goto	l1828
  3949  000F92                     __end_of_delay_tenth_s:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           intcon	equ	0xFF2
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           indf1	equ	0xFE7
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _InterruptHandlerHigh *****************
  3968 ;; Defined at:
  3969 ;;		line 17 in file "main.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3983 ;;      Params:         0       0       0       0
  3984 ;;      Locals:         0       0       0       0
  3985 ;;      Temps:         14       0       0       0
  3986 ;;      Totals:        14       0       0       0
  3987 ;;Total ram usage:       14 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		Interrupt level 2
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	intcode
  3997  000008                     __pintcode:
  3998                           	opt stack 0
  3999  000008                     _InterruptHandlerHigh:
  4000                           	opt stack 25
  4001                           
  4002                           ;incstack = 0
  4003  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4004  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  4005  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  4006  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  4007  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  4008  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  4009  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  4010  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  4011  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  4012  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  4013  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  4014  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  4015  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  4016  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  4017  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  4018                           
  4019                           ;main.c: 19: if (PIR1bits.RCIF) {
  4020  000042  AA9E               	btfss	3998,5,c	;volatile
  4021  000044  D016               	goto	i2l60
  4022                           
  4023                           ;main.c: 20: ReceivedString[i]=RCREG;
  4024  000046  504D               	movf	_i,w,c	;volatile
  4025  000048  0D01               	mullw	1
  4026  00004A  0E83               	movlw	low _ReceivedString
  4027  00004C  24F3               	addwf	prodl,w,c
  4028  00004E  6ED9               	movwf	fsr2l,c
  4029  000050  0E00               	movlw	high _ReceivedString
  4030  000052  20F4               	addwfc	prodh,w,c
  4031  000054  6EDA               	movwf	fsr2h,c
  4032  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  4033                           
  4034                           ;main.c: 21: RFID_Read=1;
  4035  00005A  0E01               	movlw	1
  4036  00005C  0100               	movlb	0	; () banked
  4037  00005E  6F82               	movwf	_RFID_Read& (0+255),b	;volatile
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;main.c: 22: if (i==15){
  4041  000060  0E0F               	movlw	15
  4042  000062  184D               	xorwf	_i,w,c	;volatile
  4043  000064  A4D8               	btfss	status,2,c
  4044  000066  D003               	goto	i2l2220
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;main.c: 23: i=0;
  4048  000068  0E00               	movlw	0
  4049  00006A  6E4D               	movwf	_i,c	;volatile
  4050                           
  4051                           ;main.c: 24: }else{
  4052  00006C  D001               	goto	i2l2222
  4053  00006E                     i2l2220:
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;main.c: 25: i++;
  4057  00006E  2A4D               	incf	_i,f,c	;volatile
  4058  000070                     i2l2222:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;main.c: 26: }
  4062                           ;main.c: 27: PIR1bits.RCIF=0;
  4063  000070  9A9E               	bcf	3998,5,c	;volatile
  4064  000072                     i2l60:
  4065  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  4066  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  4067  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  4068  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  4069  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  4070  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  4071  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  4072  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  4073  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  4074  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  4075  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  4076  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  4077  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  4078  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  4079  0000AA  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4080  0000AC  0011               	retfie		f
  4081  0000AE                     __end_of_InterruptHandlerHigh:
  4082                           	opt stack 0
  4083  0000                     pclatu	equ	0xFFB
  4084                           pclath	equ	0xFFA
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           postinc0	equ	0xFEE
  4093                           fsr0h	equ	0xFEA
  4094                           fsr0l	equ	0xFE9
  4095                           wreg	equ	0xFE8
  4096                           indf1	equ	0xFE7
  4097                           fsr1h	equ	0xFE2
  4098                           fsr1l	equ	0xFE1
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           pclatu	equ	0xFFB
  4106                           pclath	equ	0xFFA
  4107                           tblptru	equ	0xFF8
  4108                           tblptrh	equ	0xFF7
  4109                           tblptrl	equ	0xFF6
  4110                           tablat	equ	0xFF5
  4111                           prodh	equ	0xFF4
  4112                           prodl	equ	0xFF3
  4113                           intcon	equ	0xFF2
  4114                           postinc0	equ	0xFEE
  4115                           fsr0h	equ	0xFEA
  4116                           fsr0l	equ	0xFE9
  4117                           wreg	equ	0xFE8
  4118                           indf1	equ	0xFE7
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128                           	psect	rparam
  4129  0000                     pclatu	equ	0xFFB
  4130                           pclath	equ	0xFFA
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           prodh	equ	0xFF4
  4136                           prodl	equ	0xFF3
  4137                           intcon	equ	0xFF2
  4138                           postinc0	equ	0xFEE
  4139                           fsr0h	equ	0xFEA
  4140                           fsr0l	equ	0xFE9
  4141                           wreg	equ	0xFE8
  4142                           indf1	equ	0xFE7
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           fsr2h	equ	0xFDA
  4149                           fsr2l	equ	0xFD9
  4150                           status	equ	0xFD8
  4151                           
  4152                           	psect	temp
  4153  00004E                     btemp:
  4154                           	opt stack 0
  4155  00004E                     	ds	1
  4156  0000                     int$flags	set	btemp
  4157                           pclatu	equ	0xFFB
  4158                           pclath	equ	0xFFA
  4159                           tblptru	equ	0xFF8
  4160                           tblptrh	equ	0xFF7
  4161                           tblptrl	equ	0xFF6
  4162                           tablat	equ	0xFF5
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           intcon	equ	0xFF2
  4166                           postinc0	equ	0xFEE
  4167                           fsr0h	equ	0xFEA
  4168                           fsr0l	equ	0xFE9
  4169                           wreg	equ	0xFE8
  4170                           indf1	equ	0xFE7
  4171                           fsr1h	equ	0xFE2
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      77
    BANK0           160     34      51
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               139   139      0   61128
                                             74 COMRAM     2     2      0
                                              0 BANK0     34    34      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2947
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       28    23      5   25461
                                             46 COMRAM    28    23      5
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   23286
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8198
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    8838
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4951
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2603
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1531
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     650
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     22      33       4       31.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      4D       1       81.9%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      80       5        0.0%
DATA                 0      0      80      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 22:32:27 2018

                        ?_grabRightIR 000F                                     _i 004D  
                                  l63 05F0                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 0060  
                                 l126 0B0E                                   l156 0E70  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                                  l2010 0306  
                                l2004 0302                                  l2030 039A  
                                l2104 054E                                  l2130 0902  
                                l2018 036A                                  l2124 08FE  
                                l2060 0456                                  l2054 0452  
                                l2038 03FE                                  l2046 0414  
                                l2206 0C1A                                  l2144 0954  
                                l2320 07CE                                  l2304 077C  
                                l2138 0950                                  l2090 04F4  
                                l2074 0492                                  l2314 07BE  
                                l2250 05F6                                  l2172 09F6  
                                l2156 09A4                                  l2084 04F0  
                                l2316 07C4                                  l2308 0786  
                                l2340 0838                                  l2166 09F2  
                                l2326 07EA                                  l2334 082C  
                                l2270 0674                                  l2184 0A32  
                                l2336 0832                                  l1810 0C38  
                                l2194 0BC2                                  l2290 0704  
                                l2282 06C8                                  l2274 0698  
                                l1820 0C70                                  l1742 0CC2  
                                l1814 0C50                                  l1806 0C20  
                                l2198 0BCA                                  l2278 06BA  
                                l1832 0F80                                  l2296 0728  
                                l1754 0CE8                                  l1770 0D1A  
                                l1922 0F48                                  l1828 0F6E  
                                l1852 0DC0                                  l1756 0CF0  
                                l1748 0CD2                                  l1932 100E  
                                l1774 0D28                                  l1766 0D10  
                                l1758 0CF4                                  l1918 0F36  
                                l1848 0DB8                                  l1864 0D42  
                                l1784 0AE6                                  l1792 0E38  
                                l1858 0E00                                  l1874 0D8A  
                                l1868 0D4A                                  l1796 0E50  
                                l1788 0E20                                  l1972 01EA  
                                l1990 026C                                  l1976 0216  
                                l1968 01BE                                  l1998 02D0  
                                u1205 0DC8                                  u1074 0AAA  
                                u1235 0D52                                  u1075 0AA6  
                                u1084 0B02                                  u1085 0AFE  
                                _LATB 000F8A                                  u1095 0B5A  
                                u1275 100A                                  u1276 100C  
                                u1710 074A                                  u1295 101C  
                                u1296 101E                                  u1720 075C  
                                u1712 074C                                  u1722 075E  
                                u1817 0F3C                                  u1827 0C6A  
                                u1837 0E6A                                  u1847 0D7E  
                                u1857 0DF4                                  u1867 0F74  
                                i2l60 0072                                  _main 0552  
                       main@ScanAngle 006D                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 004E  
                                _stop 0C1E                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00AE                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 0D32                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                         _initRFID$1305 000F  
                     ___awdiv@counter 0019                                 _RCREG 000FAE  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 0F5A  
                               main@i 006F                                 tablat 000FF5  
                               status 000FD8                __size_of_ScanWithRange 04A0  
                     __initialization 1088                          __end_of_main 0852  
                        __end_of_stop 0CAE                        delay_tenth_s@i 0011  
                      __CFG_OSC$IRCIO 000000                  __end_of_enableSensor 1020  
                 VerifySignal@hexByte 0018                                ??_main 004B  
                              ??_stop 002A                         __activetblptr 000002  
                       ?_initMotorPWM 0001                          ?_setMotorPWM 001D  
              __size_of_fullSpeedBack 0036                      ___awdiv@dividend 0015  
                              i2l2220 006E                                i2l2222 0070  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 0F92  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                              _ScanIR 0852                                ___wmul 1020  
                           ??___awdiv 0019                      __end_of_initRFID 1088  
                              _initIR 1046                  __size_of_grabRightIR 0076  
                              clear_0 108E                      ___awdiv@quotient 001B  
                           ??_delay_s 000F                                main@mL 0070  
                              main@mR 0079                        ??_initMotorPWM 000F  
                       _ScanWithRange 00B2                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0026                                stop@mR 0028  
                    __end_of_turnLeft 0F22                       fullSpeedBack@mL 002B  
                     fullSpeedBack@mR 002D                            __accesstop 0060  
             __end_of__initialization 1096                         ___rparam_used 000001  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 0F92  
                      ?_ScanWithRange 002F                  VerifySignal@checksum 0017  
       __size_of_InterruptHandlerHigh 00A6            delay_tenth_s@tenth_seconds 0010  
                          __pbssBANK0 0082                               ?_ScanIR 002F  
                      ?_fullSpeedBack 002B                 __size_of_enableSensor 0026  
                             ?___wmul 000F                   grabLeftIR@IR_signal 0014  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0070  
                          _grabLeftIR 0DA8                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 0134                          _enableSensor 0FFA  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 0FFA  
                             __Hparam 0000                               __Lparam 0000  
                     __size_of_ScanIR 01E4                               ___awdiv 0CAE  
                     __size_of___wmul 0026                       __size_of_initIR 0022  
                             __pcinit 1088                       ??_ScanWithRange 0034  
                             _delay_s 0F22                               __ramtop 0300  
                           ?_turnLeft 002B                               __ptext0 0552  
                             __ptext1 1068                               __ptext2 0FC8  
                             __ptext3 1046                               __ptext4 0F92  
                             __ptext5 0FFA                               __ptext6 0F22  
                             __ptext7 0B6A                               __ptext8 00B2  
                             __ptext9 0852                         ?_VerifySignal 000F  
                end_of_initialization 1096                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                  ScanIR@SensorResult 003B                       ??_fullSpeedBack 002F  
                           _RFID_Read 0082                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 002F  
                   __end_of_turnRight 0ED8                           ?_grabLeftIR 000F  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0011  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0039                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 0A36  
                      _fullSpeedAhead 0E1E                        _ReceivedString 0083  
                      __end_of___wmul 1046                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1068                __size_of_delay_tenth_s 0038  
                 start_initialization 1088                    VerifySignal@Signal 000F  
               __size_of_initMotorPWM 0032          __end_of_InterruptHandlerHigh 00AE  
                            ??_ScanIR 0033                __end_of_fullSpeedAhead 0E8E  
                 __size_of_grabLeftIR 0076                              ??___wmul 0013  
                            ??_initIR 000F                   __end_of_grabRightIR 0DA8  
                        _initMotorPWM 0FC8                           __pbssCOMRAM 004D  
                       __pcstackBANK0 0060      ScanWithRange@DirectionFoundLimit 003B  
                       _delay_tenth_s 0F5A                     __size_of_initRFID 0020  
   ScanWithRange@ClearSignalTolerance 0039                       ?_fullSpeedAhead 0026  
                           __pintcode 0008                  __end_of_VerifySignal 0C1E  
                            ?___awdiv 0015                              ?_delay_s 0001  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                   __size_of_turnLeft 004A            ScanWithRange@SensorResultC 0043  
          ScanWithRange@SensorResultL 003F            ScanWithRange@SensorResultR 0047  
                       ??_setMotorPWM 001F                        ?_delay_tenth_s 0001  
                      ___wmul@product 0013                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 002B  
                         turnRight@mR 002D                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                           _grabRightIR 0D32  
                grabRightIR@IR_signal 0014                     ___wmul@multiplier 000F  
               __end_of_ScanWithRange 0552                          setMotorPWM@m 001D  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 0E8E            ScanIR@ClearSignalTolerance 0035  
                 __end_of_setMotorPWM 0B6A                              __Hrparam 0000  
                            __Lrparam 0000                 __end_of_fullSpeedBack 0FC8  
                  __end_of_grabLeftIR 0E1E                      __size_of___awdiv 0084  
                          _ANSEL0bits 000FB8                      __size_of_delay_s 0038  
               ?_InterruptHandlerHigh 0001                            ?_turnRight 002B  
                            __ptext10 0E8E                              __ptext11 0ED8  
                            __ptext12 0C1E                              __ptext13 0E1E  
                            __ptext14 0A36                              __ptext15 1020  
                            __ptext16 0CAE                              __ptext17 0D32  
                            __ptext18 0DA8                              __ptext19 0F5A  
                     ??_delay_tenth_s 000F                              _initRFID 1068  
                       __size_of_main 0300             ScanWithRange@ResultFalseC 0037  
                  main@DirectionFound 006E             ScanWithRange@ResultFalseL 0036  
           ScanWithRange@ResultFalseR 0038                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
               __size_of_VerifySignal 00B4                              delay_s@i 0011  
                            int$flags 004E                              main@mode 006C  
                            main@test 006A                              _turnLeft 0ED8  
                     ScanWithRange@mL 002F                       ScanWithRange@mR 0031  
                  enableSensor@sensor 0010                    enableSensor@status 000F  
                       VerifySignal@i 001A                            _INTCONbits 000FF2  
          ScanWithRange@tenth_seconds 0033                           _setMotorPWM 0A36  
                        _VerifySignal 0B6A                              intlevel2 0000  
                       ?_enableSensor 000F                      ??_fullSpeedAhead 002A  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundTolerance 003D  
              ??_InterruptHandlerHigh 0001                           ??_turnRight 002F  
                      ??_enableSensor 0010             ScanIR@DirectionFoundLimit 0037  
