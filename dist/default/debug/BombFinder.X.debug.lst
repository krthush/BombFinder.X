

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 16:34:06 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     _CAP1BUFH	set	3945
    43  0000                     _CAP1BUFL	set	3944
    44  0000                     _CAP1CON	set	3939
    45  0000                     _CAP2BUFH	set	3943
    46  0000                     _CAP2BUFL	set	3942
    47  0000                     _CAP2CON	set	3938
    48  0000                     _LATAbits	set	3977
    49  0000                     _LATB	set	3978
    50  0000                     _LATCbits	set	3979
    51  0000                     _LATDbits	set	3980
    52  0000                     _LATEbits	set	3981
    53  0000                     _PTCON0	set	3967
    54  0000                     _PTCON1	set	3966
    55  0000                     _PTPERH	set	3962
    56  0000                     _PTPERL	set	3963
    57  0000                     _PWMCON0	set	3951
    58  0000                     _PWMCON1	set	3950
    59  0000                     _TRISAbits	set	3986
    60  0000                     _TRISBbits	set	3987
    61  0000                     _TRISC	set	3988
    62  0000                     _TRISCbits	set	3988
    63  0000                     _TRISDbits	set	3989
    64  0000                     _TRISEbits	set	3990
    65  0000                     _PDC0H	set	3960
    66  0000                     _PDC0L	set	3961
    67  0000                     _PDC1H	set	3958
    68  0000                     _PDC1L	set	3959
    69  0000                     _ANSEL0bits	set	4024
    70  0000                     _BAUDCONbits	set	4010
    71  0000                     _IPR1bits	set	3999
    72  0000                     _OSCCON	set	4051
    73  0000                     _OSCCONbits	set	4051
    74  0000                     _PIE1bits	set	3997
    75  0000                     _PIR1bits	set	3998
    76  0000                     _RCONbits	set	4048
    77  0000                     _RCREG	set	4014
    78  0000                     _RCSTAbits	set	4011
    79  0000                     _SPBRG	set	4015
    80  0000                     _SPBRGH	set	4016
    81  0000                     _T5CON	set	4023
    82  0000                     _TXREG	set	4013
    83  0000                     _TXSTAbits	set	4012
    84  0000                     _INTCONbits	set	4082
    85                           
    86                           ; #config settings
    87  0000                     
    88                           	psect	cinit
    89  001544                     __pcinit:
    90                           	opt stack 0
    91  001544                     start_initialization:
    92                           	opt stack 0
    93  001544                     __initialization:
    94                           	opt stack 0
    95                           
    96                           ; Clear objects allocated to BANK1 (17 bytes)
    97  001544  EE01  F0E9         	lfsr	0,__pbssBANK1
    98  001548  0E11               	movlw	17
    99  00154A                     clear_0:
   100  00154A  6AEE               	clrf	postinc0,c
   101  00154C  06E8               	decf	wreg,f,c
   102  00154E  E1FD               	bnz	clear_0
   103                           
   104                           ; Clear objects allocated to BANK0 (16 bytes)
   105  001550  EE00  F082         	lfsr	0,__pbssBANK0
   106  001554  0E10               	movlw	16
   107  001556                     clear_1:
   108  001556  6AEE               	clrf	postinc0,c
   109  001558  06E8               	decf	wreg,f,c
   110  00155A  E1FD               	bnz	clear_1
   111                           
   112                           ; Clear objects allocated to COMRAM (2 bytes)
   113  00155C  6A3F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   114  00155E  6A3E               	clrf	__pbssCOMRAM& (0+255),c
   115  001560                     end_of_initialization:
   116                           	opt stack 0
   117  001560                     __end_of__initialization:
   118                           	opt stack 0
   119  001560  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   120  001562  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   121  001564  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  001566  6EF8               	movwf	tblptru,c
   123  001568  0100               	movlb	0
   124  00156A  EFBB  F003         	goto	_main	;jump to C main() function
   125                           tblptru	equ	0xFF8
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	bssCOMRAM
   130  00003E                     __pbssCOMRAM:
   131                           	opt stack 0
   132  00003E                     _i:
   133                           	opt stack 0
   134  00003E                     	ds	1
   135  00003F                     _start:
   136                           	opt stack 0
   137  00003F                     	ds	1
   138                           tblptru	equ	0xFF8
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           
   142                           	psect	bssBANK0
   143  000082                     __pbssBANK0:
   144                           	opt stack 0
   145  000082                     ScanIR@F3710:
   146                           	opt stack 0
   147  000082                     	ds	4
   148  000086                     ScanWithRange@F3719:
   149                           	opt stack 0
   150  000086                     	ds	4
   151  00008A                     ScanWithRange@F3721:
   152                           	opt stack 0
   153  00008A                     	ds	4
   154  00008E                     ScanWithRange@F3723:
   155                           	opt stack 0
   156  00008E                     	ds	4
   157                           tblptru	equ	0xFF8
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	bssBANK1
   162  0001E9                     __pbssBANK1:
   163                           	opt stack 0
   164  0001E9                     _RFID_Read:
   165                           	opt stack 0
   166  0001E9                     	ds	1
   167  0001EA                     _ReceivedString:
   168                           	opt stack 0
   169  0001EA                     	ds	16
   170                           tblptru	equ	0xFF8
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	cstackBANK1
   175  000100                     __pcstackBANK1:
   176                           	opt stack 0
   177  000100                     main@MoveType:
   178                           	opt stack 0
   179                           
   180                           ; 100 bytes @ 0x0
   181  000100                     	ds	100
   182  000164                     main@MoveTime:
   183                           	opt stack 0
   184                           
   185                           ; 100 bytes @ 0x64
   186  000164                     	ds	100
   187  0001C8                     main@Message:
   188                           	opt stack 0
   189                           
   190                           ; 10 bytes @ 0xC8
   191  0001C8                     	ds	10
   192  0001D2                     main@ScanAngle:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0xD2
   196  0001D2                     	ds	1
   197  0001D3                     main@mode:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0xD3
   201  0001D3                     	ds	1
   202  0001D4                     main@Move:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0xD4
   206  0001D4                     	ds	1
   207  0001D5                     main@DirectionFound:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0xD5
   211  0001D5                     	ds	1
   212  0001D6                     main@i:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0xD6
   216  0001D6                     	ds	1
   217  0001D7                     main@mL:
   218                           	opt stack 0
   219                           
   220                           ; 9 bytes @ 0xD7
   221  0001D7                     	ds	9
   222  0001E0                     main@mR:
   223                           	opt stack 0
   224                           
   225                           ; 9 bytes @ 0xE0
   226  0001E0                     	ds	9
   227                           tblptru	equ	0xFF8
   228                           postinc0	equ	0xFEE
   229                           wreg	equ	0xFE8
   230                           
   231                           	psect	cstackBANK0
   232  000060                     __pcstackBANK0:
   233                           	opt stack 0
   234  000060                     turnLeft@mL:
   235                           	opt stack 0
   236  000060                     turnRight@mL:
   237                           	opt stack 0
   238  000060                     fullSpeedBack@mL:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x0
   242  000060                     	ds	2
   243  000062                     turnLeft@mR:
   244                           	opt stack 0
   245  000062                     turnRight@mR:
   246                           	opt stack 0
   247  000062                     fullSpeedBack@mR:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x2
   251  000062                     	ds	2
   252  000064                     ScanIR@mL:
   253                           	opt stack 0
   254  000064                     ScanWithRange@mL:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x4
   258  000064                     	ds	2
   259  000066                     ScanIR@mR:
   260                           	opt stack 0
   261  000066                     ScanWithRange@mR:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x6
   265  000066                     	ds	2
   266  000068                     ScanWithRange@tenth_seconds:
   267                           	opt stack 0
   268  000068                     ScanIR@ClearSignalTolerance:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x8
   272  000068                     	ds	1
   273  000069                     ScanWithRange@MoveTime:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x9
   277  000069                     	ds	1
   278  00006A                     ScanIR@DirectionFoundLimit:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0xA
   282  00006A                     	ds	1
   283  00006B                     ScanWithRange@ResultFalseL:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0xB
   287  00006B                     	ds	1
   288  00006C                     ScanWithRange@ResultFalseC:
   289                           	opt stack 0
   290  00006C                     ScanIR@DirectionFoundTolerance:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0xC
   294  00006C                     	ds	1
   295  00006D                     ScanWithRange@ResultFalseR:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0xD
   299  00006D                     	ds	1
   300  00006E                     ScanWithRange@ClearSignalTolerance:
   301                           	opt stack 0
   302  00006E                     ScanIR@SensorResult:
   303                           	opt stack 0
   304                           
   305                           ; 4 bytes @ 0xE
   306  00006E                     	ds	2
   307  000070                     ScanWithRange@DirectionFoundLimit:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x10
   311  000070                     	ds	2
   312  000072                     ScanWithRange@DirectionFoundTolerance:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x12
   316  000072                     	ds	2
   317  000074                     ScanWithRange@SensorResultL:
   318                           	opt stack 0
   319                           
   320                           ; 4 bytes @ 0x14
   321  000074                     	ds	4
   322  000078                     ScanWithRange@SensorResultC:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x18
   326  000078                     	ds	4
   327  00007C                     ScanWithRange@SensorResultR:
   328                           	opt stack 0
   329                           
   330                           ; 4 bytes @ 0x1C
   331  00007C                     	ds	4
   332  000080                     ??_main:
   333                           
   334                           ; 0 bytes @ 0x20
   335  000080                     	ds	2
   336                           tblptru	equ	0xFF8
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	cstackCOMRAM
   341  000001                     __pcstackCOMRAM:
   342                           	opt stack 0
   343  000001                     ??_InterruptHandlerHigh:
   344  000001                     
   345                           ; 2 bytes @ 0x0
   346  000001                     	ds	14
   347  00000F                     ??_InterruptHandlerLow:
   348                           
   349                           ; 0 bytes @ 0xE
   350  00000F                     	ds	17
   351  000020                     ??_delay_s:
   352  000020                     ??_delay_tenth_s:
   353  000020                     ??_LCDout:
   354  000020                     ?_grabLeftIR:
   355                           	opt stack 0
   356  000020                     ?_grabRightIR:
   357                           	opt stack 0
   358  000020                     ?___wmul:
   359                           	opt stack 0
   360  000020                     enableSensor@status:
   361                           	opt stack 0
   362  000020                     VerifySignal@Signal:
   363                           	opt stack 0
   364  000020                     ___wmul@multiplier:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x1F
   368  000020                     	ds	1
   369  000021                     delay_s@seconds:
   370                           	opt stack 0
   371  000021                     delay_tenth_s@tenth_seconds:
   372                           	opt stack 0
   373  000021                     enableSensor@sensor:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x20
   377  000021                     	ds	1
   378  000022                     ??_VerifySignal:
   379  000022                     ??_grabLeftIR:
   380  000022                     ??_grabRightIR:
   381  000022                     delay_s@i:
   382                           	opt stack 0
   383  000022                     delay_tenth_s@i:
   384                           	opt stack 0
   385  000022                     ___wmul@multiplicand:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x21
   389  000022                     	ds	1
   390  000023                     LCDout@number:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x22
   394  000023                     	ds	1
   395  000024                     SendLCD@type:
   396                           	opt stack 0
   397  000024                     ___wmul@product:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x23
   401  000024                     	ds	1
   402  000025                     SendLCD@Byte:
   403                           	opt stack 0
   404  000025                     grabRightIR@IR_signal:
   405                           	opt stack 0
   406  000025                     grabLeftIR@IR_signal:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x24
   410  000025                     	ds	1
   411  000026                     ??_initLCD:
   412  000026                     ?___awdiv:
   413                           	opt stack 0
   414  000026                     ___awdiv@dividend:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x25
   418  000026                     	ds	1
   419  000027                     grabRightIR@i:
   420                           	opt stack 0
   421  000027                     grabLeftIR@i:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x26
   425  000027                     	ds	1
   426  000028                     VerifySignal@checksum:
   427                           	opt stack 0
   428  000028                     ___awdiv@divisor:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x27
   432  000028                     	ds	1
   433  000029                     VerifySignal@hexByte:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x28
   437  000029                     	ds	1
   438  00002A                     ___awdiv@counter:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x29
   442  00002A                     	ds	1
   443  00002B                     VerifySignal@i:
   444                           	opt stack 0
   445  00002B                     ___awdiv@sign:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x2A
   449  00002B                     	ds	1
   450  00002C                     ___awdiv@quotient:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x2B
   454  00002C                     	ds	2
   455  00002E                     setMotorPWM@m:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x2D
   459  00002E                     	ds	2
   460  000030                     ??_setMotorPWM:
   461                           
   462                           ; 0 bytes @ 0x2F
   463  000030                     	ds	5
   464  000035                     setMotorPWM@PWMduty:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x34
   468  000035                     	ds	2
   469  000037                     stop@mL:
   470                           	opt stack 0
   471  000037                     fullSpeedAhead@mL:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x36
   475  000037                     	ds	2
   476  000039                     stop@mR:
   477                           	opt stack 0
   478  000039                     fullSpeedAhead@mR:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x38
   482  000039                     	ds	2
   483  00003B                     
   484                           ; 0 bytes @ 0x3A
   485  00003B                     	ds	1
   486  00003C                     ??_ScanWithRange:
   487  00003C                     ??_ScanIR:
   488  00003C                     
   489                           ; 0 bytes @ 0x3B
   490  00003C                     	ds	2
   491                           tblptru	equ	0xFF8
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495 ;;
   496 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   497 ;;
   498 ;; *************** function _main *****************
   499 ;; Defined at:
   500 ;;		line 41 in file "main.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   505 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   506 ;;  Message        10  200[BANK1 ] unsigned char [10]
   507 ;;  mR              9  224[BANK1 ] struct DC_motor
   508 ;;  mL              9  215[BANK1 ] struct DC_motor
   509 ;;  i               1  214[BANK1 ] unsigned char 
   510 ;;  DirectionFou    1  213[BANK1 ] char 
   511 ;;  Move            1  212[BANK1 ] unsigned char 
   512 ;;  mode            1  211[BANK1 ] unsigned char 
   513 ;;  ScanAngle       1  210[BANK1 ] unsigned char 
   514 ;; Return value:  Size  Location     Type
   515 ;;		None               void
   516 ;; Registers used:
   517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   523 ;;      Params:         0       0       0       0
   524 ;;      Locals:         0       0     233       0
   525 ;;      Temps:          0       2       0       0
   526 ;;      Totals:         0       2     233       0
   527 ;;Total ram usage:      235 bytes
   528 ;; Hardware stack levels required when called:    7
   529 ;; This function calls:
   530 ;;		_ScanIR
   531 ;;		_ScanWithRange
   532 ;;		_VerifySignal
   533 ;;		_delay_s
   534 ;;		_delay_tenth_s
   535 ;;		_enableSensor
   536 ;;		_fullSpeedAhead
   537 ;;		_fullSpeedBack
   538 ;;		_initIR
   539 ;;		_initLCD
   540 ;;		_initMotorPWM
   541 ;;		_initRFID
   542 ;;		_stop
   543 ;; This function is called by:
   544 ;;		Startup code after reset
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text0
   549  000776                     __ptext0:
   550                           	opt stack 0
   551  000776                     _main:
   552                           	opt stack 24
   553                           
   554                           ;main.c: 44: unsigned char Message[10];
   555                           ;main.c: 45: unsigned char i=0;
   556                           
   557                           ;incstack = 0
   558  000776  0E00               	movlw	0
   559  000778  0101               	movlb	1	; () banked
   560  00077A  6FD6               	movwf	main@i& (0+255),b
   561                           
   562                           ;main.c: 46: unsigned char mode=0;
   563  00077C  0E00               	movlw	0
   564  00077E  0101               	movlb	1	; () banked
   565  000780  6FD3               	movwf	main@mode& (0+255),b
   566                           
   567                           ;main.c: 47: signed char DirectionFound=0;
   568  000782  0E00               	movlw	0
   569  000784  0101               	movlb	1	; () banked
   570  000786  6FD5               	movwf	main@DirectionFound& (0+255),b
   571                           
   572                           ;main.c: 48: char MoveTime[100];
   573                           ;main.c: 49: char MoveType[100];
   574                           ;main.c: 50: char Move=0;
   575  000788  0E00               	movlw	0
   576  00078A  0101               	movlb	1	; () banked
   577  00078C  6FD4               	movwf	main@Move& (0+255),b
   578                           
   579                           ;main.c: 52: unsigned char ScanAngle=6;
   580  00078E  0E06               	movlw	6
   581  000790  0101               	movlb	1	; () banked
   582  000792  6FD2               	movwf	main@ScanAngle& (0+255),b
   583                           
   584                           ; BSR set to: 1
   585                           ;main.c: 55: INTCONbits.GIEH=1;
   586  000794  8EF2               	bsf	intcon,7,c	;volatile
   587                           
   588                           ; BSR set to: 1
   589                           ;main.c: 56: INTCONbits.GIEL=1;
   590  000796  8CF2               	bsf	intcon,6,c	;volatile
   591                           
   592                           ; BSR set to: 1
   593                           ;main.c: 57: INTCONbits.PEIE=1;
   594  000798  8CF2               	bsf	intcon,6,c	;volatile
   595                           
   596                           ; BSR set to: 1
   597                           ;main.c: 58: RCONbits.IPEN=1;
   598  00079A  8ED0               	bsf	4048,7,c	;volatile
   599                           
   600                           ; BSR set to: 1
   601                           ;main.c: 61: IPR1bits.RCIP=0;
   602  00079C  9A9F               	bcf	3999,5,c	;volatile
   603                           
   604                           ; BSR set to: 1
   605                           ;main.c: 62: PIE1bits.RCIE=1;
   606  00079E  8A9D               	bsf	3997,5,c	;volatile
   607                           
   608                           ; BSR set to: 1
   609                           ;main.c: 65: TRISCbits.RC3=1;
   610  0007A0  8694               	bsf	3988,3,c	;volatile
   611                           
   612                           ; BSR set to: 1
   613                           ;main.c: 66: INTCONbits.INT0IE=1;
   614  0007A2  88F2               	bsf	intcon,4,c	;volatile
   615                           
   616                           ; BSR set to: 1
   617                           ;main.c: 69: PIR1bits.RC1IF=0;
   618  0007A4  9A9E               	bcf	3998,5,c	;volatile
   619                           
   620                           ; BSR set to: 1
   621                           ;main.c: 70: INTCONbits.INT0IF=0;
   622  0007A6  92F2               	bcf	intcon,1,c	;volatile
   623                           
   624                           ;main.c: 73: struct DC_motor mL, mR;
   625                           ;main.c: 74: mL.power=0;
   626  0007A8  0E00               	movlw	0
   627  0007AA  0101               	movlb	1	; () banked
   628  0007AC  6FD7               	movwf	main@mL& (0+255),b
   629                           
   630                           ;main.c: 75: mL.direction=1;
   631  0007AE  0E01               	movlw	1
   632  0007B0  0101               	movlb	1	; () banked
   633  0007B2  6FD8               	movwf	(main@mL+1)& (0+255),b
   634                           
   635                           ; BSR set to: 1
   636                           ;main.c: 76: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   637  0007B4  0E79               	movlw	121
   638  0007B6  0101               	movlb	1	; () banked
   639  0007B8  6FD9               	movwf	(main@mL+2)& (0+255),b
   640  0007BA  0E0F               	movlw	15
   641  0007BC  0101               	movlb	1	; () banked
   642  0007BE  6FDA               	movwf	(main@mL+3)& (0+255),b
   643                           
   644                           ; BSR set to: 1
   645                           ;main.c: 77: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   646  0007C0  0E78               	movlw	120
   647  0007C2  0101               	movlb	1	; () banked
   648  0007C4  6FDB               	movwf	(main@mL+4)& (0+255),b
   649  0007C6  0E0F               	movlw	15
   650  0007C8  0101               	movlb	1	; () banked
   651  0007CA  6FDC               	movwf	(main@mL+5)& (0+255),b
   652                           
   653                           ;main.c: 78: mL.dir_pin=0;
   654  0007CC  0E00               	movlw	0
   655  0007CE  0101               	movlb	1	; () banked
   656  0007D0  6FDD               	movwf	(main@mL+6)& (0+255),b
   657                           
   658                           ;main.c: 79: mL.PWMperiod=199;
   659  0007D2  0E00               	movlw	0
   660  0007D4  0101               	movlb	1	; () banked
   661  0007D6  6FDF               	movwf	(main@mL+8)& (0+255),b
   662  0007D8  0EC7               	movlw	199
   663  0007DA  6FDE               	movwf	(main@mL+7)& (0+255),b
   664                           
   665                           ;main.c: 81: mR.power=0;
   666  0007DC  0E00               	movlw	0
   667  0007DE  0101               	movlb	1	; () banked
   668  0007E0  6FE0               	movwf	main@mR& (0+255),b
   669                           
   670                           ;main.c: 82: mR.direction=1;
   671  0007E2  0E01               	movlw	1
   672  0007E4  0101               	movlb	1	; () banked
   673  0007E6  6FE1               	movwf	(main@mR+1)& (0+255),b
   674                           
   675                           ; BSR set to: 1
   676                           ;main.c: 83: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   677  0007E8  0E77               	movlw	119
   678  0007EA  0101               	movlb	1	; () banked
   679  0007EC  6FE2               	movwf	(main@mR+2)& (0+255),b
   680  0007EE  0E0F               	movlw	15
   681  0007F0  0101               	movlb	1	; () banked
   682  0007F2  6FE3               	movwf	(main@mR+3)& (0+255),b
   683                           
   684                           ; BSR set to: 1
   685                           ;main.c: 84: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   686  0007F4  0E76               	movlw	118
   687  0007F6  0101               	movlb	1	; () banked
   688  0007F8  6FE4               	movwf	(main@mR+4)& (0+255),b
   689  0007FA  0E0F               	movlw	15
   690  0007FC  0101               	movlb	1	; () banked
   691  0007FE  6FE5               	movwf	(main@mR+5)& (0+255),b
   692                           
   693                           ;main.c: 85: mR.dir_pin=2;
   694  000800  0E02               	movlw	2
   695  000802  0101               	movlb	1	; () banked
   696  000804  6FE6               	movwf	(main@mR+6)& (0+255),b
   697                           
   698                           ;main.c: 86: mR.PWMperiod=199;
   699  000806  0E00               	movlw	0
   700  000808  0101               	movlb	1	; () banked
   701  00080A  6FE8               	movwf	(main@mR+8)& (0+255),b
   702  00080C  0EC7               	movlw	199
   703  00080E  6FE7               	movwf	(main@mR+7)& (0+255),b
   704                           
   705                           ;main.c: 88: OSCCON = 0x72;
   706  000810  0E72               	movlw	114
   707  000812  6ED3               	movwf	4051,c	;volatile
   708  000814                     l73:
   709  000814  B4D3               	btfsc	4051,2,c	;volatile
   710  000816  D164               	goto	l2987
   711  000818  D7FD               	goto	l73
   712  00081A                     l2885:
   713                           
   714                           ;main.c: 96: initMotorPWM();
   715  00081A  EC71  F00A         	call	_initMotorPWM	;wreg free
   716                           
   717                           ;main.c: 97: initRFID();
   718  00081E  ECEE  F00A         	call	_initRFID	;wreg free
   719                           
   720                           ;main.c: 98: initLCD();
   721  000822  ECA7  F007         	call	_initLCD	;wreg free
   722                           
   723                           ;main.c: 99: initIR();
   724  000826  ECDD  F00A         	call	_initIR	;wreg free
   725                           
   726                           ;main.c: 103: fullSpeedAhead(&mL, &mR);
   727  00082A  0ED7               	movlw	low main@mL
   728  00082C  6E37               	movwf	fullSpeedAhead@mL,c
   729  00082E  0E01               	movlw	high main@mL
   730  000830  6E38               	movwf	fullSpeedAhead@mL+1,c
   731  000832  0EE0               	movlw	low main@mR
   732  000834  6E39               	movwf	fullSpeedAhead@mR,c
   733  000836  0E01               	movlw	high main@mR
   734  000838  6E3A               	movwf	fullSpeedAhead@mR+1,c
   735  00083A  EC96  F009         	call	_fullSpeedAhead	;wreg free
   736                           
   737                           ;main.c: 104: delay_s(1);
   738  00083E  0E01               	movlw	1
   739  000840  EC39  F00A         	call	_delay_s
   740                           
   741                           ;main.c: 105: stop(&mL, &mR);
   742  000844  0ED7               	movlw	low main@mL
   743  000846  6E37               	movwf	stop@mL,c
   744  000848  0E01               	movlw	high main@mL
   745  00084A  6E38               	movwf	stop@mL+1,c
   746  00084C  0EE0               	movlw	low main@mR
   747  00084E  6E39               	movwf	stop@mR,c
   748  000850  0E01               	movlw	high main@mR
   749  000852  6E3A               	movwf	stop@mR+1,c
   750  000854  EC5F  F008         	call	_stop	;wreg free
   751                           
   752                           ;main.c: 106: fullSpeedBack(&mL, &mR);
   753  000858  0ED7               	movlw	low main@mL
   754  00085A  0100               	movlb	0	; () banked
   755  00085C  6F60               	movwf	fullSpeedBack@mL& (0+255),b
   756  00085E  0E01               	movlw	high main@mL
   757  000860  0100               	movlb	0	; () banked
   758  000862  6F61               	movwf	(fullSpeedBack@mL+1)& (0+255),b
   759  000864  0EE0               	movlw	low main@mR
   760  000866  0100               	movlb	0	; () banked
   761  000868  6F62               	movwf	fullSpeedBack@mR& (0+255),b
   762  00086A  0E01               	movlw	high main@mR
   763  00086C  0100               	movlb	0	; () banked
   764  00086E  6F63               	movwf	(fullSpeedBack@mR+1)& (0+255),b
   765  000870  EC1C  F00A         	call	_fullSpeedBack	;wreg free
   766                           
   767                           ;main.c: 107: delay_s(1);
   768  000874  0E01               	movlw	1
   769  000876  EC39  F00A         	call	_delay_s
   770                           
   771                           ;main.c: 108: stop(&mL, &mR);
   772  00087A  0ED7               	movlw	low main@mL
   773  00087C  6E37               	movwf	stop@mL,c
   774  00087E  0E01               	movlw	high main@mL
   775  000880  6E38               	movwf	stop@mL+1,c
   776  000882  0EE0               	movlw	low main@mR
   777  000884  6E39               	movwf	stop@mR,c
   778  000886  0E01               	movlw	high main@mR
   779  000888  6E3A               	movwf	stop@mR+1,c
   780  00088A  EC5F  F008         	call	_stop	;wreg free
   781                           
   782                           ;main.c: 110: enableSensor(0, 1);
   783  00088E  0E01               	movlw	1
   784  000890  6E20               	movwf	enableSensor@status,c
   785  000892  0E00               	movlw	0
   786  000894  ECB7  F00A         	call	_enableSensor
   787                           
   788                           ;main.c: 111: enableSensor(1, 1);
   789  000898  0E01               	movlw	1
   790  00089A  6E20               	movwf	enableSensor@status,c
   791  00089C  0E01               	movlw	1
   792  00089E  ECB7  F00A         	call	_enableSensor
   793                           
   794                           ;main.c: 112: mode = 1;
   795  0008A2  0E01               	movlw	1
   796  0008A4  D0D6               	goto	L1
   797  0008A6                     l2909:
   798                           
   799                           ; BSR set to: 1
   800                           ;main.c: 118: if (DirectionFound==-1) {
   801  0008A6  0101               	movlb	1	; () banked
   802  0008A8  29D5               	incf	main@DirectionFound& (0+255),w,b
   803  0008AA  A4D8               	btfss	status,2,c
   804  0008AC  D01A               	goto	l2919
   805                           
   806                           ; BSR set to: 1
   807                           ;main.c: 123: fullSpeedAhead(&mL, &mR);
   808  0008AE  0ED7               	movlw	low main@mL
   809  0008B0  6E37               	movwf	fullSpeedAhead@mL,c
   810  0008B2  0E01               	movlw	high main@mL
   811  0008B4  6E38               	movwf	fullSpeedAhead@mL+1,c
   812  0008B6  0EE0               	movlw	low main@mR
   813  0008B8  6E39               	movwf	fullSpeedAhead@mR,c
   814  0008BA  0E01               	movlw	high main@mR
   815  0008BC  6E3A               	movwf	fullSpeedAhead@mR+1,c
   816  0008BE  EC96  F009         	call	_fullSpeedAhead	;wreg free
   817                           
   818                           ;main.c: 124: delay_tenth_s(ScanAngle);
   819  0008C2  0101               	movlb	1	; () banked
   820  0008C4  51D2               	movf	main@ScanAngle& (0+255),w,b
   821  0008C6  EC55  F00A         	call	_delay_tenth_s
   822                           
   823                           ;main.c: 125: stop(&mL,&mR);
   824  0008CA  0ED7               	movlw	low main@mL
   825  0008CC  6E37               	movwf	stop@mL,c
   826  0008CE  0E01               	movlw	high main@mL
   827  0008D0  6E38               	movwf	stop@mL+1,c
   828  0008D2  0EE0               	movlw	low main@mR
   829  0008D4  6E39               	movwf	stop@mR,c
   830  0008D6  0E01               	movlw	high main@mR
   831  0008D8  6E3A               	movwf	stop@mR+1,c
   832  0008DA  EC5F  F008         	call	_stop	;wreg free
   833                           
   834                           ;main.c: 126: DirectionFound=0;
   835  0008DE  0E00               	movlw	0
   836  0008E0  D033               	goto	L3
   837  0008E2                     l2919:
   838                           
   839                           ; BSR set to: 1
   840  0008E2  0101               	movlb	1	; () banked
   841  0008E4  51D5               	movf	main@DirectionFound& (0+255),w,b
   842  0008E6  0101               	movlb	1	; () banked
   843  0008E8  A4D8               	btfss	status,2,c
   844  0008EA  D01C               	goto	l2923
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 129: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   848  0008EC  0ED7               	movlw	low main@mL
   849  0008EE  0100               	movlb	0	; () banked
   850  0008F0  6F64               	movwf	ScanWithRange@mL& (0+255),b
   851  0008F2  0E01               	movlw	high main@mL
   852  0008F4  0100               	movlb	0	; () banked
   853  0008F6  6F65               	movwf	(ScanWithRange@mL+1)& (0+255),b
   854  0008F8  0EE0               	movlw	low main@mR
   855  0008FA  0100               	movlb	0	; () banked
   856  0008FC  6F66               	movwf	ScanWithRange@mR& (0+255),b
   857  0008FE  0E01               	movlw	high main@mR
   858  000900  0100               	movlb	0	; () banked
   859  000902  6F67               	movwf	(ScanWithRange@mR+1)& (0+255),b
   860  000904  C1D2  F068         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   861  000908  0101               	movlb	1	; () banked
   862  00090A  51D4               	movf	main@Move& (0+255),w,b
   863  00090C  0D01               	mullw	1
   864  00090E  0E64               	movlw	low main@MoveTime
   865  000910  24F3               	addwf	prodl,w,c
   866  000912  0100               	movlb	0	; () banked
   867  000914  6F69               	movwf	ScanWithRange@MoveTime& (0+255),b
   868  000916  0E01               	movlw	high main@MoveTime
   869  000918  20F4               	addwfc	prodh,w,c
   870  00091A  0100               	movlb	0	; () banked
   871  00091C  6F6A               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
   872  00091E  EC6D  F000         	call	_ScanWithRange	;wreg free
   873  000922  D012               	goto	L3
   874  000924                     l2923:
   875                           
   876                           ; BSR set to: 1
   877  000924  0101               	movlb	1	; () banked
   878  000926  05D5               	decf	main@DirectionFound& (0+255),w,b
   879  000928  A4D8               	btfss	status,2,c
   880  00092A  D011               	goto	l2927
   881                           
   882                           ; BSR set to: 1
   883                           ;main.c: 132: DirectionFound = ScanIR(&mL, &mR);
   884  00092C  0ED7               	movlw	low main@mL
   885  00092E  0100               	movlb	0	; () banked
   886  000930  6F64               	movwf	ScanIR@mL& (0+255),b
   887  000932  0E01               	movlw	high main@mL
   888  000934  0100               	movlb	0	; () banked
   889  000936  6F65               	movwf	(ScanIR@mL+1)& (0+255),b
   890  000938  0EE0               	movlw	low main@mR
   891  00093A  0100               	movlb	0	; () banked
   892  00093C  6F66               	movwf	ScanIR@mR& (0+255),b
   893  00093E  0E01               	movlw	high main@mR
   894  000940  0100               	movlb	0	; () banked
   895  000942  6F67               	movwf	(ScanIR@mR+1)& (0+255),b
   896  000944  EC7F  F005         	call	_ScanIR	;wreg free
   897  000948                     L3:
   898  000948  0101               	movlb	1	; () banked
   899  00094A  6FD5               	movwf	main@DirectionFound& (0+255),b
   900                           
   901                           ;main.c: 133: } else if (DirectionFound==2) {
   902  00094C  D008               	goto	l2931
   903  00094E                     l2927:
   904                           
   905                           ; BSR set to: 1
   906  00094E  0E02               	movlw	2
   907  000950  0101               	movlb	1	; () banked
   908  000952  19D5               	xorwf	main@DirectionFound& (0+255),w,b
   909  000954  A4D8               	btfss	status,2,c
   910  000956  D003               	goto	l2931
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 135: mode=2;
   914  000958  0E02               	movlw	2
   915  00095A  0101               	movlb	1	; () banked
   916  00095C  6FD3               	movwf	main@mode& (0+255),b
   917  00095E                     l2931:
   918                           
   919                           ; BSR set to: 1
   920                           ;main.c: 136: }
   921                           ;main.c: 138: MoveType[Move] = 1;
   922  00095E  0101               	movlb	1	; () banked
   923  000960  51D4               	movf	main@Move& (0+255),w,b
   924  000962  0D01               	mullw	1
   925  000964  0E00               	movlw	low main@MoveType
   926  000966  24F3               	addwf	prodl,w,c
   927  000968  6ED9               	movwf	fsr2l,c
   928  00096A  0E01               	movlw	high main@MoveType
   929  00096C  20F4               	addwfc	prodh,w,c
   930  00096E  6EDA               	movwf	fsr2h,c
   931  000970  0E01               	movlw	1
   932  000972  6EDF               	movwf	indf2,c
   933                           
   934                           ; BSR set to: 1
   935                           ;main.c: 139: Move++;
   936  000974  0101               	movlb	1	; () banked
   937  000976  2BD4               	incf	main@Move& (0+255),f,b
   938                           
   939                           ;main.c: 141: break;
   940  000978  D0B3               	goto	l2987
   941  00097A                     l2935:
   942                           
   943                           ; BSR set to: 1
   944                           ;main.c: 147: if (RFID_Read) {
   945  00097A  0101               	movlb	1	; () banked
   946  00097C  51E9               	movf	_RFID_Read& (0+255),w,b	;volatile
   947  00097E  B4D8               	btfsc	status,2,c
   948  000980  D091               	goto	l2977
   949                           
   950                           ; BSR set to: 1
   951                           ;main.c: 148: stop(&mL, &mR);
   952  000982  0ED7               	movlw	low main@mL
   953  000984  6E37               	movwf	stop@mL,c
   954  000986  0E01               	movlw	high main@mL
   955  000988  6E38               	movwf	stop@mL+1,c
   956  00098A  0EE0               	movlw	low main@mR
   957  00098C  6E39               	movwf	stop@mR,c
   958  00098E  0E01               	movlw	high main@mR
   959  000990  6E3A               	movwf	stop@mR+1,c
   960  000992  EC5F  F008         	call	_stop	;wreg free
   961                           
   962                           ;main.c: 149: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   963  000996  0E03               	movlw	3
   964  000998  0101               	movlb	1	; () banked
   965  00099A  19F9               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   966  00099C  A4D8               	btfss	status,2,c
   967  00099E  D002               	goto	u2260
   968  0009A0  0E01               	movlw	1
   969  0009A2  D001               	goto	u2262
   970  0009A4                     u2260:
   971  0009A4  0E00               	movlw	0
   972  0009A6                     u2262:
   973  0009A6  0100               	movlb	0	; () banked
   974  0009A8  6F80               	movwf	??_main& (0+255),b
   975  0009AA  0E02               	movlw	2
   976  0009AC  0101               	movlb	1	; () banked
   977  0009AE  19EA               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   978  0009B0  A4D8               	btfss	status,2,c
   979  0009B2  D002               	goto	u2270
   980  0009B4  0E01               	movlw	1
   981  0009B6  D001               	goto	u2272
   982  0009B8                     u2270:
   983  0009B8  0E00               	movlw	0
   984  0009BA                     u2272:
   985  0009BA  0100               	movlb	0	; () banked
   986  0009BC  1580               	andwf	??_main& (0+255),w,b
   987  0009BE  A0E8               	btfss	wreg,0,c
   988  0009C0  D08F               	goto	l2987
   989                           
   990                           ; BSR set to: 0
   991                           ;main.c: 150: if (VerifySignal(ReceivedString)){
   992  0009C2  0EEA               	movlw	low _ReceivedString
   993  0009C4  6E20               	movwf	VerifySignal@Signal,c
   994  0009C6  0E01               	movlw	high _ReceivedString
   995  0009C8  6E21               	movwf	VerifySignal@Signal+1,c
   996  0009CA  EC05  F008         	call	_VerifySignal	;wreg free
   997  0009CE  0900               	iorlw	0
   998  0009D0  B4D8               	btfsc	status,2,c
   999  0009D2  D042               	goto	l2969
  1000                           
  1001                           ;main.c: 152: for (i=0; i<10; i++){
  1002  0009D4  0E00               	movlw	0
  1003  0009D6  0101               	movlb	1	; () banked
  1004  0009D8  6FD6               	movwf	main@i& (0+255),b
  1005  0009DA                     l2945:
  1006                           
  1007                           ; BSR set to: 1
  1008  0009DA  0E09               	movlw	9
  1009  0009DC  0101               	movlb	1	; () banked
  1010  0009DE  65D6               	cpfsgt	main@i& (0+255),b
  1011  0009E0  D001               	goto	l2949
  1012  0009E2  D020               	goto	l2955
  1013  0009E4                     l2949:
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 153: Message[i] = ReceivedString[i+1];
  1017  0009E4  0101               	movlb	1	; () banked
  1018  0009E6  51D6               	movf	main@i& (0+255),w,b
  1019  0009E8  0100               	movlb	0	; () banked
  1020  0009EA  6F80               	movwf	??_main& (0+255),b
  1021  0009EC  6B81               	clrf	(??_main+1)& (0+255),b
  1022  0009EE  0E01               	movlw	1
  1023  0009F0  0100               	movlb	0	; () banked
  1024  0009F2  2780               	addwf	??_main& (0+255),f,b
  1025  0009F4  0E00               	movlw	0
  1026  0009F6  2381               	addwfc	(??_main+1)& (0+255),f,b
  1027  0009F8  0EEA               	movlw	low _ReceivedString
  1028  0009FA  0100               	movlb	0	; () banked
  1029  0009FC  2580               	addwf	??_main& (0+255),w,b
  1030  0009FE  6ED9               	movwf	fsr2l,c
  1031  000A00  0E01               	movlw	high _ReceivedString
  1032  000A02  0100               	movlb	0	; () banked
  1033  000A04  2181               	addwfc	(??_main+1)& (0+255),w,b
  1034  000A06  6EDA               	movwf	fsr2h,c
  1035  000A08  0101               	movlb	1	; () banked
  1036  000A0A  51D6               	movf	main@i& (0+255),w,b
  1037  000A0C  0D01               	mullw	1
  1038  000A0E  0EC8               	movlw	low main@Message
  1039  000A10  24F3               	addwf	prodl,w,c
  1040  000A12  6EE1               	movwf	fsr1l,c
  1041  000A14  0E01               	movlw	high main@Message
  1042  000A16  20F4               	addwfc	prodh,w,c
  1043  000A18  6EE2               	movwf	fsr1h,c
  1044  000A1A  CFDF FFE7          	movff	indf2,indf1
  1045                           
  1046                           ; BSR set to: 1
  1047  000A1E  0101               	movlb	1	; () banked
  1048  000A20  2BD6               	incf	main@i& (0+255),f,b
  1049  000A22  D7DB               	goto	l2945
  1050  000A24                     l2955:
  1051                           
  1052                           ; BSR set to: 1
  1053                           ;main.c: 154: }
  1054                           ;main.c: 157: for (i=0; i<16; i++) {
  1055  000A24  0E00               	movlw	0
  1056  000A26  0101               	movlb	1	; () banked
  1057  000A28  6FD6               	movwf	main@i& (0+255),b
  1058  000A2A                     l2957:
  1059                           
  1060                           ; BSR set to: 1
  1061  000A2A  0E0F               	movlw	15
  1062  000A2C  0101               	movlb	1	; () banked
  1063  000A2E  65D6               	cpfsgt	main@i& (0+255),b
  1064  000A30  D001               	goto	l2961
  1065  000A32  D00E               	goto	l2967
  1066  000A34                     l2961:
  1067                           
  1068                           ; BSR set to: 1
  1069                           ;main.c: 158: ReceivedString[i]=0;
  1070  000A34  0101               	movlb	1	; () banked
  1071  000A36  51D6               	movf	main@i& (0+255),w,b
  1072  000A38  0D01               	mullw	1
  1073  000A3A  0EEA               	movlw	low _ReceivedString
  1074  000A3C  24F3               	addwf	prodl,w,c
  1075  000A3E  6ED9               	movwf	fsr2l,c
  1076  000A40  0E01               	movlw	high _ReceivedString
  1077  000A42  20F4               	addwfc	prodh,w,c
  1078  000A44  6EDA               	movwf	fsr2h,c
  1079  000A46  0E00               	movlw	0
  1080  000A48  6EDF               	movwf	indf2,c
  1081                           
  1082                           ; BSR set to: 1
  1083  000A4A  0101               	movlb	1	; () banked
  1084  000A4C  2BD6               	incf	main@i& (0+255),f,b
  1085  000A4E  D7ED               	goto	l2957
  1086  000A50                     l2967:
  1087                           
  1088                           ; BSR set to: 1
  1089                           ;main.c: 159: }
  1090                           ;main.c: 160: mode = 3;
  1091  000A50  0E03               	movlw	3
  1092  000A52                     L1:
  1093  000A52  0101               	movlb	1	; () banked
  1094  000A54  6FD3               	movwf	main@mode& (0+255),b
  1095                           
  1096                           ;main.c: 162: } else {
  1097  000A56  D044               	goto	l2987
  1098  000A58                     l2969:
  1099                           
  1100                           ;main.c: 163: fullSpeedBack(&mL,&mR);
  1101  000A58  0ED7               	movlw	low main@mL
  1102  000A5A  0100               	movlb	0	; () banked
  1103  000A5C  6F60               	movwf	fullSpeedBack@mL& (0+255),b
  1104  000A5E  0E01               	movlw	high main@mL
  1105  000A60  0100               	movlb	0	; () banked
  1106  000A62  6F61               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1107  000A64  0EE0               	movlw	low main@mR
  1108  000A66  0100               	movlb	0	; () banked
  1109  000A68  6F62               	movwf	fullSpeedBack@mR& (0+255),b
  1110  000A6A  0E01               	movlw	high main@mR
  1111  000A6C  0100               	movlb	0	; () banked
  1112  000A6E  6F63               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1113  000A70  EC1C  F00A         	call	_fullSpeedBack	;wreg free
  1114                           
  1115                           ;main.c: 164: delay_tenth_s(5);
  1116  000A74  0E05               	movlw	5
  1117  000A76  EC55  F00A         	call	_delay_tenth_s
  1118                           
  1119                           ;main.c: 165: stop(&mL,&mR);
  1120  000A7A  0ED7               	movlw	low main@mL
  1121  000A7C  6E37               	movwf	stop@mL,c
  1122  000A7E  0E01               	movlw	high main@mL
  1123  000A80  6E38               	movwf	stop@mL+1,c
  1124  000A82  0EE0               	movlw	low main@mR
  1125  000A84  6E39               	movwf	stop@mR,c
  1126  000A86  0E01               	movlw	high main@mR
  1127  000A88  6E3A               	movwf	stop@mR+1,c
  1128  000A8A  EC5F  F008         	call	_stop	;wreg free
  1129                           
  1130                           ;main.c: 166: fullSpeedAhead(&mL,&mR);
  1131  000A8E  0ED7               	movlw	low main@mL
  1132  000A90  6E37               	movwf	fullSpeedAhead@mL,c
  1133  000A92  0E01               	movlw	high main@mL
  1134  000A94  6E38               	movwf	fullSpeedAhead@mL+1,c
  1135  000A96  0EE0               	movlw	low main@mR
  1136  000A98  6E39               	movwf	fullSpeedAhead@mR,c
  1137  000A9A  0E01               	movlw	high main@mR
  1138  000A9C  6E3A               	movwf	fullSpeedAhead@mR+1,c
  1139  000A9E  EC96  F009         	call	_fullSpeedAhead	;wreg free
  1140                           
  1141                           ;main.c: 167: }
  1142                           ;main.c: 168: }
  1143                           ;main.c: 169: } else {
  1144  000AA2  D01E               	goto	l2987
  1145  000AA4                     l2977:
  1146                           
  1147                           ;main.c: 170: DirectionFound=1;
  1148  000AA4  0E01               	movlw	1
  1149  000AA6  0101               	movlb	1	; () banked
  1150  000AA8  6FD5               	movwf	main@DirectionFound& (0+255),b
  1151                           
  1152                           ;main.c: 171: mode=1;
  1153  000AAA  0E01               	movlw	1
  1154  000AAC  0101               	movlb	1	; () banked
  1155  000AAE  6FD3               	movwf	main@mode& (0+255),b
  1156                           
  1157                           ; BSR set to: 1
  1158                           ;main.c: 172: fullSpeedAhead(&mL,&mR);
  1159  000AB0  0ED7               	movlw	low main@mL
  1160  000AB2  6E37               	movwf	fullSpeedAhead@mL,c
  1161  000AB4  0E01               	movlw	high main@mL
  1162  000AB6  6E38               	movwf	fullSpeedAhead@mL+1,c
  1163  000AB8  0EE0               	movlw	low main@mR
  1164  000ABA  6E39               	movwf	fullSpeedAhead@mR,c
  1165  000ABC  0E01               	movlw	high main@mR
  1166  000ABE  6E3A               	movwf	fullSpeedAhead@mR+1,c
  1167  000AC0  EC96  F009         	call	_fullSpeedAhead	;wreg free
  1168                           
  1169                           ;main.c: 173: delay_tenth_s(5);
  1170  000AC4  0E05               	movlw	5
  1171  000AC6  EC55  F00A         	call	_delay_tenth_s
  1172                           
  1173                           ;main.c: 174: }
  1174                           ;main.c: 176: break;
  1175  000ACA  D00A               	goto	l2987
  1176  000ACC                     l2983:
  1177                           
  1178                           ;main.c: 180: stop(&mL,&mR);
  1179  000ACC  0ED7               	movlw	low main@mL
  1180  000ACE  6E37               	movwf	stop@mL,c
  1181  000AD0  0E01               	movlw	high main@mL
  1182  000AD2  6E38               	movwf	stop@mL+1,c
  1183  000AD4  0EE0               	movlw	low main@mR
  1184  000AD6  6E39               	movwf	stop@mR,c
  1185  000AD8  0E01               	movlw	high main@mR
  1186  000ADA  6E3A               	movwf	stop@mR+1,c
  1187  000ADC  EC5F  F008         	call	_stop	;wreg free
  1188  000AE0                     l2987:
  1189  000AE0  0101               	movlb	1	; () banked
  1190  000AE2  51D3               	movf	main@mode& (0+255),w,b
  1191                           
  1192                           ; Switch size 1, requested type "space"
  1193                           ; Number of cases is 4, Range of values is 0 to 3
  1194                           ; switch strategies available:
  1195                           ; Name         Instructions Cycles
  1196                           ; simple_byte           13     7 (average)
  1197                           ;	Chosen strategy is simple_byte
  1198  000AE4  0A00               	xorlw	0	; case 0
  1199  000AE6  B4D8               	btfsc	status,2,c
  1200  000AE8  D698               	goto	l2885
  1201  000AEA  0A01               	xorlw	1	; case 1
  1202  000AEC  B4D8               	btfsc	status,2,c
  1203  000AEE  D6DB               	goto	l2909
  1204  000AF0  0A03               	xorlw	3	; case 2
  1205  000AF2  B4D8               	btfsc	status,2,c
  1206  000AF4  D742               	goto	l2935
  1207  000AF6  0A01               	xorlw	1	; case 3
  1208  000AF8  B4D8               	btfsc	status,2,c
  1209  000AFA  D7E8               	goto	l2983
  1210                           
  1211                           ; BSR set to: 1
  1212                           
  1213                           ; BSR set to: 1
  1214  000AFC  D7F1               	goto	l2987
  1215  000AFE                     __end_of_main:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           prodh	equ	0xFF4
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           indf1	equ	0xFE7
  1224                           fsr1h	equ	0xFE2
  1225                           fsr1l	equ	0xFE1
  1226                           indf2	equ	0xFDF
  1227                           fsr2h	equ	0xFDA
  1228                           fsr2l	equ	0xFD9
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _initRFID *****************
  1232 ;; Defined at:
  1233 ;;		line 5 in file "RFID_Reader.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;		None               void
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1247 ;;      Params:         0       0       0       0
  1248 ;;      Locals:         0       0       0       0
  1249 ;;      Temps:          0       0       0       0
  1250 ;;      Totals:         0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    2
  1254 ;; This function calls:
  1255 ;;		Nothing
  1256 ;; This function is called by:
  1257 ;;		_main
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text1
  1262  0015DC                     __ptext1:
  1263                           	opt stack 0
  1264  0015DC                     _initRFID:
  1265                           	opt stack 28
  1266                           
  1267                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1268                           
  1269                           ; BSR set to: 1
  1270                           ;incstack = 0
  1271  0015DC  5094               	movf	3988,w,c	;volatile
  1272  0015DE  09C0               	iorlw	192
  1273  0015E0  6E94               	movwf	3988,c	;volatile
  1274                           
  1275                           ;RFID_Reader.c: 10: SPBRG=205;
  1276  0015E2  0ECD               	movlw	205
  1277  0015E4  6EAF               	movwf	4015,c	;volatile
  1278                           
  1279                           ;RFID_Reader.c: 11: SPBRGH=0;
  1280  0015E6  0E00               	movlw	0
  1281  0015E8  6EB0               	movwf	4016,c	;volatile
  1282                           
  1283                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1284  0015EA  86AA               	bsf	4010,3,c	;volatile
  1285                           
  1286                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1287  0015EC  84AC               	bsf	4012,2,c	;volatile
  1288                           
  1289                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1290  0015EE  88AB               	bsf	4011,4,c	;volatile
  1291                           
  1292                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1293  0015F0  8EAB               	bsf	4011,7,c	;volatile
  1294                           
  1295                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1296  0015F2  98AC               	bcf	4012,4,c	;volatile
  1297                           
  1298                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1299  0015F4  9CAB               	bcf	4011,6,c	;volatile
  1300  0015F6  0012               	return		;funcret
  1301  0015F8                     __end_of_initRFID:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           intcon	equ	0xFF2
  1307                           postinc0	equ	0xFEE
  1308                           wreg	equ	0xFE8
  1309                           indf1	equ	0xFE7
  1310                           fsr1h	equ	0xFE2
  1311                           fsr1l	equ	0xFE1
  1312                           indf2	equ	0xFDF
  1313                           fsr2h	equ	0xFDA
  1314                           fsr2l	equ	0xFD9
  1315                           status	equ	0xFD8
  1316                           
  1317 ;; *************** function _initMotorPWM *****************
  1318 ;; Defined at:
  1319 ;;		line 4 in file "dc_motor.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;		None
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;		None
  1324 ;; Return value:  Size  Location     Type
  1325 ;;		None               void
  1326 ;; Registers used:
  1327 ;;		wreg, status,2
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1333 ;;      Params:         0       0       0       0
  1334 ;;      Locals:         0       0       0       0
  1335 ;;      Temps:          0       0       0       0
  1336 ;;      Totals:         0       0       0       0
  1337 ;;Total ram usage:        0 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; Hardware stack levels required when called:    2
  1340 ;; This function calls:
  1341 ;;		Nothing
  1342 ;; This function is called by:
  1343 ;;		_main
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           	psect	text2
  1348  0014E2                     __ptext2:
  1349                           	opt stack 0
  1350  0014E2                     _initMotorPWM:
  1351                           	opt stack 28
  1352                           
  1353                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1354                           
  1355                           ;incstack = 0
  1356  0014E2  0E00               	movlw	0
  1357  0014E4  6E7F               	movwf	3967,c	;volatile
  1358                           
  1359                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1360  0014E6  0E80               	movlw	128
  1361  0014E8  6E7E               	movwf	3966,c	;volatile
  1362                           
  1363                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1364  0014EA  0E6F               	movlw	111
  1365  0014EC  6E6F               	movwf	3951,c	;volatile
  1366                           
  1367                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1368  0014EE  0E00               	movlw	0
  1369  0014F0  6E6E               	movwf	3950,c	;volatile
  1370                           
  1371                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1372  0014F2  0EC7               	movlw	199
  1373  0014F4  6E7B               	movwf	3963,c	;volatile
  1374                           
  1375                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1376  0014F6  0E00               	movlw	0
  1377  0014F8  6E7A               	movwf	3962,c	;volatile
  1378                           
  1379                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1380  0014FA  0E00               	movlw	0
  1381  0014FC  6E79               	movwf	3961,c	;volatile
  1382                           
  1383                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1384  0014FE  0E00               	movlw	0
  1385  001500  6E78               	movwf	3960,c	;volatile
  1386                           
  1387                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1388  001502  0E00               	movlw	0
  1389  001504  6E77               	movwf	3959,c	;volatile
  1390                           
  1391                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1392  001506  0E00               	movlw	0
  1393  001508  6E76               	movwf	3958,c	;volatile
  1394                           
  1395                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1396  00150A  9093               	bcf	3987,0,c	;volatile
  1397                           
  1398                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1399  00150C  9293               	bcf	3987,1,c	;volatile
  1400                           
  1401                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1402  00150E  9493               	bcf	3987,2,c	;volatile
  1403                           
  1404                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1405  001510  9693               	bcf	3987,3,c	;volatile
  1406  001512  0012               	return		;funcret
  1407  001514                     __end_of_initMotorPWM:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           prodh	equ	0xFF4
  1411                           prodl	equ	0xFF3
  1412                           intcon	equ	0xFF2
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           indf1	equ	0xFE7
  1416                           fsr1h	equ	0xFE2
  1417                           fsr1l	equ	0xFE1
  1418                           indf2	equ	0xFDF
  1419                           fsr2h	equ	0xFDA
  1420                           fsr2l	equ	0xFD9
  1421                           status	equ	0xFD8
  1422                           
  1423 ;; *************** function _initLCD *****************
  1424 ;; Defined at:
  1425 ;;		line 38 in file "LCD.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  2   32[None  ] int 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1439 ;;      Params:         0       0       0       0
  1440 ;;      Locals:         0       0       0       0
  1441 ;;      Temps:          1       0       0       0
  1442 ;;      Totals:         1       0       0       0
  1443 ;;Total ram usage:        1 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    5
  1446 ;; This function calls:
  1447 ;;		_LCDout
  1448 ;;		_SendLCD
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text3
  1455  000F4E                     __ptext3:
  1456                           	opt stack 0
  1457  000F4E                     _initLCD:
  1458                           	opt stack 25
  1459                           
  1460                           ;LCD.c: 44: TRISAbits.RA6=0;
  1461                           
  1462                           ;incstack = 0
  1463  000F4E  9C92               	bcf	3986,6,c	;volatile
  1464                           
  1465                           ;LCD.c: 45: TRISCbits.RC0=0;
  1466  000F50  9094               	bcf	3988,0,c	;volatile
  1467                           
  1468                           ;LCD.c: 46: TRISCbits.RC1=0;
  1469  000F52  9294               	bcf	3988,1,c	;volatile
  1470                           
  1471                           ;LCD.c: 47: TRISCbits.RC2=0;
  1472  000F54  9494               	bcf	3988,2,c	;volatile
  1473                           
  1474                           ;LCD.c: 48: TRISDbits.RD0=0;
  1475  000F56  9095               	bcf	3989,0,c	;volatile
  1476                           
  1477                           ;LCD.c: 49: TRISDbits.RD1=0;
  1478  000F58  9295               	bcf	3989,1,c	;volatile
  1479                           
  1480                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1481  000F5A  0E27               	movlw	39
  1482  000F5C  6E26               	movwf	??_initLCD& (0+255),c
  1483  000F5E  0EF5               	movlw	245
  1484  000F60                     u2347:
  1485  000F60  2EE8               	decfsz	wreg,f,c
  1486  000F62  D7FE               	goto	u2347
  1487  000F64  2E26               	decfsz	??_initLCD& (0+255),f,c
  1488  000F66  D7FC               	goto	u2347
  1489  000F68  F000               	nop	
  1490                           
  1491                           ;LCD.c: 52: LCDout(0b0011);
  1492  000F6A  0E03               	movlw	3
  1493  000F6C  EC44  F007         	call	_LCDout
  1494                           
  1495                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1496  000F70  0E0D               	movlw	13
  1497  000F72  6E26               	movwf	??_initLCD& (0+255),c
  1498  000F74  0EFC               	movlw	252
  1499  000F76                     u2357:
  1500  000F76  2EE8               	decfsz	wreg,f,c
  1501  000F78  D7FE               	goto	u2357
  1502  000F7A  2E26               	decfsz	??_initLCD& (0+255),f,c
  1503  000F7C  D7FC               	goto	u2357
  1504                           
  1505                           ;LCD.c: 54: LCDout(0b0011);
  1506  000F7E  0E03               	movlw	3
  1507  000F80  EC44  F007         	call	_LCDout
  1508                           
  1509                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1510  000F84  0E85               	movlw	133
  1511  000F86                     u2367:
  1512  000F86  2EE8               	decfsz	wreg,f,c
  1513  000F88  D7FE               	goto	u2367
  1514  000F8A  F000               	nop	
  1515                           
  1516                           ;LCD.c: 56: LCDout(0b0011);
  1517  000F8C  0E03               	movlw	3
  1518  000F8E  EC44  F007         	call	_LCDout
  1519                           
  1520                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1521  000F92  0E21               	movlw	33
  1522  000F94                     u2377:
  1523  000F94  2EE8               	decfsz	wreg,f,c
  1524  000F96  D7FE               	goto	u2377
  1525  000F98  F000               	nop	
  1526                           
  1527                           ;LCD.c: 58: LCDout(0b0010);
  1528  000F9A  0E02               	movlw	2
  1529  000F9C  EC44  F007         	call	_LCDout
  1530                           
  1531                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1532  000FA0  0E21               	movlw	33
  1533  000FA2                     u2387:
  1534  000FA2  2EE8               	decfsz	wreg,f,c
  1535  000FA4  D7FE               	goto	u2387
  1536  000FA6  F000               	nop	
  1537                           
  1538                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1539  000FA8  0E00               	movlw	0
  1540  000FAA  6E24               	movwf	SendLCD@type,c
  1541  000FAC  0E28               	movlw	40
  1542  000FAE  EC8A  F00A         	call	_SendLCD
  1543                           
  1544                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1545  000FB2  0E21               	movlw	33
  1546  000FB4                     u2397:
  1547  000FB4  2EE8               	decfsz	wreg,f,c
  1548  000FB6  D7FE               	goto	u2397
  1549  000FB8  F000               	nop	
  1550                           
  1551                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1552  000FBA  0E00               	movlw	0
  1553  000FBC  6E24               	movwf	SendLCD@type,c
  1554  000FBE  0E08               	movlw	8
  1555  000FC0  EC8A  F00A         	call	_SendLCD
  1556                           
  1557                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1558  000FC4  0E21               	movlw	33
  1559  000FC6                     u2407:
  1560  000FC6  2EE8               	decfsz	wreg,f,c
  1561  000FC8  D7FE               	goto	u2407
  1562  000FCA  F000               	nop	
  1563                           
  1564                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1565  000FCC  0E00               	movlw	0
  1566  000FCE  6E24               	movwf	SendLCD@type,c
  1567  000FD0  0E01               	movlw	1
  1568  000FD2  EC8A  F00A         	call	_SendLCD
  1569                           
  1570                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1571  000FD6  0E0D               	movlw	13
  1572  000FD8  6E26               	movwf	??_initLCD& (0+255),c
  1573  000FDA  0EFC               	movlw	252
  1574  000FDC                     u2417:
  1575  000FDC  2EE8               	decfsz	wreg,f,c
  1576  000FDE  D7FE               	goto	u2417
  1577  000FE0  2E26               	decfsz	??_initLCD& (0+255),f,c
  1578  000FE2  D7FC               	goto	u2417
  1579                           
  1580                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1581  000FE4  0E00               	movlw	0
  1582  000FE6  6E24               	movwf	SendLCD@type,c
  1583  000FE8  0E06               	movlw	6
  1584  000FEA  EC8A  F00A         	call	_SendLCD
  1585                           
  1586                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1587  000FEE  0E21               	movlw	33
  1588  000FF0                     u2427:
  1589  000FF0  2EE8               	decfsz	wreg,f,c
  1590  000FF2  D7FE               	goto	u2427
  1591  000FF4  F000               	nop	
  1592                           
  1593                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1594  000FF6  0E00               	movlw	0
  1595  000FF8  6E24               	movwf	SendLCD@type,c
  1596  000FFA  0E0C               	movlw	12
  1597  000FFC  EC8A  F00A         	call	_SendLCD
  1598                           
  1599                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1600  001000  0E21               	movlw	33
  1601  001002                     u2437:
  1602  001002  2EE8               	decfsz	wreg,f,c
  1603  001004  D7FE               	goto	u2437
  1604  001006  F000               	nop	
  1605  001008  0012               	return		;funcret
  1606  00100A                     __end_of_initLCD:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           prodh	equ	0xFF4
  1610                           prodl	equ	0xFF3
  1611                           intcon	equ	0xFF2
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           indf1	equ	0xFE7
  1615                           fsr1h	equ	0xFE2
  1616                           fsr1l	equ	0xFE1
  1617                           indf2	equ	0xFDF
  1618                           fsr2h	equ	0xFDA
  1619                           fsr2l	equ	0xFD9
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _SendLCD *****************
  1623 ;; Defined at:
  1624 ;;		line 27 in file "LCD.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  Byte            1    wreg     unsigned char 
  1627 ;;  type            1   35[COMRAM] unsigned char 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  Byte            1   36[COMRAM] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;		None               void
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1639 ;;      Params:         1       0       0       0
  1640 ;;      Locals:         1       0       0       0
  1641 ;;      Temps:          0       0       0       0
  1642 ;;      Totals:         2       0       0       0
  1643 ;;Total ram usage:        2 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    4
  1646 ;; This function calls:
  1647 ;;		_LCDout
  1648 ;; This function is called by:
  1649 ;;		_initLCD
  1650 ;;		_SetLine
  1651 ;;		_LCD_String
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text4
  1656  001514                     __ptext4:
  1657                           	opt stack 0
  1658  001514                     _SendLCD:
  1659                           	opt stack 25
  1660                           
  1661                           ;incstack = 0
  1662                           ;SendLCD@Byte stored from wreg
  1663  001514  6E25               	movwf	SendLCD@Byte,c
  1664                           
  1665                           ;LCD.c: 30: LATAbits.LATA6=type;
  1666  001516  B024               	btfsc	SendLCD@type,0,c
  1667  001518  D002               	bra	u1235
  1668  00151A  9C89               	bcf	3977,6,c	;volatile
  1669  00151C  D001               	bra	u1236
  1670  00151E                     u1235:
  1671  00151E  8C89               	bsf	3977,6,c	;volatile
  1672  001520                     u1236:
  1673                           
  1674                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1675  001520  3825               	swapf	SendLCD@Byte,w,c
  1676  001522  0B0F               	andlw	15
  1677  001524  0B0F               	andlw	15
  1678  001526  EC44  F007         	call	_LCDout
  1679                           
  1680                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1681  00152A  0E06               	movlw	6
  1682  00152C                     u2447:
  1683  00152C  2EE8               	decfsz	wreg,f,c
  1684  00152E  D7FE               	goto	u2447
  1685  001530  D000               	nop2		;nop
  1686                           
  1687                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1688  001532  5025               	movf	SendLCD@Byte,w,c
  1689  001534  0B0F               	andlw	15
  1690  001536  EC44  F007         	call	_LCDout
  1691                           
  1692                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1693  00153A  0E21               	movlw	33
  1694  00153C                     u2457:
  1695  00153C  2EE8               	decfsz	wreg,f,c
  1696  00153E  D7FE               	goto	u2457
  1697  001540  F000               	nop	
  1698  001542  0012               	return		;funcret
  1699  001544                     __end_of_SendLCD:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           prodh	equ	0xFF4
  1703                           prodl	equ	0xFF3
  1704                           intcon	equ	0xFF2
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           indf1	equ	0xFE7
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           indf2	equ	0xFDF
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _LCDout *****************
  1716 ;; Defined at:
  1717 ;;		line 14 in file "LCD.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  number          1    wreg     unsigned char 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  number          1   34[COMRAM] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1731 ;;      Params:         0       0       0       0
  1732 ;;      Locals:         1       0       0       0
  1733 ;;      Temps:          3       0       0       0
  1734 ;;      Totals:         4       0       0       0
  1735 ;;Total ram usage:        4 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    3
  1738 ;; This function calls:
  1739 ;;		_E_TOG
  1740 ;; This function is called by:
  1741 ;;		_SendLCD
  1742 ;;		_initLCD
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text5
  1747  000E88                     __ptext5:
  1748                           	opt stack 0
  1749  000E88                     _LCDout:
  1750                           	opt stack 25
  1751                           
  1752                           ;incstack = 0
  1753                           ;LCDout@number stored from wreg
  1754  000E88  6E23               	movwf	LCDout@number,c
  1755                           
  1756                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1757  000E8A  5023               	movf	LCDout@number,w,c
  1758  000E8C  6E20               	movwf	??_LCDout& (0+255),c
  1759  000E8E  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1760  000E90  0E07               	movlw	7
  1761  000E92                     u1155:
  1762  000E92  90D8               	bcf	status,0,c
  1763  000E94  3620               	rlcf	??_LCDout,f,c
  1764  000E96  3621               	rlcf	??_LCDout+1,f,c
  1765  000E98  2EE8               	decfsz	wreg,f,c
  1766  000E9A  D7FB               	goto	u1155
  1767  000E9C  0E07               	movlw	7
  1768  000E9E  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1769  000EA0                     u1165:
  1770  000EA0  3421               	rlcf	??_LCDout+1,w,c
  1771  000EA2  3221               	rrcf	??_LCDout+1,f,c
  1772  000EA4  3220               	rrcf	??_LCDout,f,c
  1773  000EA6  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1774  000EA8  D7FB               	goto	u1165
  1775  000EAA  4620               	rlncf	??_LCDout,f,c
  1776  000EAC  508B               	movf	3979,w,c	;volatile
  1777  000EAE  1820               	xorwf	??_LCDout,w,c
  1778  000EB0  0BFD               	andlw	-3
  1779  000EB2  1820               	xorwf	??_LCDout,w,c
  1780  000EB4  6E8B               	movwf	3979,c	;volatile
  1781                           
  1782                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1783  000EB6  5023               	movf	LCDout@number,w,c
  1784  000EB8  6E20               	movwf	??_LCDout& (0+255),c
  1785  000EBA  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1786  000EBC  0E06               	movlw	6
  1787  000EBE                     u1175:
  1788  000EBE  90D8               	bcf	status,0,c
  1789  000EC0  3620               	rlcf	??_LCDout,f,c
  1790  000EC2  3621               	rlcf	??_LCDout+1,f,c
  1791  000EC4  2EE8               	decfsz	wreg,f,c
  1792  000EC6  D7FB               	goto	u1175
  1793  000EC8  0E07               	movlw	7
  1794  000ECA  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1795  000ECC                     u1185:
  1796  000ECC  3421               	rlcf	??_LCDout+1,w,c
  1797  000ECE  3221               	rrcf	??_LCDout+1,f,c
  1798  000ED0  3220               	rrcf	??_LCDout,f,c
  1799  000ED2  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1800  000ED4  D7FB               	goto	u1185
  1801  000ED6  4620               	rlncf	??_LCDout,f,c
  1802  000ED8  4620               	rlncf	??_LCDout,f,c
  1803  000EDA  508B               	movf	3979,w,c	;volatile
  1804  000EDC  1820               	xorwf	??_LCDout,w,c
  1805  000EDE  0BFB               	andlw	-5
  1806  000EE0  1820               	xorwf	??_LCDout,w,c
  1807  000EE2  6E8B               	movwf	3979,c	;volatile
  1808                           
  1809                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1810  000EE4  5023               	movf	LCDout@number,w,c
  1811  000EE6  6E20               	movwf	??_LCDout& (0+255),c
  1812  000EE8  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1813  000EEA  0E05               	movlw	5
  1814  000EEC                     u1195:
  1815  000EEC  90D8               	bcf	status,0,c
  1816  000EEE  3620               	rlcf	??_LCDout,f,c
  1817  000EF0  3621               	rlcf	??_LCDout+1,f,c
  1818  000EF2  2EE8               	decfsz	wreg,f,c
  1819  000EF4  D7FB               	goto	u1195
  1820  000EF6  0E07               	movlw	7
  1821  000EF8  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1822  000EFA                     u1205:
  1823  000EFA  3421               	rlcf	??_LCDout+1,w,c
  1824  000EFC  3221               	rrcf	??_LCDout+1,f,c
  1825  000EFE  3220               	rrcf	??_LCDout,f,c
  1826  000F00  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1827  000F02  D7FB               	goto	u1205
  1828  000F04  508C               	movf	3980,w,c	;volatile
  1829  000F06  1820               	xorwf	??_LCDout,w,c
  1830  000F08  0BFE               	andlw	-2
  1831  000F0A  1820               	xorwf	??_LCDout,w,c
  1832  000F0C  6E8C               	movwf	3980,c	;volatile
  1833                           
  1834                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1835  000F0E  5023               	movf	LCDout@number,w,c
  1836  000F10  6E20               	movwf	??_LCDout& (0+255),c
  1837  000F12  6A21               	clrf	(??_LCDout+1)& (0+255),c
  1838  000F14  3A20               	swapf	??_LCDout,f,c
  1839  000F16  3A21               	swapf	??_LCDout+1,f,c
  1840  000F18  0EF0               	movlw	240
  1841  000F1A  1621               	andwf	??_LCDout+1,f,c
  1842  000F1C  5020               	movf	??_LCDout,w,c
  1843  000F1E  0B0F               	andlw	15
  1844  000F20  1221               	iorwf	??_LCDout+1,f,c
  1845  000F22  0EF0               	movlw	240
  1846  000F24  1620               	andwf	??_LCDout,f,c
  1847  000F26  0E07               	movlw	7
  1848  000F28  6E22               	movwf	(??_LCDout+2)& (0+255),c
  1849  000F2A                     u1215:
  1850  000F2A  3421               	rlcf	??_LCDout+1,w,c
  1851  000F2C  3221               	rrcf	??_LCDout+1,f,c
  1852  000F2E  3220               	rrcf	??_LCDout,f,c
  1853  000F30  2E22               	decfsz	(??_LCDout+2)& (0+255),f,c
  1854  000F32  D7FB               	goto	u1215
  1855  000F34  4620               	rlncf	??_LCDout,f,c
  1856  000F36  508C               	movf	3980,w,c	;volatile
  1857  000F38  1820               	xorwf	??_LCDout,w,c
  1858  000F3A  0BFD               	andlw	-3
  1859  000F3C  1820               	xorwf	??_LCDout,w,c
  1860  000F3E  6E8C               	movwf	3980,c	;volatile
  1861                           
  1862                           ;LCD.c: 21: E_TOG();
  1863  000F40  ECFC  F00A         	call	_E_TOG	;wreg free
  1864                           
  1865                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1866  000F44  0E03               	movlw	3
  1867  000F46                     u2467:
  1868  000F46  2EE8               	decfsz	wreg,f,c
  1869  000F48  D7FE               	goto	u2467
  1870  000F4A  F000               	nop	
  1871  000F4C  0012               	return		;funcret
  1872  000F4E                     __end_of_LCDout:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           prodh	equ	0xFF4
  1876                           prodl	equ	0xFF3
  1877                           intcon	equ	0xFF2
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           indf1	equ	0xFE7
  1881                           fsr1h	equ	0xFE2
  1882                           fsr1l	equ	0xFE1
  1883                           indf2	equ	0xFDF
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _E_TOG *****************
  1889 ;; Defined at:
  1890 ;;		line 5 in file "LCD.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;		None               void
  1897 ;; Registers used:
  1898 ;;		wreg
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1904 ;;      Params:         0       0       0       0
  1905 ;;      Locals:         0       0       0       0
  1906 ;;      Temps:          0       0       0       0
  1907 ;;      Totals:         0       0       0       0
  1908 ;;Total ram usage:        0 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    2
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_LCDout
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text6
  1919  0015F8                     __ptext6:
  1920                           	opt stack 0
  1921  0015F8                     _E_TOG:
  1922                           	opt stack 25
  1923                           
  1924                           ;LCD.c: 8: LATCbits.LATC0=1;
  1925                           
  1926                           ;incstack = 0
  1927  0015F8  808B               	bsf	3979,0,c	;volatile
  1928                           
  1929                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1930  0015FA  0E03               	movlw	3
  1931  0015FC                     u2477:
  1932  0015FC  2EE8               	decfsz	wreg,f,c
  1933  0015FE  D7FE               	goto	u2477
  1934  001600  F000               	nop	
  1935                           
  1936                           ;LCD.c: 10: LATCbits.LATC0=0;
  1937  001602  908B               	bcf	3979,0,c	;volatile
  1938  001604  0012               	return		;funcret
  1939  001606                     __end_of_E_TOG:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf1	equ	0xFE7
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           fsr2h	equ	0xFDA
  1952                           fsr2l	equ	0xFD9
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _initIR *****************
  1956 ;; Defined at:
  1957 ;;		line 30 in file "IR_Reading.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;		None
  1962 ;; Return value:  Size  Location     Type
  1963 ;;		None               void
  1964 ;; Registers used:
  1965 ;;		wreg, status,2
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1971 ;;      Params:         0       0       0       0
  1972 ;;      Locals:         0       0       0       0
  1973 ;;      Temps:          0       0       0       0
  1974 ;;      Totals:         0       0       0       0
  1975 ;;Total ram usage:        0 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    2
  1978 ;; This function calls:
  1979 ;;		Nothing
  1980 ;; This function is called by:
  1981 ;;		_main
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text7
  1986  0015BA                     __ptext7:
  1987                           	opt stack 0
  1988  0015BA                     _initIR:
  1989                           	opt stack 28
  1990                           
  1991                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  1992                           
  1993                           ;incstack = 0
  1994  0015BA  9489               	bcf	3977,2,c	;volatile
  1995                           
  1996                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  1997  0015BC  9689               	bcf	3977,3,c	;volatile
  1998                           
  1999                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2000  0015BE  8492               	bsf	3986,2,c	;volatile
  2001                           
  2002                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2003  0015C0  8692               	bsf	3986,3,c	;volatile
  2004                           
  2005                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2006  0015C2  94B8               	bcf	4024,2,c	;volatile
  2007                           
  2008                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2009  0015C4  96B8               	bcf	4024,3,c	;volatile
  2010                           
  2011                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2012  0015C6  9CB8               	bcf	4024,6,c	;volatile
  2013                           
  2014                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2015  0015C8  9EB8               	bcf	4024,7,c	;volatile
  2016                           
  2017                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2018  0015CA  0E06               	movlw	6
  2019  0015CC  6E63               	movwf	3939,c	;volatile
  2020                           
  2021                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2022  0015CE  0E06               	movlw	6
  2023  0015D0  6E62               	movwf	3938,c	;volatile
  2024                           
  2025                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2026  0015D2  9096               	bcf	3990,0,c	;volatile
  2027                           
  2028                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2029  0015D4  9296               	bcf	3990,1,c	;volatile
  2030                           
  2031                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2032  0015D6  0E59               	movlw	89
  2033  0015D8  6EB7               	movwf	4023,c	;volatile
  2034  0015DA  0012               	return		;funcret
  2035  0015DC                     __end_of_initIR:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           prodh	equ	0xFF4
  2039                           prodl	equ	0xFF3
  2040                           intcon	equ	0xFF2
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           indf1	equ	0xFE7
  2044                           fsr1h	equ	0xFE2
  2045                           fsr1l	equ	0xFE1
  2046                           indf2	equ	0xFDF
  2047                           fsr2h	equ	0xFDA
  2048                           fsr2l	equ	0xFD9
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _fullSpeedBack *****************
  2052 ;; Defined at:
  2053 ;;		line 125 in file "dc_motor.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2056 ;;		 -> main@mL(9), 
  2057 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2058 ;;		 -> main@mR(9), 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;		None               void
  2063 ;; Registers used:
  2064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2070 ;;      Params:         0       4       0       0
  2071 ;;      Locals:         0       0       0       0
  2072 ;;      Temps:          0       0       0       0
  2073 ;;      Totals:         0       4       0       0
  2074 ;;Total ram usage:        4 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    5
  2077 ;; This function calls:
  2078 ;;		_fullSpeedAhead
  2079 ;; This function is called by:
  2080 ;;		_main
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text8
  2085  001438                     __ptext8:
  2086                           	opt stack 0
  2087  001438                     _fullSpeedBack:
  2088                           	opt stack 25
  2089                           
  2090                           ;dc_motor.c: 128: mL->direction=0;
  2091                           
  2092                           ;incstack = 0
  2093  001438  0100               	movlb	0	; () banked
  2094  00143A  EE20 F001          	lfsr	2,1
  2095  00143E  5160               	movf	fullSpeedBack@mL& (0+255),w,b
  2096  001440  26D9               	addwf	fsr2l,f,c
  2097  001442  5161               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2098  001444  22DA               	addwfc	fsr2h,f,c
  2099  001446  0E00               	movlw	0
  2100  001448  6EDF               	movwf	indf2,c
  2101                           
  2102                           ;dc_motor.c: 129: mR->direction=0;
  2103  00144A  0100               	movlb	0	; () banked
  2104  00144C  EE20 F001          	lfsr	2,1
  2105  001450  5162               	movf	fullSpeedBack@mR& (0+255),w,b
  2106  001452  26D9               	addwf	fsr2l,f,c
  2107  001454  5163               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2108  001456  22DA               	addwfc	fsr2h,f,c
  2109  001458  0E00               	movlw	0
  2110  00145A  6EDF               	movwf	indf2,c
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2114  00145C  C060  F037         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2115  001460  C061  F038         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2116  001464  C062  F039         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2117  001468  C063  F03A         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2118  00146C  EC96  F009         	call	_fullSpeedAhead	;wreg free
  2119  001470  0012               	return		;funcret
  2120  001472                     __end_of_fullSpeedBack:
  2121                           	opt stack 0
  2122                           tblptru	equ	0xFF8
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           indf1	equ	0xFE7
  2129                           fsr1h	equ	0xFE2
  2130                           fsr1l	equ	0xFE1
  2131                           indf2	equ	0xFDF
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136 ;; *************** function _enableSensor *****************
  2137 ;; Defined at:
  2138 ;;		line 106 in file "IR_Reading.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  sensor          1    wreg     unsigned char 
  2141 ;;  status          1   31[COMRAM] unsigned char 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  sensor          1   32[COMRAM] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;		None               void
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, status,0
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2153 ;;      Params:         1       0       0       0
  2154 ;;      Locals:         1       0       0       0
  2155 ;;      Temps:          0       0       0       0
  2156 ;;      Totals:         2       0       0       0
  2157 ;;Total ram usage:        2 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    2
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	text9
  2168  00156E                     __ptext9:
  2169                           	opt stack 0
  2170  00156E                     _enableSensor:
  2171                           	opt stack 28
  2172                           
  2173                           ;incstack = 0
  2174                           ;enableSensor@sensor stored from wreg
  2175  00156E  6E21               	movwf	enableSensor@sensor,c
  2176                           
  2177                           ;IR_Reading.c: 108: if (sensor==0){
  2178  001570  5021               	movf	enableSensor@sensor,w,c
  2179  001572  A4D8               	btfss	status,2,c
  2180  001574  D006               	goto	l2033
  2181                           
  2182                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2183  001576  B020               	btfsc	enableSensor@status,0,c
  2184  001578  D002               	bra	u1325
  2185  00157A  908D               	bcf	3981,0,c	;volatile
  2186  00157C  D001               	bra	u1326
  2187  00157E                     u1325:
  2188  00157E  808D               	bsf	3981,0,c	;volatile
  2189  001580                     u1326:
  2190                           
  2191                           ;IR_Reading.c: 110: } else if (sensor==1){
  2192  001580  0012               	return	
  2193  001582                     l2033:
  2194  001582  0421               	decf	enableSensor@sensor,w,c
  2195  001584  A4D8               	btfss	status,2,c
  2196  001586  0012               	return	
  2197                           
  2198                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2199  001588  B020               	btfsc	enableSensor@status,0,c
  2200  00158A  D002               	bra	u1345
  2201  00158C  928D               	bcf	3981,1,c	;volatile
  2202  00158E  D001               	bra	u1346
  2203  001590                     u1345:
  2204  001590  828D               	bsf	3981,1,c	;volatile
  2205  001592                     u1346:
  2206  001592  0012               	return	
  2207  001594                     __end_of_enableSensor:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           indf1	equ	0xFE7
  2216                           fsr1h	equ	0xFE2
  2217                           fsr1l	equ	0xFE1
  2218                           indf2	equ	0xFDF
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8
  2222                           
  2223 ;; *************** function _delay_s *****************
  2224 ;; Defined at:
  2225 ;;		line 10 in file "Movement.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  seconds         1    wreg     unsigned char 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  seconds         1   32[COMRAM] unsigned char 
  2230 ;;  i               2   33[COMRAM] unsigned int 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2240 ;;      Params:         0       0       0       0
  2241 ;;      Locals:         3       0       0       0
  2242 ;;      Temps:          1       0       0       0
  2243 ;;      Totals:         4       0       0       0
  2244 ;;Total ram usage:        4 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text10
  2255  001472                     __ptext10:
  2256                           	opt stack 0
  2257  001472                     _delay_s:
  2258                           	opt stack 28
  2259                           
  2260                           ;incstack = 0
  2261                           ;delay_s@seconds stored from wreg
  2262  001472  6E21               	movwf	delay_s@seconds,c
  2263                           
  2264                           ;Movement.c: 11: unsigned int i=0;
  2265  001474  0E00               	movlw	0
  2266  001476  6E23               	movwf	delay_s@i+1,c
  2267  001478  0E00               	movlw	0
  2268  00147A  6E22               	movwf	delay_s@i,c
  2269                           
  2270                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2271  00147C  0E00               	movlw	0
  2272  00147E  6E23               	movwf	delay_s@i+1,c
  2273  001480  0E01               	movlw	1
  2274  001482  6E22               	movwf	delay_s@i,c
  2275  001484  D009               	goto	l2023
  2276  001486                     l2019:
  2277                           
  2278                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2279  001486  0E82               	movlw	130
  2280  001488  6E20               	movwf	??_delay_s& (0+255),c
  2281  00148A  0EDE               	movlw	222
  2282  00148C                     u2487:
  2283  00148C  2EE8               	decfsz	wreg,f,c
  2284  00148E  D7FE               	goto	u2487
  2285  001490  2E20               	decfsz	??_delay_s& (0+255),f,c
  2286  001492  D7FC               	goto	u2487
  2287  001494  4A22               	infsnz	delay_s@i,f,c
  2288  001496  2A23               	incf	delay_s@i+1,f,c
  2289  001498                     l2023:
  2290  001498  5021               	movf	delay_s@seconds,w,c
  2291  00149A  0D14               	mullw	20
  2292  00149C  5022               	movf	delay_s@i,w,c
  2293  00149E  5CF3               	subwf	prodl,w,c
  2294  0014A0  5023               	movf	delay_s@i+1,w,c
  2295  0014A2  58F4               	subwfb	prodh,w,c
  2296  0014A4  A0D8               	btfss	status,0,c
  2297  0014A6  0012               	return	
  2298  0014A8  D7EE               	goto	l2019
  2299  0014AA                     __end_of_delay_s:
  2300                           	opt stack 0
  2301                           tblptru	equ	0xFF8
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           indf1	equ	0xFE7
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           indf2	equ	0xFDF
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _VerifySignal *****************
  2316 ;; Defined at:
  2317 ;;		line 55 in file "RFID_Reader.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  Signal          2   31[COMRAM] PTR unsigned char 
  2320 ;;		 -> ReceivedString(16), 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  hexByte         2   40[COMRAM] unsigned int 
  2323 ;;  i               1   42[COMRAM] unsigned char 
  2324 ;;  checksum        1   39[COMRAM] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      unsigned char 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2334 ;;      Params:         2       0       0       0
  2335 ;;      Locals:         4       0       0       0
  2336 ;;      Temps:          6       0       0       0
  2337 ;;      Totals:        12       0       0       0
  2338 ;;Total ram usage:       12 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    2
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text11
  2349  00100A                     __ptext11:
  2350                           	opt stack 0
  2351  00100A                     _VerifySignal:
  2352                           	opt stack 28
  2353                           
  2354                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2355                           
  2356                           ;incstack = 0
  2357  00100A  0E00               	movlw	0
  2358  00100C  6E28               	movwf	VerifySignal@checksum,c
  2359                           
  2360                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2361  00100E  0E00               	movlw	0
  2362  001010  6E2A               	movwf	VerifySignal@hexByte+1,c
  2363  001012  0E00               	movlw	0
  2364  001014  6E29               	movwf	VerifySignal@hexByte,c
  2365                           
  2366                           ;RFID_Reader.c: 58: unsigned char i=0;
  2367  001016  0E00               	movlw	0
  2368  001018  6E2B               	movwf	VerifySignal@i,c
  2369                           
  2370                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2371  00101A  EE20 F004          	lfsr	2,4
  2372  00101E  5020               	movf	VerifySignal@Signal,w,c
  2373  001020  26D9               	addwf	fsr2l,f,c
  2374  001022  5021               	movf	VerifySignal@Signal+1,w,c
  2375  001024  22DA               	addwfc	fsr2h,f,c
  2376  001026  50DF               	movf	indf2,w,c
  2377  001028  6E22               	movwf	??_VerifySignal& (0+255),c
  2378  00102A  EE20 F003          	lfsr	2,3
  2379  00102E  5020               	movf	VerifySignal@Signal,w,c
  2380  001030  26D9               	addwf	fsr2l,f,c
  2381  001032  5021               	movf	VerifySignal@Signal+1,w,c
  2382  001034  22DA               	addwfc	fsr2h,f,c
  2383  001036  50DF               	movf	indf2,w,c
  2384  001038  6E23               	movwf	(??_VerifySignal+1)& (0+255),c
  2385  00103A  5023               	movf	??_VerifySignal+1,w,c
  2386  00103C  6E25               	movwf	(??_VerifySignal+3)& (0+255),c
  2387  00103E  6A24               	clrf	(??_VerifySignal+2)& (0+255),c
  2388  001040  5022               	movf	??_VerifySignal,w,c
  2389  001042  2424               	addwf	??_VerifySignal+2,w,c
  2390  001044  6E29               	movwf	VerifySignal@hexByte,c
  2391  001046  0E00               	movlw	0
  2392  001048  2025               	addwfc	??_VerifySignal+3,w,c
  2393  00104A  6E2A               	movwf	VerifySignal@hexByte+1,c
  2394                           
  2395                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2396  00104C  EE20 F002          	lfsr	2,2
  2397  001050  5020               	movf	VerifySignal@Signal,w,c
  2398  001052  26D9               	addwf	fsr2l,f,c
  2399  001054  5021               	movf	VerifySignal@Signal+1,w,c
  2400  001056  22DA               	addwfc	fsr2h,f,c
  2401  001058  50DF               	movf	indf2,w,c
  2402  00105A  1829               	xorwf	VerifySignal@hexByte,w,c
  2403  00105C  6E28               	movwf	VerifySignal@checksum,c
  2404                           
  2405                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2406  00105E  0E05               	movlw	5
  2407  001060  6E2B               	movwf	VerifySignal@i,c
  2408  001062                     l2341:
  2409  001062  0E09               	movlw	9
  2410  001064  642B               	cpfsgt	VerifySignal@i,c
  2411  001066  D001               	goto	l2345
  2412  001068  D028               	goto	l2353
  2413  00106A                     l2345:
  2414                           
  2415                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2416  00106A  502B               	movf	VerifySignal@i,w,c
  2417  00106C  6E22               	movwf	??_VerifySignal& (0+255),c
  2418  00106E  6A23               	clrf	(??_VerifySignal+1)& (0+255),c
  2419  001070  0E01               	movlw	1
  2420  001072  2622               	addwf	??_VerifySignal,f,c
  2421  001074  0E00               	movlw	0
  2422  001076  2223               	addwfc	??_VerifySignal+1,f,c
  2423  001078  5022               	movf	??_VerifySignal,w,c
  2424  00107A  2420               	addwf	VerifySignal@Signal,w,c
  2425  00107C  6ED9               	movwf	fsr2l,c
  2426  00107E  5023               	movf	??_VerifySignal+1,w,c
  2427  001080  2021               	addwfc	VerifySignal@Signal+1,w,c
  2428  001082  6EDA               	movwf	fsr2h,c
  2429  001084  50DF               	movf	indf2,w,c
  2430  001086  6E24               	movwf	(??_VerifySignal+2)& (0+255),c
  2431  001088  502B               	movf	VerifySignal@i,w,c
  2432  00108A  0D01               	mullw	1
  2433  00108C  50F3               	movf	prodl,w,c
  2434  00108E  2420               	addwf	VerifySignal@Signal,w,c
  2435  001090  6ED9               	movwf	fsr2l,c
  2436  001092  50F4               	movf	prodh,w,c
  2437  001094  2021               	addwfc	VerifySignal@Signal+1,w,c
  2438  001096  6EDA               	movwf	fsr2h,c
  2439  001098  50DF               	movf	indf2,w,c
  2440  00109A  6E25               	movwf	(??_VerifySignal+3)& (0+255),c
  2441  00109C  5025               	movf	??_VerifySignal+3,w,c
  2442  00109E  6E27               	movwf	(??_VerifySignal+5)& (0+255),c
  2443  0010A0  6A26               	clrf	(??_VerifySignal+4)& (0+255),c
  2444  0010A2  5024               	movf	??_VerifySignal+2,w,c
  2445  0010A4  2426               	addwf	??_VerifySignal+4,w,c
  2446  0010A6  6E29               	movwf	VerifySignal@hexByte,c
  2447  0010A8  0E00               	movlw	0
  2448  0010AA  2027               	addwfc	??_VerifySignal+5,w,c
  2449  0010AC  6E2A               	movwf	VerifySignal@hexByte+1,c
  2450                           
  2451                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2452  0010AE  5028               	movf	VerifySignal@checksum,w,c
  2453  0010B0  1829               	xorwf	VerifySignal@hexByte,w,c
  2454  0010B2  6E28               	movwf	VerifySignal@checksum,c
  2455  0010B4  0E02               	movlw	2
  2456  0010B6  262B               	addwf	VerifySignal@i,f,c
  2457  0010B8  D7D4               	goto	l2341
  2458  0010BA                     l2353:
  2459                           
  2460                           ;RFID_Reader.c: 68: }
  2461                           ;RFID_Reader.c: 71: return 1;
  2462  0010BA  0E01               	movlw	1
  2463  0010BC  0012               	return	
  2464  0010BE                     __end_of_VerifySignal:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           intcon	equ	0xFF2
  2470                           postinc0	equ	0xFEE
  2471                           wreg	equ	0xFE8
  2472                           indf1	equ	0xFE7
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           indf2	equ	0xFDF
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _ScanWithRange *****************
  2481 ;; Defined at:
  2482 ;;		line 101 in file "Movement.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  mL              2    4[BANK0 ] PTR struct DC_motor
  2485 ;;		 -> main@mL(9), 
  2486 ;;  mR              2    6[BANK0 ] PTR struct DC_motor
  2487 ;;		 -> main@mR(9), 
  2488 ;;  tenth_second    1    8[BANK0 ] unsigned char 
  2489 ;;  MoveTime        2    9[BANK0 ] PTR unsigned char 
  2490 ;;		 -> main@MoveTime(100), 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  SensorResult    4   28[BANK0 ] unsigned int [2]
  2493 ;;  SensorResult    4   24[BANK0 ] unsigned int [2]
  2494 ;;  SensorResult    4   20[BANK0 ] unsigned int [2]
  2495 ;;  DirectionFou    2   18[BANK0 ] const unsigned int 
  2496 ;;  DirectionFou    2   16[BANK0 ] const unsigned int 
  2497 ;;  ClearSignalT    2   14[BANK0 ] const unsigned int 
  2498 ;;  ResultFalseR    1   13[BANK0 ] unsigned char 
  2499 ;;  ResultFalseC    1   12[BANK0 ] unsigned char 
  2500 ;;  ResultFalseL    1   11[BANK0 ] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      unsigned char 
  2503 ;; Registers used:
  2504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2510 ;;      Params:         0       7       0       0
  2511 ;;      Locals:         0      21       0       0
  2512 ;;      Temps:          2       0       0       0
  2513 ;;      Totals:         2      28       0       0
  2514 ;;Total ram usage:       30 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    6
  2517 ;; This function calls:
  2518 ;;		___awdiv
  2519 ;;		_delay_tenth_s
  2520 ;;		_grabLeftIR
  2521 ;;		_grabRightIR
  2522 ;;		_stop
  2523 ;;		_turnLeft
  2524 ;;		_turnRight
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text12
  2531  0000DA                     __ptext12:
  2532                           	opt stack 0
  2533  0000DA                     _ScanWithRange:
  2534                           	opt stack 24
  2535                           
  2536                           ;Movement.c: 104: unsigned int SensorResultL[2]={0,0};
  2537                           
  2538                           ;incstack = 0
  2539  0000DA  C086  F074         	movff	ScanWithRange@F3719,ScanWithRange@SensorResultL
  2540  0000DE  C087  F075         	movff	ScanWithRange@F3719+1,ScanWithRange@SensorResultL+1
  2541  0000E2  C088  F076         	movff	ScanWithRange@F3719+2,ScanWithRange@SensorResultL+2
  2542  0000E6  C089  F077         	movff	ScanWithRange@F3719+3,ScanWithRange@SensorResultL+3
  2543                           
  2544                           ;Movement.c: 105: unsigned int SensorResultC[2]={0,0};
  2545  0000EA  C08A  F078         	movff	ScanWithRange@F3721,ScanWithRange@SensorResultC
  2546  0000EE  C08B  F079         	movff	ScanWithRange@F3721+1,ScanWithRange@SensorResultC+1
  2547  0000F2  C08C  F07A         	movff	ScanWithRange@F3721+2,ScanWithRange@SensorResultC+2
  2548  0000F6  C08D  F07B         	movff	ScanWithRange@F3721+3,ScanWithRange@SensorResultC+3
  2549                           
  2550                           ;Movement.c: 106: unsigned int SensorResultR[2]={0,0};
  2551  0000FA  C08E  F07C         	movff	ScanWithRange@F3723,ScanWithRange@SensorResultR
  2552  0000FE  C08F  F07D         	movff	ScanWithRange@F3723+1,ScanWithRange@SensorResultR+1
  2553  000102  C090  F07E         	movff	ScanWithRange@F3723+2,ScanWithRange@SensorResultR+2
  2554  000106  C091  F07F         	movff	ScanWithRange@F3723+3,ScanWithRange@SensorResultR+3
  2555                           
  2556                           ;Movement.c: 107: unsigned char ResultFalseL=0;
  2557  00010A  0E00               	movlw	0
  2558  00010C  0100               	movlb	0	; () banked
  2559  00010E  6F6B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2560                           
  2561                           ;Movement.c: 108: unsigned char ResultFalseC=0;
  2562  000110  0E00               	movlw	0
  2563  000112  0100               	movlb	0	; () banked
  2564  000114  6F6C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2565                           
  2566                           ;Movement.c: 109: unsigned char ResultFalseR=0;
  2567  000116  0E00               	movlw	0
  2568  000118  0100               	movlb	0	; () banked
  2569  00011A  6F6D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2570                           
  2571                           ;Movement.c: 112: const unsigned int ClearSignalTolerance=400;
  2572  00011C  0E01               	movlw	1
  2573  00011E  0100               	movlb	0	; () banked
  2574  000120  6F6F               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  2575  000122  0E90               	movlw	144
  2576  000124  6F6E               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  2577                           
  2578                           ;Movement.c: 113: const unsigned int DirectionFoundLimit=3000;
  2579  000126  0E0B               	movlw	11
  2580  000128  0100               	movlb	0	; () banked
  2581  00012A  6F71               	movwf	(ScanWithRange@DirectionFoundLimit+1)& (0+255),b
  2582  00012C  0EB8               	movlw	184
  2583  00012E  6F70               	movwf	ScanWithRange@DirectionFoundLimit& (0+255),b
  2584                           
  2585                           ;Movement.c: 114: const unsigned int DirectionFoundTolerance=500;
  2586  000130  0E01               	movlw	1
  2587  000132  0100               	movlb	0	; () banked
  2588  000134  6F73               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  2589  000136  0EF4               	movlw	244
  2590  000138  6F72               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;Movement.c: 121: stop(mL,mR);
  2594  00013A  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2595  00013E  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2596  000142  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2597  000146  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2598  00014A  EC5F  F008         	call	_stop	;wreg free
  2599                           
  2600                           ;Movement.c: 122: SensorResultC[0]=grabLeftIR();
  2601  00014E  EC5D  F009         	call	_grabLeftIR	;wreg free
  2602  000152  C020  F078         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2603  000156  C021  F079         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2604                           
  2605                           ;Movement.c: 123: SensorResultC[1]=grabRightIR();
  2606  00015A  EC24  F009         	call	_grabRightIR	;wreg free
  2607  00015E  C020  F07A         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2608  000162  C021  F07B         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2609                           
  2610                           ;Movement.c: 127: CAP1BUFH=0;
  2611  000166  0E00               	movlw	0
  2612  000168  6E69               	movwf	3945,c	;volatile
  2613                           
  2614                           ;Movement.c: 128: CAP1BUFL=0;
  2615  00016A  0E00               	movlw	0
  2616  00016C  6E68               	movwf	3944,c	;volatile
  2617                           
  2618                           ;Movement.c: 129: CAP2BUFH=0;
  2619  00016E  0E00               	movlw	0
  2620  000170  6E67               	movwf	3943,c	;volatile
  2621                           
  2622                           ;Movement.c: 130: CAP2BUFL=0;
  2623  000172  0E00               	movlw	0
  2624  000174  6E66               	movwf	3942,c	;volatile
  2625                           
  2626                           ;Movement.c: 133: turnLeft(mL,mR);
  2627  000176  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  2628  00017A  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2629  00017E  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  2630  000182  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2631  000186  ECF5  F009         	call	_turnLeft	;wreg free
  2632                           
  2633                           ;Movement.c: 134: delay_tenth_s(tenth_seconds);
  2634  00018A  0100               	movlb	0	; () banked
  2635  00018C  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2636  00018E  EC55  F00A         	call	_delay_tenth_s
  2637                           
  2638                           ;Movement.c: 135: (*MoveTime) += tenth_seconds;
  2639  000192  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2640  000196  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2641  00019A  0100               	movlb	0	; () banked
  2642  00019C  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2643  00019E  26DF               	addwf	indf2,f,c
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;Movement.c: 137: stop(mL,mR);
  2647  0001A0  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2648  0001A4  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2649  0001A8  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2650  0001AC  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2651  0001B0  EC5F  F008         	call	_stop	;wreg free
  2652                           
  2653                           ;Movement.c: 138: SensorResultL[0]=grabLeftIR();
  2654  0001B4  EC5D  F009         	call	_grabLeftIR	;wreg free
  2655  0001B8  C020  F074         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2656  0001BC  C021  F075         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2657                           
  2658                           ;Movement.c: 139: SensorResultL[1]=grabRightIR();
  2659  0001C0  EC24  F009         	call	_grabRightIR	;wreg free
  2660  0001C4  C020  F076         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2661  0001C8  C021  F077         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2662                           
  2663                           ;Movement.c: 143: CAP1BUFH=0;
  2664  0001CC  0E00               	movlw	0
  2665  0001CE  6E69               	movwf	3945,c	;volatile
  2666                           
  2667                           ;Movement.c: 144: CAP1BUFL=0;
  2668  0001D0  0E00               	movlw	0
  2669  0001D2  6E68               	movwf	3944,c	;volatile
  2670                           
  2671                           ;Movement.c: 145: CAP2BUFH=0;
  2672  0001D4  0E00               	movlw	0
  2673  0001D6  6E67               	movwf	3943,c	;volatile
  2674                           
  2675                           ;Movement.c: 146: CAP2BUFL=0;
  2676  0001D8  0E00               	movlw	0
  2677  0001DA  6E66               	movwf	3942,c	;volatile
  2678                           
  2679                           ;Movement.c: 149: turnRight(mL,mR);
  2680  0001DC  C064  F060         	movff	ScanWithRange@mL,turnRight@mL
  2681  0001E0  C065  F061         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2682  0001E4  C066  F062         	movff	ScanWithRange@mR,turnRight@mR
  2683  0001E8  C067  F063         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2684  0001EC  ECCE  F009         	call	_turnRight	;wreg free
  2685                           
  2686                           ;Movement.c: 150: delay_tenth_s(2*tenth_seconds);
  2687  0001F0  0100               	movlb	0	; () banked
  2688  0001F2  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2689  0001F4  0D02               	mullw	2
  2690  0001F6  50F3               	movf	prodl,w,c
  2691  0001F8  EC55  F00A         	call	_delay_tenth_s
  2692                           
  2693                           ;Movement.c: 151: (*MoveTime) -= 2*tenth_seconds;
  2694  0001FC  0100               	movlb	0	; () banked
  2695  0001FE  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2696  000200  0D02               	mullw	2
  2697  000202  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2698  000206  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2699  00020A  50F3               	movf	prodl,w,c
  2700  00020C  5EDF               	subwf	indf2,f,c
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;Movement.c: 153: stop(mL,mR);
  2704  00020E  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2705  000212  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2706  000216  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2707  00021A  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2708  00021E  EC5F  F008         	call	_stop	;wreg free
  2709                           
  2710                           ;Movement.c: 154: SensorResultR[0]=grabLeftIR();
  2711  000222  EC5D  F009         	call	_grabLeftIR	;wreg free
  2712  000226  C020  F07C         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2713  00022A  C021  F07D         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2714                           
  2715                           ;Movement.c: 155: SensorResultR[1]=grabRightIR();
  2716  00022E  EC24  F009         	call	_grabRightIR	;wreg free
  2717  000232  C020  F07E         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2718  000236  C021  F07F         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2719                           
  2720                           ;Movement.c: 159: CAP1BUFH=0;
  2721  00023A  0E00               	movlw	0
  2722  00023C  6E69               	movwf	3945,c	;volatile
  2723                           
  2724                           ;Movement.c: 160: CAP1BUFL=0;
  2725  00023E  0E00               	movlw	0
  2726  000240  6E68               	movwf	3944,c	;volatile
  2727                           
  2728                           ;Movement.c: 161: CAP2BUFH=0;
  2729  000242  0E00               	movlw	0
  2730  000244  6E67               	movwf	3943,c	;volatile
  2731                           
  2732                           ;Movement.c: 162: CAP2BUFL=0;
  2733  000246  0E00               	movlw	0
  2734  000248  6E66               	movwf	3942,c	;volatile
  2735                           
  2736                           ;Movement.c: 173: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  2737  00024A  0100               	movlb	0	; () banked
  2738  00024C  5174               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2739  00024E  0100               	movlb	0	; () banked
  2740  000250  2576               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2741  000252  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2742  000254  0100               	movlb	0	; () banked
  2743  000256  5175               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2744  000258  0100               	movlb	0	; () banked
  2745  00025A  2177               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2746  00025C  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2747  00025E  0100               	movlb	0	; () banked
  2748  000260  516E               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2749  000262  5C3C               	subwf	??_ScanWithRange,w,c
  2750  000264  0100               	movlb	0	; () banked
  2751  000266  516F               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2752  000268  583D               	subwfb	??_ScanWithRange+1,w,c
  2753  00026A  B0D8               	btfsc	status,0,c
  2754  00026C  D00D               	goto	l2619
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Movement.c: 174: SensorResultL[0]=0;
  2758  00026E  0E00               	movlw	0
  2759  000270  0100               	movlb	0	; () banked
  2760  000272  6F75               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2761  000274  0E00               	movlw	0
  2762  000276  6F74               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2763                           
  2764                           ;Movement.c: 175: SensorResultL[1]=0;
  2765  000278  0E00               	movlw	0
  2766  00027A  0100               	movlb	0	; () banked
  2767  00027C  6F77               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2768  00027E  0E00               	movlw	0
  2769  000280  6F76               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2770                           
  2771                           ;Movement.c: 176: ResultFalseL=1;
  2772  000282  0E01               	movlw	1
  2773  000284  0100               	movlb	0	; () banked
  2774  000286  6F6B               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2775  000288                     l2619:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;Movement.c: 177: }
  2779                           ;Movement.c: 178: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  2780  000288  0100               	movlb	0	; () banked
  2781  00028A  5178               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2782  00028C  0100               	movlb	0	; () banked
  2783  00028E  257A               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2784  000290  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2785  000292  0100               	movlb	0	; () banked
  2786  000294  5179               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2787  000296  0100               	movlb	0	; () banked
  2788  000298  217B               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2789  00029A  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2790  00029C  0100               	movlb	0	; () banked
  2791  00029E  516E               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2792  0002A0  5C3C               	subwf	??_ScanWithRange,w,c
  2793  0002A2  0100               	movlb	0	; () banked
  2794  0002A4  516F               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2795  0002A6  583D               	subwfb	??_ScanWithRange+1,w,c
  2796  0002A8  B0D8               	btfsc	status,0,c
  2797  0002AA  D00D               	goto	l2623
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;Movement.c: 179: SensorResultC[0]=0;
  2801  0002AC  0E00               	movlw	0
  2802  0002AE  0100               	movlb	0	; () banked
  2803  0002B0  6F79               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2804  0002B2  0E00               	movlw	0
  2805  0002B4  6F78               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2806                           
  2807                           ;Movement.c: 180: SensorResultC[1]=0;
  2808  0002B6  0E00               	movlw	0
  2809  0002B8  0100               	movlb	0	; () banked
  2810  0002BA  6F7B               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2811  0002BC  0E00               	movlw	0
  2812  0002BE  6F7A               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2813                           
  2814                           ;Movement.c: 181: ResultFalseC=1;
  2815  0002C0  0E01               	movlw	1
  2816  0002C2  0100               	movlb	0	; () banked
  2817  0002C4  6F6C               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2818  0002C6                     l2623:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;Movement.c: 182: }
  2822                           ;Movement.c: 183: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2823  0002C6  0100               	movlb	0	; () banked
  2824  0002C8  517C               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2825  0002CA  0100               	movlb	0	; () banked
  2826  0002CC  257E               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2827  0002CE  6E3C               	movwf	??_ScanWithRange& (0+255),c
  2828  0002D0  0100               	movlb	0	; () banked
  2829  0002D2  517D               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2830  0002D4  0100               	movlb	0	; () banked
  2831  0002D6  217F               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2832  0002D8  6E3D               	movwf	(??_ScanWithRange+1)& (0+255),c
  2833  0002DA  0100               	movlb	0	; () banked
  2834  0002DC  516E               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  2835  0002DE  5C3C               	subwf	??_ScanWithRange,w,c
  2836  0002E0  0100               	movlb	0	; () banked
  2837  0002E2  516F               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  2838  0002E4  583D               	subwfb	??_ScanWithRange+1,w,c
  2839  0002E6  B0D8               	btfsc	status,0,c
  2840  0002E8  D00D               	goto	l2627
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;Movement.c: 184: SensorResultR[0]=0;
  2844  0002EA  0E00               	movlw	0
  2845  0002EC  0100               	movlb	0	; () banked
  2846  0002EE  6F7D               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2847  0002F0  0E00               	movlw	0
  2848  0002F2  6F7C               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2849                           
  2850                           ;Movement.c: 185: SensorResultR[1]=0;
  2851  0002F4  0E00               	movlw	0
  2852  0002F6  0100               	movlb	0	; () banked
  2853  0002F8  6F7F               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2854  0002FA  0E00               	movlw	0
  2855  0002FC  6F7E               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2856                           
  2857                           ;Movement.c: 186: ResultFalseR=1;
  2858  0002FE  0E01               	movlw	1
  2859  000300  0100               	movlb	0	; () banked
  2860  000302  6F6D               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2861  000304                     l2627:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;Movement.c: 187: }
  2865                           ;Movement.c: 189: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2866  000304  0100               	movlb	0	; () banked
  2867  000306  516C               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2868  000308  C06B  F03C         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2869  00030C  6A3D               	clrf	(??_ScanWithRange+1)& (0+255),c
  2870  00030E  263C               	addwf	??_ScanWithRange,f,c
  2871  000310  0E00               	movlw	0
  2872  000312  223D               	addwfc	??_ScanWithRange+1,f,c
  2873  000314  0100               	movlb	0	; () banked
  2874  000316  516D               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2875  000318  263C               	addwf	??_ScanWithRange,f,c
  2876  00031A  0E00               	movlw	0
  2877  00031C  223D               	addwfc	??_ScanWithRange+1,f,c
  2878  00031E  0E03               	movlw	3
  2879  000320  183C               	xorwf	??_ScanWithRange,w,c
  2880  000322  103D               	iorwf	??_ScanWithRange+1,w,c
  2881  000324  A4D8               	btfss	status,2,c
  2882  000326  D025               	goto	l2643
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;Movement.c: 191: turnLeft(mL,mR);
  2886  000328  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  2887  00032C  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2888  000330  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  2889  000334  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2890  000338  ECF5  F009         	call	_turnLeft	;wreg free
  2891                           
  2892                           ;Movement.c: 192: delay_tenth_s(5*tenth_seconds);
  2893  00033C  0100               	movlb	0	; () banked
  2894  00033E  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2895  000340  0D05               	mullw	5
  2896  000342  50F3               	movf	prodl,w,c
  2897  000344  EC55  F00A         	call	_delay_tenth_s
  2898                           
  2899                           ;Movement.c: 193: (*MoveTime) += 5*tenth_seconds;
  2900  000348  0100               	movlb	0	; () banked
  2901  00034A  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2902  00034C  0D05               	mullw	5
  2903  00034E  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  2904  000352  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  2905  000356  50F3               	movf	prodl,w,c
  2906  000358  26DF               	addwf	indf2,f,c
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;Movement.c: 194: stop(mL,mR);
  2910  00035A  C064  F037         	movff	ScanWithRange@mL,stop@mL
  2911  00035E  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  2912  000362  C066  F039         	movff	ScanWithRange@mR,stop@mR
  2913  000366  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  2914  00036A  EC5F  F008         	call	_stop	;wreg free
  2915                           
  2916                           ;Movement.c: 196: return -1;
  2917  00036E  0EFF               	movlw	255
  2918  000370  0012               	return	
  2919  000372                     l2643:
  2920                           
  2921                           ;Movement.c: 199: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  2922                           ;Movement.c: 200: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2923                           ;Movement.c: 201: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2924  000372  0100               	movlb	0	; () banked
  2925  000374  5174               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2926  000376  0100               	movlb	0	; () banked
  2927  000378  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  2928  00037A  0100               	movlb	0	; () banked
  2929  00037C  5175               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2930  00037E  0100               	movlb	0	; () banked
  2931  000380  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  2932  000382  B0D8               	btfsc	status,0,c
  2933  000384  D05D               	goto	l2665
  2934                           
  2935                           ; BSR set to: 0
  2936  000386  0100               	movlb	0	; () banked
  2937  000388  5176               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2938  00038A  0100               	movlb	0	; () banked
  2939  00038C  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  2940  00038E  0100               	movlb	0	; () banked
  2941  000390  5177               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2942  000392  0100               	movlb	0	; () banked
  2943  000394  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  2944  000396  B0D8               	btfsc	status,0,c
  2945  000398  D053               	goto	l2665
  2946                           
  2947                           ; BSR set to: 0
  2948  00039A  EE20  F076         	lfsr	2,ScanWithRange@SensorResultL+2
  2949  00039E  CFDE F03C          	movff	postinc2,??_ScanWithRange
  2950  0003A2  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  2951  0003A6  1E3C               	comf	??_ScanWithRange,f,c
  2952  0003A8  1E3D               	comf	??_ScanWithRange+1,f,c
  2953  0003AA  4A3C               	infsnz	??_ScanWithRange,f,c
  2954  0003AC  2A3D               	incf	??_ScanWithRange+1,f,c
  2955  0003AE  0100               	movlb	0	; () banked
  2956  0003B0  5174               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2957  0003B2  263C               	addwf	??_ScanWithRange,f,c
  2958  0003B4  0100               	movlb	0	; () banked
  2959  0003B6  5175               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2960  0003B8  223D               	addwfc	??_ScanWithRange+1,f,c
  2961  0003BA  0100               	movlb	0	; () banked
  2962  0003BC  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  2963  0003BE  5C3C               	subwf	??_ScanWithRange,w,c
  2964  0003C0  0100               	movlb	0	; () banked
  2965  0003C2  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  2966  0003C4  583D               	subwfb	??_ScanWithRange+1,w,c
  2967  0003C6  A0D8               	btfss	status,0,c
  2968  0003C8  D016               	goto	l2651
  2969                           
  2970                           ; BSR set to: 0
  2971  0003CA  C074  F03C         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2972  0003CE  C075  F03D         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2973  0003D2  1E3C               	comf	??_ScanWithRange,f,c
  2974  0003D4  1E3D               	comf	??_ScanWithRange+1,f,c
  2975  0003D6  4A3C               	infsnz	??_ScanWithRange,f,c
  2976  0003D8  2A3D               	incf	??_ScanWithRange+1,f,c
  2977  0003DA  0100               	movlb	0	; () banked
  2978  0003DC  5176               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2979  0003DE  263C               	addwf	??_ScanWithRange,f,c
  2980  0003E0  0100               	movlb	0	; () banked
  2981  0003E2  5177               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2982  0003E4  223D               	addwfc	??_ScanWithRange+1,f,c
  2983  0003E6  0100               	movlb	0	; () banked
  2984  0003E8  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  2985  0003EA  5C3C               	subwf	??_ScanWithRange,w,c
  2986  0003EC  0100               	movlb	0	; () banked
  2987  0003EE  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  2988  0003F0  583D               	subwfb	??_ScanWithRange+1,w,c
  2989  0003F2  B0D8               	btfsc	status,0,c
  2990  0003F4  D025               	goto	l2665
  2991  0003F6                     l2651:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;Movement.c: 203: turnLeft(mL,mR);
  2995  0003F6  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  2996  0003FA  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2997  0003FE  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  2998  000402  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2999  000406  ECF5  F009         	call	_turnLeft	;wreg free
  3000                           
  3001                           ;Movement.c: 204: delay_tenth_s(2*(tenth_seconds));
  3002  00040A  0100               	movlb	0	; () banked
  3003  00040C  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3004  00040E  0D02               	mullw	2
  3005  000410  50F3               	movf	prodl,w,c
  3006  000412  EC55  F00A         	call	_delay_tenth_s
  3007                           
  3008                           ;Movement.c: 205: (*MoveTime) += 2*tenth_seconds;
  3009  000416  0100               	movlb	0	; () banked
  3010  000418  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3011  00041A  0D02               	mullw	2
  3012  00041C  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3013  000420  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3014  000424  50F3               	movf	prodl,w,c
  3015  000426  26DF               	addwf	indf2,f,c
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;Movement.c: 206: stop(mL,mR);
  3019  000428  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3020  00042C  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3021  000430  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3022  000434  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3023  000438  EC5F  F008         	call	_stop	;wreg free
  3024  00043C                     l2659:
  3025                           
  3026                           ;Movement.c: 207: return 2;
  3027  00043C  0E02               	movlw	2
  3028  00043E  0012               	return	
  3029  000440                     l2665:
  3030                           
  3031                           ;Movement.c: 209: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3032                           ;Movement.c: 210: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3033  000440  0100               	movlb	0	; () banked
  3034  000442  5178               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3035  000444  0100               	movlb	0	; () banked
  3036  000446  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3037  000448  0100               	movlb	0	; () banked
  3038  00044A  5179               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3039  00044C  0100               	movlb	0	; () banked
  3040  00044E  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3041  000450  B0D8               	btfsc	status,0,c
  3042  000452  D058               	goto	l2687
  3043                           
  3044                           ; BSR set to: 0
  3045  000454  0100               	movlb	0	; () banked
  3046  000456  517A               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3047  000458  0100               	movlb	0	; () banked
  3048  00045A  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3049  00045C  0100               	movlb	0	; () banked
  3050  00045E  517B               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3051  000460  0100               	movlb	0	; () banked
  3052  000462  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3053  000464  B0D8               	btfsc	status,0,c
  3054  000466  D04E               	goto	l2687
  3055                           
  3056                           ; BSR set to: 0
  3057  000468  EE20  F07A         	lfsr	2,ScanWithRange@SensorResultC+2
  3058  00046C  CFDE F03C          	movff	postinc2,??_ScanWithRange
  3059  000470  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  3060  000474  1E3C               	comf	??_ScanWithRange,f,c
  3061  000476  1E3D               	comf	??_ScanWithRange+1,f,c
  3062  000478  4A3C               	infsnz	??_ScanWithRange,f,c
  3063  00047A  2A3D               	incf	??_ScanWithRange+1,f,c
  3064  00047C  0100               	movlb	0	; () banked
  3065  00047E  5178               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3066  000480  263C               	addwf	??_ScanWithRange,f,c
  3067  000482  0100               	movlb	0	; () banked
  3068  000484  5179               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3069  000486  223D               	addwfc	??_ScanWithRange+1,f,c
  3070  000488  0100               	movlb	0	; () banked
  3071  00048A  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3072  00048C  5C3C               	subwf	??_ScanWithRange,w,c
  3073  00048E  0100               	movlb	0	; () banked
  3074  000490  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3075  000492  583D               	subwfb	??_ScanWithRange+1,w,c
  3076  000494  A0D8               	btfss	status,0,c
  3077  000496  D016               	goto	l2673
  3078                           
  3079                           ; BSR set to: 0
  3080  000498  C078  F03C         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3081  00049C  C079  F03D         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3082  0004A0  1E3C               	comf	??_ScanWithRange,f,c
  3083  0004A2  1E3D               	comf	??_ScanWithRange+1,f,c
  3084  0004A4  4A3C               	infsnz	??_ScanWithRange,f,c
  3085  0004A6  2A3D               	incf	??_ScanWithRange+1,f,c
  3086  0004A8  0100               	movlb	0	; () banked
  3087  0004AA  517A               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3088  0004AC  263C               	addwf	??_ScanWithRange,f,c
  3089  0004AE  0100               	movlb	0	; () banked
  3090  0004B0  517B               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3091  0004B2  223D               	addwfc	??_ScanWithRange+1,f,c
  3092  0004B4  0100               	movlb	0	; () banked
  3093  0004B6  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3094  0004B8  5C3C               	subwf	??_ScanWithRange,w,c
  3095  0004BA  0100               	movlb	0	; () banked
  3096  0004BC  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3097  0004BE  583D               	subwfb	??_ScanWithRange+1,w,c
  3098  0004C0  B0D8               	btfsc	status,0,c
  3099  0004C2  D020               	goto	l2687
  3100  0004C4                     l2673:
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;Movement.c: 212: turnLeft(mL,mR);
  3104  0004C4  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3105  0004C8  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3106  0004CC  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3107  0004D0  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3108  0004D4  ECF5  F009         	call	_turnLeft	;wreg free
  3109                           
  3110                           ;Movement.c: 213: delay_tenth_s(tenth_seconds);
  3111  0004D8  0100               	movlb	0	; () banked
  3112  0004DA  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3113  0004DC  EC55  F00A         	call	_delay_tenth_s
  3114                           
  3115                           ;Movement.c: 214: (*MoveTime) += tenth_seconds;
  3116  0004E0  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3117  0004E4  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3118  0004E8  0100               	movlb	0	; () banked
  3119  0004EA  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3120  0004EC  26DF               	addwf	indf2,f,c
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;Movement.c: 215: stop(mL,mR);
  3124  0004EE  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3125  0004F2  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3126  0004F6  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3127  0004FA  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3128  0004FE  EC5F  F008         	call	_stop	;wreg free
  3129  000502  D79C               	goto	l2659
  3130  000504                     l2687:
  3131                           
  3132                           ;Movement.c: 218: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3133                           ;Movement.c: 219: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3134  000504  0100               	movlb	0	; () banked
  3135  000506  517C               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3136  000508  0100               	movlb	0	; () banked
  3137  00050A  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3138  00050C  0100               	movlb	0	; () banked
  3139  00050E  517D               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3140  000510  0100               	movlb	0	; () banked
  3141  000512  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3142  000514  B0D8               	btfsc	status,0,c
  3143  000516  D043               	goto	l2703
  3144                           
  3145                           ; BSR set to: 0
  3146  000518  0100               	movlb	0	; () banked
  3147  00051A  517E               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3148  00051C  0100               	movlb	0	; () banked
  3149  00051E  5D70               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  3150  000520  0100               	movlb	0	; () banked
  3151  000522  517F               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3152  000524  0100               	movlb	0	; () banked
  3153  000526  5971               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  3154  000528  B0D8               	btfsc	status,0,c
  3155  00052A  D039               	goto	l2703
  3156                           
  3157                           ; BSR set to: 0
  3158  00052C  EE20  F07E         	lfsr	2,ScanWithRange@SensorResultR+2
  3159  000530  CFDE F03C          	movff	postinc2,??_ScanWithRange
  3160  000534  CFDD F03D          	movff	postdec2,??_ScanWithRange+1
  3161  000538  1E3C               	comf	??_ScanWithRange,f,c
  3162  00053A  1E3D               	comf	??_ScanWithRange+1,f,c
  3163  00053C  4A3C               	infsnz	??_ScanWithRange,f,c
  3164  00053E  2A3D               	incf	??_ScanWithRange+1,f,c
  3165  000540  0100               	movlb	0	; () banked
  3166  000542  517C               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3167  000544  263C               	addwf	??_ScanWithRange,f,c
  3168  000546  0100               	movlb	0	; () banked
  3169  000548  517D               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3170  00054A  223D               	addwfc	??_ScanWithRange+1,f,c
  3171  00054C  0100               	movlb	0	; () banked
  3172  00054E  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3173  000550  5C3C               	subwf	??_ScanWithRange,w,c
  3174  000552  0100               	movlb	0	; () banked
  3175  000554  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3176  000556  583D               	subwfb	??_ScanWithRange+1,w,c
  3177  000558  A0D8               	btfss	status,0,c
  3178  00055A  D016               	goto	l2695
  3179                           
  3180                           ; BSR set to: 0
  3181  00055C  C07C  F03C         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3182  000560  C07D  F03D         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3183  000564  1E3C               	comf	??_ScanWithRange,f,c
  3184  000566  1E3D               	comf	??_ScanWithRange+1,f,c
  3185  000568  4A3C               	infsnz	??_ScanWithRange,f,c
  3186  00056A  2A3D               	incf	??_ScanWithRange+1,f,c
  3187  00056C  0100               	movlb	0	; () banked
  3188  00056E  517E               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3189  000570  263C               	addwf	??_ScanWithRange,f,c
  3190  000572  0100               	movlb	0	; () banked
  3191  000574  517F               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3192  000576  223D               	addwfc	??_ScanWithRange+1,f,c
  3193  000578  0100               	movlb	0	; () banked
  3194  00057A  5172               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  3195  00057C  5C3C               	subwf	??_ScanWithRange,w,c
  3196  00057E  0100               	movlb	0	; () banked
  3197  000580  5173               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  3198  000582  583D               	subwfb	??_ScanWithRange+1,w,c
  3199  000584  B0D8               	btfsc	status,0,c
  3200  000586  D00B               	goto	l2703
  3201  000588                     l2695:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;Movement.c: 221: stop(mL,mR);
  3205  000588  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3206  00058C  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3207  000590  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3208  000594  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3209  000598  EC5F  F008         	call	_stop	;wreg free
  3210  00059C  D74F               	goto	l2659
  3211  00059E                     l2703:
  3212  00059E  0100               	movlb	0	; () banked
  3213  0005A0  5174               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3214  0005A2  0100               	movlb	0	; () banked
  3215  0005A4  5D76               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3216  0005A6  0100               	movlb	0	; () banked
  3217  0005A8  5175               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3218  0005AA  0100               	movlb	0	; () banked
  3219  0005AC  5977               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3220  0005AE  B0D8               	btfsc	status,0,c
  3221  0005B0  D025               	goto	l2719
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;Movement.c: 227: turnLeft(mL,mR);
  3225  0005B2  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3226  0005B6  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3227  0005BA  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3228  0005BE  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3229  0005C2  ECF5  F009         	call	_turnLeft	;wreg free
  3230                           
  3231                           ;Movement.c: 228: delay_tenth_s(3*tenth_seconds);
  3232  0005C6  0100               	movlb	0	; () banked
  3233  0005C8  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3234  0005CA  0D03               	mullw	3
  3235  0005CC  50F3               	movf	prodl,w,c
  3236  0005CE  EC55  F00A         	call	_delay_tenth_s
  3237                           
  3238                           ;Movement.c: 229: (*MoveTime) += 3*tenth_seconds;
  3239  0005D2  0100               	movlb	0	; () banked
  3240  0005D4  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3241  0005D6  0D03               	mullw	3
  3242  0005D8  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3243  0005DC  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3244  0005E0  50F3               	movf	prodl,w,c
  3245  0005E2  26DF               	addwf	indf2,f,c
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Movement.c: 230: stop(mL,mR);
  3249  0005E4  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3250  0005E8  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3251  0005EC  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3252  0005F0  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3253  0005F4  EC5F  F008         	call	_stop	;wreg free
  3254  0005F8                     l2713:
  3255                           
  3256                           ;Movement.c: 231: return 0;
  3257  0005F8  0E00               	movlw	0
  3258  0005FA  0012               	return	
  3259  0005FC                     l2719:
  3260  0005FC  0100               	movlb	0	; () banked
  3261  0005FE  517E               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3262  000600  0100               	movlb	0	; () banked
  3263  000602  5D7C               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3264  000604  0100               	movlb	0	; () banked
  3265  000606  517F               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3266  000608  0100               	movlb	0	; () banked
  3267  00060A  597D               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3268  00060C  B0D8               	btfsc	status,0,c
  3269  00060E  D020               	goto	l2735
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;Movement.c: 234: turnRight(mL,mR);
  3273  000610  C064  F060         	movff	ScanWithRange@mL,turnRight@mL
  3274  000614  C065  F061         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3275  000618  C066  F062         	movff	ScanWithRange@mR,turnRight@mR
  3276  00061C  C067  F063         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3277  000620  ECCE  F009         	call	_turnRight	;wreg free
  3278                           
  3279                           ;Movement.c: 235: delay_tenth_s(tenth_seconds);
  3280  000624  0100               	movlb	0	; () banked
  3281  000626  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3282  000628  EC55  F00A         	call	_delay_tenth_s
  3283                           
  3284                           ;Movement.c: 236: (*MoveTime) -= tenth_seconds;
  3285  00062C  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3286  000630  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3287  000634  0100               	movlb	0	; () banked
  3288  000636  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3289  000638  5EDF               	subwf	indf2,f,c
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;Movement.c: 237: stop(mL,mR);
  3293  00063A  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3294  00063E  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3295  000642  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3296  000646  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3297  00064A  EC5F  F008         	call	_stop	;wreg free
  3298  00064E  D7D4               	goto	l2713
  3299  000650                     l2735:
  3300  000650  0100               	movlb	0	; () banked
  3301  000652  5176               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3302  000654  0100               	movlb	0	; () banked
  3303  000656  5D74               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3304  000658  0100               	movlb	0	; () banked
  3305  00065A  5177               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3306  00065C  0100               	movlb	0	; () banked
  3307  00065E  5975               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3308  000660  B0D8               	btfsc	status,0,c
  3309  000662  D043               	goto	l2753
  3310                           
  3311                           ; BSR set to: 0
  3312  000664  0100               	movlb	0	; () banked
  3313  000666  5178               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3314  000668  0100               	movlb	0	; () banked
  3315  00066A  5D7A               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3316  00066C  0100               	movlb	0	; () banked
  3317  00066E  5179               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3318  000670  0100               	movlb	0	; () banked
  3319  000672  597B               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3320  000674  B0D8               	btfsc	status,0,c
  3321  000676  D039               	goto	l2753
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;Movement.c: 243: turnLeft(mL,mR);
  3325  000678  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3326  00067C  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3327  000680  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3328  000684  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3329  000688  ECF5  F009         	call	_turnLeft	;wreg free
  3330                           
  3331                           ;Movement.c: 244: delay_tenth_s((3*tenth_seconds)/2);
  3332  00068C  0100               	movlb	0	; () banked
  3333  00068E  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3334  000690  0D03               	mullw	3
  3335  000692  CFF3 F026          	movff	prodl,___awdiv@dividend
  3336  000696  CFF4 F027          	movff	prodh,___awdiv@dividend+1
  3337  00069A  0E00               	movlw	0
  3338  00069C  6E29               	movwf	___awdiv@divisor+1,c
  3339  00069E  0E02               	movlw	2
  3340  0006A0  6E28               	movwf	___awdiv@divisor,c
  3341  0006A2  ECA7  F008         	call	___awdiv	;wreg free
  3342  0006A6  5026               	movf	?___awdiv,w,c
  3343  0006A8  EC55  F00A         	call	_delay_tenth_s
  3344                           
  3345                           ;Movement.c: 245: (*MoveTime) += 3*tenth_seconds/2;
  3346  0006AC  0100               	movlb	0	; () banked
  3347  0006AE  5168               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3348  0006B0  0D03               	mullw	3
  3349  0006B2  CFF3 F026          	movff	prodl,___awdiv@dividend
  3350  0006B6  CFF4 F027          	movff	prodh,___awdiv@dividend+1
  3351  0006BA  0E00               	movlw	0
  3352  0006BC  6E29               	movwf	___awdiv@divisor+1,c
  3353  0006BE  0E02               	movlw	2
  3354  0006C0  6E28               	movwf	___awdiv@divisor,c
  3355  0006C2  ECA7  F008         	call	___awdiv	;wreg free
  3356  0006C6  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3357  0006CA  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3358  0006CE  5026               	movf	?___awdiv,w,c
  3359  0006D0  26DF               	addwf	indf2,f,c
  3360                           
  3361                           ;Movement.c: 246: stop(mL,mR);
  3362  0006D2  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3363  0006D6  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3364  0006DA  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3365  0006DE  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3366  0006E2  EC5F  F008         	call	_stop	;wreg free
  3367  0006E6                     l2747:
  3368                           
  3369                           ;Movement.c: 247: return 1;
  3370  0006E6  0E01               	movlw	1
  3371  0006E8  0012               	return	
  3372  0006EA                     l2753:
  3373  0006EA  0100               	movlb	0	; () banked
  3374  0006EC  517C               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3375  0006EE  0100               	movlb	0	; () banked
  3376  0006F0  5D7E               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3377  0006F2  0100               	movlb	0	; () banked
  3378  0006F4  517D               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3379  0006F6  0100               	movlb	0	; () banked
  3380  0006F8  597F               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3381  0006FA  B0D8               	btfsc	status,0,c
  3382  0006FC  D03A               	goto	l2769
  3383                           
  3384                           ; BSR set to: 0
  3385  0006FE  0100               	movlb	0	; () banked
  3386  000700  517A               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3387  000702  0100               	movlb	0	; () banked
  3388  000704  5D78               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3389  000706  0100               	movlb	0	; () banked
  3390  000708  517B               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3391  00070A  0100               	movlb	0	; () banked
  3392  00070C  5979               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3393  00070E  B0D8               	btfsc	status,0,c
  3394  000710  D030               	goto	l2769
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;Movement.c: 250: turnLeft(mL,mR);
  3398  000712  C064  F060         	movff	ScanWithRange@mL,turnLeft@mL
  3399  000716  C065  F061         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3400  00071A  C066  F062         	movff	ScanWithRange@mR,turnLeft@mR
  3401  00071E  C067  F063         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3402  000722  ECF5  F009         	call	_turnLeft	;wreg free
  3403                           
  3404                           ;Movement.c: 251: delay_tenth_s((tenth_seconds)/2);
  3405  000726  C068  F026         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3406  00072A  6A27               	clrf	___awdiv@dividend+1,c
  3407  00072C  0E00               	movlw	0
  3408  00072E  6E29               	movwf	___awdiv@divisor+1,c
  3409  000730  0E02               	movlw	2
  3410  000732  6E28               	movwf	___awdiv@divisor,c
  3411  000734  ECA7  F008         	call	___awdiv	;wreg free
  3412  000738  5026               	movf	?___awdiv,w,c
  3413  00073A  EC55  F00A         	call	_delay_tenth_s
  3414                           
  3415                           ;Movement.c: 252: (*MoveTime) += tenth_seconds/2;
  3416  00073E  C068  F026         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3417  000742  6A27               	clrf	___awdiv@dividend+1,c
  3418  000744  0E00               	movlw	0
  3419  000746  6E29               	movwf	___awdiv@divisor+1,c
  3420  000748  0E02               	movlw	2
  3421  00074A  6E28               	movwf	___awdiv@divisor,c
  3422  00074C  ECA7  F008         	call	___awdiv	;wreg free
  3423  000750  C069  FFD9         	movff	ScanWithRange@MoveTime,fsr2l
  3424  000754  C06A  FFDA         	movff	ScanWithRange@MoveTime+1,fsr2h
  3425  000758  5026               	movf	?___awdiv,w,c
  3426  00075A  26DF               	addwf	indf2,f,c
  3427                           
  3428                           ;Movement.c: 253: stop(mL,mR);
  3429  00075C  C064  F037         	movff	ScanWithRange@mL,stop@mL
  3430  000760  C065  F038         	movff	ScanWithRange@mL+1,stop@mL+1
  3431  000764  C066  F039         	movff	ScanWithRange@mR,stop@mR
  3432  000768  C067  F03A         	movff	ScanWithRange@mR+1,stop@mR+1
  3433  00076C  EC5F  F008         	call	_stop	;wreg free
  3434  000770  D7BA               	goto	l2747
  3435  000772                     l2769:
  3436                           
  3437                           ;Movement.c: 255: }
  3438                           ;Movement.c: 256: }
  3439                           ;Movement.c: 257: return 0;
  3440  000772  0E00               	movlw	0
  3441  000774  0012               	return	
  3442  000776                     __end_of_ScanWithRange:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           indf1	equ	0xFE7
  3451                           fsr1h	equ	0xFE2
  3452                           fsr1l	equ	0xFE1
  3453                           indf2	equ	0xFDF
  3454                           postinc2	equ	0xFDE
  3455                           postdec2	equ	0xFDD
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _ScanIR *****************
  3461 ;; Defined at:
  3462 ;;		line 32 in file "Movement.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  mL              2    4[BANK0 ] PTR struct DC_motor
  3465 ;;		 -> main@mL(9), 
  3466 ;;  mR              2    6[BANK0 ] PTR struct DC_motor
  3467 ;;		 -> main@mR(9), 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  SensorResult    4   14[BANK0 ] unsigned int [2]
  3470 ;;  DirectionFou    2   12[BANK0 ] const unsigned int 
  3471 ;;  DirectionFou    2   10[BANK0 ] const unsigned int 
  3472 ;;  ClearSignalT    2    8[BANK0 ] const unsigned int 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      unsigned char 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3482 ;;      Params:         0       4       0       0
  3483 ;;      Locals:         0      10       0       0
  3484 ;;      Temps:          2       0       0       0
  3485 ;;      Totals:         2      14       0       0
  3486 ;;Total ram usage:       16 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    6
  3489 ;; This function calls:
  3490 ;;		_delay_tenth_s
  3491 ;;		_grabLeftIR
  3492 ;;		_grabRightIR
  3493 ;;		_stop
  3494 ;;		_turnLeft
  3495 ;;		_turnRight
  3496 ;; This function is called by:
  3497 ;;		_main
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text13
  3502  000AFE                     __ptext13:
  3503                           	opt stack 0
  3504  000AFE                     _ScanIR:
  3505                           	opt stack 24
  3506                           
  3507                           ;Movement.c: 34: unsigned int SensorResult[2]={0,0};
  3508                           
  3509                           ;incstack = 0
  3510  000AFE  C082  F06E         	movff	ScanIR@F3710,ScanIR@SensorResult
  3511  000B02  C083  F06F         	movff	ScanIR@F3710+1,ScanIR@SensorResult+1
  3512  000B06  C084  F070         	movff	ScanIR@F3710+2,ScanIR@SensorResult+2
  3513  000B0A  C085  F071         	movff	ScanIR@F3710+3,ScanIR@SensorResult+3
  3514                           
  3515                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=400;
  3516  000B0E  0E01               	movlw	1
  3517  000B10  0100               	movlb	0	; () banked
  3518  000B12  6F69               	movwf	(ScanIR@ClearSignalTolerance+1)& (0+255),b
  3519  000B14  0E90               	movlw	144
  3520  000B16  6F68               	movwf	ScanIR@ClearSignalTolerance& (0+255),b
  3521                           
  3522                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=3000;
  3523  000B18  0E0B               	movlw	11
  3524  000B1A  0100               	movlb	0	; () banked
  3525  000B1C  6F6B               	movwf	(ScanIR@DirectionFoundLimit+1)& (0+255),b
  3526  000B1E  0EB8               	movlw	184
  3527  000B20  6F6A               	movwf	ScanIR@DirectionFoundLimit& (0+255),b
  3528                           
  3529                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  3530  000B22  0E01               	movlw	1
  3531  000B24  0100               	movlb	0	; () banked
  3532  000B26  6F6D               	movwf	(ScanIR@DirectionFoundTolerance+1)& (0+255),b
  3533  000B28  0EF4               	movlw	244
  3534  000B2A  6F6C               	movwf	ScanIR@DirectionFoundTolerance& (0+255),b
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  3538  000B2C  EC5D  F009         	call	_grabLeftIR	;wreg free
  3539  000B30  C020  F06E         	movff	?_grabLeftIR,ScanIR@SensorResult
  3540  000B34  C021  F06F         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3541                           
  3542                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  3543  000B38  EC24  F009         	call	_grabRightIR	;wreg free
  3544  000B3C  C020  F070         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3545  000B40  C021  F071         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3546                           
  3547                           ;Movement.c: 47: CAP1BUFH=0;
  3548  000B44  0E00               	movlw	0
  3549  000B46  6E69               	movwf	3945,c	;volatile
  3550                           
  3551                           ;Movement.c: 48: CAP1BUFL=0;
  3552  000B48  0E00               	movlw	0
  3553  000B4A  6E68               	movwf	3944,c	;volatile
  3554                           
  3555                           ;Movement.c: 49: CAP2BUFH=0;
  3556  000B4C  0E00               	movlw	0
  3557  000B4E  6E67               	movwf	3943,c	;volatile
  3558                           
  3559                           ;Movement.c: 50: CAP2BUFL=0;
  3560  000B50  0E00               	movlw	0
  3561  000B52  6E66               	movwf	3942,c	;volatile
  3562                           
  3563                           ;Movement.c: 54: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  3564  000B54  0100               	movlb	0	; () banked
  3565  000B56  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3566  000B58  0100               	movlb	0	; () banked
  3567  000B5A  2570               	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3568  000B5C  6E3C               	movwf	??_ScanIR& (0+255),c
  3569  000B5E  0100               	movlb	0	; () banked
  3570  000B60  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3571  000B62  0100               	movlb	0	; () banked
  3572  000B64  2171               	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  3573  000B66  6E3D               	movwf	(??_ScanIR+1)& (0+255),c
  3574  000B68  503C               	movf	??_ScanIR,w,c
  3575  000B6A  0100               	movlb	0	; () banked
  3576  000B6C  5D68               	subwf	ScanIR@ClearSignalTolerance& (0+255),w,b
  3577  000B6E  503D               	movf	??_ScanIR+1,w,c
  3578  000B70  0100               	movlb	0	; () banked
  3579  000B72  5969               	subwfb	(ScanIR@ClearSignalTolerance+1)& (0+255),w,b
  3580  000B74  B0D8               	btfsc	status,0,c
  3581  000B76  D09D               	goto	l2823
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;Movement.c: 57: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  3585                           ;Movement.c: 58: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3586                           ;Movement.c: 59: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3587  000B78  0100               	movlb	0	; () banked
  3588  000B7A  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3589  000B7C  0100               	movlb	0	; () banked
  3590  000B7E  5D6A               	subwf	ScanIR@DirectionFoundLimit& (0+255),w,b
  3591  000B80  0100               	movlb	0	; () banked
  3592  000B82  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3593  000B84  0100               	movlb	0	; () banked
  3594  000B86  596B               	subwfb	(ScanIR@DirectionFoundLimit+1)& (0+255),w,b
  3595  000B88  B0D8               	btfsc	status,0,c
  3596  000B8A  D03A               	goto	l2797
  3597                           
  3598                           ; BSR set to: 0
  3599  000B8C  0100               	movlb	0	; () banked
  3600  000B8E  5170               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3601  000B90  0100               	movlb	0	; () banked
  3602  000B92  5D6A               	subwf	ScanIR@DirectionFoundLimit& (0+255),w,b
  3603  000B94  0100               	movlb	0	; () banked
  3604  000B96  5171               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3605  000B98  0100               	movlb	0	; () banked
  3606  000B9A  596B               	subwfb	(ScanIR@DirectionFoundLimit+1)& (0+255),w,b
  3607  000B9C  B0D8               	btfsc	status,0,c
  3608  000B9E  D030               	goto	l2797
  3609                           
  3610                           ; BSR set to: 0
  3611  000BA0  EE20  F070         	lfsr	2,ScanIR@SensorResult+2
  3612  000BA4  CFDE F03C          	movff	postinc2,??_ScanIR
  3613  000BA8  CFDD F03D          	movff	postdec2,??_ScanIR+1
  3614  000BAC  1E3C               	comf	??_ScanIR,f,c
  3615  000BAE  1E3D               	comf	??_ScanIR+1,f,c
  3616  000BB0  4A3C               	infsnz	??_ScanIR,f,c
  3617  000BB2  2A3D               	incf	??_ScanIR+1,f,c
  3618  000BB4  0100               	movlb	0	; () banked
  3619  000BB6  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3620  000BB8  263C               	addwf	??_ScanIR,f,c
  3621  000BBA  0100               	movlb	0	; () banked
  3622  000BBC  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3623  000BBE  223D               	addwfc	??_ScanIR+1,f,c
  3624  000BC0  0100               	movlb	0	; () banked
  3625  000BC2  516C               	movf	ScanIR@DirectionFoundTolerance& (0+255),w,b
  3626  000BC4  5C3C               	subwf	??_ScanIR,w,c
  3627  000BC6  0100               	movlb	0	; () banked
  3628  000BC8  516D               	movf	(ScanIR@DirectionFoundTolerance+1)& (0+255),w,b
  3629  000BCA  583D               	subwfb	??_ScanIR+1,w,c
  3630  000BCC  A0D8               	btfss	status,0,c
  3631  000BCE  D016               	goto	l2791
  3632                           
  3633                           ; BSR set to: 0
  3634  000BD0  C06E  F03C         	movff	ScanIR@SensorResult,??_ScanIR
  3635  000BD4  C06F  F03D         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3636  000BD8  1E3C               	comf	??_ScanIR,f,c
  3637  000BDA  1E3D               	comf	??_ScanIR+1,f,c
  3638  000BDC  4A3C               	infsnz	??_ScanIR,f,c
  3639  000BDE  2A3D               	incf	??_ScanIR+1,f,c
  3640  000BE0  0100               	movlb	0	; () banked
  3641  000BE2  5170               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3642  000BE4  263C               	addwf	??_ScanIR,f,c
  3643  000BE6  0100               	movlb	0	; () banked
  3644  000BE8  5171               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3645  000BEA  223D               	addwfc	??_ScanIR+1,f,c
  3646  000BEC  0100               	movlb	0	; () banked
  3647  000BEE  516C               	movf	ScanIR@DirectionFoundTolerance& (0+255),w,b
  3648  000BF0  5C3C               	subwf	??_ScanIR,w,c
  3649  000BF2  0100               	movlb	0	; () banked
  3650  000BF4  516D               	movf	(ScanIR@DirectionFoundTolerance+1)& (0+255),w,b
  3651  000BF6  583D               	subwfb	??_ScanIR+1,w,c
  3652  000BF8  B0D8               	btfsc	status,0,c
  3653  000BFA  D002               	goto	l2797
  3654  000BFC                     l2791:
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;Movement.c: 60: return 2;
  3658  000BFC  0E02               	movlw	2
  3659                           
  3660                           ; BSR set to: 0
  3661  000BFE  0012               	return	
  3662  000C00                     l2797:
  3663                           
  3664                           ; BSR set to: 0
  3665  000C00  0100               	movlb	0	; () banked
  3666  000C02  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3667  000C04  0100               	movlb	0	; () banked
  3668  000C06  5D70               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3669  000C08  0100               	movlb	0	; () banked
  3670  000C0A  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3671  000C0C  0100               	movlb	0	; () banked
  3672  000C0E  5971               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3673  000C10  A0D8               	btfss	status,0,c
  3674  000C12  D023               	goto	l2811
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;Movement.c: 63: stop(mL,mR);
  3678  000C14  C064  F037         	movff	ScanIR@mL,stop@mL
  3679  000C18  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3680  000C1C  C066  F039         	movff	ScanIR@mR,stop@mR
  3681  000C20  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3682  000C24  EC5F  F008         	call	_stop	;wreg free
  3683                           
  3684                           ;Movement.c: 64: turnLeft(mL,mR);
  3685  000C28  C064  F060         	movff	ScanIR@mL,turnLeft@mL
  3686  000C2C  C065  F061         	movff	ScanIR@mL+1,turnLeft@mL+1
  3687  000C30  C066  F062         	movff	ScanIR@mR,turnLeft@mR
  3688  000C34  C067  F063         	movff	ScanIR@mR+1,turnLeft@mR+1
  3689  000C38  ECF5  F009         	call	_turnLeft	;wreg free
  3690                           
  3691                           ;Movement.c: 65: delay_tenth_s(3);
  3692  000C3C  0E03               	movlw	3
  3693  000C3E  EC55  F00A         	call	_delay_tenth_s
  3694                           
  3695                           ;Movement.c: 66: stop(mL,mR);
  3696  000C42  C064  F037         	movff	ScanIR@mL,stop@mL
  3697  000C46  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3698  000C4A  C066  F039         	movff	ScanIR@mR,stop@mR
  3699  000C4E  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3700  000C52  EC5F  F008         	call	_stop	;wreg free
  3701  000C56                     l2805:
  3702                           
  3703                           ;Movement.c: 67: return 1;
  3704  000C56  0E01               	movlw	1
  3705  000C58  0012               	return	
  3706  000C5A                     l2811:
  3707  000C5A  0100               	movlb	0	; () banked
  3708  000C5C  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3709  000C5E  0100               	movlb	0	; () banked
  3710  000C60  5D70               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3711  000C62  0100               	movlb	0	; () banked
  3712  000C64  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3713  000C66  0100               	movlb	0	; () banked
  3714  000C68  5971               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3715  000C6A  B0D8               	btfsc	status,0,c
  3716  000C6C  D071               	goto	l2851
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;Movement.c: 70: stop(mL,mR);
  3720  000C6E  C064  F037         	movff	ScanIR@mL,stop@mL
  3721  000C72  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3722  000C76  C066  F039         	movff	ScanIR@mR,stop@mR
  3723  000C7A  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3724  000C7E  EC5F  F008         	call	_stop	;wreg free
  3725                           
  3726                           ;Movement.c: 71: turnRight(mL,mR);
  3727  000C82  C064  F060         	movff	ScanIR@mL,turnRight@mL
  3728  000C86  C065  F061         	movff	ScanIR@mL+1,turnRight@mL+1
  3729  000C8A  C066  F062         	movff	ScanIR@mR,turnRight@mR
  3730  000C8E  C067  F063         	movff	ScanIR@mR+1,turnRight@mR+1
  3731  000C92  ECCE  F009         	call	_turnRight	;wreg free
  3732                           
  3733                           ;Movement.c: 72: delay_tenth_s(3);
  3734  000C96  0E03               	movlw	3
  3735  000C98  EC55  F00A         	call	_delay_tenth_s
  3736                           
  3737                           ;Movement.c: 73: stop(mL,mR);
  3738  000C9C  C064  F037         	movff	ScanIR@mL,stop@mL
  3739  000CA0  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3740  000CA4  C066  F039         	movff	ScanIR@mR,stop@mR
  3741  000CA8  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3742  000CAC  EC5F  F008         	call	_stop	;wreg free
  3743  000CB0  D7D2               	goto	l2805
  3744  000CB2                     l2823:
  3745                           
  3746                           ;Movement.c: 78: stop(mL,mR);
  3747  000CB2  C064  F037         	movff	ScanIR@mL,stop@mL
  3748  000CB6  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3749  000CBA  C066  F039         	movff	ScanIR@mR,stop@mR
  3750  000CBE  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3751  000CC2  EC5F  F008         	call	_stop	;wreg free
  3752                           
  3753                           ;Movement.c: 81: if (SensorResult[0]<=SensorResult[1]) {
  3754  000CC6  0100               	movlb	0	; () banked
  3755  000CC8  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3756  000CCA  0100               	movlb	0	; () banked
  3757  000CCC  5D70               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3758  000CCE  0100               	movlb	0	; () banked
  3759  000CD0  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3760  000CD2  0100               	movlb	0	; () banked
  3761  000CD4  5971               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3762  000CD6  A0D8               	btfss	status,0,c
  3763  000CD8  D019               	goto	l2839
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;Movement.c: 82: turnLeft(mL,mR);
  3767  000CDA  C064  F060         	movff	ScanIR@mL,turnLeft@mL
  3768  000CDE  C065  F061         	movff	ScanIR@mL+1,turnLeft@mL+1
  3769  000CE2  C066  F062         	movff	ScanIR@mR,turnLeft@mR
  3770  000CE6  C067  F063         	movff	ScanIR@mR+1,turnLeft@mR+1
  3771  000CEA  ECF5  F009         	call	_turnLeft	;wreg free
  3772                           
  3773                           ;Movement.c: 83: delay_tenth_s(5);
  3774  000CEE  0E05               	movlw	5
  3775  000CF0  EC55  F00A         	call	_delay_tenth_s
  3776                           
  3777                           ;Movement.c: 84: stop(mL,mR);
  3778  000CF4  C064  F037         	movff	ScanIR@mL,stop@mL
  3779  000CF8  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3780  000CFC  C066  F039         	movff	ScanIR@mR,stop@mR
  3781  000D00  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3782  000D04  EC5F  F008         	call	_stop	;wreg free
  3783  000D08                     l2833:
  3784                           
  3785                           ;Movement.c: 85: return 0;
  3786  000D08  0E00               	movlw	0
  3787  000D0A  0012               	return	
  3788  000D0C                     l2839:
  3789  000D0C  0100               	movlb	0	; () banked
  3790  000D0E  516E               	movf	ScanIR@SensorResult& (0+255),w,b
  3791  000D10  0100               	movlb	0	; () banked
  3792  000D12  5D70               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3793  000D14  0100               	movlb	0	; () banked
  3794  000D16  516F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3795  000D18  0100               	movlb	0	; () banked
  3796  000D1A  5971               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3797  000D1C  B0D8               	btfsc	status,0,c
  3798  000D1E  D018               	goto	l2851
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;Movement.c: 88: turnRight(mL,mR);
  3802  000D20  C064  F060         	movff	ScanIR@mL,turnRight@mL
  3803  000D24  C065  F061         	movff	ScanIR@mL+1,turnRight@mL+1
  3804  000D28  C066  F062         	movff	ScanIR@mR,turnRight@mR
  3805  000D2C  C067  F063         	movff	ScanIR@mR+1,turnRight@mR+1
  3806  000D30  ECCE  F009         	call	_turnRight	;wreg free
  3807                           
  3808                           ;Movement.c: 89: delay_tenth_s(5);
  3809  000D34  0E05               	movlw	5
  3810  000D36  EC55  F00A         	call	_delay_tenth_s
  3811                           
  3812                           ;Movement.c: 90: stop(mL,mR);
  3813  000D3A  C064  F037         	movff	ScanIR@mL,stop@mL
  3814  000D3E  C065  F038         	movff	ScanIR@mL+1,stop@mL+1
  3815  000D42  C066  F039         	movff	ScanIR@mR,stop@mR
  3816  000D46  C067  F03A         	movff	ScanIR@mR+1,stop@mR+1
  3817  000D4A  EC5F  F008         	call	_stop	;wreg free
  3818  000D4E  D7DC               	goto	l2833
  3819  000D50                     l2851:
  3820                           
  3821                           ;Movement.c: 92: }
  3822                           ;Movement.c: 93: }
  3823                           ;Movement.c: 94: return 0;
  3824  000D50  0E00               	movlw	0
  3825  000D52  0012               	return	
  3826  000D54                     __end_of_ScanIR:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           indf1	equ	0xFE7
  3835                           fsr1h	equ	0xFE2
  3836                           fsr1l	equ	0xFE1
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _turnRight *****************
  3845 ;; Defined at:
  3846 ;;		line 98 in file "dc_motor.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  3849 ;;		 -> main@mL(9), 
  3850 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  3851 ;;		 -> main@mR(9), 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;		None               void
  3856 ;; Registers used:
  3857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3863 ;;      Params:         0       4       0       0
  3864 ;;      Locals:         0       0       0       0
  3865 ;;      Temps:          0       0       0       0
  3866 ;;      Totals:         0       4       0       0
  3867 ;;Total ram usage:        4 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    5
  3870 ;; This function calls:
  3871 ;;		_fullSpeedAhead
  3872 ;;		_stop
  3873 ;; This function is called by:
  3874 ;;		_ScanIR
  3875 ;;		_ScanWithRange
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text14
  3880  00139C                     __ptext14:
  3881                           	opt stack 0
  3882  00139C                     _turnRight:
  3883                           	opt stack 24
  3884                           
  3885                           ;dc_motor.c: 100: stop(mL, mR);
  3886                           
  3887                           ;incstack = 0
  3888  00139C  C060  F037         	movff	turnRight@mL,stop@mL
  3889  0013A0  C061  F038         	movff	turnRight@mL+1,stop@mL+1
  3890  0013A4  C062  F039         	movff	turnRight@mR,stop@mR
  3891  0013A8  C063  F03A         	movff	turnRight@mR+1,stop@mR+1
  3892  0013AC  EC5F  F008         	call	_stop	;wreg free
  3893                           
  3894                           ;dc_motor.c: 102: mL->direction=1;
  3895  0013B0  0100               	movlb	0	; () banked
  3896  0013B2  EE20 F001          	lfsr	2,1
  3897  0013B6  5160               	movf	turnRight@mL& (0+255),w,b
  3898  0013B8  26D9               	addwf	fsr2l,f,c
  3899  0013BA  5161               	movf	(turnRight@mL+1)& (0+255),w,b
  3900  0013BC  22DA               	addwfc	fsr2h,f,c
  3901  0013BE  0E01               	movlw	1
  3902  0013C0  6EDF               	movwf	indf2,c
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;dc_motor.c: 103: mR->direction=0;
  3906  0013C2  0100               	movlb	0	; () banked
  3907  0013C4  EE20 F001          	lfsr	2,1
  3908  0013C8  5162               	movf	turnRight@mR& (0+255),w,b
  3909  0013CA  26D9               	addwf	fsr2l,f,c
  3910  0013CC  5163               	movf	(turnRight@mR+1)& (0+255),w,b
  3911  0013CE  22DA               	addwfc	fsr2h,f,c
  3912  0013D0  0E00               	movlw	0
  3913  0013D2  6EDF               	movwf	indf2,c
  3914                           
  3915                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3916  0013D4  C060  F037         	movff	turnRight@mL,fullSpeedAhead@mL
  3917  0013D8  C061  F038         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3918  0013DC  C062  F039         	movff	turnRight@mR,fullSpeedAhead@mR
  3919  0013E0  C063  F03A         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3920  0013E4  EC96  F009         	call	_fullSpeedAhead	;wreg free
  3921  0013E8  0012               	return		;funcret
  3922  0013EA                     __end_of_turnRight:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           indf1	equ	0xFE7
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _turnLeft *****************
  3941 ;; Defined at:
  3942 ;;		line 87 in file "dc_motor.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  3945 ;;		 -> main@mL(9), 
  3946 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  3947 ;;		 -> main@mR(9), 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       4       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       4       0       0
  3963 ;;Total ram usage:        4 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    5
  3966 ;; This function calls:
  3967 ;;		_fullSpeedAhead
  3968 ;;		_stop
  3969 ;; This function is called by:
  3970 ;;		_ScanIR
  3971 ;;		_ScanWithRange
  3972 ;; This function uses a non-reentrant model
  3973 ;;
  3974                           
  3975                           	psect	text15
  3976  0013EA                     __ptext15:
  3977                           	opt stack 0
  3978  0013EA                     _turnLeft:
  3979                           	opt stack 24
  3980                           
  3981                           ;dc_motor.c: 89: stop(mL, mR);
  3982                           
  3983                           ;incstack = 0
  3984  0013EA  C060  F037         	movff	turnLeft@mL,stop@mL
  3985  0013EE  C061  F038         	movff	turnLeft@mL+1,stop@mL+1
  3986  0013F2  C062  F039         	movff	turnLeft@mR,stop@mR
  3987  0013F6  C063  F03A         	movff	turnLeft@mR+1,stop@mR+1
  3988  0013FA  EC5F  F008         	call	_stop	;wreg free
  3989                           
  3990                           ;dc_motor.c: 91: mL->direction=0;
  3991  0013FE  0100               	movlb	0	; () banked
  3992  001400  EE20 F001          	lfsr	2,1
  3993  001404  5160               	movf	turnLeft@mL& (0+255),w,b
  3994  001406  26D9               	addwf	fsr2l,f,c
  3995  001408  5161               	movf	(turnLeft@mL+1)& (0+255),w,b
  3996  00140A  22DA               	addwfc	fsr2h,f,c
  3997  00140C  0E00               	movlw	0
  3998  00140E  6EDF               	movwf	indf2,c
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;dc_motor.c: 92: mR->direction=1;
  4002  001410  0100               	movlb	0	; () banked
  4003  001412  EE20 F001          	lfsr	2,1
  4004  001416  5162               	movf	turnLeft@mR& (0+255),w,b
  4005  001418  26D9               	addwf	fsr2l,f,c
  4006  00141A  5163               	movf	(turnLeft@mR+1)& (0+255),w,b
  4007  00141C  22DA               	addwfc	fsr2h,f,c
  4008  00141E  0E01               	movlw	1
  4009  001420  6EDF               	movwf	indf2,c
  4010                           
  4011                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4012  001422  C060  F037         	movff	turnLeft@mL,fullSpeedAhead@mL
  4013  001426  C061  F038         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4014  00142A  C062  F039         	movff	turnLeft@mR,fullSpeedAhead@mR
  4015  00142E  C063  F03A         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4016  001432  EC96  F009         	call	_fullSpeedAhead	;wreg free
  4017  001436  0012               	return		;funcret
  4018  001438                     __end_of_turnLeft:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           indf1	equ	0xFE7
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           postdec2	equ	0xFDD
  4032                           fsr2h	equ	0xFDA
  4033                           fsr2l	equ	0xFD9
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function _stop *****************
  4037 ;; Defined at:
  4038 ;;		line 67 in file "dc_motor.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  4041 ;;		 -> main@mL(9), 
  4042 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  4043 ;;		 -> main@mR(9), 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;		None               void
  4048 ;; Registers used:
  4049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4055 ;;      Params:         4       0       0       0
  4056 ;;      Locals:         0       0       0       0
  4057 ;;      Temps:          0       0       0       0
  4058 ;;      Totals:         4       0       0       0
  4059 ;;Total ram usage:        4 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    4
  4062 ;; This function calls:
  4063 ;;		_setMotorPWM
  4064 ;; This function is called by:
  4065 ;;		_main
  4066 ;;		_turnLeft
  4067 ;;		_turnRight
  4068 ;;		_ScanIR
  4069 ;;		_ScanWithRange
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text16
  4074  0010BE                     __ptext16:
  4075                           	opt stack 0
  4076  0010BE                     _stop:
  4077                           	opt stack 26
  4078                           
  4079                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4080                           
  4081                           ;incstack = 0
  4082  0010BE  D028               	goto	l1881
  4083  0010C0                     l1867:
  4084                           
  4085                           ;dc_motor.c: 71: if(mL->power>0){
  4086  0010C0  C037  FFD9         	movff	stop@mL,fsr2l
  4087  0010C4  C038  FFDA         	movff	stop@mL+1,fsr2h
  4088  0010C8  50DF               	movf	indf2,w,c
  4089  0010CA  B4D8               	btfsc	status,2,c
  4090  0010CC  D005               	goto	l1871
  4091                           
  4092                           ;dc_motor.c: 72: mL->power--;
  4093  0010CE  C037  FFD9         	movff	stop@mL,fsr2l
  4094  0010D2  C038  FFDA         	movff	stop@mL+1,fsr2h
  4095  0010D6  06DF               	decf	indf2,f,c
  4096  0010D8                     l1871:
  4097                           
  4098                           ;dc_motor.c: 73: }
  4099                           ;dc_motor.c: 74: if(mR->power>0){
  4100  0010D8  C039  FFD9         	movff	stop@mR,fsr2l
  4101  0010DC  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4102  0010E0  50DF               	movf	indf2,w,c
  4103  0010E2  B4D8               	btfsc	status,2,c
  4104  0010E4  D005               	goto	l1875
  4105                           
  4106                           ;dc_motor.c: 75: mR->power--;
  4107  0010E6  C039  FFD9         	movff	stop@mR,fsr2l
  4108  0010EA  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4109  0010EE  06DF               	decf	indf2,f,c
  4110  0010F0                     l1875:
  4111                           
  4112                           ;dc_motor.c: 76: }
  4113                           ;dc_motor.c: 77: setMotorPWM(mL);
  4114  0010F0  C037  F02E         	movff	stop@mL,setMotorPWM@m
  4115  0010F4  C038  F02F         	movff	stop@mL+1,setMotorPWM@m+1
  4116  0010F8  ECAA  F006         	call	_setMotorPWM	;wreg free
  4117                           
  4118                           ;dc_motor.c: 78: setMotorPWM(mR);
  4119  0010FC  C039  F02E         	movff	stop@mR,setMotorPWM@m
  4120  001100  C03A  F02F         	movff	stop@mR+1,setMotorPWM@m+1
  4121  001104  ECAA  F006         	call	_setMotorPWM	;wreg free
  4122                           
  4123                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4124  001108  0E21               	movlw	33
  4125  00110A                     u2497:
  4126  00110A  2EE8               	decfsz	wreg,f,c
  4127  00110C  D7FE               	goto	u2497
  4128  00110E  F000               	nop	
  4129  001110                     l1881:
  4130  001110  C037  FFD9         	movff	stop@mL,fsr2l
  4131  001114  C038  FFDA         	movff	stop@mL+1,fsr2h
  4132  001118  50DF               	movf	indf2,w,c
  4133  00111A  A4D8               	btfss	status,2,c
  4134  00111C  D7D1               	goto	l1867
  4135  00111E  C039  FFD9         	movff	stop@mR,fsr2l
  4136  001122  C03A  FFDA         	movff	stop@mR+1,fsr2h
  4137  001126  50DF               	movf	indf2,w,c
  4138  001128  A4D8               	btfss	status,2,c
  4139  00112A  D7CA               	goto	l1867
  4140                           
  4141                           ;dc_motor.c: 80: }
  4142                           ;dc_motor.c: 81: mL->direction=1;
  4143  00112C  EE20 F001          	lfsr	2,1
  4144  001130  5037               	movf	stop@mL,w,c
  4145  001132  26D9               	addwf	fsr2l,f,c
  4146  001134  5038               	movf	stop@mL+1,w,c
  4147  001136  22DA               	addwfc	fsr2h,f,c
  4148  001138  0E01               	movlw	1
  4149  00113A  6EDF               	movwf	indf2,c
  4150                           
  4151                           ;dc_motor.c: 82: mR->direction=1;
  4152  00113C  EE20 F001          	lfsr	2,1
  4153  001140  5039               	movf	stop@mR,w,c
  4154  001142  26D9               	addwf	fsr2l,f,c
  4155  001144  503A               	movf	stop@mR+1,w,c
  4156  001146  22DA               	addwfc	fsr2h,f,c
  4157  001148  0E01               	movlw	1
  4158  00114A  6EDF               	movwf	indf2,c
  4159  00114C  0012               	return		;funcret
  4160  00114E                     __end_of_stop:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           intcon	equ	0xFF2
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           indf1	equ	0xFE7
  4169                           fsr1h	equ	0xFE2
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _fullSpeedAhead *****************
  4179 ;; Defined at:
  4180 ;;		line 108 in file "dc_motor.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  4183 ;;		 -> main@mL(9), 
  4184 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  4185 ;;		 -> main@mR(9), 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;		None               void
  4190 ;; Registers used:
  4191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4197 ;;      Params:         4       0       0       0
  4198 ;;      Locals:         0       0       0       0
  4199 ;;      Temps:          1       0       0       0
  4200 ;;      Totals:         5       0       0       0
  4201 ;;Total ram usage:        5 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    4
  4204 ;; This function calls:
  4205 ;;		_setMotorPWM
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;;		_turnLeft
  4209 ;;		_turnRight
  4210 ;;		_fullSpeedBack
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text17
  4215  00132C                     __ptext17:
  4216                           	opt stack 0
  4217  00132C                     _fullSpeedAhead:
  4218                           	opt stack 25
  4219                           
  4220                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4221                           
  4222                           ;incstack = 0
  4223  00132C  D028               	goto	l166
  4224  00132E                     l1849:
  4225                           
  4226                           ;dc_motor.c: 112: if(mL->power<100){
  4227  00132E  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4228  001332  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4229  001336  0E64               	movlw	100
  4230  001338  60DF               	cpfslt	indf2,c
  4231  00133A  D005               	goto	l1853
  4232                           
  4233                           ;dc_motor.c: 113: mL->power++;
  4234  00133C  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4235  001340  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4236  001344  2ADF               	incf	indf2,f,c
  4237  001346                     l1853:
  4238                           
  4239                           ;dc_motor.c: 114: }
  4240                           ;dc_motor.c: 115: if(mR->power<100){
  4241  001346  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4242  00134A  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4243  00134E  0E64               	movlw	100
  4244  001350  60DF               	cpfslt	indf2,c
  4245  001352  D005               	goto	l1857
  4246                           
  4247                           ;dc_motor.c: 116: mR->power++;
  4248  001354  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4249  001358  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4250  00135C  2ADF               	incf	indf2,f,c
  4251  00135E                     l1857:
  4252                           
  4253                           ;dc_motor.c: 117: }
  4254                           ;dc_motor.c: 118: setMotorPWM(mL);
  4255  00135E  C037  F02E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4256  001362  C038  F02F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4257  001366  ECAA  F006         	call	_setMotorPWM	;wreg free
  4258                           
  4259                           ;dc_motor.c: 119: setMotorPWM(mR);
  4260  00136A  C039  F02E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4261  00136E  C03A  F02F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4262  001372  ECAA  F006         	call	_setMotorPWM	;wreg free
  4263                           
  4264                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4265  001376  0E21               	movlw	33
  4266  001378                     u2507:
  4267  001378  2EE8               	decfsz	wreg,f,c
  4268  00137A  D7FE               	goto	u2507
  4269  00137C  F000               	nop	
  4270  00137E                     l166:
  4271  00137E  C037  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4272  001382  C038  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4273  001386  0E63               	movlw	99
  4274  001388  64DF               	cpfsgt	indf2,c
  4275  00138A  D7D1               	goto	l1849
  4276  00138C  C039  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4277  001390  C03A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4278  001394  0E63               	movlw	99
  4279  001396  64DF               	cpfsgt	indf2,c
  4280  001398  D7CA               	goto	l1849
  4281  00139A  0012               	return	
  4282  00139C                     __end_of_fullSpeedAhead:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           indf1	equ	0xFE7
  4291                           fsr1h	equ	0xFE2
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           fsr2h	equ	0xFDA
  4297                           fsr2l	equ	0xFD9
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function _setMotorPWM *****************
  4301 ;; Defined at:
  4302 ;;		line 26 in file "dc_motor.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  m               2   45[COMRAM] PTR struct DC_motor
  4305 ;;		 -> main@mR(9), main@mL(9), 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  PWMduty         2   52[COMRAM] int 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4317 ;;      Params:         2       0       0       0
  4318 ;;      Locals:         2       0       0       0
  4319 ;;      Temps:          5       0       0       0
  4320 ;;      Totals:         9       0       0       0
  4321 ;;Total ram usage:        9 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    3
  4324 ;; This function calls:
  4325 ;;		___awdiv
  4326 ;;		___wmul
  4327 ;; This function is called by:
  4328 ;;		_stop
  4329 ;;		_fullSpeedAhead
  4330 ;;		_setMotorFullSpeed
  4331 ;;		_stopMotor
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text18
  4336  000D54                     __ptext18:
  4337                           	opt stack 0
  4338  000D54                     _setMotorPWM:
  4339                           	opt stack 26
  4340                           
  4341                           ;dc_motor.c: 28: int PWMduty;
  4342                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4343                           
  4344                           ;incstack = 0
  4345  000D54  C02E  FFD9         	movff	setMotorPWM@m,fsr2l
  4346  000D58  C02F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4347  000D5C  50DF               	movf	indf2,w,c
  4348  000D5E  6E30               	movwf	??_setMotorPWM& (0+255),c
  4349  000D60  5030               	movf	??_setMotorPWM,w,c
  4350  000D62  6E20               	movwf	___wmul@multiplier,c
  4351  000D64  6A21               	clrf	___wmul@multiplier+1,c
  4352  000D66  EE20 F007          	lfsr	2,7
  4353  000D6A  502E               	movf	setMotorPWM@m,w,c
  4354  000D6C  26D9               	addwf	fsr2l,f,c
  4355  000D6E  502F               	movf	setMotorPWM@m+1,w,c
  4356  000D70  22DA               	addwfc	fsr2h,f,c
  4357  000D72  CFDE F022          	movff	postinc2,___wmul@multiplicand
  4358  000D76  CFDD F023          	movff	postdec2,___wmul@multiplicand+1
  4359  000D7A  ECCA  F00A         	call	___wmul	;wreg free
  4360  000D7E  C020  F026         	movff	?___wmul,___awdiv@dividend
  4361  000D82  C021  F027         	movff	?___wmul+1,___awdiv@dividend+1
  4362  000D86  0E00               	movlw	0
  4363  000D88  6E29               	movwf	___awdiv@divisor+1,c
  4364  000D8A  0E64               	movlw	100
  4365  000D8C  6E28               	movwf	___awdiv@divisor,c
  4366  000D8E  ECA7  F008         	call	___awdiv	;wreg free
  4367  000D92  C026  F035         	movff	?___awdiv,setMotorPWM@PWMduty
  4368  000D96  C027  F036         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4369                           
  4370                           ;dc_motor.c: 32: if (m->direction)
  4371  000D9A  EE20 F001          	lfsr	2,1
  4372  000D9E  502E               	movf	setMotorPWM@m,w,c
  4373  000DA0  26D9               	addwf	fsr2l,f,c
  4374  000DA2  502F               	movf	setMotorPWM@m+1,w,c
  4375  000DA4  22DA               	addwfc	fsr2h,f,c
  4376  000DA6  50DF               	movf	indf2,w,c
  4377  000DA8  B4D8               	btfsc	status,2,c
  4378  000DAA  D02C               	goto	l1839
  4379                           
  4380                           ;dc_motor.c: 33: {
  4381                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4382  000DAC  EE20 F006          	lfsr	2,6
  4383  000DB0  502E               	movf	setMotorPWM@m,w,c
  4384  000DB2  26D9               	addwf	fsr2l,f,c
  4385  000DB4  502F               	movf	setMotorPWM@m+1,w,c
  4386  000DB6  22DA               	addwfc	fsr2h,f,c
  4387  000DB8  50DF               	movf	indf2,w,c
  4388  000DBA  6E30               	movwf	??_setMotorPWM& (0+255),c
  4389  000DBC  0E01               	movlw	1
  4390  000DBE  6E31               	movwf	(??_setMotorPWM+1)& (0+255),c
  4391  000DC0  2A30               	incf	??_setMotorPWM,f,c
  4392  000DC2  D002               	goto	u1044
  4393  000DC4                     u1045:
  4394  000DC4  90D8               	bcf	status,0,c
  4395  000DC6  3631               	rlcf	??_setMotorPWM+1,f,c
  4396  000DC8                     u1044:
  4397  000DC8  2E30               	decfsz	??_setMotorPWM,f,c
  4398  000DCA  D7FC               	goto	u1045
  4399  000DCC  5031               	movf	??_setMotorPWM+1,w,c
  4400  000DCE  108A               	iorwf	3978,w,c	;volatile
  4401  000DD0  6E8A               	movwf	3978,c	;volatile
  4402                           
  4403                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4404  000DD2  EE20 F007          	lfsr	2,7
  4405  000DD6  502E               	movf	setMotorPWM@m,w,c
  4406  000DD8  26D9               	addwf	fsr2l,f,c
  4407  000DDA  502F               	movf	setMotorPWM@m+1,w,c
  4408  000DDC  22DA               	addwfc	fsr2h,f,c
  4409  000DDE  CFDE F030          	movff	postinc2,??_setMotorPWM
  4410  000DE2  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4411  000DE6  C035  F032         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4412  000DEA  C036  F033         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4413  000DEE  1E32               	comf	??_setMotorPWM+2,f,c
  4414  000DF0  1E33               	comf	??_setMotorPWM+3,f,c
  4415  000DF2  4A32               	infsnz	??_setMotorPWM+2,f,c
  4416  000DF4  2A33               	incf	??_setMotorPWM+3,f,c
  4417  000DF6  5030               	movf	??_setMotorPWM,w,c
  4418  000DF8  2432               	addwf	??_setMotorPWM+2,w,c
  4419  000DFA  6E35               	movwf	setMotorPWM@PWMduty,c
  4420  000DFC  5031               	movf	??_setMotorPWM+1,w,c
  4421  000DFE  2033               	addwfc	??_setMotorPWM+3,w,c
  4422  000E00  6E36               	movwf	setMotorPWM@PWMduty+1,c
  4423                           
  4424                           ;dc_motor.c: 36: }
  4425  000E02  D014               	goto	l136
  4426  000E04                     l1839:
  4427                           
  4428                           ;dc_motor.c: 37: else
  4429                           ;dc_motor.c: 38: {
  4430                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4431  000E04  EE20 F006          	lfsr	2,6
  4432  000E08  502E               	movf	setMotorPWM@m,w,c
  4433  000E0A  26D9               	addwf	fsr2l,f,c
  4434  000E0C  502F               	movf	setMotorPWM@m+1,w,c
  4435  000E0E  22DA               	addwfc	fsr2h,f,c
  4436  000E10  50DF               	movf	indf2,w,c
  4437  000E12  6E30               	movwf	??_setMotorPWM& (0+255),c
  4438  000E14  0E01               	movlw	1
  4439  000E16  6E31               	movwf	(??_setMotorPWM+1)& (0+255),c
  4440  000E18  2A30               	incf	??_setMotorPWM,f,c
  4441  000E1A  D002               	goto	u1054
  4442  000E1C                     u1055:
  4443  000E1C  90D8               	bcf	status,0,c
  4444  000E1E  3631               	rlcf	??_setMotorPWM+1,f,c
  4445  000E20                     u1054:
  4446  000E20  2E30               	decfsz	??_setMotorPWM,f,c
  4447  000E22  D7FC               	goto	u1055
  4448  000E24  5031               	movf	??_setMotorPWM+1,w,c
  4449  000E26  0AFF               	xorlw	255
  4450  000E28  148A               	andwf	3978,w,c	;volatile
  4451  000E2A  6E8A               	movwf	3978,c	;volatile
  4452  000E2C                     l136:
  4453                           
  4454                           ;dc_motor.c: 40: }
  4455                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4456  000E2C  EE20 F002          	lfsr	2,2
  4457  000E30  502E               	movf	setMotorPWM@m,w,c
  4458  000E32  26D9               	addwf	fsr2l,f,c
  4459  000E34  502F               	movf	setMotorPWM@m+1,w,c
  4460  000E36  22DA               	addwfc	fsr2h,f,c
  4461  000E38  CFDE F030          	movff	postinc2,??_setMotorPWM
  4462  000E3C  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4463  000E40  C030  FFD9         	movff	??_setMotorPWM,fsr2l
  4464  000E44  C031  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4465  000E48  4435               	rlncf	setMotorPWM@PWMduty,w,c
  4466  000E4A  46E8               	rlncf	wreg,f,c
  4467  000E4C  0BFC               	andlw	252
  4468  000E4E  6EDF               	movwf	indf2,c
  4469                           
  4470                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4471  000E50  EE20 F004          	lfsr	2,4
  4472  000E54  502E               	movf	setMotorPWM@m,w,c
  4473  000E56  26D9               	addwf	fsr2l,f,c
  4474  000E58  502F               	movf	setMotorPWM@m+1,w,c
  4475  000E5A  22DA               	addwfc	fsr2h,f,c
  4476  000E5C  CFDE F030          	movff	postinc2,??_setMotorPWM
  4477  000E60  CFDD F031          	movff	postdec2,??_setMotorPWM+1
  4478  000E64  C030  FFD9         	movff	??_setMotorPWM,fsr2l
  4479  000E68  C031  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4480  000E6C  C035  F032         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4481  000E70  C036  F033         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4482  000E74  0E06               	movlw	6
  4483  000E76  6E34               	movwf	(??_setMotorPWM+4)& (0+255),c
  4484  000E78                     u1065:
  4485  000E78  3433               	rlcf	??_setMotorPWM+3,w,c
  4486  000E7A  3233               	rrcf	??_setMotorPWM+3,f,c
  4487  000E7C  3232               	rrcf	??_setMotorPWM+2,f,c
  4488  000E7E  2E34               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4489  000E80  D7FB               	goto	u1065
  4490  000E82  5032               	movf	??_setMotorPWM+2,w,c
  4491  000E84  6EDF               	movwf	indf2,c
  4492  000E86  0012               	return		;funcret
  4493  000E88                     __end_of_setMotorPWM:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           prodh	equ	0xFF4
  4497                           prodl	equ	0xFF3
  4498                           intcon	equ	0xFF2
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           indf1	equ	0xFE7
  4502                           fsr1h	equ	0xFE2
  4503                           fsr1l	equ	0xFE1
  4504                           indf2	equ	0xFDF
  4505                           postinc2	equ	0xFDE
  4506                           postdec2	equ	0xFDD
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function ___wmul *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  multiplier      2   31[COMRAM] unsigned int 
  4516 ;;  multiplicand    2   33[COMRAM] unsigned int 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  product         2   35[COMRAM] unsigned int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  2   31[COMRAM] unsigned int 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0, prodl, prodh
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4528 ;;      Params:         4       0       0       0
  4529 ;;      Locals:         2       0       0       0
  4530 ;;      Temps:          0       0       0       0
  4531 ;;      Totals:         6       0       0       0
  4532 ;;Total ram usage:        6 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    2
  4535 ;; This function calls:
  4536 ;;		Nothing
  4537 ;; This function is called by:
  4538 ;;		_setMotorPWM
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text19
  4543  001594                     __ptext19:
  4544                           	opt stack 0
  4545  001594                     ___wmul:
  4546                           	opt stack 26
  4547                           
  4548                           ;incstack = 0
  4549  001594  5020               	movf	___wmul@multiplier,w,c
  4550  001596  0222               	mulwf	___wmul@multiplicand,c
  4551  001598  CFF3 F024          	movff	prodl,___wmul@product
  4552  00159C  CFF4 F025          	movff	prodh,___wmul@product+1
  4553  0015A0  5020               	movf	___wmul@multiplier,w,c
  4554  0015A2  0223               	mulwf	___wmul@multiplicand+1,c
  4555  0015A4  50F3               	movf	prodl,w,c
  4556  0015A6  2625               	addwf	___wmul@product+1,f,c
  4557  0015A8  5021               	movf	___wmul@multiplier+1,w,c
  4558  0015AA  0222               	mulwf	___wmul@multiplicand,c
  4559  0015AC  50F3               	movf	prodl,w,c
  4560  0015AE  2625               	addwf	___wmul@product+1,f,c
  4561  0015B0  C024  F020         	movff	___wmul@product,?___wmul
  4562  0015B4  C025  F021         	movff	___wmul@product+1,?___wmul+1
  4563  0015B8  0012               	return	
  4564  0015BA                     __end_of___wmul:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           intcon	equ	0xFF2
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           indf1	equ	0xFE7
  4573                           fsr1h	equ	0xFE2
  4574                           fsr1l	equ	0xFE1
  4575                           indf2	equ	0xFDF
  4576                           postinc2	equ	0xFDE
  4577                           postdec2	equ	0xFDD
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function ___awdiv *****************
  4583 ;; Defined at:
  4584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  dividend        2   37[COMRAM] int 
  4587 ;;  divisor         2   39[COMRAM] int 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  quotient        2   43[COMRAM] int 
  4590 ;;  sign            1   42[COMRAM] unsigned char 
  4591 ;;  counter         1   41[COMRAM] unsigned char 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  2   37[COMRAM] int 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4601 ;;      Params:         4       0       0       0
  4602 ;;      Locals:         4       0       0       0
  4603 ;;      Temps:          0       0       0       0
  4604 ;;      Totals:         8       0       0       0
  4605 ;;Total ram usage:        8 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    2
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_setMotorPWM
  4612 ;;		_ScanWithRange
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text20
  4617  00114E                     __ptext20:
  4618                           	opt stack 0
  4619  00114E                     ___awdiv:
  4620                           	opt stack 26
  4621                           
  4622                           ;incstack = 0
  4623  00114E  0E00               	movlw	0
  4624  001150  6E2B               	movwf	___awdiv@sign,c
  4625  001152  AE29               	btfss	___awdiv@divisor+1,7,c
  4626  001154  D006               	goto	l1797
  4627  001156  6C28               	negf	___awdiv@divisor,c
  4628  001158  1E29               	comf	___awdiv@divisor+1,f,c
  4629  00115A  B0D8               	btfsc	status,0,c
  4630  00115C  2A29               	incf	___awdiv@divisor+1,f,c
  4631  00115E  0E01               	movlw	1
  4632  001160  6E2B               	movwf	___awdiv@sign,c
  4633  001162                     l1797:
  4634  001162  AE27               	btfss	___awdiv@dividend+1,7,c
  4635  001164  D006               	goto	l1803
  4636  001166  6C26               	negf	___awdiv@dividend,c
  4637  001168  1E27               	comf	___awdiv@dividend+1,f,c
  4638  00116A  B0D8               	btfsc	status,0,c
  4639  00116C  2A27               	incf	___awdiv@dividend+1,f,c
  4640  00116E  0E01               	movlw	1
  4641  001170  1A2B               	xorwf	___awdiv@sign,f,c
  4642  001172                     l1803:
  4643  001172  0E00               	movlw	0
  4644  001174  6E2D               	movwf	___awdiv@quotient+1,c
  4645  001176  0E00               	movlw	0
  4646  001178  6E2C               	movwf	___awdiv@quotient,c
  4647  00117A  5028               	movf	___awdiv@divisor,w,c
  4648  00117C  1029               	iorwf	___awdiv@divisor+1,w,c
  4649  00117E  B4D8               	btfsc	status,2,c
  4650  001180  D01C               	goto	l1825
  4651  001182  0E01               	movlw	1
  4652  001184  6E2A               	movwf	___awdiv@counter,c
  4653  001186  D004               	goto	l1811
  4654  001188                     l1809:
  4655  001188  90D8               	bcf	status,0,c
  4656  00118A  3628               	rlcf	___awdiv@divisor,f,c
  4657  00118C  3629               	rlcf	___awdiv@divisor+1,f,c
  4658  00118E  2A2A               	incf	___awdiv@counter,f,c
  4659  001190                     l1811:
  4660  001190  AE29               	btfss	___awdiv@divisor+1,7,c
  4661  001192  D7FA               	goto	l1809
  4662  001194                     l1813:
  4663  001194  90D8               	bcf	status,0,c
  4664  001196  362C               	rlcf	___awdiv@quotient,f,c
  4665  001198  362D               	rlcf	___awdiv@quotient+1,f,c
  4666  00119A  5028               	movf	___awdiv@divisor,w,c
  4667  00119C  5C26               	subwf	___awdiv@dividend,w,c
  4668  00119E  5029               	movf	___awdiv@divisor+1,w,c
  4669  0011A0  5827               	subwfb	___awdiv@dividend+1,w,c
  4670  0011A2  A0D8               	btfss	status,0,c
  4671  0011A4  D005               	goto	l1821
  4672  0011A6  5028               	movf	___awdiv@divisor,w,c
  4673  0011A8  5E26               	subwf	___awdiv@dividend,f,c
  4674  0011AA  5029               	movf	___awdiv@divisor+1,w,c
  4675  0011AC  5A27               	subwfb	___awdiv@dividend+1,f,c
  4676  0011AE  802C               	bsf	___awdiv@quotient,0,c
  4677  0011B0                     l1821:
  4678  0011B0  90D8               	bcf	status,0,c
  4679  0011B2  3229               	rrcf	___awdiv@divisor+1,f,c
  4680  0011B4  3228               	rrcf	___awdiv@divisor,f,c
  4681  0011B6  2E2A               	decfsz	___awdiv@counter,f,c
  4682  0011B8  D7ED               	goto	l1813
  4683  0011BA                     l1825:
  4684  0011BA  502B               	movf	___awdiv@sign,w,c
  4685  0011BC  B4D8               	btfsc	status,2,c
  4686  0011BE  D004               	goto	l1829
  4687  0011C0  6C2C               	negf	___awdiv@quotient,c
  4688  0011C2  1E2D               	comf	___awdiv@quotient+1,f,c
  4689  0011C4  B0D8               	btfsc	status,0,c
  4690  0011C6  2A2D               	incf	___awdiv@quotient+1,f,c
  4691  0011C8                     l1829:
  4692  0011C8  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  4693  0011CC  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  4694  0011D0  0012               	return	
  4695  0011D2                     __end_of___awdiv:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           indf1	equ	0xFE7
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _grabRightIR *****************
  4714 ;; Defined at:
  4715 ;;		line 74 in file "IR_Reading.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  IR_signal       2   36[COMRAM] unsigned int 
  4720 ;;  i               1   38[COMRAM] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  2   31[COMRAM] unsigned int 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4730 ;;      Params:         2       0       0       0
  4731 ;;      Locals:         3       0       0       0
  4732 ;;      Temps:          3       0       0       0
  4733 ;;      Totals:         8       0       0       0
  4734 ;;Total ram usage:        8 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    2
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_ScanIR
  4741 ;;		_ScanWithRange
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text21
  4746  001248                     __ptext21:
  4747                           	opt stack 0
  4748  001248                     _grabRightIR:
  4749                           	opt stack 27
  4750                           
  4751                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4752                           
  4753                           ;incstack = 0
  4754  001248  0E00               	movlw	0
  4755  00124A  6E26               	movwf	grabRightIR@IR_signal+1,c
  4756  00124C  0E00               	movlw	0
  4757  00124E  6E25               	movwf	grabRightIR@IR_signal,c
  4758                           
  4759                           ;IR_Reading.c: 77: unsigned char i=0;
  4760  001250  0E00               	movlw	0
  4761  001252  6E27               	movwf	grabRightIR@i,c
  4762                           
  4763                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4764  001254  0E00               	movlw	0
  4765  001256  6E27               	movwf	grabRightIR@i,c
  4766  001258                     l1939:
  4767  001258  0E03               	movlw	3
  4768  00125A  6427               	cpfsgt	grabRightIR@i,c
  4769  00125C  D001               	goto	l1943
  4770  00125E  D01E               	goto	l1949
  4771  001260                     l1943:
  4772                           
  4773                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  4774  001260  5069               	movf	3945,w,c	;volatile
  4775  001262  6E22               	movwf	??_grabRightIR& (0+255),c
  4776  001264  6A23               	clrf	(??_grabRightIR+1)& (0+255),c
  4777  001266  0E07               	movlw	7
  4778  001268                     u1285:
  4779  001268  90D8               	bcf	status,0,c
  4780  00126A  3622               	rlcf	??_grabRightIR,f,c
  4781  00126C  3623               	rlcf	??_grabRightIR+1,f,c
  4782  00126E  2EE8               	decfsz	wreg,f,c
  4783  001270  D7FB               	goto	u1285
  4784  001272  CF68 F024          	movff	3944,??_grabRightIR+2	;volatile
  4785  001276  90D8               	bcf	status,0,c
  4786  001278  3224               	rrcf	??_grabRightIR+2,f,c
  4787  00127A  5024               	movf	??_grabRightIR+2,w,c
  4788  00127C  1222               	iorwf	??_grabRightIR,f,c
  4789  00127E  0E00               	movlw	0
  4790  001280  1223               	iorwf	??_grabRightIR+1,f,c
  4791  001282  5022               	movf	??_grabRightIR,w,c
  4792  001284  2625               	addwf	grabRightIR@IR_signal,f,c
  4793  001286  5023               	movf	??_grabRightIR+1,w,c
  4794  001288  2226               	addwfc	grabRightIR@IR_signal+1,f,c
  4795                           
  4796                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4797  00128A  0E82               	movlw	130
  4798  00128C  6E22               	movwf	??_grabRightIR& (0+255),c
  4799  00128E  0EDE               	movlw	222
  4800  001290                     u2517:
  4801  001290  2EE8               	decfsz	wreg,f,c
  4802  001292  D7FE               	goto	u2517
  4803  001294  2E22               	decfsz	??_grabRightIR& (0+255),f,c
  4804  001296  D7FC               	goto	u2517
  4805  001298  2A27               	incf	grabRightIR@i,f,c
  4806  00129A  D7DE               	goto	l1939
  4807  00129C                     l1949:
  4808                           
  4809                           ;IR_Reading.c: 83: }
  4810                           ;IR_Reading.c: 85: return IR_signal>>2;
  4811  00129C  C025  F022         	movff	grabRightIR@IR_signal,??_grabRightIR
  4812  0012A0  C026  F023         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4813  0012A4  90D8               	bcf	status,0,c
  4814  0012A6  3223               	rrcf	??_grabRightIR+1,f,c
  4815  0012A8  3222               	rrcf	??_grabRightIR,f,c
  4816  0012AA  90D8               	bcf	status,0,c
  4817  0012AC  3223               	rrcf	??_grabRightIR+1,f,c
  4818  0012AE  3222               	rrcf	??_grabRightIR,f,c
  4819  0012B0  C022  F020         	movff	??_grabRightIR,?_grabRightIR
  4820  0012B4  C023  F021         	movff	??_grabRightIR+1,?_grabRightIR+1
  4821  0012B8  0012               	return	
  4822  0012BA                     __end_of_grabRightIR:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _grabLeftIR *****************
  4841 ;; Defined at:
  4842 ;;		line 90 in file "IR_Reading.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;		None
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  IR_signal       2   36[COMRAM] unsigned int 
  4847 ;;  i               1   38[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  2   31[COMRAM] unsigned int 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4857 ;;      Params:         2       0       0       0
  4858 ;;      Locals:         3       0       0       0
  4859 ;;      Temps:          3       0       0       0
  4860 ;;      Totals:         8       0       0       0
  4861 ;;Total ram usage:        8 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    2
  4864 ;; This function calls:
  4865 ;;		Nothing
  4866 ;; This function is called by:
  4867 ;;		_ScanIR
  4868 ;;		_ScanWithRange
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text22
  4873  0012BA                     __ptext22:
  4874                           	opt stack 0
  4875  0012BA                     _grabLeftIR:
  4876                           	opt stack 27
  4877                           
  4878                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  4879                           
  4880                           ;incstack = 0
  4881  0012BA  0E00               	movlw	0
  4882  0012BC  6E26               	movwf	grabLeftIR@IR_signal+1,c
  4883  0012BE  0E00               	movlw	0
  4884  0012C0  6E25               	movwf	grabLeftIR@IR_signal,c
  4885                           
  4886                           ;IR_Reading.c: 93: unsigned char i=0;
  4887  0012C2  0E00               	movlw	0
  4888  0012C4  6E27               	movwf	grabLeftIR@i,c
  4889                           
  4890                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  4891  0012C6  0E00               	movlw	0
  4892  0012C8  6E27               	movwf	grabLeftIR@i,c
  4893  0012CA                     l1923:
  4894  0012CA  0E03               	movlw	3
  4895  0012CC  6427               	cpfsgt	grabLeftIR@i,c
  4896  0012CE  D001               	goto	l1927
  4897  0012D0  D01E               	goto	l1933
  4898  0012D2                     l1927:
  4899                           
  4900                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  4901  0012D2  5067               	movf	3943,w,c	;volatile
  4902  0012D4  6E22               	movwf	??_grabLeftIR& (0+255),c
  4903  0012D6  6A23               	clrf	(??_grabLeftIR+1)& (0+255),c
  4904  0012D8  0E07               	movlw	7
  4905  0012DA                     u1255:
  4906  0012DA  90D8               	bcf	status,0,c
  4907  0012DC  3622               	rlcf	??_grabLeftIR,f,c
  4908  0012DE  3623               	rlcf	??_grabLeftIR+1,f,c
  4909  0012E0  2EE8               	decfsz	wreg,f,c
  4910  0012E2  D7FB               	goto	u1255
  4911  0012E4  CF66 F024          	movff	3942,??_grabLeftIR+2	;volatile
  4912  0012E8  90D8               	bcf	status,0,c
  4913  0012EA  3224               	rrcf	??_grabLeftIR+2,f,c
  4914  0012EC  5024               	movf	??_grabLeftIR+2,w,c
  4915  0012EE  1222               	iorwf	??_grabLeftIR,f,c
  4916  0012F0  0E00               	movlw	0
  4917  0012F2  1223               	iorwf	??_grabLeftIR+1,f,c
  4918  0012F4  5022               	movf	??_grabLeftIR,w,c
  4919  0012F6  2625               	addwf	grabLeftIR@IR_signal,f,c
  4920  0012F8  5023               	movf	??_grabLeftIR+1,w,c
  4921  0012FA  2226               	addwfc	grabLeftIR@IR_signal+1,f,c
  4922                           
  4923                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  4924  0012FC  0E82               	movlw	130
  4925  0012FE  6E22               	movwf	??_grabLeftIR& (0+255),c
  4926  001300  0EDE               	movlw	222
  4927  001302                     u2527:
  4928  001302  2EE8               	decfsz	wreg,f,c
  4929  001304  D7FE               	goto	u2527
  4930  001306  2E22               	decfsz	??_grabLeftIR& (0+255),f,c
  4931  001308  D7FC               	goto	u2527
  4932  00130A  2A27               	incf	grabLeftIR@i,f,c
  4933  00130C  D7DE               	goto	l1923
  4934  00130E                     l1933:
  4935                           
  4936                           ;IR_Reading.c: 99: }
  4937                           ;IR_Reading.c: 101: return IR_signal>>2;
  4938  00130E  C025  F022         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  4939  001312  C026  F023         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  4940  001316  90D8               	bcf	status,0,c
  4941  001318  3223               	rrcf	??_grabLeftIR+1,f,c
  4942  00131A  3222               	rrcf	??_grabLeftIR,f,c
  4943  00131C  90D8               	bcf	status,0,c
  4944  00131E  3223               	rrcf	??_grabLeftIR+1,f,c
  4945  001320  3222               	rrcf	??_grabLeftIR,f,c
  4946  001322  C022  F020         	movff	??_grabLeftIR,?_grabLeftIR
  4947  001326  C023  F021         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  4948  00132A  0012               	return	
  4949  00132C                     __end_of_grabLeftIR:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           indf1	equ	0xFE7
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _delay_tenth_s *****************
  4968 ;; Defined at:
  4969 ;;		line 19 in file "Movement.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  tenth_second    1    wreg     unsigned char 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  tenth_second    1   32[COMRAM] unsigned char 
  4974 ;;  i               2   33[COMRAM] unsigned int 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4984 ;;      Params:         0       0       0       0
  4985 ;;      Locals:         3       0       0       0
  4986 ;;      Temps:          1       0       0       0
  4987 ;;      Totals:         4       0       0       0
  4988 ;;Total ram usage:        4 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    2
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_main
  4995 ;;		_ScanIR
  4996 ;;		_ScanWithRange
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text23
  5001  0014AA                     __ptext23:
  5002                           	opt stack 0
  5003  0014AA                     _delay_tenth_s:
  5004                           	opt stack 28
  5005                           
  5006                           ;incstack = 0
  5007                           ;delay_tenth_s@tenth_seconds stored from wreg
  5008  0014AA  6E21               	movwf	delay_tenth_s@tenth_seconds,c
  5009                           
  5010                           ;Movement.c: 20: unsigned int i=0;
  5011  0014AC  0E00               	movlw	0
  5012  0014AE  6E23               	movwf	delay_tenth_s@i+1,c
  5013  0014B0  0E00               	movlw	0
  5014  0014B2  6E22               	movwf	delay_tenth_s@i,c
  5015                           
  5016                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  5017  0014B4  0E00               	movlw	0
  5018  0014B6  6E23               	movwf	delay_tenth_s@i+1,c
  5019  0014B8  0E01               	movlw	1
  5020  0014BA  6E22               	movwf	delay_tenth_s@i,c
  5021  0014BC  D009               	goto	l1899
  5022  0014BE                     l1895:
  5023                           
  5024                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  5025  0014BE  0E82               	movlw	130
  5026  0014C0  6E20               	movwf	??_delay_tenth_s& (0+255),c
  5027  0014C2  0EDE               	movlw	222
  5028  0014C4                     u2537:
  5029  0014C4  2EE8               	decfsz	wreg,f,c
  5030  0014C6  D7FE               	goto	u2537
  5031  0014C8  2E20               	decfsz	??_delay_tenth_s& (0+255),f,c
  5032  0014CA  D7FC               	goto	u2537
  5033  0014CC  4A22               	infsnz	delay_tenth_s@i,f,c
  5034  0014CE  2A23               	incf	delay_tenth_s@i+1,f,c
  5035  0014D0                     l1899:
  5036  0014D0  5021               	movf	delay_tenth_s@tenth_seconds,w,c
  5037  0014D2  0D02               	mullw	2
  5038  0014D4  5022               	movf	delay_tenth_s@i,w,c
  5039  0014D6  5CF3               	subwf	prodl,w,c
  5040  0014D8  5023               	movf	delay_tenth_s@i+1,w,c
  5041  0014DA  58F4               	subwfb	prodh,w,c
  5042  0014DC  A0D8               	btfss	status,0,c
  5043  0014DE  0012               	return	
  5044  0014E0  D7EE               	goto	l1895
  5045  0014E2                     __end_of_delay_tenth_s:
  5046                           	opt stack 0
  5047                           tblptru	equ	0xFF8
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           intcon	equ	0xFF2
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           indf1	equ	0xFE7
  5054                           fsr1h	equ	0xFE2
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function _InterruptHandlerLow *****************
  5064 ;; Defined at:
  5065 ;;		line 18 in file "main.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;		None               void
  5072 ;; Registers used:
  5073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5079 ;;      Params:         0       0       0       0
  5080 ;;      Locals:         0       0       0       0
  5081 ;;      Temps:         17       0       0       0
  5082 ;;      Totals:        17       0       0       0
  5083 ;;Total ram usage:       17 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    1
  5086 ;; This function calls:
  5087 ;;		Nothing
  5088 ;; This function is called by:
  5089 ;;		Interrupt level 1
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	intcodelo
  5094  000018                     __pintcodelo:
  5095                           	opt stack 0
  5096  000018                     _InterruptHandlerLow:
  5097                           	opt stack 24
  5098                           
  5099                           ;incstack = 0
  5100  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5101  00001A  CFD8 F00F          	movff	status,??_InterruptHandlerLow
  5102  00001E  CFE8 F010          	movff	wreg,??_InterruptHandlerLow+1
  5103  000022  CFE0 F011          	movff	bsr,??_InterruptHandlerLow+2
  5104  000026  CFFA F012          	movff	pclath,??_InterruptHandlerLow+3
  5105  00002A  CFFB F013          	movff	pclatu,??_InterruptHandlerLow+4
  5106  00002E  CFE9 F014          	movff	fsr0l,??_InterruptHandlerLow+5
  5107  000032  CFEA F015          	movff	fsr0h,??_InterruptHandlerLow+6
  5108  000036  CFE1 F016          	movff	fsr1l,??_InterruptHandlerLow+7
  5109  00003A  CFE2 F017          	movff	fsr1h,??_InterruptHandlerLow+8
  5110  00003E  CFD9 F018          	movff	fsr2l,??_InterruptHandlerLow+9
  5111  000042  CFDA F019          	movff	fsr2h,??_InterruptHandlerLow+10
  5112  000046  CFF3 F01A          	movff	prodl,??_InterruptHandlerLow+11
  5113  00004A  CFF4 F01B          	movff	prodh,??_InterruptHandlerLow+12
  5114  00004E  CFF6 F01C          	movff	tblptrl,??_InterruptHandlerLow+13
  5115  000052  CFF7 F01D          	movff	tblptrh,??_InterruptHandlerLow+14
  5116  000056  CFF8 F01E          	movff	tblptru,??_InterruptHandlerLow+15
  5117  00005A  CFF5 F01F          	movff	tablat,??_InterruptHandlerLow+16
  5118                           
  5119                           ;main.c: 20: if (PIR1bits.RCIF) {
  5120  00005E  AA9E               	btfss	3998,5,c	;volatile
  5121  000060  D016               	goto	i1l66
  5122                           
  5123                           ;main.c: 21: ReceivedString[i]=RCREG;
  5124  000062  503E               	movf	_i,w,c	;volatile
  5125  000064  0D01               	mullw	1
  5126  000066  0EEA               	movlw	low _ReceivedString
  5127  000068  24F3               	addwf	prodl,w,c
  5128  00006A  6ED9               	movwf	fsr2l,c
  5129  00006C  0E01               	movlw	high _ReceivedString
  5130  00006E  20F4               	addwfc	prodh,w,c
  5131  000070  6EDA               	movwf	fsr2h,c
  5132  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  5133                           
  5134                           ;main.c: 22: RFID_Read=1;
  5135  000076  0E01               	movlw	1
  5136  000078  0101               	movlb	1	; () banked
  5137  00007A  6FE9               	movwf	_RFID_Read& (0+255),b	;volatile
  5138                           
  5139                           ; BSR set to: 1
  5140                           ;main.c: 23: if (i==15){
  5141  00007C  0E0F               	movlw	15
  5142  00007E  183E               	xorwf	_i,w,c	;volatile
  5143  000080  A4D8               	btfss	status,2,c
  5144  000082  D003               	goto	i1l2367
  5145                           
  5146                           ; BSR set to: 1
  5147                           ;main.c: 24: i=0;
  5148  000084  0E00               	movlw	0
  5149  000086  6E3E               	movwf	_i,c	;volatile
  5150                           
  5151                           ;main.c: 25: }else{
  5152  000088  D001               	goto	i1l2369
  5153  00008A                     i1l2367:
  5154                           
  5155                           ; BSR set to: 1
  5156                           ;main.c: 26: i++;
  5157  00008A  2A3E               	incf	_i,f,c	;volatile
  5158  00008C                     i1l2369:
  5159                           
  5160                           ; BSR set to: 1
  5161                           ;main.c: 27: }
  5162                           ;main.c: 28: PIR1bits.RCIF=0;
  5163  00008C  9A9E               	bcf	3998,5,c	;volatile
  5164  00008E                     i1l66:
  5165  00008E  C01F  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  5166  000092  C01E  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  5167  000096  C01D  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  5168  00009A  C01C  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  5169  00009E  C01B  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  5170  0000A2  C01A  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  5171  0000A6  C019  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  5172  0000AA  C018  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  5173  0000AE  C017  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  5174  0000B2  C016  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  5175  0000B6  C015  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  5176  0000BA  C014  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  5177  0000BE  C013  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  5178  0000C2  C012  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  5179  0000C6  C011  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  5180  0000CA  C010  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  5181  0000CE  C00F  FFD8         	movff	??_InterruptHandlerLow,status
  5182  0000D2  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5183  0000D4  0010               	retfie	
  5184  0000D6                     __end_of_InterruptHandlerLow:
  5185                           	opt stack 0
  5186                           pclatu	equ	0xFFB
  5187                           pclath	equ	0xFFA
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           fsr0h	equ	0xFEA
  5197                           fsr0l	equ	0xFE9
  5198                           wreg	equ	0xFE8
  5199                           indf1	equ	0xFE7
  5200                           fsr1h	equ	0xFE2
  5201                           fsr1l	equ	0xFE1
  5202                           bsr	equ	0xFE0
  5203                           indf2	equ	0xFDF
  5204                           postinc2	equ	0xFDE
  5205                           postdec2	equ	0xFDD
  5206                           fsr2h	equ	0xFDA
  5207                           fsr2l	equ	0xFD9
  5208                           status	equ	0xFD8
  5209                           
  5210 ;; *************** function _InterruptHandlerHigh *****************
  5211 ;; Defined at:
  5212 ;;		line 34 in file "main.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;		None               void
  5219 ;; Registers used:
  5220 ;;		wreg, status,2
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5226 ;;      Params:         0       0       0       0
  5227 ;;      Locals:         0       0       0       0
  5228 ;;      Temps:         14       0       0       0
  5229 ;;      Totals:        14       0       0       0
  5230 ;;Total ram usage:       14 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; This function calls:
  5233 ;;		Nothing
  5234 ;; This function is called by:
  5235 ;;		Interrupt level 2
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	intcode
  5240  000008                     __pintcode:
  5241                           	opt stack 0
  5242  000008                     _InterruptHandlerHigh:
  5243                           	opt stack 24
  5244                           
  5245                           ;incstack = 0
  5246  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5247  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  5248  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  5249  000012  EFE9  F008         	goto	int_func
  5250                           pclatu	equ	0xFFB
  5251                           pclath	equ	0xFFA
  5252                           tblptru	equ	0xFF8
  5253                           tblptrh	equ	0xFF7
  5254                           tblptrl	equ	0xFF6
  5255                           tablat	equ	0xFF5
  5256                           prodh	equ	0xFF4
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           indf1	equ	0xFE7
  5264                           fsr1h	equ	0xFE2
  5265                           fsr1l	equ	0xFE1
  5266                           bsr	equ	0xFE0
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274                           	psect	intcode_body
  5275  0011D2                     __pintcode_body:
  5276                           	opt stack 24
  5277  0011D2                     int_func:
  5278                           	opt stack 24
  5279  0011D2  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  5280  0011D6  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  5281  0011DA  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  5282  0011DE  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  5283  0011E2  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  5284  0011E6  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  5285  0011EA  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  5286  0011EE  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  5287  0011F2  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  5288  0011F6  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  5289  0011FA  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  5290  0011FE  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  5291                           
  5292                           ;main.c: 35: if (INTCONbits.INT0IF) {
  5293  001202  A2F2               	btfss	intcon,1,c	;volatile
  5294  001204  D003               	goto	i2l70
  5295                           
  5296                           ;main.c: 36: start=1;
  5297  001206  0E01               	movlw	1
  5298  001208  6E3F               	movwf	_start,c	;volatile
  5299                           
  5300                           ;main.c: 37: INTCONbits.INT0IF=0;
  5301  00120A  92F2               	bcf	intcon,1,c	;volatile
  5302  00120C                     i2l70:
  5303  00120C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  5304  001210  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  5305  001214  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  5306  001218  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  5307  00121C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  5308  001220  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  5309  001224  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  5310  001228  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  5311  00122C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  5312  001230  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  5313  001234  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  5314  001238  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  5315  00123C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  5316  001240  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  5317  001244  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5318  001246  0011               	retfie		f
  5319  001248                     __end_of_InterruptHandlerHigh:
  5320                           	opt stack 0
  5321  0000                     pclatu	equ	0xFFB
  5322                           pclath	equ	0xFFA
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           intcon	equ	0xFF2
  5330                           postinc0	equ	0xFEE
  5331                           fsr0h	equ	0xFEA
  5332                           fsr0l	equ	0xFE9
  5333                           wreg	equ	0xFE8
  5334                           indf1	equ	0xFE7
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           bsr	equ	0xFE0
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           postdec2	equ	0xFDD
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           pclatu	equ	0xFFB
  5345                           pclath	equ	0xFFA
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           postinc0	equ	0xFEE
  5354                           fsr0h	equ	0xFEA
  5355                           fsr0l	equ	0xFE9
  5356                           wreg	equ	0xFE8
  5357                           indf1	equ	0xFE7
  5358                           fsr1h	equ	0xFE2
  5359                           fsr1l	equ	0xFE1
  5360                           bsr	equ	0xFE0
  5361                           indf2	equ	0xFDF
  5362                           postinc2	equ	0xFDE
  5363                           postdec2	equ	0xFDD
  5364                           fsr2h	equ	0xFDA
  5365                           fsr2l	equ	0xFD9
  5366                           status	equ	0xFD8
  5367                           
  5368                           	psect	rparam
  5369  0000                     pclatu	equ	0xFFB
  5370                           pclath	equ	0xFFA
  5371                           tblptru	equ	0xFF8
  5372                           tblptrh	equ	0xFF7
  5373                           tblptrl	equ	0xFF6
  5374                           tablat	equ	0xFF5
  5375                           prodh	equ	0xFF4
  5376                           prodl	equ	0xFF3
  5377                           intcon	equ	0xFF2
  5378                           postinc0	equ	0xFEE
  5379                           fsr0h	equ	0xFEA
  5380                           fsr0l	equ	0xFE9
  5381                           wreg	equ	0xFE8
  5382                           indf1	equ	0xFE7
  5383                           fsr1h	equ	0xFE2
  5384                           fsr1l	equ	0xFE1
  5385                           bsr	equ	0xFE0
  5386                           indf2	equ	0xFDF
  5387                           postinc2	equ	0xFDE
  5388                           postdec2	equ	0xFDD
  5389                           fsr2h	equ	0xFDA
  5390                           fsr2l	equ	0xFD9
  5391                           status	equ	0xFD8
  5392                           
  5393                           	psect	temp
  5394  000040                     btemp:
  5395                           	opt stack 0
  5396  000040                     	ds	1
  5397  0000                     int$flags	set	btemp
  5398                           pclatu	equ	0xFFB
  5399                           pclath	equ	0xFFA
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           intcon	equ	0xFF2
  5407                           postinc0	equ	0xFEE
  5408                           fsr0h	equ	0xFEA
  5409                           fsr0l	equ	0xFE9
  5410                           wreg	equ	0xFE8
  5411                           indf1	equ	0xFE7
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           bsr	equ	0xFE0
  5415                           indf2	equ	0xFDF
  5416                           postinc2	equ	0xFDE
  5417                           postdec2	equ	0xFDD
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      63
    BANK0           160     34      50
    BANK1           256    233     250
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S345DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S345DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_ScanWithRange
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               235   235      0   70413
                                             32 BANK0      2     2      0
                                              0 BANK1    233   233      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             37 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             35 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             31 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3291
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             31 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             31 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             31 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       30    23      7   29581
                                             59 COMRAM     2     2      0
                                              4 BANK0     28    21      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   25849
                                             59 COMRAM     2     2      0
                                              4 BANK0     14    10      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8996
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    9766
                                              0 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    5335
                                             54 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2859
                                             54 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1787
                                             45 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     253
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     906
                                             37 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             31 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             31 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             31 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E9      FA       7       97.7%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     22      32       4       31.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      3F       1       67.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16B       5        0.0%
DATA                 0      0     16B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 16:34:06 2018

                        ?_grabRightIR 0020                                     _i 003E  
                                  l73 0814                          ___awdiv@sign 002B  
                                  bsr 000FE0                   ___wmul@multiplicand 0022  
                         main@Message 01C8                                   l136 0E2C  
                                 l166 137E                           grabLeftIR@i 0027  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 0164                          main@MoveType 0100  
                                l2023 1498                                  l2033 1582  
                                l2019 1486                                  l2341 1062  
                                l2353 10BA                                  l2345 106A  
                                l1811 1190                                  l1803 1172  
                                l1821 11B0                                  l1813 1194  
                                l2703 059E                                  l2623 02C6  
                                l1809 1188                                  l1825 11BA  
                                l2713 05F8                                  l1923 12CA  
                                l2811 0C5A                                  l2651 03F6  
                                l2643 0372                                  l2627 0304  
                                l2619 0288                                  l1933 130E  
                                l1829 11C8                                  l1853 1346  
                                l2805 0C56                                  l1927 12D2  
                                l1943 1260                                  l1839 0E04  
                                l1871 10D8                                  l2823 0CB2  
                                l2735 0650                                  l2719 05FC  
                                l1857 135E                                  l1849 132E  
                                l1881 1110                                  l2833 0D08  
                                l2753 06EA                                  l2673 04C4  
                                l2665 0440                                  l1939 1258  
                                l1875 10F0                                  l1867 10C0  
                                l2851 0D50                                  l2747 06E6  
                                l2659 043C                                  l2923 0924  
                                l2931 095E                                  l1949 129C  
                                l1797 1162                                  l2909 08A6  
                                l1895 14BE                                  l2839 0D0C  
                                l2791 0BFC                                  l2695 0588  
                                l2687 0504                                  l2935 097A  
                                l2927 094E                                  l2919 08E2  
                                l2769 0772                                  l2961 0A34  
                                l2945 09DA                                  l1899 14D0  
                                l2955 0A24                                  l2797 0C00  
                                l2957 0A2A                                  l2949 09E4  
                                l2885 081A                                  l2983 0ACC  
                                l2967 0A50                                  l2969 0A58  
                                l2977 0AA4                                  l2987 0AE0  
                                u1044 0DC8                                  u1045 0DC4  
                                u1205 0EFA                                  u1054 0E20  
                                u1055 0E1C                                  u1215 0F2A  
                                u1065 0E78                                  u1155 0E92  
                                u1235 151E                                  u1236 1520  
                                u1325 157E                                  u1165 0EA0  
                                u1326 1580                                  _LATB 000F8A  
                                u1255 12DA                                  u1175 0EBE  
                                u1345 1590                                  u1185 0ECC  
                                u1346 1592                                  u1195 0EEC  
                                u2260 09A4                                  u1285 1268  
                                u2270 09B8                                  u2262 09A6  
                                u2407 0FC6                                  u2272 09BA  
                                u2417 0FDC                                  u2507 1378  
                                u2427 0FF0                                  u2347 0F60  
                                u2517 1290                                  u2437 1002  
                                u2357 0F76                                  u2527 1302  
                                u2447 152C                                  u2367 0F86  
                                u2537 14C4                                  u2457 153C  
                                u2377 0F94                                  u2467 0F46  
                                u2387 0FA2                                  u2477 15FC  
                                u2397 0FB4                                  u2487 148C  
                                u2497 110A                                  i1l66 008E  
                                i2l70 120C                                  _main 0776  
                       main@ScanAngle 01D2                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0040  
                                _stop 10BE                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                        delay_s@seconds 0021  
                        ___param_bank 000010                       __end_of_SendLCD 1544  
                  ScanWithRange@F3721 008A                    ScanWithRange@F3723 008E  
                  ScanWithRange@F3719 0086                           ScanIR@F3710 0082  
                               ?_main 0001                       __end_of___awdiv 11D2  
                               ?_stop 0037                       ___awdiv@divisor 0028  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0027  
                     ___awdiv@counter 002A                                 _RCREG 000FAE  
                               _E_TOG 15F8                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 14AA                       __end_of_initLCD 100A  
                               _start 003F                                 main@i 01D6  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 069C                       __initialization 1544  
                        __end_of_main 0AFE                          __end_of_stop 114E  
                      delay_tenth_s@i 0022                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 1594                   VerifySignal@hexByte 0029  
                              ??_main 0080                                ??_stop 003B  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 002E  
              __size_of_fullSpeedBack 003A                      ___awdiv@dividend 0026  
                              i1l2367 008A                                i1l2369 008C  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 14E2  
                              _LCDout 0E88                           SendLCD@Byte 0025  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                         SendLCD@type 0024                             ??_SendLCD 0025  
                              _ScanIR 0AFE                                ___wmul 1594  
                           ??___awdiv 002A                      __end_of_initRFID 15F8  
                              _initIR 15BA                  __size_of_grabRightIR 0072  
                              clear_0 154A                                clear_1 1556  
                    ___awdiv@quotient 002C                             ??_delay_s 0020  
                              main@mL 01D7                                main@mR 01E0  
                      ??_initMotorPWM 0020                             ??_initLCD 0026  
                       _ScanWithRange 00DA                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0037                                stop@mR 0039  
                    __end_of_turnLeft 1438                       fullSpeedBack@mL 0060  
                     fullSpeedBack@mR 0062                            __accesstop 0060  
             __end_of__initialization 1560                         ___rparam_used 000001  
                       __end_of_E_TOG 1606                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1438                        ?_ScanWithRange 0064  
                VerifySignal@checksum 0028                               ??_E_TOG 0020  
       __size_of_InterruptHandlerHigh 1240           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0021                            __pbssBANK0 0082  
                          __pbssBANK1 01E9                               ?_LCDout 0001  
                             ?_ScanIR 0064                        ?_fullSpeedBack 0060  
               __size_of_enableSensor 0026                               ?___wmul 0020  
                 grabLeftIR@IR_signal 0025                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 12BA  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 0134  
                     __size_of_LCDout 00C6                          _enableSensor 156E  
                  __size_of_turnRight 004E                  __end_of_initMotorPWM 1514  
                             _SendLCD 1514                               __Hparam 0000  
                             __Lparam 0000                       __size_of_ScanIR 0256  
                             ___awdiv 114E                       __size_of___wmul 0026  
                     __size_of_initIR 0022                               __pcinit 1544  
                     ??_ScanWithRange 003C                               _delay_s 1472  
                             __ramtop 0300                             ?_turnLeft 0060  
                             __ptext0 0776                               __ptext1 15DC  
                             __ptext2 14E2                               __ptext3 0F4E  
                             __ptext4 1514                               __ptext5 0E88  
                             __ptext6 15F8                               __ptext7 15BA  
                             __ptext8 1438                               __ptext9 156E  
                             _initLCD 0F4E                          LCDout@number 0023  
                       ?_VerifySignal 0020                        __pintcode_body 11D2  
                end_of_initialization 1560                    setMotorPWM@PWMduty 0035  
                          ??_initRFID 0020                         __Lmediumconst 0000  
                             int_func 11D2                    ScanIR@SensorResult 006E  
                     ??_fullSpeedBack 003C                             _RFID_Read 01E9  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003C                     __end_of_turnRight 13EA  
                         ?_grabLeftIR 0020                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0022                      fullSpeedAhead@mL 0037  
                    fullSpeedAhead@mR 0039         ScanIR@DirectionFoundTolerance 006C  
                      __end_of_LCDout 0F4E                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0022                        __end_of_ScanIR 0D54  
                      _fullSpeedAhead 132C                        _ReceivedString 01EA  
                      __end_of___wmul 15BA                           _BAUDCONbits 000FAA  
                      __end_of_initIR 15DC                __size_of_delay_tenth_s 0038  
                 start_initialization 1544                    VerifySignal@Signal 0020  
               __size_of_initMotorPWM 0032                              ??_LCDout 0020  
        __end_of_InterruptHandlerHigh 1248                              ??_ScanIR 003C  
              __end_of_fullSpeedAhead 139C                   __size_of_grabLeftIR 0072  
                            ??___wmul 0024                              ??_initIR 0020  
                 __end_of_grabRightIR 12BA                          _initMotorPWM 14E2  
                         __pbssCOMRAM 003E                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100      ScanWithRange@DirectionFoundLimit 0070  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 14AA  
                   __size_of_initRFID 001C     ScanWithRange@ClearSignalTolerance 006E  
                            ?_SendLCD 0024                       ?_fullSpeedAhead 0037  
                           __pintcode 0008                  __end_of_VerifySignal 10BE  
                            ?___awdiv 0026                           __pintcodelo 0018  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                      __size_of_E_TOG 000E                     __size_of_turnLeft 004E  
          ScanWithRange@SensorResultC 0078            ScanWithRange@SensorResultL 0074  
          ScanWithRange@SensorResultR 007C                         ??_setMotorPWM 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0024  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0060                           turnRight@mR 0062  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 1248                  grabRightIR@IR_signal 0025  
                   ___wmul@multiplier 0020                 __end_of_ScanWithRange 0776  
                        setMotorPWM@m 002E                 ScanWithRange@MoveTime 0069  
                _InterruptHandlerHigh 0008                              ScanIR@mL 0064  
                            ScanIR@mR 0066                          ??_grabLeftIR 0022  
                           _turnRight 139C            ScanIR@ClearSignalTolerance 0068  
                 __end_of_setMotorPWM 0E88                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1472                    __end_of_grabLeftIR 132C  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                    __size_of_initLCD 00BC                            ?_turnRight 0060  
                            __ptext10 1472                              __ptext11 100A  
                            __ptext20 114E                              __ptext12 00DA  
                            __ptext21 1248                              __ptext13 0AFE  
                            __ptext22 12BA                              __ptext14 139C  
                            __ptext23 14AA                              __ptext15 13EA  
                            __ptext16 10BE                              __ptext17 132C  
                            __ptext18 0D54                              __ptext19 1594  
                     ??_delay_tenth_s 0020                              _initRFID 15DC  
                       __size_of_main 0388             ScanWithRange@ResultFalseC 006C  
                  main@DirectionFound 01D5             ScanWithRange@ResultFalseL 006B  
           ScanWithRange@ResultFalseR 006D                         __size_of_stop 0090  
                          turnLeft@mL 0060                            turnLeft@mR 0062  
               __size_of_VerifySignal 00B4                              delay_s@i 0022  
                            int$flags 0040                              main@Move 01D4  
                            main@mode 01D3                   _InterruptHandlerLow 0018  
                            _turnLeft 13EA                       ScanWithRange@mL 0064  
                     ScanWithRange@mR 0066                    enableSensor@sensor 0021  
                  enableSensor@status 0020                         VerifySignal@i 002B  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0068  
                         _setMotorPWM 0D54                          _VerifySignal 100A  
                            intlevel1 0000                              intlevel2 0000  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0020  
                    ??_fullSpeedAhead 003B                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0072                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 003C                 ??_InterruptHandlerLow 000F  
                      ??_enableSensor 0021             ScanIR@DirectionFoundLimit 006A  
