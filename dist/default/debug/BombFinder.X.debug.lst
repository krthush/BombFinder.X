

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 23:12:50 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     _CAP1BUFH	set	3945
    39  0000                     _CAP1BUFL	set	3944
    40  0000                     _CAP1CON	set	3939
    41  0000                     _CAP2BUFH	set	3943
    42  0000                     _CAP2BUFL	set	3942
    43  0000                     _CAP2CON	set	3938
    44  0000                     _LATAbits	set	3977
    45  0000                     _LATB	set	3978
    46  0000                     _LATCbits	set	3979
    47  0000                     _LATDbits	set	3980
    48  0000                     _LATEbits	set	3981
    49  0000                     _PTCON0	set	3967
    50  0000                     _PTCON1	set	3966
    51  0000                     _PTPERH	set	3962
    52  0000                     _PTPERL	set	3963
    53  0000                     _PWMCON0	set	3951
    54  0000                     _PWMCON1	set	3950
    55  0000                     _TRISAbits	set	3986
    56  0000                     _TRISBbits	set	3987
    57  0000                     _TRISC	set	3988
    58  0000                     _TRISCbits	set	3988
    59  0000                     _TRISDbits	set	3989
    60  0000                     _TRISEbits	set	3990
    61  0000                     _PDC0H	set	3960
    62  0000                     _PDC0L	set	3961
    63  0000                     _PDC1H	set	3958
    64  0000                     _PDC1L	set	3959
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _IPR1bits	set	3999
    68  0000                     _OSCCON	set	4051
    69  0000                     _OSCCONbits	set	4051
    70  0000                     _PIE1bits	set	3997
    71  0000                     _PIR1bits	set	3998
    72  0000                     _RCONbits	set	4048
    73  0000                     _RCREG	set	4014
    74  0000                     _RCSTAbits	set	4011
    75  0000                     _SPBRG	set	4015
    76  0000                     _SPBRGH	set	4016
    77  0000                     _T5CON	set	4023
    78  0000                     _TXREG	set	4013
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _INTCONbits	set	4082
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  0013E8                     __pcinit:
    86                           	opt stack 0
    87  0013E8                     start_initialization:
    88                           	opt stack 0
    89  0013E8                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to BANK1 (17 bytes)
    93  0013E8  EE01  F0EB         	lfsr	0,__pbssBANK1
    94  0013EC  0E11               	movlw	17
    95  0013EE                     clear_0:
    96  0013EE  6AEE               	clrf	postinc0,c
    97  0013F0  06E8               	decf	wreg,f,c
    98  0013F2  E1FD               	bnz	clear_0
    99                           
   100                           ; Clear objects allocated to COMRAM (1 bytes)
   101  0013F4  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   102  0013F6                     end_of_initialization:
   103                           	opt stack 0
   104  0013F6                     __end_of__initialization:
   105                           	opt stack 0
   106  0013F6  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   107  0013F8  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   108  0013FA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   109  0013FC  6EF8               	movwf	tblptru,c
   110  0013FE  0100               	movlb	0
   111  001400  EFF0  F002         	goto	_main	;jump to C main() function
   112                           tblptru	equ	0xFF8
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	bssCOMRAM
   117  00004F                     __pbssCOMRAM:
   118                           	opt stack 0
   119  00004F                     _i:
   120                           	opt stack 0
   121  00004F                     	ds	1
   122                           tblptru	equ	0xFF8
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssBANK1
   127  0001EB                     __pbssBANK1:
   128                           	opt stack 0
   129  0001EB                     _RFID_Read:
   130                           	opt stack 0
   131  0001EB                     	ds	1
   132  0001EC                     _ReceivedString:
   133                           	opt stack 0
   134  0001EC                     	ds	16
   135                           tblptru	equ	0xFF8
   136                           postinc0	equ	0xFEE
   137                           wreg	equ	0xFE8
   138                           
   139                           	psect	cstackBANK1
   140  000100                     __pcstackBANK1:
   141                           	opt stack 0
   142  000100                     main@MoveType:
   143                           	opt stack 0
   144                           
   145                           ; 100 bytes @ 0x0
   146  000100                     	ds	100
   147  000164                     main@MoveTime:
   148                           	opt stack 0
   149                           
   150                           ; 100 bytes @ 0x64
   151  000164                     	ds	100
   152  0001C8                     main@Message:
   153                           	opt stack 0
   154                           
   155                           ; 10 bytes @ 0xC8
   156  0001C8                     	ds	10
   157  0001D2                     main@test:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0xD2
   161  0001D2                     	ds	2
   162  0001D4                     main@mode:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0xD4
   166  0001D4                     	ds	1
   167  0001D5                     main@ScanAngle:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0xD5
   171  0001D5                     	ds	1
   172  0001D6                     main@DirectionFound:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0xD6
   176  0001D6                     	ds	1
   177  0001D7                     main@i:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0xD7
   181  0001D7                     	ds	1
   182  0001D8                     main@Move:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0xD8
   186  0001D8                     	ds	1
   187  0001D9                     main@mL:
   188                           	opt stack 0
   189                           
   190                           ; 9 bytes @ 0xD9
   191  0001D9                     	ds	9
   192  0001E2                     main@mR:
   193                           	opt stack 0
   194                           
   195                           ; 9 bytes @ 0xE2
   196  0001E2                     	ds	9
   197                           tblptru	equ	0xFF8
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           
   201                           	psect	cstackCOMRAM
   202  000001                     __pcstackCOMRAM:
   203                           	opt stack 0
   204  000001                     ??_InterruptHandlerHigh:
   205  000001                     
   206                           ; 2 bytes @ 0x0
   207  000001                     	ds	14
   208  00000F                     ??_delay_s:
   209  00000F                     ??_delay_tenth_s:
   210  00000F                     ??_LCDout:
   211  00000F                     ?_grabLeftIR:
   212                           	opt stack 0
   213  00000F                     ?_grabRightIR:
   214                           	opt stack 0
   215  00000F                     ?___wmul:
   216                           	opt stack 0
   217  00000F                     _initRFID$1317:
   218                           	opt stack 0
   219  00000F                     enableSensor@status:
   220                           	opt stack 0
   221  00000F                     VerifySignal@Signal:
   222                           	opt stack 0
   223  00000F                     ___wmul@multiplier:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0xE
   227  00000F                     	ds	1
   228  000010                     delay_s@seconds:
   229                           	opt stack 0
   230  000010                     delay_tenth_s@tenth_seconds:
   231                           	opt stack 0
   232  000010                     enableSensor@sensor:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xF
   236  000010                     	ds	1
   237  000011                     ??_VerifySignal:
   238  000011                     ??_grabLeftIR:
   239  000011                     ??_grabRightIR:
   240  000011                     delay_s@i:
   241                           	opt stack 0
   242  000011                     delay_tenth_s@i:
   243                           	opt stack 0
   244  000011                     ___wmul@multiplicand:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x10
   248  000011                     	ds	1
   249  000012                     LCDout@number:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x11
   253  000012                     	ds	1
   254  000013                     SendLCD@type:
   255                           	opt stack 0
   256  000013                     ___wmul@product:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x12
   260  000013                     	ds	1
   261  000014                     SendLCD@Byte:
   262                           	opt stack 0
   263  000014                     grabRightIR@IR_signal:
   264                           	opt stack 0
   265  000014                     grabLeftIR@IR_signal:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x13
   269  000014                     	ds	1
   270  000015                     ??_initLCD:
   271  000015                     ?___awdiv:
   272                           	opt stack 0
   273  000015                     ___awdiv@dividend:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x14
   277  000015                     	ds	1
   278  000016                     grabRightIR@i:
   279                           	opt stack 0
   280  000016                     grabLeftIR@i:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x15
   284  000016                     	ds	1
   285  000017                     VerifySignal@checksum:
   286                           	opt stack 0
   287  000017                     ___awdiv@divisor:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x16
   291  000017                     	ds	1
   292  000018                     VerifySignal@hexByte:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x17
   296  000018                     	ds	1
   297  000019                     ___awdiv@counter:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x18
   301  000019                     	ds	1
   302  00001A                     VerifySignal@i:
   303                           	opt stack 0
   304  00001A                     ___awdiv@sign:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x19
   308  00001A                     	ds	1
   309  00001B                     ___awdiv@quotient:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x1A
   313  00001B                     	ds	2
   314  00001D                     setMotorPWM@m:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x1C
   318  00001D                     	ds	2
   319  00001F                     ??_setMotorPWM:
   320                           
   321                           ; 0 bytes @ 0x1E
   322  00001F                     	ds	5
   323  000024                     setMotorPWM@PWMduty:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x23
   327  000024                     	ds	2
   328  000026                     stop@mL:
   329                           	opt stack 0
   330  000026                     fullSpeedAhead@mL:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x25
   334  000026                     	ds	2
   335  000028                     stop@mR:
   336                           	opt stack 0
   337  000028                     fullSpeedAhead@mR:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x27
   341  000028                     	ds	2
   342  00002A                     
   343                           ; 0 bytes @ 0x29
   344  00002A                     	ds	1
   345  00002B                     turnLeft@mL:
   346                           	opt stack 0
   347  00002B                     turnRight@mL:
   348                           	opt stack 0
   349  00002B                     fullSpeedBack@mL:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2A
   353  00002B                     	ds	2
   354  00002D                     turnLeft@mR:
   355                           	opt stack 0
   356  00002D                     turnRight@mR:
   357                           	opt stack 0
   358  00002D                     fullSpeedBack@mR:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x2C
   362  00002D                     	ds	2
   363  00002F                     ScanIR@mL:
   364                           	opt stack 0
   365  00002F                     ScanWithRange@mL:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2E
   369  00002F                     	ds	2
   370  000031                     ScanIR@mR:
   371                           	opt stack 0
   372  000031                     ScanWithRange@mR:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x30
   376  000031                     	ds	2
   377  000033                     ??_ScanIR:
   378  000033                     ScanWithRange@tenth_seconds:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x32
   382  000033                     	ds	1
   383  000034                     ScanWithRange@MoveTime:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x33
   387  000034                     	ds	1
   388  000035                     ScanIR@ClearSignalTolerance:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x34
   392  000035                     	ds	1
   393  000036                     ??_ScanWithRange:
   394                           
   395                           ; 0 bytes @ 0x35
   396  000036                     	ds	1
   397  000037                     ScanIR@DirectionFoundLimit:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x36
   401  000037                     	ds	1
   402  000038                     ScanWithRange@ResultFalseL:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x37
   406  000038                     	ds	1
   407  000039                     ScanWithRange@ResultFalseC:
   408                           	opt stack 0
   409  000039                     ScanIR@DirectionFoundTolerance:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x38
   413  000039                     	ds	1
   414  00003A                     ScanWithRange@ResultFalseR:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x39
   418  00003A                     	ds	1
   419  00003B                     ScanWithRange@ClearSignalTolerance:
   420                           	opt stack 0
   421  00003B                     ScanIR@SensorResult:
   422                           	opt stack 0
   423                           
   424                           ; 4 bytes @ 0x3A
   425  00003B                     	ds	2
   426  00003D                     ScanWithRange@DirectionFoundLimit:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x3C
   430  00003D                     	ds	2
   431  00003F                     ScanWithRange@DirectionFoundTolerance:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3E
   435  00003F                     	ds	2
   436  000041                     ScanWithRange@SensorResultL:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x40
   440  000041                     	ds	4
   441  000045                     ScanWithRange@SensorResultC:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x44
   445  000045                     	ds	4
   446  000049                     ScanWithRange@SensorResultR:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x48
   450  000049                     	ds	4
   451  00004D                     ??_main:
   452                           
   453                           ; 0 bytes @ 0x4C
   454  00004D                     	ds	2
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           
   459 ;;
   460 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   461 ;;
   462 ;; *************** function _main *****************
   463 ;; Defined at:
   464 ;;		line 31 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   469 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   470 ;;  PathTaken     100    0        unsigned char [100]
   471 ;;  Message        10  200[BANK1 ] unsigned char [10]
   472 ;;  mR              9  226[BANK1 ] struct DC_motor
   473 ;;  mL              9  217[BANK1 ] struct DC_motor
   474 ;;  SignalStreng    3    0        unsigned char [3]
   475 ;;  test            2  210[BANK1 ] unsigned int 
   476 ;;  Move            1  216[BANK1 ] unsigned char 
   477 ;;  i               1  215[BANK1 ] unsigned char 
   478 ;;  DirectionFou    1  214[BANK1 ] unsigned char 
   479 ;;  ScanAngle       1  213[BANK1 ] unsigned char 
   480 ;;  mode            1  212[BANK1 ] unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;		None               void
   483 ;; Registers used:
   484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   490 ;;      Params:         0       0       0       0
   491 ;;      Locals:         0       0     235       0
   492 ;;      Temps:          2       0       0       0
   493 ;;      Totals:         2       0     235       0
   494 ;;Total ram usage:      237 bytes
   495 ;; Hardware stack levels required when called:    6
   496 ;; This function calls:
   497 ;;		_ScanIR
   498 ;;		_ScanWithRange
   499 ;;		_VerifySignal
   500 ;;		_delay_s
   501 ;;		_delay_tenth_s
   502 ;;		_enableSensor
   503 ;;		_fullSpeedAhead
   504 ;;		_fullSpeedBack
   505 ;;		_initIR
   506 ;;		_initLCD
   507 ;;		_initMotorPWM
   508 ;;		_initRFID
   509 ;;		_stop
   510 ;;		_turnLeft
   511 ;;		_turnRight
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text0
   518  0005E0                     __ptext0:
   519                           	opt stack 0
   520  0005E0                     _main:
   521                           	opt stack 25
   522                           
   523                           ;main.c: 34: unsigned char Message[10];
   524                           ;main.c: 35: unsigned char i=0;
   525                           
   526                           ;incstack = 0
   527  0005E0  0E00               	movlw	0
   528  0005E2  0101               	movlb	1	; () banked
   529  0005E4  6FD7               	movwf	main@i& (0+255),b
   530                           
   531                           ;main.c: 36: unsigned char mode=0;
   532  0005E6  0E00               	movlw	0
   533  0005E8  0101               	movlb	1	; () banked
   534  0005EA  6FD4               	movwf	main@mode& (0+255),b
   535                           
   536                           ;main.c: 37: char DirectionFound=0;
   537  0005EC  0E00               	movlw	0
   538  0005EE  0101               	movlb	1	; () banked
   539  0005F0  6FD6               	movwf	main@DirectionFound& (0+255),b
   540                           
   541                           ;main.c: 38: unsigned char SignalStrength[3];
   542                           ;main.c: 39: char PathTaken[100];
   543                           ;main.c: 40: unsigned int test=0;
   544  0005F2  0E00               	movlw	0
   545  0005F4  0101               	movlb	1	; () banked
   546  0005F6  6FD3               	movwf	(main@test+1)& (0+255),b
   547  0005F8  0E00               	movlw	0
   548  0005FA  6FD2               	movwf	main@test& (0+255),b
   549                           
   550                           ;main.c: 41: char MoveTime[100];
   551                           ;main.c: 42: char MoveType[100];
   552                           ;main.c: 43: char Move=0;
   553  0005FC  0E00               	movlw	0
   554  0005FE  0101               	movlb	1	; () banked
   555  000600  6FD8               	movwf	main@Move& (0+255),b
   556                           
   557                           ;main.c: 45: unsigned char ScanAngle=6;
   558  000602  0E06               	movlw	6
   559  000604  0101               	movlb	1	; () banked
   560  000606  6FD5               	movwf	main@ScanAngle& (0+255),b
   561                           
   562                           ; BSR set to: 1
   563                           ;main.c: 48: INTCONbits.GIEH = 1;
   564  000608  8EF2               	bsf	intcon,7,c	;volatile
   565                           
   566                           ; BSR set to: 1
   567                           ;main.c: 49: INTCONbits.GIEL = 1;
   568  00060A  8CF2               	bsf	intcon,6,c	;volatile
   569                           
   570                           ; BSR set to: 1
   571                           ;main.c: 50: INTCONbits.PEIE = 1;
   572  00060C  8CF2               	bsf	intcon,6,c	;volatile
   573                           
   574                           ; BSR set to: 1
   575                           ;main.c: 51: RCONbits.IPEN = 1;
   576  00060E  8ED0               	bsf	4048,7,c	;volatile
   577                           
   578                           ; BSR set to: 1
   579                           ;main.c: 54: IPR1bits.RCIP=1;
   580  000610  8A9F               	bsf	3999,5,c	;volatile
   581                           
   582                           ; BSR set to: 1
   583                           ;main.c: 55: PIE1bits.RCIE=1;
   584  000612  8A9D               	bsf	3997,5,c	;volatile
   585                           
   586                           ; BSR set to: 1
   587                           ;main.c: 56: PIR1bits.RCIF=0;
   588  000614  9A9E               	bcf	3998,5,c	;volatile
   589                           
   590                           ;main.c: 59: struct DC_motor mL, mR;
   591                           ;main.c: 60: mL.power=0;
   592  000616  0E00               	movlw	0
   593  000618  0101               	movlb	1	; () banked
   594  00061A  6FD9               	movwf	main@mL& (0+255),b
   595                           
   596                           ;main.c: 61: mL.direction=1;
   597  00061C  0E01               	movlw	1
   598  00061E  0101               	movlb	1	; () banked
   599  000620  6FDA               	movwf	(main@mL+1)& (0+255),b
   600                           
   601                           ; BSR set to: 1
   602                           ;main.c: 62: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   603  000622  0E79               	movlw	121
   604  000624  0101               	movlb	1	; () banked
   605  000626  6FDB               	movwf	(main@mL+2)& (0+255),b
   606  000628  0E0F               	movlw	15
   607  00062A  0101               	movlb	1	; () banked
   608  00062C  6FDC               	movwf	(main@mL+3)& (0+255),b
   609                           
   610                           ; BSR set to: 1
   611                           ;main.c: 63: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   612  00062E  0E78               	movlw	120
   613  000630  0101               	movlb	1	; () banked
   614  000632  6FDD               	movwf	(main@mL+4)& (0+255),b
   615  000634  0E0F               	movlw	15
   616  000636  0101               	movlb	1	; () banked
   617  000638  6FDE               	movwf	(main@mL+5)& (0+255),b
   618                           
   619                           ;main.c: 64: mL.dir_pin=0;
   620  00063A  0E00               	movlw	0
   621  00063C  0101               	movlb	1	; () banked
   622  00063E  6FDF               	movwf	(main@mL+6)& (0+255),b
   623                           
   624                           ;main.c: 65: mL.PWMperiod=199;
   625  000640  0E00               	movlw	0
   626  000642  0101               	movlb	1	; () banked
   627  000644  6FE1               	movwf	(main@mL+8)& (0+255),b
   628  000646  0EC7               	movlw	199
   629  000648  6FE0               	movwf	(main@mL+7)& (0+255),b
   630                           
   631                           ;main.c: 67: mR.power=0;
   632  00064A  0E00               	movlw	0
   633  00064C  0101               	movlb	1	; () banked
   634  00064E  6FE2               	movwf	main@mR& (0+255),b
   635                           
   636                           ;main.c: 68: mR.direction=1;
   637  000650  0E01               	movlw	1
   638  000652  0101               	movlb	1	; () banked
   639  000654  6FE3               	movwf	(main@mR+1)& (0+255),b
   640                           
   641                           ; BSR set to: 1
   642                           ;main.c: 69: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   643  000656  0E77               	movlw	119
   644  000658  0101               	movlb	1	; () banked
   645  00065A  6FE4               	movwf	(main@mR+2)& (0+255),b
   646  00065C  0E0F               	movlw	15
   647  00065E  0101               	movlb	1	; () banked
   648  000660  6FE5               	movwf	(main@mR+3)& (0+255),b
   649                           
   650                           ; BSR set to: 1
   651                           ;main.c: 70: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   652  000662  0E76               	movlw	118
   653  000664  0101               	movlb	1	; () banked
   654  000666  6FE6               	movwf	(main@mR+4)& (0+255),b
   655  000668  0E0F               	movlw	15
   656  00066A  0101               	movlb	1	; () banked
   657  00066C  6FE7               	movwf	(main@mR+5)& (0+255),b
   658                           
   659                           ;main.c: 71: mR.dir_pin=2;
   660  00066E  0E02               	movlw	2
   661  000670  0101               	movlb	1	; () banked
   662  000672  6FE8               	movwf	(main@mR+6)& (0+255),b
   663                           
   664                           ;main.c: 72: mR.PWMperiod=199;
   665  000674  0E00               	movlw	0
   666  000676  0101               	movlb	1	; () banked
   667  000678  6FEA               	movwf	(main@mR+8)& (0+255),b
   668  00067A  0EC7               	movlw	199
   669  00067C  6FE9               	movwf	(main@mR+7)& (0+255),b
   670                           
   671                           ;main.c: 74: OSCCON = 0x72;
   672  00067E  0E72               	movlw	114
   673  000680  6ED3               	movwf	4051,c	;volatile
   674  000682                     l69:
   675  000682  B4D3               	btfsc	4051,2,c	;volatile
   676  000684  D1AE               	goto	l2477
   677  000686  D7FD               	goto	l69
   678  000688                     l2363:
   679                           
   680                           ;main.c: 82: initMotorPWM();
   681  000688  EC7C  F009         	call	_initMotorPWM	;wreg free
   682                           
   683                           ;main.c: 83: initRFID();
   684  00068C  ECE4  F009         	call	_initRFID	;wreg free
   685                           
   686                           ;main.c: 84: initIR();
   687  000690  ECD3  F009         	call	_initIR	;wreg free
   688                           
   689                           ;main.c: 85: initLCD();
   690  000694  ECEF  F006         	call	_initLCD	;wreg free
   691                           
   692                           ;main.c: 86: initIR();
   693  000698  ECD3  F009         	call	_initIR	;wreg free
   694                           
   695                           ;main.c: 90: fullSpeedAhead(&mL, &mR);
   696  00069C  0ED9               	movlw	low main@mL
   697  00069E  6E26               	movwf	fullSpeedAhead@mL,c
   698  0006A0  0E01               	movlw	high main@mL
   699  0006A2  6E27               	movwf	fullSpeedAhead@mL+1,c
   700  0006A4  0EE2               	movlw	low main@mR
   701  0006A6  6E28               	movwf	fullSpeedAhead@mR,c
   702  0006A8  0E01               	movlw	high main@mR
   703  0006AA  6E29               	movwf	fullSpeedAhead@mR+1,c
   704  0006AC  ECA7  F008         	call	_fullSpeedAhead	;wreg free
   705                           
   706                           ;main.c: 91: delay_s(1);
   707  0006B0  0E01               	movlw	1
   708  0006B2  EC29  F009         	call	_delay_s
   709                           
   710                           ;main.c: 92: stop(&mL, &mR);
   711  0006B6  0ED9               	movlw	low main@mL
   712  0006B8  6E26               	movwf	stop@mL,c
   713  0006BA  0E01               	movlw	high main@mL
   714  0006BC  6E27               	movwf	stop@mL+1,c
   715  0006BE  0EE2               	movlw	low main@mR
   716  0006C0  6E28               	movwf	stop@mR,c
   717  0006C2  0E01               	movlw	high main@mR
   718  0006C4  6E29               	movwf	stop@mR+1,c
   719  0006C6  ECA7  F007         	call	_stop	;wreg free
   720                           
   721                           ;main.c: 93: fullSpeedBack(&mL, &mR);
   722  0006CA  0ED9               	movlw	low main@mL
   723  0006CC  6E2B               	movwf	fullSpeedBack@mL,c
   724  0006CE  0E01               	movlw	high main@mL
   725  0006D0  6E2C               	movwf	fullSpeedBack@mL+1,c
   726  0006D2  0EE2               	movlw	low main@mR
   727  0006D4  6E2D               	movwf	fullSpeedBack@mR,c
   728  0006D6  0E01               	movlw	high main@mR
   729  0006D8  6E2E               	movwf	fullSpeedBack@mR+1,c
   730  0006DA  EC61  F009         	call	_fullSpeedBack	;wreg free
   731                           
   732                           ;main.c: 94: delay_s(1);
   733  0006DE  0E01               	movlw	1
   734  0006E0  EC29  F009         	call	_delay_s
   735                           
   736                           ;main.c: 95: stop(&mL, &mR);
   737  0006E4  0ED9               	movlw	low main@mL
   738  0006E6  6E26               	movwf	stop@mL,c
   739  0006E8  0E01               	movlw	high main@mL
   740  0006EA  6E27               	movwf	stop@mL+1,c
   741  0006EC  0EE2               	movlw	low main@mR
   742  0006EE  6E28               	movwf	stop@mR,c
   743  0006F0  0E01               	movlw	high main@mR
   744  0006F2  6E29               	movwf	stop@mR+1,c
   745  0006F4  ECA7  F007         	call	_stop	;wreg free
   746                           
   747                           ;main.c: 97: enableSensor(0, 1);
   748  0006F8  0E01               	movlw	1
   749  0006FA  6E0F               	movwf	enableSensor@status,c
   750  0006FC  0E00               	movlw	0
   751  0006FE  ECAD  F009         	call	_enableSensor
   752                           
   753                           ;main.c: 98: enableSensor(1, 1);
   754  000702  0E01               	movlw	1
   755  000704  6E0F               	movwf	enableSensor@status,c
   756  000706  0E01               	movlw	1
   757  000708  ECAD  F009         	call	_enableSensor
   758  00070C  D0F6               	goto	l2453
   759  00070E                     l2383:
   760                           
   761                           ; BSR set to: 1
   762                           ;main.c: 105: if (DirectionFound==0) {
   763  00070E  0101               	movlb	1	; () banked
   764  000710  51D6               	movf	main@DirectionFound& (0+255),w,b
   765  000712  0101               	movlb	1	; () banked
   766  000714  A4D8               	btfss	status,2,c
   767  000716  D016               	goto	l2387
   768                           
   769                           ; BSR set to: 1
   770                           ;main.c: 107: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
   771  000718  0ED9               	movlw	low main@mL
   772  00071A  6E2F               	movwf	ScanWithRange@mL,c
   773  00071C  0E01               	movlw	high main@mL
   774  00071E  6E30               	movwf	ScanWithRange@mL+1,c
   775  000720  0EE2               	movlw	low main@mR
   776  000722  6E31               	movwf	ScanWithRange@mR,c
   777  000724  0E01               	movlw	high main@mR
   778  000726  6E32               	movwf	ScanWithRange@mR+1,c
   779  000728  C1D5  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   780  00072C  0101               	movlb	1	; () banked
   781  00072E  51D8               	movf	main@Move& (0+255),w,b
   782  000730  0D01               	mullw	1
   783  000732  0E64               	movlw	low main@MoveTime
   784  000734  24F3               	addwf	prodl,w,c
   785  000736  6E34               	movwf	ScanWithRange@MoveTime,c
   786  000738  0E01               	movlw	high main@MoveTime
   787  00073A  20F4               	addwfc	prodh,w,c
   788  00073C  6E35               	movwf	ScanWithRange@MoveTime+1,c
   789  00073E  EC59  F000         	call	_ScanWithRange	;wreg free
   790  000742  D00E               	goto	L2
   791  000744                     l2387:
   792                           
   793                           ; BSR set to: 1
   794  000744  0101               	movlb	1	; () banked
   795  000746  05D6               	decf	main@DirectionFound& (0+255),w,b
   796  000748  A4D8               	btfss	status,2,c
   797  00074A  D00D               	goto	l2391
   798                           
   799                           ; BSR set to: 1
   800                           ;main.c: 110: DirectionFound = ScanIR(&mL, &mR);
   801  00074C  0ED9               	movlw	low main@mL
   802  00074E  6E2F               	movwf	ScanIR@mL,c
   803  000750  0E01               	movlw	high main@mL
   804  000752  6E30               	movwf	ScanIR@mL+1,c
   805  000754  0EE2               	movlw	low main@mR
   806  000756  6E31               	movwf	ScanIR@mR,c
   807  000758  0E01               	movlw	high main@mR
   808  00075A  6E32               	movwf	ScanIR@mR+1,c
   809  00075C  EC00  F005         	call	_ScanIR	;wreg free
   810  000760                     L2:
   811  000760  0101               	movlb	1	; () banked
   812  000762  6FD6               	movwf	main@DirectionFound& (0+255),b
   813                           
   814                           ;main.c: 111: } else if (DirectionFound==2) {
   815  000764  D026               	goto	l2403
   816  000766                     l2391:
   817                           
   818                           ; BSR set to: 1
   819  000766  0E02               	movlw	2
   820  000768  0101               	movlb	1	; () banked
   821  00076A  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   822  00076C  A4D8               	btfss	status,2,c
   823  00076E  D004               	goto	l2395
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 113: mode=2;
   827  000770  0E02               	movlw	2
   828  000772  0101               	movlb	1	; () banked
   829  000774  6FD4               	movwf	main@mode& (0+255),b
   830                           
   831                           ;main.c: 114: } else if (DirectionFound==3) {
   832  000776  D01D               	goto	l2403
   833  000778                     l2395:
   834                           
   835                           ; BSR set to: 1
   836  000778  0E03               	movlw	3
   837  00077A  0101               	movlb	1	; () banked
   838  00077C  19D6               	xorwf	main@DirectionFound& (0+255),w,b
   839  00077E  A4D8               	btfss	status,2,c
   840  000780  D018               	goto	l2403
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 119: fullSpeedAhead(&mL, &mR);
   844  000782  0ED9               	movlw	low main@mL
   845  000784  6E26               	movwf	fullSpeedAhead@mL,c
   846  000786  0E01               	movlw	high main@mL
   847  000788  6E27               	movwf	fullSpeedAhead@mL+1,c
   848  00078A  0EE2               	movlw	low main@mR
   849  00078C  6E28               	movwf	fullSpeedAhead@mR,c
   850  00078E  0E01               	movlw	high main@mR
   851  000790  6E29               	movwf	fullSpeedAhead@mR+1,c
   852  000792  ECA7  F008         	call	_fullSpeedAhead	;wreg free
   853                           
   854                           ;main.c: 120: delay_tenth_s(ScanAngle);
   855  000796  0101               	movlb	1	; () banked
   856  000798  51D5               	movf	main@ScanAngle& (0+255),w,b
   857  00079A  EC45  F009         	call	_delay_tenth_s
   858                           
   859                           ;main.c: 121: stop(&mL,&mR);
   860  00079E  0ED9               	movlw	low main@mL
   861  0007A0  6E26               	movwf	stop@mL,c
   862  0007A2  0E01               	movlw	high main@mL
   863  0007A4  6E27               	movwf	stop@mL+1,c
   864  0007A6  0EE2               	movlw	low main@mR
   865  0007A8  6E28               	movwf	stop@mR,c
   866  0007AA  0E01               	movlw	high main@mR
   867  0007AC  6E29               	movwf	stop@mR+1,c
   868  0007AE  ECA7  F007         	call	_stop	;wreg free
   869  0007B2                     l2403:
   870                           
   871                           ;main.c: 122: }
   872                           ;main.c: 124: MoveType[Move] = 1;
   873  0007B2  0101               	movlb	1	; () banked
   874  0007B4  51D8               	movf	main@Move& (0+255),w,b
   875  0007B6  0D01               	mullw	1
   876  0007B8  0E00               	movlw	low main@MoveType
   877  0007BA  24F3               	addwf	prodl,w,c
   878  0007BC  6ED9               	movwf	fsr2l,c
   879  0007BE  0E01               	movlw	high main@MoveType
   880  0007C0  20F4               	addwfc	prodh,w,c
   881  0007C2  6EDA               	movwf	fsr2h,c
   882  0007C4  0E01               	movlw	1
   883  0007C6  6EDF               	movwf	indf2,c
   884                           
   885                           ; BSR set to: 1
   886                           ;main.c: 125: Move++;
   887  0007C8  0101               	movlb	1	; () banked
   888  0007CA  2BD8               	incf	main@Move& (0+255),f,b
   889                           
   890                           ;main.c: 136: break;
   891  0007CC  D10A               	goto	l2477
   892  0007CE                     l2407:
   893                           
   894                           ; BSR set to: 1
   895                           ;main.c: 142: if (RFID_Read) {
   896  0007CE  0101               	movlb	1	; () banked
   897  0007D0  51EB               	movf	_RFID_Read& (0+255),w,b	;volatile
   898  0007D2  B4D8               	btfsc	status,2,c
   899  0007D4  D085               	goto	l2449
   900                           
   901                           ; BSR set to: 1
   902                           ;main.c: 143: stop(&mL, &mR);
   903  0007D6  0ED9               	movlw	low main@mL
   904  0007D8  6E26               	movwf	stop@mL,c
   905  0007DA  0E01               	movlw	high main@mL
   906  0007DC  6E27               	movwf	stop@mL+1,c
   907  0007DE  0EE2               	movlw	low main@mR
   908  0007E0  6E28               	movwf	stop@mR,c
   909  0007E2  0E01               	movlw	high main@mR
   910  0007E4  6E29               	movwf	stop@mR+1,c
   911  0007E6  ECA7  F007         	call	_stop	;wreg free
   912                           
   913                           ;main.c: 144: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   914  0007EA  0E03               	movlw	3
   915  0007EC  0101               	movlb	1	; () banked
   916  0007EE  19FB               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   917  0007F0  A4D8               	btfss	status,2,c
   918  0007F2  D002               	goto	u1840
   919  0007F4  0E01               	movlw	1
   920  0007F6  D001               	goto	u1842
   921  0007F8                     u1840:
   922  0007F8  0E00               	movlw	0
   923  0007FA                     u1842:
   924  0007FA  6E4D               	movwf	??_main& (0+255),c
   925  0007FC  0E02               	movlw	2
   926  0007FE  0101               	movlb	1	; () banked
   927  000800  19EC               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   928  000802  A4D8               	btfss	status,2,c
   929  000804  D002               	goto	u1850
   930  000806  0E01               	movlw	1
   931  000808  D001               	goto	u1852
   932  00080A                     u1850:
   933  00080A  0E00               	movlw	0
   934  00080C                     u1852:
   935  00080C  144D               	andwf	??_main,w,c
   936  00080E  A0E8               	btfss	wreg,0,c
   937  000810  D0E8               	goto	l2477
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 145: if (VerifySignal(ReceivedString)){
   941  000812  0EEC               	movlw	low _ReceivedString
   942  000814  6E0F               	movwf	VerifySignal@Signal,c
   943  000816  0E01               	movlw	high _ReceivedString
   944  000818  6E10               	movwf	VerifySignal@Signal+1,c
   945  00081A  EC4D  F007         	call	_VerifySignal	;wreg free
   946  00081E  0900               	iorlw	0
   947  000820  B4D8               	btfsc	status,2,c
   948  000822  D03C               	goto	l2441
   949                           
   950                           ;main.c: 147: for (i=0; i<10; i++){
   951  000824  0E00               	movlw	0
   952  000826  0101               	movlb	1	; () banked
   953  000828  6FD7               	movwf	main@i& (0+255),b
   954  00082A                     l2417:
   955                           
   956                           ; BSR set to: 1
   957  00082A  0E09               	movlw	9
   958  00082C  0101               	movlb	1	; () banked
   959  00082E  65D7               	cpfsgt	main@i& (0+255),b
   960  000830  D001               	goto	l2421
   961  000832  D01C               	goto	l2427
   962  000834                     l2421:
   963                           
   964                           ; BSR set to: 1
   965                           ;main.c: 148: Message[i] = ReceivedString[i+1];
   966  000834  0101               	movlb	1	; () banked
   967  000836  51D7               	movf	main@i& (0+255),w,b
   968  000838  6E4D               	movwf	??_main& (0+255),c
   969  00083A  6A4E               	clrf	(??_main+1)& (0+255),c
   970  00083C  0E01               	movlw	1
   971  00083E  264D               	addwf	??_main,f,c
   972  000840  0E00               	movlw	0
   973  000842  224E               	addwfc	??_main+1,f,c
   974  000844  0EEC               	movlw	low _ReceivedString
   975  000846  244D               	addwf	??_main,w,c
   976  000848  6ED9               	movwf	fsr2l,c
   977  00084A  0E01               	movlw	high _ReceivedString
   978  00084C  204E               	addwfc	??_main+1,w,c
   979  00084E  6EDA               	movwf	fsr2h,c
   980  000850  0101               	movlb	1	; () banked
   981  000852  51D7               	movf	main@i& (0+255),w,b
   982  000854  0D01               	mullw	1
   983  000856  0EC8               	movlw	low main@Message
   984  000858  24F3               	addwf	prodl,w,c
   985  00085A  6EE1               	movwf	fsr1l,c
   986  00085C  0E01               	movlw	high main@Message
   987  00085E  20F4               	addwfc	prodh,w,c
   988  000860  6EE2               	movwf	fsr1h,c
   989  000862  CFDF FFE7          	movff	indf2,indf1
   990                           
   991                           ; BSR set to: 1
   992  000866  0101               	movlb	1	; () banked
   993  000868  2BD7               	incf	main@i& (0+255),f,b
   994  00086A  D7DF               	goto	l2417
   995  00086C                     l2427:
   996                           
   997                           ; BSR set to: 1
   998                           ;main.c: 149: }
   999                           ;main.c: 152: for (i=0; i<16; i++) {
  1000  00086C  0E00               	movlw	0
  1001  00086E  0101               	movlb	1	; () banked
  1002  000870  6FD7               	movwf	main@i& (0+255),b
  1003  000872                     l2429:
  1004                           
  1005                           ; BSR set to: 1
  1006  000872  0E0F               	movlw	15
  1007  000874  0101               	movlb	1	; () banked
  1008  000876  65D7               	cpfsgt	main@i& (0+255),b
  1009  000878  D001               	goto	l2433
  1010  00087A  D00E               	goto	l2439
  1011  00087C                     l2433:
  1012                           
  1013                           ; BSR set to: 1
  1014                           ;main.c: 153: ReceivedString[i]=0;
  1015  00087C  0101               	movlb	1	; () banked
  1016  00087E  51D7               	movf	main@i& (0+255),w,b
  1017  000880  0D01               	mullw	1
  1018  000882  0EEC               	movlw	low _ReceivedString
  1019  000884  24F3               	addwf	prodl,w,c
  1020  000886  6ED9               	movwf	fsr2l,c
  1021  000888  0E01               	movlw	high _ReceivedString
  1022  00088A  20F4               	addwfc	prodh,w,c
  1023  00088C  6EDA               	movwf	fsr2h,c
  1024  00088E  0E00               	movlw	0
  1025  000890  6EDF               	movwf	indf2,c
  1026                           
  1027                           ; BSR set to: 1
  1028  000892  0101               	movlb	1	; () banked
  1029  000894  2BD7               	incf	main@i& (0+255),f,b
  1030  000896  D7ED               	goto	l2429
  1031  000898                     l2439:
  1032                           
  1033                           ; BSR set to: 1
  1034                           ;main.c: 154: }
  1035                           ;main.c: 155: mode = 3;
  1036  000898  0E03               	movlw	3
  1037  00089A  D030               	goto	L3
  1038  00089C                     l2441:
  1039                           
  1040                           ;main.c: 158: fullSpeedBack(&mL,&mR);
  1041  00089C  0ED9               	movlw	low main@mL
  1042  00089E  6E2B               	movwf	fullSpeedBack@mL,c
  1043  0008A0  0E01               	movlw	high main@mL
  1044  0008A2  6E2C               	movwf	fullSpeedBack@mL+1,c
  1045  0008A4  0EE2               	movlw	low main@mR
  1046  0008A6  6E2D               	movwf	fullSpeedBack@mR,c
  1047  0008A8  0E01               	movlw	high main@mR
  1048  0008AA  6E2E               	movwf	fullSpeedBack@mR+1,c
  1049  0008AC  EC61  F009         	call	_fullSpeedBack	;wreg free
  1050                           
  1051                           ;main.c: 159: delay_tenth_s(5);
  1052  0008B0  0E05               	movlw	5
  1053  0008B2  EC45  F009         	call	_delay_tenth_s
  1054                           
  1055                           ;main.c: 160: stop(&mL,&mR);
  1056  0008B6  0ED9               	movlw	low main@mL
  1057  0008B8  6E26               	movwf	stop@mL,c
  1058  0008BA  0E01               	movlw	high main@mL
  1059  0008BC  6E27               	movwf	stop@mL+1,c
  1060  0008BE  0EE2               	movlw	low main@mR
  1061  0008C0  6E28               	movwf	stop@mR,c
  1062  0008C2  0E01               	movlw	high main@mR
  1063  0008C4  6E29               	movwf	stop@mR+1,c
  1064  0008C6  ECA7  F007         	call	_stop	;wreg free
  1065                           
  1066                           ;main.c: 161: fullSpeedAhead(&mL,&mR);
  1067  0008CA  0ED9               	movlw	low main@mL
  1068  0008CC  6E26               	movwf	fullSpeedAhead@mL,c
  1069  0008CE  0E01               	movlw	high main@mL
  1070  0008D0  6E27               	movwf	fullSpeedAhead@mL+1,c
  1071  0008D2  0EE2               	movlw	low main@mR
  1072  0008D4  6E28               	movwf	fullSpeedAhead@mR,c
  1073  0008D6  0E01               	movlw	high main@mR
  1074  0008D8  6E29               	movwf	fullSpeedAhead@mR+1,c
  1075  0008DA  ECA7  F008         	call	_fullSpeedAhead	;wreg free
  1076                           
  1077                           ;main.c: 162: }
  1078                           ;main.c: 163: }
  1079                           ;main.c: 164: } else {
  1080  0008DE  D081               	goto	l2477
  1081  0008E0                     l2449:
  1082                           
  1083                           ;main.c: 165: fullSpeedAhead(&mL,&mR);
  1084  0008E0  0ED9               	movlw	low main@mL
  1085  0008E2  6E26               	movwf	fullSpeedAhead@mL,c
  1086  0008E4  0E01               	movlw	high main@mL
  1087  0008E6  6E27               	movwf	fullSpeedAhead@mL+1,c
  1088  0008E8  0EE2               	movlw	low main@mR
  1089  0008EA  6E28               	movwf	fullSpeedAhead@mR,c
  1090  0008EC  0E01               	movlw	high main@mR
  1091  0008EE  6E29               	movwf	fullSpeedAhead@mR+1,c
  1092  0008F0  ECA7  F008         	call	_fullSpeedAhead	;wreg free
  1093                           
  1094                           ;main.c: 166: delay_tenth_s(5);
  1095  0008F4  0E05               	movlw	5
  1096  0008F6  EC45  F009         	call	_delay_tenth_s
  1097  0008FA                     l2453:
  1098                           
  1099                           ;main.c: 167: mode=1;
  1100  0008FA  0E01               	movlw	1
  1101  0008FC                     L3:
  1102  0008FC  0101               	movlb	1	; () banked
  1103  0008FE  6FD4               	movwf	main@mode& (0+255),b
  1104                           
  1105                           ; BSR set to: 1
  1106                           ;main.c: 168: }
  1107                           ;main.c: 171: break;
  1108  000900  D070               	goto	l2477
  1109  000902                     l2455:
  1110                           
  1111                           ; BSR set to: 1
  1112  000902  0101               	movlb	1	; () banked
  1113  000904  51D8               	movf	main@Move& (0+255),w,b
  1114  000906  0101               	movlb	1	; () banked
  1115  000908  B4D8               	btfsc	status,2,c
  1116  00090A  D06B               	goto	l2477
  1117                           
  1118                           ; BSR set to: 1
  1119                           ;main.c: 176: if (MoveType[Move]==0) {
  1120                           
  1121                           ; BSR set to: 1
  1122                           
  1123                           ; BSR set to: 1
  1124  00090C  0101               	movlb	1	; () banked
  1125  00090E  51D8               	movf	main@Move& (0+255),w,b
  1126  000910  0D01               	mullw	1
  1127  000912  0E00               	movlw	low main@MoveType
  1128  000914  24F3               	addwf	prodl,w,c
  1129  000916  6ED9               	movwf	fsr2l,c
  1130  000918  0E01               	movlw	high main@MoveType
  1131  00091A  20F4               	addwfc	prodh,w,c
  1132  00091C  6EDA               	movwf	fsr2h,c
  1133  00091E  50DF               	movf	indf2,w,c
  1134  000920  A4D8               	btfss	status,2,c
  1135  000922  D017               	goto	l2463
  1136                           
  1137                           ; BSR set to: 1
  1138                           ;main.c: 177: fullSpeedBack(&mL,&mR);
  1139  000924  0ED9               	movlw	low main@mL
  1140  000926  6E2B               	movwf	fullSpeedBack@mL,c
  1141  000928  0E01               	movlw	high main@mL
  1142  00092A  6E2C               	movwf	fullSpeedBack@mL+1,c
  1143  00092C  0EE2               	movlw	low main@mR
  1144  00092E  6E2D               	movwf	fullSpeedBack@mR,c
  1145  000930  0E01               	movlw	high main@mR
  1146  000932  6E2E               	movwf	fullSpeedBack@mR+1,c
  1147  000934  EC61  F009         	call	_fullSpeedBack	;wreg free
  1148                           
  1149                           ;main.c: 178: delay_tenth_s(MoveTime[Move]);
  1150  000938  0101               	movlb	1	; () banked
  1151  00093A  51D8               	movf	main@Move& (0+255),w,b
  1152  00093C  0D01               	mullw	1
  1153  00093E  0E64               	movlw	low main@MoveTime
  1154  000940  24F3               	addwf	prodl,w,c
  1155  000942  6ED9               	movwf	fsr2l,c
  1156  000944  0E01               	movlw	high main@MoveTime
  1157  000946  20F4               	addwfc	prodh,w,c
  1158  000948  6EDA               	movwf	fsr2h,c
  1159  00094A  50DF               	movf	indf2,w,c
  1160  00094C  EC45  F009         	call	_delay_tenth_s
  1161                           
  1162                           ;main.c: 179: } else if (MoveType[Move]==1) {
  1163  000950  D045               	goto	l2471
  1164  000952                     l2463:
  1165  000952  0101               	movlb	1	; () banked
  1166  000954  51D8               	movf	main@Move& (0+255),w,b
  1167  000956  0D01               	mullw	1
  1168  000958  0E00               	movlw	low main@MoveType
  1169  00095A  24F3               	addwf	prodl,w,c
  1170  00095C  6ED9               	movwf	fsr2l,c
  1171  00095E  0E01               	movlw	high main@MoveType
  1172  000960  20F4               	addwfc	prodh,w,c
  1173  000962  6EDA               	movwf	fsr2h,c
  1174  000964  04DE               	decf	postinc2,w,c
  1175  000966  A4D8               	btfss	status,2,c
  1176  000968  D039               	goto	l2471
  1177                           
  1178                           ; BSR set to: 1
  1179                           ;main.c: 180: if (MoveTime[Move]>0) {
  1180  00096A  0101               	movlb	1	; () banked
  1181  00096C  51D8               	movf	main@Move& (0+255),w,b
  1182  00096E  0D01               	mullw	1
  1183  000970  0E64               	movlw	low main@MoveTime
  1184  000972  24F3               	addwf	prodl,w,c
  1185  000974  6ED9               	movwf	fsr2l,c
  1186  000976  0E01               	movlw	high main@MoveTime
  1187  000978  20F4               	addwfc	prodh,w,c
  1188  00097A  6EDA               	movwf	fsr2h,c
  1189  00097C  50DF               	movf	indf2,w,c
  1190  00097E  B4D8               	btfsc	status,2,c
  1191  000980  D017               	goto	l2469
  1192                           
  1193                           ; BSR set to: 1
  1194                           ;main.c: 181: turnRight(&mL,&mR);
  1195  000982  0ED9               	movlw	low main@mL
  1196  000984  6E2B               	movwf	turnRight@mL,c
  1197  000986  0E01               	movlw	high main@mL
  1198  000988  6E2C               	movwf	turnRight@mL+1,c
  1199  00098A  0EE2               	movlw	low main@mR
  1200  00098C  6E2D               	movwf	turnRight@mR,c
  1201  00098E  0E01               	movlw	high main@mR
  1202  000990  6E2E               	movwf	turnRight@mR+1,c
  1203  000992  ECDF  F008         	call	_turnRight	;wreg free
  1204                           
  1205                           ;main.c: 182: delay_tenth_s(MoveTime[Move]);
  1206  000996  0101               	movlb	1	; () banked
  1207  000998  51D8               	movf	main@Move& (0+255),w,b
  1208  00099A  0D01               	mullw	1
  1209  00099C  0E64               	movlw	low main@MoveTime
  1210  00099E  24F3               	addwf	prodl,w,c
  1211  0009A0  6ED9               	movwf	fsr2l,c
  1212  0009A2  0E01               	movlw	high main@MoveTime
  1213  0009A4  20F4               	addwfc	prodh,w,c
  1214  0009A6  6EDA               	movwf	fsr2h,c
  1215  0009A8  50DF               	movf	indf2,w,c
  1216  0009AA  EC45  F009         	call	_delay_tenth_s
  1217                           
  1218                           ;main.c: 183: } else {
  1219  0009AE  D016               	goto	l2471
  1220  0009B0                     l2469:
  1221                           
  1222                           ;main.c: 184: turnLeft(&mL,&mR);
  1223  0009B0  0ED9               	movlw	low main@mL
  1224  0009B2  6E2B               	movwf	turnLeft@mL,c
  1225  0009B4  0E01               	movlw	high main@mL
  1226  0009B6  6E2C               	movwf	turnLeft@mL+1,c
  1227  0009B8  0EE2               	movlw	low main@mR
  1228  0009BA  6E2D               	movwf	turnLeft@mR,c
  1229  0009BC  0E01               	movlw	high main@mR
  1230  0009BE  6E2E               	movwf	turnLeft@mR+1,c
  1231  0009C0  EC04  F009         	call	_turnLeft	;wreg free
  1232                           
  1233                           ;main.c: 185: delay_tenth_s(MoveTime[Move]);
  1234  0009C4  0101               	movlb	1	; () banked
  1235  0009C6  51D8               	movf	main@Move& (0+255),w,b
  1236  0009C8  0D01               	mullw	1
  1237  0009CA  0E64               	movlw	low main@MoveTime
  1238  0009CC  24F3               	addwf	prodl,w,c
  1239  0009CE  6ED9               	movwf	fsr2l,c
  1240  0009D0  0E01               	movlw	high main@MoveTime
  1241  0009D2  20F4               	addwfc	prodh,w,c
  1242  0009D4  6EDA               	movwf	fsr2h,c
  1243  0009D6  50DF               	movf	indf2,w,c
  1244  0009D8  EC45  F009         	call	_delay_tenth_s
  1245  0009DC                     l2471:
  1246  0009DC  0101               	movlb	1	; () banked
  1247  0009DE  07D8               	decf	main@Move& (0+255),f,b
  1248  0009E0  D790               	goto	l2455
  1249  0009E2                     l2477:
  1250  0009E2  0101               	movlb	1	; () banked
  1251  0009E4  51D4               	movf	main@mode& (0+255),w,b
  1252                           
  1253                           ; Switch size 1, requested type "space"
  1254                           ; Number of cases is 4, Range of values is 0 to 3
  1255                           ; switch strategies available:
  1256                           ; Name         Instructions Cycles
  1257                           ; simple_byte           13     7 (average)
  1258                           ;	Chosen strategy is simple_byte
  1259  0009E6  0A00               	xorlw	0	; case 0
  1260  0009E8  B4D8               	btfsc	status,2,c
  1261  0009EA  D64E               	goto	l2363
  1262  0009EC  0A01               	xorlw	1	; case 1
  1263  0009EE  B4D8               	btfsc	status,2,c
  1264  0009F0  D68E               	goto	l2383
  1265  0009F2  0A03               	xorlw	3	; case 2
  1266  0009F4  B4D8               	btfsc	status,2,c
  1267  0009F6  D6EB               	goto	l2407
  1268  0009F8  0A01               	xorlw	1	; case 3
  1269  0009FA  B4D8               	btfsc	status,2,c
  1270  0009FC  D782               	goto	l2455
  1271                           
  1272                           ; BSR set to: 1
  1273                           
  1274                           ; BSR set to: 1
  1275  0009FE  D7F1               	goto	l2477
  1276  000A00                     __end_of_main:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           intcon	equ	0xFF2
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           indf1	equ	0xFE7
  1285                           fsr1h	equ	0xFE2
  1286                           fsr1l	equ	0xFE1
  1287                           indf2	equ	0xFDF
  1288                           postinc2	equ	0xFDE
  1289                           fsr2h	equ	0xFDA
  1290                           fsr2l	equ	0xFD9
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _initRFID *****************
  1294 ;; Defined at:
  1295 ;;		line 5 in file "RFID_Reader.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;		None               void
  1302 ;; Registers used:
  1303 ;;		wreg, status,2
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1309 ;;      Params:         0       0       0       0
  1310 ;;      Locals:         1       0       0       0
  1311 ;;      Temps:          0       0       0       0
  1312 ;;      Totals:         1       0       0       0
  1313 ;;Total ram usage:        1 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text1
  1324  0013C8                     __ptext1:
  1325                           	opt stack 0
  1326  0013C8                     _initRFID:
  1327                           	opt stack 29
  1328                           
  1329                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1330                           
  1331                           ; BSR set to: 1
  1332                           ;incstack = 0
  1333  0013C8  0E01               	movlw	1
  1334  0013CA  6E0F               	movwf	_initRFID$1317,c
  1335  0013CC  5094               	movf	3988,w,c	;volatile
  1336  0013CE  C00F  FF94         	movff	_initRFID$1317,3988	;volatile
  1337                           
  1338                           ;RFID_Reader.c: 10: SPBRG=205;
  1339  0013D2  0ECD               	movlw	205
  1340  0013D4  6EAF               	movwf	4015,c	;volatile
  1341                           
  1342                           ;RFID_Reader.c: 11: SPBRGH=0;
  1343  0013D6  0E00               	movlw	0
  1344  0013D8  6EB0               	movwf	4016,c	;volatile
  1345                           
  1346                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1347  0013DA  86AA               	bsf	4010,3,c	;volatile
  1348                           
  1349                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1350  0013DC  84AC               	bsf	4012,2,c	;volatile
  1351                           
  1352                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1353  0013DE  88AB               	bsf	4011,4,c	;volatile
  1354                           
  1355                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1356  0013E0  8EAB               	bsf	4011,7,c	;volatile
  1357                           
  1358                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1359  0013E2  98AC               	bcf	4012,4,c	;volatile
  1360                           
  1361                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1362  0013E4  9CAB               	bcf	4011,6,c	;volatile
  1363  0013E6  0012               	return		;funcret
  1364  0013E8                     __end_of_initRFID:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           intcon	equ	0xFF2
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           indf1	equ	0xFE7
  1373                           fsr1h	equ	0xFE2
  1374                           fsr1l	equ	0xFE1
  1375                           indf2	equ	0xFDF
  1376                           postinc2	equ	0xFDE
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _initMotorPWM *****************
  1382 ;; Defined at:
  1383 ;;		line 4 in file "dc_motor.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		wreg, status,2
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1397 ;;      Params:         0       0       0       0
  1398 ;;      Locals:         0       0       0       0
  1399 ;;      Temps:          0       0       0       0
  1400 ;;      Totals:         0       0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    1
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_main
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text2
  1412  0012F8                     __ptext2:
  1413                           	opt stack 0
  1414  0012F8                     _initMotorPWM:
  1415                           	opt stack 29
  1416                           
  1417                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1418                           
  1419                           ;incstack = 0
  1420  0012F8  0E00               	movlw	0
  1421  0012FA  6E7F               	movwf	3967,c	;volatile
  1422                           
  1423                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1424  0012FC  0E80               	movlw	128
  1425  0012FE  6E7E               	movwf	3966,c	;volatile
  1426                           
  1427                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1428  001300  0E6F               	movlw	111
  1429  001302  6E6F               	movwf	3951,c	;volatile
  1430                           
  1431                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1432  001304  0E00               	movlw	0
  1433  001306  6E6E               	movwf	3950,c	;volatile
  1434                           
  1435                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1436  001308  0EC7               	movlw	199
  1437  00130A  6E7B               	movwf	3963,c	;volatile
  1438                           
  1439                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1440  00130C  0E00               	movlw	0
  1441  00130E  6E7A               	movwf	3962,c	;volatile
  1442                           
  1443                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1444  001310  0E00               	movlw	0
  1445  001312  6E79               	movwf	3961,c	;volatile
  1446                           
  1447                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1448  001314  0E00               	movlw	0
  1449  001316  6E78               	movwf	3960,c	;volatile
  1450                           
  1451                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1452  001318  0E00               	movlw	0
  1453  00131A  6E77               	movwf	3959,c	;volatile
  1454                           
  1455                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1456  00131C  0E00               	movlw	0
  1457  00131E  6E76               	movwf	3958,c	;volatile
  1458                           
  1459                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1460  001320  9093               	bcf	3987,0,c	;volatile
  1461                           
  1462                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1463  001322  9293               	bcf	3987,1,c	;volatile
  1464                           
  1465                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1466  001324  9493               	bcf	3987,2,c	;volatile
  1467                           
  1468                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1469  001326  9693               	bcf	3987,3,c	;volatile
  1470  001328  0012               	return		;funcret
  1471  00132A                     __end_of_initMotorPWM:
  1472                           	opt stack 0
  1473                           tblptru	equ	0xFF8
  1474                           prodh	equ	0xFF4
  1475                           prodl	equ	0xFF3
  1476                           intcon	equ	0xFF2
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           indf1	equ	0xFE7
  1480                           fsr1h	equ	0xFE2
  1481                           fsr1l	equ	0xFE1
  1482                           indf2	equ	0xFDF
  1483                           postinc2	equ	0xFDE
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _initLCD *****************
  1489 ;; Defined at:
  1490 ;;		line 38 in file "LCD.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2   32[None  ] int 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       0       0       0
  1505 ;;      Locals:         0       0       0       0
  1506 ;;      Temps:          1       0       0       0
  1507 ;;      Totals:         1       0       0       0
  1508 ;;Total ram usage:        1 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    4
  1511 ;; This function calls:
  1512 ;;		_LCDout
  1513 ;;		_SendLCD
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text3
  1520  000DDE                     __ptext3:
  1521                           	opt stack 0
  1522  000DDE                     _initLCD:
  1523                           	opt stack 26
  1524                           
  1525                           ;LCD.c: 44: TRISAbits.RA6=0;
  1526                           
  1527                           ;incstack = 0
  1528  000DDE  9C92               	bcf	3986,6,c	;volatile
  1529                           
  1530                           ;LCD.c: 45: TRISCbits.RC0=0;
  1531  000DE0  9094               	bcf	3988,0,c	;volatile
  1532                           
  1533                           ;LCD.c: 46: TRISCbits.RC1=0;
  1534  000DE2  9294               	bcf	3988,1,c	;volatile
  1535                           
  1536                           ;LCD.c: 47: TRISCbits.RC2=0;
  1537  000DE4  9494               	bcf	3988,2,c	;volatile
  1538                           
  1539                           ;LCD.c: 48: TRISDbits.RD0=0;
  1540  000DE6  9095               	bcf	3989,0,c	;volatile
  1541                           
  1542                           ;LCD.c: 49: TRISDbits.RD1=0;
  1543  000DE8  9295               	bcf	3989,1,c	;volatile
  1544                           
  1545                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1546  000DEA  0E27               	movlw	39
  1547  000DEC  6E15               	movwf	??_initLCD& (0+255),c
  1548  000DEE  0EF5               	movlw	245
  1549  000DF0                     u2027:
  1550  000DF0  2EE8               	decfsz	wreg,f,c
  1551  000DF2  D7FE               	goto	u2027
  1552  000DF4  2E15               	decfsz	??_initLCD& (0+255),f,c
  1553  000DF6  D7FC               	goto	u2027
  1554  000DF8  F000               	nop	
  1555                           
  1556                           ;LCD.c: 52: LCDout(0b0011);
  1557  000DFA  0E03               	movlw	3
  1558  000DFC  EC8C  F006         	call	_LCDout
  1559                           
  1560                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1561  000E00  0E0D               	movlw	13
  1562  000E02  6E15               	movwf	??_initLCD& (0+255),c
  1563  000E04  0EFC               	movlw	252
  1564  000E06                     u2037:
  1565  000E06  2EE8               	decfsz	wreg,f,c
  1566  000E08  D7FE               	goto	u2037
  1567  000E0A  2E15               	decfsz	??_initLCD& (0+255),f,c
  1568  000E0C  D7FC               	goto	u2037
  1569                           
  1570                           ;LCD.c: 54: LCDout(0b0011);
  1571  000E0E  0E03               	movlw	3
  1572  000E10  EC8C  F006         	call	_LCDout
  1573                           
  1574                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1575  000E14  0E85               	movlw	133
  1576  000E16                     u2047:
  1577  000E16  2EE8               	decfsz	wreg,f,c
  1578  000E18  D7FE               	goto	u2047
  1579  000E1A  F000               	nop	
  1580                           
  1581                           ;LCD.c: 56: LCDout(0b0011);
  1582  000E1C  0E03               	movlw	3
  1583  000E1E  EC8C  F006         	call	_LCDout
  1584                           
  1585                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1586  000E22  0E21               	movlw	33
  1587  000E24                     u2057:
  1588  000E24  2EE8               	decfsz	wreg,f,c
  1589  000E26  D7FE               	goto	u2057
  1590  000E28  F000               	nop	
  1591                           
  1592                           ;LCD.c: 58: LCDout(0b0010);
  1593  000E2A  0E02               	movlw	2
  1594  000E2C  EC8C  F006         	call	_LCDout
  1595                           
  1596                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1597  000E30  0E21               	movlw	33
  1598  000E32                     u2067:
  1599  000E32  2EE8               	decfsz	wreg,f,c
  1600  000E34  D7FE               	goto	u2067
  1601  000E36  F000               	nop	
  1602                           
  1603                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1604  000E38  0E00               	movlw	0
  1605  000E3A  6E13               	movwf	SendLCD@type,c
  1606  000E3C  0E28               	movlw	40
  1607  000E3E  EC95  F009         	call	_SendLCD
  1608                           
  1609                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1610  000E42  0E21               	movlw	33
  1611  000E44                     u2077:
  1612  000E44  2EE8               	decfsz	wreg,f,c
  1613  000E46  D7FE               	goto	u2077
  1614  000E48  F000               	nop	
  1615                           
  1616                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1617  000E4A  0E00               	movlw	0
  1618  000E4C  6E13               	movwf	SendLCD@type,c
  1619  000E4E  0E08               	movlw	8
  1620  000E50  EC95  F009         	call	_SendLCD
  1621                           
  1622                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1623  000E54  0E21               	movlw	33
  1624  000E56                     u2087:
  1625  000E56  2EE8               	decfsz	wreg,f,c
  1626  000E58  D7FE               	goto	u2087
  1627  000E5A  F000               	nop	
  1628                           
  1629                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1630  000E5C  0E00               	movlw	0
  1631  000E5E  6E13               	movwf	SendLCD@type,c
  1632  000E60  0E01               	movlw	1
  1633  000E62  EC95  F009         	call	_SendLCD
  1634                           
  1635                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1636  000E66  0E0D               	movlw	13
  1637  000E68  6E15               	movwf	??_initLCD& (0+255),c
  1638  000E6A  0EFC               	movlw	252
  1639  000E6C                     u2097:
  1640  000E6C  2EE8               	decfsz	wreg,f,c
  1641  000E6E  D7FE               	goto	u2097
  1642  000E70  2E15               	decfsz	??_initLCD& (0+255),f,c
  1643  000E72  D7FC               	goto	u2097
  1644                           
  1645                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1646  000E74  0E00               	movlw	0
  1647  000E76  6E13               	movwf	SendLCD@type,c
  1648  000E78  0E06               	movlw	6
  1649  000E7A  EC95  F009         	call	_SendLCD
  1650                           
  1651                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1652  000E7E  0E21               	movlw	33
  1653  000E80                     u2107:
  1654  000E80  2EE8               	decfsz	wreg,f,c
  1655  000E82  D7FE               	goto	u2107
  1656  000E84  F000               	nop	
  1657                           
  1658                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1659  000E86  0E00               	movlw	0
  1660  000E88  6E13               	movwf	SendLCD@type,c
  1661  000E8A  0E0C               	movlw	12
  1662  000E8C  EC95  F009         	call	_SendLCD
  1663                           
  1664                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1665  000E90  0E21               	movlw	33
  1666  000E92                     u2117:
  1667  000E92  2EE8               	decfsz	wreg,f,c
  1668  000E94  D7FE               	goto	u2117
  1669  000E96  F000               	nop	
  1670  000E98  0012               	return		;funcret
  1671  000E9A                     __end_of_initLCD:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           prodh	equ	0xFF4
  1675                           prodl	equ	0xFF3
  1676                           intcon	equ	0xFF2
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           indf1	equ	0xFE7
  1680                           fsr1h	equ	0xFE2
  1681                           fsr1l	equ	0xFE1
  1682                           indf2	equ	0xFDF
  1683                           postinc2	equ	0xFDE
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _SendLCD *****************
  1689 ;; Defined at:
  1690 ;;		line 27 in file "LCD.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  Byte            1    wreg     unsigned char 
  1693 ;;  type            1   18[COMRAM] unsigned char 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  Byte            1   19[COMRAM] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;		None               void
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1705 ;;      Params:         1       0       0       0
  1706 ;;      Locals:         1       0       0       0
  1707 ;;      Temps:          0       0       0       0
  1708 ;;      Totals:         2       0       0       0
  1709 ;;Total ram usage:        2 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    3
  1712 ;; This function calls:
  1713 ;;		_LCDout
  1714 ;; This function is called by:
  1715 ;;		_initLCD
  1716 ;;		_SetLine
  1717 ;;		_LCD_String
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text4
  1722  00132A                     __ptext4:
  1723                           	opt stack 0
  1724  00132A                     _SendLCD:
  1725                           	opt stack 26
  1726                           
  1727                           ;incstack = 0
  1728                           ;SendLCD@Byte stored from wreg
  1729  00132A  6E14               	movwf	SendLCD@Byte,c
  1730                           
  1731                           ;LCD.c: 30: LATAbits.LATA6=type;
  1732  00132C  B013               	btfsc	SendLCD@type,0,c
  1733  00132E  D002               	bra	u1315
  1734  001330  9C89               	bcf	3977,6,c	;volatile
  1735  001332  D001               	bra	u1316
  1736  001334                     u1315:
  1737  001334  8C89               	bsf	3977,6,c	;volatile
  1738  001336                     u1316:
  1739                           
  1740                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  1741  001336  3814               	swapf	SendLCD@Byte,w,c
  1742  001338  0B0F               	andlw	15
  1743  00133A  0B0F               	andlw	15
  1744  00133C  EC8C  F006         	call	_LCDout
  1745                           
  1746                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1747  001340  0E06               	movlw	6
  1748  001342                     u2127:
  1749  001342  2EE8               	decfsz	wreg,f,c
  1750  001344  D7FE               	goto	u2127
  1751  001346  D000               	nop2		;nop
  1752                           
  1753                           ;LCD.c: 35: LCDout(Byte&0x0F);
  1754  001348  5014               	movf	SendLCD@Byte,w,c
  1755  00134A  0B0F               	andlw	15
  1756  00134C  EC8C  F006         	call	_LCDout
  1757                           
  1758                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1759  001350  0E21               	movlw	33
  1760  001352                     u2137:
  1761  001352  2EE8               	decfsz	wreg,f,c
  1762  001354  D7FE               	goto	u2137
  1763  001356  F000               	nop	
  1764  001358  0012               	return		;funcret
  1765  00135A                     __end_of_SendLCD:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           prodh	equ	0xFF4
  1769                           prodl	equ	0xFF3
  1770                           intcon	equ	0xFF2
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           indf1	equ	0xFE7
  1774                           fsr1h	equ	0xFE2
  1775                           fsr1l	equ	0xFE1
  1776                           indf2	equ	0xFDF
  1777                           postinc2	equ	0xFDE
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function _LCDout *****************
  1783 ;; Defined at:
  1784 ;;		line 14 in file "LCD.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  number          1    wreg     unsigned char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  number          1   17[COMRAM] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;		None               void
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1798 ;;      Params:         0       0       0       0
  1799 ;;      Locals:         1       0       0       0
  1800 ;;      Temps:          3       0       0       0
  1801 ;;      Totals:         4       0       0       0
  1802 ;;Total ram usage:        4 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    2
  1805 ;; This function calls:
  1806 ;;		_E_TOG
  1807 ;; This function is called by:
  1808 ;;		_SendLCD
  1809 ;;		_initLCD
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text5
  1814  000D18                     __ptext5:
  1815                           	opt stack 0
  1816  000D18                     _LCDout:
  1817                           	opt stack 26
  1818                           
  1819                           ;incstack = 0
  1820                           ;LCDout@number stored from wreg
  1821  000D18  6E12               	movwf	LCDout@number,c
  1822                           
  1823                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  1824  000D1A  5012               	movf	LCDout@number,w,c
  1825  000D1C  6E0F               	movwf	??_LCDout& (0+255),c
  1826  000D1E  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1827  000D20  0E07               	movlw	7
  1828  000D22                     u1235:
  1829  000D22  90D8               	bcf	status,0,c
  1830  000D24  360F               	rlcf	??_LCDout,f,c
  1831  000D26  3610               	rlcf	??_LCDout+1,f,c
  1832  000D28  2EE8               	decfsz	wreg,f,c
  1833  000D2A  D7FB               	goto	u1235
  1834  000D2C  0E07               	movlw	7
  1835  000D2E  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1836  000D30                     u1245:
  1837  000D30  3410               	rlcf	??_LCDout+1,w,c
  1838  000D32  3210               	rrcf	??_LCDout+1,f,c
  1839  000D34  320F               	rrcf	??_LCDout,f,c
  1840  000D36  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1841  000D38  D7FB               	goto	u1245
  1842  000D3A  460F               	rlncf	??_LCDout,f,c
  1843  000D3C  508B               	movf	3979,w,c	;volatile
  1844  000D3E  180F               	xorwf	??_LCDout,w,c
  1845  000D40  0BFD               	andlw	-3
  1846  000D42  180F               	xorwf	??_LCDout,w,c
  1847  000D44  6E8B               	movwf	3979,c	;volatile
  1848                           
  1849                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  1850  000D46  5012               	movf	LCDout@number,w,c
  1851  000D48  6E0F               	movwf	??_LCDout& (0+255),c
  1852  000D4A  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1853  000D4C  0E06               	movlw	6
  1854  000D4E                     u1255:
  1855  000D4E  90D8               	bcf	status,0,c
  1856  000D50  360F               	rlcf	??_LCDout,f,c
  1857  000D52  3610               	rlcf	??_LCDout+1,f,c
  1858  000D54  2EE8               	decfsz	wreg,f,c
  1859  000D56  D7FB               	goto	u1255
  1860  000D58  0E07               	movlw	7
  1861  000D5A  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1862  000D5C                     u1265:
  1863  000D5C  3410               	rlcf	??_LCDout+1,w,c
  1864  000D5E  3210               	rrcf	??_LCDout+1,f,c
  1865  000D60  320F               	rrcf	??_LCDout,f,c
  1866  000D62  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1867  000D64  D7FB               	goto	u1265
  1868  000D66  460F               	rlncf	??_LCDout,f,c
  1869  000D68  460F               	rlncf	??_LCDout,f,c
  1870  000D6A  508B               	movf	3979,w,c	;volatile
  1871  000D6C  180F               	xorwf	??_LCDout,w,c
  1872  000D6E  0BFB               	andlw	-5
  1873  000D70  180F               	xorwf	??_LCDout,w,c
  1874  000D72  6E8B               	movwf	3979,c	;volatile
  1875                           
  1876                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  1877  000D74  5012               	movf	LCDout@number,w,c
  1878  000D76  6E0F               	movwf	??_LCDout& (0+255),c
  1879  000D78  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1880  000D7A  0E05               	movlw	5
  1881  000D7C                     u1275:
  1882  000D7C  90D8               	bcf	status,0,c
  1883  000D7E  360F               	rlcf	??_LCDout,f,c
  1884  000D80  3610               	rlcf	??_LCDout+1,f,c
  1885  000D82  2EE8               	decfsz	wreg,f,c
  1886  000D84  D7FB               	goto	u1275
  1887  000D86  0E07               	movlw	7
  1888  000D88  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1889  000D8A                     u1285:
  1890  000D8A  3410               	rlcf	??_LCDout+1,w,c
  1891  000D8C  3210               	rrcf	??_LCDout+1,f,c
  1892  000D8E  320F               	rrcf	??_LCDout,f,c
  1893  000D90  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1894  000D92  D7FB               	goto	u1285
  1895  000D94  508C               	movf	3980,w,c	;volatile
  1896  000D96  180F               	xorwf	??_LCDout,w,c
  1897  000D98  0BFE               	andlw	-2
  1898  000D9A  180F               	xorwf	??_LCDout,w,c
  1899  000D9C  6E8C               	movwf	3980,c	;volatile
  1900                           
  1901                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  1902  000D9E  5012               	movf	LCDout@number,w,c
  1903  000DA0  6E0F               	movwf	??_LCDout& (0+255),c
  1904  000DA2  6A10               	clrf	(??_LCDout+1)& (0+255),c
  1905  000DA4  3A0F               	swapf	??_LCDout,f,c
  1906  000DA6  3A10               	swapf	??_LCDout+1,f,c
  1907  000DA8  0EF0               	movlw	240
  1908  000DAA  1610               	andwf	??_LCDout+1,f,c
  1909  000DAC  500F               	movf	??_LCDout,w,c
  1910  000DAE  0B0F               	andlw	15
  1911  000DB0  1210               	iorwf	??_LCDout+1,f,c
  1912  000DB2  0EF0               	movlw	240
  1913  000DB4  160F               	andwf	??_LCDout,f,c
  1914  000DB6  0E07               	movlw	7
  1915  000DB8  6E11               	movwf	(??_LCDout+2)& (0+255),c
  1916  000DBA                     u1295:
  1917  000DBA  3410               	rlcf	??_LCDout+1,w,c
  1918  000DBC  3210               	rrcf	??_LCDout+1,f,c
  1919  000DBE  320F               	rrcf	??_LCDout,f,c
  1920  000DC0  2E11               	decfsz	(??_LCDout+2)& (0+255),f,c
  1921  000DC2  D7FB               	goto	u1295
  1922  000DC4  460F               	rlncf	??_LCDout,f,c
  1923  000DC6  508C               	movf	3980,w,c	;volatile
  1924  000DC8  180F               	xorwf	??_LCDout,w,c
  1925  000DCA  0BFD               	andlw	-3
  1926  000DCC  180F               	xorwf	??_LCDout,w,c
  1927  000DCE  6E8C               	movwf	3980,c	;volatile
  1928                           
  1929                           ;LCD.c: 21: E_TOG();
  1930  000DD0  EC02  F00A         	call	_E_TOG	;wreg free
  1931                           
  1932                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1933  000DD4  0E03               	movlw	3
  1934  000DD6                     u2147:
  1935  000DD6  2EE8               	decfsz	wreg,f,c
  1936  000DD8  D7FE               	goto	u2147
  1937  000DDA  F000               	nop	
  1938  000DDC  0012               	return		;funcret
  1939  000DDE                     __end_of_LCDout:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           prodh	equ	0xFF4
  1943                           prodl	equ	0xFF3
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf1	equ	0xFE7
  1948                           fsr1h	equ	0xFE2
  1949                           fsr1l	equ	0xFE1
  1950                           indf2	equ	0xFDF
  1951                           postinc2	equ	0xFDE
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _E_TOG *****************
  1957 ;; Defined at:
  1958 ;;		line 5 in file "LCD.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1972 ;;      Params:         0       0       0       0
  1973 ;;      Locals:         0       0       0       0
  1974 ;;      Temps:          0       0       0       0
  1975 ;;      Totals:         0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_LCDout
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text6
  1987  001404                     __ptext6:
  1988                           	opt stack 0
  1989  001404                     _E_TOG:
  1990                           	opt stack 26
  1991                           
  1992                           ;LCD.c: 8: LATCbits.LATC0=1;
  1993                           
  1994                           ;incstack = 0
  1995  001404  808B               	bsf	3979,0,c	;volatile
  1996                           
  1997                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1998  001406  0E03               	movlw	3
  1999  001408                     u2157:
  2000  001408  2EE8               	decfsz	wreg,f,c
  2001  00140A  D7FE               	goto	u2157
  2002  00140C  F000               	nop	
  2003                           
  2004                           ;LCD.c: 10: LATCbits.LATC0=0;
  2005  00140E  908B               	bcf	3979,0,c	;volatile
  2006  001410  0012               	return		;funcret
  2007  001412                     __end_of_E_TOG:
  2008                           	opt stack 0
  2009                           tblptru	equ	0xFF8
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           indf1	equ	0xFE7
  2016                           fsr1h	equ	0xFE2
  2017                           fsr1l	equ	0xFE1
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _initIR *****************
  2025 ;; Defined at:
  2026 ;;		line 30 in file "IR_Reading.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;		None               void
  2033 ;; Registers used:
  2034 ;;		wreg, status,2
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2040 ;;      Params:         0       0       0       0
  2041 ;;      Locals:         0       0       0       0
  2042 ;;      Temps:          0       0       0       0
  2043 ;;      Totals:         0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text7
  2055  0013A6                     __ptext7:
  2056                           	opt stack 0
  2057  0013A6                     _initIR:
  2058                           	opt stack 29
  2059                           
  2060                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2061                           
  2062                           ;incstack = 0
  2063  0013A6  9489               	bcf	3977,2,c	;volatile
  2064                           
  2065                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2066  0013A8  9689               	bcf	3977,3,c	;volatile
  2067                           
  2068                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2069  0013AA  8492               	bsf	3986,2,c	;volatile
  2070                           
  2071                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2072  0013AC  8692               	bsf	3986,3,c	;volatile
  2073                           
  2074                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2075  0013AE  94B8               	bcf	4024,2,c	;volatile
  2076                           
  2077                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2078  0013B0  96B8               	bcf	4024,3,c	;volatile
  2079                           
  2080                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2081  0013B2  9CB8               	bcf	4024,6,c	;volatile
  2082                           
  2083                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2084  0013B4  9EB8               	bcf	4024,7,c	;volatile
  2085                           
  2086                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2087  0013B6  0E06               	movlw	6
  2088  0013B8  6E63               	movwf	3939,c	;volatile
  2089                           
  2090                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2091  0013BA  0E06               	movlw	6
  2092  0013BC  6E62               	movwf	3938,c	;volatile
  2093                           
  2094                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2095  0013BE  9096               	bcf	3990,0,c	;volatile
  2096                           
  2097                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2098  0013C0  9296               	bcf	3990,1,c	;volatile
  2099                           
  2100                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2101  0013C2  0E59               	movlw	89
  2102  0013C4  6EB7               	movwf	4023,c	;volatile
  2103  0013C6  0012               	return		;funcret
  2104  0013C8                     __end_of_initIR:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           intcon	equ	0xFF2
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           indf1	equ	0xFE7
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _fullSpeedBack *****************
  2122 ;; Defined at:
  2123 ;;		line 125 in file "dc_motor.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2126 ;;		 -> main@mL(9), 
  2127 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2128 ;;		 -> main@mR(9), 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2140 ;;      Params:         4       0       0       0
  2141 ;;      Locals:         0       0       0       0
  2142 ;;      Temps:          0       0       0       0
  2143 ;;      Totals:         4       0       0       0
  2144 ;;Total ram usage:        4 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    4
  2147 ;; This function calls:
  2148 ;;		_fullSpeedAhead
  2149 ;; This function is called by:
  2150 ;;		_main
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text8
  2155  0012C2                     __ptext8:
  2156                           	opt stack 0
  2157  0012C2                     _fullSpeedBack:
  2158                           	opt stack 26
  2159                           
  2160                           ;dc_motor.c: 128: mL->direction=0;
  2161                           
  2162                           ;incstack = 0
  2163  0012C2  EE20 F001          	lfsr	2,1
  2164  0012C6  502B               	movf	fullSpeedBack@mL,w,c
  2165  0012C8  26D9               	addwf	fsr2l,f,c
  2166  0012CA  502C               	movf	fullSpeedBack@mL+1,w,c
  2167  0012CC  22DA               	addwfc	fsr2h,f,c
  2168  0012CE  0E00               	movlw	0
  2169  0012D0  6EDF               	movwf	indf2,c
  2170                           
  2171                           ;dc_motor.c: 129: mR->direction=0;
  2172  0012D2  EE20 F001          	lfsr	2,1
  2173  0012D6  502D               	movf	fullSpeedBack@mR,w,c
  2174  0012D8  26D9               	addwf	fsr2l,f,c
  2175  0012DA  502E               	movf	fullSpeedBack@mR+1,w,c
  2176  0012DC  22DA               	addwfc	fsr2h,f,c
  2177  0012DE  0E00               	movlw	0
  2178  0012E0  6EDF               	movwf	indf2,c
  2179                           
  2180                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2181  0012E2  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2182  0012E6  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2183  0012EA  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2184  0012EE  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2185  0012F2  ECA7  F008         	call	_fullSpeedAhead	;wreg free
  2186  0012F6  0012               	return		;funcret
  2187  0012F8                     __end_of_fullSpeedBack:
  2188                           	opt stack 0
  2189                           tblptru	equ	0xFF8
  2190                           prodh	equ	0xFF4
  2191                           prodl	equ	0xFF3
  2192                           intcon	equ	0xFF2
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf1	equ	0xFE7
  2196                           fsr1h	equ	0xFE2
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _enableSensor *****************
  2205 ;; Defined at:
  2206 ;;		line 106 in file "IR_Reading.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  sensor          1    wreg     unsigned char 
  2209 ;;  status          1   14[COMRAM] unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  sensor          1   15[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;		None               void
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2221 ;;      Params:         1       0       0       0
  2222 ;;      Locals:         1       0       0       0
  2223 ;;      Temps:          0       0       0       0
  2224 ;;      Totals:         2       0       0       0
  2225 ;;Total ram usage:        2 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    1
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_main
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text9
  2236  00135A                     __ptext9:
  2237                           	opt stack 0
  2238  00135A                     _enableSensor:
  2239                           	opt stack 29
  2240                           
  2241                           ;incstack = 0
  2242                           ;enableSensor@sensor stored from wreg
  2243  00135A  6E10               	movwf	enableSensor@sensor,c
  2244                           
  2245                           ;IR_Reading.c: 108: if (sensor==0){
  2246  00135C  5010               	movf	enableSensor@sensor,w,c
  2247  00135E  A4D8               	btfss	status,2,c
  2248  001360  D006               	goto	l2031
  2249                           
  2250                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2251  001362  B00F               	btfsc	enableSensor@status,0,c
  2252  001364  D002               	bra	u1405
  2253  001366  908D               	bcf	3981,0,c	;volatile
  2254  001368  D001               	bra	u1406
  2255  00136A                     u1405:
  2256  00136A  808D               	bsf	3981,0,c	;volatile
  2257  00136C                     u1406:
  2258                           
  2259                           ;IR_Reading.c: 110: } else if (sensor==1){
  2260  00136C  0012               	return	
  2261  00136E                     l2031:
  2262  00136E  0410               	decf	enableSensor@sensor,w,c
  2263  001370  A4D8               	btfss	status,2,c
  2264  001372  0012               	return	
  2265                           
  2266                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2267  001374  B00F               	btfsc	enableSensor@status,0,c
  2268  001376  D002               	bra	u1425
  2269  001378  928D               	bcf	3981,1,c	;volatile
  2270  00137A  D001               	bra	u1426
  2271  00137C                     u1425:
  2272  00137C  828D               	bsf	3981,1,c	;volatile
  2273  00137E                     u1426:
  2274  00137E  0012               	return	
  2275  001380                     __end_of_enableSensor:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           postinc0	equ	0xFEE
  2282                           wreg	equ	0xFE8
  2283                           indf1	equ	0xFE7
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           indf2	equ	0xFDF
  2287                           postinc2	equ	0xFDE
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _delay_s *****************
  2293 ;; Defined at:
  2294 ;;		line 10 in file "Movement.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  seconds         1    wreg     unsigned char 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  seconds         1   15[COMRAM] unsigned char 
  2299 ;;  i               2   16[COMRAM] unsigned int 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2309 ;;      Params:         0       0       0       0
  2310 ;;      Locals:         3       0       0       0
  2311 ;;      Temps:          1       0       0       0
  2312 ;;      Totals:         4       0       0       0
  2313 ;;Total ram usage:        4 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    1
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text10
  2324  001252                     __ptext10:
  2325                           	opt stack 0
  2326  001252                     _delay_s:
  2327                           	opt stack 29
  2328                           
  2329                           ;incstack = 0
  2330                           ;delay_s@seconds stored from wreg
  2331  001252  6E10               	movwf	delay_s@seconds,c
  2332                           
  2333                           ;Movement.c: 11: unsigned int i=0;
  2334  001254  0E00               	movlw	0
  2335  001256  6E12               	movwf	delay_s@i+1,c
  2336  001258  0E00               	movlw	0
  2337  00125A  6E11               	movwf	delay_s@i,c
  2338                           
  2339                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  2340  00125C  0E00               	movlw	0
  2341  00125E  6E12               	movwf	delay_s@i+1,c
  2342  001260  0E01               	movlw	1
  2343  001262  6E11               	movwf	delay_s@i,c
  2344  001264  D009               	goto	l2021
  2345  001266                     l2017:
  2346                           
  2347                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  2348  001266  0E82               	movlw	130
  2349  001268  6E0F               	movwf	??_delay_s& (0+255),c
  2350  00126A  0EDE               	movlw	222
  2351  00126C                     u2167:
  2352  00126C  2EE8               	decfsz	wreg,f,c
  2353  00126E  D7FE               	goto	u2167
  2354  001270  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2355  001272  D7FC               	goto	u2167
  2356  001274  4A11               	infsnz	delay_s@i,f,c
  2357  001276  2A12               	incf	delay_s@i+1,f,c
  2358  001278                     l2021:
  2359  001278  5010               	movf	delay_s@seconds,w,c
  2360  00127A  0D14               	mullw	20
  2361  00127C  5011               	movf	delay_s@i,w,c
  2362  00127E  5CF3               	subwf	prodl,w,c
  2363  001280  5012               	movf	delay_s@i+1,w,c
  2364  001282  58F4               	subwfb	prodh,w,c
  2365  001284  A0D8               	btfss	status,0,c
  2366  001286  0012               	return	
  2367  001288  D7EE               	goto	l2017
  2368  00128A                     __end_of_delay_s:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           intcon	equ	0xFF2
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           indf1	equ	0xFE7
  2377                           fsr1h	equ	0xFE2
  2378                           fsr1l	equ	0xFE1
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _VerifySignal *****************
  2386 ;; Defined at:
  2387 ;;		line 56 in file "RFID_Reader.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  2390 ;;		 -> ReceivedString(16), 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  hexByte         2   23[COMRAM] unsigned int 
  2393 ;;  i               1   25[COMRAM] unsigned char 
  2394 ;;  checksum        1   22[COMRAM] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      unsigned char 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2404 ;;      Params:         2       0       0       0
  2405 ;;      Locals:         4       0       0       0
  2406 ;;      Temps:          6       0       0       0
  2407 ;;      Totals:        12       0       0       0
  2408 ;;Total ram usage:       12 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    1
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_main
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text11
  2419  000E9A                     __ptext11:
  2420                           	opt stack 0
  2421  000E9A                     _VerifySignal:
  2422                           	opt stack 29
  2423                           
  2424                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  2425                           
  2426                           ;incstack = 0
  2427  000E9A  0E00               	movlw	0
  2428  000E9C  6E17               	movwf	VerifySignal@checksum,c
  2429                           
  2430                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  2431  000E9E  0E00               	movlw	0
  2432  000EA0  6E19               	movwf	VerifySignal@hexByte+1,c
  2433  000EA2  0E00               	movlw	0
  2434  000EA4  6E18               	movwf	VerifySignal@hexByte,c
  2435                           
  2436                           ;RFID_Reader.c: 59: unsigned char i=0;
  2437  000EA6  0E00               	movlw	0
  2438  000EA8  6E1A               	movwf	VerifySignal@i,c
  2439                           
  2440                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  2441  000EAA  EE20 F004          	lfsr	2,4
  2442  000EAE  500F               	movf	VerifySignal@Signal,w,c
  2443  000EB0  26D9               	addwf	fsr2l,f,c
  2444  000EB2  5010               	movf	VerifySignal@Signal+1,w,c
  2445  000EB4  22DA               	addwfc	fsr2h,f,c
  2446  000EB6  50DF               	movf	indf2,w,c
  2447  000EB8  6E11               	movwf	??_VerifySignal& (0+255),c
  2448  000EBA  EE20 F003          	lfsr	2,3
  2449  000EBE  500F               	movf	VerifySignal@Signal,w,c
  2450  000EC0  26D9               	addwf	fsr2l,f,c
  2451  000EC2  5010               	movf	VerifySignal@Signal+1,w,c
  2452  000EC4  22DA               	addwfc	fsr2h,f,c
  2453  000EC6  50DF               	movf	indf2,w,c
  2454  000EC8  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  2455  000ECA  5012               	movf	??_VerifySignal+1,w,c
  2456  000ECC  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2457  000ECE  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  2458  000ED0  5011               	movf	??_VerifySignal,w,c
  2459  000ED2  2413               	addwf	??_VerifySignal+2,w,c
  2460  000ED4  6E18               	movwf	VerifySignal@hexByte,c
  2461  000ED6  0E00               	movlw	0
  2462  000ED8  2014               	addwfc	??_VerifySignal+3,w,c
  2463  000EDA  6E19               	movwf	VerifySignal@hexByte+1,c
  2464                           
  2465                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2466  000EDC  EE20 F002          	lfsr	2,2
  2467  000EE0  500F               	movf	VerifySignal@Signal,w,c
  2468  000EE2  26D9               	addwf	fsr2l,f,c
  2469  000EE4  5010               	movf	VerifySignal@Signal+1,w,c
  2470  000EE6  22DA               	addwfc	fsr2h,f,c
  2471  000EE8  50DF               	movf	indf2,w,c
  2472  000EEA  1818               	xorwf	VerifySignal@hexByte,w,c
  2473  000EEC  6E17               	movwf	VerifySignal@checksum,c
  2474                           
  2475                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  2476  000EEE  0E05               	movlw	5
  2477  000EF0  6E1A               	movwf	VerifySignal@i,c
  2478  000EF2                     l2309:
  2479  000EF2  0E09               	movlw	9
  2480  000EF4  641A               	cpfsgt	VerifySignal@i,c
  2481  000EF6  D001               	goto	l2313
  2482  000EF8  D028               	goto	l2321
  2483  000EFA                     l2313:
  2484                           
  2485                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  2486  000EFA  501A               	movf	VerifySignal@i,w,c
  2487  000EFC  6E11               	movwf	??_VerifySignal& (0+255),c
  2488  000EFE  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  2489  000F00  0E01               	movlw	1
  2490  000F02  2611               	addwf	??_VerifySignal,f,c
  2491  000F04  0E00               	movlw	0
  2492  000F06  2212               	addwfc	??_VerifySignal+1,f,c
  2493  000F08  5011               	movf	??_VerifySignal,w,c
  2494  000F0A  240F               	addwf	VerifySignal@Signal,w,c
  2495  000F0C  6ED9               	movwf	fsr2l,c
  2496  000F0E  5012               	movf	??_VerifySignal+1,w,c
  2497  000F10  2010               	addwfc	VerifySignal@Signal+1,w,c
  2498  000F12  6EDA               	movwf	fsr2h,c
  2499  000F14  50DF               	movf	indf2,w,c
  2500  000F16  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  2501  000F18  501A               	movf	VerifySignal@i,w,c
  2502  000F1A  0D01               	mullw	1
  2503  000F1C  50F3               	movf	prodl,w,c
  2504  000F1E  240F               	addwf	VerifySignal@Signal,w,c
  2505  000F20  6ED9               	movwf	fsr2l,c
  2506  000F22  50F4               	movf	prodh,w,c
  2507  000F24  2010               	addwfc	VerifySignal@Signal+1,w,c
  2508  000F26  6EDA               	movwf	fsr2h,c
  2509  000F28  50DF               	movf	indf2,w,c
  2510  000F2A  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  2511  000F2C  5014               	movf	??_VerifySignal+3,w,c
  2512  000F2E  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  2513  000F30  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  2514  000F32  5013               	movf	??_VerifySignal+2,w,c
  2515  000F34  2415               	addwf	??_VerifySignal+4,w,c
  2516  000F36  6E18               	movwf	VerifySignal@hexByte,c
  2517  000F38  0E00               	movlw	0
  2518  000F3A  2016               	addwfc	??_VerifySignal+5,w,c
  2519  000F3C  6E19               	movwf	VerifySignal@hexByte+1,c
  2520                           
  2521                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  2522  000F3E  5017               	movf	VerifySignal@checksum,w,c
  2523  000F40  1818               	xorwf	VerifySignal@hexByte,w,c
  2524  000F42  6E17               	movwf	VerifySignal@checksum,c
  2525  000F44  0E02               	movlw	2
  2526  000F46  261A               	addwf	VerifySignal@i,f,c
  2527  000F48  D7D4               	goto	l2309
  2528  000F4A                     l2321:
  2529                           
  2530                           ;RFID_Reader.c: 69: }
  2531                           ;RFID_Reader.c: 72: return 1;
  2532  000F4A  0E01               	movlw	1
  2533  000F4C  0012               	return	
  2534  000F4E                     __end_of_VerifySignal:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon	equ	0xFF2
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           indf1	equ	0xFE7
  2543                           fsr1h	equ	0xFE2
  2544                           fsr1l	equ	0xFE1
  2545                           indf2	equ	0xFDF
  2546                           postinc2	equ	0xFDE
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _ScanWithRange *****************
  2552 ;; Defined at:
  2553 ;;		line 93 in file "Movement.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2556 ;;		 -> main@mL(9), 
  2557 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2558 ;;		 -> main@mR(9), 
  2559 ;;  tenth_second    1   50[COMRAM] unsigned char 
  2560 ;;  MoveTime        2   51[COMRAM] PTR unsigned char 
  2561 ;;		 -> main@MoveTime(100), 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  SensorResult    4   72[COMRAM] unsigned int [2]
  2564 ;;  SensorResult    4   68[COMRAM] unsigned int [2]
  2565 ;;  SensorResult    4   64[COMRAM] unsigned int [2]
  2566 ;;  DirectionFou    2   62[COMRAM] const unsigned int 
  2567 ;;  DirectionFou    2   60[COMRAM] const unsigned int 
  2568 ;;  ClearSignalT    2   58[COMRAM] const unsigned int 
  2569 ;;  ResultFalseR    1   57[COMRAM] unsigned char 
  2570 ;;  ResultFalseC    1   56[COMRAM] unsigned char 
  2571 ;;  ResultFalseL    1   55[COMRAM] unsigned char 
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      unsigned char 
  2574 ;; Registers used:
  2575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2581 ;;      Params:         7       0       0       0
  2582 ;;      Locals:        21       0       0       0
  2583 ;;      Temps:          2       0       0       0
  2584 ;;      Totals:        30       0       0       0
  2585 ;;Total ram usage:       30 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    5
  2588 ;; This function calls:
  2589 ;;		___awdiv
  2590 ;;		_delay_tenth_s
  2591 ;;		_grabLeftIR
  2592 ;;		_grabRightIR
  2593 ;;		_stop
  2594 ;;		_turnLeft
  2595 ;;		_turnRight
  2596 ;; This function is called by:
  2597 ;;		_main
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text12
  2602  0000B2                     __ptext12:
  2603                           	opt stack 0
  2604  0000B2                     _ScanWithRange:
  2605                           	opt stack 25
  2606                           
  2607                           ;Movement.c: 96: unsigned int SensorResultL[2];
  2608                           ;Movement.c: 97: unsigned int SensorResultC[2];
  2609                           ;Movement.c: 98: unsigned int SensorResultR[2];
  2610                           ;Movement.c: 99: unsigned char ResultFalseL=0;
  2611                           
  2612                           ;incstack = 0
  2613  0000B2  0E00               	movlw	0
  2614  0000B4  6E38               	movwf	ScanWithRange@ResultFalseL,c
  2615                           
  2616                           ;Movement.c: 100: unsigned char ResultFalseC=0;
  2617  0000B6  0E00               	movlw	0
  2618  0000B8  6E39               	movwf	ScanWithRange@ResultFalseC,c
  2619                           
  2620                           ;Movement.c: 101: unsigned char ResultFalseR=0;
  2621  0000BA  0E00               	movlw	0
  2622  0000BC  6E3A               	movwf	ScanWithRange@ResultFalseR,c
  2623                           
  2624                           ;Movement.c: 104: const unsigned int ClearSignalTolerance=200;
  2625  0000BE  0E00               	movlw	0
  2626  0000C0  6E3C               	movwf	ScanWithRange@ClearSignalTolerance+1,c
  2627  0000C2  0EC8               	movlw	200
  2628  0000C4  6E3B               	movwf	ScanWithRange@ClearSignalTolerance,c
  2629                           
  2630                           ;Movement.c: 105: const unsigned int DirectionFoundLimit=1500;
  2631  0000C6  0E05               	movlw	5
  2632  0000C8  6E3E               	movwf	ScanWithRange@DirectionFoundLimit+1,c
  2633  0000CA  0EDC               	movlw	220
  2634  0000CC  6E3D               	movwf	ScanWithRange@DirectionFoundLimit,c
  2635                           
  2636                           ;Movement.c: 106: const unsigned int DirectionFoundTolerance=500;
  2637  0000CE  0E01               	movlw	1
  2638  0000D0  6E40               	movwf	ScanWithRange@DirectionFoundTolerance+1,c
  2639  0000D2  0EF4               	movlw	244
  2640  0000D4  6E3F               	movwf	ScanWithRange@DirectionFoundTolerance,c
  2641                           
  2642                           ;Movement.c: 113: stop(mL,mR);
  2643  0000D6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2644  0000DA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2645  0000DE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2646  0000E2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2647  0000E6  ECA7  F007         	call	_stop	;wreg free
  2648                           
  2649                           ;Movement.c: 114: SensorResultC[0]=grabLeftIR();
  2650  0000EA  EC6C  F008         	call	_grabLeftIR	;wreg free
  2651  0000EE  C00F  F045         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2652  0000F2  C010  F046         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2653                           
  2654                           ;Movement.c: 115: SensorResultC[1]=grabRightIR();
  2655  0000F6  EC31  F008         	call	_grabRightIR	;wreg free
  2656  0000FA  C00F  F047         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2657  0000FE  C010  F048         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2658                           
  2659                           ;Movement.c: 118: turnLeft(mL,mR);
  2660  000102  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2661  000106  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2662  00010A  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2663  00010E  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2664  000112  EC04  F009         	call	_turnLeft	;wreg free
  2665                           
  2666                           ;Movement.c: 119: delay_tenth_s(tenth_seconds);
  2667  000116  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2668  000118  EC45  F009         	call	_delay_tenth_s
  2669                           
  2670                           ;Movement.c: 120: MoveTime += tenth_seconds;
  2671  00011C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2672  00011E  0D01               	mullw	1
  2673  000120  50F3               	movf	prodl,w,c
  2674  000122  2634               	addwf	ScanWithRange@MoveTime,f,c
  2675  000124  50F4               	movf	prodh,w,c
  2676  000126  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2677                           
  2678                           ;Movement.c: 122: stop(mL,mR);
  2679  000128  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2680  00012C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2681  000130  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2682  000134  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2683  000138  ECA7  F007         	call	_stop	;wreg free
  2684                           
  2685                           ;Movement.c: 123: SensorResultL[0]=grabLeftIR();
  2686  00013C  EC6C  F008         	call	_grabLeftIR	;wreg free
  2687  000140  C00F  F041         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2688  000144  C010  F042         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2689                           
  2690                           ;Movement.c: 124: SensorResultL[1]=grabRightIR();
  2691  000148  EC31  F008         	call	_grabRightIR	;wreg free
  2692  00014C  C00F  F043         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2693  000150  C010  F044         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2694                           
  2695                           ;Movement.c: 127: turnRight(mL,mR);
  2696  000154  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  2697  000158  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2698  00015C  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  2699  000160  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2700  000164  ECDF  F008         	call	_turnRight	;wreg free
  2701                           
  2702                           ;Movement.c: 128: delay_tenth_s(2*tenth_seconds);
  2703  000168  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2704  00016A  0D02               	mullw	2
  2705  00016C  50F3               	movf	prodl,w,c
  2706  00016E  EC45  F009         	call	_delay_tenth_s
  2707                           
  2708                           ;Movement.c: 129: MoveTime -= 2*tenth_seconds;
  2709  000172  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2710  000174  0D02               	mullw	2
  2711  000176  50F3               	movf	prodl,w,c
  2712  000178  5E34               	subwf	ScanWithRange@MoveTime,f,c
  2713  00017A  50F4               	movf	prodh,w,c
  2714  00017C  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  2715                           
  2716                           ;Movement.c: 131: stop(mL,mR);
  2717  00017E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2718  000182  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2719  000186  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2720  00018A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2721  00018E  ECA7  F007         	call	_stop	;wreg free
  2722                           
  2723                           ;Movement.c: 132: SensorResultR[0]=grabLeftIR();
  2724  000192  EC6C  F008         	call	_grabLeftIR	;wreg free
  2725  000196  C00F  F049         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2726  00019A  C010  F04A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2727                           
  2728                           ;Movement.c: 133: SensorResultR[1]=grabRightIR();
  2729  00019E  EC31  F008         	call	_grabRightIR	;wreg free
  2730  0001A2  C00F  F04B         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2731  0001A6  C010  F04C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2732                           
  2733                           ;Movement.c: 144: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  2734  0001AA  5041               	movf	ScanWithRange@SensorResultL,w,c
  2735  0001AC  2443               	addwf	ScanWithRange@SensorResultL+2,w,c
  2736  0001AE  6E36               	movwf	??_ScanWithRange& (0+255),c
  2737  0001B0  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2738  0001B2  2044               	addwfc	ScanWithRange@SensorResultL+3,w,c
  2739  0001B4  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2740  0001B6  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2741  0001B8  5C36               	subwf	??_ScanWithRange,w,c
  2742  0001BA  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2743  0001BC  5837               	subwfb	??_ScanWithRange+1,w,c
  2744  0001BE  B0D8               	btfsc	status,0,c
  2745  0001C0  D00A               	goto	l2071
  2746                           
  2747                           ;Movement.c: 145: SensorResultL[0]=0;
  2748  0001C2  0E00               	movlw	0
  2749  0001C4  6E42               	movwf	ScanWithRange@SensorResultL+1,c
  2750  0001C6  0E00               	movlw	0
  2751  0001C8  6E41               	movwf	ScanWithRange@SensorResultL,c
  2752                           
  2753                           ;Movement.c: 146: SensorResultL[1]=0;
  2754  0001CA  0E00               	movlw	0
  2755  0001CC  6E44               	movwf	ScanWithRange@SensorResultL+3,c
  2756  0001CE  0E00               	movlw	0
  2757  0001D0  6E43               	movwf	ScanWithRange@SensorResultL+2,c
  2758                           
  2759                           ;Movement.c: 147: ResultFalseL=1;
  2760  0001D2  0E01               	movlw	1
  2761  0001D4  6E38               	movwf	ScanWithRange@ResultFalseL,c
  2762  0001D6                     l2071:
  2763                           
  2764                           ;Movement.c: 148: }
  2765                           ;Movement.c: 149: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  2766  0001D6  5045               	movf	ScanWithRange@SensorResultC,w,c
  2767  0001D8  2447               	addwf	ScanWithRange@SensorResultC+2,w,c
  2768  0001DA  6E36               	movwf	??_ScanWithRange& (0+255),c
  2769  0001DC  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2770  0001DE  2048               	addwfc	ScanWithRange@SensorResultC+3,w,c
  2771  0001E0  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2772  0001E2  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2773  0001E4  5C36               	subwf	??_ScanWithRange,w,c
  2774  0001E6  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2775  0001E8  5837               	subwfb	??_ScanWithRange+1,w,c
  2776  0001EA  B0D8               	btfsc	status,0,c
  2777  0001EC  D00A               	goto	l2075
  2778                           
  2779                           ;Movement.c: 150: SensorResultC[0]=0;
  2780  0001EE  0E00               	movlw	0
  2781  0001F0  6E46               	movwf	ScanWithRange@SensorResultC+1,c
  2782  0001F2  0E00               	movlw	0
  2783  0001F4  6E45               	movwf	ScanWithRange@SensorResultC,c
  2784                           
  2785                           ;Movement.c: 151: SensorResultC[1]=0;
  2786  0001F6  0E00               	movlw	0
  2787  0001F8  6E48               	movwf	ScanWithRange@SensorResultC+3,c
  2788  0001FA  0E00               	movlw	0
  2789  0001FC  6E47               	movwf	ScanWithRange@SensorResultC+2,c
  2790                           
  2791                           ;Movement.c: 152: ResultFalseC=1;
  2792  0001FE  0E01               	movlw	1
  2793  000200  6E39               	movwf	ScanWithRange@ResultFalseC,c
  2794  000202                     l2075:
  2795                           
  2796                           ;Movement.c: 153: }
  2797                           ;Movement.c: 154: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  2798  000202  5049               	movf	ScanWithRange@SensorResultR,w,c
  2799  000204  244B               	addwf	ScanWithRange@SensorResultR+2,w,c
  2800  000206  6E36               	movwf	??_ScanWithRange& (0+255),c
  2801  000208  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  2802  00020A  204C               	addwfc	ScanWithRange@SensorResultR+3,w,c
  2803  00020C  6E37               	movwf	(??_ScanWithRange+1)& (0+255),c
  2804  00020E  503B               	movf	ScanWithRange@ClearSignalTolerance,w,c
  2805  000210  5C36               	subwf	??_ScanWithRange,w,c
  2806  000212  503C               	movf	ScanWithRange@ClearSignalTolerance+1,w,c
  2807  000214  5837               	subwfb	??_ScanWithRange+1,w,c
  2808  000216  B0D8               	btfsc	status,0,c
  2809  000218  D00A               	goto	l2079
  2810                           
  2811                           ;Movement.c: 155: SensorResultR[0]=0;
  2812  00021A  0E00               	movlw	0
  2813  00021C  6E4A               	movwf	ScanWithRange@SensorResultR+1,c
  2814  00021E  0E00               	movlw	0
  2815  000220  6E49               	movwf	ScanWithRange@SensorResultR,c
  2816                           
  2817                           ;Movement.c: 156: SensorResultR[1]=0;
  2818  000222  0E00               	movlw	0
  2819  000224  6E4C               	movwf	ScanWithRange@SensorResultR+3,c
  2820  000226  0E00               	movlw	0
  2821  000228  6E4B               	movwf	ScanWithRange@SensorResultR+2,c
  2822                           
  2823                           ;Movement.c: 157: ResultFalseR=1;
  2824  00022A  0E01               	movlw	1
  2825  00022C  6E3A               	movwf	ScanWithRange@ResultFalseR,c
  2826  00022E                     l2079:
  2827                           
  2828                           ;Movement.c: 158: }
  2829                           ;Movement.c: 160: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2830  00022E  5039               	movf	ScanWithRange@ResultFalseC,w,c
  2831  000230  C038  F036         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2832  000234  6A37               	clrf	(??_ScanWithRange+1)& (0+255),c
  2833  000236  2636               	addwf	??_ScanWithRange,f,c
  2834  000238  0E00               	movlw	0
  2835  00023A  2237               	addwfc	??_ScanWithRange+1,f,c
  2836  00023C  503A               	movf	ScanWithRange@ResultFalseR,w,c
  2837  00023E  2636               	addwf	??_ScanWithRange,f,c
  2838  000240  0E00               	movlw	0
  2839  000242  2237               	addwfc	??_ScanWithRange+1,f,c
  2840  000244  0E03               	movlw	3
  2841  000246  1836               	xorwf	??_ScanWithRange,w,c
  2842  000248  1037               	iorwf	??_ScanWithRange+1,w,c
  2843  00024A  A4D8               	btfss	status,2,c
  2844  00024C  D021               	goto	l2095
  2845                           
  2846                           ;Movement.c: 162: turnLeft(mL,mR);
  2847  00024E  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2848  000252  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2849  000256  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2850  00025A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2851  00025E  EC04  F009         	call	_turnLeft	;wreg free
  2852                           
  2853                           ;Movement.c: 163: delay_tenth_s(5*tenth_seconds);
  2854  000262  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2855  000264  0D05               	mullw	5
  2856  000266  50F3               	movf	prodl,w,c
  2857  000268  EC45  F009         	call	_delay_tenth_s
  2858                           
  2859                           ;Movement.c: 164: MoveTime += 5*tenth_seconds;
  2860  00026C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2861  00026E  0D05               	mullw	5
  2862  000270  50F3               	movf	prodl,w,c
  2863  000272  2634               	addwf	ScanWithRange@MoveTime,f,c
  2864  000274  50F4               	movf	prodh,w,c
  2865  000276  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2866                           
  2867                           ;Movement.c: 165: stop(mL,mR);
  2868  000278  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2869  00027C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2870  000280  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2871  000284  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2872  000288  ECA7  F007         	call	_stop	;wreg free
  2873                           
  2874                           ;Movement.c: 166: return 3;
  2875  00028C  0E03               	movlw	3
  2876  00028E  0012               	return	
  2877  000290                     l2095:
  2878                           
  2879                           ;Movement.c: 169: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  2880                           ;Movement.c: 170: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2881                           ;Movement.c: 171: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2882  000290  5041               	movf	ScanWithRange@SensorResultL,w,c
  2883  000292  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2884  000294  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2885  000296  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2886  000298  B0D8               	btfsc	status,0,c
  2887  00029A  D04D               	goto	l2117
  2888  00029C  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  2889  00029E  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2890  0002A0  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  2891  0002A2  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2892  0002A4  B0D8               	btfsc	status,0,c
  2893  0002A6  D047               	goto	l2117
  2894  0002A8  EE20  F043         	lfsr	2,ScanWithRange@SensorResultL+2
  2895  0002AC  CFDE F036          	movff	postinc2,??_ScanWithRange
  2896  0002B0  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  2897  0002B4  1E36               	comf	??_ScanWithRange,f,c
  2898  0002B6  1E37               	comf	??_ScanWithRange+1,f,c
  2899  0002B8  4A36               	infsnz	??_ScanWithRange,f,c
  2900  0002BA  2A37               	incf	??_ScanWithRange+1,f,c
  2901  0002BC  5041               	movf	ScanWithRange@SensorResultL,w,c
  2902  0002BE  2636               	addwf	??_ScanWithRange,f,c
  2903  0002C0  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  2904  0002C2  2237               	addwfc	??_ScanWithRange+1,f,c
  2905  0002C4  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2906  0002C6  5C36               	subwf	??_ScanWithRange,w,c
  2907  0002C8  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2908  0002CA  5837               	subwfb	??_ScanWithRange+1,w,c
  2909  0002CC  A0D8               	btfss	status,0,c
  2910  0002CE  D012               	goto	l2103
  2911  0002D0  C041  F036         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2912  0002D4  C042  F037         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2913  0002D8  1E36               	comf	??_ScanWithRange,f,c
  2914  0002DA  1E37               	comf	??_ScanWithRange+1,f,c
  2915  0002DC  4A36               	infsnz	??_ScanWithRange,f,c
  2916  0002DE  2A37               	incf	??_ScanWithRange+1,f,c
  2917  0002E0  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  2918  0002E2  2636               	addwf	??_ScanWithRange,f,c
  2919  0002E4  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  2920  0002E6  2237               	addwfc	??_ScanWithRange+1,f,c
  2921  0002E8  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2922  0002EA  5C36               	subwf	??_ScanWithRange,w,c
  2923  0002EC  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2924  0002EE  5837               	subwfb	??_ScanWithRange+1,w,c
  2925  0002F0  B0D8               	btfsc	status,0,c
  2926  0002F2  D021               	goto	l2117
  2927  0002F4                     l2103:
  2928                           
  2929                           ;Movement.c: 173: turnLeft(mL,mR);
  2930  0002F4  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  2931  0002F8  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2932  0002FC  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  2933  000300  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2934  000304  EC04  F009         	call	_turnLeft	;wreg free
  2935                           
  2936                           ;Movement.c: 174: delay_tenth_s(2*(tenth_seconds));
  2937  000308  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2938  00030A  0D02               	mullw	2
  2939  00030C  50F3               	movf	prodl,w,c
  2940  00030E  EC45  F009         	call	_delay_tenth_s
  2941                           
  2942                           ;Movement.c: 175: MoveTime += 2*tenth_seconds;
  2943  000312  5033               	movf	ScanWithRange@tenth_seconds,w,c
  2944  000314  0D02               	mullw	2
  2945  000316  50F3               	movf	prodl,w,c
  2946  000318  2634               	addwf	ScanWithRange@MoveTime,f,c
  2947  00031A  50F4               	movf	prodh,w,c
  2948  00031C  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  2949                           
  2950                           ;Movement.c: 176: stop(mL,mR);
  2951  00031E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2952  000322  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2953  000326  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2954  00032A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2955  00032E  ECA7  F007         	call	_stop	;wreg free
  2956  000332                     l2111:
  2957                           
  2958                           ;Movement.c: 177: return 2;
  2959  000332  0E02               	movlw	2
  2960  000334  0012               	return	
  2961  000336                     l2117:
  2962                           
  2963                           ;Movement.c: 179: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  2964                           ;Movement.c: 180: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  2965  000336  5045               	movf	ScanWithRange@SensorResultC,w,c
  2966  000338  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2967  00033A  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2968  00033C  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2969  00033E  B0D8               	btfsc	status,0,c
  2970  000340  D04A               	goto	l2139
  2971  000342  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  2972  000344  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  2973  000346  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  2974  000348  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  2975  00034A  B0D8               	btfsc	status,0,c
  2976  00034C  D044               	goto	l2139
  2977  00034E  EE20  F047         	lfsr	2,ScanWithRange@SensorResultC+2
  2978  000352  CFDE F036          	movff	postinc2,??_ScanWithRange
  2979  000356  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  2980  00035A  1E36               	comf	??_ScanWithRange,f,c
  2981  00035C  1E37               	comf	??_ScanWithRange+1,f,c
  2982  00035E  4A36               	infsnz	??_ScanWithRange,f,c
  2983  000360  2A37               	incf	??_ScanWithRange+1,f,c
  2984  000362  5045               	movf	ScanWithRange@SensorResultC,w,c
  2985  000364  2636               	addwf	??_ScanWithRange,f,c
  2986  000366  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  2987  000368  2237               	addwfc	??_ScanWithRange+1,f,c
  2988  00036A  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  2989  00036C  5C36               	subwf	??_ScanWithRange,w,c
  2990  00036E  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  2991  000370  5837               	subwfb	??_ScanWithRange+1,w,c
  2992  000372  A0D8               	btfss	status,0,c
  2993  000374  D012               	goto	l2125
  2994  000376  C045  F036         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  2995  00037A  C046  F037         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  2996  00037E  1E36               	comf	??_ScanWithRange,f,c
  2997  000380  1E37               	comf	??_ScanWithRange+1,f,c
  2998  000382  4A36               	infsnz	??_ScanWithRange,f,c
  2999  000384  2A37               	incf	??_ScanWithRange+1,f,c
  3000  000386  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  3001  000388  2636               	addwf	??_ScanWithRange,f,c
  3002  00038A  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  3003  00038C  2237               	addwfc	??_ScanWithRange+1,f,c
  3004  00038E  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3005  000390  5C36               	subwf	??_ScanWithRange,w,c
  3006  000392  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3007  000394  5837               	subwfb	??_ScanWithRange+1,w,c
  3008  000396  B0D8               	btfsc	status,0,c
  3009  000398  D01E               	goto	l2139
  3010  00039A                     l2125:
  3011                           
  3012                           ;Movement.c: 182: turnLeft(mL,mR);
  3013  00039A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3014  00039E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3015  0003A2  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3016  0003A6  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3017  0003AA  EC04  F009         	call	_turnLeft	;wreg free
  3018                           
  3019                           ;Movement.c: 183: delay_tenth_s(tenth_seconds);
  3020  0003AE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3021  0003B0  EC45  F009         	call	_delay_tenth_s
  3022                           
  3023                           ;Movement.c: 184: MoveTime += tenth_seconds;
  3024  0003B4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3025  0003B6  0D01               	mullw	1
  3026  0003B8  50F3               	movf	prodl,w,c
  3027  0003BA  2634               	addwf	ScanWithRange@MoveTime,f,c
  3028  0003BC  50F4               	movf	prodh,w,c
  3029  0003BE  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3030                           
  3031                           ;Movement.c: 185: stop(mL,mR);
  3032  0003C0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3033  0003C4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3034  0003C8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3035  0003CC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3036  0003D0  ECA7  F007         	call	_stop	;wreg free
  3037  0003D4  D7AE               	goto	l2111
  3038  0003D6                     l2139:
  3039                           
  3040                           ;Movement.c: 188: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3041                           ;Movement.c: 189: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3042  0003D6  5049               	movf	ScanWithRange@SensorResultR,w,c
  3043  0003D8  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  3044  0003DA  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3045  0003DC  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  3046  0003DE  B0D8               	btfsc	status,0,c
  3047  0003E0  D037               	goto	l2155
  3048  0003E2  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3049  0003E4  5C3D               	subwf	ScanWithRange@DirectionFoundLimit,w,c
  3050  0003E6  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3051  0003E8  583E               	subwfb	ScanWithRange@DirectionFoundLimit+1,w,c
  3052  0003EA  B0D8               	btfsc	status,0,c
  3053  0003EC  D031               	goto	l2155
  3054  0003EE  EE20  F04B         	lfsr	2,ScanWithRange@SensorResultR+2
  3055  0003F2  CFDE F036          	movff	postinc2,??_ScanWithRange
  3056  0003F6  CFDD F037          	movff	postdec2,??_ScanWithRange+1
  3057  0003FA  1E36               	comf	??_ScanWithRange,f,c
  3058  0003FC  1E37               	comf	??_ScanWithRange+1,f,c
  3059  0003FE  4A36               	infsnz	??_ScanWithRange,f,c
  3060  000400  2A37               	incf	??_ScanWithRange+1,f,c
  3061  000402  5049               	movf	ScanWithRange@SensorResultR,w,c
  3062  000404  2636               	addwf	??_ScanWithRange,f,c
  3063  000406  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3064  000408  2237               	addwfc	??_ScanWithRange+1,f,c
  3065  00040A  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3066  00040C  5C36               	subwf	??_ScanWithRange,w,c
  3067  00040E  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3068  000410  5837               	subwfb	??_ScanWithRange+1,w,c
  3069  000412  A0D8               	btfss	status,0,c
  3070  000414  D012               	goto	l2147
  3071  000416  C049  F036         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3072  00041A  C04A  F037         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3073  00041E  1E36               	comf	??_ScanWithRange,f,c
  3074  000420  1E37               	comf	??_ScanWithRange+1,f,c
  3075  000422  4A36               	infsnz	??_ScanWithRange,f,c
  3076  000424  2A37               	incf	??_ScanWithRange+1,f,c
  3077  000426  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3078  000428  2636               	addwf	??_ScanWithRange,f,c
  3079  00042A  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3080  00042C  2237               	addwfc	??_ScanWithRange+1,f,c
  3081  00042E  503F               	movf	ScanWithRange@DirectionFoundTolerance,w,c
  3082  000430  5C36               	subwf	??_ScanWithRange,w,c
  3083  000432  5040               	movf	ScanWithRange@DirectionFoundTolerance+1,w,c
  3084  000434  5837               	subwfb	??_ScanWithRange+1,w,c
  3085  000436  B0D8               	btfsc	status,0,c
  3086  000438  D00B               	goto	l2155
  3087  00043A                     l2147:
  3088                           
  3089                           ;Movement.c: 191: stop(mL,mR);
  3090  00043A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3091  00043E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3092  000442  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3093  000446  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3094  00044A  ECA7  F007         	call	_stop	;wreg free
  3095  00044E  D771               	goto	l2111
  3096  000450                     l2155:
  3097  000450  5041               	movf	ScanWithRange@SensorResultL,w,c
  3098  000452  5C43               	subwf	ScanWithRange@SensorResultL+2,w,c
  3099  000454  5042               	movf	ScanWithRange@SensorResultL+1,w,c
  3100  000456  5844               	subwfb	ScanWithRange@SensorResultL+3,w,c
  3101  000458  B0D8               	btfsc	status,0,c
  3102  00045A  D021               	goto	l2171
  3103                           
  3104                           ;Movement.c: 197: turnLeft(mL,mR);
  3105  00045C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3106  000460  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3107  000464  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3108  000468  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3109  00046C  EC04  F009         	call	_turnLeft	;wreg free
  3110                           
  3111                           ;Movement.c: 198: delay_tenth_s(3*tenth_seconds);
  3112  000470  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3113  000472  0D03               	mullw	3
  3114  000474  50F3               	movf	prodl,w,c
  3115  000476  EC45  F009         	call	_delay_tenth_s
  3116                           
  3117                           ;Movement.c: 199: MoveTime += 3*tenth_seconds;
  3118  00047A  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3119  00047C  0D03               	mullw	3
  3120  00047E  50F3               	movf	prodl,w,c
  3121  000480  2634               	addwf	ScanWithRange@MoveTime,f,c
  3122  000482  50F4               	movf	prodh,w,c
  3123  000484  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3124                           
  3125                           ;Movement.c: 200: stop(mL,mR);
  3126  000486  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3127  00048A  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3128  00048E  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3129  000492  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3130  000496  ECA7  F007         	call	_stop	;wreg free
  3131  00049A                     l2165:
  3132                           
  3133                           ;Movement.c: 201: return 0;
  3134  00049A  0E00               	movlw	0
  3135  00049C  0012               	return	
  3136  00049E                     l2171:
  3137  00049E  504B               	movf	ScanWithRange@SensorResultR+2,w,c
  3138  0004A0  5C49               	subwf	ScanWithRange@SensorResultR,w,c
  3139  0004A2  504C               	movf	ScanWithRange@SensorResultR+3,w,c
  3140  0004A4  584A               	subwfb	ScanWithRange@SensorResultR+1,w,c
  3141  0004A6  B0D8               	btfsc	status,0,c
  3142  0004A8  D01E               	goto	l2187
  3143                           
  3144                           ;Movement.c: 204: turnRight(mL,mR);
  3145  0004AA  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  3146  0004AE  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3147  0004B2  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  3148  0004B6  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3149  0004BA  ECDF  F008         	call	_turnRight	;wreg free
  3150                           
  3151                           ;Movement.c: 205: delay_tenth_s(tenth_seconds);
  3152  0004BE  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3153  0004C0  EC45  F009         	call	_delay_tenth_s
  3154                           
  3155                           ;Movement.c: 206: MoveTime -= tenth_seconds;
  3156  0004C4  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3157  0004C6  0D01               	mullw	1
  3158  0004C8  50F3               	movf	prodl,w,c
  3159  0004CA  5E34               	subwf	ScanWithRange@MoveTime,f,c
  3160  0004CC  50F4               	movf	prodh,w,c
  3161  0004CE  5A35               	subwfb	ScanWithRange@MoveTime+1,f,c
  3162                           
  3163                           ;Movement.c: 207: stop(mL,mR);
  3164  0004D0  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3165  0004D4  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3166  0004D8  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3167  0004DC  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3168  0004E0  ECA7  F007         	call	_stop	;wreg free
  3169  0004E4  D7DA               	goto	l2165
  3170  0004E6                     l2187:
  3171  0004E6  5043               	movf	ScanWithRange@SensorResultL+2,w,c
  3172  0004E8  5C41               	subwf	ScanWithRange@SensorResultL,w,c
  3173  0004EA  5044               	movf	ScanWithRange@SensorResultL+3,w,c
  3174  0004EC  5842               	subwfb	ScanWithRange@SensorResultL+1,w,c
  3175  0004EE  B0D8               	btfsc	status,0,c
  3176  0004F0  D03B               	goto	l2203
  3177  0004F2  5045               	movf	ScanWithRange@SensorResultC,w,c
  3178  0004F4  5C47               	subwf	ScanWithRange@SensorResultC+2,w,c
  3179  0004F6  5046               	movf	ScanWithRange@SensorResultC+1,w,c
  3180  0004F8  5848               	subwfb	ScanWithRange@SensorResultC+3,w,c
  3181  0004FA  B0D8               	btfsc	status,0,c
  3182  0004FC  D035               	goto	l2203
  3183                           
  3184                           ;Movement.c: 213: turnLeft(mL,mR);
  3185  0004FE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3186  000502  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3187  000506  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3188  00050A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3189  00050E  EC04  F009         	call	_turnLeft	;wreg free
  3190                           
  3191                           ;Movement.c: 214: delay_tenth_s((3*tenth_seconds)/2);
  3192  000512  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3193  000514  0D03               	mullw	3
  3194  000516  CFF3 F015          	movff	prodl,___awdiv@dividend
  3195  00051A  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3196  00051E  0E00               	movlw	0
  3197  000520  6E18               	movwf	___awdiv@divisor+1,c
  3198  000522  0E02               	movlw	2
  3199  000524  6E17               	movwf	___awdiv@divisor,c
  3200  000526  ECEF  F007         	call	___awdiv	;wreg free
  3201  00052A  5015               	movf	?___awdiv,w,c
  3202  00052C  EC45  F009         	call	_delay_tenth_s
  3203                           
  3204                           ;Movement.c: 215: MoveTime += 3*tenth_seconds/2;
  3205  000530  5033               	movf	ScanWithRange@tenth_seconds,w,c
  3206  000532  0D03               	mullw	3
  3207  000534  CFF3 F015          	movff	prodl,___awdiv@dividend
  3208  000538  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  3209  00053C  0E00               	movlw	0
  3210  00053E  6E18               	movwf	___awdiv@divisor+1,c
  3211  000540  0E02               	movlw	2
  3212  000542  6E17               	movwf	___awdiv@divisor,c
  3213  000544  ECEF  F007         	call	___awdiv	;wreg free
  3214  000548  5015               	movf	?___awdiv,w,c
  3215  00054A  2634               	addwf	ScanWithRange@MoveTime,f,c
  3216  00054C  5016               	movf	?___awdiv+1,w,c
  3217  00054E  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3218                           
  3219                           ;Movement.c: 216: stop(mL,mR);
  3220  000550  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3221  000554  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3222  000558  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3223  00055C  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3224  000560  ECA7  F007         	call	_stop	;wreg free
  3225  000564                     l2197:
  3226                           
  3227                           ;Movement.c: 217: return 1;
  3228  000564  0E01               	movlw	1
  3229  000566  0012               	return	
  3230  000568                     l2203:
  3231  000568  5049               	movf	ScanWithRange@SensorResultR,w,c
  3232  00056A  5C4B               	subwf	ScanWithRange@SensorResultR+2,w,c
  3233  00056C  504A               	movf	ScanWithRange@SensorResultR+1,w,c
  3234  00056E  584C               	subwfb	ScanWithRange@SensorResultR+3,w,c
  3235  000570  B0D8               	btfsc	status,0,c
  3236  000572  D034               	goto	l2219
  3237  000574  5047               	movf	ScanWithRange@SensorResultC+2,w,c
  3238  000576  5C45               	subwf	ScanWithRange@SensorResultC,w,c
  3239  000578  5048               	movf	ScanWithRange@SensorResultC+3,w,c
  3240  00057A  5846               	subwfb	ScanWithRange@SensorResultC+1,w,c
  3241  00057C  B0D8               	btfsc	status,0,c
  3242  00057E  D02E               	goto	l2219
  3243                           
  3244                           ;Movement.c: 220: turnLeft(mL,mR);
  3245  000580  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  3246  000584  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3247  000588  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  3248  00058C  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3249  000590  EC04  F009         	call	_turnLeft	;wreg free
  3250                           
  3251                           ;Movement.c: 221: delay_tenth_s((tenth_seconds)/2);
  3252  000594  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3253  000598  6A16               	clrf	___awdiv@dividend+1,c
  3254  00059A  0E00               	movlw	0
  3255  00059C  6E18               	movwf	___awdiv@divisor+1,c
  3256  00059E  0E02               	movlw	2
  3257  0005A0  6E17               	movwf	___awdiv@divisor,c
  3258  0005A2  ECEF  F007         	call	___awdiv	;wreg free
  3259  0005A6  5015               	movf	?___awdiv,w,c
  3260  0005A8  EC45  F009         	call	_delay_tenth_s
  3261                           
  3262                           ;Movement.c: 222: MoveTime += tenth_seconds/2;
  3263  0005AC  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3264  0005B0  6A16               	clrf	___awdiv@dividend+1,c
  3265  0005B2  0E00               	movlw	0
  3266  0005B4  6E18               	movwf	___awdiv@divisor+1,c
  3267  0005B6  0E02               	movlw	2
  3268  0005B8  6E17               	movwf	___awdiv@divisor,c
  3269  0005BA  ECEF  F007         	call	___awdiv	;wreg free
  3270  0005BE  5015               	movf	?___awdiv,w,c
  3271  0005C0  2634               	addwf	ScanWithRange@MoveTime,f,c
  3272  0005C2  5016               	movf	?___awdiv+1,w,c
  3273  0005C4  2235               	addwfc	ScanWithRange@MoveTime+1,f,c
  3274                           
  3275                           ;Movement.c: 223: stop(mL,mR);
  3276  0005C6  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  3277  0005CA  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  3278  0005CE  C031  F028         	movff	ScanWithRange@mR,stop@mR
  3279  0005D2  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  3280  0005D6  ECA7  F007         	call	_stop	;wreg free
  3281  0005DA  D7C4               	goto	l2197
  3282  0005DC                     l2219:
  3283                           
  3284                           ;Movement.c: 225: }
  3285                           ;Movement.c: 226: }
  3286                           ;Movement.c: 227: return 0;
  3287  0005DC  0E00               	movlw	0
  3288  0005DE  0012               	return	
  3289  0005E0                     __end_of_ScanWithRange:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           intcon	equ	0xFF2
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           indf1	equ	0xFE7
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           indf2	equ	0xFDF
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _ScanIR *****************
  3308 ;; Defined at:
  3309 ;;		line 32 in file "Movement.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  3312 ;;		 -> main@mL(9), 
  3313 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  3314 ;;		 -> main@mR(9), 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  3317 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  3318 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  3319 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3329 ;;      Params:         4       0       0       0
  3330 ;;      Locals:        10       0       0       0
  3331 ;;      Temps:          2       0       0       0
  3332 ;;      Totals:        16       0       0       0
  3333 ;;Total ram usage:       16 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    5
  3336 ;; This function calls:
  3337 ;;		_delay_tenth_s
  3338 ;;		_grabLeftIR
  3339 ;;		_grabRightIR
  3340 ;;		_stop
  3341 ;;		_turnLeft
  3342 ;;		_turnRight
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text13
  3349  000A00                     __ptext13:
  3350                           	opt stack 0
  3351  000A00                     _ScanIR:
  3352                           	opt stack 25
  3353                           
  3354                           ;Movement.c: 34: unsigned int SensorResult[2];
  3355                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=200;
  3356                           
  3357                           ;incstack = 0
  3358  000A00  0E00               	movlw	0
  3359  000A02  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  3360  000A04  0EC8               	movlw	200
  3361  000A06  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  3362                           
  3363                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=1500;
  3364  000A08  0E05               	movlw	5
  3365  000A0A  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  3366  000A0C  0EDC               	movlw	220
  3367  000A0E  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  3368                           
  3369                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  3370  000A10  0E01               	movlw	1
  3371  000A12  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  3372  000A14  0EF4               	movlw	244
  3373  000A16  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  3374                           
  3375                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  3376  000A18  EC6C  F008         	call	_grabLeftIR	;wreg free
  3377  000A1C  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  3378  000A20  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3379                           
  3380                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  3381  000A24  EC31  F008         	call	_grabRightIR	;wreg free
  3382  000A28  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3383  000A2C  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3384                           
  3385                           ;Movement.c: 46: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  3386  000A30  503B               	movf	ScanIR@SensorResult,w,c
  3387  000A32  243D               	addwf	ScanIR@SensorResult+2,w,c
  3388  000A34  6E33               	movwf	??_ScanIR& (0+255),c
  3389  000A36  503C               	movf	ScanIR@SensorResult+1,w,c
  3390  000A38  203E               	addwfc	ScanIR@SensorResult+3,w,c
  3391  000A3A  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  3392  000A3C  5033               	movf	??_ScanIR,w,c
  3393  000A3E  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  3394  000A40  5034               	movf	??_ScanIR+1,w,c
  3395  000A42  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  3396  000A44  B0D8               	btfsc	status,0,c
  3397  000A46  D085               	goto	l2271
  3398                           
  3399                           ;Movement.c: 49: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  3400                           ;Movement.c: 50: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3401                           ;Movement.c: 51: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3402  000A48  503B               	movf	ScanIR@SensorResult,w,c
  3403  000A4A  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3404  000A4C  503C               	movf	ScanIR@SensorResult+1,w,c
  3405  000A4E  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3406  000A50  B0D8               	btfsc	status,0,c
  3407  000A52  D02E               	goto	l2245
  3408  000A54  503D               	movf	ScanIR@SensorResult+2,w,c
  3409  000A56  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  3410  000A58  503E               	movf	ScanIR@SensorResult+3,w,c
  3411  000A5A  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  3412  000A5C  B0D8               	btfsc	status,0,c
  3413  000A5E  D028               	goto	l2245
  3414  000A60  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  3415  000A64  CFDE F033          	movff	postinc2,??_ScanIR
  3416  000A68  CFDD F034          	movff	postdec2,??_ScanIR+1
  3417  000A6C  1E33               	comf	??_ScanIR,f,c
  3418  000A6E  1E34               	comf	??_ScanIR+1,f,c
  3419  000A70  4A33               	infsnz	??_ScanIR,f,c
  3420  000A72  2A34               	incf	??_ScanIR+1,f,c
  3421  000A74  503B               	movf	ScanIR@SensorResult,w,c
  3422  000A76  2633               	addwf	??_ScanIR,f,c
  3423  000A78  503C               	movf	ScanIR@SensorResult+1,w,c
  3424  000A7A  2234               	addwfc	??_ScanIR+1,f,c
  3425  000A7C  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3426  000A7E  5C33               	subwf	??_ScanIR,w,c
  3427  000A80  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3428  000A82  5834               	subwfb	??_ScanIR+1,w,c
  3429  000A84  A0D8               	btfss	status,0,c
  3430  000A86  D012               	goto	l2239
  3431  000A88  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  3432  000A8C  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3433  000A90  1E33               	comf	??_ScanIR,f,c
  3434  000A92  1E34               	comf	??_ScanIR+1,f,c
  3435  000A94  4A33               	infsnz	??_ScanIR,f,c
  3436  000A96  2A34               	incf	??_ScanIR+1,f,c
  3437  000A98  503D               	movf	ScanIR@SensorResult+2,w,c
  3438  000A9A  2633               	addwf	??_ScanIR,f,c
  3439  000A9C  503E               	movf	ScanIR@SensorResult+3,w,c
  3440  000A9E  2234               	addwfc	??_ScanIR+1,f,c
  3441  000AA0  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  3442  000AA2  5C33               	subwf	??_ScanIR,w,c
  3443  000AA4  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  3444  000AA6  5834               	subwfb	??_ScanIR+1,w,c
  3445  000AA8  B0D8               	btfsc	status,0,c
  3446  000AAA  D002               	goto	l2245
  3447  000AAC                     l2239:
  3448                           
  3449                           ;Movement.c: 52: return 2;
  3450  000AAC  0E02               	movlw	2
  3451  000AAE  0012               	return	
  3452  000AB0                     l2245:
  3453  000AB0  503B               	movf	ScanIR@SensorResult,w,c
  3454  000AB2  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3455  000AB4  503C               	movf	ScanIR@SensorResult+1,w,c
  3456  000AB6  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3457  000AB8  A0D8               	btfss	status,0,c
  3458  000ABA  D023               	goto	l2259
  3459                           
  3460                           ;Movement.c: 55: stop(mL,mR);
  3461  000ABC  C02F  F026         	movff	ScanIR@mL,stop@mL
  3462  000AC0  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3463  000AC4  C031  F028         	movff	ScanIR@mR,stop@mR
  3464  000AC8  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3465  000ACC  ECA7  F007         	call	_stop	;wreg free
  3466                           
  3467                           ;Movement.c: 56: turnLeft(mL,mR);
  3468  000AD0  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3469  000AD4  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3470  000AD8  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3471  000ADC  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3472  000AE0  EC04  F009         	call	_turnLeft	;wreg free
  3473                           
  3474                           ;Movement.c: 57: delay_tenth_s(3);
  3475  000AE4  0E03               	movlw	3
  3476  000AE6  EC45  F009         	call	_delay_tenth_s
  3477                           
  3478                           ;Movement.c: 58: stop(mL,mR);
  3479  000AEA  C02F  F026         	movff	ScanIR@mL,stop@mL
  3480  000AEE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3481  000AF2  C031  F028         	movff	ScanIR@mR,stop@mR
  3482  000AF6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3483  000AFA  ECA7  F007         	call	_stop	;wreg free
  3484  000AFE                     l2253:
  3485                           
  3486                           ;Movement.c: 59: return 1;
  3487  000AFE  0E01               	movlw	1
  3488  000B00  0012               	return	
  3489  000B02                     l2259:
  3490  000B02  503B               	movf	ScanIR@SensorResult,w,c
  3491  000B04  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3492  000B06  503C               	movf	ScanIR@SensorResult+1,w,c
  3493  000B08  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3494  000B0A  B0D8               	btfsc	status,0,c
  3495  000B0C  D069               	goto	l2299
  3496                           
  3497                           ;Movement.c: 62: stop(mL,mR);
  3498  000B0E  C02F  F026         	movff	ScanIR@mL,stop@mL
  3499  000B12  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3500  000B16  C031  F028         	movff	ScanIR@mR,stop@mR
  3501  000B1A  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3502  000B1E  ECA7  F007         	call	_stop	;wreg free
  3503                           
  3504                           ;Movement.c: 63: turnRight(mL,mR);
  3505  000B22  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3506  000B26  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3507  000B2A  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3508  000B2E  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3509  000B32  ECDF  F008         	call	_turnRight	;wreg free
  3510                           
  3511                           ;Movement.c: 64: delay_tenth_s(3);
  3512  000B36  0E03               	movlw	3
  3513  000B38  EC45  F009         	call	_delay_tenth_s
  3514                           
  3515                           ;Movement.c: 65: stop(mL,mR);
  3516  000B3C  C02F  F026         	movff	ScanIR@mL,stop@mL
  3517  000B40  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3518  000B44  C031  F028         	movff	ScanIR@mR,stop@mR
  3519  000B48  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3520  000B4C  ECA7  F007         	call	_stop	;wreg free
  3521  000B50  D7D6               	goto	l2253
  3522  000B52                     l2271:
  3523                           
  3524                           ;Movement.c: 70: stop(mL,mR);
  3525  000B52  C02F  F026         	movff	ScanIR@mL,stop@mL
  3526  000B56  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3527  000B5A  C031  F028         	movff	ScanIR@mR,stop@mR
  3528  000B5E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3529  000B62  ECA7  F007         	call	_stop	;wreg free
  3530                           
  3531                           ;Movement.c: 73: if (SensorResult[0]<=SensorResult[1]) {
  3532  000B66  503B               	movf	ScanIR@SensorResult,w,c
  3533  000B68  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3534  000B6A  503C               	movf	ScanIR@SensorResult+1,w,c
  3535  000B6C  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3536  000B6E  A0D8               	btfss	status,0,c
  3537  000B70  D019               	goto	l2287
  3538                           
  3539                           ;Movement.c: 74: turnLeft(mL,mR);
  3540  000B72  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  3541  000B76  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  3542  000B7A  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  3543  000B7E  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  3544  000B82  EC04  F009         	call	_turnLeft	;wreg free
  3545                           
  3546                           ;Movement.c: 75: delay_tenth_s(5);
  3547  000B86  0E05               	movlw	5
  3548  000B88  EC45  F009         	call	_delay_tenth_s
  3549                           
  3550                           ;Movement.c: 76: stop(mL,mR);
  3551  000B8C  C02F  F026         	movff	ScanIR@mL,stop@mL
  3552  000B90  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3553  000B94  C031  F028         	movff	ScanIR@mR,stop@mR
  3554  000B98  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3555  000B9C  ECA7  F007         	call	_stop	;wreg free
  3556  000BA0                     l2281:
  3557                           
  3558                           ;Movement.c: 77: return 0;
  3559  000BA0  0E00               	movlw	0
  3560  000BA2  0012               	return	
  3561  000BA4                     l2287:
  3562  000BA4  503B               	movf	ScanIR@SensorResult,w,c
  3563  000BA6  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  3564  000BA8  503C               	movf	ScanIR@SensorResult+1,w,c
  3565  000BAA  583E               	subwfb	ScanIR@SensorResult+3,w,c
  3566  000BAC  B0D8               	btfsc	status,0,c
  3567  000BAE  D018               	goto	l2299
  3568                           
  3569                           ;Movement.c: 80: turnRight(mL,mR);
  3570  000BB0  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  3571  000BB4  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  3572  000BB8  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  3573  000BBC  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  3574  000BC0  ECDF  F008         	call	_turnRight	;wreg free
  3575                           
  3576                           ;Movement.c: 81: delay_tenth_s(5);
  3577  000BC4  0E05               	movlw	5
  3578  000BC6  EC45  F009         	call	_delay_tenth_s
  3579                           
  3580                           ;Movement.c: 82: stop(mL,mR);
  3581  000BCA  C02F  F026         	movff	ScanIR@mL,stop@mL
  3582  000BCE  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  3583  000BD2  C031  F028         	movff	ScanIR@mR,stop@mR
  3584  000BD6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  3585  000BDA  ECA7  F007         	call	_stop	;wreg free
  3586  000BDE  D7E0               	goto	l2281
  3587  000BE0                     l2299:
  3588                           
  3589                           ;Movement.c: 84: }
  3590                           ;Movement.c: 85: }
  3591                           ;Movement.c: 86: return 0;
  3592  000BE0  0E00               	movlw	0
  3593  000BE2  0012               	return	
  3594  000BE4                     __end_of_ScanIR:
  3595                           	opt stack 0
  3596                           tblptru	equ	0xFF8
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           intcon	equ	0xFF2
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           indf1	equ	0xFE7
  3603                           fsr1h	equ	0xFE2
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _turnRight *****************
  3613 ;; Defined at:
  3614 ;;		line 98 in file "dc_motor.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3617 ;;		 -> main@mL(9), 
  3618 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3619 ;;		 -> main@mR(9), 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;		None
  3622 ;; Return value:  Size  Location     Type
  3623 ;;		None               void
  3624 ;; Registers used:
  3625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3631 ;;      Params:         4       0       0       0
  3632 ;;      Locals:         0       0       0       0
  3633 ;;      Temps:          0       0       0       0
  3634 ;;      Totals:         4       0       0       0
  3635 ;;Total ram usage:        4 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    4
  3638 ;; This function calls:
  3639 ;;		_fullSpeedAhead
  3640 ;;		_stop
  3641 ;; This function is called by:
  3642 ;;		_main
  3643 ;;		_ScanIR
  3644 ;;		_ScanWithRange
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text14
  3649  0011BE                     __ptext14:
  3650                           	opt stack 0
  3651  0011BE                     _turnRight:
  3652                           	opt stack 26
  3653                           
  3654                           ;dc_motor.c: 100: stop(mL, mR);
  3655                           
  3656                           ;incstack = 0
  3657  0011BE  C02B  F026         	movff	turnRight@mL,stop@mL
  3658  0011C2  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  3659  0011C6  C02D  F028         	movff	turnRight@mR,stop@mR
  3660  0011CA  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  3661  0011CE  ECA7  F007         	call	_stop	;wreg free
  3662                           
  3663                           ;dc_motor.c: 102: mL->direction=1;
  3664  0011D2  EE20 F001          	lfsr	2,1
  3665  0011D6  502B               	movf	turnRight@mL,w,c
  3666  0011D8  26D9               	addwf	fsr2l,f,c
  3667  0011DA  502C               	movf	turnRight@mL+1,w,c
  3668  0011DC  22DA               	addwfc	fsr2h,f,c
  3669  0011DE  0E01               	movlw	1
  3670  0011E0  6EDF               	movwf	indf2,c
  3671                           
  3672                           ;dc_motor.c: 103: mR->direction=0;
  3673  0011E2  EE20 F001          	lfsr	2,1
  3674  0011E6  502D               	movf	turnRight@mR,w,c
  3675  0011E8  26D9               	addwf	fsr2l,f,c
  3676  0011EA  502E               	movf	turnRight@mR+1,w,c
  3677  0011EC  22DA               	addwfc	fsr2h,f,c
  3678  0011EE  0E00               	movlw	0
  3679  0011F0  6EDF               	movwf	indf2,c
  3680                           
  3681                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3682  0011F2  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  3683  0011F6  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3684  0011FA  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  3685  0011FE  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3686  001202  ECA7  F008         	call	_fullSpeedAhead	;wreg free
  3687  001206  0012               	return		;funcret
  3688  001208                     __end_of_turnRight:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           postinc0	equ	0xFEE
  3695                           wreg	equ	0xFE8
  3696                           indf1	equ	0xFE7
  3697                           fsr1h	equ	0xFE2
  3698                           fsr1l	equ	0xFE1
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function _turnLeft *****************
  3707 ;; Defined at:
  3708 ;;		line 87 in file "dc_motor.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3711 ;;		 -> main@mL(9), 
  3712 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3713 ;;		 -> main@mR(9), 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;		None               void
  3718 ;; Registers used:
  3719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3725 ;;      Params:         4       0       0       0
  3726 ;;      Locals:         0       0       0       0
  3727 ;;      Temps:          0       0       0       0
  3728 ;;      Totals:         4       0       0       0
  3729 ;;Total ram usage:        4 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    4
  3732 ;; This function calls:
  3733 ;;		_fullSpeedAhead
  3734 ;;		_stop
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;;		_ScanIR
  3738 ;;		_ScanWithRange
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text15
  3743  001208                     __ptext15:
  3744                           	opt stack 0
  3745  001208                     _turnLeft:
  3746                           	opt stack 26
  3747                           
  3748                           ;dc_motor.c: 89: stop(mL, mR);
  3749                           
  3750                           ;incstack = 0
  3751  001208  C02B  F026         	movff	turnLeft@mL,stop@mL
  3752  00120C  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  3753  001210  C02D  F028         	movff	turnLeft@mR,stop@mR
  3754  001214  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  3755  001218  ECA7  F007         	call	_stop	;wreg free
  3756                           
  3757                           ;dc_motor.c: 91: mL->direction=0;
  3758  00121C  EE20 F001          	lfsr	2,1
  3759  001220  502B               	movf	turnLeft@mL,w,c
  3760  001222  26D9               	addwf	fsr2l,f,c
  3761  001224  502C               	movf	turnLeft@mL+1,w,c
  3762  001226  22DA               	addwfc	fsr2h,f,c
  3763  001228  0E00               	movlw	0
  3764  00122A  6EDF               	movwf	indf2,c
  3765                           
  3766                           ;dc_motor.c: 92: mR->direction=1;
  3767  00122C  EE20 F001          	lfsr	2,1
  3768  001230  502D               	movf	turnLeft@mR,w,c
  3769  001232  26D9               	addwf	fsr2l,f,c
  3770  001234  502E               	movf	turnLeft@mR+1,w,c
  3771  001236  22DA               	addwfc	fsr2h,f,c
  3772  001238  0E01               	movlw	1
  3773  00123A  6EDF               	movwf	indf2,c
  3774                           
  3775                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  3776  00123C  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  3777  001240  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3778  001244  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  3779  001248  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3780  00124C  ECA7  F008         	call	_fullSpeedAhead	;wreg free
  3781  001250  0012               	return		;funcret
  3782  001252                     __end_of_turnLeft:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           indf1	equ	0xFE7
  3791                           fsr1h	equ	0xFE2
  3792                           fsr1l	equ	0xFE1
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _stop *****************
  3801 ;; Defined at:
  3802 ;;		line 67 in file "dc_motor.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3805 ;;		 -> main@mL(9), 
  3806 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3807 ;;		 -> main@mR(9), 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3819 ;;      Params:         4       0       0       0
  3820 ;;      Locals:         0       0       0       0
  3821 ;;      Temps:          0       0       0       0
  3822 ;;      Totals:         4       0       0       0
  3823 ;;Total ram usage:        4 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		_setMotorPWM
  3828 ;; This function is called by:
  3829 ;;		_main
  3830 ;;		_turnLeft
  3831 ;;		_turnRight
  3832 ;;		_ScanIR
  3833 ;;		_ScanWithRange
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text16
  3838  000F4E                     __ptext16:
  3839                           	opt stack 0
  3840  000F4E                     _stop:
  3841                           	opt stack 26
  3842                           
  3843                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3844                           
  3845                           ;incstack = 0
  3846  000F4E  D028               	goto	l1877
  3847  000F50                     l1863:
  3848                           
  3849                           ;dc_motor.c: 71: if(mL->power>0){
  3850  000F50  C026  FFD9         	movff	stop@mL,fsr2l
  3851  000F54  C027  FFDA         	movff	stop@mL+1,fsr2h
  3852  000F58  50DF               	movf	indf2,w,c
  3853  000F5A  B4D8               	btfsc	status,2,c
  3854  000F5C  D005               	goto	l1867
  3855                           
  3856                           ;dc_motor.c: 72: mL->power--;
  3857  000F5E  C026  FFD9         	movff	stop@mL,fsr2l
  3858  000F62  C027  FFDA         	movff	stop@mL+1,fsr2h
  3859  000F66  06DF               	decf	indf2,f,c
  3860  000F68                     l1867:
  3861                           
  3862                           ;dc_motor.c: 73: }
  3863                           ;dc_motor.c: 74: if(mR->power>0){
  3864  000F68  C028  FFD9         	movff	stop@mR,fsr2l
  3865  000F6C  C029  FFDA         	movff	stop@mR+1,fsr2h
  3866  000F70  50DF               	movf	indf2,w,c
  3867  000F72  B4D8               	btfsc	status,2,c
  3868  000F74  D005               	goto	l1871
  3869                           
  3870                           ;dc_motor.c: 75: mR->power--;
  3871  000F76  C028  FFD9         	movff	stop@mR,fsr2l
  3872  000F7A  C029  FFDA         	movff	stop@mR+1,fsr2h
  3873  000F7E  06DF               	decf	indf2,f,c
  3874  000F80                     l1871:
  3875                           
  3876                           ;dc_motor.c: 76: }
  3877                           ;dc_motor.c: 77: setMotorPWM(mL);
  3878  000F80  C026  F01D         	movff	stop@mL,setMotorPWM@m
  3879  000F84  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  3880  000F88  ECF2  F005         	call	_setMotorPWM	;wreg free
  3881                           
  3882                           ;dc_motor.c: 78: setMotorPWM(mR);
  3883  000F8C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  3884  000F90  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  3885  000F94  ECF2  F005         	call	_setMotorPWM	;wreg free
  3886                           
  3887                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3888  000F98  0E21               	movlw	33
  3889  000F9A                     u2177:
  3890  000F9A  2EE8               	decfsz	wreg,f,c
  3891  000F9C  D7FE               	goto	u2177
  3892  000F9E  F000               	nop	
  3893  000FA0                     l1877:
  3894  000FA0  C026  FFD9         	movff	stop@mL,fsr2l
  3895  000FA4  C027  FFDA         	movff	stop@mL+1,fsr2h
  3896  000FA8  50DF               	movf	indf2,w,c
  3897  000FAA  A4D8               	btfss	status,2,c
  3898  000FAC  D7D1               	goto	l1863
  3899  000FAE  C028  FFD9         	movff	stop@mR,fsr2l
  3900  000FB2  C029  FFDA         	movff	stop@mR+1,fsr2h
  3901  000FB6  50DF               	movf	indf2,w,c
  3902  000FB8  A4D8               	btfss	status,2,c
  3903  000FBA  D7CA               	goto	l1863
  3904                           
  3905                           ;dc_motor.c: 80: }
  3906                           ;dc_motor.c: 81: mL->direction=1;
  3907  000FBC  EE20 F001          	lfsr	2,1
  3908  000FC0  5026               	movf	stop@mL,w,c
  3909  000FC2  26D9               	addwf	fsr2l,f,c
  3910  000FC4  5027               	movf	stop@mL+1,w,c
  3911  000FC6  22DA               	addwfc	fsr2h,f,c
  3912  000FC8  0E01               	movlw	1
  3913  000FCA  6EDF               	movwf	indf2,c
  3914                           
  3915                           ;dc_motor.c: 82: mR->direction=1;
  3916  000FCC  EE20 F001          	lfsr	2,1
  3917  000FD0  5028               	movf	stop@mR,w,c
  3918  000FD2  26D9               	addwf	fsr2l,f,c
  3919  000FD4  5029               	movf	stop@mR+1,w,c
  3920  000FD6  22DA               	addwfc	fsr2h,f,c
  3921  000FD8  0E01               	movlw	1
  3922  000FDA  6EDF               	movwf	indf2,c
  3923  000FDC  0012               	return		;funcret
  3924  000FDE                     __end_of_stop:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           postinc0	equ	0xFEE
  3931                           wreg	equ	0xFE8
  3932                           indf1	equ	0xFE7
  3933                           fsr1h	equ	0xFE2
  3934                           fsr1l	equ	0xFE1
  3935                           indf2	equ	0xFDF
  3936                           postinc2	equ	0xFDE
  3937                           postdec2	equ	0xFDD
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _fullSpeedAhead *****************
  3943 ;; Defined at:
  3944 ;;		line 108 in file "dc_motor.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3947 ;;		 -> main@mL(9), 
  3948 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3949 ;;		 -> main@mR(9), 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;		None
  3952 ;; Return value:  Size  Location     Type
  3953 ;;		None               void
  3954 ;; Registers used:
  3955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3961 ;;      Params:         4       0       0       0
  3962 ;;      Locals:         0       0       0       0
  3963 ;;      Temps:          1       0       0       0
  3964 ;;      Totals:         5       0       0       0
  3965 ;;Total ram usage:        5 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    3
  3968 ;; This function calls:
  3969 ;;		_setMotorPWM
  3970 ;; This function is called by:
  3971 ;;		_main
  3972 ;;		_turnLeft
  3973 ;;		_turnRight
  3974 ;;		_fullSpeedBack
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text17
  3979  00114E                     __ptext17:
  3980                           	opt stack 0
  3981  00114E                     _fullSpeedAhead:
  3982                           	opt stack 26
  3983                           
  3984                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  3985                           
  3986                           ;incstack = 0
  3987  00114E  D028               	goto	l169
  3988  001150                     l1845:
  3989                           
  3990                           ;dc_motor.c: 112: if(mL->power<100){
  3991  001150  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3992  001154  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3993  001158  0E64               	movlw	100
  3994  00115A  60DF               	cpfslt	indf2,c
  3995  00115C  D005               	goto	l1849
  3996                           
  3997                           ;dc_motor.c: 113: mL->power++;
  3998  00115E  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3999  001162  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4000  001166  2ADF               	incf	indf2,f,c
  4001  001168                     l1849:
  4002                           
  4003                           ;dc_motor.c: 114: }
  4004                           ;dc_motor.c: 115: if(mR->power<100){
  4005  001168  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4006  00116C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4007  001170  0E64               	movlw	100
  4008  001172  60DF               	cpfslt	indf2,c
  4009  001174  D005               	goto	l1853
  4010                           
  4011                           ;dc_motor.c: 116: mR->power++;
  4012  001176  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4013  00117A  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4014  00117E  2ADF               	incf	indf2,f,c
  4015  001180                     l1853:
  4016                           
  4017                           ;dc_motor.c: 117: }
  4018                           ;dc_motor.c: 118: setMotorPWM(mL);
  4019  001180  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4020  001184  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4021  001188  ECF2  F005         	call	_setMotorPWM	;wreg free
  4022                           
  4023                           ;dc_motor.c: 119: setMotorPWM(mR);
  4024  00118C  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4025  001190  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4026  001194  ECF2  F005         	call	_setMotorPWM	;wreg free
  4027                           
  4028                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4029  001198  0E21               	movlw	33
  4030  00119A                     u2187:
  4031  00119A  2EE8               	decfsz	wreg,f,c
  4032  00119C  D7FE               	goto	u2187
  4033  00119E  F000               	nop	
  4034  0011A0                     l169:
  4035  0011A0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4036  0011A4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4037  0011A8  0E63               	movlw	99
  4038  0011AA  64DF               	cpfsgt	indf2,c
  4039  0011AC  D7D1               	goto	l1845
  4040  0011AE  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4041  0011B2  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4042  0011B6  0E63               	movlw	99
  4043  0011B8  64DF               	cpfsgt	indf2,c
  4044  0011BA  D7CA               	goto	l1845
  4045  0011BC  0012               	return	
  4046  0011BE                     __end_of_fullSpeedAhead:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           postinc0	equ	0xFEE
  4053                           wreg	equ	0xFE8
  4054                           indf1	equ	0xFE7
  4055                           fsr1h	equ	0xFE2
  4056                           fsr1l	equ	0xFE1
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _setMotorPWM *****************
  4065 ;; Defined at:
  4066 ;;		line 26 in file "dc_motor.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  m               2   28[COMRAM] PTR struct DC_motor
  4069 ;;		 -> main@mR(9), main@mL(9), 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  PWMduty         2   35[COMRAM] int 
  4072 ;; Return value:  Size  Location     Type
  4073 ;;		None               void
  4074 ;; Registers used:
  4075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4081 ;;      Params:         2       0       0       0
  4082 ;;      Locals:         2       0       0       0
  4083 ;;      Temps:          5       0       0       0
  4084 ;;      Totals:         9       0       0       0
  4085 ;;Total ram usage:        9 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    2
  4088 ;; This function calls:
  4089 ;;		___awdiv
  4090 ;;		___wmul
  4091 ;; This function is called by:
  4092 ;;		_stop
  4093 ;;		_fullSpeedAhead
  4094 ;;		_setMotorFullSpeed
  4095 ;;		_stopMotor
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text18
  4100  000BE4                     __ptext18:
  4101                           	opt stack 0
  4102  000BE4                     _setMotorPWM:
  4103                           	opt stack 26
  4104                           
  4105                           ;dc_motor.c: 28: int PWMduty;
  4106                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4107                           
  4108                           ;incstack = 0
  4109  000BE4  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  4110  000BE8  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4111  000BEC  50DF               	movf	indf2,w,c
  4112  000BEE  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4113  000BF0  501F               	movf	??_setMotorPWM,w,c
  4114  000BF2  6E0F               	movwf	___wmul@multiplier,c
  4115  000BF4  6A10               	clrf	___wmul@multiplier+1,c
  4116  000BF6  EE20 F007          	lfsr	2,7
  4117  000BFA  501D               	movf	setMotorPWM@m,w,c
  4118  000BFC  26D9               	addwf	fsr2l,f,c
  4119  000BFE  501E               	movf	setMotorPWM@m+1,w,c
  4120  000C00  22DA               	addwfc	fsr2h,f,c
  4121  000C02  CFDE F011          	movff	postinc2,___wmul@multiplicand
  4122  000C06  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  4123  000C0A  ECC0  F009         	call	___wmul	;wreg free
  4124  000C0E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  4125  000C12  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  4126  000C16  0E00               	movlw	0
  4127  000C18  6E18               	movwf	___awdiv@divisor+1,c
  4128  000C1A  0E64               	movlw	100
  4129  000C1C  6E17               	movwf	___awdiv@divisor,c
  4130  000C1E  ECEF  F007         	call	___awdiv	;wreg free
  4131  000C22  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  4132  000C26  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4133                           
  4134                           ;dc_motor.c: 32: if (m->direction)
  4135  000C2A  EE20 F001          	lfsr	2,1
  4136  000C2E  501D               	movf	setMotorPWM@m,w,c
  4137  000C30  26D9               	addwf	fsr2l,f,c
  4138  000C32  501E               	movf	setMotorPWM@m+1,w,c
  4139  000C34  22DA               	addwfc	fsr2h,f,c
  4140  000C36  50DF               	movf	indf2,w,c
  4141  000C38  B4D8               	btfsc	status,2,c
  4142  000C3A  D02C               	goto	l1835
  4143                           
  4144                           ;dc_motor.c: 33: {
  4145                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4146  000C3C  EE20 F006          	lfsr	2,6
  4147  000C40  501D               	movf	setMotorPWM@m,w,c
  4148  000C42  26D9               	addwf	fsr2l,f,c
  4149  000C44  501E               	movf	setMotorPWM@m+1,w,c
  4150  000C46  22DA               	addwfc	fsr2h,f,c
  4151  000C48  50DF               	movf	indf2,w,c
  4152  000C4A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4153  000C4C  0E01               	movlw	1
  4154  000C4E  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4155  000C50  2A1F               	incf	??_setMotorPWM,f,c
  4156  000C52  D002               	goto	u1124
  4157  000C54                     u1125:
  4158  000C54  90D8               	bcf	status,0,c
  4159  000C56  3620               	rlcf	??_setMotorPWM+1,f,c
  4160  000C58                     u1124:
  4161  000C58  2E1F               	decfsz	??_setMotorPWM,f,c
  4162  000C5A  D7FC               	goto	u1125
  4163  000C5C  5020               	movf	??_setMotorPWM+1,w,c
  4164  000C5E  108A               	iorwf	3978,w,c	;volatile
  4165  000C60  6E8A               	movwf	3978,c	;volatile
  4166                           
  4167                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4168  000C62  EE20 F007          	lfsr	2,7
  4169  000C66  501D               	movf	setMotorPWM@m,w,c
  4170  000C68  26D9               	addwf	fsr2l,f,c
  4171  000C6A  501E               	movf	setMotorPWM@m+1,w,c
  4172  000C6C  22DA               	addwfc	fsr2h,f,c
  4173  000C6E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4174  000C72  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4175  000C76  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4176  000C7A  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4177  000C7E  1E21               	comf	??_setMotorPWM+2,f,c
  4178  000C80  1E22               	comf	??_setMotorPWM+3,f,c
  4179  000C82  4A21               	infsnz	??_setMotorPWM+2,f,c
  4180  000C84  2A22               	incf	??_setMotorPWM+3,f,c
  4181  000C86  501F               	movf	??_setMotorPWM,w,c
  4182  000C88  2421               	addwf	??_setMotorPWM+2,w,c
  4183  000C8A  6E24               	movwf	setMotorPWM@PWMduty,c
  4184  000C8C  5020               	movf	??_setMotorPWM+1,w,c
  4185  000C8E  2022               	addwfc	??_setMotorPWM+3,w,c
  4186  000C90  6E25               	movwf	setMotorPWM@PWMduty+1,c
  4187                           
  4188                           ;dc_motor.c: 36: }
  4189  000C92  D014               	goto	l139
  4190  000C94                     l1835:
  4191                           
  4192                           ;dc_motor.c: 37: else
  4193                           ;dc_motor.c: 38: {
  4194                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4195  000C94  EE20 F006          	lfsr	2,6
  4196  000C98  501D               	movf	setMotorPWM@m,w,c
  4197  000C9A  26D9               	addwf	fsr2l,f,c
  4198  000C9C  501E               	movf	setMotorPWM@m+1,w,c
  4199  000C9E  22DA               	addwfc	fsr2h,f,c
  4200  000CA0  50DF               	movf	indf2,w,c
  4201  000CA2  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4202  000CA4  0E01               	movlw	1
  4203  000CA6  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4204  000CA8  2A1F               	incf	??_setMotorPWM,f,c
  4205  000CAA  D002               	goto	u1134
  4206  000CAC                     u1135:
  4207  000CAC  90D8               	bcf	status,0,c
  4208  000CAE  3620               	rlcf	??_setMotorPWM+1,f,c
  4209  000CB0                     u1134:
  4210  000CB0  2E1F               	decfsz	??_setMotorPWM,f,c
  4211  000CB2  D7FC               	goto	u1135
  4212  000CB4  5020               	movf	??_setMotorPWM+1,w,c
  4213  000CB6  0AFF               	xorlw	255
  4214  000CB8  148A               	andwf	3978,w,c	;volatile
  4215  000CBA  6E8A               	movwf	3978,c	;volatile
  4216  000CBC                     l139:
  4217                           
  4218                           ;dc_motor.c: 40: }
  4219                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4220  000CBC  EE20 F002          	lfsr	2,2
  4221  000CC0  501D               	movf	setMotorPWM@m,w,c
  4222  000CC2  26D9               	addwf	fsr2l,f,c
  4223  000CC4  501E               	movf	setMotorPWM@m+1,w,c
  4224  000CC6  22DA               	addwfc	fsr2h,f,c
  4225  000CC8  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4226  000CCC  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4227  000CD0  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4228  000CD4  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4229  000CD8  4424               	rlncf	setMotorPWM@PWMduty,w,c
  4230  000CDA  46E8               	rlncf	wreg,f,c
  4231  000CDC  0BFC               	andlw	252
  4232  000CDE  6EDF               	movwf	indf2,c
  4233                           
  4234                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4235  000CE0  EE20 F004          	lfsr	2,4
  4236  000CE4  501D               	movf	setMotorPWM@m,w,c
  4237  000CE6  26D9               	addwf	fsr2l,f,c
  4238  000CE8  501E               	movf	setMotorPWM@m+1,w,c
  4239  000CEA  22DA               	addwfc	fsr2h,f,c
  4240  000CEC  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4241  000CF0  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4242  000CF4  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4243  000CF8  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4244  000CFC  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4245  000D00  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4246  000D04  0E06               	movlw	6
  4247  000D06  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  4248  000D08                     u1145:
  4249  000D08  3422               	rlcf	??_setMotorPWM+3,w,c
  4250  000D0A  3222               	rrcf	??_setMotorPWM+3,f,c
  4251  000D0C  3221               	rrcf	??_setMotorPWM+2,f,c
  4252  000D0E  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4253  000D10  D7FB               	goto	u1145
  4254  000D12  5021               	movf	??_setMotorPWM+2,w,c
  4255  000D14  6EDF               	movwf	indf2,c
  4256  000D16  0012               	return		;funcret
  4257  000D18                     __end_of_setMotorPWM:
  4258                           	opt stack 0
  4259                           tblptru	equ	0xFF8
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           indf1	equ	0xFE7
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function ___wmul *****************
  4276 ;; Defined at:
  4277 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  multiplier      2   14[COMRAM] unsigned int 
  4280 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  product         2   18[COMRAM] unsigned int 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  2   14[COMRAM] unsigned int 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, prodl, prodh
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4292 ;;      Params:         4       0       0       0
  4293 ;;      Locals:         2       0       0       0
  4294 ;;      Temps:          0       0       0       0
  4295 ;;      Totals:         6       0       0       0
  4296 ;;Total ram usage:        6 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    1
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		_setMotorPWM
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text19
  4307  001380                     __ptext19:
  4308                           	opt stack 0
  4309  001380                     ___wmul:
  4310                           	opt stack 26
  4311                           
  4312                           ;incstack = 0
  4313  001380  500F               	movf	___wmul@multiplier,w,c
  4314  001382  0211               	mulwf	___wmul@multiplicand,c
  4315  001384  CFF3 F013          	movff	prodl,___wmul@product
  4316  001388  CFF4 F014          	movff	prodh,___wmul@product+1
  4317  00138C  500F               	movf	___wmul@multiplier,w,c
  4318  00138E  0212               	mulwf	___wmul@multiplicand+1,c
  4319  001390  50F3               	movf	prodl,w,c
  4320  001392  2614               	addwf	___wmul@product+1,f,c
  4321  001394  5010               	movf	___wmul@multiplier+1,w,c
  4322  001396  0211               	mulwf	___wmul@multiplicand,c
  4323  001398  50F3               	movf	prodl,w,c
  4324  00139A  2614               	addwf	___wmul@product+1,f,c
  4325  00139C  C013  F00F         	movff	___wmul@product,?___wmul
  4326  0013A0  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4327  0013A4  0012               	return	
  4328  0013A6                     __end_of___wmul:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           indf1	equ	0xFE7
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function ___awdiv *****************
  4347 ;; Defined at:
  4348 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  dividend        2   20[COMRAM] int 
  4351 ;;  divisor         2   22[COMRAM] int 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  quotient        2   26[COMRAM] int 
  4354 ;;  sign            1   25[COMRAM] unsigned char 
  4355 ;;  counter         1   24[COMRAM] unsigned char 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  2   20[COMRAM] int 
  4358 ;; Registers used:
  4359 ;;		wreg, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4365 ;;      Params:         4       0       0       0
  4366 ;;      Locals:         4       0       0       0
  4367 ;;      Temps:          0       0       0       0
  4368 ;;      Totals:         8       0       0       0
  4369 ;;Total ram usage:        8 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    1
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_setMotorPWM
  4376 ;;		_ScanWithRange
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text20
  4381  000FDE                     __ptext20:
  4382                           	opt stack 0
  4383  000FDE                     ___awdiv:
  4384                           	opt stack 26
  4385                           
  4386                           ;incstack = 0
  4387  000FDE  0E00               	movlw	0
  4388  000FE0  6E1A               	movwf	___awdiv@sign,c
  4389  000FE2  AE18               	btfss	___awdiv@divisor+1,7,c
  4390  000FE4  D006               	goto	l1793
  4391  000FE6  6C17               	negf	___awdiv@divisor,c
  4392  000FE8  1E18               	comf	___awdiv@divisor+1,f,c
  4393  000FEA  B0D8               	btfsc	status,0,c
  4394  000FEC  2A18               	incf	___awdiv@divisor+1,f,c
  4395  000FEE  0E01               	movlw	1
  4396  000FF0  6E1A               	movwf	___awdiv@sign,c
  4397  000FF2                     l1793:
  4398  000FF2  AE16               	btfss	___awdiv@dividend+1,7,c
  4399  000FF4  D006               	goto	l1799
  4400  000FF6  6C15               	negf	___awdiv@dividend,c
  4401  000FF8  1E16               	comf	___awdiv@dividend+1,f,c
  4402  000FFA  B0D8               	btfsc	status,0,c
  4403  000FFC  2A16               	incf	___awdiv@dividend+1,f,c
  4404  000FFE  0E01               	movlw	1
  4405  001000  1A1A               	xorwf	___awdiv@sign,f,c
  4406  001002                     l1799:
  4407  001002  0E00               	movlw	0
  4408  001004  6E1C               	movwf	___awdiv@quotient+1,c
  4409  001006  0E00               	movlw	0
  4410  001008  6E1B               	movwf	___awdiv@quotient,c
  4411  00100A  5017               	movf	___awdiv@divisor,w,c
  4412  00100C  1018               	iorwf	___awdiv@divisor+1,w,c
  4413  00100E  B4D8               	btfsc	status,2,c
  4414  001010  D01C               	goto	l1821
  4415  001012  0E01               	movlw	1
  4416  001014  6E19               	movwf	___awdiv@counter,c
  4417  001016  D004               	goto	l1807
  4418  001018                     l1805:
  4419  001018  90D8               	bcf	status,0,c
  4420  00101A  3617               	rlcf	___awdiv@divisor,f,c
  4421  00101C  3618               	rlcf	___awdiv@divisor+1,f,c
  4422  00101E  2A19               	incf	___awdiv@counter,f,c
  4423  001020                     l1807:
  4424  001020  AE18               	btfss	___awdiv@divisor+1,7,c
  4425  001022  D7FA               	goto	l1805
  4426  001024                     l1809:
  4427  001024  90D8               	bcf	status,0,c
  4428  001026  361B               	rlcf	___awdiv@quotient,f,c
  4429  001028  361C               	rlcf	___awdiv@quotient+1,f,c
  4430  00102A  5017               	movf	___awdiv@divisor,w,c
  4431  00102C  5C15               	subwf	___awdiv@dividend,w,c
  4432  00102E  5018               	movf	___awdiv@divisor+1,w,c
  4433  001030  5816               	subwfb	___awdiv@dividend+1,w,c
  4434  001032  A0D8               	btfss	status,0,c
  4435  001034  D005               	goto	l1817
  4436  001036  5017               	movf	___awdiv@divisor,w,c
  4437  001038  5E15               	subwf	___awdiv@dividend,f,c
  4438  00103A  5018               	movf	___awdiv@divisor+1,w,c
  4439  00103C  5A16               	subwfb	___awdiv@dividend+1,f,c
  4440  00103E  801B               	bsf	___awdiv@quotient,0,c
  4441  001040                     l1817:
  4442  001040  90D8               	bcf	status,0,c
  4443  001042  3218               	rrcf	___awdiv@divisor+1,f,c
  4444  001044  3217               	rrcf	___awdiv@divisor,f,c
  4445  001046  2E19               	decfsz	___awdiv@counter,f,c
  4446  001048  D7ED               	goto	l1809
  4447  00104A                     l1821:
  4448  00104A  501A               	movf	___awdiv@sign,w,c
  4449  00104C  B4D8               	btfsc	status,2,c
  4450  00104E  D004               	goto	l1825
  4451  001050  6C1B               	negf	___awdiv@quotient,c
  4452  001052  1E1C               	comf	___awdiv@quotient+1,f,c
  4453  001054  B0D8               	btfsc	status,0,c
  4454  001056  2A1C               	incf	___awdiv@quotient+1,f,c
  4455  001058                     l1825:
  4456  001058  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4457  00105C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4458  001060  0012               	return	
  4459  001062                     __end_of___awdiv:
  4460                           	opt stack 0
  4461                           tblptru	equ	0xFF8
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           postinc0	equ	0xFEE
  4466                           wreg	equ	0xFE8
  4467                           indf1	equ	0xFE7
  4468                           fsr1h	equ	0xFE2
  4469                           fsr1l	equ	0xFE1
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function _grabRightIR *****************
  4478 ;; Defined at:
  4479 ;;		line 74 in file "IR_Reading.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4484 ;;  i               1   21[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  2   14[COMRAM] unsigned int 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4494 ;;      Params:         2       0       0       0
  4495 ;;      Locals:         3       0       0       0
  4496 ;;      Temps:          3       0       0       0
  4497 ;;      Totals:         8       0       0       0
  4498 ;;Total ram usage:        8 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    1
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		_ScanIR
  4505 ;;		_ScanWithRange
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text21
  4510  001062                     __ptext21:
  4511                           	opt stack 0
  4512  001062                     _grabRightIR:
  4513                           	opt stack 28
  4514                           
  4515                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  4516                           
  4517                           ;incstack = 0
  4518  001062  0E00               	movlw	0
  4519  001064  6E15               	movwf	grabRightIR@IR_signal+1,c
  4520  001066  0E00               	movlw	0
  4521  001068  6E14               	movwf	grabRightIR@IR_signal,c
  4522                           
  4523                           ;IR_Reading.c: 77: unsigned char i=0;
  4524  00106A  0E00               	movlw	0
  4525  00106C  6E16               	movwf	grabRightIR@i,c
  4526                           
  4527                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  4528  00106E  0E00               	movlw	0
  4529  001070  6E16               	movwf	grabRightIR@i,c
  4530  001072                     l1935:
  4531  001072  0E03               	movlw	3
  4532  001074  6416               	cpfsgt	grabRightIR@i,c
  4533  001076  D001               	goto	l1939
  4534  001078  D020               	goto	l1945
  4535  00107A                     l1939:
  4536                           
  4537                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  4538  00107A  5069               	movf	3945,w,c	;volatile
  4539  00107C  6E11               	movwf	??_grabRightIR& (0+255),c
  4540  00107E  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  4541  001080  0E06               	movlw	6
  4542  001082                     u1365:
  4543  001082  90D8               	bcf	status,0,c
  4544  001084  3611               	rlcf	??_grabRightIR,f,c
  4545  001086  3612               	rlcf	??_grabRightIR+1,f,c
  4546  001088  2EE8               	decfsz	wreg,f,c
  4547  00108A  D7FB               	goto	u1365
  4548  00108C  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  4549  001090  90D8               	bcf	status,0,c
  4550  001092  3213               	rrcf	??_grabRightIR+2,f,c
  4551  001094  90D8               	bcf	status,0,c
  4552  001096  3213               	rrcf	??_grabRightIR+2,f,c
  4553  001098  5013               	movf	??_grabRightIR+2,w,c
  4554  00109A  1211               	iorwf	??_grabRightIR,f,c
  4555  00109C  0E00               	movlw	0
  4556  00109E  1212               	iorwf	??_grabRightIR+1,f,c
  4557  0010A0  5011               	movf	??_grabRightIR,w,c
  4558  0010A2  2614               	addwf	grabRightIR@IR_signal,f,c
  4559  0010A4  5012               	movf	??_grabRightIR+1,w,c
  4560  0010A6  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  4561                           
  4562                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  4563  0010A8  0E82               	movlw	130
  4564  0010AA  6E11               	movwf	??_grabRightIR& (0+255),c
  4565  0010AC  0EDE               	movlw	222
  4566  0010AE                     u2197:
  4567  0010AE  2EE8               	decfsz	wreg,f,c
  4568  0010B0  D7FE               	goto	u2197
  4569  0010B2  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  4570  0010B4  D7FC               	goto	u2197
  4571  0010B6  2A16               	incf	grabRightIR@i,f,c
  4572  0010B8  D7DC               	goto	l1935
  4573  0010BA                     l1945:
  4574                           
  4575                           ;IR_Reading.c: 83: }
  4576                           ;IR_Reading.c: 85: return IR_signal>>2;
  4577  0010BA  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  4578  0010BE  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  4579  0010C2  90D8               	bcf	status,0,c
  4580  0010C4  3212               	rrcf	??_grabRightIR+1,f,c
  4581  0010C6  3211               	rrcf	??_grabRightIR,f,c
  4582  0010C8  90D8               	bcf	status,0,c
  4583  0010CA  3212               	rrcf	??_grabRightIR+1,f,c
  4584  0010CC  3211               	rrcf	??_grabRightIR,f,c
  4585  0010CE  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  4586  0010D2  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  4587  0010D6  0012               	return	
  4588  0010D8                     __end_of_grabRightIR:
  4589                           	opt stack 0
  4590                           tblptru	equ	0xFF8
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           postinc0	equ	0xFEE
  4595                           wreg	equ	0xFE8
  4596                           indf1	equ	0xFE7
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function _grabLeftIR *****************
  4607 ;; Defined at:
  4608 ;;		line 90 in file "IR_Reading.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;		None
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  IR_signal       2   19[COMRAM] unsigned int 
  4613 ;;  i               1   21[COMRAM] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  2   14[COMRAM] unsigned int 
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4623 ;;      Params:         2       0       0       0
  4624 ;;      Locals:         3       0       0       0
  4625 ;;      Temps:          3       0       0       0
  4626 ;;      Totals:         8       0       0       0
  4627 ;;Total ram usage:        8 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    1
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_ScanIR
  4634 ;;		_ScanWithRange
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text22
  4639  0010D8                     __ptext22:
  4640                           	opt stack 0
  4641  0010D8                     _grabLeftIR:
  4642                           	opt stack 28
  4643                           
  4644                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  4645                           
  4646                           ;incstack = 0
  4647  0010D8  0E00               	movlw	0
  4648  0010DA  6E15               	movwf	grabLeftIR@IR_signal+1,c
  4649  0010DC  0E00               	movlw	0
  4650  0010DE  6E14               	movwf	grabLeftIR@IR_signal,c
  4651                           
  4652                           ;IR_Reading.c: 93: unsigned char i=0;
  4653  0010E0  0E00               	movlw	0
  4654  0010E2  6E16               	movwf	grabLeftIR@i,c
  4655                           
  4656                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  4657  0010E4  0E00               	movlw	0
  4658  0010E6  6E16               	movwf	grabLeftIR@i,c
  4659  0010E8                     l1919:
  4660  0010E8  0E03               	movlw	3
  4661  0010EA  6416               	cpfsgt	grabLeftIR@i,c
  4662  0010EC  D001               	goto	l1923
  4663  0010EE  D020               	goto	l1929
  4664  0010F0                     l1923:
  4665                           
  4666                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  4667  0010F0  5067               	movf	3943,w,c	;volatile
  4668  0010F2  6E11               	movwf	??_grabLeftIR& (0+255),c
  4669  0010F4  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  4670  0010F6  0E06               	movlw	6
  4671  0010F8                     u1335:
  4672  0010F8  90D8               	bcf	status,0,c
  4673  0010FA  3611               	rlcf	??_grabLeftIR,f,c
  4674  0010FC  3612               	rlcf	??_grabLeftIR+1,f,c
  4675  0010FE  2EE8               	decfsz	wreg,f,c
  4676  001100  D7FB               	goto	u1335
  4677  001102  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  4678  001106  90D8               	bcf	status,0,c
  4679  001108  3213               	rrcf	??_grabLeftIR+2,f,c
  4680  00110A  90D8               	bcf	status,0,c
  4681  00110C  3213               	rrcf	??_grabLeftIR+2,f,c
  4682  00110E  5013               	movf	??_grabLeftIR+2,w,c
  4683  001110  1211               	iorwf	??_grabLeftIR,f,c
  4684  001112  0E00               	movlw	0
  4685  001114  1212               	iorwf	??_grabLeftIR+1,f,c
  4686  001116  5011               	movf	??_grabLeftIR,w,c
  4687  001118  2614               	addwf	grabLeftIR@IR_signal,f,c
  4688  00111A  5012               	movf	??_grabLeftIR+1,w,c
  4689  00111C  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  4690                           
  4691                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  4692  00111E  0E82               	movlw	130
  4693  001120  6E11               	movwf	??_grabLeftIR& (0+255),c
  4694  001122  0EDE               	movlw	222
  4695  001124                     u2207:
  4696  001124  2EE8               	decfsz	wreg,f,c
  4697  001126  D7FE               	goto	u2207
  4698  001128  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  4699  00112A  D7FC               	goto	u2207
  4700  00112C  2A16               	incf	grabLeftIR@i,f,c
  4701  00112E  D7DC               	goto	l1919
  4702  001130                     l1929:
  4703                           
  4704                           ;IR_Reading.c: 99: }
  4705                           ;IR_Reading.c: 101: return IR_signal>>2;
  4706  001130  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  4707  001134  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  4708  001138  90D8               	bcf	status,0,c
  4709  00113A  3212               	rrcf	??_grabLeftIR+1,f,c
  4710  00113C  3211               	rrcf	??_grabLeftIR,f,c
  4711  00113E  90D8               	bcf	status,0,c
  4712  001140  3212               	rrcf	??_grabLeftIR+1,f,c
  4713  001142  3211               	rrcf	??_grabLeftIR,f,c
  4714  001144  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  4715  001148  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  4716  00114C  0012               	return	
  4717  00114E                     __end_of_grabLeftIR:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           intcon	equ	0xFF2
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           indf1	equ	0xFE7
  4726                           fsr1h	equ	0xFE2
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _delay_tenth_s *****************
  4736 ;; Defined at:
  4737 ;;		line 19 in file "Movement.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  tenth_second    1    wreg     unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  tenth_second    1   15[COMRAM] unsigned char 
  4742 ;;  i               2   16[COMRAM] unsigned int 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;		None               void
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4752 ;;      Params:         0       0       0       0
  4753 ;;      Locals:         3       0       0       0
  4754 ;;      Temps:          1       0       0       0
  4755 ;;      Totals:         4       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;;		_ScanIR
  4764 ;;		_ScanWithRange
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text23
  4769  00128A                     __ptext23:
  4770                           	opt stack 0
  4771  00128A                     _delay_tenth_s:
  4772                           	opt stack 29
  4773                           
  4774                           ;incstack = 0
  4775                           ;delay_tenth_s@tenth_seconds stored from wreg
  4776  00128A  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  4777                           
  4778                           ;Movement.c: 20: unsigned int i=0;
  4779  00128C  0E00               	movlw	0
  4780  00128E  6E12               	movwf	delay_tenth_s@i+1,c
  4781  001290  0E00               	movlw	0
  4782  001292  6E11               	movwf	delay_tenth_s@i,c
  4783                           
  4784                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  4785  001294  0E00               	movlw	0
  4786  001296  6E12               	movwf	delay_tenth_s@i+1,c
  4787  001298  0E01               	movlw	1
  4788  00129A  6E11               	movwf	delay_tenth_s@i,c
  4789  00129C  D009               	goto	l1895
  4790  00129E                     l1891:
  4791                           
  4792                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  4793  00129E  0E82               	movlw	130
  4794  0012A0  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  4795  0012A2  0EDE               	movlw	222
  4796  0012A4                     u2217:
  4797  0012A4  2EE8               	decfsz	wreg,f,c
  4798  0012A6  D7FE               	goto	u2217
  4799  0012A8  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  4800  0012AA  D7FC               	goto	u2217
  4801  0012AC  4A11               	infsnz	delay_tenth_s@i,f,c
  4802  0012AE  2A12               	incf	delay_tenth_s@i+1,f,c
  4803  0012B0                     l1895:
  4804  0012B0  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  4805  0012B2  0D02               	mullw	2
  4806  0012B4  5011               	movf	delay_tenth_s@i,w,c
  4807  0012B6  5CF3               	subwf	prodl,w,c
  4808  0012B8  5012               	movf	delay_tenth_s@i+1,w,c
  4809  0012BA  58F4               	subwfb	prodh,w,c
  4810  0012BC  A0D8               	btfss	status,0,c
  4811  0012BE  0012               	return	
  4812  0012C0  D7EE               	goto	l1891
  4813  0012C2                     __end_of_delay_tenth_s:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           prodh	equ	0xFF4
  4817                           prodl	equ	0xFF3
  4818                           intcon	equ	0xFF2
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           indf1	equ	0xFE7
  4822                           fsr1h	equ	0xFE2
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _InterruptHandlerHigh *****************
  4832 ;; Defined at:
  4833 ;;		line 17 in file "main.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;		None
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;		None               void
  4840 ;; Registers used:
  4841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4847 ;;      Params:         0       0       0       0
  4848 ;;      Locals:         0       0       0       0
  4849 ;;      Temps:         14       0       0       0
  4850 ;;      Totals:        14       0       0       0
  4851 ;;Total ram usage:       14 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		Interrupt level 2
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	intcode
  4861  000008                     __pintcode:
  4862                           	opt stack 0
  4863  000008                     _InterruptHandlerHigh:
  4864                           	opt stack 25
  4865                           
  4866                           ;incstack = 0
  4867  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4868  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  4869  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  4870  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  4871  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  4872  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  4873  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  4874  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  4875  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  4876  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  4877  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  4878  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  4879  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  4880  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  4881  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  4882                           
  4883                           ;main.c: 19: if (PIR1bits.RCIF) {
  4884  000042  AA9E               	btfss	3998,5,c	;volatile
  4885  000044  D016               	goto	i2l66
  4886                           
  4887                           ;main.c: 20: ReceivedString[i]=RCREG;
  4888  000046  504F               	movf	_i,w,c	;volatile
  4889  000048  0D01               	mullw	1
  4890  00004A  0EEC               	movlw	low _ReceivedString
  4891  00004C  24F3               	addwf	prodl,w,c
  4892  00004E  6ED9               	movwf	fsr2l,c
  4893  000050  0E01               	movlw	high _ReceivedString
  4894  000052  20F4               	addwfc	prodh,w,c
  4895  000054  6EDA               	movwf	fsr2h,c
  4896  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  4897                           
  4898                           ;main.c: 21: RFID_Read=1;
  4899  00005A  0E01               	movlw	1
  4900  00005C  0101               	movlb	1	; () banked
  4901  00005E  6FEB               	movwf	_RFID_Read& (0+255),b	;volatile
  4902                           
  4903                           ; BSR set to: 1
  4904                           ;main.c: 22: if (i==15){
  4905  000060  0E0F               	movlw	15
  4906  000062  184F               	xorwf	_i,w,c	;volatile
  4907  000064  A4D8               	btfss	status,2,c
  4908  000066  D003               	goto	i2l2335
  4909                           
  4910                           ; BSR set to: 1
  4911                           ;main.c: 23: i=0;
  4912  000068  0E00               	movlw	0
  4913  00006A  6E4F               	movwf	_i,c	;volatile
  4914                           
  4915                           ;main.c: 24: }else{
  4916  00006C  D001               	goto	i2l2337
  4917  00006E                     i2l2335:
  4918                           
  4919                           ; BSR set to: 1
  4920                           ;main.c: 25: i++;
  4921  00006E  2A4F               	incf	_i,f,c	;volatile
  4922  000070                     i2l2337:
  4923                           
  4924                           ; BSR set to: 1
  4925                           ;main.c: 26: }
  4926                           ;main.c: 27: PIR1bits.RCIF=0;
  4927  000070  9A9E               	bcf	3998,5,c	;volatile
  4928  000072                     i2l66:
  4929  000072  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  4930  000076  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  4931  00007A  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  4932  00007E  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  4933  000082  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  4934  000086  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  4935  00008A  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  4936  00008E  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  4937  000092  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  4938  000096  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  4939  00009A  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  4940  00009E  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  4941  0000A2  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  4942  0000A6  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  4943  0000AA  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4944  0000AC  0011               	retfie		f
  4945  0000AE                     __end_of_InterruptHandlerHigh:
  4946                           	opt stack 0
  4947  0000                     pclatu	equ	0xFFB
  4948                           pclath	equ	0xFFA
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           fsr0h	equ	0xFEA
  4958                           fsr0l	equ	0xFE9
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           pclatu	equ	0xFFB
  4970                           pclath	equ	0xFFA
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodh	equ	0xFF4
  4976                           prodl	equ	0xFF3
  4977                           intcon	equ	0xFF2
  4978                           postinc0	equ	0xFEE
  4979                           fsr0h	equ	0xFEA
  4980                           fsr0l	equ	0xFE9
  4981                           wreg	equ	0xFE8
  4982                           indf1	equ	0xFE7
  4983                           fsr1h	equ	0xFE2
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992                           	psect	rparam
  4993  0000                     pclatu	equ	0xFFB
  4994                           pclath	equ	0xFFA
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodh	equ	0xFF4
  5000                           prodl	equ	0xFF3
  5001                           intcon	equ	0xFF2
  5002                           postinc0	equ	0xFEE
  5003                           fsr0h	equ	0xFEA
  5004                           fsr0l	equ	0xFE9
  5005                           wreg	equ	0xFE8
  5006                           indf1	equ	0xFE7
  5007                           fsr1h	equ	0xFE2
  5008                           fsr1l	equ	0xFE1
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           postdec2	equ	0xFDD
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016                           	psect	temp
  5017  000050                     btemp:
  5018                           	opt stack 0
  5019  000050                     	ds	1
  5020  0000                     int$flags	set	btemp
  5021                           pclatu	equ	0xFFB
  5022                           pclath	equ	0xFFA
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           intcon	equ	0xFF2
  5030                           postinc0	equ	0xFEE
  5031                           fsr0h	equ	0xFEA
  5032                           fsr0l	equ	0xFE9
  5033                           wreg	equ	0xFE8
  5034                           indf1	equ	0xFE7
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      79
    BANK0           160      0       0
    BANK1           256    235     252
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanWithRange
    _initLCD->_SendLCD
    _SendLCD->_LCDout
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               340   340      0   85232
                                             76 COMRAM     2     2      0
                                              0 BANK1    235   235      0
                             _ScanIR
                      _ScanWithRange
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     754
                                             20 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                             18 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             14 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3331
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       30    23      7   27524
                                             46 COMRAM    30    23      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   24822
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    8838
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    9478
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    5207
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2859
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1787
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     906
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     EB      FC       7       98.4%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      4F       1       84.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14B       5        0.0%
DATA                 0      0     14B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 23:12:50 2018

                        ?_grabRightIR 000F                                     _i 004F  
                                  l69 0682                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                           main@Message 01C8  
                                 l139 0CBC                                   l169 11A0  
                         grabLeftIR@i 0016                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0164  
                        main@MoveType 0100                                  l2021 1278  
                                l2111 0332                                  l2103 02F4  
                                l2031 136E                                  l2017 1266  
                                l2203 0568                                  l2125 039A  
                                l2117 0336                                  l2071 01D6  
                                l2321 0F4A                                  l2313 0EFA  
                                l2171 049E                                  l2147 043A  
                                l2155 0450                                  l2139 03D6  
                                l2219 05DC                                  l2075 0202  
                                l2403 07B2                                  l2253 0AFE  
                                l2245 0AB0                                  l2165 049A  
                                l2309 0EF2                                  l2421 0834  
                                l2239 0AAC                                  l2271 0B52  
                                l2095 0290                                  l2079 022E  
                                l2407 07CE                                  l2281 0BA0  
                                l2433 087C                                  l2417 082A  
                                l2441 089C                                  l2259 0B02  
                                l2187 04E6                                  l2427 086C  
                                l2363 0688                                  l1805 1018  
                                l1821 104A                                  l2197 0564  
                                l2453 08FA                                  l2429 0872  
                                l1807 1020                                  l2287 0BA4  
                                l2471 09DC                                  l2463 0952  
                                l2455 0902                                  l2439 0898  
                                l2391 0766                                  l2383 070E  
                                l1825 1058                                  l1817 1040  
                                l1809 1024                                  l2449 08E0  
                                l1923 10F0                                  l1835 0C94  
                                l2299 0BE0                                  l2395 0778  
                                l2387 0744                                  l1853 1180  
                                l1845 1150                                  l2469 09B0  
                                l2477 09E2                                  l1919 10E8  
                                l1935 1072                                  l1871 0F80  
                                l1863 0F50                                  l1929 1130  
                                l1945 10BA                                  l1793 0FF2  
                                l1849 1168                                  l1891 129E  
                                l1939 107A                                  l1867 0F68  
                                l1877 0FA0                                  l1895 12B0  
                                l1799 1002                                  u1124 0C58  
                                u1125 0C54                                  u1134 0CB0  
                                u1135 0CAC                                  u1145 0D08  
                                u1235 0D22                                  u1315 1334  
                                u2107 0E80                                  u2027 0DF0  
                                u1316 1336                                  u1405 136A  
                                u1245 0D30                                  u2117 0E92  
                                u2037 0E06                                  u1406 136C  
                                _LATB 000F8A                                  u2207 1124  
                                u1335 10F8                                  u1255 0D4E  
                                u2127 1342                                  u2047 0E16  
                                u2217 12A4                                  u1425 137C  
                                u1265 0D5C                                  u2137 1352  
                                u2057 0E24                                  u1426 137E  
                                u2147 0DD6                                  u1275 0D7C  
                                u2067 0E32                                  u1365 1082  
                                u2157 1408                                  u1285 0D8A  
                                u2077 0E44                                  u2167 126C  
                                u1295 0DBA                                  u2087 0E56  
                                u2177 0F9A                                  u2097 0E6C  
                                u2187 119A                                  u2197 10AE  
                                u1840 07F8                                  u1850 080A  
                                u1842 07FA                                  u1852 080C  
                                i2l66 0072                                  _main 05E0  
                       main@ScanAngle 01D5                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0050  
                                _stop 0F4E                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00AE                        delay_s@seconds 0010  
                        ___param_bank 000010                       __end_of_SendLCD 135A  
                               ?_main 0001                       __end_of___awdiv 1062  
                               ?_stop 0026                       ___awdiv@divisor 0017  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0016  
                       _initRFID$1317 000F                       ___awdiv@counter 0019  
                               _RCREG 000FAE                                 _E_TOG 1404  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_delay_s 128A  
                     __end_of_initLCD 0E9A                                 main@i 01D7  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 052E                       __initialization 13E8  
                        __end_of_main 0A00                          __end_of_stop 0FDE  
                      delay_tenth_s@i 0011                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 1380                   VerifySignal@hexByte 0018  
                              ??_main 004D                                ??_stop 002A  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 001D  
              __size_of_fullSpeedBack 0036                      ___awdiv@dividend 0015  
                              i2l2335 006E                                i2l2337 0070  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 12C2  
                              _LCDout 0D18                           SendLCD@Byte 0014  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                         SendLCD@type 0013                             ??_SendLCD 0014  
                              _ScanIR 0A00                                ___wmul 1380  
                           ??___awdiv 0019                      __end_of_initRFID 13E8  
                              _initIR 13A6                  __size_of_grabRightIR 0076  
                              clear_0 13EE                      ___awdiv@quotient 001B  
                           ??_delay_s 000F                                main@mL 01D9  
                              main@mR 01E2                        ??_initMotorPWM 000F  
                           ??_initLCD 0015                         _ScanWithRange 00B2  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 1252  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 13F6  
                       ___rparam_used 000001                         __end_of_E_TOG 1412  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 12C2  
                      ?_ScanWithRange 002F                  VerifySignal@checksum 0017  
                             ??_E_TOG 000F         __size_of_InterruptHandlerHigh 00A6  
          delay_tenth_s@tenth_seconds 0010                            __pbssBANK1 01EB  
                             ?_LCDout 0001                               ?_ScanIR 002F  
                      ?_fullSpeedBack 002B                 __size_of_enableSensor 0026  
                             ?___wmul 000F                   grabLeftIR@IR_signal 0014  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0070  
                          _grabLeftIR 10D8                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 0134                       __size_of_LCDout 00C6  
                        _enableSensor 135A                    __size_of_turnRight 004A  
                __end_of_initMotorPWM 132A                               _SendLCD 132A  
                             __Hparam 0000                               __Lparam 0000  
                     __size_of_ScanIR 01E4                               ___awdiv 0FDE  
                     __size_of___wmul 0026                       __size_of_initIR 0022  
                             __pcinit 13E8                       ??_ScanWithRange 0036  
                             _delay_s 1252                               __ramtop 0300  
                           ?_turnLeft 002B                               __ptext0 05E0  
                             __ptext1 13C8                               __ptext2 12F8  
                             __ptext3 0DDE                               __ptext4 132A  
                             __ptext5 0D18                               __ptext6 1404  
                             __ptext7 13A6                               __ptext8 12C2  
                             __ptext9 135A                               _initLCD 0DDE  
                        LCDout@number 0012                         ?_VerifySignal 000F  
                end_of_initialization 13F6                    setMotorPWM@PWMduty 0024  
                          ??_initRFID 000F                         __Lmediumconst 0000  
                  ScanIR@SensorResult 003B                       ??_fullSpeedBack 002F  
                           _RFID_Read 01EB                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 002F  
                   __end_of_turnRight 1208                           ?_grabLeftIR 000F  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0011  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0039                        __end_of_LCDout 0DDE  
                           _TXSTAbits 000FAC                         ??_grabRightIR 0011  
                      __end_of_ScanIR 0BE4                        _fullSpeedAhead 114E  
                      _ReceivedString 01EC                        __end_of___wmul 13A6  
                         _BAUDCONbits 000FAA                        __end_of_initIR 13C8  
              __size_of_delay_tenth_s 0038                   start_initialization 13E8  
                  VerifySignal@Signal 000F                 __size_of_initMotorPWM 0032  
                            ??_LCDout 000F          __end_of_InterruptHandlerHigh 00AE  
                            ??_ScanIR 0033                __end_of_fullSpeedAhead 11BE  
                 __size_of_grabLeftIR 0076                              ??___wmul 0013  
                            ??_initIR 000F                   __end_of_grabRightIR 10D8  
                        _initMotorPWM 12F8                           __pbssCOMRAM 004F  
                       __pcstackBANK1 0100      ScanWithRange@DirectionFoundLimit 003D  
                       _delay_tenth_s 128A                     __size_of_initRFID 0020  
   ScanWithRange@ClearSignalTolerance 003B                              ?_SendLCD 0013  
                     ?_fullSpeedAhead 0026                             __pintcode 0008  
                __end_of_VerifySignal 0F4E                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                      __size_of_E_TOG 000E                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 0045            ScanWithRange@SensorResultL 0041  
          ScanWithRange@SensorResultR 0049                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 1062                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 05E0  
                        setMotorPWM@m 001D                 ScanWithRange@MoveTime 0034  
                _InterruptHandlerHigh 0008                              ScanIR@mL 002F  
                            ScanIR@mR 0031                          ??_grabLeftIR 0011  
                           _turnRight 11BE            ScanIR@ClearSignalTolerance 0035  
                 __end_of_setMotorPWM 0D18                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 12F8                    __end_of_grabLeftIR 114E  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                    __size_of_initLCD 00BC                            ?_turnRight 002B  
                            __ptext10 1252                              __ptext11 0E9A  
                            __ptext20 0FDE                              __ptext12 00B2  
                            __ptext21 1062                              __ptext13 0A00  
                            __ptext22 10D8                              __ptext14 11BE  
                            __ptext23 128A                              __ptext15 1208  
                            __ptext16 0F4E                              __ptext17 114E  
                            __ptext18 0BE4                              __ptext19 1380  
                     ??_delay_tenth_s 000F                              _initRFID 13C8  
                       __size_of_main 0420             ScanWithRange@ResultFalseC 0039  
                  main@DirectionFound 01D6             ScanWithRange@ResultFalseL 0038  
           ScanWithRange@ResultFalseR 003A                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
               __size_of_VerifySignal 00B4                              delay_s@i 0011  
                            int$flags 0050                              main@Move 01D8  
                            main@mode 01D4                              main@test 01D2  
                            _turnLeft 1208                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                         VerifySignal@i 001A  
                          _INTCONbits 000FF2            ScanWithRange@tenth_seconds 0033  
                         _setMotorPWM 0BE4                          _VerifySignal 0E9A  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 003F                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
