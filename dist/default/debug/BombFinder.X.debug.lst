

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 06 09:55:30 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    19  0000                     _LATB	set	3978
    20  0000                     _PTCON0	set	3967
    21  0000                     _PTCON1	set	3966
    22  0000                     _PTPERH	set	3962
    23  0000                     _PTPERL	set	3963
    24  0000                     _PWMCON0	set	3951
    25  0000                     _PWMCON1	set	3950
    26  0000                     _TRISAbits	set	3986
    27  0000                     _TRISBbits	set	3987
    28  0000                     _PDC0H	set	3960
    29  0000                     _PDC0L	set	3961
    30  0000                     _PDC1H	set	3958
    31  0000                     _PDC1L	set	3959
    32  0000                     _ADCON0	set	4034
    33  0000                     _ADCON1	set	4033
    34  0000                     _ADCON2	set	4032
    35  0000                     _ANSEL0bits	set	4024
    36  0000                     _OSCCON	set	4051
    37  0000                     _OSCCONbits	set	4051
    38                           
    39                           ; #config settings
    40  0000                     
    41                           	psect	cinit
    42  00183A                     __pcinit:
    43                           	opt stack 0
    44  00183A                     start_initialization:
    45                           	opt stack 0
    46  00183A                     __initialization:
    47                           	opt stack 0
    48  00183A                     end_of_initialization:
    49                           	opt stack 0
    50  00183A                     __end_of__initialization:
    51                           	opt stack 0
    52  00183A  0100               	movlb	0
    53  00183C  EF6E  F00D         	goto	_main	;jump to C main() function
    54                           
    55                           	psect	cstackCOMRAM
    56  000001                     __pcstackCOMRAM:
    57                           	opt stack 0
    58  000001                     ??_delay_s:
    59  000001                     ?___wmul:
    60                           	opt stack 0
    61  000001                     ___wmul@multiplier:
    62                           	opt stack 0
    63                           
    64                           ; 2 bytes @ 0x0
    65  000001                     	ds	2
    66  000003                     delay_s@seconds:
    67                           	opt stack 0
    68  000003                     ___wmul@multiplicand:
    69                           	opt stack 0
    70                           
    71                           ; 2 bytes @ 0x2
    72  000003                     	ds	1
    73  000004                     delay_s@i:
    74                           	opt stack 0
    75                           
    76                           ; 2 bytes @ 0x3
    77  000004                     	ds	1
    78  000005                     ___wmul@product:
    79                           	opt stack 0
    80                           
    81                           ; 2 bytes @ 0x4
    82  000005                     	ds	1
    83  000006                     delay_s@j:
    84                           	opt stack 0
    85                           
    86                           ; 2 bytes @ 0x5
    87  000006                     	ds	1
    88  000007                     ?___awdiv:
    89                           	opt stack 0
    90  000007                     ___awdiv@dividend:
    91                           	opt stack 0
    92                           
    93                           ; 2 bytes @ 0x6
    94  000007                     	ds	2
    95  000009                     ___awdiv@divisor:
    96                           	opt stack 0
    97                           
    98                           ; 2 bytes @ 0x8
    99  000009                     	ds	2
   100  00000B                     ___awdiv@counter:
   101                           	opt stack 0
   102                           
   103                           ; 1 bytes @ 0xA
   104  00000B                     	ds	1
   105  00000C                     ___awdiv@sign:
   106                           	opt stack 0
   107                           
   108                           ; 1 bytes @ 0xB
   109  00000C                     	ds	1
   110  00000D                     ___awdiv@quotient:
   111                           	opt stack 0
   112                           
   113                           ; 2 bytes @ 0xC
   114  00000D                     	ds	2
   115  00000F                     setMotorPWM@m:
   116                           	opt stack 0
   117                           
   118                           ; 2 bytes @ 0xE
   119  00000F                     	ds	2
   120  000011                     ??_setMotorPWM:
   121                           
   122                           ; 0 bytes @ 0x10
   123  000011                     	ds	5
   124  000016                     setMotorPWM@PWMduty:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x15
   128  000016                     	ds	2
   129  000018                     stop@mL:
   130                           	opt stack 0
   131  000018                     fullSpeedAhead@mL:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x17
   135  000018                     	ds	2
   136  00001A                     stop@mR:
   137                           	opt stack 0
   138  00001A                     fullSpeedAhead@mR:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x19
   142  00001A                     	ds	2
   143  00001C                     
   144                           ; 0 bytes @ 0x1B
   145  00001C                     	ds	1
   146  00001D                     turnLeft@mL:
   147                           	opt stack 0
   148  00001D                     turnRight@mL:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x1C
   152  00001D                     	ds	2
   153  00001F                     turnLeft@mR:
   154                           	opt stack 0
   155  00001F                     turnRight@mR:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x1E
   159  00001F                     	ds	2
   160  000021                     main@motorL:
   161                           	opt stack 0
   162                           
   163                           ; 9 bytes @ 0x20
   164  000021                     	ds	9
   165  00002A                     main@motorR:
   166                           	opt stack 0
   167                           
   168                           ; 9 bytes @ 0x29
   169  00002A                     	ds	9
   170                           
   171 ;;
   172 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   173 ;;
   174 ;; *************** function _main *****************
   175 ;; Defined at:
   176 ;;		line 20 in file "main.c"
   177 ;; Parameters:    Size  Location     Type
   178 ;;		None
   179 ;; Auto vars:     Size  Location     Type
   180 ;;  motorR          9   41[COMRAM] struct DC_motor
   181 ;;  motorL          9   32[COMRAM] struct DC_motor
   182 ;; Return value:  Size  Location     Type
   183 ;;		None               void
   184 ;; Registers used:
   185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   186 ;; Tracked objects:
   187 ;;		On entry : 0/0
   188 ;;		On exit  : 0/0
   189 ;;		Unchanged: 0/0
   190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   191 ;;      Params:         0       0       0       0
   192 ;;      Locals:        18       0       0       0
   193 ;;      Temps:          0       0       0       0
   194 ;;      Totals:        18       0       0       0
   195 ;;Total ram usage:       18 bytes
   196 ;; Hardware stack levels required when called:    4
   197 ;; This function calls:
   198 ;;		_delay_s
   199 ;;		_fullSpeedAhead
   200 ;;		_initPWM
   201 ;;		_stop
   202 ;;		_turnLeft
   203 ;;		_turnRight
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           	psect	text0
   210  001ADC                     __ptext0:
   211                           	opt stack 0
   212  001ADC                     _main:
   213                           	opt stack 27
   214                           
   215                           ;main.c: 22: struct DC_motor motorL, motorR;
   216                           ;main.c: 23: motorL.power=0;
   217                           
   218                           ;incstack = 0
   219  001ADC  0E00               	movlw	0
   220  001ADE  6E21               	movwf	main@motorL,c
   221                           
   222                           ;main.c: 24: motorL.direction=1;
   223  001AE0  0E01               	movlw	1
   224  001AE2  6E22               	movwf	main@motorL+1,c
   225                           
   226                           ;main.c: 25: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   227  001AE4  0E79               	movlw	121
   228  001AE6  6E23               	movwf	main@motorL+2,c
   229  001AE8  0E0F               	movlw	15
   230  001AEA  6E24               	movwf	main@motorL+3,c
   231                           
   232                           ;main.c: 26: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   233  001AEC  0E78               	movlw	120
   234  001AEE  6E25               	movwf	main@motorL+4,c
   235  001AF0  0E0F               	movlw	15
   236  001AF2  6E26               	movwf	main@motorL+5,c
   237                           
   238                           ;main.c: 27: motorL.dir_pin=0;
   239  001AF4  0E00               	movlw	0
   240  001AF6  6E27               	movwf	main@motorL+6,c
   241                           
   242                           ;main.c: 28: motorL.PWMperiod=199;
   243  001AF8  0E00               	movlw	0
   244  001AFA  6E29               	movwf	main@motorL+8,c
   245  001AFC  0EC7               	movlw	199
   246  001AFE  6E28               	movwf	main@motorL+7,c
   247                           
   248                           ;main.c: 30: motorR.power=0;
   249  001B00  0E00               	movlw	0
   250  001B02  6E2A               	movwf	main@motorR,c
   251                           
   252                           ;main.c: 31: motorR.direction=1;
   253  001B04  0E01               	movlw	1
   254  001B06  6E2B               	movwf	main@motorR+1,c
   255                           
   256                           ;main.c: 32: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   257  001B08  0E77               	movlw	119
   258  001B0A  6E2C               	movwf	main@motorR+2,c
   259  001B0C  0E0F               	movlw	15
   260  001B0E  6E2D               	movwf	main@motorR+3,c
   261                           
   262                           ;main.c: 33: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   263  001B10  0E76               	movlw	118
   264  001B12  6E2E               	movwf	main@motorR+4,c
   265  001B14  0E0F               	movlw	15
   266  001B16  6E2F               	movwf	main@motorR+5,c
   267                           
   268                           ;main.c: 34: motorR.dir_pin=2;
   269  001B18  0E02               	movlw	2
   270  001B1A  6E30               	movwf	main@motorR+6,c
   271                           
   272                           ;main.c: 35: motorR.PWMperiod=199;
   273  001B1C  0E00               	movlw	0
   274  001B1E  6E32               	movwf	main@motorR+8,c
   275  001B20  0EC7               	movlw	199
   276  001B22  6E31               	movwf	main@motorR+7,c
   277                           
   278                           ;main.c: 38: TRISBbits.RB0=0;
   279  001B24  9093               	bcf	3987,0,c	;volatile
   280                           
   281                           ;main.c: 39: TRISBbits.RB1=0;
   282  001B26  9293               	bcf	3987,1,c	;volatile
   283                           
   284                           ;main.c: 40: TRISBbits.RB2=0;
   285  001B28  9493               	bcf	3987,2,c	;volatile
   286                           
   287                           ;main.c: 41: TRISBbits.RB3=0;
   288  001B2A  9693               	bcf	3987,3,c	;volatile
   289                           
   290                           ;main.c: 43: TRISAbits.RA3=1;
   291  001B2C  8692               	bsf	3986,3,c	;volatile
   292                           
   293                           ;main.c: 44: ANSEL0bits.ANS3=1;
   294  001B2E  86B8               	bsf	4024,3,c	;volatile
   295                           
   296                           ;main.c: 46: ADCON0=0b00001101;
   297  001B30  0E0D               	movlw	13
   298  001B32  6EC2               	movwf	4034,c	;volatile
   299                           
   300                           ;main.c: 47: ADCON1=0b00000000;
   301  001B34  0E00               	movlw	0
   302  001B36  6EC1               	movwf	4033,c	;volatile
   303                           
   304                           ;main.c: 49: ADCON2=0b10101011;
   305  001B38  0EAB               	movlw	171
   306  001B3A  6EC0               	movwf	4032,c	;volatile
   307                           
   308                           ;main.c: 51: OSCCON = 0x72;
   309  001B3C  0E72               	movlw	114
   310  001B3E  6ED3               	movwf	4051,c	;volatile
   311  001B40                     l115:
   312  001B40  A4D3               	btfss	4051,2,c	;volatile
   313  001B42  D7FE               	goto	l115
   314                           
   315                           ;main.c: 54: initPWM();
   316  001B44  EC33  F00C         	call	_initPWM	;wreg free
   317  001B48                     l1065:
   318                           
   319                           ;main.c: 60: delay_s(2);
   320  001B48  0E02               	movlw	2
   321  001B4A  EC7E  F00C         	call	_delay_s
   322                           
   323                           ;main.c: 61: fullSpeedAhead(&motorL, &motorR);
   324  001B4E  0E21               	movlw	low main@motorL
   325  001B50  6E18               	movwf	fullSpeedAhead@mL,c
   326  001B52  0E00               	movlw	high main@motorL
   327  001B54  6E19               	movwf	fullSpeedAhead@mL+1,c
   328  001B56  0E2A               	movlw	low main@motorR
   329  001B58  6E1A               	movwf	fullSpeedAhead@mR,c
   330  001B5A  0E00               	movlw	high main@motorR
   331  001B5C  6E1B               	movwf	fullSpeedAhead@mR+1,c
   332  001B5E  ECAC  F00C         	call	_fullSpeedAhead	;wreg free
   333                           
   334                           ;main.c: 63: delay_s(2);
   335  001B62  0E02               	movlw	2
   336  001B64  EC7E  F00C         	call	_delay_s
   337                           
   338                           ;main.c: 64: stop(&motorL, &motorR);
   339  001B68  0E21               	movlw	low main@motorL
   340  001B6A  6E18               	movwf	stop@mL,c
   341  001B6C  0E00               	movlw	high main@motorL
   342  001B6E  6E19               	movwf	stop@mL+1,c
   343  001B70  0E2A               	movlw	low main@motorR
   344  001B72  6E1A               	movwf	stop@mR,c
   345  001B74  0E00               	movlw	high main@motorR
   346  001B76  6E1B               	movwf	stop@mR+1,c
   347  001B78  EC26  F00D         	call	_stop	;wreg free
   348                           
   349                           ;main.c: 66: delay_s(2);
   350  001B7C  0E02               	movlw	2
   351  001B7E  EC7E  F00C         	call	_delay_s
   352                           
   353                           ;main.c: 67: turnLeft(&motorL, &motorR);
   354  001B82  0E21               	movlw	low main@motorL
   355  001B84  6E1D               	movwf	turnLeft@mL,c
   356  001B86  0E00               	movlw	high main@motorL
   357  001B88  6E1E               	movwf	turnLeft@mL+1,c
   358  001B8A  0E2A               	movlw	low main@motorR
   359  001B8C  6E1F               	movwf	turnLeft@mR,c
   360  001B8E  0E00               	movlw	high main@motorR
   361  001B90  6E20               	movwf	turnLeft@mR+1,c
   362  001B92  EC48  F00C         	call	_turnLeft	;wreg free
   363                           
   364                           ;main.c: 69: delay_s(2);
   365  001B96  0E02               	movlw	2
   366  001B98  EC7E  F00C         	call	_delay_s
   367                           
   368                           ;main.c: 70: stop(&motorL, &motorR);
   369  001B9C  0E21               	movlw	low main@motorL
   370  001B9E  6E18               	movwf	stop@mL,c
   371  001BA0  0E00               	movlw	high main@motorL
   372  001BA2  6E19               	movwf	stop@mL+1,c
   373  001BA4  0E2A               	movlw	low main@motorR
   374  001BA6  6E1A               	movwf	stop@mR,c
   375  001BA8  0E00               	movlw	high main@motorR
   376  001BAA  6E1B               	movwf	stop@mR+1,c
   377  001BAC  EC26  F00D         	call	_stop	;wreg free
   378                           
   379                           ;main.c: 72: delay_s(2);
   380  001BB0  0E02               	movlw	2
   381  001BB2  EC7E  F00C         	call	_delay_s
   382                           
   383                           ;main.c: 73: turnRight(&motorL, &motorR);
   384  001BB6  0E21               	movlw	low main@motorL
   385  001BB8  6E1D               	movwf	turnRight@mL,c
   386  001BBA  0E00               	movlw	high main@motorL
   387  001BBC  6E1E               	movwf	turnRight@mL+1,c
   388  001BBE  0E2A               	movlw	low main@motorR
   389  001BC0  6E1F               	movwf	turnRight@mR,c
   390  001BC2  0E00               	movlw	high main@motorR
   391  001BC4  6E20               	movwf	turnRight@mR+1,c
   392  001BC6  EC63  F00C         	call	_turnRight	;wreg free
   393  001BCA  D7BE               	goto	l1065
   394  001BCC                     __end_of_main:
   395                           	opt stack 0
   396                           
   397 ;; *************** function _turnRight *****************
   398 ;; Defined at:
   399 ;;		line 89 in file "dc_motor.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   402 ;;		 -> main@motorL(9), 
   403 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   404 ;;		 -> main@motorR(9), 
   405 ;; Auto vars:     Size  Location     Type
   406 ;;		None
   407 ;; Return value:  Size  Location     Type
   408 ;;		None               void
   409 ;; Registers used:
   410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   416 ;;      Params:         4       0       0       0
   417 ;;      Locals:         0       0       0       0
   418 ;;      Temps:          0       0       0       0
   419 ;;      Totals:         4       0       0       0
   420 ;;Total ram usage:        4 bytes
   421 ;; Hardware stack levels used:    1
   422 ;; Hardware stack levels required when called:    3
   423 ;; This function calls:
   424 ;;		_fullSpeedAhead
   425 ;; This function is called by:
   426 ;;		_main
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text1
   431  0018C6                     __ptext1:
   432                           	opt stack 0
   433  0018C6                     _turnRight:
   434                           	opt stack 27
   435                           
   436                           ;dc_motor.c: 92: mL->direction=1;
   437                           
   438                           ;incstack = 0
   439  0018C6  EE20 F001          	lfsr	2,1
   440  0018CA  501D               	movf	turnRight@mL,w,c
   441  0018CC  26D9               	addwf	fsr2l,f,c
   442  0018CE  501E               	movf	turnRight@mL+1,w,c
   443  0018D0  22DA               	addwfc	fsr2h,f,c
   444  0018D2  0E01               	movlw	1
   445  0018D4  6EDF               	movwf	indf2,c
   446                           
   447                           ;dc_motor.c: 93: mR->direction=0;
   448  0018D6  EE20 F001          	lfsr	2,1
   449  0018DA  501F               	movf	turnRight@mR,w,c
   450  0018DC  26D9               	addwf	fsr2l,f,c
   451  0018DE  5020               	movf	turnRight@mR+1,w,c
   452  0018E0  22DA               	addwfc	fsr2h,f,c
   453  0018E2  0E00               	movlw	0
   454  0018E4  6EDF               	movwf	indf2,c
   455                           
   456                           ;dc_motor.c: 94: fullSpeedAhead(mL, mR);
   457  0018E6  C01D  F018         	movff	turnRight@mL,fullSpeedAhead@mL
   458  0018EA  C01E  F019         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
   459  0018EE  C01F  F01A         	movff	turnRight@mR,fullSpeedAhead@mR
   460  0018F2  C020  F01B         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
   461  0018F6  ECAC  F00C         	call	_fullSpeedAhead	;wreg free
   462  0018FA  0012               	return		;funcret
   463  0018FC                     __end_of_turnRight:
   464                           	opt stack 0
   465                           indf2	equ	0xFDF
   466                           fsr2h	equ	0xFDA
   467                           fsr2l	equ	0xFD9
   468                           
   469 ;; *************** function _turnLeft *****************
   470 ;; Defined at:
   471 ;;		line 80 in file "dc_motor.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;  mL              2   28[COMRAM] PTR struct DC_motor
   474 ;;		 -> main@motorL(9), 
   475 ;;  mR              2   30[COMRAM] PTR struct DC_motor
   476 ;;		 -> main@motorR(9), 
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;		None               void
   481 ;; Registers used:
   482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   488 ;;      Params:         4       0       0       0
   489 ;;      Locals:         0       0       0       0
   490 ;;      Temps:          0       0       0       0
   491 ;;      Totals:         4       0       0       0
   492 ;;Total ram usage:        4 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    3
   495 ;; This function calls:
   496 ;;		_fullSpeedAhead
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text2
   503  001890                     __ptext2:
   504                           	opt stack 0
   505  001890                     _turnLeft:
   506                           	opt stack 27
   507                           
   508                           ;dc_motor.c: 83: mL->direction=0;
   509                           
   510                           ;incstack = 0
   511  001890  EE20 F001          	lfsr	2,1
   512  001894  501D               	movf	turnLeft@mL,w,c
   513  001896  26D9               	addwf	fsr2l,f,c
   514  001898  501E               	movf	turnLeft@mL+1,w,c
   515  00189A  22DA               	addwfc	fsr2h,f,c
   516  00189C  0E00               	movlw	0
   517  00189E  6EDF               	movwf	indf2,c
   518                           
   519                           ;dc_motor.c: 84: mR->direction=1;
   520  0018A0  EE20 F001          	lfsr	2,1
   521  0018A4  501F               	movf	turnLeft@mR,w,c
   522  0018A6  26D9               	addwf	fsr2l,f,c
   523  0018A8  5020               	movf	turnLeft@mR+1,w,c
   524  0018AA  22DA               	addwfc	fsr2h,f,c
   525  0018AC  0E01               	movlw	1
   526  0018AE  6EDF               	movwf	indf2,c
   527                           
   528                           ;dc_motor.c: 85: fullSpeedAhead(mL, mR);
   529  0018B0  C01D  F018         	movff	turnLeft@mL,fullSpeedAhead@mL
   530  0018B4  C01E  F019         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
   531  0018B8  C01F  F01A         	movff	turnLeft@mR,fullSpeedAhead@mR
   532  0018BC  C020  F01B         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
   533  0018C0  ECAC  F00C         	call	_fullSpeedAhead	;wreg free
   534  0018C4  0012               	return		;funcret
   535  0018C6                     __end_of_turnLeft:
   536                           	opt stack 0
   537                           indf2	equ	0xFDF
   538                           fsr2h	equ	0xFDA
   539                           fsr2l	equ	0xFD9
   540                           
   541 ;; *************** function _fullSpeedAhead *****************
   542 ;; Defined at:
   543 ;;		line 98 in file "dc_motor.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;  mL              2   23[COMRAM] PTR struct DC_motor
   546 ;;		 -> main@motorL(9), 
   547 ;;  mR              2   25[COMRAM] PTR struct DC_motor
   548 ;;		 -> main@motorR(9), 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;		None               void
   553 ;; Registers used:
   554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   560 ;;      Params:         4       0       0       0
   561 ;;      Locals:         0       0       0       0
   562 ;;      Temps:          1       0       0       0
   563 ;;      Totals:         5       0       0       0
   564 ;;Total ram usage:        5 bytes
   565 ;; Hardware stack levels used:    1
   566 ;; Hardware stack levels required when called:    2
   567 ;; This function calls:
   568 ;;		_setMotorPWM
   569 ;; This function is called by:
   570 ;;		_turnLeft
   571 ;;		_turnRight
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text3
   577  001958                     __ptext3:
   578                           	opt stack 0
   579  001958                     _fullSpeedAhead:
   580                           	opt stack 27
   581                           
   582                           ;dc_motor.c: 101: while(mL->power<100 || mR->power<100){
   583                           
   584                           ;incstack = 0
   585  001958  D028               	goto	l63
   586  00195A                     l979:
   587                           
   588                           ;dc_motor.c: 102: if(mL->power<100){
   589  00195A  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
   590  00195E  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
   591  001962  0E64               	movlw	100
   592  001964  60DF               	cpfslt	indf2,c
   593  001966  D005               	goto	l983
   594                           
   595                           ;dc_motor.c: 103: mL->power++;
   596  001968  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
   597  00196C  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
   598  001970  2ADF               	incf	indf2,f,c
   599  001972                     l983:
   600                           
   601                           ;dc_motor.c: 104: }
   602                           ;dc_motor.c: 105: if(mR->power<100){
   603  001972  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
   604  001976  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
   605  00197A  0E64               	movlw	100
   606  00197C  60DF               	cpfslt	indf2,c
   607  00197E  D005               	goto	l987
   608                           
   609                           ;dc_motor.c: 106: mR->power++;
   610  001980  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
   611  001984  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
   612  001988  2ADF               	incf	indf2,f,c
   613  00198A                     l987:
   614                           
   615                           ;dc_motor.c: 107: }
   616                           ;dc_motor.c: 108: setMotorPWM(mL);
   617  00198A  C018  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
   618  00198E  C019  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
   619  001992  ECE6  F00D         	call	_setMotorPWM	;wreg free
   620                           
   621                           ;dc_motor.c: 109: setMotorPWM(mR);
   622  001996  C01A  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
   623  00199A  C01B  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
   624  00199E  ECE6  F00D         	call	_setMotorPWM	;wreg free
   625                           
   626                           ;dc_motor.c: 110: _delay((unsigned long)((50)*(8000000/4000000.0)));
   627  0019A2  0E21               	movlw	33
   628  0019A4                     u467:
   629  0019A4  2EE8               	decfsz	wreg,f,c
   630  0019A6  D7FE               	goto	u467
   631  0019A8  F000               	nop	
   632  0019AA                     l63:
   633  0019AA  C018  FFD9         	movff	fullSpeedAhead@mL,fsr2l
   634  0019AE  C019  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
   635  0019B2  0E63               	movlw	99
   636  0019B4  64DF               	cpfsgt	indf2,c
   637  0019B6  D7D1               	goto	l979
   638  0019B8  C01A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
   639  0019BC  C01B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
   640  0019C0  0E63               	movlw	99
   641  0019C2  64DF               	cpfsgt	indf2,c
   642  0019C4  D7CA               	goto	l979
   643  0019C6  0012               	return	
   644  0019C8                     __end_of_fullSpeedAhead:
   645                           	opt stack 0
   646                           wreg	equ	0xFE8
   647                           indf2	equ	0xFDF
   648                           fsr2h	equ	0xFDA
   649                           fsr2l	equ	0xFD9
   650                           
   651 ;; *************** function _stop *****************
   652 ;; Defined at:
   653 ;;		line 61 in file "dc_motor.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  mL              2   23[COMRAM] PTR struct DC_motor
   656 ;;		 -> main@motorL(9), 
   657 ;;  mR              2   25[COMRAM] PTR struct DC_motor
   658 ;;		 -> main@motorR(9), 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;		None               void
   663 ;; Registers used:
   664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   670 ;;      Params:         4       0       0       0
   671 ;;      Locals:         0       0       0       0
   672 ;;      Temps:          0       0       0       0
   673 ;;      Totals:         4       0       0       0
   674 ;;Total ram usage:        4 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; Hardware stack levels required when called:    2
   677 ;; This function calls:
   678 ;;		_setMotorPWM
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text4
   685  001A4C                     __ptext4:
   686                           	opt stack 0
   687  001A4C                     _stop:
   688                           	opt stack 28
   689                           
   690                           ;dc_motor.c: 64: while(mL->power>0 || mR->power>0){
   691                           
   692                           ;incstack = 0
   693  001A4C  D028               	goto	l1011
   694  001A4E                     l997:
   695                           
   696                           ;dc_motor.c: 65: if(mL->power>0){
   697  001A4E  C018  FFD9         	movff	stop@mL,fsr2l
   698  001A52  C019  FFDA         	movff	stop@mL+1,fsr2h
   699  001A56  50DF               	movf	indf2,w,c
   700  001A58  B4D8               	btfsc	status,2,c
   701  001A5A  D005               	goto	l1001
   702                           
   703                           ;dc_motor.c: 66: mL->power--;
   704  001A5C  C018  FFD9         	movff	stop@mL,fsr2l
   705  001A60  C019  FFDA         	movff	stop@mL+1,fsr2h
   706  001A64  06DF               	decf	indf2,f,c
   707  001A66                     l1001:
   708                           
   709                           ;dc_motor.c: 67: }
   710                           ;dc_motor.c: 68: if(mR->power>0){
   711  001A66  C01A  FFD9         	movff	stop@mR,fsr2l
   712  001A6A  C01B  FFDA         	movff	stop@mR+1,fsr2h
   713  001A6E  50DF               	movf	indf2,w,c
   714  001A70  B4D8               	btfsc	status,2,c
   715  001A72  D005               	goto	l1005
   716                           
   717                           ;dc_motor.c: 69: mR->power--;
   718  001A74  C01A  FFD9         	movff	stop@mR,fsr2l
   719  001A78  C01B  FFDA         	movff	stop@mR+1,fsr2h
   720  001A7C  06DF               	decf	indf2,f,c
   721  001A7E                     l1005:
   722                           
   723                           ;dc_motor.c: 70: }
   724                           ;dc_motor.c: 71: setMotorPWM(mL);
   725  001A7E  C018  F00F         	movff	stop@mL,setMotorPWM@m
   726  001A82  C019  F010         	movff	stop@mL+1,setMotorPWM@m+1
   727  001A86  ECE6  F00D         	call	_setMotorPWM	;wreg free
   728                           
   729                           ;dc_motor.c: 72: setMotorPWM(mR);
   730  001A8A  C01A  F00F         	movff	stop@mR,setMotorPWM@m
   731  001A8E  C01B  F010         	movff	stop@mR+1,setMotorPWM@m+1
   732  001A92  ECE6  F00D         	call	_setMotorPWM	;wreg free
   733                           
   734                           ;dc_motor.c: 73: _delay((unsigned long)((50)*(8000000/4000000.0)));
   735  001A96  0E21               	movlw	33
   736  001A98                     u477:
   737  001A98  2EE8               	decfsz	wreg,f,c
   738  001A9A  D7FE               	goto	u477
   739  001A9C  F000               	nop	
   740  001A9E                     l1011:
   741  001A9E  C018  FFD9         	movff	stop@mL,fsr2l
   742  001AA2  C019  FFDA         	movff	stop@mL+1,fsr2h
   743  001AA6  50DF               	movf	indf2,w,c
   744  001AA8  A4D8               	btfss	status,2,c
   745  001AAA  D7D1               	goto	l997
   746  001AAC  C01A  FFD9         	movff	stop@mR,fsr2l
   747  001AB0  C01B  FFDA         	movff	stop@mR+1,fsr2h
   748  001AB4  50DF               	movf	indf2,w,c
   749  001AB6  A4D8               	btfss	status,2,c
   750  001AB8  D7CA               	goto	l997
   751                           
   752                           ;dc_motor.c: 74: }
   753                           ;dc_motor.c: 75: mL->direction=1;
   754  001ABA  EE20 F001          	lfsr	2,1
   755  001ABE  5018               	movf	stop@mL,w,c
   756  001AC0  26D9               	addwf	fsr2l,f,c
   757  001AC2  5019               	movf	stop@mL+1,w,c
   758  001AC4  22DA               	addwfc	fsr2h,f,c
   759  001AC6  0E01               	movlw	1
   760  001AC8  6EDF               	movwf	indf2,c
   761                           
   762                           ;dc_motor.c: 76: mR->direction=1;
   763  001ACA  EE20 F001          	lfsr	2,1
   764  001ACE  501A               	movf	stop@mR,w,c
   765  001AD0  26D9               	addwf	fsr2l,f,c
   766  001AD2  501B               	movf	stop@mR+1,w,c
   767  001AD4  22DA               	addwfc	fsr2h,f,c
   768  001AD6  0E01               	movlw	1
   769  001AD8  6EDF               	movwf	indf2,c
   770  001ADA  0012               	return		;funcret
   771  001ADC                     __end_of_stop:
   772                           	opt stack 0
   773                           wreg	equ	0xFE8
   774                           indf2	equ	0xFDF
   775                           fsr2h	equ	0xFDA
   776                           fsr2l	equ	0xFD9
   777                           status	equ	0xFD8
   778                           
   779 ;; *************** function _setMotorPWM *****************
   780 ;; Defined at:
   781 ;;		line 20 in file "dc_motor.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  m               2   14[COMRAM] PTR struct DC_motor
   784 ;;		 -> main@motorR(9), main@motorL(9), 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  PWMduty         2   21[COMRAM] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   796 ;;      Params:         2       0       0       0
   797 ;;      Locals:         2       0       0       0
   798 ;;      Temps:          5       0       0       0
   799 ;;      Totals:         9       0       0       0
   800 ;;Total ram usage:        9 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    1
   803 ;; This function calls:
   804 ;;		___awdiv
   805 ;;		___wmul
   806 ;; This function is called by:
   807 ;;		_stop
   808 ;;		_fullSpeedAhead
   809 ;;		_setMotorFullSpeed
   810 ;;		_stopMotor
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text5
   815  001BCC                     __ptext5:
   816                           	opt stack 0
   817  001BCC                     _setMotorPWM:
   818                           	opt stack 27
   819                           
   820                           ;dc_motor.c: 22: int PWMduty;
   821                           ;dc_motor.c: 24: PWMduty = (m->power*m->PWMperiod)/100;
   822                           
   823                           ;incstack = 0
   824  001BCC  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
   825  001BD0  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
   826  001BD4  50DF               	movf	indf2,w,c
   827  001BD6  6E11               	movwf	??_setMotorPWM& (0+255),c
   828  001BD8  5011               	movf	??_setMotorPWM,w,c
   829  001BDA  6E01               	movwf	___wmul@multiplier,c
   830  001BDC  6A02               	clrf	___wmul@multiplier+1,c
   831  001BDE  EE20 F007          	lfsr	2,7
   832  001BE2  500F               	movf	setMotorPWM@m,w,c
   833  001BE4  26D9               	addwf	fsr2l,f,c
   834  001BE6  5010               	movf	setMotorPWM@m+1,w,c
   835  001BE8  22DA               	addwfc	fsr2h,f,c
   836  001BEA  CFDE F003          	movff	postinc2,___wmul@multiplicand
   837  001BEE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   838  001BF2  EC20  F00C         	call	___wmul	;wreg free
   839  001BF6  C001  F007         	movff	?___wmul,___awdiv@dividend
   840  001BFA  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
   841  001BFE  0E00               	movlw	0
   842  001C00  6E0A               	movwf	___awdiv@divisor+1,c
   843  001C02  0E64               	movlw	100
   844  001C04  6E09               	movwf	___awdiv@divisor,c
   845  001C06  ECE4  F00C         	call	___awdiv	;wreg free
   846  001C0A  C007  F016         	movff	?___awdiv,setMotorPWM@PWMduty
   847  001C0E  C008  F017         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   848                           
   849                           ;dc_motor.c: 26: if (m->direction)
   850  001C12  EE20 F001          	lfsr	2,1
   851  001C16  500F               	movf	setMotorPWM@m,w,c
   852  001C18  26D9               	addwf	fsr2l,f,c
   853  001C1A  5010               	movf	setMotorPWM@m+1,w,c
   854  001C1C  22DA               	addwfc	fsr2h,f,c
   855  001C1E  50DF               	movf	indf2,w,c
   856  001C20  B4D8               	btfsc	status,2,c
   857  001C22  D02C               	goto	l975
   858                           
   859                           ;dc_motor.c: 27: {
   860                           ;dc_motor.c: 28: LATB=LATB|(1<<(m->dir_pin));
   861  001C24  EE20 F006          	lfsr	2,6
   862  001C28  500F               	movf	setMotorPWM@m,w,c
   863  001C2A  26D9               	addwf	fsr2l,f,c
   864  001C2C  5010               	movf	setMotorPWM@m+1,w,c
   865  001C2E  22DA               	addwfc	fsr2h,f,c
   866  001C30  50DF               	movf	indf2,w,c
   867  001C32  6E11               	movwf	??_setMotorPWM& (0+255),c
   868  001C34  0E01               	movlw	1
   869  001C36  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
   870  001C38  2A11               	incf	??_setMotorPWM,f,c
   871  001C3A  D002               	goto	u324
   872  001C3C                     u325:
   873  001C3C  90D8               	bcf	status,0,c
   874  001C3E  3612               	rlcf	??_setMotorPWM+1,f,c
   875  001C40                     u324:
   876  001C40  2E11               	decfsz	??_setMotorPWM,f,c
   877  001C42  D7FC               	goto	u325
   878  001C44  5012               	movf	??_setMotorPWM+1,w,c
   879  001C46  108A               	iorwf	3978,w,c	;volatile
   880  001C48  6E8A               	movwf	3978,c	;volatile
   881                           
   882                           ;dc_motor.c: 29: PWMduty=m->PWMperiod-PWMduty;
   883  001C4A  EE20 F007          	lfsr	2,7
   884  001C4E  500F               	movf	setMotorPWM@m,w,c
   885  001C50  26D9               	addwf	fsr2l,f,c
   886  001C52  5010               	movf	setMotorPWM@m+1,w,c
   887  001C54  22DA               	addwfc	fsr2h,f,c
   888  001C56  CFDE F011          	movff	postinc2,??_setMotorPWM
   889  001C5A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   890  001C5E  C016  F013         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
   891  001C62  C017  F014         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
   892  001C66  1E13               	comf	??_setMotorPWM+2,f,c
   893  001C68  1E14               	comf	??_setMotorPWM+3,f,c
   894  001C6A  4A13               	infsnz	??_setMotorPWM+2,f,c
   895  001C6C  2A14               	incf	??_setMotorPWM+3,f,c
   896  001C6E  5011               	movf	??_setMotorPWM,w,c
   897  001C70  2413               	addwf	??_setMotorPWM+2,w,c
   898  001C72  6E16               	movwf	setMotorPWM@PWMduty,c
   899  001C74  5012               	movf	??_setMotorPWM+1,w,c
   900  001C76  2014               	addwfc	??_setMotorPWM+3,w,c
   901  001C78  6E17               	movwf	setMotorPWM@PWMduty+1,c
   902                           
   903                           ;dc_motor.c: 30: }
   904  001C7A  D014               	goto	l33
   905  001C7C                     l975:
   906                           
   907                           ;dc_motor.c: 31: else
   908                           ;dc_motor.c: 32: {
   909                           ;dc_motor.c: 33: LATB=LATB&(~(1<<(m->dir_pin)));
   910  001C7C  EE20 F006          	lfsr	2,6
   911  001C80  500F               	movf	setMotorPWM@m,w,c
   912  001C82  26D9               	addwf	fsr2l,f,c
   913  001C84  5010               	movf	setMotorPWM@m+1,w,c
   914  001C86  22DA               	addwfc	fsr2h,f,c
   915  001C88  50DF               	movf	indf2,w,c
   916  001C8A  6E11               	movwf	??_setMotorPWM& (0+255),c
   917  001C8C  0E01               	movlw	1
   918  001C8E  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
   919  001C90  2A11               	incf	??_setMotorPWM,f,c
   920  001C92  D002               	goto	u334
   921  001C94                     u335:
   922  001C94  90D8               	bcf	status,0,c
   923  001C96  3612               	rlcf	??_setMotorPWM+1,f,c
   924  001C98                     u334:
   925  001C98  2E11               	decfsz	??_setMotorPWM,f,c
   926  001C9A  D7FC               	goto	u335
   927  001C9C  5012               	movf	??_setMotorPWM+1,w,c
   928  001C9E  0AFF               	xorlw	255
   929  001CA0  148A               	andwf	3978,w,c	;volatile
   930  001CA2  6E8A               	movwf	3978,c	;volatile
   931  001CA4                     l33:
   932                           
   933                           ;dc_motor.c: 34: }
   934                           ;dc_motor.c: 37: *(m->dutyLowByte)=PWMduty<<2;
   935  001CA4  EE20 F002          	lfsr	2,2
   936  001CA8  500F               	movf	setMotorPWM@m,w,c
   937  001CAA  26D9               	addwf	fsr2l,f,c
   938  001CAC  5010               	movf	setMotorPWM@m+1,w,c
   939  001CAE  22DA               	addwfc	fsr2h,f,c
   940  001CB0  CFDE F011          	movff	postinc2,??_setMotorPWM
   941  001CB4  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   942  001CB8  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   943  001CBC  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   944  001CC0  4416               	rlncf	setMotorPWM@PWMduty,w,c
   945  001CC2  46E8               	rlncf	wreg,f,c
   946  001CC4  0BFC               	andlw	252
   947  001CC6  6EDF               	movwf	indf2,c
   948                           
   949                           ;dc_motor.c: 38: *(m->dutyHighByte)=PWMduty>>6;
   950  001CC8  EE20 F004          	lfsr	2,4
   951  001CCC  500F               	movf	setMotorPWM@m,w,c
   952  001CCE  26D9               	addwf	fsr2l,f,c
   953  001CD0  5010               	movf	setMotorPWM@m+1,w,c
   954  001CD2  22DA               	addwfc	fsr2h,f,c
   955  001CD4  CFDE F011          	movff	postinc2,??_setMotorPWM
   956  001CD8  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   957  001CDC  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   958  001CE0  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   959  001CE4  C016  F013         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
   960  001CE8  C017  F014         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
   961  001CEC  0E06               	movlw	6
   962  001CEE  6E15               	movwf	(??_setMotorPWM+4)& (0+255),c
   963  001CF0                     u345:
   964  001CF0  3414               	rlcf	??_setMotorPWM+3,w,c
   965  001CF2  3214               	rrcf	??_setMotorPWM+3,f,c
   966  001CF4  3213               	rrcf	??_setMotorPWM+2,f,c
   967  001CF6  2E15               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
   968  001CF8  D7FB               	goto	u345
   969  001CFA  5013               	movf	??_setMotorPWM+2,w,c
   970  001CFC  6EDF               	movwf	indf2,c
   971  001CFE  0012               	return		;funcret
   972  001D00                     __end_of_setMotorPWM:
   973                           	opt stack 0
   974                           wreg	equ	0xFE8
   975                           indf2	equ	0xFDF
   976                           postinc2	equ	0xFDE
   977                           postdec2	equ	0xFDD
   978                           fsr2h	equ	0xFDA
   979                           fsr2l	equ	0xFD9
   980                           status	equ	0xFD8
   981                           
   982 ;; *************** function ___wmul *****************
   983 ;; Defined at:
   984 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  multiplier      2    0[COMRAM] unsigned int 
   987 ;;  multiplicand    2    2[COMRAM] unsigned int 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  product         2    4[COMRAM] unsigned int 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  2    0[COMRAM] unsigned int 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0, prodl, prodh
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   999 ;;      Params:         4       0       0       0
  1000 ;;      Locals:         2       0       0       0
  1001 ;;      Temps:          0       0       0       0
  1002 ;;      Totals:         6       0       0       0
  1003 ;;Total ram usage:        6 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_setMotorPWM
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text6
  1013  001840                     __ptext6:
  1014                           	opt stack 0
  1015  001840                     ___wmul:
  1016                           	opt stack 27
  1017                           
  1018                           ;incstack = 0
  1019  001840  5001               	movf	___wmul@multiplier,w,c
  1020  001842  0203               	mulwf	___wmul@multiplicand,c
  1021  001844  CFF3 F005          	movff	prodl,___wmul@product
  1022  001848  CFF4 F006          	movff	prodh,___wmul@product+1
  1023  00184C  5001               	movf	___wmul@multiplier,w,c
  1024  00184E  0204               	mulwf	___wmul@multiplicand+1,c
  1025  001850  50F3               	movf	prodl,w,c
  1026  001852  2606               	addwf	___wmul@product+1,f,c
  1027  001854  5002               	movf	___wmul@multiplier+1,w,c
  1028  001856  0203               	mulwf	___wmul@multiplicand,c
  1029  001858  50F3               	movf	prodl,w,c
  1030  00185A  2606               	addwf	___wmul@product+1,f,c
  1031  00185C  C005  F001         	movff	___wmul@product,?___wmul
  1032  001860  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1033  001864  0012               	return	
  1034  001866                     __end_of___wmul:
  1035                           	opt stack 0
  1036                           prodh	equ	0xFF4
  1037                           prodl	equ	0xFF3
  1038                           wreg	equ	0xFE8
  1039                           indf2	equ	0xFDF
  1040                           postinc2	equ	0xFDE
  1041                           postdec2	equ	0xFDD
  1042                           fsr2h	equ	0xFDA
  1043                           fsr2l	equ	0xFD9
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function ___awdiv *****************
  1047 ;; Defined at:
  1048 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  dividend        2    6[COMRAM] int 
  1051 ;;  divisor         2    8[COMRAM] int 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  quotient        2   12[COMRAM] int 
  1054 ;;  sign            1   11[COMRAM] unsigned char 
  1055 ;;  counter         1   10[COMRAM] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  2    6[COMRAM] int 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1065 ;;      Params:         4       0       0       0
  1066 ;;      Locals:         4       0       0       0
  1067 ;;      Temps:          0       0       0       0
  1068 ;;      Totals:         8       0       0       0
  1069 ;;Total ram usage:        8 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_setMotorPWM
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text7
  1079  0019C8                     __ptext7:
  1080                           	opt stack 0
  1081  0019C8                     ___awdiv:
  1082                           	opt stack 27
  1083                           
  1084                           ;incstack = 0
  1085  0019C8  0E00               	movlw	0
  1086  0019CA  6E0C               	movwf	___awdiv@sign,c
  1087  0019CC  AE0A               	btfss	___awdiv@divisor+1,7,c
  1088  0019CE  D006               	goto	l933
  1089  0019D0  6C09               	negf	___awdiv@divisor,c
  1090  0019D2  1E0A               	comf	___awdiv@divisor+1,f,c
  1091  0019D4  B0D8               	btfsc	status,0,c
  1092  0019D6  2A0A               	incf	___awdiv@divisor+1,f,c
  1093  0019D8  0E01               	movlw	1
  1094  0019DA  6E0C               	movwf	___awdiv@sign,c
  1095  0019DC                     l933:
  1096  0019DC  AE08               	btfss	___awdiv@dividend+1,7,c
  1097  0019DE  D006               	goto	l939
  1098  0019E0  6C07               	negf	___awdiv@dividend,c
  1099  0019E2  1E08               	comf	___awdiv@dividend+1,f,c
  1100  0019E4  B0D8               	btfsc	status,0,c
  1101  0019E6  2A08               	incf	___awdiv@dividend+1,f,c
  1102  0019E8  0E01               	movlw	1
  1103  0019EA  1A0C               	xorwf	___awdiv@sign,f,c
  1104  0019EC                     l939:
  1105  0019EC  0E00               	movlw	0
  1106  0019EE  6E0E               	movwf	___awdiv@quotient+1,c
  1107  0019F0  0E00               	movlw	0
  1108  0019F2  6E0D               	movwf	___awdiv@quotient,c
  1109  0019F4  5009               	movf	___awdiv@divisor,w,c
  1110  0019F6  100A               	iorwf	___awdiv@divisor+1,w,c
  1111  0019F8  B4D8               	btfsc	status,2,c
  1112  0019FA  D01C               	goto	l961
  1113  0019FC  0E01               	movlw	1
  1114  0019FE  6E0B               	movwf	___awdiv@counter,c
  1115  001A00  D004               	goto	l947
  1116  001A02                     l945:
  1117  001A02  90D8               	bcf	status,0,c
  1118  001A04  3609               	rlcf	___awdiv@divisor,f,c
  1119  001A06  360A               	rlcf	___awdiv@divisor+1,f,c
  1120  001A08  2A0B               	incf	___awdiv@counter,f,c
  1121  001A0A                     l947:
  1122  001A0A  AE0A               	btfss	___awdiv@divisor+1,7,c
  1123  001A0C  D7FA               	goto	l945
  1124  001A0E                     l949:
  1125  001A0E  90D8               	bcf	status,0,c
  1126  001A10  360D               	rlcf	___awdiv@quotient,f,c
  1127  001A12  360E               	rlcf	___awdiv@quotient+1,f,c
  1128  001A14  5009               	movf	___awdiv@divisor,w,c
  1129  001A16  5C07               	subwf	___awdiv@dividend,w,c
  1130  001A18  500A               	movf	___awdiv@divisor+1,w,c
  1131  001A1A  5808               	subwfb	___awdiv@dividend+1,w,c
  1132  001A1C  A0D8               	btfss	status,0,c
  1133  001A1E  D005               	goto	l957
  1134  001A20  5009               	movf	___awdiv@divisor,w,c
  1135  001A22  5E07               	subwf	___awdiv@dividend,f,c
  1136  001A24  500A               	movf	___awdiv@divisor+1,w,c
  1137  001A26  5A08               	subwfb	___awdiv@dividend+1,f,c
  1138  001A28  800D               	bsf	___awdiv@quotient,0,c
  1139  001A2A                     l957:
  1140  001A2A  90D8               	bcf	status,0,c
  1141  001A2C  320A               	rrcf	___awdiv@divisor+1,f,c
  1142  001A2E  3209               	rrcf	___awdiv@divisor,f,c
  1143  001A30  2E0B               	decfsz	___awdiv@counter,f,c
  1144  001A32  D7ED               	goto	l949
  1145  001A34                     l961:
  1146  001A34  500C               	movf	___awdiv@sign,w,c
  1147  001A36  B4D8               	btfsc	status,2,c
  1148  001A38  D004               	goto	l965
  1149  001A3A  6C0D               	negf	___awdiv@quotient,c
  1150  001A3C  1E0E               	comf	___awdiv@quotient+1,f,c
  1151  001A3E  B0D8               	btfsc	status,0,c
  1152  001A40  2A0E               	incf	___awdiv@quotient+1,f,c
  1153  001A42                     l965:
  1154  001A42  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1155  001A46  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1156  001A4A  0012               	return	
  1157  001A4C                     __end_of___awdiv:
  1158                           	opt stack 0
  1159                           prodh	equ	0xFF4
  1160                           prodl	equ	0xFF3
  1161                           wreg	equ	0xFE8
  1162                           indf2	equ	0xFDF
  1163                           postinc2	equ	0xFDE
  1164                           postdec2	equ	0xFDD
  1165                           fsr2h	equ	0xFDA
  1166                           fsr2l	equ	0xFD9
  1167                           status	equ	0xFD8
  1168                           
  1169 ;; *************** function _initPWM *****************
  1170 ;; Defined at:
  1171 ;;		line 4 in file "dc_motor.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;		None               void
  1178 ;; Registers used:
  1179 ;;		wreg, status,2
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1185 ;;      Params:         0       0       0       0
  1186 ;;      Locals:         0       0       0       0
  1187 ;;      Temps:          0       0       0       0
  1188 ;;      Totals:         0       0       0       0
  1189 ;;Total ram usage:        0 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text8
  1199  001866                     __ptext8:
  1200                           	opt stack 0
  1201  001866                     _initPWM:
  1202                           	opt stack 30
  1203                           
  1204                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1205                           
  1206                           ;incstack = 0
  1207  001866  0E00               	movlw	0
  1208  001868  6E7F               	movwf	3967,c	;volatile
  1209                           
  1210                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1211  00186A  0E80               	movlw	128
  1212  00186C  6E7E               	movwf	3966,c	;volatile
  1213                           
  1214                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1215  00186E  0E6F               	movlw	111
  1216  001870  6E6F               	movwf	3951,c	;volatile
  1217                           
  1218                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1219  001872  0E00               	movlw	0
  1220  001874  6E6E               	movwf	3950,c	;volatile
  1221                           
  1222                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1223  001876  0EC7               	movlw	199
  1224  001878  6E7B               	movwf	3963,c	;volatile
  1225                           
  1226                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1227  00187A  0E00               	movlw	0
  1228  00187C  6E7A               	movwf	3962,c	;volatile
  1229                           
  1230                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1231  00187E  0E00               	movlw	0
  1232  001880  6E79               	movwf	3961,c	;volatile
  1233                           
  1234                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1235  001882  0E00               	movlw	0
  1236  001884  6E78               	movwf	3960,c	;volatile
  1237                           
  1238                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1239  001886  0E00               	movlw	0
  1240  001888  6E77               	movwf	3959,c	;volatile
  1241                           
  1242                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1243  00188A  0E00               	movlw	0
  1244  00188C  6E76               	movwf	3958,c	;volatile
  1245  00188E  0012               	return		;funcret
  1246  001890                     __end_of_initPWM:
  1247                           	opt stack 0
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           wreg	equ	0xFE8
  1251                           indf2	equ	0xFDF
  1252                           postinc2	equ	0xFDE
  1253                           postdec2	equ	0xFDD
  1254                           fsr2h	equ	0xFDA
  1255                           fsr2l	equ	0xFD9
  1256                           status	equ	0xFD8
  1257                           
  1258 ;; *************** function _delay_s *****************
  1259 ;; Defined at:
  1260 ;;		line 10 in file "main.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  seconds         1    wreg     unsigned char 
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  seconds         1    2[COMRAM] unsigned char 
  1265 ;;  j               2    5[COMRAM] unsigned int 
  1266 ;;  i               2    3[COMRAM] unsigned int 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       0       0       0
  1277 ;;      Locals:         5       0       0       0
  1278 ;;      Temps:          2       0       0       0
  1279 ;;      Totals:         7       0       0       0
  1280 ;;Total ram usage:        7 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text9
  1290  0018FC                     __ptext9:
  1291                           	opt stack 0
  1292  0018FC                     _delay_s:
  1293                           	opt stack 30
  1294                           
  1295                           ;incstack = 0
  1296                           ;delay_s@seconds stored from wreg
  1297  0018FC  6E03               	movwf	delay_s@seconds,c
  1298                           
  1299                           ;main.c: 11: unsigned int i=0;
  1300  0018FE  0E00               	movlw	0
  1301  001900  6E05               	movwf	delay_s@i+1,c
  1302  001902  0E00               	movlw	0
  1303  001904  6E04               	movwf	delay_s@i,c
  1304                           
  1305                           ;main.c: 12: unsigned int j=0;
  1306  001906  0E00               	movlw	0
  1307  001908  6E07               	movwf	delay_s@j+1,c
  1308  00190A  0E00               	movlw	0
  1309  00190C  6E06               	movwf	delay_s@j,c
  1310                           
  1311                           ;main.c: 13: for (i=1; i<=seconds; i++) {
  1312  00190E  0E00               	movlw	0
  1313  001910  6E05               	movwf	delay_s@i+1,c
  1314  001912  0E01               	movlw	1
  1315  001914  6E04               	movwf	delay_s@i,c
  1316  001916  D016               	goto	l857
  1317  001918                     l845:
  1318                           
  1319                           ;main.c: 14: for (j=1; j<=20; j++) {
  1320  001918  0E00               	movlw	0
  1321  00191A  6E07               	movwf	delay_s@j+1,c
  1322  00191C  0E01               	movlw	1
  1323  00191E  6E06               	movwf	delay_s@j,c
  1324  001920                     l847:
  1325  001920  5007               	movf	delay_s@j+1,w,c
  1326  001922  E10E               	bnz	l855
  1327  001924  0E15               	movlw	21
  1328  001926  5C06               	subwf	delay_s@j,w,c
  1329  001928  B0D8               	btfsc	status,0,c
  1330  00192A  D00A               	goto	l855
  1331                           
  1332                           ;main.c: 15: _delay((unsigned long)((50)*(8000000/4000.0)));
  1333  00192C  0E82               	movlw	130
  1334  00192E  6E01               	movwf	??_delay_s& (0+255),c
  1335  001930  0EDE               	movlw	222
  1336  001932                     u487:
  1337  001932  2EE8               	decfsz	wreg,f,c
  1338  001934  D7FE               	goto	u487
  1339  001936  2E01               	decfsz	??_delay_s& (0+255),f,c
  1340  001938  D7FC               	goto	u487
  1341  00193A  4A06               	infsnz	delay_s@j,f,c
  1342  00193C  2A07               	incf	delay_s@j+1,f,c
  1343  00193E  D7F0               	goto	l847
  1344  001940                     l855:
  1345  001940  4A04               	infsnz	delay_s@i,f,c
  1346  001942  2A05               	incf	delay_s@i+1,f,c
  1347  001944                     l857:
  1348  001944  5003               	movf	delay_s@seconds,w,c
  1349  001946  6E01               	movwf	??_delay_s& (0+255),c
  1350  001948  6A02               	clrf	(??_delay_s+1)& (0+255),c
  1351  00194A  5004               	movf	delay_s@i,w,c
  1352  00194C  5C01               	subwf	??_delay_s,w,c
  1353  00194E  5005               	movf	delay_s@i+1,w,c
  1354  001950  5802               	subwfb	??_delay_s+1,w,c
  1355  001952  A0D8               	btfss	status,0,c
  1356  001954  0012               	return	
  1357  001956  D7E0               	goto	l845
  1358  001958                     __end_of_delay_s:
  1359                           	opt stack 0
  1360  0000                     prodh	equ	0xFF4
  1361                           prodl	equ	0xFF3
  1362                           wreg	equ	0xFE8
  1363                           indf2	equ	0xFDF
  1364                           postinc2	equ	0xFDE
  1365                           postdec2	equ	0xFDD
  1366                           fsr2h	equ	0xFDA
  1367                           fsr2l	equ	0xFD9
  1368                           status	equ	0xFD8
  1369                           prodh	equ	0xFF4
  1370                           prodl	equ	0xFF3
  1371                           wreg	equ	0xFE8
  1372                           indf2	equ	0xFDF
  1373                           postinc2	equ	0xFDE
  1374                           postdec2	equ	0xFDD
  1375                           fsr2h	equ	0xFDA
  1376                           fsr2l	equ	0xFD9
  1377                           status	equ	0xFD8
  1378                           
  1379                           	psect	rparam
  1380  0000                     prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           wreg	equ	0xFE8
  1383                           indf2	equ	0xFDF
  1384                           postinc2	equ	0xFDE
  1385                           postdec2	equ	0xFDD
  1386                           fsr2h	equ	0xFDA
  1387                           fsr2l	equ	0xFD9
  1388                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     50      50
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S31DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S31DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft
    _main->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    8254
                                             32 COMRAM    18    18      0
                            _delay_s
                     _fullSpeedAhead
                            _initPWM
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2051
                                             28 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2051
                                             28 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    1835
                                             23 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    1751
                                             23 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1275
                                             14 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     253
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     394
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     7      0      60
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_s
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     32      32       1       52.6%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
ABS                  0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BIGRAM             2EE      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 06 09:55:30 2018

                     l33 1CA4                       l63 19AA             ___awdiv@sign 000C  
    ___wmul@multiplicand 0003                      l115 1B40                      l845 1918  
                    l933 19DC                      l855 1940                      l847 1920  
                    l857 1944                      l945 1A02                      l961 1A34  
                    l947 1A0A                      l939 19EC                      l965 1A42  
                    l957 1A2A                      l949 1A0E                      l975 1C7C  
                    l983 1972                      l987 198A                      l979 195A  
                    l997 1A4E                      u324 1C40                      u325 1C3C  
                    u334 1C98                      u335 1C94                      u345 1CF0  
                    u467 19A4                      u477 1A98                      u487 1932  
                    wreg 000FE8                     l1001 1A66                     l1011 1A9E  
                   l1005 1A7E                     l1065 1B48                     _LATB 000F8A  
                   _main 1ADC                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     _stop 1A4C                     prodh 000FF4  
                   prodl 000FF3                     start 0002           delay_s@seconds 0003  
           ___param_bank 000010                    ?_main 0001          __end_of___awdiv 1A4C  
                  ?_stop 0018          ___awdiv@divisor 0009                    _PDC0H 000F78  
                  _PDC1H 000F76                    _PDC0L 000F79                    _PDC1L 000F77  
        ___awdiv@counter 000B          __end_of_delay_s 1958          __end_of_initPWM 1890  
                  status 000FD8          __initialization 183A             __end_of_main 1BCC  
           __end_of_stop 1ADC           __CFG_OSC$IRCIO 000000                   ??_main 0021  
                 ??_stop 001C            __activetblptr 000000             ?_setMotorPWM 000F  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___awdiv@dividend 0007                   _OSCCON 000FD3                   _PTCON0 000F7F  
                 _PTCON1 000F7E                   _PTPERH 000F7A                   _PTPERL 000F7B  
                 ___wmul 1840                ??___awdiv 000B         ___awdiv@quotient 000D  
              ??_delay_s 0001                ??_initPWM 0001                   stop@mL 0018  
                 stop@mR 001A         __end_of_turnLeft 18C6               __accesstop 0060  
__end_of__initialization 183A            ___rparam_used 000001           __pcstackCOMRAM 0001  
                ?___wmul 0001  __size_of_fullSpeedAhead 0070                  _PWMCON0 000F6F  
                _PWMCON1 000F6E     __size_of_setMotorPWM 0134       __size_of_turnRight 0036  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 19C8  
        __size_of___wmul 0026                  __pcinit 183A                  _delay_s 18FC  
                __ramtop 0300                ?_turnLeft 001D                  __ptext0 1ADC  
                __ptext1 18C6                  __ptext2 1890                  __ptext3 1958  
                __ptext4 1A4C                  __ptext5 1BCC                  __ptext6 1840  
                __ptext7 19C8                  __ptext8 1866                  __ptext9 18FC  
                _initPWM 1866     end_of_initialization 183A       setMotorPWM@PWMduty 0016  
                postdec2 000FDD                  postinc2 000FDE               ??_turnLeft 0021  
      __end_of_turnRight 18FC                _TRISAbits 000F92                _TRISBbits 000F93  
       fullSpeedAhead@mL 0018         fullSpeedAhead@mR 001A               main@motorL 0021  
             main@motorR 002A           _fullSpeedAhead 1958           __end_of___wmul 1866  
    start_initialization 183A   __end_of_fullSpeedAhead 19C8                 ??___wmul 0005  
        ?_fullSpeedAhead 0018                 ?___awdiv 0007                 ?_delay_s 0001  
               ?_initPWM 0001        __size_of_turnLeft 0036            ??_setMotorPWM 0011  
         ___wmul@product 0005              turnRight@mL 001D              turnRight@mR 001F  
      ___wmul@multiplier 0001             setMotorPWM@m 000F                _turnRight 18C6  
    __end_of_setMotorPWM 1D00                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0084               _ANSEL0bits 000FB8         __size_of_delay_s 005C  
       __size_of_initPWM 002A               ?_turnRight 001D            __size_of_main 00F0  
          __size_of_stop 0090               turnLeft@mL 001D               turnLeft@mR 001F  
               delay_s@i 0004                 delay_s@j 0006                 _turnLeft 1890  
            _setMotorPWM 1BCC         ??_fullSpeedAhead 001C               _OSCCONbits 000FD3  
            ??_turnRight 0021  
