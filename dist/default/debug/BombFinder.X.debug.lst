

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 13 10:24:37 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     _LATAbits	set	3977
    26  0000                     _LATB	set	3978
    27  0000                     _LATCbits	set	3979
    28  0000                     _LATDbits	set	3980
    29  0000                     _PTCON0	set	3967
    30  0000                     _PTCON1	set	3966
    31  0000                     _PTPERH	set	3962
    32  0000                     _PTPERL	set	3963
    33  0000                     _PWMCON0	set	3951
    34  0000                     _PWMCON1	set	3950
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISBbits	set	3987
    37  0000                     _TRISC	set	3988
    38  0000                     _TRISCbits	set	3988
    39  0000                     _TRISDbits	set	3989
    40  0000                     _PDC0H	set	3960
    41  0000                     _PDC0L	set	3961
    42  0000                     _PDC1H	set	3958
    43  0000                     _PDC1L	set	3959
    44  0000                     _ADCON0	set	4034
    45  0000                     _ADCON1	set	4033
    46  0000                     _ADCON2	set	4032
    47  0000                     _ANSEL0bits	set	4024
    48  0000                     _BAUDCONbits	set	4010
    49  0000                     _OSCCON	set	4051
    50  0000                     _OSCCONbits	set	4051
    51  0000                     _PIE1bits	set	3997
    52  0000                     _PIR1bits	set	3998
    53  0000                     _RCREG	set	4014
    54  0000                     _RCSTAbits	set	4011
    55  0000                     _SPBRG	set	4015
    56  0000                     _SPBRGH	set	4016
    57  0000                     _TXREG	set	4013
    58  0000                     _TXSTAbits	set	4012
    59  0000                     _INTCONbits	set	4082
    60                           
    61                           ; #config settings
    62  0000                     
    63                           	psect	cinit
    64  00078E                     __pcinit:
    65                           	opt stack 0
    66  00078E                     start_initialization:
    67                           	opt stack 0
    68  00078E                     __initialization:
    69                           	opt stack 0
    70                           
    71                           ; Clear objects allocated to COMRAM (17 bytes)
    72  00078E  EE00  F031         	lfsr	0,__pbssCOMRAM
    73  000792  0E11               	movlw	17
    74  000794                     clear_0:
    75  000794  6AEE               	clrf	postinc0,c
    76  000796  06E8               	decf	wreg,f,c
    77  000798  E1FD               	bnz	clear_0
    78  00079A                     end_of_initialization:
    79                           	opt stack 0
    80  00079A                     __end_of__initialization:
    81                           	opt stack 0
    82  00079A  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    83  00079C  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    84  00079E  0100               	movlb	0
    85  0007A0  EF56  F000         	goto	_main	;jump to C main() function
    86                           postinc0	equ	0xFEE
    87                           wreg	equ	0xFE8
    88                           
    89                           	psect	bssCOMRAM
    90  000031                     __pbssCOMRAM:
    91                           	opt stack 0
    92  000031                     _i:
    93                           	opt stack 0
    94  000031                     	ds	1
    95  000032                     _ReceivedString:
    96                           	opt stack 0
    97  000032                     	ds	16
    98                           postinc0	equ	0xFEE
    99                           wreg	equ	0xFE8
   100                           
   101                           	psect	cstackBANK0
   102  000060                     __pcstackBANK0:
   103                           	opt stack 0
   104  000060                     main@Message:
   105                           	opt stack 0
   106                           
   107                           ; 10 bytes @ 0x0
   108  000060                     	ds	10
   109  00006A                     main@i:
   110                           	opt stack 0
   111                           
   112                           ; 1 bytes @ 0xA
   113  00006A                     	ds	1
   114  00006B                     main@motorL:
   115                           	opt stack 0
   116                           
   117                           ; 9 bytes @ 0xB
   118  00006B                     	ds	9
   119  000074                     main@motorR:
   120                           	opt stack 0
   121                           
   122                           ; 9 bytes @ 0x14
   123  000074                     	ds	9
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	cstackCOMRAM
   128  000001                     __pcstackCOMRAM:
   129                           	opt stack 0
   130  000001                     ??_InterruptHandlerHigh:
   131  000001                     
   132                           ; 0 bytes @ 0x0
   133  000001                     	ds	14
   134  00000F                     ??_delay_s:
   135  00000F                     ?___wmul:
   136                           	opt stack 0
   137  00000F                     VerifySignal@Signal:
   138                           	opt stack 0
   139  00000F                     ___wmul@multiplier:
   140                           	opt stack 0
   141                           
   142                           ; 2 bytes @ 0xE
   143  00000F                     	ds	2
   144  000011                     ??_VerifySignal:
   145  000011                     delay_s@seconds:
   146                           	opt stack 0
   147  000011                     ___wmul@multiplicand:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x10
   151  000011                     	ds	1
   152  000012                     delay_s@i:
   153                           	opt stack 0
   154                           
   155                           ; 2 bytes @ 0x11
   156  000012                     	ds	1
   157  000013                     ___wmul@product:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0x12
   161  000013                     	ds	1
   162  000014                     delay_s@j:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0x13
   166  000014                     	ds	1
   167  000015                     ?___awdiv:
   168                           	opt stack 0
   169  000015                     ___awdiv@dividend:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x14
   173  000015                     	ds	2
   174  000017                     VerifySignal@checksum:
   175                           	opt stack 0
   176  000017                     ___awdiv@divisor:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x16
   180  000017                     	ds	1
   181  000018                     VerifySignal@hexByte:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x17
   185  000018                     	ds	1
   186  000019                     ___awdiv@counter:
   187                           	opt stack 0
   188                           
   189                           ; 1 bytes @ 0x18
   190  000019                     	ds	1
   191  00001A                     VerifySignal@i:
   192                           	opt stack 0
   193  00001A                     ___awdiv@sign:
   194                           	opt stack 0
   195                           
   196                           ; 1 bytes @ 0x19
   197  00001A                     	ds	1
   198  00001B                     ___awdiv@quotient:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x1A
   202  00001B                     	ds	2
   203  00001D                     setMotorPWM@m:
   204                           	opt stack 0
   205                           
   206                           ; 2 bytes @ 0x1C
   207  00001D                     	ds	2
   208  00001F                     ??_setMotorPWM:
   209                           
   210                           ; 0 bytes @ 0x1E
   211  00001F                     	ds	5
   212  000024                     setMotorPWM@PWMduty:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x23
   216  000024                     	ds	2
   217  000026                     stop@mL:
   218                           	opt stack 0
   219  000026                     fullSpeedAhead@mL:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x25
   223  000026                     	ds	2
   224  000028                     stop@mR:
   225                           	opt stack 0
   226  000028                     fullSpeedAhead@mR:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x27
   230  000028                     	ds	2
   231  00002A                     
   232                           ; 0 bytes @ 0x29
   233  00002A                     	ds	1
   234  00002B                     turnLeft@mL:
   235                           	opt stack 0
   236  00002B                     turnRight@mL:
   237                           	opt stack 0
   238  00002B                     fullSpeedBack@mL:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2A
   242  00002B                     	ds	2
   243  00002D                     turnLeft@mR:
   244                           	opt stack 0
   245  00002D                     turnRight@mR:
   246                           	opt stack 0
   247  00002D                     fullSpeedBack@mR:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x2C
   251  00002D                     	ds	2
   252  00002F                     ??_main:
   253                           
   254                           ; 0 bytes @ 0x2E
   255  00002F                     	ds	2
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 40 in file "main.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;  Message        10    0[BANK0 ] unsigned char [10]
   269 ;;  motorR          9   20[BANK0 ] struct DC_motor
   270 ;;  motorL          9   11[BANK0 ] struct DC_motor
   271 ;;  i               1   10[BANK0 ] unsigned char 
   272 ;; Return value:  Size  Location     Type
   273 ;;		None               void
   274 ;; Registers used:
   275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 0/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   281 ;;      Params:         0       0       0       0
   282 ;;      Locals:         0      29       0       0
   283 ;;      Temps:          2       0       0       0
   284 ;;      Totals:         2      29       0       0
   285 ;;Total ram usage:       31 bytes
   286 ;; Hardware stack levels required when called:    5
   287 ;; This function calls:
   288 ;;		_VerifySignal
   289 ;;		_delay_s
   290 ;;		_fullSpeedAhead
   291 ;;		_fullSpeedBack
   292 ;;		_initPWM
   293 ;;		_stop
   294 ;;		_turnLeft
   295 ;;		_turnRight
   296 ;; This function is called by:
   297 ;;		Startup code after reset
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text0
   302  0000AC                     __ptext0:
   303                           	opt stack 0
   304  0000AC                     _main:
   305                           	opt stack 26
   306                           
   307                           ;main.c: 42: unsigned char Message[10];
   308                           ;main.c: 43: unsigned char i=0;
   309                           
   310                           ;incstack = 0
   311  0000AC  0E00               	movlw	0
   312  0000AE  0100               	movlb	0	; () banked
   313  0000B0  6F6A               	movwf	main@i& (0+255),b
   314                           
   315                           ; BSR set to: 0
   316                           ;main.c: 45: INTCONbits.GIEH = 1;
   317  0000B2  8EF2               	bsf	intcon,7,c	;volatile
   318                           
   319                           ; BSR set to: 0
   320                           ;main.c: 47: INTCONbits.GIEL = 1;
   321  0000B4  8CF2               	bsf	intcon,6,c	;volatile
   322                           
   323                           ; BSR set to: 0
   324                           ;main.c: 48: INTCONbits.INT0IE = 1;
   325  0000B6  88F2               	bsf	intcon,4,c	;volatile
   326                           
   327                           ; BSR set to: 0
   328                           ;main.c: 52: PIE1bits.RCIE=1;
   329  0000B8  8A9D               	bsf	3997,5,c	;volatile
   330                           
   331                           ;main.c: 54: SPBRG=205;
   332  0000BA  0ECD               	movlw	205
   333  0000BC  6EAF               	movwf	4015,c	;volatile
   334                           
   335                           ;main.c: 55: SPBRGH=0;
   336  0000BE  0E00               	movlw	0
   337  0000C0  6EB0               	movwf	4016,c	;volatile
   338                           
   339                           ; BSR set to: 0
   340                           ;main.c: 56: BAUDCONbits.BRG16=1;
   341  0000C2  86AA               	bsf	4010,3,c	;volatile
   342                           
   343                           ; BSR set to: 0
   344                           ;main.c: 57: TXSTAbits.BRGH=1;
   345  0000C4  84AC               	bsf	4012,2,c	;volatile
   346                           
   347                           ; BSR set to: 0
   348                           ;main.c: 58: RCSTAbits.CREN=1;
   349  0000C6  88AB               	bsf	4011,4,c	;volatile
   350                           
   351                           ; BSR set to: 0
   352                           ;main.c: 59: RCSTAbits.SPEN=1;
   353  0000C8  8EAB               	bsf	4011,7,c	;volatile
   354                           
   355                           ; BSR set to: 0
   356                           ;main.c: 60: TXSTAbits.SYNC=0;
   357  0000CA  98AC               	bcf	4012,4,c	;volatile
   358                           
   359                           ;main.c: 65: struct DC_motor motorL, motorR;
   360                           ;main.c: 66: motorL.power=0;
   361  0000CC  0E00               	movlw	0
   362  0000CE  0100               	movlb	0	; () banked
   363  0000D0  6F6B               	movwf	main@motorL& (0+255),b
   364                           
   365                           ;main.c: 67: motorL.direction=1;
   366  0000D2  0E01               	movlw	1
   367  0000D4  0100               	movlb	0	; () banked
   368  0000D6  6F6C               	movwf	(main@motorL+1)& (0+255),b
   369                           
   370                           ; BSR set to: 0
   371                           ;main.c: 68: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   372  0000D8  0E79               	movlw	121
   373  0000DA  0100               	movlb	0	; () banked
   374  0000DC  6F6D               	movwf	(main@motorL+2)& (0+255),b
   375  0000DE  0E0F               	movlw	15
   376  0000E0  0100               	movlb	0	; () banked
   377  0000E2  6F6E               	movwf	(main@motorL+3)& (0+255),b
   378                           
   379                           ; BSR set to: 0
   380                           ;main.c: 69: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   381  0000E4  0E78               	movlw	120
   382  0000E6  0100               	movlb	0	; () banked
   383  0000E8  6F6F               	movwf	(main@motorL+4)& (0+255),b
   384  0000EA  0E0F               	movlw	15
   385  0000EC  0100               	movlb	0	; () banked
   386  0000EE  6F70               	movwf	(main@motorL+5)& (0+255),b
   387                           
   388                           ;main.c: 70: motorL.dir_pin=0;
   389  0000F0  0E00               	movlw	0
   390  0000F2  0100               	movlb	0	; () banked
   391  0000F4  6F71               	movwf	(main@motorL+6)& (0+255),b
   392                           
   393                           ;main.c: 71: motorL.PWMperiod=199;
   394  0000F6  0E00               	movlw	0
   395  0000F8  0100               	movlb	0	; () banked
   396  0000FA  6F73               	movwf	(main@motorL+8)& (0+255),b
   397  0000FC  0EC7               	movlw	199
   398  0000FE  6F72               	movwf	(main@motorL+7)& (0+255),b
   399                           
   400                           ;main.c: 73: motorR.power=0;
   401  000100  0E00               	movlw	0
   402  000102  0100               	movlb	0	; () banked
   403  000104  6F74               	movwf	main@motorR& (0+255),b
   404                           
   405                           ;main.c: 74: motorR.direction=1;
   406  000106  0E01               	movlw	1
   407  000108  0100               	movlb	0	; () banked
   408  00010A  6F75               	movwf	(main@motorR+1)& (0+255),b
   409                           
   410                           ; BSR set to: 0
   411                           ;main.c: 75: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   412  00010C  0E77               	movlw	119
   413  00010E  0100               	movlb	0	; () banked
   414  000110  6F76               	movwf	(main@motorR+2)& (0+255),b
   415  000112  0E0F               	movlw	15
   416  000114  0100               	movlb	0	; () banked
   417  000116  6F77               	movwf	(main@motorR+3)& (0+255),b
   418                           
   419                           ; BSR set to: 0
   420                           ;main.c: 76: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   421  000118  0E76               	movlw	118
   422  00011A  0100               	movlb	0	; () banked
   423  00011C  6F78               	movwf	(main@motorR+4)& (0+255),b
   424  00011E  0E0F               	movlw	15
   425  000120  0100               	movlb	0	; () banked
   426  000122  6F79               	movwf	(main@motorR+5)& (0+255),b
   427                           
   428                           ;main.c: 77: motorR.dir_pin=2;
   429  000124  0E02               	movlw	2
   430  000126  0100               	movlb	0	; () banked
   431  000128  6F7A               	movwf	(main@motorR+6)& (0+255),b
   432                           
   433                           ;main.c: 78: motorR.PWMperiod=199;
   434  00012A  0E00               	movlw	0
   435  00012C  0100               	movlb	0	; () banked
   436  00012E  6F7C               	movwf	(main@motorR+8)& (0+255),b
   437  000130  0EC7               	movlw	199
   438  000132  6F7B               	movwf	(main@motorR+7)& (0+255),b
   439                           
   440                           ; BSR set to: 0
   441                           ;main.c: 81: TRISBbits.RB0=0;
   442  000134  9093               	bcf	3987,0,c	;volatile
   443                           
   444                           ; BSR set to: 0
   445                           ;main.c: 82: TRISBbits.RB1=0;
   446  000136  9293               	bcf	3987,1,c	;volatile
   447                           
   448                           ; BSR set to: 0
   449                           ;main.c: 83: TRISBbits.RB2=0;
   450  000138  9493               	bcf	3987,2,c	;volatile
   451                           
   452                           ; BSR set to: 0
   453                           ;main.c: 84: TRISBbits.RB3=0;
   454  00013A  9693               	bcf	3987,3,c	;volatile
   455                           
   456                           ; BSR set to: 0
   457                           ;main.c: 86: TRISAbits.RA3=1;
   458  00013C  8692               	bsf	3986,3,c	;volatile
   459                           
   460                           ; BSR set to: 0
   461                           ;main.c: 87: ANSEL0bits.ANS3=1;
   462  00013E  86B8               	bsf	4024,3,c	;volatile
   463                           
   464                           ;main.c: 89: ADCON0=0b00001101;
   465  000140  0E0D               	movlw	13
   466  000142  6EC2               	movwf	4034,c	;volatile
   467                           
   468                           ;main.c: 90: ADCON1=0b00000000;
   469  000144  0E00               	movlw	0
   470  000146  6EC1               	movwf	4033,c	;volatile
   471                           
   472                           ;main.c: 92: ADCON2=0b10101011;
   473  000148  0EAB               	movlw	171
   474  00014A  6EC0               	movwf	4032,c	;volatile
   475                           
   476                           ;main.c: 94: OSCCON = 0x72;
   477  00014C  0E72               	movlw	114
   478  00014E  6ED3               	movwf	4051,c	;volatile
   479  000150                     l79:
   480  000150  A4D3               	btfss	4051,2,c	;volatile
   481  000152  D7FE               	goto	l79
   482                           
   483                           ;main.c: 97: initPWM();
   484  000154  EC9F  F003         	call	_initPWM	;wreg free
   485  000158                     l1771:
   486                           
   487                           ;main.c: 102: PIR1bits.RCIF=1;
   488  000158  8A9E               	bsf	3998,5,c	;volatile
   489                           
   490                           ;main.c: 105: delay_s(1);
   491  00015A  0E01               	movlw	1
   492  00015C  EC20  F003         	call	_delay_s
   493                           
   494                           ;main.c: 106: stop(&motorL, &motorR);
   495  000160  0E6B               	movlw	low main@motorL
   496  000162  6E26               	movwf	stop@mL,c
   497  000164  0E00               	movlw	high main@motorL
   498  000166  6E27               	movwf	stop@mL+1,c
   499  000168  0E74               	movlw	low main@motorR
   500  00016A  6E28               	movwf	stop@mR,c
   501  00016C  0E00               	movlw	high main@motorR
   502  00016E  6E29               	movwf	stop@mR+1,c
   503  000170  EC5E  F002         	call	_stop	;wreg free
   504                           
   505                           ;main.c: 108: delay_s(1);
   506  000174  0E01               	movlw	1
   507  000176  EC20  F003         	call	_delay_s
   508                           
   509                           ;main.c: 109: fullSpeedAhead(&motorL, &motorR);
   510  00017A  0E6B               	movlw	low main@motorL
   511  00017C  6E26               	movwf	fullSpeedAhead@mL,c
   512  00017E  0E00               	movlw	high main@motorL
   513  000180  6E27               	movwf	fullSpeedAhead@mL+1,c
   514  000182  0E74               	movlw	low main@motorR
   515  000184  6E28               	movwf	fullSpeedAhead@mR,c
   516  000186  0E00               	movlw	high main@motorR
   517  000188  6E29               	movwf	fullSpeedAhead@mR+1,c
   518  00018A  ECE8  F002         	call	_fullSpeedAhead	;wreg free
   519                           
   520                           ;main.c: 111: delay_s(1);
   521  00018E  0E01               	movlw	1
   522  000190  EC20  F003         	call	_delay_s
   523                           
   524                           ;main.c: 112: stop(&motorL, &motorR);
   525  000194  0E6B               	movlw	low main@motorL
   526  000196  6E26               	movwf	stop@mL,c
   527  000198  0E00               	movlw	high main@motorL
   528  00019A  6E27               	movwf	stop@mL+1,c
   529  00019C  0E74               	movlw	low main@motorR
   530  00019E  6E28               	movwf	stop@mR,c
   531  0001A0  0E00               	movlw	high main@motorR
   532  0001A2  6E29               	movwf	stop@mR+1,c
   533  0001A4  EC5E  F002         	call	_stop	;wreg free
   534                           
   535                           ;main.c: 114: delay_s(1);
   536  0001A8  0E01               	movlw	1
   537  0001AA  EC20  F003         	call	_delay_s
   538                           
   539                           ;main.c: 115: fullSpeedBack(&motorL, &motorR);
   540  0001AE  0E6B               	movlw	low main@motorL
   541  0001B0  6E2B               	movwf	fullSpeedBack@mL,c
   542  0001B2  0E00               	movlw	high main@motorL
   543  0001B4  6E2C               	movwf	fullSpeedBack@mL+1,c
   544  0001B6  0E74               	movlw	low main@motorR
   545  0001B8  6E2D               	movwf	fullSpeedBack@mR,c
   546  0001BA  0E00               	movlw	high main@motorR
   547  0001BC  6E2E               	movwf	fullSpeedBack@mR+1,c
   548  0001BE  EC84  F003         	call	_fullSpeedBack	;wreg free
   549                           
   550                           ;main.c: 117: delay_s(1);
   551  0001C2  0E01               	movlw	1
   552  0001C4  EC20  F003         	call	_delay_s
   553                           
   554                           ;main.c: 118: stop(&motorL, &motorR);
   555  0001C8  0E6B               	movlw	low main@motorL
   556  0001CA  6E26               	movwf	stop@mL,c
   557  0001CC  0E00               	movlw	high main@motorL
   558  0001CE  6E27               	movwf	stop@mL+1,c
   559  0001D0  0E74               	movlw	low main@motorR
   560  0001D2  6E28               	movwf	stop@mR,c
   561  0001D4  0E00               	movlw	high main@motorR
   562  0001D6  6E29               	movwf	stop@mR+1,c
   563  0001D8  EC5E  F002         	call	_stop	;wreg free
   564                           
   565                           ;main.c: 120: delay_s(1);
   566  0001DC  0E01               	movlw	1
   567  0001DE  EC20  F003         	call	_delay_s
   568                           
   569                           ;main.c: 121: turnLeft(&motorL, &motorR);
   570  0001E2  0E6B               	movlw	low main@motorL
   571  0001E4  6E2B               	movwf	turnLeft@mL,c
   572  0001E6  0E00               	movlw	high main@motorL
   573  0001E8  6E2C               	movwf	turnLeft@mL+1,c
   574  0001EA  0E74               	movlw	low main@motorR
   575  0001EC  6E2D               	movwf	turnLeft@mR,c
   576  0001EE  0E00               	movlw	high main@motorR
   577  0001F0  6E2E               	movwf	turnLeft@mR+1,c
   578  0001F2  EC69  F003         	call	_turnLeft	;wreg free
   579                           
   580                           ;main.c: 123: delay_s(1);
   581  0001F6  0E01               	movlw	1
   582  0001F8  EC20  F003         	call	_delay_s
   583                           
   584                           ;main.c: 124: stop(&motorL, &motorR);
   585  0001FC  0E6B               	movlw	low main@motorL
   586  0001FE  6E26               	movwf	stop@mL,c
   587  000200  0E00               	movlw	high main@motorL
   588  000202  6E27               	movwf	stop@mL+1,c
   589  000204  0E74               	movlw	low main@motorR
   590  000206  6E28               	movwf	stop@mR,c
   591  000208  0E00               	movlw	high main@motorR
   592  00020A  6E29               	movwf	stop@mR+1,c
   593  00020C  EC5E  F002         	call	_stop	;wreg free
   594                           
   595                           ;main.c: 126: delay_s(1);
   596  000210  0E01               	movlw	1
   597  000212  EC20  F003         	call	_delay_s
   598                           
   599                           ;main.c: 127: turnRight(&motorL, &motorR);
   600  000216  0E6B               	movlw	low main@motorL
   601  000218  6E2B               	movwf	turnRight@mL,c
   602  00021A  0E00               	movlw	high main@motorL
   603  00021C  6E2C               	movwf	turnRight@mL+1,c
   604  00021E  0E74               	movlw	low main@motorR
   605  000220  6E2D               	movwf	turnRight@mR,c
   606  000222  0E00               	movlw	high main@motorR
   607  000224  6E2E               	movwf	turnRight@mR+1,c
   608  000226  EC4E  F003         	call	_turnRight	;wreg free
   609                           
   610                           ;main.c: 128: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   611  00022A  0E03               	movlw	3
   612  00022C  1841               	xorwf	_ReceivedString+15,w,c	;volatile
   613  00022E  A4D8               	btfss	status,2,c
   614  000230  D002               	goto	u1060
   615  000232  0E01               	movlw	1
   616  000234  D001               	goto	u1062
   617  000236                     u1060:
   618  000236  0E00               	movlw	0
   619  000238                     u1062:
   620  000238  6E2F               	movwf	??_main& (0+255),c
   621  00023A  0E02               	movlw	2
   622  00023C  1832               	xorwf	_ReceivedString,w,c	;volatile
   623  00023E  A4D8               	btfss	status,2,c
   624  000240  D002               	goto	u1070
   625  000242  0E01               	movlw	1
   626  000244  D001               	goto	u1072
   627  000246                     u1070:
   628  000246  0E00               	movlw	0
   629  000248                     u1072:
   630  000248  142F               	andwf	??_main,w,c
   631  00024A  A0E8               	btfss	wreg,0,c
   632  00024C  D785               	goto	l1771
   633                           
   634                           ;main.c: 129: if (VerifySignal(ReceivedString)){
   635  00024E  0E32               	movlw	low _ReceivedString
   636  000250  6E0F               	movwf	VerifySignal@Signal,c
   637  000252  0E00               	movlw	high _ReceivedString
   638  000254  6E10               	movwf	VerifySignal@Signal+1,c
   639  000256  EC04  F002         	call	_VerifySignal	;wreg free
   640  00025A  0900               	iorlw	0
   641  00025C  B4D8               	btfsc	status,2,c
   642  00025E  D77C               	goto	l1771
   643                           
   644                           ;main.c: 131: for (i=0; i<10; i++){
   645  000260  0E00               	movlw	0
   646  000262  0100               	movlb	0	; () banked
   647  000264  6F6A               	movwf	main@i& (0+255),b
   648  000266                     l1811:
   649                           
   650                           ; BSR set to: 0
   651  000266  0E09               	movlw	9
   652  000268  0100               	movlb	0	; () banked
   653  00026A  656A               	cpfsgt	main@i& (0+255),b
   654  00026C  D001               	goto	l1815
   655  00026E  D01C               	goto	l1821
   656  000270                     l1815:
   657                           
   658                           ; BSR set to: 0
   659                           ;main.c: 132: Message[i] = ReceivedString[i+1];
   660  000270  0100               	movlb	0	; () banked
   661  000272  516A               	movf	main@i& (0+255),w,b
   662  000274  6E2F               	movwf	??_main& (0+255),c
   663  000276  6A30               	clrf	(??_main+1)& (0+255),c
   664  000278  0E01               	movlw	1
   665  00027A  262F               	addwf	??_main,f,c
   666  00027C  0E00               	movlw	0
   667  00027E  2230               	addwfc	??_main+1,f,c
   668  000280  0E32               	movlw	low _ReceivedString
   669  000282  242F               	addwf	??_main,w,c
   670  000284  6ED9               	movwf	fsr2l,c
   671  000286  0E00               	movlw	high _ReceivedString
   672  000288  2030               	addwfc	??_main+1,w,c
   673  00028A  6EDA               	movwf	fsr2h,c
   674  00028C  0100               	movlb	0	; () banked
   675  00028E  516A               	movf	main@i& (0+255),w,b
   676  000290  0D01               	mullw	1
   677  000292  0E60               	movlw	low main@Message
   678  000294  24F3               	addwf	prodl,w,c
   679  000296  6EE1               	movwf	fsr1l,c
   680  000298  0E00               	movlw	high main@Message
   681  00029A  20F4               	addwfc	prodh,w,c
   682  00029C  6EE2               	movwf	fsr1h,c
   683  00029E  CFDF FFE7          	movff	indf2,indf1
   684                           
   685                           ; BSR set to: 0
   686  0002A2  0100               	movlb	0	; () banked
   687  0002A4  2B6A               	incf	main@i& (0+255),f,b
   688  0002A6  D7DF               	goto	l1811
   689  0002A8                     l1821:
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 133: }
   693                           ;main.c: 135: for (i=0; i<16; i++) {
   694  0002A8  0E00               	movlw	0
   695  0002AA  0100               	movlb	0	; () banked
   696  0002AC  6F6A               	movwf	main@i& (0+255),b
   697  0002AE                     l1823:
   698                           
   699                           ; BSR set to: 0
   700  0002AE  0E0F               	movlw	15
   701  0002B0  0100               	movlb	0	; () banked
   702  0002B2  656A               	cpfsgt	main@i& (0+255),b
   703  0002B4  D001               	goto	l1827
   704  0002B6  D750               	goto	l1771
   705  0002B8                     l1827:
   706                           
   707                           ; BSR set to: 0
   708                           ;main.c: 136: ReceivedString[i]=0;
   709  0002B8  0100               	movlb	0	; () banked
   710  0002BA  516A               	movf	main@i& (0+255),w,b
   711  0002BC  0D01               	mullw	1
   712  0002BE  0E32               	movlw	low _ReceivedString
   713  0002C0  24F3               	addwf	prodl,w,c
   714  0002C2  6ED9               	movwf	fsr2l,c
   715  0002C4  0E00               	movlw	high _ReceivedString
   716  0002C6  20F4               	addwfc	prodh,w,c
   717  0002C8  6EDA               	movwf	fsr2h,c
   718  0002CA  0E00               	movlw	0
   719  0002CC  6EDF               	movwf	indf2,c
   720                           
   721                           ; BSR set to: 0
   722  0002CE  0100               	movlb	0	; () banked
   723  0002D0  2B6A               	incf	main@i& (0+255),f,b
   724  0002D2  D7ED               	goto	l1823
   725  0002D4                     __end_of_main:
   726                           	opt stack 0
   727                           prodh	equ	0xFF4
   728                           prodl	equ	0xFF3
   729                           intcon	equ	0xFF2
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           indf1	equ	0xFE7
   733                           fsr1h	equ	0xFE2
   734                           fsr1l	equ	0xFE1
   735                           indf2	equ	0xFDF
   736                           fsr2h	equ	0xFDA
   737                           fsr2l	equ	0xFD9
   738                           status	equ	0xFD8
   739                           
   740 ;; *************** function _turnRight *****************
   741 ;; Defined at:
   742 ;;		line 89 in file "dc_motor.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   745 ;;		 -> main@motorL(9), 
   746 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   747 ;;		 -> main@motorR(9), 
   748 ;; Auto vars:     Size  Location     Type
   749 ;;		None
   750 ;; Return value:  Size  Location     Type
   751 ;;		None               void
   752 ;; Registers used:
   753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   759 ;;      Params:         4       0       0       0
   760 ;;      Locals:         0       0       0       0
   761 ;;      Temps:          0       0       0       0
   762 ;;      Totals:         4       0       0       0
   763 ;;Total ram usage:        4 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    4
   766 ;; This function calls:
   767 ;;		_fullSpeedAhead
   768 ;; This function is called by:
   769 ;;		_main
   770 ;;		_ScanIR
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text1
   775  00069C                     __ptext1:
   776                           	opt stack 0
   777  00069C                     _turnRight:
   778                           	opt stack 26
   779                           
   780                           ;dc_motor.c: 92: mL->direction=1;
   781                           
   782                           ; BSR set to: 0
   783                           ;incstack = 0
   784  00069C  EE20 F001          	lfsr	2,1
   785  0006A0  502B               	movf	turnRight@mL,w,c
   786  0006A2  26D9               	addwf	fsr2l,f,c
   787  0006A4  502C               	movf	turnRight@mL+1,w,c
   788  0006A6  22DA               	addwfc	fsr2h,f,c
   789  0006A8  0E01               	movlw	1
   790  0006AA  6EDF               	movwf	indf2,c
   791                           
   792                           ;dc_motor.c: 93: mR->direction=0;
   793  0006AC  EE20 F001          	lfsr	2,1
   794  0006B0  502D               	movf	turnRight@mR,w,c
   795  0006B2  26D9               	addwf	fsr2l,f,c
   796  0006B4  502E               	movf	turnRight@mR+1,w,c
   797  0006B6  22DA               	addwfc	fsr2h,f,c
   798  0006B8  0E00               	movlw	0
   799  0006BA  6EDF               	movwf	indf2,c
   800                           
   801                           ;dc_motor.c: 94: fullSpeedAhead(mL, mR);
   802  0006BC  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
   803  0006C0  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
   804  0006C4  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
   805  0006C8  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
   806  0006CC  ECE8  F002         	call	_fullSpeedAhead	;wreg free
   807  0006D0  0012               	return		;funcret
   808  0006D2                     __end_of_turnRight:
   809                           	opt stack 0
   810                           prodh	equ	0xFF4
   811                           prodl	equ	0xFF3
   812                           intcon	equ	0xFF2
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           indf1	equ	0xFE7
   816                           fsr1h	equ	0xFE2
   817                           fsr1l	equ	0xFE1
   818                           indf2	equ	0xFDF
   819                           fsr2h	equ	0xFDA
   820                           fsr2l	equ	0xFD9
   821                           status	equ	0xFD8
   822                           
   823 ;; *************** function _turnLeft *****************
   824 ;; Defined at:
   825 ;;		line 80 in file "dc_motor.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   828 ;;		 -> main@motorL(9), 
   829 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   830 ;;		 -> main@motorR(9), 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;		None
   833 ;; Return value:  Size  Location     Type
   834 ;;		None               void
   835 ;; Registers used:
   836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   842 ;;      Params:         4       0       0       0
   843 ;;      Locals:         0       0       0       0
   844 ;;      Temps:          0       0       0       0
   845 ;;      Totals:         4       0       0       0
   846 ;;Total ram usage:        4 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    4
   849 ;; This function calls:
   850 ;;		_fullSpeedAhead
   851 ;; This function is called by:
   852 ;;		_main
   853 ;;		_ScanIR
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text2
   858  0006D2                     __ptext2:
   859                           	opt stack 0
   860  0006D2                     _turnLeft:
   861                           	opt stack 26
   862                           
   863                           ;dc_motor.c: 83: mL->direction=0;
   864                           
   865                           ;incstack = 0
   866  0006D2  EE20 F001          	lfsr	2,1
   867  0006D6  502B               	movf	turnLeft@mL,w,c
   868  0006D8  26D9               	addwf	fsr2l,f,c
   869  0006DA  502C               	movf	turnLeft@mL+1,w,c
   870  0006DC  22DA               	addwfc	fsr2h,f,c
   871  0006DE  0E00               	movlw	0
   872  0006E0  6EDF               	movwf	indf2,c
   873                           
   874                           ;dc_motor.c: 84: mR->direction=1;
   875  0006E2  EE20 F001          	lfsr	2,1
   876  0006E6  502D               	movf	turnLeft@mR,w,c
   877  0006E8  26D9               	addwf	fsr2l,f,c
   878  0006EA  502E               	movf	turnLeft@mR+1,w,c
   879  0006EC  22DA               	addwfc	fsr2h,f,c
   880  0006EE  0E01               	movlw	1
   881  0006F0  6EDF               	movwf	indf2,c
   882                           
   883                           ;dc_motor.c: 85: fullSpeedAhead(mL, mR);
   884  0006F2  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
   885  0006F6  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
   886  0006FA  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
   887  0006FE  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
   888  000702  ECE8  F002         	call	_fullSpeedAhead	;wreg free
   889  000706  0012               	return		;funcret
   890  000708                     __end_of_turnLeft:
   891                           	opt stack 0
   892                           prodh	equ	0xFF4
   893                           prodl	equ	0xFF3
   894                           intcon	equ	0xFF2
   895                           postinc0	equ	0xFEE
   896                           wreg	equ	0xFE8
   897                           indf1	equ	0xFE7
   898                           fsr1h	equ	0xFE2
   899                           fsr1l	equ	0xFE1
   900                           indf2	equ	0xFDF
   901                           fsr2h	equ	0xFDA
   902                           fsr2l	equ	0xFD9
   903                           status	equ	0xFD8
   904                           
   905 ;; *************** function _stop *****************
   906 ;; Defined at:
   907 ;;		line 61 in file "dc_motor.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  mL              2   37[COMRAM] PTR struct DC_motor
   910 ;;		 -> main@motorL(9), 
   911 ;;  mR              2   39[COMRAM] PTR struct DC_motor
   912 ;;		 -> main@motorR(9), 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;		None               void
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   924 ;;      Params:         4       0       0       0
   925 ;;      Locals:         0       0       0       0
   926 ;;      Temps:          0       0       0       0
   927 ;;      Totals:         4       0       0       0
   928 ;;Total ram usage:        4 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    3
   931 ;; This function calls:
   932 ;;		_setMotorPWM
   933 ;; This function is called by:
   934 ;;		_main
   935 ;;		_ScanIR
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text3
   940  0004BC                     __ptext3:
   941                           	opt stack 0
   942  0004BC                     _stop:
   943                           	opt stack 27
   944                           
   945                           ;dc_motor.c: 64: while(mL->power>0 || mR->power>0){
   946                           
   947                           ;incstack = 0
   948  0004BC  D028               	goto	l1689
   949  0004BE                     l1675:
   950                           
   951                           ;dc_motor.c: 65: if(mL->power>0){
   952  0004BE  C026  FFD9         	movff	stop@mL,fsr2l
   953  0004C2  C027  FFDA         	movff	stop@mL+1,fsr2h
   954  0004C6  50DF               	movf	indf2,w,c
   955  0004C8  B4D8               	btfsc	status,2,c
   956  0004CA  D005               	goto	l1679
   957                           
   958                           ;dc_motor.c: 66: mL->power--;
   959  0004CC  C026  FFD9         	movff	stop@mL,fsr2l
   960  0004D0  C027  FFDA         	movff	stop@mL+1,fsr2h
   961  0004D4  06DF               	decf	indf2,f,c
   962  0004D6                     l1679:
   963                           
   964                           ;dc_motor.c: 67: }
   965                           ;dc_motor.c: 68: if(mR->power>0){
   966  0004D6  C028  FFD9         	movff	stop@mR,fsr2l
   967  0004DA  C029  FFDA         	movff	stop@mR+1,fsr2h
   968  0004DE  50DF               	movf	indf2,w,c
   969  0004E0  B4D8               	btfsc	status,2,c
   970  0004E2  D005               	goto	l1683
   971                           
   972                           ;dc_motor.c: 69: mR->power--;
   973  0004E4  C028  FFD9         	movff	stop@mR,fsr2l
   974  0004E8  C029  FFDA         	movff	stop@mR+1,fsr2h
   975  0004EC  06DF               	decf	indf2,f,c
   976  0004EE                     l1683:
   977                           
   978                           ;dc_motor.c: 70: }
   979                           ;dc_motor.c: 71: setMotorPWM(mL);
   980  0004EE  C026  F01D         	movff	stop@mL,setMotorPWM@m
   981  0004F2  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
   982  0004F6  EC6A  F001         	call	_setMotorPWM	;wreg free
   983                           
   984                           ;dc_motor.c: 72: setMotorPWM(mR);
   985  0004FA  C028  F01D         	movff	stop@mR,setMotorPWM@m
   986  0004FE  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
   987  000502  EC6A  F001         	call	_setMotorPWM	;wreg free
   988                           
   989                           ;dc_motor.c: 73: _delay((unsigned long)((50)*(8000000/4000000.0)));
   990  000506  0E21               	movlw	33
   991  000508                     u1167:
   992  000508  2EE8               	decfsz	wreg,f,c
   993  00050A  D7FE               	goto	u1167
   994  00050C  F000               	nop	
   995  00050E                     l1689:
   996  00050E  C026  FFD9         	movff	stop@mL,fsr2l
   997  000512  C027  FFDA         	movff	stop@mL+1,fsr2h
   998  000516  50DF               	movf	indf2,w,c
   999  000518  A4D8               	btfss	status,2,c
  1000  00051A  D7D1               	goto	l1675
  1001  00051C  C028  FFD9         	movff	stop@mR,fsr2l
  1002  000520  C029  FFDA         	movff	stop@mR+1,fsr2h
  1003  000524  50DF               	movf	indf2,w,c
  1004  000526  A4D8               	btfss	status,2,c
  1005  000528  D7CA               	goto	l1675
  1006                           
  1007                           ;dc_motor.c: 74: }
  1008                           ;dc_motor.c: 75: mL->direction=1;
  1009  00052A  EE20 F001          	lfsr	2,1
  1010  00052E  5026               	movf	stop@mL,w,c
  1011  000530  26D9               	addwf	fsr2l,f,c
  1012  000532  5027               	movf	stop@mL+1,w,c
  1013  000534  22DA               	addwfc	fsr2h,f,c
  1014  000536  0E01               	movlw	1
  1015  000538  6EDF               	movwf	indf2,c
  1016                           
  1017                           ;dc_motor.c: 76: mR->direction=1;
  1018  00053A  EE20 F001          	lfsr	2,1
  1019  00053E  5028               	movf	stop@mR,w,c
  1020  000540  26D9               	addwf	fsr2l,f,c
  1021  000542  5029               	movf	stop@mR+1,w,c
  1022  000544  22DA               	addwfc	fsr2h,f,c
  1023  000546  0E01               	movlw	1
  1024  000548  6EDF               	movwf	indf2,c
  1025  00054A  0012               	return		;funcret
  1026  00054C                     __end_of_stop:
  1027                           	opt stack 0
  1028                           prodh	equ	0xFF4
  1029                           prodl	equ	0xFF3
  1030                           intcon	equ	0xFF2
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           indf1	equ	0xFE7
  1034                           fsr1h	equ	0xFE2
  1035                           fsr1l	equ	0xFE1
  1036                           indf2	equ	0xFDF
  1037                           fsr2h	equ	0xFDA
  1038                           fsr2l	equ	0xFD9
  1039                           status	equ	0xFD8
  1040                           
  1041 ;; *************** function _initPWM *****************
  1042 ;; Defined at:
  1043 ;;		line 4 in file "dc_motor.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;		None               void
  1050 ;; Registers used:
  1051 ;;		wreg, status,2
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1057 ;;      Params:         0       0       0       0
  1058 ;;      Locals:         0       0       0       0
  1059 ;;      Temps:          0       0       0       0
  1060 ;;      Totals:         0       0       0       0
  1061 ;;Total ram usage:        0 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    1
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text4
  1072  00073E                     __ptext4:
  1073                           	opt stack 0
  1074  00073E                     _initPWM:
  1075                           	opt stack 29
  1076                           
  1077                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1078                           
  1079                           ;incstack = 0
  1080  00073E  0E00               	movlw	0
  1081  000740  6E7F               	movwf	3967,c	;volatile
  1082                           
  1083                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1084  000742  0E80               	movlw	128
  1085  000744  6E7E               	movwf	3966,c	;volatile
  1086                           
  1087                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1088  000746  0E6F               	movlw	111
  1089  000748  6E6F               	movwf	3951,c	;volatile
  1090                           
  1091                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1092  00074A  0E00               	movlw	0
  1093  00074C  6E6E               	movwf	3950,c	;volatile
  1094                           
  1095                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1096  00074E  0EC7               	movlw	199
  1097  000750  6E7B               	movwf	3963,c	;volatile
  1098                           
  1099                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1100  000752  0E00               	movlw	0
  1101  000754  6E7A               	movwf	3962,c	;volatile
  1102                           
  1103                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1104  000756  0E00               	movlw	0
  1105  000758  6E79               	movwf	3961,c	;volatile
  1106                           
  1107                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1108  00075A  0E00               	movlw	0
  1109  00075C  6E78               	movwf	3960,c	;volatile
  1110                           
  1111                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1112  00075E  0E00               	movlw	0
  1113  000760  6E77               	movwf	3959,c	;volatile
  1114                           
  1115                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1116  000762  0E00               	movlw	0
  1117  000764  6E76               	movwf	3958,c	;volatile
  1118  000766  0012               	return		;funcret
  1119  000768                     __end_of_initPWM:
  1120                           	opt stack 0
  1121                           prodh	equ	0xFF4
  1122                           prodl	equ	0xFF3
  1123                           intcon	equ	0xFF2
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           indf1	equ	0xFE7
  1127                           fsr1h	equ	0xFE2
  1128                           fsr1l	equ	0xFE1
  1129                           indf2	equ	0xFDF
  1130                           fsr2h	equ	0xFDA
  1131                           fsr2l	equ	0xFD9
  1132                           status	equ	0xFD8
  1133                           
  1134 ;; *************** function _fullSpeedBack *****************
  1135 ;; Defined at:
  1136 ;;		line 115 in file "dc_motor.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1139 ;;		 -> main@motorL(9), 
  1140 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1141 ;;		 -> main@motorR(9), 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;		None
  1144 ;; Return value:  Size  Location     Type
  1145 ;;		None               void
  1146 ;; Registers used:
  1147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1153 ;;      Params:         4       0       0       0
  1154 ;;      Locals:         0       0       0       0
  1155 ;;      Temps:          0       0       0       0
  1156 ;;      Totals:         4       0       0       0
  1157 ;;Total ram usage:        4 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    4
  1160 ;; This function calls:
  1161 ;;		_fullSpeedAhead
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text5
  1168  000708                     __ptext5:
  1169                           	opt stack 0
  1170  000708                     _fullSpeedBack:
  1171                           	opt stack 26
  1172                           
  1173                           ;dc_motor.c: 118: mL->direction=0;
  1174                           
  1175                           ;incstack = 0
  1176  000708  EE20 F001          	lfsr	2,1
  1177  00070C  502B               	movf	fullSpeedBack@mL,w,c
  1178  00070E  26D9               	addwf	fsr2l,f,c
  1179  000710  502C               	movf	fullSpeedBack@mL+1,w,c
  1180  000712  22DA               	addwfc	fsr2h,f,c
  1181  000714  0E00               	movlw	0
  1182  000716  6EDF               	movwf	indf2,c
  1183                           
  1184                           ;dc_motor.c: 119: mR->direction=0;
  1185  000718  EE20 F001          	lfsr	2,1
  1186  00071C  502D               	movf	fullSpeedBack@mR,w,c
  1187  00071E  26D9               	addwf	fsr2l,f,c
  1188  000720  502E               	movf	fullSpeedBack@mR+1,w,c
  1189  000722  22DA               	addwfc	fsr2h,f,c
  1190  000724  0E00               	movlw	0
  1191  000726  6EDF               	movwf	indf2,c
  1192                           
  1193                           ;dc_motor.c: 120: fullSpeedAhead(mL, mR);
  1194  000728  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1195  00072C  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1196  000730  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1197  000734  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1198  000738  ECE8  F002         	call	_fullSpeedAhead	;wreg free
  1199  00073C  0012               	return		;funcret
  1200  00073E                     __end_of_fullSpeedBack:
  1201                           	opt stack 0
  1202                           prodh	equ	0xFF4
  1203                           prodl	equ	0xFF3
  1204                           intcon	equ	0xFF2
  1205                           postinc0	equ	0xFEE
  1206                           wreg	equ	0xFE8
  1207                           indf1	equ	0xFE7
  1208                           fsr1h	equ	0xFE2
  1209                           fsr1l	equ	0xFE1
  1210                           indf2	equ	0xFDF
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _fullSpeedAhead *****************
  1216 ;; Defined at:
  1217 ;;		line 98 in file "dc_motor.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1220 ;;		 -> main@motorL(9), 
  1221 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1222 ;;		 -> main@motorR(9), 
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;		None               void
  1227 ;; Registers used:
  1228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1234 ;;      Params:         4       0       0       0
  1235 ;;      Locals:         0       0       0       0
  1236 ;;      Temps:          1       0       0       0
  1237 ;;      Totals:         5       0       0       0
  1238 ;;Total ram usage:        5 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    3
  1241 ;; This function calls:
  1242 ;;		_setMotorPWM
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;;		_turnLeft
  1246 ;;		_turnRight
  1247 ;;		_fullSpeedBack
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text6
  1252  0005D0                     __ptext6:
  1253                           	opt stack 0
  1254  0005D0                     _fullSpeedAhead:
  1255                           	opt stack 26
  1256                           
  1257                           ;dc_motor.c: 101: while(mL->power<100 || mR->power<100){
  1258                           
  1259                           ;incstack = 0
  1260  0005D0  D028               	goto	l154
  1261  0005D2                     l1639:
  1262                           
  1263                           ;dc_motor.c: 102: if(mL->power<100){
  1264  0005D2  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1265  0005D6  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1266  0005DA  0E64               	movlw	100
  1267  0005DC  60DF               	cpfslt	indf2,c
  1268  0005DE  D005               	goto	l1643
  1269                           
  1270                           ;dc_motor.c: 103: mL->power++;
  1271  0005E0  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1272  0005E4  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1273  0005E8  2ADF               	incf	indf2,f,c
  1274  0005EA                     l1643:
  1275                           
  1276                           ;dc_motor.c: 104: }
  1277                           ;dc_motor.c: 105: if(mR->power<100){
  1278  0005EA  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1279  0005EE  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1280  0005F2  0E64               	movlw	100
  1281  0005F4  60DF               	cpfslt	indf2,c
  1282  0005F6  D005               	goto	l1647
  1283                           
  1284                           ;dc_motor.c: 106: mR->power++;
  1285  0005F8  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1286  0005FC  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1287  000600  2ADF               	incf	indf2,f,c
  1288  000602                     l1647:
  1289                           
  1290                           ;dc_motor.c: 107: }
  1291                           ;dc_motor.c: 108: setMotorPWM(mL);
  1292  000602  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1293  000606  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1294  00060A  EC6A  F001         	call	_setMotorPWM	;wreg free
  1295                           
  1296                           ;dc_motor.c: 109: setMotorPWM(mR);
  1297  00060E  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1298  000612  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1299  000616  EC6A  F001         	call	_setMotorPWM	;wreg free
  1300                           
  1301                           ;dc_motor.c: 110: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1302  00061A  0E21               	movlw	33
  1303  00061C                     u1177:
  1304  00061C  2EE8               	decfsz	wreg,f,c
  1305  00061E  D7FE               	goto	u1177
  1306  000620  F000               	nop	
  1307  000622                     l154:
  1308  000622  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1309  000626  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1310  00062A  0E63               	movlw	99
  1311  00062C  64DF               	cpfsgt	indf2,c
  1312  00062E  D7D1               	goto	l1639
  1313  000630  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1314  000634  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1315  000638  0E63               	movlw	99
  1316  00063A  64DF               	cpfsgt	indf2,c
  1317  00063C  D7CA               	goto	l1639
  1318  00063E  0012               	return	
  1319  000640                     __end_of_fullSpeedAhead:
  1320                           	opt stack 0
  1321                           prodh	equ	0xFF4
  1322                           prodl	equ	0xFF3
  1323                           intcon	equ	0xFF2
  1324                           postinc0	equ	0xFEE
  1325                           wreg	equ	0xFE8
  1326                           indf1	equ	0xFE7
  1327                           fsr1h	equ	0xFE2
  1328                           fsr1l	equ	0xFE1
  1329                           indf2	equ	0xFDF
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function _setMotorPWM *****************
  1335 ;; Defined at:
  1336 ;;		line 20 in file "dc_motor.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1339 ;;		 -> main@motorR(9), main@motorL(9), 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  PWMduty         2   35[COMRAM] int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;		None               void
  1344 ;; Registers used:
  1345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1351 ;;      Params:         2       0       0       0
  1352 ;;      Locals:         2       0       0       0
  1353 ;;      Temps:          5       0       0       0
  1354 ;;      Totals:         9       0       0       0
  1355 ;;Total ram usage:        9 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    2
  1358 ;; This function calls:
  1359 ;;		___awdiv
  1360 ;;		___wmul
  1361 ;; This function is called by:
  1362 ;;		_stop
  1363 ;;		_fullSpeedAhead
  1364 ;;		_setMotorFullSpeed
  1365 ;;		_stopMotor
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text7
  1370  0002D4                     __ptext7:
  1371                           	opt stack 0
  1372  0002D4                     _setMotorPWM:
  1373                           	opt stack 26
  1374                           
  1375                           ;dc_motor.c: 22: int PWMduty;
  1376                           ;dc_motor.c: 24: PWMduty = (m->power*m->PWMperiod)/100;
  1377                           
  1378                           ;incstack = 0
  1379  0002D4  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1380  0002D8  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1381  0002DC  50DF               	movf	indf2,w,c
  1382  0002DE  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1383  0002E0  501F               	movf	??_setMotorPWM,w,c
  1384  0002E2  6E0F               	movwf	___wmul@multiplier,c
  1385  0002E4  6A10               	clrf	___wmul@multiplier+1,c
  1386  0002E6  EE20 F007          	lfsr	2,7
  1387  0002EA  501D               	movf	setMotorPWM@m,w,c
  1388  0002EC  26D9               	addwf	fsr2l,f,c
  1389  0002EE  501E               	movf	setMotorPWM@m+1,w,c
  1390  0002F0  22DA               	addwfc	fsr2h,f,c
  1391  0002F2  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1392  0002F6  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1393  0002FA  ECB4  F003         	call	___wmul	;wreg free
  1394  0002FE  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1395  000302  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1396  000306  0E00               	movlw	0
  1397  000308  6E18               	movwf	___awdiv@divisor+1,c
  1398  00030A  0E64               	movlw	100
  1399  00030C  6E17               	movwf	___awdiv@divisor,c
  1400  00030E  ECA6  F002         	call	___awdiv	;wreg free
  1401  000312  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1402  000316  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1403                           
  1404                           ;dc_motor.c: 26: if (m->direction)
  1405  00031A  EE20 F001          	lfsr	2,1
  1406  00031E  501D               	movf	setMotorPWM@m,w,c
  1407  000320  26D9               	addwf	fsr2l,f,c
  1408  000322  501E               	movf	setMotorPWM@m+1,w,c
  1409  000324  22DA               	addwfc	fsr2h,f,c
  1410  000326  50DF               	movf	indf2,w,c
  1411  000328  B4D8               	btfsc	status,2,c
  1412  00032A  D02C               	goto	l1635
  1413                           
  1414                           ;dc_motor.c: 27: {
  1415                           ;dc_motor.c: 28: LATB=LATB|(1<<(m->dir_pin));
  1416  00032C  EE20 F006          	lfsr	2,6
  1417  000330  501D               	movf	setMotorPWM@m,w,c
  1418  000332  26D9               	addwf	fsr2l,f,c
  1419  000334  501E               	movf	setMotorPWM@m+1,w,c
  1420  000336  22DA               	addwfc	fsr2h,f,c
  1421  000338  50DF               	movf	indf2,w,c
  1422  00033A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1423  00033C  0E01               	movlw	1
  1424  00033E  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1425  000340  2A1F               	incf	??_setMotorPWM,f,c
  1426  000342  D002               	goto	u894
  1427  000344                     u895:
  1428  000344  90D8               	bcf	status,0,c
  1429  000346  3620               	rlcf	??_setMotorPWM+1,f,c
  1430  000348                     u894:
  1431  000348  2E1F               	decfsz	??_setMotorPWM,f,c
  1432  00034A  D7FC               	goto	u895
  1433  00034C  5020               	movf	??_setMotorPWM+1,w,c
  1434  00034E  108A               	iorwf	3978,w,c	;volatile
  1435  000350  6E8A               	movwf	3978,c	;volatile
  1436                           
  1437                           ;dc_motor.c: 29: PWMduty=m->PWMperiod-PWMduty;
  1438  000352  EE20 F007          	lfsr	2,7
  1439  000356  501D               	movf	setMotorPWM@m,w,c
  1440  000358  26D9               	addwf	fsr2l,f,c
  1441  00035A  501E               	movf	setMotorPWM@m+1,w,c
  1442  00035C  22DA               	addwfc	fsr2h,f,c
  1443  00035E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1444  000362  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1445  000366  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1446  00036A  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1447  00036E  1E21               	comf	??_setMotorPWM+2,f,c
  1448  000370  1E22               	comf	??_setMotorPWM+3,f,c
  1449  000372  4A21               	infsnz	??_setMotorPWM+2,f,c
  1450  000374  2A22               	incf	??_setMotorPWM+3,f,c
  1451  000376  501F               	movf	??_setMotorPWM,w,c
  1452  000378  2421               	addwf	??_setMotorPWM+2,w,c
  1453  00037A  6E24               	movwf	setMotorPWM@PWMduty,c
  1454  00037C  5020               	movf	??_setMotorPWM+1,w,c
  1455  00037E  2022               	addwfc	??_setMotorPWM+3,w,c
  1456  000380  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1457                           
  1458                           ;dc_motor.c: 30: }
  1459  000382  D014               	goto	l124
  1460  000384                     l1635:
  1461                           
  1462                           ;dc_motor.c: 31: else
  1463                           ;dc_motor.c: 32: {
  1464                           ;dc_motor.c: 33: LATB=LATB&(~(1<<(m->dir_pin)));
  1465  000384  EE20 F006          	lfsr	2,6
  1466  000388  501D               	movf	setMotorPWM@m,w,c
  1467  00038A  26D9               	addwf	fsr2l,f,c
  1468  00038C  501E               	movf	setMotorPWM@m+1,w,c
  1469  00038E  22DA               	addwfc	fsr2h,f,c
  1470  000390  50DF               	movf	indf2,w,c
  1471  000392  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1472  000394  0E01               	movlw	1
  1473  000396  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1474  000398  2A1F               	incf	??_setMotorPWM,f,c
  1475  00039A  D002               	goto	u904
  1476  00039C                     u905:
  1477  00039C  90D8               	bcf	status,0,c
  1478  00039E  3620               	rlcf	??_setMotorPWM+1,f,c
  1479  0003A0                     u904:
  1480  0003A0  2E1F               	decfsz	??_setMotorPWM,f,c
  1481  0003A2  D7FC               	goto	u905
  1482  0003A4  5020               	movf	??_setMotorPWM+1,w,c
  1483  0003A6  0AFF               	xorlw	255
  1484  0003A8  148A               	andwf	3978,w,c	;volatile
  1485  0003AA  6E8A               	movwf	3978,c	;volatile
  1486  0003AC                     l124:
  1487                           
  1488                           ;dc_motor.c: 34: }
  1489                           ;dc_motor.c: 37: *(m->dutyLowByte)=PWMduty<<2;
  1490  0003AC  EE20 F002          	lfsr	2,2
  1491  0003B0  501D               	movf	setMotorPWM@m,w,c
  1492  0003B2  26D9               	addwf	fsr2l,f,c
  1493  0003B4  501E               	movf	setMotorPWM@m+1,w,c
  1494  0003B6  22DA               	addwfc	fsr2h,f,c
  1495  0003B8  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1496  0003BC  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1497  0003C0  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1498  0003C4  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1499  0003C8  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1500  0003CA  46E8               	rlncf	wreg,f,c
  1501  0003CC  0BFC               	andlw	252
  1502  0003CE  6EDF               	movwf	indf2,c
  1503                           
  1504                           ;dc_motor.c: 38: *(m->dutyHighByte)=PWMduty>>6;
  1505  0003D0  EE20 F004          	lfsr	2,4
  1506  0003D4  501D               	movf	setMotorPWM@m,w,c
  1507  0003D6  26D9               	addwf	fsr2l,f,c
  1508  0003D8  501E               	movf	setMotorPWM@m+1,w,c
  1509  0003DA  22DA               	addwfc	fsr2h,f,c
  1510  0003DC  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1511  0003E0  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1512  0003E4  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1513  0003E8  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1514  0003EC  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1515  0003F0  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1516  0003F4  0E06               	movlw	6
  1517  0003F6  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  1518  0003F8                     u915:
  1519  0003F8  3422               	rlcf	??_setMotorPWM+3,w,c
  1520  0003FA  3222               	rrcf	??_setMotorPWM+3,f,c
  1521  0003FC  3221               	rrcf	??_setMotorPWM+2,f,c
  1522  0003FE  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1523  000400  D7FB               	goto	u915
  1524  000402  5021               	movf	??_setMotorPWM+2,w,c
  1525  000404  6EDF               	movwf	indf2,c
  1526  000406  0012               	return		;funcret
  1527  000408                     __end_of_setMotorPWM:
  1528                           	opt stack 0
  1529                           prodh	equ	0xFF4
  1530                           prodl	equ	0xFF3
  1531                           intcon	equ	0xFF2
  1532                           postinc0	equ	0xFEE
  1533                           wreg	equ	0xFE8
  1534                           indf1	equ	0xFE7
  1535                           fsr1h	equ	0xFE2
  1536                           fsr1l	equ	0xFE1
  1537                           indf2	equ	0xFDF
  1538                           postinc2	equ	0xFDE
  1539                           postdec2	equ	0xFDD
  1540                           fsr2h	equ	0xFDA
  1541                           fsr2l	equ	0xFD9
  1542                           status	equ	0xFD8
  1543                           
  1544 ;; *************** function ___wmul *****************
  1545 ;; Defined at:
  1546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  multiplier      2   14[COMRAM] unsigned int 
  1549 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  product         2   18[COMRAM] unsigned int 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  2   14[COMRAM] unsigned int 
  1554 ;; Registers used:
  1555 ;;		wreg, status,2, status,0, prodl, prodh
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1561 ;;      Params:         4       0       0       0
  1562 ;;      Locals:         2       0       0       0
  1563 ;;      Temps:          0       0       0       0
  1564 ;;      Totals:         6       0       0       0
  1565 ;;Total ram usage:        6 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    1
  1568 ;; This function calls:
  1569 ;;		Nothing
  1570 ;; This function is called by:
  1571 ;;		_setMotorPWM
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           	psect	text8
  1576  000768                     __ptext8:
  1577                           	opt stack 0
  1578  000768                     ___wmul:
  1579                           	opt stack 26
  1580                           
  1581                           ;incstack = 0
  1582  000768  500F               	movf	___wmul@multiplier,w,c
  1583  00076A  0211               	mulwf	___wmul@multiplicand,c
  1584  00076C  CFF3 F013          	movff	prodl,___wmul@product
  1585  000770  CFF4 F014          	movff	prodh,___wmul@product+1
  1586  000774  500F               	movf	___wmul@multiplier,w,c
  1587  000776  0212               	mulwf	___wmul@multiplicand+1,c
  1588  000778  50F3               	movf	prodl,w,c
  1589  00077A  2614               	addwf	___wmul@product+1,f,c
  1590  00077C  5010               	movf	___wmul@multiplier+1,w,c
  1591  00077E  0211               	mulwf	___wmul@multiplicand,c
  1592  000780  50F3               	movf	prodl,w,c
  1593  000782  2614               	addwf	___wmul@product+1,f,c
  1594  000784  C013  F00F         	movff	___wmul@product,?___wmul
  1595  000788  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1596  00078C  0012               	return	
  1597  00078E                     __end_of___wmul:
  1598                           	opt stack 0
  1599                           prodh	equ	0xFF4
  1600                           prodl	equ	0xFF3
  1601                           intcon	equ	0xFF2
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           indf1	equ	0xFE7
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           indf2	equ	0xFDF
  1608                           postinc2	equ	0xFDE
  1609                           postdec2	equ	0xFDD
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function ___awdiv *****************
  1615 ;; Defined at:
  1616 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  dividend        2   20[COMRAM] int 
  1619 ;;  divisor         2   22[COMRAM] int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  quotient        2   26[COMRAM] int 
  1622 ;;  sign            1   25[COMRAM] unsigned char 
  1623 ;;  counter         1   24[COMRAM] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  2   20[COMRAM] int 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1633 ;;      Params:         4       0       0       0
  1634 ;;      Locals:         4       0       0       0
  1635 ;;      Temps:          0       0       0       0
  1636 ;;      Totals:         8       0       0       0
  1637 ;;Total ram usage:        8 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    1
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_setMotorPWM
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text9
  1648  00054C                     __ptext9:
  1649                           	opt stack 0
  1650  00054C                     ___awdiv:
  1651                           	opt stack 26
  1652                           
  1653                           ;incstack = 0
  1654  00054C  0E00               	movlw	0
  1655  00054E  6E1A               	movwf	___awdiv@sign,c
  1656  000550  AE18               	btfss	___awdiv@divisor+1,7,c
  1657  000552  D006               	goto	l1593
  1658  000554  6C17               	negf	___awdiv@divisor,c
  1659  000556  1E18               	comf	___awdiv@divisor+1,f,c
  1660  000558  B0D8               	btfsc	status,0,c
  1661  00055A  2A18               	incf	___awdiv@divisor+1,f,c
  1662  00055C  0E01               	movlw	1
  1663  00055E  6E1A               	movwf	___awdiv@sign,c
  1664  000560                     l1593:
  1665  000560  AE16               	btfss	___awdiv@dividend+1,7,c
  1666  000562  D006               	goto	l1599
  1667  000564  6C15               	negf	___awdiv@dividend,c
  1668  000566  1E16               	comf	___awdiv@dividend+1,f,c
  1669  000568  B0D8               	btfsc	status,0,c
  1670  00056A  2A16               	incf	___awdiv@dividend+1,f,c
  1671  00056C  0E01               	movlw	1
  1672  00056E  1A1A               	xorwf	___awdiv@sign,f,c
  1673  000570                     l1599:
  1674  000570  0E00               	movlw	0
  1675  000572  6E1C               	movwf	___awdiv@quotient+1,c
  1676  000574  0E00               	movlw	0
  1677  000576  6E1B               	movwf	___awdiv@quotient,c
  1678  000578  5017               	movf	___awdiv@divisor,w,c
  1679  00057A  1018               	iorwf	___awdiv@divisor+1,w,c
  1680  00057C  B4D8               	btfsc	status,2,c
  1681  00057E  D01C               	goto	l1621
  1682  000580  0E01               	movlw	1
  1683  000582  6E19               	movwf	___awdiv@counter,c
  1684  000584  D004               	goto	l1607
  1685  000586                     l1605:
  1686  000586  90D8               	bcf	status,0,c
  1687  000588  3617               	rlcf	___awdiv@divisor,f,c
  1688  00058A  3618               	rlcf	___awdiv@divisor+1,f,c
  1689  00058C  2A19               	incf	___awdiv@counter,f,c
  1690  00058E                     l1607:
  1691  00058E  AE18               	btfss	___awdiv@divisor+1,7,c
  1692  000590  D7FA               	goto	l1605
  1693  000592                     l1609:
  1694  000592  90D8               	bcf	status,0,c
  1695  000594  361B               	rlcf	___awdiv@quotient,f,c
  1696  000596  361C               	rlcf	___awdiv@quotient+1,f,c
  1697  000598  5017               	movf	___awdiv@divisor,w,c
  1698  00059A  5C15               	subwf	___awdiv@dividend,w,c
  1699  00059C  5018               	movf	___awdiv@divisor+1,w,c
  1700  00059E  5816               	subwfb	___awdiv@dividend+1,w,c
  1701  0005A0  A0D8               	btfss	status,0,c
  1702  0005A2  D005               	goto	l1617
  1703  0005A4  5017               	movf	___awdiv@divisor,w,c
  1704  0005A6  5E15               	subwf	___awdiv@dividend,f,c
  1705  0005A8  5018               	movf	___awdiv@divisor+1,w,c
  1706  0005AA  5A16               	subwfb	___awdiv@dividend+1,f,c
  1707  0005AC  801B               	bsf	___awdiv@quotient,0,c
  1708  0005AE                     l1617:
  1709  0005AE  90D8               	bcf	status,0,c
  1710  0005B0  3218               	rrcf	___awdiv@divisor+1,f,c
  1711  0005B2  3217               	rrcf	___awdiv@divisor,f,c
  1712  0005B4  2E19               	decfsz	___awdiv@counter,f,c
  1713  0005B6  D7ED               	goto	l1609
  1714  0005B8                     l1621:
  1715  0005B8  501A               	movf	___awdiv@sign,w,c
  1716  0005BA  B4D8               	btfsc	status,2,c
  1717  0005BC  D004               	goto	l1625
  1718  0005BE  6C1B               	negf	___awdiv@quotient,c
  1719  0005C0  1E1C               	comf	___awdiv@quotient+1,f,c
  1720  0005C2  B0D8               	btfsc	status,0,c
  1721  0005C4  2A1C               	incf	___awdiv@quotient+1,f,c
  1722  0005C6                     l1625:
  1723  0005C6  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  1724  0005CA  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  1725  0005CE  0012               	return	
  1726  0005D0                     __end_of___awdiv:
  1727                           	opt stack 0
  1728                           prodh	equ	0xFF4
  1729                           prodl	equ	0xFF3
  1730                           intcon	equ	0xFF2
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           indf1	equ	0xFE7
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           indf2	equ	0xFDF
  1737                           postinc2	equ	0xFDE
  1738                           postdec2	equ	0xFDD
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8
  1742                           
  1743 ;; *************** function _delay_s *****************
  1744 ;; Defined at:
  1745 ;;		line 16 in file "main.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;  seconds         1    wreg     unsigned char 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  seconds         1   16[COMRAM] unsigned char 
  1750 ;;  j               2   19[COMRAM] unsigned int 
  1751 ;;  i               2   17[COMRAM] unsigned int 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1761 ;;      Params:         0       0       0       0
  1762 ;;      Locals:         5       0       0       0
  1763 ;;      Temps:          2       0       0       0
  1764 ;;      Totals:         7       0       0       0
  1765 ;;Total ram usage:        7 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; Hardware stack levels required when called:    1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text10
  1776  000640                     __ptext10:
  1777                           	opt stack 0
  1778  000640                     _delay_s:
  1779                           	opt stack 29
  1780                           
  1781                           ;incstack = 0
  1782                           ;delay_s@seconds stored from wreg
  1783  000640  6E11               	movwf	delay_s@seconds,c
  1784                           
  1785                           ;main.c: 17: unsigned int i=0;
  1786  000642  0E00               	movlw	0
  1787  000644  6E13               	movwf	delay_s@i+1,c
  1788  000646  0E00               	movlw	0
  1789  000648  6E12               	movwf	delay_s@i,c
  1790                           
  1791                           ;main.c: 18: unsigned int j=0;
  1792  00064A  0E00               	movlw	0
  1793  00064C  6E15               	movwf	delay_s@j+1,c
  1794  00064E  0E00               	movlw	0
  1795  000650  6E14               	movwf	delay_s@j,c
  1796                           
  1797                           ;main.c: 19: for (i=1; i<=seconds; i++) {
  1798  000652  0E00               	movlw	0
  1799  000654  6E13               	movwf	delay_s@i+1,c
  1800  000656  0E01               	movlw	1
  1801  000658  6E12               	movwf	delay_s@i,c
  1802  00065A  D016               	goto	l1669
  1803  00065C                     l1657:
  1804                           
  1805                           ;main.c: 20: for (j=1; j<=20; j++) {
  1806  00065C  0E00               	movlw	0
  1807  00065E  6E15               	movwf	delay_s@j+1,c
  1808  000660  0E01               	movlw	1
  1809  000662  6E14               	movwf	delay_s@j,c
  1810  000664                     l1659:
  1811  000664  5015               	movf	delay_s@j+1,w,c
  1812  000666  E10E               	bnz	l1667
  1813  000668  0E15               	movlw	21
  1814  00066A  5C14               	subwf	delay_s@j,w,c
  1815  00066C  B0D8               	btfsc	status,0,c
  1816  00066E  D00A               	goto	l1667
  1817                           
  1818                           ;main.c: 21: _delay((unsigned long)((50)*(8000000/4000.0)));
  1819  000670  0E82               	movlw	130
  1820  000672  6E0F               	movwf	??_delay_s& (0+255),c
  1821  000674  0EDE               	movlw	222
  1822  000676                     u1187:
  1823  000676  2EE8               	decfsz	wreg,f,c
  1824  000678  D7FE               	goto	u1187
  1825  00067A  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1826  00067C  D7FC               	goto	u1187
  1827  00067E  4A14               	infsnz	delay_s@j,f,c
  1828  000680  2A15               	incf	delay_s@j+1,f,c
  1829  000682  D7F0               	goto	l1659
  1830  000684                     l1667:
  1831  000684  4A12               	infsnz	delay_s@i,f,c
  1832  000686  2A13               	incf	delay_s@i+1,f,c
  1833  000688                     l1669:
  1834  000688  5011               	movf	delay_s@seconds,w,c
  1835  00068A  6E0F               	movwf	??_delay_s& (0+255),c
  1836  00068C  6A10               	clrf	(??_delay_s+1)& (0+255),c
  1837  00068E  5012               	movf	delay_s@i,w,c
  1838  000690  5C0F               	subwf	??_delay_s,w,c
  1839  000692  5013               	movf	delay_s@i+1,w,c
  1840  000694  5810               	subwfb	??_delay_s+1,w,c
  1841  000696  A0D8               	btfss	status,0,c
  1842  000698  0012               	return	
  1843  00069A  D7E0               	goto	l1657
  1844  00069C                     __end_of_delay_s:
  1845                           	opt stack 0
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           fsr1h	equ	0xFE2
  1853                           fsr1l	equ	0xFE1
  1854                           indf2	equ	0xFDF
  1855                           postinc2	equ	0xFDE
  1856                           postdec2	equ	0xFDD
  1857                           fsr2h	equ	0xFDA
  1858                           fsr2l	equ	0xFD9
  1859                           status	equ	0xFD8
  1860                           
  1861 ;; *************** function _VerifySignal *****************
  1862 ;; Defined at:
  1863 ;;		line 46 in file "RFID_Reader.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1866 ;;		 -> ReceivedString(16), 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  hexByte         2   23[COMRAM] unsigned int 
  1869 ;;  i               1   25[COMRAM] unsigned char 
  1870 ;;  checksum        1   22[COMRAM] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      unsigned char 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1880 ;;      Params:         2       0       0       0
  1881 ;;      Locals:         4       0       0       0
  1882 ;;      Temps:          6       0       0       0
  1883 ;;      Totals:        12       0       0       0
  1884 ;;Total ram usage:       12 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    1
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text11
  1895  000408                     __ptext11:
  1896                           	opt stack 0
  1897  000408                     _VerifySignal:
  1898                           	opt stack 29
  1899                           
  1900                           ;RFID_Reader.c: 47: unsigned char checksum=0;
  1901                           
  1902                           ;incstack = 0
  1903  000408  0E00               	movlw	0
  1904  00040A  6E17               	movwf	VerifySignal@checksum,c
  1905                           
  1906                           ;RFID_Reader.c: 48: unsigned int hexByte=0;
  1907  00040C  0E00               	movlw	0
  1908  00040E  6E19               	movwf	VerifySignal@hexByte+1,c
  1909  000410  0E00               	movlw	0
  1910  000412  6E18               	movwf	VerifySignal@hexByte,c
  1911                           
  1912                           ;RFID_Reader.c: 49: unsigned char i=0;
  1913  000414  0E00               	movlw	0
  1914  000416  6E1A               	movwf	VerifySignal@i,c
  1915                           
  1916                           ;RFID_Reader.c: 52: hexByte = (Signal[3]<<8) + Signal[4];
  1917  000418  EE20 F004          	lfsr	2,4
  1918  00041C  500F               	movf	VerifySignal@Signal,w,c
  1919  00041E  26D9               	addwf	fsr2l,f,c
  1920  000420  5010               	movf	VerifySignal@Signal+1,w,c
  1921  000422  22DA               	addwfc	fsr2h,f,c
  1922  000424  50DF               	movf	indf2,w,c
  1923  000426  6E11               	movwf	??_VerifySignal& (0+255),c
  1924  000428  EE20 F003          	lfsr	2,3
  1925  00042C  500F               	movf	VerifySignal@Signal,w,c
  1926  00042E  26D9               	addwf	fsr2l,f,c
  1927  000430  5010               	movf	VerifySignal@Signal+1,w,c
  1928  000432  22DA               	addwfc	fsr2h,f,c
  1929  000434  50DF               	movf	indf2,w,c
  1930  000436  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1931  000438  5012               	movf	??_VerifySignal+1,w,c
  1932  00043A  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1933  00043C  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1934  00043E  5011               	movf	??_VerifySignal,w,c
  1935  000440  2413               	addwf	??_VerifySignal+2,w,c
  1936  000442  6E18               	movwf	VerifySignal@hexByte,c
  1937  000444  0E00               	movlw	0
  1938  000446  2014               	addwfc	??_VerifySignal+3,w,c
  1939  000448  6E19               	movwf	VerifySignal@hexByte+1,c
  1940                           
  1941                           ;RFID_Reader.c: 53: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1942  00044A  EE20 F002          	lfsr	2,2
  1943  00044E  500F               	movf	VerifySignal@Signal,w,c
  1944  000450  26D9               	addwf	fsr2l,f,c
  1945  000452  5010               	movf	VerifySignal@Signal+1,w,c
  1946  000454  22DA               	addwfc	fsr2h,f,c
  1947  000456  50DF               	movf	indf2,w,c
  1948  000458  1818               	xorwf	VerifySignal@hexByte,w,c
  1949  00045A  6E17               	movwf	VerifySignal@checksum,c
  1950                           
  1951                           ;RFID_Reader.c: 56: for (i=5; i<10; i+=2){
  1952  00045C  0E05               	movlw	5
  1953  00045E  6E1A               	movwf	VerifySignal@i,c
  1954  000460                     l1713:
  1955  000460  0E09               	movlw	9
  1956  000462  641A               	cpfsgt	VerifySignal@i,c
  1957  000464  D001               	goto	l1717
  1958  000466  D028               	goto	l1725
  1959  000468                     l1717:
  1960                           
  1961                           ;RFID_Reader.c: 57: hexByte = (Signal[i]<<8) + Signal[i+1];
  1962  000468  501A               	movf	VerifySignal@i,w,c
  1963  00046A  6E11               	movwf	??_VerifySignal& (0+255),c
  1964  00046C  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1965  00046E  0E01               	movlw	1
  1966  000470  2611               	addwf	??_VerifySignal,f,c
  1967  000472  0E00               	movlw	0
  1968  000474  2212               	addwfc	??_VerifySignal+1,f,c
  1969  000476  5011               	movf	??_VerifySignal,w,c
  1970  000478  240F               	addwf	VerifySignal@Signal,w,c
  1971  00047A  6ED9               	movwf	fsr2l,c
  1972  00047C  5012               	movf	??_VerifySignal+1,w,c
  1973  00047E  2010               	addwfc	VerifySignal@Signal+1,w,c
  1974  000480  6EDA               	movwf	fsr2h,c
  1975  000482  50DF               	movf	indf2,w,c
  1976  000484  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1977  000486  501A               	movf	VerifySignal@i,w,c
  1978  000488  0D01               	mullw	1
  1979  00048A  50F3               	movf	prodl,w,c
  1980  00048C  240F               	addwf	VerifySignal@Signal,w,c
  1981  00048E  6ED9               	movwf	fsr2l,c
  1982  000490  50F4               	movf	prodh,w,c
  1983  000492  2010               	addwfc	VerifySignal@Signal+1,w,c
  1984  000494  6EDA               	movwf	fsr2h,c
  1985  000496  50DF               	movf	indf2,w,c
  1986  000498  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1987  00049A  5014               	movf	??_VerifySignal+3,w,c
  1988  00049C  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1989  00049E  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1990  0004A0  5013               	movf	??_VerifySignal+2,w,c
  1991  0004A2  2415               	addwf	??_VerifySignal+4,w,c
  1992  0004A4  6E18               	movwf	VerifySignal@hexByte,c
  1993  0004A6  0E00               	movlw	0
  1994  0004A8  2016               	addwfc	??_VerifySignal+5,w,c
  1995  0004AA  6E19               	movwf	VerifySignal@hexByte+1,c
  1996                           
  1997                           ;RFID_Reader.c: 58: checksum = checksum ^ hexByte;
  1998  0004AC  5017               	movf	VerifySignal@checksum,w,c
  1999  0004AE  1818               	xorwf	VerifySignal@hexByte,w,c
  2000  0004B0  6E17               	movwf	VerifySignal@checksum,c
  2001  0004B2  0E02               	movlw	2
  2002  0004B4  261A               	addwf	VerifySignal@i,f,c
  2003  0004B6  D7D4               	goto	l1713
  2004  0004B8                     l1725:
  2005                           
  2006                           ;RFID_Reader.c: 59: }
  2007                           ;RFID_Reader.c: 62: return 1;
  2008  0004B8  0E01               	movlw	1
  2009  0004BA  0012               	return	
  2010  0004BC                     __end_of_VerifySignal:
  2011                           	opt stack 0
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           intcon	equ	0xFF2
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           indf1	equ	0xFE7
  2018                           fsr1h	equ	0xFE2
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           postinc2	equ	0xFDE
  2022                           postdec2	equ	0xFDD
  2023                           fsr2h	equ	0xFDA
  2024                           fsr2l	equ	0xFD9
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _InterruptHandlerHigh *****************
  2028 ;; Defined at:
  2029 ;;		line 27 in file "main.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2043 ;;      Params:         0       0       0       0
  2044 ;;      Locals:         0       0       0       0
  2045 ;;      Temps:         14       0       0       0
  2046 ;;      Totals:        14       0       0       0
  2047 ;;Total ram usage:       14 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		Interrupt level 2
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	intcode
  2057  000008                     __pintcode:
  2058                           	opt stack 0
  2059  000008                     _InterruptHandlerHigh:
  2060                           	opt stack 26
  2061                           
  2062                           ;incstack = 0
  2063  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2064  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2065  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2066  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2067  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2068  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2069  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2070  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2071  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2072  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2073  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2074  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2075  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2076  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2077  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2078                           
  2079                           ;main.c: 29: if (PIR1bits.RCIF) {
  2080  000042  AA9E               	btfss	3998,5,c	;volatile
  2081  000044  D013               	goto	i2l76
  2082                           
  2083                           ;main.c: 30: ReceivedString[i]=RCREG;
  2084  000046  5031               	movf	_i,w,c	;volatile
  2085  000048  0D01               	mullw	1
  2086  00004A  0E32               	movlw	low _ReceivedString
  2087  00004C  24F3               	addwf	prodl,w,c
  2088  00004E  6ED9               	movwf	fsr2l,c
  2089  000050  0E00               	movlw	high _ReceivedString
  2090  000052  20F4               	addwfc	prodh,w,c
  2091  000054  6EDA               	movwf	fsr2h,c
  2092  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2093                           
  2094                           ;main.c: 31: if (i==15){
  2095  00005A  0E0F               	movlw	15
  2096  00005C  1831               	xorwf	_i,w,c	;volatile
  2097  00005E  A4D8               	btfss	status,2,c
  2098  000060  D003               	goto	i2l1059
  2099                           
  2100                           ;main.c: 32: i=0;
  2101  000062  0E00               	movlw	0
  2102  000064  6E31               	movwf	_i,c	;volatile
  2103                           
  2104                           ;main.c: 33: }else{
  2105  000066  D001               	goto	i2l1061
  2106  000068                     i2l1059:
  2107                           
  2108                           ;main.c: 34: i++;
  2109  000068  2A31               	incf	_i,f,c	;volatile
  2110  00006A                     i2l1061:
  2111                           
  2112                           ;main.c: 35: }
  2113                           ;main.c: 36: PIR1bits.RCIF=0;
  2114  00006A  9A9E               	bcf	3998,5,c	;volatile
  2115  00006C                     i2l76:
  2116  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2117  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2118  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2119  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2120  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2121  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2122  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2123  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2124  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2125  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2126  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2127  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2128  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2129  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2130  0000A4  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2131  0000A6  0011               	retfie		f
  2132  0000A8                     __end_of_InterruptHandlerHigh:
  2133                           	opt stack 0
  2134  0000                     pclatu	equ	0xFFB
  2135                           pclath	equ	0xFFA
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           intcon	equ	0xFF2
  2143                           postinc0	equ	0xFEE
  2144                           fsr0h	equ	0xFEA
  2145                           fsr0l	equ	0xFE9
  2146                           wreg	equ	0xFE8
  2147                           indf1	equ	0xFE7
  2148                           fsr1h	equ	0xFE2
  2149                           fsr1l	equ	0xFE1
  2150                           indf2	equ	0xFDF
  2151                           postinc2	equ	0xFDE
  2152                           postdec2	equ	0xFDD
  2153                           fsr2h	equ	0xFDA
  2154                           fsr2l	equ	0xFD9
  2155                           status	equ	0xFD8
  2156                           pclatu	equ	0xFFB
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           postinc0	equ	0xFEE
  2166                           fsr0h	equ	0xFEA
  2167                           fsr0l	equ	0xFE9
  2168                           wreg	equ	0xFE8
  2169                           indf1	equ	0xFE7
  2170                           fsr1h	equ	0xFE2
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179                           	psect	rparam
  2180  0000                     pclatu	equ	0xFFB
  2181                           pclath	equ	0xFFA
  2182                           tblptru	equ	0xFF8
  2183                           tblptrh	equ	0xFF7
  2184                           tblptrl	equ	0xFF6
  2185                           tablat	equ	0xFF5
  2186                           prodh	equ	0xFF4
  2187                           prodl	equ	0xFF3
  2188                           intcon	equ	0xFF2
  2189                           postinc0	equ	0xFEE
  2190                           fsr0h	equ	0xFEA
  2191                           fsr0l	equ	0xFE9
  2192                           wreg	equ	0xFE8
  2193                           indf1	equ	0xFE7
  2194                           fsr1h	equ	0xFE2
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203                           	psect	temp
  2204  000042                     btemp:
  2205                           	opt stack 0
  2206  000042                     	ds	1
  2207  0000                     int$flags	set	btemp
  2208                           pclatu	equ	0xFFB
  2209                           pclath	equ	0xFFA
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           prodh	equ	0xFF4
  2215                           prodl	equ	0xFF3
  2216                           intcon	equ	0xFF2
  2217                           postinc0	equ	0xFEE
  2218                           fsr0h	equ	0xFEA
  2219                           fsr0l	equ	0xFE9
  2220                           wreg	equ	0xFE8
  2221                           indf1	equ	0xFE7
  2222                           fsr1h	equ	0xFE2
  2223                           fsr1l	equ	0xFE1
  2224                           indf2	equ	0xFDF
  2225                           postinc2	equ	0xFDE
  2226                           postdec2	equ	0xFDD
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      65
    BANK0           160     29      29
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(COMRAM[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S384DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S384DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedBack
    _main->_turnLeft
    _main->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedBack->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   16739
                                             46 COMRAM     2     2      0
                                              0 BANK0     29    29      0
                       _VerifySignal
                            _delay_s
                     _fullSpeedAhead
                      _fullSpeedBack
                            _initPWM
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    3014
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    3168
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3260
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    2860
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2582
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1718
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     7      0      94
                                             14 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     476
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _VerifySignal
   _delay_s
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1D      1D       4       18.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      41       1       69.1%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E       5        0.0%
DATA                 0      0      5E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 13 10:24:37 2018

                            _i 0031                             l79 0150                   ___awdiv@sign 001A  
          ___wmul@multiplicand 0011                    main@Message 0060                            l124 03AC  
                          l154 0622                            u904 03A0                            u905 039C  
                          u915 03F8                            u894 0348                            u895 0344  
                          prod 000FF3                            wreg 000FE8                           l1605 0586  
                         l1621 05B8                           l1607 058E                           l1713 0460  
                         l1625 05C6                           l1617 05AE                           l1609 0592  
                         l1635 0384                           l1643 05EA                           l1811 0266  
                         l1725 04B8                           l1717 0468                           l1821 02A8  
                         l1647 0602                           l1639 05D2                           l1823 02AE  
                         l1815 0270                           l1657 065C                           l1593 0560  
                         l1667 0684                           l1659 0664                           l1683 04EE  
                         l1675 04BE                           l1827 02B8                           l1771 0158  
                         l1669 0688                           l1599 0570                           l1679 04D6  
                         l1689 050E                           u1060 0236                           u1070 0246  
                         u1062 0238                           u1072 0248                           _LATB 000F8A  
                         u1167 0508                           u1177 061C                           u1187 0676  
                         i2l76 006C                           _main 00AC                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr0l 000FE9                           fsr2h 000FDA  
                         indf1 000FE7                           fsr1l 000FE1                           indf2 000FDF  
                         fsr2l 000FD9                           btemp 0042                           _stop 04BC  
                         pclat 000FFA                           prodh 000FF4                           prodl 000FF3  
                         start 00A8                 delay_s@seconds 0011                   ___param_bank 000010  
                        ?_main 0001                __end_of___awdiv 05D0                          ?_stop 0026  
              ___awdiv@divisor 0017                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                ___awdiv@counter 0019  
                        _RCREG 000FAE                          _SPBRG 000FAF                          _TRISC 000F94  
                        _TXREG 000FAD                __end_of_delay_s 069C                __end_of_initPWM 0768  
                        main@i 006A                          tablat 000FF5                          status 000FD8  
              __initialization 078E                   __end_of_main 02D4                   __end_of_stop 054C  
               __CFG_OSC$IRCIO 000000            VerifySignal@hexByte 0018                         ??_main 002F  
                       ??_stop 002A                  __activetblptr 000000                   ?_setMotorPWM 001D  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         _ADCON2 000FC0  
       __size_of_fullSpeedBack 0036               ___awdiv@dividend 0015                         i2l1061 006A  
                       i2l1059 0068                 __CFG_WDTEN$OFF 000000                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         ___wmul 0768  
                    ??___awdiv 0019                         clear_0 0794               ___awdiv@quotient 001B  
                    ??_delay_s 000F                      ??_initPWM 000F                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0026  
                       stop@mR 0028               __end_of_turnLeft 0708                fullSpeedBack@mL 002B  
              fullSpeedBack@mR 002D                     __accesstop 0060        __end_of__initialization 079A  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                  _fullSpeedBack 0708  
         VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0                 ?_fullSpeedBack 002B  
                      ?___wmul 000F        __size_of_fullSpeedAhead 0070                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E           __size_of_setMotorPWM 0134             __size_of_turnRight 0036  
                      __Hparam 0000                        __Lparam 0000                        ___awdiv 054C  
              __size_of___wmul 0026                        __pcinit 078E                        _delay_s 0640  
                      __ramtop 0300                      ?_turnLeft 002B                        __ptext0 00AC  
                      __ptext1 069C                        __ptext2 06D2                        __ptext3 04BC  
                      __ptext4 073E                        __ptext5 0708                        __ptext6 05D0  
                      __ptext7 02D4                        __ptext8 0768                        __ptext9 054C  
                      _initPWM 073E                  ?_VerifySignal 000F           end_of_initialization 079A  
           setMotorPWM@PWMduty 0024                ??_fullSpeedBack 002F                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   ??_turnLeft 002F              __end_of_turnRight 06D2                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
               ??_VerifySignal 0011               fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028  
                    _TXSTAbits 000FAC                     main@motorL 006B                     main@motorR 0074  
               _fullSpeedAhead 05D0                 _ReceivedString 0032                 __end_of___wmul 078E  
                  _BAUDCONbits 000FAA            start_initialization 078E             VerifySignal@Signal 000F  
 __end_of_InterruptHandlerHigh 00A8         __end_of_fullSpeedAhead 0640                       ??___wmul 0013  
                  __pbssCOMRAM 0031                  __pcstackBANK0 0060                ?_fullSpeedAhead 0026  
                    __pintcode 0008           __end_of_VerifySignal 04BC                       ?___awdiv 0015  
                     ?_delay_s 0001                       ?_initPWM 0001              __size_of_turnLeft 0036  
                ??_setMotorPWM 001F                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _PIE1bits 000F9D  
                  turnRight@mL 002B                    turnRight@mR 002D                       _PIR1bits 000F9E  
            ___wmul@multiplier 000F                   setMotorPWM@m 001D           _InterruptHandlerHigh 0008  
                    _turnRight 069C            __end_of_setMotorPWM 0408                       __Hrparam 0000  
                     __Lrparam 0000          __end_of_fullSpeedBack 073E               __size_of___awdiv 0084  
                   _ANSEL0bits 000FB8               __size_of_delay_s 005C          ?_InterruptHandlerHigh 0001  
             __size_of_initPWM 002A                     ?_turnRight 002B                       __ptext10 0640  
                     __ptext11 0408                  __size_of_main 0228                  __size_of_stop 0090  
                   turnLeft@mL 002B                     turnLeft@mR 002D          __size_of_VerifySignal 00B4  
                     delay_s@i 0012                       delay_s@j 0014                       int$flags 0042  
                     _turnLeft 06D2                  VerifySignal@i 001A                     _INTCONbits 000FF2  
                  _setMotorPWM 02D4                   _VerifySignal 0408                       intlevel2 0000  
             ??_fullSpeedAhead 002A                     _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001  
                  ??_turnRight 002F  
