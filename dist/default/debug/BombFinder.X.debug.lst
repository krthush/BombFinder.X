

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 13 23:06:59 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     _CAP1BUFH	set	3945
    23  0000                     _CAP1BUFL	set	3944
    24  0000                     _CAP1CON	set	3939
    25  0000                     _LATAbits	set	3977
    26  0000                     _LATB	set	3978
    27  0000                     _LATCbits	set	3979
    28  0000                     _LATDbits	set	3980
    29  0000                     _PTCON0	set	3967
    30  0000                     _PTCON1	set	3966
    31  0000                     _PTPERH	set	3962
    32  0000                     _PTPERL	set	3963
    33  0000                     _PWMCON0	set	3951
    34  0000                     _PWMCON1	set	3950
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISBbits	set	3987
    37  0000                     _TRISC	set	3988
    38  0000                     _TRISCbits	set	3988
    39  0000                     _TRISDbits	set	3989
    40  0000                     _PDC0H	set	3960
    41  0000                     _PDC0L	set	3961
    42  0000                     _PDC1H	set	3958
    43  0000                     _PDC1L	set	3959
    44  0000                     _ANSEL0bits	set	4024
    45  0000                     _BAUDCONbits	set	4010
    46  0000                     _IPR1bits	set	3999
    47  0000                     _OSCCON	set	4051
    48  0000                     _OSCCONbits	set	4051
    49  0000                     _PIE1bits	set	3997
    50  0000                     _PIR1bits	set	3998
    51  0000                     _RCONbits	set	4048
    52  0000                     _RCREG	set	4014
    53  0000                     _RCSTAbits	set	4011
    54  0000                     _SPBRG	set	4015
    55  0000                     _SPBRGH	set	4016
    56  0000                     _T5CON	set	4023
    57  0000                     _TXREG	set	4013
    58  0000                     _TXSTAbits	set	4012
    59  0000                     _INTCONbits	set	4082
    60                           
    61                           ; #config settings
    62  0000                     
    63                           	psect	cinit
    64  0005DE                     __pcinit:
    65                           	opt stack 0
    66  0005DE                     start_initialization:
    67                           	opt stack 0
    68  0005DE                     __initialization:
    69                           	opt stack 0
    70                           
    71                           ; Clear objects allocated to COMRAM (17 bytes)
    72  0005DE  EE00  F02C         	lfsr	0,__pbssCOMRAM
    73  0005E2  0E11               	movlw	17
    74  0005E4                     clear_0:
    75  0005E4  6AEE               	clrf	postinc0,c
    76  0005E6  06E8               	decf	wreg,f,c
    77  0005E8  E1FD               	bnz	clear_0
    78  0005EA                     end_of_initialization:
    79                           	opt stack 0
    80  0005EA                     __end_of__initialization:
    81                           	opt stack 0
    82  0005EA  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    83  0005EC  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    84  0005EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
    85  0005F0  6EF8               	movwf	tblptru,c
    86  0005F2  0100               	movlb	0
    87  0005F4  EF56  F000         	goto	_main	;jump to C main() function
    88                           tblptru	equ	0xFF8
    89                           postinc0	equ	0xFEE
    90                           wreg	equ	0xFE8
    91                           
    92                           	psect	bssCOMRAM
    93  00002C                     __pbssCOMRAM:
    94                           	opt stack 0
    95  00002C                     _i:
    96                           	opt stack 0
    97  00002C                     	ds	1
    98  00002D                     _ReceivedString:
    99                           	opt stack 0
   100  00002D                     	ds	16
   101                           tblptru	equ	0xFF8
   102                           postinc0	equ	0xFEE
   103                           wreg	equ	0xFE8
   104                           
   105                           	psect	cstackBANK0
   106  000060                     __pcstackBANK0:
   107                           	opt stack 0
   108  000060                     main@Message:
   109                           	opt stack 0
   110                           
   111                           ; 10 bytes @ 0x0
   112  000060                     	ds	10
   113  00006A                     main@test:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0xA
   117  00006A                     	ds	2
   118  00006C                     main@mode:
   119                           	opt stack 0
   120                           
   121                           ; 1 bytes @ 0xC
   122  00006C                     	ds	1
   123  00006D                     main@i:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0xD
   127  00006D                     	ds	1
   128  00006E                     main@motorL:
   129                           	opt stack 0
   130                           
   131                           ; 9 bytes @ 0xE
   132  00006E                     	ds	9
   133  000077                     main@motorR:
   134                           	opt stack 0
   135                           
   136                           ; 9 bytes @ 0x17
   137  000077                     	ds	9
   138                           tblptru	equ	0xFF8
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           
   142                           	psect	cstackCOMRAM
   143  000001                     __pcstackCOMRAM:
   144                           	opt stack 0
   145  000001                     ??_InterruptHandlerHigh:
   146  000001                     
   147                           ; 0 bytes @ 0x0
   148  000001                     	ds	14
   149  00000F                     ??_delay_s:
   150  00000F                     ?___wmul:
   151                           	opt stack 0
   152  00000F                     _initRFID$1267:
   153                           	opt stack 0
   154  00000F                     VerifySignal@Signal:
   155                           	opt stack 0
   156  00000F                     ___wmul@multiplier:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0xE
   160  00000F                     	ds	1
   161  000010                     delay_s@seconds:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0xF
   165  000010                     	ds	1
   166  000011                     ??_VerifySignal:
   167  000011                     delay_s@i:
   168                           	opt stack 0
   169  000011                     ___wmul@multiplicand:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x10
   173  000011                     	ds	2
   174  000013                     ___wmul@product:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x12
   178  000013                     	ds	2
   179  000015                     ?___awdiv:
   180                           	opt stack 0
   181  000015                     ___awdiv@dividend:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x14
   185  000015                     	ds	2
   186  000017                     VerifySignal@checksum:
   187                           	opt stack 0
   188  000017                     ___awdiv@divisor:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x16
   192  000017                     	ds	1
   193  000018                     VerifySignal@hexByte:
   194                           	opt stack 0
   195                           
   196                           ; 2 bytes @ 0x17
   197  000018                     	ds	1
   198  000019                     ___awdiv@counter:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x18
   202  000019                     	ds	1
   203  00001A                     VerifySignal@i:
   204                           	opt stack 0
   205  00001A                     ___awdiv@sign:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x19
   209  00001A                     	ds	1
   210  00001B                     ___awdiv@quotient:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x1A
   214  00001B                     	ds	2
   215  00001D                     setMotorPWM@m:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x1C
   219  00001D                     	ds	2
   220  00001F                     ??_setMotorPWM:
   221                           
   222                           ; 0 bytes @ 0x1E
   223  00001F                     	ds	5
   224  000024                     setMotorPWM@PWMduty:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x23
   228  000024                     	ds	2
   229  000026                     stop@mL:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x25
   233  000026                     	ds	2
   234  000028                     stop@mR:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x27
   238  000028                     	ds	2
   239  00002A                     ??_main:
   240                           
   241                           ; 0 bytes @ 0x29
   242  00002A                     	ds	2
   243                           tblptru	equ	0xFF8
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 29 in file "main.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;  PathTaken     100    0        unsigned char [100]
   257 ;;  Message        10    0[BANK0 ] unsigned char [10]
   258 ;;  motorR          9   23[BANK0 ] struct DC_motor
   259 ;;  motorL          9   14[BANK0 ] struct DC_motor
   260 ;;  SignalStreng    3    0        unsigned char [3]
   261 ;;  test            2   10[BANK0 ] unsigned int 
   262 ;;  i               1   13[BANK0 ] unsigned char 
   263 ;;  mode            1   12[BANK0 ] unsigned char 
   264 ;; Return value:  Size  Location     Type
   265 ;;		None               void
   266 ;; Registers used:
   267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   268 ;; Tracked objects:
   269 ;;		On entry : 0/0
   270 ;;		On exit  : 0/0
   271 ;;		Unchanged: 0/0
   272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   273 ;;      Params:         0       0       0       0
   274 ;;      Locals:         0      32       0       0
   275 ;;      Temps:          2       0       0       0
   276 ;;      Totals:         2      32       0       0
   277 ;;Total ram usage:       34 bytes
   278 ;; Hardware stack levels required when called:    4
   279 ;; This function calls:
   280 ;;		_VerifySignal
   281 ;;		_delay_s
   282 ;;		_initMotorPWM
   283 ;;		_initRFID
   284 ;;		_stop
   285 ;; This function is called by:
   286 ;;		Startup code after reset
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290                           	psect	text0
   291  0000AC                     __ptext0:
   292                           	opt stack 0
   293  0000AC                     _main:
   294                           	opt stack 27
   295                           
   296                           ;main.c: 32: unsigned char Message[10];
   297                           ;main.c: 33: unsigned char i=0;
   298                           
   299                           ;incstack = 0
   300  0000AC  0E00               	movlw	0
   301  0000AE  0100               	movlb	0	; () banked
   302  0000B0  6F6D               	movwf	main@i& (0+255),b
   303                           
   304                           ;main.c: 34: unsigned char mode=0;
   305  0000B2  0E00               	movlw	0
   306  0000B4  0100               	movlb	0	; () banked
   307  0000B6  6F6C               	movwf	main@mode& (0+255),b
   308                           
   309                           ;main.c: 35: unsigned char SignalStrength[3];
   310                           ;main.c: 36: char PathTaken[100];
   311                           ;main.c: 37: unsigned int test=0;
   312  0000B8  0E00               	movlw	0
   313  0000BA  0100               	movlb	0	; () banked
   314  0000BC  6F6B               	movwf	(main@test+1)& (0+255),b
   315  0000BE  0E00               	movlw	0
   316  0000C0  6F6A               	movwf	main@test& (0+255),b
   317                           
   318                           ; BSR set to: 0
   319                           ;main.c: 40: INTCONbits.GIEH = 1;
   320  0000C2  8EF2               	bsf	intcon,7,c	;volatile
   321                           
   322                           ; BSR set to: 0
   323                           ;main.c: 41: RCONbits.IPEN = 1;
   324  0000C4  8ED0               	bsf	4048,7,c	;volatile
   325                           
   326                           ; BSR set to: 0
   327                           ;main.c: 42: INTCONbits.GIEL = 1;
   328  0000C6  8CF2               	bsf	intcon,6,c	;volatile
   329                           
   330                           ; BSR set to: 0
   331                           ;main.c: 43: INTCONbits.INT0IE = 1;
   332  0000C8  88F2               	bsf	intcon,4,c	;volatile
   333                           
   334                           ; BSR set to: 0
   335                           ;main.c: 44: INTCONbits.PEIE = 1;
   336  0000CA  8CF2               	bsf	intcon,6,c	;volatile
   337                           
   338                           ; BSR set to: 0
   339                           ;main.c: 46: IPR1bits.RCIP=1;
   340  0000CC  8A9F               	bsf	3999,5,c	;volatile
   341                           
   342                           ; BSR set to: 0
   343                           ;main.c: 47: PIE1bits.RCIE=1;
   344  0000CE  8A9D               	bsf	3997,5,c	;volatile
   345                           
   346                           ;main.c: 50: struct DC_motor motorL, motorR;
   347                           ;main.c: 51: motorL.power=0;
   348  0000D0  0E00               	movlw	0
   349  0000D2  0100               	movlb	0	; () banked
   350  0000D4  6F6E               	movwf	main@motorL& (0+255),b
   351                           
   352                           ;main.c: 52: motorL.direction=1;
   353  0000D6  0E01               	movlw	1
   354  0000D8  0100               	movlb	0	; () banked
   355  0000DA  6F6F               	movwf	(main@motorL+1)& (0+255),b
   356                           
   357                           ; BSR set to: 0
   358                           ;main.c: 53: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   359  0000DC  0E79               	movlw	121
   360  0000DE  0100               	movlb	0	; () banked
   361  0000E0  6F70               	movwf	(main@motorL+2)& (0+255),b
   362  0000E2  0E0F               	movlw	15
   363  0000E4  0100               	movlb	0	; () banked
   364  0000E6  6F71               	movwf	(main@motorL+3)& (0+255),b
   365                           
   366                           ; BSR set to: 0
   367                           ;main.c: 54: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   368  0000E8  0E78               	movlw	120
   369  0000EA  0100               	movlb	0	; () banked
   370  0000EC  6F72               	movwf	(main@motorL+4)& (0+255),b
   371  0000EE  0E0F               	movlw	15
   372  0000F0  0100               	movlb	0	; () banked
   373  0000F2  6F73               	movwf	(main@motorL+5)& (0+255),b
   374                           
   375                           ;main.c: 55: motorL.dir_pin=0;
   376  0000F4  0E00               	movlw	0
   377  0000F6  0100               	movlb	0	; () banked
   378  0000F8  6F74               	movwf	(main@motorL+6)& (0+255),b
   379                           
   380                           ;main.c: 56: motorL.PWMperiod=199;
   381  0000FA  0E00               	movlw	0
   382  0000FC  0100               	movlb	0	; () banked
   383  0000FE  6F76               	movwf	(main@motorL+8)& (0+255),b
   384  000100  0EC7               	movlw	199
   385  000102  6F75               	movwf	(main@motorL+7)& (0+255),b
   386                           
   387                           ;main.c: 58: motorR.power=0;
   388  000104  0E00               	movlw	0
   389  000106  0100               	movlb	0	; () banked
   390  000108  6F77               	movwf	main@motorR& (0+255),b
   391                           
   392                           ;main.c: 59: motorR.direction=1;
   393  00010A  0E01               	movlw	1
   394  00010C  0100               	movlb	0	; () banked
   395  00010E  6F78               	movwf	(main@motorR+1)& (0+255),b
   396                           
   397                           ; BSR set to: 0
   398                           ;main.c: 60: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   399  000110  0E77               	movlw	119
   400  000112  0100               	movlb	0	; () banked
   401  000114  6F79               	movwf	(main@motorR+2)& (0+255),b
   402  000116  0E0F               	movlw	15
   403  000118  0100               	movlb	0	; () banked
   404  00011A  6F7A               	movwf	(main@motorR+3)& (0+255),b
   405                           
   406                           ; BSR set to: 0
   407                           ;main.c: 61: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   408  00011C  0E76               	movlw	118
   409  00011E  0100               	movlb	0	; () banked
   410  000120  6F7B               	movwf	(main@motorR+4)& (0+255),b
   411  000122  0E0F               	movlw	15
   412  000124  0100               	movlb	0	; () banked
   413  000126  6F7C               	movwf	(main@motorR+5)& (0+255),b
   414                           
   415                           ;main.c: 62: motorR.dir_pin=2;
   416  000128  0E02               	movlw	2
   417  00012A  0100               	movlb	0	; () banked
   418  00012C  6F7D               	movwf	(main@motorR+6)& (0+255),b
   419                           
   420                           ;main.c: 63: motorR.PWMperiod=199;
   421  00012E  0E00               	movlw	0
   422  000130  0100               	movlb	0	; () banked
   423  000132  6F7F               	movwf	(main@motorR+8)& (0+255),b
   424  000134  0EC7               	movlw	199
   425  000136  6F7E               	movwf	(main@motorR+7)& (0+255),b
   426                           
   427                           ;main.c: 65: OSCCON = 0x72;
   428  000138  0E72               	movlw	114
   429  00013A  6ED3               	movwf	4051,c	;volatile
   430  00013C                     l47:
   431  00013C  B4D3               	btfsc	4051,2,c	;volatile
   432  00013E  D06C               	goto	l1776
   433  000140  D7FD               	goto	l47
   434  000142                     l1738:
   435                           
   436                           ;main.c: 73: initMotorPWM();
   437  000142  ECB3  F002         	call	_initMotorPWM	;wreg free
   438                           
   439                           ;main.c: 74: initRFID();
   440  000146  ECDF  F002         	call	_initRFID	;wreg free
   441                           
   442                           ;main.c: 76: mode = 1;
   443  00014A  0E01               	movlw	1
   444  00014C  0100               	movlb	0	; () banked
   445  00014E  6F6C               	movwf	main@mode& (0+255),b
   446                           
   447                           ;main.c: 77: break;
   448  000150  D063               	goto	l1776
   449  000152                     l1742:
   450                           
   451                           ; BSR set to: 0
   452                           ;main.c: 84: delay_s(1);
   453  000152  0E01               	movlw	1
   454  000154  EC97  F002         	call	_delay_s
   455                           
   456                           ;main.c: 85: stop(&motorL, &motorR);
   457  000158  0E6E               	movlw	low main@motorL
   458  00015A  6E26               	movwf	stop@mL,c
   459  00015C  0E00               	movlw	high main@motorL
   460  00015E  6E27               	movwf	stop@mL+1,c
   461  000160  0E77               	movlw	low main@motorR
   462  000162  6E28               	movwf	stop@mR,c
   463  000164  0E00               	movlw	high main@motorR
   464  000166  6E29               	movwf	stop@mR+1,c
   465  000168  EC0D  F002         	call	_stop	;wreg free
   466                           
   467                           ;main.c: 88: break;
   468  00016C  D055               	goto	l1776
   469  00016E                     l1746:
   470                           
   471                           ;main.c: 93: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   472  00016E  0E03               	movlw	3
   473  000170  183C               	xorwf	_ReceivedString+15,w,c	;volatile
   474  000172  A4D8               	btfss	status,2,c
   475  000174  D002               	goto	u990
   476  000176  0E01               	movlw	1
   477  000178  D001               	goto	u992
   478  00017A                     u990:
   479  00017A  0E00               	movlw	0
   480  00017C                     u992:
   481  00017C  6E2A               	movwf	??_main& (0+255),c
   482  00017E  0E02               	movlw	2
   483  000180  182D               	xorwf	_ReceivedString,w,c	;volatile
   484  000182  A4D8               	btfss	status,2,c
   485  000184  D002               	goto	u1000
   486  000186  0E01               	movlw	1
   487  000188  D001               	goto	u1002
   488  00018A                     u1000:
   489  00018A  0E00               	movlw	0
   490  00018C                     u1002:
   491  00018C  142A               	andwf	??_main,w,c
   492  00018E  A0E8               	btfss	wreg,0,c
   493  000190  D043               	goto	l1776
   494                           
   495                           ;main.c: 94: if (VerifySignal(ReceivedString)){
   496  000192  0E2D               	movlw	low _ReceivedString
   497  000194  6E0F               	movwf	VerifySignal@Signal,c
   498  000196  0E00               	movlw	high _ReceivedString
   499  000198  6E10               	movwf	VerifySignal@Signal+1,c
   500  00019A  ECB3  F001         	call	_VerifySignal	;wreg free
   501  00019E  0900               	iorlw	0
   502  0001A0  B4D8               	btfsc	status,2,c
   503  0001A2  D03A               	goto	l1776
   504                           
   505                           ;main.c: 96: for (i=0; i<10; i++){
   506  0001A4  0E00               	movlw	0
   507  0001A6  0100               	movlb	0	; () banked
   508  0001A8  6F6D               	movwf	main@i& (0+255),b
   509  0001AA                     l1752:
   510                           
   511                           ; BSR set to: 0
   512  0001AA  0E09               	movlw	9
   513  0001AC  0100               	movlb	0	; () banked
   514  0001AE  656D               	cpfsgt	main@i& (0+255),b
   515  0001B0  D001               	goto	l1756
   516  0001B2  D01C               	goto	l1762
   517  0001B4                     l1756:
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 97: Message[i] = ReceivedString[i+1];
   521  0001B4  0100               	movlb	0	; () banked
   522  0001B6  516D               	movf	main@i& (0+255),w,b
   523  0001B8  6E2A               	movwf	??_main& (0+255),c
   524  0001BA  6A2B               	clrf	(??_main+1)& (0+255),c
   525  0001BC  0E01               	movlw	1
   526  0001BE  262A               	addwf	??_main,f,c
   527  0001C0  0E00               	movlw	0
   528  0001C2  222B               	addwfc	??_main+1,f,c
   529  0001C4  0E2D               	movlw	low _ReceivedString
   530  0001C6  242A               	addwf	??_main,w,c
   531  0001C8  6ED9               	movwf	fsr2l,c
   532  0001CA  0E00               	movlw	high _ReceivedString
   533  0001CC  202B               	addwfc	??_main+1,w,c
   534  0001CE  6EDA               	movwf	fsr2h,c
   535  0001D0  0100               	movlb	0	; () banked
   536  0001D2  516D               	movf	main@i& (0+255),w,b
   537  0001D4  0D01               	mullw	1
   538  0001D6  0E60               	movlw	low main@Message
   539  0001D8  24F3               	addwf	prodl,w,c
   540  0001DA  6EE1               	movwf	fsr1l,c
   541  0001DC  0E00               	movlw	high main@Message
   542  0001DE  20F4               	addwfc	prodh,w,c
   543  0001E0  6EE2               	movwf	fsr1h,c
   544  0001E2  CFDF FFE7          	movff	indf2,indf1
   545                           
   546                           ; BSR set to: 0
   547  0001E6  0100               	movlb	0	; () banked
   548  0001E8  2B6D               	incf	main@i& (0+255),f,b
   549  0001EA  D7DF               	goto	l1752
   550  0001EC                     l1762:
   551                           
   552                           ; BSR set to: 0
   553                           ;main.c: 98: }
   554                           ;main.c: 100: for (i=0; i<16; i++) {
   555  0001EC  0E00               	movlw	0
   556  0001EE  0100               	movlb	0	; () banked
   557  0001F0  6F6D               	movwf	main@i& (0+255),b
   558  0001F2                     l1764:
   559                           
   560                           ; BSR set to: 0
   561  0001F2  0E0F               	movlw	15
   562  0001F4  0100               	movlb	0	; () banked
   563  0001F6  656D               	cpfsgt	main@i& (0+255),b
   564  0001F8  D001               	goto	l1768
   565  0001FA  D00E               	goto	l1776
   566  0001FC                     l1768:
   567                           
   568                           ; BSR set to: 0
   569                           ;main.c: 101: ReceivedString[i]=0;
   570  0001FC  0100               	movlb	0	; () banked
   571  0001FE  516D               	movf	main@i& (0+255),w,b
   572  000200  0D01               	mullw	1
   573  000202  0E2D               	movlw	low _ReceivedString
   574  000204  24F3               	addwf	prodl,w,c
   575  000206  6ED9               	movwf	fsr2l,c
   576  000208  0E00               	movlw	high _ReceivedString
   577  00020A  20F4               	addwfc	prodh,w,c
   578  00020C  6EDA               	movwf	fsr2h,c
   579  00020E  0E00               	movlw	0
   580  000210  6EDF               	movwf	indf2,c
   581                           
   582                           ; BSR set to: 0
   583  000212  0100               	movlb	0	; () banked
   584  000214  2B6D               	incf	main@i& (0+255),f,b
   585  000216  D7ED               	goto	l1764
   586  000218                     l1776:
   587  000218  0100               	movlb	0	; () banked
   588  00021A  516C               	movf	main@mode& (0+255),w,b
   589                           
   590                           ; Switch size 1, requested type "space"
   591                           ; Number of cases is 4, Range of values is 0 to 3
   592                           ; switch strategies available:
   593                           ; Name         Instructions Cycles
   594                           ; simple_byte           13     7 (average)
   595                           ;	Chosen strategy is simple_byte
   596  00021C  0A00               	xorlw	0	; case 0
   597  00021E  B4D8               	btfsc	status,2,c
   598  000220  D790               	goto	l1738
   599  000222  0A01               	xorlw	1	; case 1
   600  000224  B4D8               	btfsc	status,2,c
   601  000226  D795               	goto	l1742
   602  000228  0A03               	xorlw	3	; case 2
   603  00022A  B4D8               	btfsc	status,2,c
   604  00022C  D7A0               	goto	l1746
   605  00022E  0A01               	xorlw	1	; case 3
   606                           
   607                           ; BSR set to: 0
   608                           
   609                           ; BSR set to: 0
   610  000230  D7F3               	goto	l1776
   611  000232                     __end_of_main:
   612                           	opt stack 0
   613                           tblptru	equ	0xFF8
   614                           prodh	equ	0xFF4
   615                           prodl	equ	0xFF3
   616                           intcon	equ	0xFF2
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           indf1	equ	0xFE7
   620                           fsr1h	equ	0xFE2
   621                           fsr1l	equ	0xFE1
   622                           indf2	equ	0xFDF
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8
   626                           
   627 ;; *************** function _stop *****************
   628 ;; Defined at:
   629 ;;		line 67 in file "dc_motor.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  mL              2   37[COMRAM] PTR struct DC_motor
   632 ;;		 -> main@motorL(9), 
   633 ;;  mR              2   39[COMRAM] PTR struct DC_motor
   634 ;;		 -> main@motorR(9), 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;		None
   637 ;; Return value:  Size  Location     Type
   638 ;;		None               void
   639 ;; Registers used:
   640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   646 ;;      Params:         4       0       0       0
   647 ;;      Locals:         0       0       0       0
   648 ;;      Temps:          0       0       0       0
   649 ;;      Totals:         4       0       0       0
   650 ;;Total ram usage:        4 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    3
   653 ;; This function calls:
   654 ;;		_setMotorPWM
   655 ;; This function is called by:
   656 ;;		_main
   657 ;;		_ScanIR
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text1
   662  00041A                     __ptext1:
   663                           	opt stack 0
   664  00041A                     _stop:
   665                           	opt stack 27
   666                           
   667                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
   668                           
   669                           ; BSR set to: 0
   670                           ;incstack = 0
   671  00041A  D028               	goto	l1682
   672  00041C                     l1668:
   673                           
   674                           ;dc_motor.c: 71: if(mL->power>0){
   675  00041C  C026  FFD9         	movff	stop@mL,fsr2l
   676  000420  C027  FFDA         	movff	stop@mL+1,fsr2h
   677  000424  50DF               	movf	indf2,w,c
   678  000426  B4D8               	btfsc	status,2,c
   679  000428  D005               	goto	l1672
   680                           
   681                           ;dc_motor.c: 72: mL->power--;
   682  00042A  C026  FFD9         	movff	stop@mL,fsr2l
   683  00042E  C027  FFDA         	movff	stop@mL+1,fsr2h
   684  000432  06DF               	decf	indf2,f,c
   685  000434                     l1672:
   686                           
   687                           ;dc_motor.c: 73: }
   688                           ;dc_motor.c: 74: if(mR->power>0){
   689  000434  C028  FFD9         	movff	stop@mR,fsr2l
   690  000438  C029  FFDA         	movff	stop@mR+1,fsr2h
   691  00043C  50DF               	movf	indf2,w,c
   692  00043E  B4D8               	btfsc	status,2,c
   693  000440  D005               	goto	l1676
   694                           
   695                           ;dc_motor.c: 75: mR->power--;
   696  000442  C028  FFD9         	movff	stop@mR,fsr2l
   697  000446  C029  FFDA         	movff	stop@mR+1,fsr2h
   698  00044A  06DF               	decf	indf2,f,c
   699  00044C                     l1676:
   700                           
   701                           ;dc_motor.c: 76: }
   702                           ;dc_motor.c: 77: setMotorPWM(mL);
   703  00044C  C026  F01D         	movff	stop@mL,setMotorPWM@m
   704  000450  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
   705  000454  EC19  F001         	call	_setMotorPWM	;wreg free
   706                           
   707                           ;dc_motor.c: 78: setMotorPWM(mR);
   708  000458  C028  F01D         	movff	stop@mR,setMotorPWM@m
   709  00045C  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
   710  000460  EC19  F001         	call	_setMotorPWM	;wreg free
   711                           
   712                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
   713  000464  0E21               	movlw	33
   714  000466                     u1097:
   715  000466  2EE8               	decfsz	wreg,f,c
   716  000468  D7FE               	goto	u1097
   717  00046A  F000               	nop	
   718  00046C                     l1682:
   719  00046C  C026  FFD9         	movff	stop@mL,fsr2l
   720  000470  C027  FFDA         	movff	stop@mL+1,fsr2h
   721  000474  50DF               	movf	indf2,w,c
   722  000476  A4D8               	btfss	status,2,c
   723  000478  D7D1               	goto	l1668
   724  00047A  C028  FFD9         	movff	stop@mR,fsr2l
   725  00047E  C029  FFDA         	movff	stop@mR+1,fsr2h
   726  000482  50DF               	movf	indf2,w,c
   727  000484  A4D8               	btfss	status,2,c
   728  000486  D7CA               	goto	l1668
   729                           
   730                           ;dc_motor.c: 80: }
   731                           ;dc_motor.c: 81: mL->direction=1;
   732  000488  EE20 F001          	lfsr	2,1
   733  00048C  5026               	movf	stop@mL,w,c
   734  00048E  26D9               	addwf	fsr2l,f,c
   735  000490  5027               	movf	stop@mL+1,w,c
   736  000492  22DA               	addwfc	fsr2h,f,c
   737  000494  0E01               	movlw	1
   738  000496  6EDF               	movwf	indf2,c
   739                           
   740                           ;dc_motor.c: 82: mR->direction=1;
   741  000498  EE20 F001          	lfsr	2,1
   742  00049C  5028               	movf	stop@mR,w,c
   743  00049E  26D9               	addwf	fsr2l,f,c
   744  0004A0  5029               	movf	stop@mR+1,w,c
   745  0004A2  22DA               	addwfc	fsr2h,f,c
   746  0004A4  0E01               	movlw	1
   747  0004A6  6EDF               	movwf	indf2,c
   748  0004A8  0012               	return		;funcret
   749  0004AA                     __end_of_stop:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           prodh	equ	0xFF4
   753                           prodl	equ	0xFF3
   754                           intcon	equ	0xFF2
   755                           postinc0	equ	0xFEE
   756                           wreg	equ	0xFE8
   757                           indf1	equ	0xFE7
   758                           fsr1h	equ	0xFE2
   759                           fsr1l	equ	0xFE1
   760                           indf2	equ	0xFDF
   761                           fsr2h	equ	0xFDA
   762                           fsr2l	equ	0xFD9
   763                           status	equ	0xFD8
   764                           
   765 ;; *************** function _setMotorPWM *****************
   766 ;; Defined at:
   767 ;;		line 26 in file "dc_motor.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  m               2   28[COMRAM] PTR struct DC_motor
   770 ;;		 -> main@motorR(9), main@motorL(9), 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  PWMduty         2   35[COMRAM] int 
   773 ;; Return value:  Size  Location     Type
   774 ;;		None               void
   775 ;; Registers used:
   776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   782 ;;      Params:         2       0       0       0
   783 ;;      Locals:         2       0       0       0
   784 ;;      Temps:          5       0       0       0
   785 ;;      Totals:         9       0       0       0
   786 ;;Total ram usage:        9 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    2
   789 ;; This function calls:
   790 ;;		___awdiv
   791 ;;		___wmul
   792 ;; This function is called by:
   793 ;;		_stop
   794 ;;		_setMotorFullSpeed
   795 ;;		_stopMotor
   796 ;;		_fullSpeedAhead
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text2
   801  000232                     __ptext2:
   802                           	opt stack 0
   803  000232                     _setMotorPWM:
   804                           	opt stack 27
   805                           
   806                           ;dc_motor.c: 28: int PWMduty;
   807                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
   808                           
   809                           ;incstack = 0
   810  000232  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
   811  000236  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
   812  00023A  50DF               	movf	indf2,w,c
   813  00023C  6E1F               	movwf	??_setMotorPWM& (0+255),c
   814  00023E  501F               	movf	??_setMotorPWM,w,c
   815  000240  6E0F               	movwf	___wmul@multiplier,c
   816  000242  6A10               	clrf	___wmul@multiplier+1,c
   817  000244  EE20 F007          	lfsr	2,7
   818  000248  501D               	movf	setMotorPWM@m,w,c
   819  00024A  26D9               	addwf	fsr2l,f,c
   820  00024C  501E               	movf	setMotorPWM@m+1,w,c
   821  00024E  22DA               	addwfc	fsr2h,f,c
   822  000250  CFDE F011          	movff	postinc2,___wmul@multiplicand
   823  000254  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
   824  000258  ECCC  F002         	call	___wmul	;wreg free
   825  00025C  C00F  F015         	movff	?___wmul,___awdiv@dividend
   826  000260  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
   827  000264  0E00               	movlw	0
   828  000266  6E18               	movwf	___awdiv@divisor+1,c
   829  000268  0E64               	movlw	100
   830  00026A  6E17               	movwf	___awdiv@divisor,c
   831  00026C  EC55  F002         	call	___awdiv	;wreg free
   832  000270  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
   833  000274  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   834                           
   835                           ;dc_motor.c: 32: if (m->direction)
   836  000278  EE20 F001          	lfsr	2,1
   837  00027C  501D               	movf	setMotorPWM@m,w,c
   838  00027E  26D9               	addwf	fsr2l,f,c
   839  000280  501E               	movf	setMotorPWM@m+1,w,c
   840  000282  22DA               	addwfc	fsr2h,f,c
   841  000284  50DF               	movf	indf2,w,c
   842  000286  B4D8               	btfsc	status,2,c
   843  000288  D02C               	goto	l1612
   844                           
   845                           ;dc_motor.c: 33: {
   846                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
   847  00028A  EE20 F006          	lfsr	2,6
   848  00028E  501D               	movf	setMotorPWM@m,w,c
   849  000290  26D9               	addwf	fsr2l,f,c
   850  000292  501E               	movf	setMotorPWM@m+1,w,c
   851  000294  22DA               	addwfc	fsr2h,f,c
   852  000296  50DF               	movf	indf2,w,c
   853  000298  6E1F               	movwf	??_setMotorPWM& (0+255),c
   854  00029A  0E01               	movlw	1
   855  00029C  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
   856  00029E  2A1F               	incf	??_setMotorPWM,f,c
   857  0002A0  D002               	goto	u864
   858  0002A2                     u865:
   859  0002A2  90D8               	bcf	status,0,c
   860  0002A4  3620               	rlcf	??_setMotorPWM+1,f,c
   861  0002A6                     u864:
   862  0002A6  2E1F               	decfsz	??_setMotorPWM,f,c
   863  0002A8  D7FC               	goto	u865
   864  0002AA  5020               	movf	??_setMotorPWM+1,w,c
   865  0002AC  108A               	iorwf	3978,w,c	;volatile
   866  0002AE  6E8A               	movwf	3978,c	;volatile
   867                           
   868                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
   869  0002B0  EE20 F007          	lfsr	2,7
   870  0002B4  501D               	movf	setMotorPWM@m,w,c
   871  0002B6  26D9               	addwf	fsr2l,f,c
   872  0002B8  501E               	movf	setMotorPWM@m+1,w,c
   873  0002BA  22DA               	addwfc	fsr2h,f,c
   874  0002BC  CFDE F01F          	movff	postinc2,??_setMotorPWM
   875  0002C0  CFDD F020          	movff	postdec2,??_setMotorPWM+1
   876  0002C4  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
   877  0002C8  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
   878  0002CC  1E21               	comf	??_setMotorPWM+2,f,c
   879  0002CE  1E22               	comf	??_setMotorPWM+3,f,c
   880  0002D0  4A21               	infsnz	??_setMotorPWM+2,f,c
   881  0002D2  2A22               	incf	??_setMotorPWM+3,f,c
   882  0002D4  501F               	movf	??_setMotorPWM,w,c
   883  0002D6  2421               	addwf	??_setMotorPWM+2,w,c
   884  0002D8  6E24               	movwf	setMotorPWM@PWMduty,c
   885  0002DA  5020               	movf	??_setMotorPWM+1,w,c
   886  0002DC  2022               	addwfc	??_setMotorPWM+3,w,c
   887  0002DE  6E25               	movwf	setMotorPWM@PWMduty+1,c
   888                           
   889                           ;dc_motor.c: 36: }
   890  0002E0  D014               	goto	l100
   891  0002E2                     l1612:
   892                           
   893                           ;dc_motor.c: 37: else
   894                           ;dc_motor.c: 38: {
   895                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
   896  0002E2  EE20 F006          	lfsr	2,6
   897  0002E6  501D               	movf	setMotorPWM@m,w,c
   898  0002E8  26D9               	addwf	fsr2l,f,c
   899  0002EA  501E               	movf	setMotorPWM@m+1,w,c
   900  0002EC  22DA               	addwfc	fsr2h,f,c
   901  0002EE  50DF               	movf	indf2,w,c
   902  0002F0  6E1F               	movwf	??_setMotorPWM& (0+255),c
   903  0002F2  0E01               	movlw	1
   904  0002F4  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
   905  0002F6  2A1F               	incf	??_setMotorPWM,f,c
   906  0002F8  D002               	goto	u874
   907  0002FA                     u875:
   908  0002FA  90D8               	bcf	status,0,c
   909  0002FC  3620               	rlcf	??_setMotorPWM+1,f,c
   910  0002FE                     u874:
   911  0002FE  2E1F               	decfsz	??_setMotorPWM,f,c
   912  000300  D7FC               	goto	u875
   913  000302  5020               	movf	??_setMotorPWM+1,w,c
   914  000304  0AFF               	xorlw	255
   915  000306  148A               	andwf	3978,w,c	;volatile
   916  000308  6E8A               	movwf	3978,c	;volatile
   917  00030A                     l100:
   918                           
   919                           ;dc_motor.c: 40: }
   920                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
   921  00030A  EE20 F002          	lfsr	2,2
   922  00030E  501D               	movf	setMotorPWM@m,w,c
   923  000310  26D9               	addwf	fsr2l,f,c
   924  000312  501E               	movf	setMotorPWM@m+1,w,c
   925  000314  22DA               	addwfc	fsr2h,f,c
   926  000316  CFDE F01F          	movff	postinc2,??_setMotorPWM
   927  00031A  CFDD F020          	movff	postdec2,??_setMotorPWM+1
   928  00031E  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
   929  000322  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
   930  000326  4424               	rlncf	setMotorPWM@PWMduty,w,c
   931  000328  46E8               	rlncf	wreg,f,c
   932  00032A  0BFC               	andlw	252
   933  00032C  6EDF               	movwf	indf2,c
   934                           
   935                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
   936  00032E  EE20 F004          	lfsr	2,4
   937  000332  501D               	movf	setMotorPWM@m,w,c
   938  000334  26D9               	addwf	fsr2l,f,c
   939  000336  501E               	movf	setMotorPWM@m+1,w,c
   940  000338  22DA               	addwfc	fsr2h,f,c
   941  00033A  CFDE F01F          	movff	postinc2,??_setMotorPWM
   942  00033E  CFDD F020          	movff	postdec2,??_setMotorPWM+1
   943  000342  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
   944  000346  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
   945  00034A  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
   946  00034E  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
   947  000352  0E06               	movlw	6
   948  000354  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
   949  000356                     u885:
   950  000356  3422               	rlcf	??_setMotorPWM+3,w,c
   951  000358  3222               	rrcf	??_setMotorPWM+3,f,c
   952  00035A  3221               	rrcf	??_setMotorPWM+2,f,c
   953  00035C  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
   954  00035E  D7FB               	goto	u885
   955  000360  5021               	movf	??_setMotorPWM+2,w,c
   956  000362  6EDF               	movwf	indf2,c
   957  000364  0012               	return		;funcret
   958  000366                     __end_of_setMotorPWM:
   959                           	opt stack 0
   960                           tblptru	equ	0xFF8
   961                           prodh	equ	0xFF4
   962                           prodl	equ	0xFF3
   963                           intcon	equ	0xFF2
   964                           postinc0	equ	0xFEE
   965                           wreg	equ	0xFE8
   966                           indf1	equ	0xFE7
   967                           fsr1h	equ	0xFE2
   968                           fsr1l	equ	0xFE1
   969                           indf2	equ	0xFDF
   970                           postinc2	equ	0xFDE
   971                           postdec2	equ	0xFDD
   972                           fsr2h	equ	0xFDA
   973                           fsr2l	equ	0xFD9
   974                           status	equ	0xFD8
   975                           
   976 ;; *************** function ___wmul *****************
   977 ;; Defined at:
   978 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  multiplier      2   14[COMRAM] unsigned int 
   981 ;;  multiplicand    2   16[COMRAM] unsigned int 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  product         2   18[COMRAM] unsigned int 
   984 ;; Return value:  Size  Location     Type
   985 ;;                  2   14[COMRAM] unsigned int 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, prodl, prodh
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   993 ;;      Params:         4       0       0       0
   994 ;;      Locals:         2       0       0       0
   995 ;;      Temps:          0       0       0       0
   996 ;;      Totals:         6       0       0       0
   997 ;;Total ram usage:        6 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    1
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_setMotorPWM
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text3
  1008  000598                     __ptext3:
  1009                           	opt stack 0
  1010  000598                     ___wmul:
  1011                           	opt stack 27
  1012                           
  1013                           ;incstack = 0
  1014  000598  500F               	movf	___wmul@multiplier,w,c
  1015  00059A  0211               	mulwf	___wmul@multiplicand,c
  1016  00059C  CFF3 F013          	movff	prodl,___wmul@product
  1017  0005A0  CFF4 F014          	movff	prodh,___wmul@product+1
  1018  0005A4  500F               	movf	___wmul@multiplier,w,c
  1019  0005A6  0212               	mulwf	___wmul@multiplicand+1,c
  1020  0005A8  50F3               	movf	prodl,w,c
  1021  0005AA  2614               	addwf	___wmul@product+1,f,c
  1022  0005AC  5010               	movf	___wmul@multiplier+1,w,c
  1023  0005AE  0211               	mulwf	___wmul@multiplicand,c
  1024  0005B0  50F3               	movf	prodl,w,c
  1025  0005B2  2614               	addwf	___wmul@product+1,f,c
  1026  0005B4  C013  F00F         	movff	___wmul@product,?___wmul
  1027  0005B8  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1028  0005BC  0012               	return	
  1029  0005BE                     __end_of___wmul:
  1030                           	opt stack 0
  1031                           tblptru	equ	0xFF8
  1032                           prodh	equ	0xFF4
  1033                           prodl	equ	0xFF3
  1034                           intcon	equ	0xFF2
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           indf1	equ	0xFE7
  1038                           fsr1h	equ	0xFE2
  1039                           fsr1l	equ	0xFE1
  1040                           indf2	equ	0xFDF
  1041                           postinc2	equ	0xFDE
  1042                           postdec2	equ	0xFDD
  1043                           fsr2h	equ	0xFDA
  1044                           fsr2l	equ	0xFD9
  1045                           status	equ	0xFD8
  1046                           
  1047 ;; *************** function ___awdiv *****************
  1048 ;; Defined at:
  1049 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  dividend        2   20[COMRAM] int 
  1052 ;;  divisor         2   22[COMRAM] int 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  quotient        2   26[COMRAM] int 
  1055 ;;  sign            1   25[COMRAM] unsigned char 
  1056 ;;  counter         1   24[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  2   20[COMRAM] int 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1066 ;;      Params:         4       0       0       0
  1067 ;;      Locals:         4       0       0       0
  1068 ;;      Temps:          0       0       0       0
  1069 ;;      Totals:         8       0       0       0
  1070 ;;Total ram usage:        8 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    1
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_setMotorPWM
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081  0004AA                     __ptext4:
  1082                           	opt stack 0
  1083  0004AA                     ___awdiv:
  1084                           	opt stack 27
  1085                           
  1086                           ;incstack = 0
  1087  0004AA  0E00               	movlw	0
  1088  0004AC  6E1A               	movwf	___awdiv@sign,c
  1089  0004AE  AE18               	btfss	___awdiv@divisor+1,7,c
  1090  0004B0  D006               	goto	l1570
  1091  0004B2  6C17               	negf	___awdiv@divisor,c
  1092  0004B4  1E18               	comf	___awdiv@divisor+1,f,c
  1093  0004B6  B0D8               	btfsc	status,0,c
  1094  0004B8  2A18               	incf	___awdiv@divisor+1,f,c
  1095  0004BA  0E01               	movlw	1
  1096  0004BC  6E1A               	movwf	___awdiv@sign,c
  1097  0004BE                     l1570:
  1098  0004BE  AE16               	btfss	___awdiv@dividend+1,7,c
  1099  0004C0  D006               	goto	l1576
  1100  0004C2  6C15               	negf	___awdiv@dividend,c
  1101  0004C4  1E16               	comf	___awdiv@dividend+1,f,c
  1102  0004C6  B0D8               	btfsc	status,0,c
  1103  0004C8  2A16               	incf	___awdiv@dividend+1,f,c
  1104  0004CA  0E01               	movlw	1
  1105  0004CC  1A1A               	xorwf	___awdiv@sign,f,c
  1106  0004CE                     l1576:
  1107  0004CE  0E00               	movlw	0
  1108  0004D0  6E1C               	movwf	___awdiv@quotient+1,c
  1109  0004D2  0E00               	movlw	0
  1110  0004D4  6E1B               	movwf	___awdiv@quotient,c
  1111  0004D6  5017               	movf	___awdiv@divisor,w,c
  1112  0004D8  1018               	iorwf	___awdiv@divisor+1,w,c
  1113  0004DA  B4D8               	btfsc	status,2,c
  1114  0004DC  D01C               	goto	l1598
  1115  0004DE  0E01               	movlw	1
  1116  0004E0  6E19               	movwf	___awdiv@counter,c
  1117  0004E2  D004               	goto	l1584
  1118  0004E4                     l1582:
  1119  0004E4  90D8               	bcf	status,0,c
  1120  0004E6  3617               	rlcf	___awdiv@divisor,f,c
  1121  0004E8  3618               	rlcf	___awdiv@divisor+1,f,c
  1122  0004EA  2A19               	incf	___awdiv@counter,f,c
  1123  0004EC                     l1584:
  1124  0004EC  AE18               	btfss	___awdiv@divisor+1,7,c
  1125  0004EE  D7FA               	goto	l1582
  1126  0004F0                     l1586:
  1127  0004F0  90D8               	bcf	status,0,c
  1128  0004F2  361B               	rlcf	___awdiv@quotient,f,c
  1129  0004F4  361C               	rlcf	___awdiv@quotient+1,f,c
  1130  0004F6  5017               	movf	___awdiv@divisor,w,c
  1131  0004F8  5C15               	subwf	___awdiv@dividend,w,c
  1132  0004FA  5018               	movf	___awdiv@divisor+1,w,c
  1133  0004FC  5816               	subwfb	___awdiv@dividend+1,w,c
  1134  0004FE  A0D8               	btfss	status,0,c
  1135  000500  D005               	goto	l1594
  1136  000502  5017               	movf	___awdiv@divisor,w,c
  1137  000504  5E15               	subwf	___awdiv@dividend,f,c
  1138  000506  5018               	movf	___awdiv@divisor+1,w,c
  1139  000508  5A16               	subwfb	___awdiv@dividend+1,f,c
  1140  00050A  801B               	bsf	___awdiv@quotient,0,c
  1141  00050C                     l1594:
  1142  00050C  90D8               	bcf	status,0,c
  1143  00050E  3218               	rrcf	___awdiv@divisor+1,f,c
  1144  000510  3217               	rrcf	___awdiv@divisor,f,c
  1145  000512  2E19               	decfsz	___awdiv@counter,f,c
  1146  000514  D7ED               	goto	l1586
  1147  000516                     l1598:
  1148  000516  501A               	movf	___awdiv@sign,w,c
  1149  000518  B4D8               	btfsc	status,2,c
  1150  00051A  D004               	goto	l1602
  1151  00051C  6C1B               	negf	___awdiv@quotient,c
  1152  00051E  1E1C               	comf	___awdiv@quotient+1,f,c
  1153  000520  B0D8               	btfsc	status,0,c
  1154  000522  2A1C               	incf	___awdiv@quotient+1,f,c
  1155  000524                     l1602:
  1156  000524  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  1157  000528  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  1158  00052C  0012               	return	
  1159  00052E                     __end_of___awdiv:
  1160                           	opt stack 0
  1161                           tblptru	equ	0xFF8
  1162                           prodh	equ	0xFF4
  1163                           prodl	equ	0xFF3
  1164                           intcon	equ	0xFF2
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           indf1	equ	0xFE7
  1168                           fsr1h	equ	0xFE2
  1169                           fsr1l	equ	0xFE1
  1170                           indf2	equ	0xFDF
  1171                           postinc2	equ	0xFDE
  1172                           postdec2	equ	0xFDD
  1173                           fsr2h	equ	0xFDA
  1174                           fsr2l	equ	0xFD9
  1175                           status	equ	0xFD8
  1176                           
  1177 ;; *************** function _initRFID *****************
  1178 ;; Defined at:
  1179 ;;		line 5 in file "RFID_Reader.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;		None
  1184 ;; Return value:  Size  Location     Type
  1185 ;;		None               void
  1186 ;; Registers used:
  1187 ;;		wreg, status,2
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1193 ;;      Params:         0       0       0       0
  1194 ;;      Locals:         1       0       0       0
  1195 ;;      Temps:          0       0       0       0
  1196 ;;      Totals:         1       0       0       0
  1197 ;;Total ram usage:        1 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    1
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text5
  1208  0005BE                     __ptext5:
  1209                           	opt stack 0
  1210  0005BE                     _initRFID:
  1211                           	opt stack 29
  1212                           
  1213                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
  1214                           
  1215                           ;incstack = 0
  1216  0005BE  0E01               	movlw	1
  1217  0005C0  6E0F               	movwf	_initRFID$1267,c
  1218  0005C2  5094               	movf	3988,w,c	;volatile
  1219  0005C4  C00F  FF94         	movff	_initRFID$1267,3988	;volatile
  1220                           
  1221                           ;RFID_Reader.c: 10: SPBRG=205;
  1222  0005C8  0ECD               	movlw	205
  1223  0005CA  6EAF               	movwf	4015,c	;volatile
  1224                           
  1225                           ;RFID_Reader.c: 11: SPBRGH=0;
  1226  0005CC  0E00               	movlw	0
  1227  0005CE  6EB0               	movwf	4016,c	;volatile
  1228                           
  1229                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1230  0005D0  86AA               	bsf	4010,3,c	;volatile
  1231                           
  1232                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1233  0005D2  84AC               	bsf	4012,2,c	;volatile
  1234                           
  1235                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1236  0005D4  88AB               	bsf	4011,4,c	;volatile
  1237                           
  1238                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1239  0005D6  8EAB               	bsf	4011,7,c	;volatile
  1240                           
  1241                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1242  0005D8  98AC               	bcf	4012,4,c	;volatile
  1243                           
  1244                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1245  0005DA  9CAB               	bcf	4011,6,c	;volatile
  1246  0005DC  0012               	return		;funcret
  1247  0005DE                     __end_of_initRFID:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           prodh	equ	0xFF4
  1251                           prodl	equ	0xFF3
  1252                           intcon	equ	0xFF2
  1253                           postinc0	equ	0xFEE
  1254                           wreg	equ	0xFE8
  1255                           indf1	equ	0xFE7
  1256                           fsr1h	equ	0xFE2
  1257                           fsr1l	equ	0xFE1
  1258                           indf2	equ	0xFDF
  1259                           postinc2	equ	0xFDE
  1260                           postdec2	equ	0xFDD
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _initMotorPWM *****************
  1266 ;; Defined at:
  1267 ;;		line 4 in file "dc_motor.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;		None               void
  1274 ;; Registers used:
  1275 ;;		wreg, status,2
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1281 ;;      Params:         0       0       0       0
  1282 ;;      Locals:         0       0       0       0
  1283 ;;      Temps:          0       0       0       0
  1284 ;;      Totals:         0       0       0       0
  1285 ;;Total ram usage:        0 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    1
  1288 ;; This function calls:
  1289 ;;		Nothing
  1290 ;; This function is called by:
  1291 ;;		_main
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text6
  1296  000566                     __ptext6:
  1297                           	opt stack 0
  1298  000566                     _initMotorPWM:
  1299                           	opt stack 29
  1300                           
  1301                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1302                           
  1303                           ;incstack = 0
  1304  000566  0E00               	movlw	0
  1305  000568  6E7F               	movwf	3967,c	;volatile
  1306                           
  1307                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1308  00056A  0E80               	movlw	128
  1309  00056C  6E7E               	movwf	3966,c	;volatile
  1310                           
  1311                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1312  00056E  0E6F               	movlw	111
  1313  000570  6E6F               	movwf	3951,c	;volatile
  1314                           
  1315                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1316  000572  0E00               	movlw	0
  1317  000574  6E6E               	movwf	3950,c	;volatile
  1318                           
  1319                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1320  000576  0EC7               	movlw	199
  1321  000578  6E7B               	movwf	3963,c	;volatile
  1322                           
  1323                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1324  00057A  0E00               	movlw	0
  1325  00057C  6E7A               	movwf	3962,c	;volatile
  1326                           
  1327                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1328  00057E  0E00               	movlw	0
  1329  000580  6E79               	movwf	3961,c	;volatile
  1330                           
  1331                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1332  000582  0E00               	movlw	0
  1333  000584  6E78               	movwf	3960,c	;volatile
  1334                           
  1335                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1336  000586  0E00               	movlw	0
  1337  000588  6E77               	movwf	3959,c	;volatile
  1338                           
  1339                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1340  00058A  0E00               	movlw	0
  1341  00058C  6E76               	movwf	3958,c	;volatile
  1342                           
  1343                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1344  00058E  9093               	bcf	3987,0,c	;volatile
  1345                           
  1346                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1347  000590  9293               	bcf	3987,1,c	;volatile
  1348                           
  1349                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1350  000592  9493               	bcf	3987,2,c	;volatile
  1351                           
  1352                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1353  000594  9693               	bcf	3987,3,c	;volatile
  1354  000596  0012               	return		;funcret
  1355  000598                     __end_of_initMotorPWM:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           intcon	equ	0xFF2
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           indf1	equ	0xFE7
  1364                           fsr1h	equ	0xFE2
  1365                           fsr1l	equ	0xFE1
  1366                           indf2	equ	0xFDF
  1367                           postinc2	equ	0xFDE
  1368                           postdec2	equ	0xFDD
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function _delay_s *****************
  1374 ;; Defined at:
  1375 ;;		line 10 in file "Movement.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  seconds         1    wreg     unsigned char 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  seconds         1   15[COMRAM] unsigned char 
  1380 ;;  i               2   16[COMRAM] unsigned int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;		None               void
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1390 ;;      Params:         0       0       0       0
  1391 ;;      Locals:         3       0       0       0
  1392 ;;      Temps:          1       0       0       0
  1393 ;;      Totals:         4       0       0       0
  1394 ;;Total ram usage:        4 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;;		_ScanIR
  1402 ;;		_ScanWithRange
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text7
  1407  00052E                     __ptext7:
  1408                           	opt stack 0
  1409  00052E                     _delay_s:
  1410                           	opt stack 29
  1411                           
  1412                           ;incstack = 0
  1413                           ;delay_s@seconds stored from wreg
  1414  00052E  6E10               	movwf	delay_s@seconds,c
  1415                           
  1416                           ;Movement.c: 11: unsigned int i=0;
  1417  000530  0E00               	movlw	0
  1418  000532  6E12               	movwf	delay_s@i+1,c
  1419  000534  0E00               	movlw	0
  1420  000536  6E11               	movwf	delay_s@i,c
  1421                           
  1422                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1423  000538  0E00               	movlw	0
  1424  00053A  6E12               	movwf	delay_s@i+1,c
  1425  00053C  0E01               	movlw	1
  1426  00053E  6E11               	movwf	delay_s@i,c
  1427  000540  D009               	goto	l1664
  1428  000542                     l1660:
  1429                           
  1430                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1431  000542  0E82               	movlw	130
  1432  000544  6E0F               	movwf	??_delay_s& (0+255),c
  1433  000546  0EDE               	movlw	222
  1434  000548                     u1107:
  1435  000548  2EE8               	decfsz	wreg,f,c
  1436  00054A  D7FE               	goto	u1107
  1437  00054C  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1438  00054E  D7FC               	goto	u1107
  1439  000550  4A11               	infsnz	delay_s@i,f,c
  1440  000552  2A12               	incf	delay_s@i+1,f,c
  1441  000554                     l1664:
  1442  000554  5010               	movf	delay_s@seconds,w,c
  1443  000556  0D14               	mullw	20
  1444  000558  5011               	movf	delay_s@i,w,c
  1445  00055A  5CF3               	subwf	prodl,w,c
  1446  00055C  5012               	movf	delay_s@i+1,w,c
  1447  00055E  58F4               	subwfb	prodh,w,c
  1448  000560  A0D8               	btfss	status,0,c
  1449  000562  0012               	return	
  1450  000564  D7EE               	goto	l1660
  1451  000566                     __end_of_delay_s:
  1452                           	opt stack 0
  1453                           tblptru	equ	0xFF8
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           intcon	equ	0xFF2
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           indf1	equ	0xFE7
  1460                           fsr1h	equ	0xFE2
  1461                           fsr1l	equ	0xFE1
  1462                           indf2	equ	0xFDF
  1463                           postinc2	equ	0xFDE
  1464                           postdec2	equ	0xFDD
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _VerifySignal *****************
  1470 ;; Defined at:
  1471 ;;		line 56 in file "RFID_Reader.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  Signal          2   14[COMRAM] PTR unsigned char 
  1474 ;;		 -> ReceivedString(16), 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  hexByte         2   23[COMRAM] unsigned int 
  1477 ;;  i               1   25[COMRAM] unsigned char 
  1478 ;;  checksum        1   22[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      unsigned char 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1488 ;;      Params:         2       0       0       0
  1489 ;;      Locals:         4       0       0       0
  1490 ;;      Temps:          6       0       0       0
  1491 ;;      Totals:        12       0       0       0
  1492 ;;Total ram usage:       12 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    1
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text8
  1503  000366                     __ptext8:
  1504                           	opt stack 0
  1505  000366                     _VerifySignal:
  1506                           	opt stack 29
  1507                           
  1508                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1509                           
  1510                           ;incstack = 0
  1511  000366  0E00               	movlw	0
  1512  000368  6E17               	movwf	VerifySignal@checksum,c
  1513                           
  1514                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1515  00036A  0E00               	movlw	0
  1516  00036C  6E19               	movwf	VerifySignal@hexByte+1,c
  1517  00036E  0E00               	movlw	0
  1518  000370  6E18               	movwf	VerifySignal@hexByte,c
  1519                           
  1520                           ;RFID_Reader.c: 59: unsigned char i=0;
  1521  000372  0E00               	movlw	0
  1522  000374  6E1A               	movwf	VerifySignal@i,c
  1523                           
  1524                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1525  000376  EE20 F004          	lfsr	2,4
  1526  00037A  500F               	movf	VerifySignal@Signal,w,c
  1527  00037C  26D9               	addwf	fsr2l,f,c
  1528  00037E  5010               	movf	VerifySignal@Signal+1,w,c
  1529  000380  22DA               	addwfc	fsr2h,f,c
  1530  000382  50DF               	movf	indf2,w,c
  1531  000384  6E11               	movwf	??_VerifySignal& (0+255),c
  1532  000386  EE20 F003          	lfsr	2,3
  1533  00038A  500F               	movf	VerifySignal@Signal,w,c
  1534  00038C  26D9               	addwf	fsr2l,f,c
  1535  00038E  5010               	movf	VerifySignal@Signal+1,w,c
  1536  000390  22DA               	addwfc	fsr2h,f,c
  1537  000392  50DF               	movf	indf2,w,c
  1538  000394  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1539  000396  5012               	movf	??_VerifySignal+1,w,c
  1540  000398  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1541  00039A  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1542  00039C  5011               	movf	??_VerifySignal,w,c
  1543  00039E  2413               	addwf	??_VerifySignal+2,w,c
  1544  0003A0  6E18               	movwf	VerifySignal@hexByte,c
  1545  0003A2  0E00               	movlw	0
  1546  0003A4  2014               	addwfc	??_VerifySignal+3,w,c
  1547  0003A6  6E19               	movwf	VerifySignal@hexByte+1,c
  1548                           
  1549                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1550  0003A8  EE20 F002          	lfsr	2,2
  1551  0003AC  500F               	movf	VerifySignal@Signal,w,c
  1552  0003AE  26D9               	addwf	fsr2l,f,c
  1553  0003B0  5010               	movf	VerifySignal@Signal+1,w,c
  1554  0003B2  22DA               	addwfc	fsr2h,f,c
  1555  0003B4  50DF               	movf	indf2,w,c
  1556  0003B6  1818               	xorwf	VerifySignal@hexByte,w,c
  1557  0003B8  6E17               	movwf	VerifySignal@checksum,c
  1558                           
  1559                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1560  0003BA  0E05               	movlw	5
  1561  0003BC  6E1A               	movwf	VerifySignal@i,c
  1562  0003BE                     l1694:
  1563  0003BE  0E09               	movlw	9
  1564  0003C0  641A               	cpfsgt	VerifySignal@i,c
  1565  0003C2  D001               	goto	l1698
  1566  0003C4  D028               	goto	l1706
  1567  0003C6                     l1698:
  1568                           
  1569                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1570  0003C6  501A               	movf	VerifySignal@i,w,c
  1571  0003C8  6E11               	movwf	??_VerifySignal& (0+255),c
  1572  0003CA  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1573  0003CC  0E01               	movlw	1
  1574  0003CE  2611               	addwf	??_VerifySignal,f,c
  1575  0003D0  0E00               	movlw	0
  1576  0003D2  2212               	addwfc	??_VerifySignal+1,f,c
  1577  0003D4  5011               	movf	??_VerifySignal,w,c
  1578  0003D6  240F               	addwf	VerifySignal@Signal,w,c
  1579  0003D8  6ED9               	movwf	fsr2l,c
  1580  0003DA  5012               	movf	??_VerifySignal+1,w,c
  1581  0003DC  2010               	addwfc	VerifySignal@Signal+1,w,c
  1582  0003DE  6EDA               	movwf	fsr2h,c
  1583  0003E0  50DF               	movf	indf2,w,c
  1584  0003E2  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1585  0003E4  501A               	movf	VerifySignal@i,w,c
  1586  0003E6  0D01               	mullw	1
  1587  0003E8  50F3               	movf	prodl,w,c
  1588  0003EA  240F               	addwf	VerifySignal@Signal,w,c
  1589  0003EC  6ED9               	movwf	fsr2l,c
  1590  0003EE  50F4               	movf	prodh,w,c
  1591  0003F0  2010               	addwfc	VerifySignal@Signal+1,w,c
  1592  0003F2  6EDA               	movwf	fsr2h,c
  1593  0003F4  50DF               	movf	indf2,w,c
  1594  0003F6  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1595  0003F8  5014               	movf	??_VerifySignal+3,w,c
  1596  0003FA  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1597  0003FC  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1598  0003FE  5013               	movf	??_VerifySignal+2,w,c
  1599  000400  2415               	addwf	??_VerifySignal+4,w,c
  1600  000402  6E18               	movwf	VerifySignal@hexByte,c
  1601  000404  0E00               	movlw	0
  1602  000406  2016               	addwfc	??_VerifySignal+5,w,c
  1603  000408  6E19               	movwf	VerifySignal@hexByte+1,c
  1604                           
  1605                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1606  00040A  5017               	movf	VerifySignal@checksum,w,c
  1607  00040C  1818               	xorwf	VerifySignal@hexByte,w,c
  1608  00040E  6E17               	movwf	VerifySignal@checksum,c
  1609  000410  0E02               	movlw	2
  1610  000412  261A               	addwf	VerifySignal@i,f,c
  1611  000414  D7D4               	goto	l1694
  1612  000416                     l1706:
  1613                           
  1614                           ;RFID_Reader.c: 69: }
  1615                           ;RFID_Reader.c: 72: return 1;
  1616  000416  0E01               	movlw	1
  1617  000418  0012               	return	
  1618  00041A                     __end_of_VerifySignal:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           intcon	equ	0xFF2
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           indf1	equ	0xFE7
  1627                           fsr1h	equ	0xFE2
  1628                           fsr1l	equ	0xFE1
  1629                           indf2	equ	0xFDF
  1630                           postinc2	equ	0xFDE
  1631                           postdec2	equ	0xFDD
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _InterruptHandlerHigh *****************
  1637 ;; Defined at:
  1638 ;;		line 16 in file "main.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1652 ;;      Params:         0       0       0       0
  1653 ;;      Locals:         0       0       0       0
  1654 ;;      Temps:         14       0       0       0
  1655 ;;      Totals:        14       0       0       0
  1656 ;;Total ram usage:       14 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		Interrupt level 2
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	intcode
  1666  000008                     __pintcode:
  1667                           	opt stack 0
  1668  000008                     _InterruptHandlerHigh:
  1669                           	opt stack 27
  1670                           
  1671                           ;incstack = 0
  1672  000008  823D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1673  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  1674  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  1675  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  1676  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  1677  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  1678  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  1679  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  1680  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  1681  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  1682  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  1683  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  1684  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  1685  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  1686  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  1687                           
  1688                           ;main.c: 18: if (PIR1bits.RCIF) {
  1689  000042  AA9E               	btfss	3998,5,c	;volatile
  1690  000044  D013               	goto	i2l44
  1691                           
  1692                           ;main.c: 19: ReceivedString[i]=RCREG;
  1693  000046  502C               	movf	_i,w,c	;volatile
  1694  000048  0D01               	mullw	1
  1695  00004A  0E2D               	movlw	low _ReceivedString
  1696  00004C  24F3               	addwf	prodl,w,c
  1697  00004E  6ED9               	movwf	fsr2l,c
  1698  000050  0E00               	movlw	high _ReceivedString
  1699  000052  20F4               	addwfc	prodh,w,c
  1700  000054  6EDA               	movwf	fsr2h,c
  1701  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  1702                           
  1703                           ;main.c: 20: if (i==15){
  1704  00005A  0E0F               	movlw	15
  1705  00005C  182C               	xorwf	_i,w,c	;volatile
  1706  00005E  A4D8               	btfss	status,2,c
  1707  000060  D003               	goto	i2l1080
  1708                           
  1709                           ;main.c: 21: i=0;
  1710  000062  0E00               	movlw	0
  1711  000064  6E2C               	movwf	_i,c	;volatile
  1712                           
  1713                           ;main.c: 22: }else{
  1714  000066  D001               	goto	i2l1082
  1715  000068                     i2l1080:
  1716                           
  1717                           ;main.c: 23: i++;
  1718  000068  2A2C               	incf	_i,f,c	;volatile
  1719  00006A                     i2l1082:
  1720                           
  1721                           ;main.c: 24: }
  1722                           ;main.c: 25: PIR1bits.RCIF=0;
  1723  00006A  9A9E               	bcf	3998,5,c	;volatile
  1724  00006C                     i2l44:
  1725  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  1726  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  1727  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  1728  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  1729  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  1730  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  1731  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  1732  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  1733  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  1734  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  1735  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  1736  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  1737  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  1738  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  1739  0000A4  923D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1740  0000A6  0011               	retfie		f
  1741  0000A8                     __end_of_InterruptHandlerHigh:
  1742                           	opt stack 0
  1743  0000                     pclatu	equ	0xFFB
  1744                           pclath	equ	0xFFA
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           prodh	equ	0xFF4
  1750                           prodl	equ	0xFF3
  1751                           intcon	equ	0xFF2
  1752                           postinc0	equ	0xFEE
  1753                           fsr0h	equ	0xFEA
  1754                           fsr0l	equ	0xFE9
  1755                           wreg	equ	0xFE8
  1756                           indf1	equ	0xFE7
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           postinc2	equ	0xFDE
  1761                           postdec2	equ	0xFDD
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           pclatu	equ	0xFFB
  1766                           pclath	equ	0xFFA
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           prodh	equ	0xFF4
  1772                           prodl	equ	0xFF3
  1773                           intcon	equ	0xFF2
  1774                           postinc0	equ	0xFEE
  1775                           fsr0h	equ	0xFEA
  1776                           fsr0l	equ	0xFE9
  1777                           wreg	equ	0xFE8
  1778                           indf1	equ	0xFE7
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788                           	psect	rparam
  1789  0000                     pclatu	equ	0xFFB
  1790                           pclath	equ	0xFFA
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           prodh	equ	0xFF4
  1796                           prodl	equ	0xFF3
  1797                           intcon	equ	0xFF2
  1798                           postinc0	equ	0xFEE
  1799                           fsr0h	equ	0xFEA
  1800                           fsr0l	equ	0xFE9
  1801                           wreg	equ	0xFE8
  1802                           indf1	equ	0xFE7
  1803                           fsr1h	equ	0xFE2
  1804                           fsr1l	equ	0xFE1
  1805                           indf2	equ	0xFDF
  1806                           postinc2	equ	0xFDE
  1807                           postdec2	equ	0xFDD
  1808                           fsr2h	equ	0xFDA
  1809                           fsr2l	equ	0xFD9
  1810                           status	equ	0xFD8
  1811                           
  1812                           	psect	temp
  1813  00003D                     btemp:
  1814                           	opt stack 0
  1815  00003D                     	ds	1
  1816  0000                     int$flags	set	btemp
  1817                           pclatu	equ	0xFFB
  1818                           pclath	equ	0xFFA
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           prodh	equ	0xFF4
  1824                           prodl	equ	0xFF3
  1825                           intcon	equ	0xFF2
  1826                           postinc0	equ	0xFEE
  1827                           fsr0h	equ	0xFEA
  1828                           fsr0l	equ	0xFE9
  1829                           wreg	equ	0xFE8
  1830                           indf1	equ	0xFE7
  1831                           fsr1h	equ	0xFE2
  1832                           fsr1l	equ	0xFE1
  1833                           indf2	equ	0xFDF
  1834                           postinc2	equ	0xFDE
  1835                           postdec2	equ	0xFDD
  1836                           fsr2h	equ	0xFDA
  1837                           fsr2l	equ	0xFD9
  1838                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      60
    BANK0           160     32      32
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(COMRAM[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0    4189
                                             41 COMRAM     2     2      0
                                              0 BANK0     32    32      0
                       _VerifySignal
                            _delay_s
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    2798
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1718
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      37
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     476
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _VerifySignal
   _delay_s
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     20      20       4       20.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      3C       1       63.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5C       5        0.0%
DATA                 0      0      5C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 13 23:06:59 2018

                            _i 002C                             l47 013C                   ___awdiv@sign 001A  
          ___wmul@multiplicand 0011                    main@Message 0060                            l100 030A  
                          u864 02A6                            u865 02A2                            u874 02FE  
                          u875 02FA                            u885 0356                            u990 017A  
                          u992 017C                            prod 000FF3                            wreg 000FE8  
                         l1602 0524                           l1612 02E2                           l1706 0416  
                         l1570 04BE                           l1660 0542                           l1582 04E4  
                         l1742 0152                           l1664 0554                           l1584 04EC  
                         l1576 04CE                           l1672 0434                           l1752 01AA  
                         l1594 050C                           l1586 04F0                           l1682 046C  
                         l1762 01EC                           l1746 016E                           l1738 0142  
                         l1676 044C                           l1668 041C                           l1764 01F2  
                         l1756 01B4                           l1694 03BE                           l1598 0516  
                         l1768 01FC                           l1776 0218                           l1698 03C6  
                         u1000 018A                           u1002 018C                           u1107 0548  
                         _LATB 000F8A                           u1097 0466                           i2l44 006C  
                         _main 00AC                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 003D                           _stop 041A                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00A8  
               delay_s@seconds 0010                   ___param_bank 000010                          ?_main 0001  
              __end_of___awdiv 052E                          ?_stop 0026                ___awdiv@divisor 0017  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                  _initRFID$1267 000F  
              ___awdiv@counter 0019                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                __end_of_delay_s 0566  
                        main@i 006D                          tablat 000FF5                          status 000FD8  
              __initialization 05DE                   __end_of_main 0232                   __end_of_stop 04AA  
               __CFG_OSC$IRCIO 000000            VerifySignal@hexByte 0018                         ??_main 002A  
                       ??_stop 002A                  __activetblptr 000002                  ?_initMotorPWM 0001  
                 ?_setMotorPWM 001D               ___awdiv@dividend 0015                         i2l1080 0068  
                       i2l1082 006A                 __CFG_WDTEN$OFF 000000                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         ___wmul 0598  
                    ??___awdiv 0019               __end_of_initRFID 05DE                         clear_0 05E4  
             ___awdiv@quotient 001B                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0026                         stop@mR 0028                     __accesstop 0060  
      __end_of__initialization 05EA                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
         VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0                        ?___wmul 000F  
                      _CAP1CON 000F63                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initRFID 0001           __size_of_setMotorPWM 0134           __end_of_initMotorPWM 0598  
                      __Hparam 0000                        __Lparam 0000                        ___awdiv 04AA  
              __size_of___wmul 0026                        __pcinit 05DE                        _delay_s 052E  
                      __ramtop 0300                        __ptext0 00AC                        __ptext1 041A  
                      __ptext2 0232                        __ptext3 0598                        __ptext4 04AA  
                      __ptext5 05BE                        __ptext6 0566                        __ptext7 052E  
                      __ptext8 0366                  ?_VerifySignal 000F           end_of_initialization 05EA  
           setMotorPWM@PWMduty 0024                     ??_initRFID 000F                  __Lmediumconst 0000  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                 ??_VerifySignal 0011  
                    _TXSTAbits 000FAC                     main@motorL 006E                     main@motorR 0077  
               _ReceivedString 002D                 __end_of___wmul 05BE                    _BAUDCONbits 000FAA  
          start_initialization 05DE             VerifySignal@Signal 000F          __size_of_initMotorPWM 0032  
 __end_of_InterruptHandlerHigh 00A8                       ??___wmul 0013                   _initMotorPWM 0566  
                  __pbssCOMRAM 002C                  __pcstackBANK0 0060              __size_of_initRFID 0020  
                    __pintcode 0008           __end_of_VerifySignal 041A                       ?___awdiv 0015  
                     ?_delay_s 0001                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                ??_setMotorPWM 001F                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                       _PIR1bits 000F9E                       _RCONbits 000FD0  
            ___wmul@multiplier 000F                   setMotorPWM@m 001D           _InterruptHandlerHigh 0008  
          __end_of_setMotorPWM 0366                       __Hrparam 0000                       __Lrparam 0000  
             __size_of___awdiv 0084                     _ANSEL0bits 000FB8               __size_of_delay_s 0038  
        ?_InterruptHandlerHigh 0001                       _initRFID 05BE                  __size_of_main 0186  
                __size_of_stop 0090          __size_of_VerifySignal 00B4                       delay_s@i 0011  
                     int$flags 003D                       main@mode 006C                       main@test 006A  
                VerifySignal@i 001A                     _INTCONbits 000FF2                    _setMotorPWM 0232  
                 _VerifySignal 0366                       intlevel2 0000                     _OSCCONbits 000FD3  
       ??_InterruptHandlerHigh 0001  
