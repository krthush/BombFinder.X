

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 13 16:48:49 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     _CAP1BUFH	set	3945
    30  0000                     _CAP1BUFL	set	3944
    31  0000                     _CAP1CON	set	3939
    32  0000                     _LATAbits	set	3977
    33  0000                     _LATB	set	3978
    34  0000                     _LATCbits	set	3979
    35  0000                     _LATDbits	set	3980
    36  0000                     _PTCON0	set	3967
    37  0000                     _PTCON1	set	3966
    38  0000                     _PTPERH	set	3962
    39  0000                     _PTPERL	set	3963
    40  0000                     _PWMCON0	set	3951
    41  0000                     _PWMCON1	set	3950
    42  0000                     _TRISAbits	set	3986
    43  0000                     _TRISBbits	set	3987
    44  0000                     _TRISC	set	3988
    45  0000                     _TRISCbits	set	3988
    46  0000                     _TRISDbits	set	3989
    47  0000                     _PDC0H	set	3960
    48  0000                     _PDC0L	set	3961
    49  0000                     _PDC1H	set	3958
    50  0000                     _PDC1L	set	3959
    51  0000                     _ANSEL0bits	set	4024
    52  0000                     _BAUDCONbits	set	4010
    53  0000                     _IPR1bits	set	3999
    54  0000                     _OSCCON	set	4051
    55  0000                     _OSCCONbits	set	4051
    56  0000                     _PIE1bits	set	3997
    57  0000                     _PIR1bits	set	3998
    58  0000                     _RCONbits	set	4048
    59  0000                     _RCREG	set	4014
    60  0000                     _RCSTAbits	set	4011
    61  0000                     _SPBRG	set	4015
    62  0000                     _SPBRGH	set	4016
    63  0000                     _T5CON	set	4023
    64  0000                     _TXREG	set	4013
    65  0000                     _TXSTAbits	set	4012
    66  0000                     _INTCONbits	set	4082
    67                           
    68                           ; #config settings
    69  0000                     
    70                           	psect	cinit
    71  000846                     __pcinit:
    72                           	opt stack 0
    73  000846                     start_initialization:
    74                           	opt stack 0
    75  000846                     __initialization:
    76                           	opt stack 0
    77                           
    78                           ; Clear objects allocated to BANK0 (16 bytes)
    79  000846  EE00  F083         	lfsr	0,__pbssBANK0
    80  00084A  0E10               	movlw	16
    81  00084C                     clear_0:
    82  00084C  6AEE               	clrf	postinc0,c
    83  00084E  06E8               	decf	wreg,f,c
    84  000850  E1FD               	bnz	clear_0
    85                           
    86                           ; Clear objects allocated to COMRAM (1 bytes)
    87  000852  6A38               	clrf	__pbssCOMRAM& (0+255),c
    88  000854                     end_of_initialization:
    89                           	opt stack 0
    90  000854                     __end_of__initialization:
    91                           	opt stack 0
    92  000854  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    93  000856  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    94  000858  0E00               	movlw	low (__Lmediumconst shr (0+16))
    95  00085A  6EF8               	movwf	tblptru,c
    96  00085C  0100               	movlb	0
    97  00085E  EF56  F000         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           postinc0	equ	0xFEE
   100                           wreg	equ	0xFE8
   101                           
   102                           	psect	bssCOMRAM
   103  000038                     __pbssCOMRAM:
   104                           	opt stack 0
   105  000038                     _i:
   106                           	opt stack 0
   107  000038                     	ds	1
   108                           tblptru	equ	0xFF8
   109                           postinc0	equ	0xFEE
   110                           wreg	equ	0xFE8
   111                           
   112                           	psect	bssBANK0
   113  000083                     __pbssBANK0:
   114                           	opt stack 0
   115  000083                     _ReceivedString:
   116                           	opt stack 0
   117  000083                     	ds	16
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	cstackBANK0
   123  000060                     __pcstackBANK0:
   124                           	opt stack 0
   125  000060                     main@Message:
   126                           	opt stack 0
   127                           
   128                           ; 10 bytes @ 0x0
   129  000060                     	ds	10
   130  00006A                     main@SignalStrength:
   131                           	opt stack 0
   132                           
   133                           ; 3 bytes @ 0xA
   134  00006A                     	ds	3
   135  00006D                     main@test:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0xD
   139  00006D                     	ds	2
   140  00006F                     main@mode:
   141                           	opt stack 0
   142                           
   143                           ; 1 bytes @ 0xF
   144  00006F                     	ds	1
   145  000070                     main@i:
   146                           	opt stack 0
   147                           
   148                           ; 1 bytes @ 0x10
   149  000070                     	ds	1
   150  000071                     main@motorL:
   151                           	opt stack 0
   152                           
   153                           ; 9 bytes @ 0x11
   154  000071                     	ds	9
   155  00007A                     main@motorR:
   156                           	opt stack 0
   157                           
   158                           ; 9 bytes @ 0x1A
   159  00007A                     	ds	9
   160                           tblptru	equ	0xFF8
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	cstackCOMRAM
   165  000001                     __pcstackCOMRAM:
   166                           	opt stack 0
   167  000001                     ??_InterruptHandlerHigh:
   168  000001                     
   169                           ; 0 bytes @ 0x0
   170  000001                     	ds	14
   171  00000F                     ??_delay_s:
   172  00000F                     ?_grabIR:
   173                           	opt stack 0
   174  00000F                     ?___wmul:
   175                           	opt stack 0
   176  00000F                     _initRFID$1272:
   177                           	opt stack 0
   178  00000F                     VerifySignal@Signal:
   179                           	opt stack 0
   180  00000F                     ___wmul@multiplier:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xE
   184  00000F                     	ds	2
   185  000011                     ??_grabIR:
   186  000011                     ??_VerifySignal:
   187  000011                     delay_s@seconds:
   188                           	opt stack 0
   189  000011                     ___wmul@multiplicand:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x10
   193  000011                     	ds	1
   194  000012                     delay_s@i:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x11
   198  000012                     	ds	1
   199  000013                     grabIR@IR_signal:
   200                           	opt stack 0
   201  000013                     ___wmul@product:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x12
   205  000013                     	ds	1
   206  000014                     delay_s@j:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x13
   210  000014                     	ds	1
   211  000015                     ?___awdiv:
   212                           	opt stack 0
   213  000015                     grabIR@i:
   214                           	opt stack 0
   215  000015                     ___awdiv@dividend:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x14
   219  000015                     	ds	2
   220  000017                     VerifySignal@checksum:
   221                           	opt stack 0
   222  000017                     ___awdiv@divisor:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x16
   226  000017                     	ds	1
   227  000018                     VerifySignal@hexByte:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x17
   231  000018                     	ds	1
   232  000019                     ___awdiv@counter:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0x18
   236  000019                     	ds	1
   237  00001A                     VerifySignal@i:
   238                           	opt stack 0
   239  00001A                     ___awdiv@sign:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x19
   243  00001A                     	ds	1
   244  00001B                     ___awdiv@quotient:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x1A
   248  00001B                     	ds	2
   249  00001D                     setMotorPWM@m:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x1C
   253  00001D                     	ds	2
   254  00001F                     ??_setMotorPWM:
   255                           
   256                           ; 0 bytes @ 0x1E
   257  00001F                     	ds	5
   258  000024                     setMotorPWM@PWMduty:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x23
   262  000024                     	ds	2
   263  000026                     stop@mL:
   264                           	opt stack 0
   265  000026                     fullSpeedAhead@mL:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x25
   269  000026                     	ds	2
   270  000028                     stop@mR:
   271                           	opt stack 0
   272  000028                     fullSpeedAhead@mR:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x27
   276  000028                     	ds	2
   277  00002A                     
   278                           ; 0 bytes @ 0x29
   279  00002A                     	ds	1
   280  00002B                     turnLeft@mL:
   281                           	opt stack 0
   282  00002B                     turnRight@mL:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x2A
   286  00002B                     	ds	2
   287  00002D                     turnLeft@mR:
   288                           	opt stack 0
   289  00002D                     turnRight@mR:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x2C
   293  00002D                     	ds	2
   294  00002F                     ScanIR@mL:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x2E
   298  00002F                     	ds	2
   299  000031                     ScanIR@mR:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x30
   303  000031                     	ds	2
   304  000033                     ScanIR@buf:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x32
   308  000033                     	ds	2
   309  000035                     ??_ScanIR:
   310                           
   311                           ; 0 bytes @ 0x34
   312  000035                     	ds	1
   313  000036                     ??_main:
   314                           
   315                           ; 0 bytes @ 0x35
   316  000036                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321 ;;
   322 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   323 ;;
   324 ;; *************** function _main *****************
   325 ;; Defined at:
   326 ;;		line 29 in file "main.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;		None
   329 ;; Auto vars:     Size  Location     Type
   330 ;;  PathTaken     100    0        unsigned char [100]
   331 ;;  Message        10    0[BANK0 ] unsigned char [10]
   332 ;;  motorR          9   26[BANK0 ] struct DC_motor
   333 ;;  motorL          9   17[BANK0 ] struct DC_motor
   334 ;;  SignalStreng    3   10[BANK0 ] unsigned char [3]
   335 ;;  test            2   13[BANK0 ] unsigned int 
   336 ;;  i               1   16[BANK0 ] unsigned char 
   337 ;;  mode            1   15[BANK0 ] unsigned char 
   338 ;; Return value:  Size  Location     Type
   339 ;;		None               void
   340 ;; Registers used:
   341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : 0/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   347 ;;      Params:         0       0       0       0
   348 ;;      Locals:         0      35       0       0
   349 ;;      Temps:          2       0       0       0
   350 ;;      Totals:         2      35       0       0
   351 ;;Total ram usage:       37 bytes
   352 ;; Hardware stack levels required when called:    6
   353 ;; This function calls:
   354 ;;		_ScanIR
   355 ;;		_VerifySignal
   356 ;;		_grabIR
   357 ;;		_initIR
   358 ;;		_initMotorPWM
   359 ;;		_initRFID
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text0
   366  0000AC                     __ptext0:
   367                           	opt stack 0
   368  0000AC                     _main:
   369                           	opt stack 25
   370                           
   371                           ;main.c: 32: unsigned char Message[10];
   372                           ;main.c: 33: unsigned char i=0;
   373                           
   374                           ;incstack = 0
   375  0000AC  0E00               	movlw	0
   376  0000AE  0100               	movlb	0	; () banked
   377  0000B0  6F70               	movwf	main@i& (0+255),b
   378                           
   379                           ;main.c: 34: unsigned char mode=0;
   380  0000B2  0E00               	movlw	0
   381  0000B4  0100               	movlb	0	; () banked
   382  0000B6  6F6F               	movwf	main@mode& (0+255),b
   383                           
   384                           ;main.c: 35: unsigned char SignalStrength[3];
   385                           ;main.c: 36: char PathTaken[100];
   386                           ;main.c: 37: unsigned int test=0;
   387  0000B8  0E00               	movlw	0
   388  0000BA  0100               	movlb	0	; () banked
   389  0000BC  6F6E               	movwf	(main@test+1)& (0+255),b
   390  0000BE  0E00               	movlw	0
   391  0000C0  6F6D               	movwf	main@test& (0+255),b
   392                           
   393                           ; BSR set to: 0
   394                           ;main.c: 40: INTCONbits.GIEH = 1;
   395  0000C2  8EF2               	bsf	intcon,7,c	;volatile
   396                           
   397                           ; BSR set to: 0
   398                           ;main.c: 41: RCONbits.IPEN = 1;
   399  0000C4  8ED0               	bsf	4048,7,c	;volatile
   400                           
   401                           ; BSR set to: 0
   402                           ;main.c: 42: INTCONbits.GIEL = 1;
   403  0000C6  8CF2               	bsf	intcon,6,c	;volatile
   404                           
   405                           ; BSR set to: 0
   406                           ;main.c: 43: INTCONbits.INT0IE = 1;
   407  0000C8  88F2               	bsf	intcon,4,c	;volatile
   408                           
   409                           ; BSR set to: 0
   410                           ;main.c: 44: INTCONbits.PEIE = 1;
   411  0000CA  8CF2               	bsf	intcon,6,c	;volatile
   412                           
   413                           ; BSR set to: 0
   414                           ;main.c: 46: IPR1bits.RCIP=1;
   415  0000CC  8A9F               	bsf	3999,5,c	;volatile
   416                           
   417                           ; BSR set to: 0
   418                           ;main.c: 47: PIE1bits.RCIE=1;
   419  0000CE  8A9D               	bsf	3997,5,c	;volatile
   420                           
   421                           ;main.c: 50: struct DC_motor motorL, motorR;
   422                           ;main.c: 51: motorL.power=0;
   423  0000D0  0E00               	movlw	0
   424  0000D2  0100               	movlb	0	; () banked
   425  0000D4  6F71               	movwf	main@motorL& (0+255),b
   426                           
   427                           ;main.c: 52: motorL.direction=1;
   428  0000D6  0E01               	movlw	1
   429  0000D8  0100               	movlb	0	; () banked
   430  0000DA  6F72               	movwf	(main@motorL+1)& (0+255),b
   431                           
   432                           ; BSR set to: 0
   433                           ;main.c: 53: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   434  0000DC  0E79               	movlw	121
   435  0000DE  0100               	movlb	0	; () banked
   436  0000E0  6F73               	movwf	(main@motorL+2)& (0+255),b
   437  0000E2  0E0F               	movlw	15
   438  0000E4  0100               	movlb	0	; () banked
   439  0000E6  6F74               	movwf	(main@motorL+3)& (0+255),b
   440                           
   441                           ; BSR set to: 0
   442                           ;main.c: 54: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   443  0000E8  0E78               	movlw	120
   444  0000EA  0100               	movlb	0	; () banked
   445  0000EC  6F75               	movwf	(main@motorL+4)& (0+255),b
   446  0000EE  0E0F               	movlw	15
   447  0000F0  0100               	movlb	0	; () banked
   448  0000F2  6F76               	movwf	(main@motorL+5)& (0+255),b
   449                           
   450                           ;main.c: 55: motorL.dir_pin=0;
   451  0000F4  0E00               	movlw	0
   452  0000F6  0100               	movlb	0	; () banked
   453  0000F8  6F77               	movwf	(main@motorL+6)& (0+255),b
   454                           
   455                           ;main.c: 56: motorL.PWMperiod=199;
   456  0000FA  0E00               	movlw	0
   457  0000FC  0100               	movlb	0	; () banked
   458  0000FE  6F79               	movwf	(main@motorL+8)& (0+255),b
   459  000100  0EC7               	movlw	199
   460  000102  6F78               	movwf	(main@motorL+7)& (0+255),b
   461                           
   462                           ;main.c: 58: motorR.power=0;
   463  000104  0E00               	movlw	0
   464  000106  0100               	movlb	0	; () banked
   465  000108  6F7A               	movwf	main@motorR& (0+255),b
   466                           
   467                           ;main.c: 59: motorR.direction=1;
   468  00010A  0E01               	movlw	1
   469  00010C  0100               	movlb	0	; () banked
   470  00010E  6F7B               	movwf	(main@motorR+1)& (0+255),b
   471                           
   472                           ; BSR set to: 0
   473                           ;main.c: 60: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   474  000110  0E77               	movlw	119
   475  000112  0100               	movlb	0	; () banked
   476  000114  6F7C               	movwf	(main@motorR+2)& (0+255),b
   477  000116  0E0F               	movlw	15
   478  000118  0100               	movlb	0	; () banked
   479  00011A  6F7D               	movwf	(main@motorR+3)& (0+255),b
   480                           
   481                           ; BSR set to: 0
   482                           ;main.c: 61: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   483  00011C  0E76               	movlw	118
   484  00011E  0100               	movlb	0	; () banked
   485  000120  6F7E               	movwf	(main@motorR+4)& (0+255),b
   486  000122  0E0F               	movlw	15
   487  000124  0100               	movlb	0	; () banked
   488  000126  6F7F               	movwf	(main@motorR+5)& (0+255),b
   489                           
   490                           ;main.c: 62: motorR.dir_pin=2;
   491  000128  0E02               	movlw	2
   492  00012A  0100               	movlb	0	; () banked
   493  00012C  6F80               	movwf	(main@motorR+6)& (0+255),b
   494                           
   495                           ;main.c: 63: motorR.PWMperiod=199;
   496  00012E  0E00               	movlw	0
   497  000130  0100               	movlb	0	; () banked
   498  000132  6F82               	movwf	(main@motorR+8)& (0+255),b
   499  000134  0EC7               	movlw	199
   500  000136  6F81               	movwf	(main@motorR+7)& (0+255),b
   501                           
   502                           ;main.c: 65: OSCCON = 0x72;
   503  000138  0E72               	movlw	114
   504  00013A  6ED3               	movwf	4051,c	;volatile
   505  00013C                     l49:
   506  00013C  B4D3               	btfsc	4051,2,c	;volatile
   507  00013E  D07B               	goto	l1589
   508  000140  D7FD               	goto	l49
   509  000142                     l1549:
   510                           
   511                           ;main.c: 73: initMotorPWM();
   512  000142  ECE7  F003         	call	_initMotorPWM	;wreg free
   513                           
   514                           ;main.c: 74: initRFID();
   515  000146  EC13  F004         	call	_initRFID	;wreg free
   516                           
   517                           ;main.c: 76: mode = 1;
   518  00014A  0E01               	movlw	1
   519  00014C  0100               	movlb	0	; () banked
   520  00014E  6F6F               	movwf	main@mode& (0+255),b
   521                           
   522                           ;main.c: 77: break;
   523  000150  D072               	goto	l1589
   524  000152                     l1553:
   525                           
   526                           ; BSR set to: 0
   527                           ;main.c: 81: initIR();
   528  000152  EC31  F004         	call	_initIR	;wreg free
   529                           
   530                           ;main.c: 82: test=grabIR();
   531  000156  EC51  F003         	call	_grabIR	;wreg free
   532  00015A  C00F  F06D         	movff	?_grabIR,main@test
   533  00015E  C010  F06E         	movff	?_grabIR+1,main@test+1
   534                           
   535                           ;main.c: 83: ScanIR(&motorL, &motorR, *SignalStrength);
   536  000162  0E71               	movlw	low main@motorL
   537  000164  6E2F               	movwf	ScanIR@mL,c
   538  000166  0E00               	movlw	high main@motorL
   539  000168  6E30               	movwf	ScanIR@mL+1,c
   540  00016A  0E7A               	movlw	low main@motorR
   541  00016C  6E31               	movwf	ScanIR@mR,c
   542  00016E  0E00               	movlw	high main@motorR
   543  000170  6E32               	movwf	ScanIR@mR+1,c
   544  000172  0100               	movlb	0	; () banked
   545  000174  516A               	movf	main@SignalStrength& (0+255),w,b
   546  000176  6E36               	movwf	??_main& (0+255),c
   547  000178  6A37               	clrf	(??_main+1)& (0+255),c
   548  00017A  C036  F033         	movff	??_main,ScanIR@buf
   549  00017E  C037  F034         	movff	??_main+1,ScanIR@buf+1
   550  000182  ECC2  F001         	call	_ScanIR	;wreg free
   551                           
   552                           ;main.c: 84: break;
   553  000186  D057               	goto	l1589
   554  000188                     l1559:
   555                           
   556                           ;main.c: 89: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
   557  000188  0E03               	movlw	3
   558  00018A  0100               	movlb	0	; () banked
   559  00018C  1992               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
   560  00018E  A4D8               	btfss	status,2,c
   561  000190  D002               	goto	u810
   562  000192  0E01               	movlw	1
   563  000194  D001               	goto	u812
   564  000196                     u810:
   565  000196  0E00               	movlw	0
   566  000198                     u812:
   567  000198  6E36               	movwf	??_main& (0+255),c
   568  00019A  0E02               	movlw	2
   569  00019C  0100               	movlb	0	; () banked
   570  00019E  1983               	xorwf	_ReceivedString& (0+255),w,b	;volatile
   571  0001A0  A4D8               	btfss	status,2,c
   572  0001A2  D002               	goto	u820
   573  0001A4  0E01               	movlw	1
   574  0001A6  D001               	goto	u822
   575  0001A8                     u820:
   576  0001A8  0E00               	movlw	0
   577  0001AA                     u822:
   578  0001AA  1436               	andwf	??_main,w,c
   579  0001AC  A0E8               	btfss	wreg,0,c
   580  0001AE  D043               	goto	l1589
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 90: if (VerifySignal(ReceivedString)){
   584  0001B0  0E83               	movlw	low _ReceivedString
   585  0001B2  6E0F               	movwf	VerifySignal@Signal,c
   586  0001B4  0E00               	movlw	high _ReceivedString
   587  0001B6  6E10               	movwf	VerifySignal@Signal+1,c
   588  0001B8  EC35  F002         	call	_VerifySignal	;wreg free
   589  0001BC  0900               	iorlw	0
   590  0001BE  B4D8               	btfsc	status,2,c
   591  0001C0  D03A               	goto	l1589
   592                           
   593                           ;main.c: 92: for (i=0; i<10; i++){
   594  0001C2  0E00               	movlw	0
   595  0001C4  0100               	movlb	0	; () banked
   596  0001C6  6F70               	movwf	main@i& (0+255),b
   597  0001C8                     l1565:
   598                           
   599                           ; BSR set to: 0
   600  0001C8  0E09               	movlw	9
   601  0001CA  0100               	movlb	0	; () banked
   602  0001CC  6570               	cpfsgt	main@i& (0+255),b
   603  0001CE  D001               	goto	l1569
   604  0001D0  D01C               	goto	l1575
   605  0001D2                     l1569:
   606                           
   607                           ; BSR set to: 0
   608                           ;main.c: 93: Message[i] = ReceivedString[i+1];
   609  0001D2  0100               	movlb	0	; () banked
   610  0001D4  5170               	movf	main@i& (0+255),w,b
   611  0001D6  6E36               	movwf	??_main& (0+255),c
   612  0001D8  6A37               	clrf	(??_main+1)& (0+255),c
   613  0001DA  0E01               	movlw	1
   614  0001DC  2636               	addwf	??_main,f,c
   615  0001DE  0E00               	movlw	0
   616  0001E0  2237               	addwfc	??_main+1,f,c
   617  0001E2  0E83               	movlw	low _ReceivedString
   618  0001E4  2436               	addwf	??_main,w,c
   619  0001E6  6ED9               	movwf	fsr2l,c
   620  0001E8  0E00               	movlw	high _ReceivedString
   621  0001EA  2037               	addwfc	??_main+1,w,c
   622  0001EC  6EDA               	movwf	fsr2h,c
   623  0001EE  0100               	movlb	0	; () banked
   624  0001F0  5170               	movf	main@i& (0+255),w,b
   625  0001F2  0D01               	mullw	1
   626  0001F4  0E60               	movlw	low main@Message
   627  0001F6  24F3               	addwf	prodl,w,c
   628  0001F8  6EE1               	movwf	fsr1l,c
   629  0001FA  0E00               	movlw	high main@Message
   630  0001FC  20F4               	addwfc	prodh,w,c
   631  0001FE  6EE2               	movwf	fsr1h,c
   632  000200  CFDF FFE7          	movff	indf2,indf1
   633                           
   634                           ; BSR set to: 0
   635  000204  0100               	movlb	0	; () banked
   636  000206  2B70               	incf	main@i& (0+255),f,b
   637  000208  D7DF               	goto	l1565
   638  00020A                     l1575:
   639                           
   640                           ; BSR set to: 0
   641                           ;main.c: 94: }
   642                           ;main.c: 96: for (i=0; i<16; i++) {
   643  00020A  0E00               	movlw	0
   644  00020C  0100               	movlb	0	; () banked
   645  00020E  6F70               	movwf	main@i& (0+255),b
   646  000210                     l1577:
   647                           
   648                           ; BSR set to: 0
   649  000210  0E0F               	movlw	15
   650  000212  0100               	movlb	0	; () banked
   651  000214  6570               	cpfsgt	main@i& (0+255),b
   652  000216  D001               	goto	l1581
   653  000218  D00E               	goto	l1589
   654  00021A                     l1581:
   655                           
   656                           ; BSR set to: 0
   657                           ;main.c: 97: ReceivedString[i]=0;
   658  00021A  0100               	movlb	0	; () banked
   659  00021C  5170               	movf	main@i& (0+255),w,b
   660  00021E  0D01               	mullw	1
   661  000220  0E83               	movlw	low _ReceivedString
   662  000222  24F3               	addwf	prodl,w,c
   663  000224  6ED9               	movwf	fsr2l,c
   664  000226  0E00               	movlw	high _ReceivedString
   665  000228  20F4               	addwfc	prodh,w,c
   666  00022A  6EDA               	movwf	fsr2h,c
   667  00022C  0E00               	movlw	0
   668  00022E  6EDF               	movwf	indf2,c
   669                           
   670                           ; BSR set to: 0
   671  000230  0100               	movlb	0	; () banked
   672  000232  2B70               	incf	main@i& (0+255),f,b
   673  000234  D7ED               	goto	l1577
   674  000236                     l1589:
   675  000236  0100               	movlb	0	; () banked
   676  000238  516F               	movf	main@mode& (0+255),w,b
   677                           
   678                           ; Switch size 1, requested type "space"
   679                           ; Number of cases is 4, Range of values is 0 to 3
   680                           ; switch strategies available:
   681                           ; Name         Instructions Cycles
   682                           ; simple_byte           13     7 (average)
   683                           ;	Chosen strategy is simple_byte
   684  00023A  0A00               	xorlw	0	; case 0
   685  00023C  B4D8               	btfsc	status,2,c
   686  00023E  D781               	goto	l1549
   687  000240  0A01               	xorlw	1	; case 1
   688  000242  B4D8               	btfsc	status,2,c
   689  000244  D786               	goto	l1553
   690  000246  0A03               	xorlw	3	; case 2
   691  000248  B4D8               	btfsc	status,2,c
   692  00024A  D79E               	goto	l1559
   693  00024C  0A01               	xorlw	1	; case 3
   694                           
   695                           ; BSR set to: 0
   696                           
   697                           ; BSR set to: 0
   698  00024E  D7F3               	goto	l1589
   699  000250                     __end_of_main:
   700                           	opt stack 0
   701                           tblptru	equ	0xFF8
   702                           prodh	equ	0xFF4
   703                           prodl	equ	0xFF3
   704                           intcon	equ	0xFF2
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           indf1	equ	0xFE7
   708                           fsr1h	equ	0xFE2
   709                           fsr1l	equ	0xFE1
   710                           indf2	equ	0xFDF
   711                           fsr2h	equ	0xFDA
   712                           fsr2l	equ	0xFD9
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _initRFID *****************
   716 ;; Defined at:
   717 ;;		line 5 in file "RFID_Reader.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;		None
   722 ;; Return value:  Size  Location     Type
   723 ;;		None               void
   724 ;; Registers used:
   725 ;;		wreg, status,2
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   731 ;;      Params:         0       0       0       0
   732 ;;      Locals:         1       0       0       0
   733 ;;      Temps:          0       0       0       0
   734 ;;      Totals:         1       0       0       0
   735 ;;Total ram usage:        1 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    1
   738 ;; This function calls:
   739 ;;		Nothing
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text1
   746  000826                     __ptext1:
   747                           	opt stack 0
   748  000826                     _initRFID:
   749                           	opt stack 29
   750                           
   751                           ;RFID_Reader.c: 6: TRISC = TRISC || 0b11000000;
   752                           
   753                           ; BSR set to: 0
   754                           ;incstack = 0
   755  000826  0E01               	movlw	1
   756  000828  6E0F               	movwf	_initRFID$1272,c
   757  00082A  5094               	movf	3988,w,c	;volatile
   758  00082C  C00F  FF94         	movff	_initRFID$1272,3988	;volatile
   759                           
   760                           ;RFID_Reader.c: 10: SPBRG=205;
   761  000830  0ECD               	movlw	205
   762  000832  6EAF               	movwf	4015,c	;volatile
   763                           
   764                           ;RFID_Reader.c: 11: SPBRGH=0;
   765  000834  0E00               	movlw	0
   766  000836  6EB0               	movwf	4016,c	;volatile
   767                           
   768                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
   769  000838  86AA               	bsf	4010,3,c	;volatile
   770                           
   771                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
   772  00083A  84AC               	bsf	4012,2,c	;volatile
   773                           
   774                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
   775  00083C  88AB               	bsf	4011,4,c	;volatile
   776                           
   777                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
   778  00083E  8EAB               	bsf	4011,7,c	;volatile
   779                           
   780                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
   781  000840  98AC               	bcf	4012,4,c	;volatile
   782                           
   783                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
   784  000842  9CAB               	bcf	4011,6,c	;volatile
   785  000844  0012               	return		;funcret
   786  000846                     __end_of_initRFID:
   787                           	opt stack 0
   788                           tblptru	equ	0xFF8
   789                           prodh	equ	0xFF4
   790                           prodl	equ	0xFF3
   791                           intcon	equ	0xFF2
   792                           postinc0	equ	0xFEE
   793                           wreg	equ	0xFE8
   794                           indf1	equ	0xFE7
   795                           fsr1h	equ	0xFE2
   796                           fsr1l	equ	0xFE1
   797                           indf2	equ	0xFDF
   798                           fsr2h	equ	0xFDA
   799                           fsr2l	equ	0xFD9
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function _initMotorPWM *****************
   803 ;; Defined at:
   804 ;;		line 4 in file "dc_motor.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;		None               void
   811 ;; Registers used:
   812 ;;		wreg, status,2
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   818 ;;      Params:         0       0       0       0
   819 ;;      Locals:         0       0       0       0
   820 ;;      Temps:          0       0       0       0
   821 ;;      Totals:         0       0       0       0
   822 ;;Total ram usage:        0 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    1
   825 ;; This function calls:
   826 ;;		Nothing
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text2
   833  0007CE                     __ptext2:
   834                           	opt stack 0
   835  0007CE                     _initMotorPWM:
   836                           	opt stack 29
   837                           
   838                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   839                           
   840                           ;incstack = 0
   841  0007CE  0E00               	movlw	0
   842  0007D0  6E7F               	movwf	3967,c	;volatile
   843                           
   844                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   845  0007D2  0E80               	movlw	128
   846  0007D4  6E7E               	movwf	3966,c	;volatile
   847                           
   848                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   849  0007D6  0E6F               	movlw	111
   850  0007D8  6E6F               	movwf	3951,c	;volatile
   851                           
   852                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   853  0007DA  0E00               	movlw	0
   854  0007DC  6E6E               	movwf	3950,c	;volatile
   855                           
   856                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   857  0007DE  0EC7               	movlw	199
   858  0007E0  6E7B               	movwf	3963,c	;volatile
   859                           
   860                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   861  0007E2  0E00               	movlw	0
   862  0007E4  6E7A               	movwf	3962,c	;volatile
   863                           
   864                           ;dc_motor.c: 13: PDC0L = 0<<2;
   865  0007E6  0E00               	movlw	0
   866  0007E8  6E79               	movwf	3961,c	;volatile
   867                           
   868                           ;dc_motor.c: 14: PDC0H = 0>>6;
   869  0007EA  0E00               	movlw	0
   870  0007EC  6E78               	movwf	3960,c	;volatile
   871                           
   872                           ;dc_motor.c: 15: PDC1L = 0<<2;
   873  0007EE  0E00               	movlw	0
   874  0007F0  6E77               	movwf	3959,c	;volatile
   875                           
   876                           ;dc_motor.c: 16: PDC1H = 0>>6;
   877  0007F2  0E00               	movlw	0
   878  0007F4  6E76               	movwf	3958,c	;volatile
   879                           
   880                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   881  0007F6  9093               	bcf	3987,0,c	;volatile
   882                           
   883                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   884  0007F8  9293               	bcf	3987,1,c	;volatile
   885                           
   886                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   887  0007FA  9493               	bcf	3987,2,c	;volatile
   888                           
   889                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   890  0007FC  9693               	bcf	3987,3,c	;volatile
   891  0007FE  0012               	return		;funcret
   892  000800                     __end_of_initMotorPWM:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           prodh	equ	0xFF4
   896                           prodl	equ	0xFF3
   897                           intcon	equ	0xFF2
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           indf1	equ	0xFE7
   901                           fsr1h	equ	0xFE2
   902                           fsr1l	equ	0xFE1
   903                           indf2	equ	0xFDF
   904                           fsr2h	equ	0xFDA
   905                           fsr2l	equ	0xFD9
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _initIR *****************
   909 ;; Defined at:
   910 ;;		line 30 in file "IR_Reading.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;		None               void
   917 ;; Registers used:
   918 ;;		wreg, status,2
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   924 ;;      Params:         0       0       0       0
   925 ;;      Locals:         0       0       0       0
   926 ;;      Temps:          0       0       0       0
   927 ;;      Totals:         0       0       0       0
   928 ;;Total ram usage:        0 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    1
   931 ;; This function calls:
   932 ;;		Nothing
   933 ;; This function is called by:
   934 ;;		_main
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text3
   939  000862                     __ptext3:
   940                           	opt stack 0
   941  000862                     _initIR:
   942                           	opt stack 29
   943                           
   944                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   945                           
   946                           ;incstack = 0
   947  000862  9489               	bcf	3977,2,c	;volatile
   948                           
   949                           ;IR_Reading.c: 38: TRISAbits.RA2=1;
   950  000864  8492               	bsf	3986,2,c	;volatile
   951                           
   952                           ;IR_Reading.c: 40: ANSEL0bits.ANS2=0;
   953  000866  94B8               	bcf	4024,2,c	;volatile
   954                           
   955                           ;IR_Reading.c: 45: CAP1CON=0b00000110;
   956  000868  0E06               	movlw	6
   957  00086A  6E63               	movwf	3939,c	;volatile
   958                           
   959                           ;IR_Reading.c: 48: T5CON=0b01000001;
   960  00086C  0E41               	movlw	65
   961  00086E  6EB7               	movwf	4023,c	;volatile
   962  000870  0012               	return		;funcret
   963  000872                     __end_of_initIR:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           prodh	equ	0xFF4
   967                           prodl	equ	0xFF3
   968                           intcon	equ	0xFF2
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           indf1	equ	0xFE7
   972                           fsr1h	equ	0xFE2
   973                           fsr1l	equ	0xFE1
   974                           indf2	equ	0xFDF
   975                           fsr2h	equ	0xFDA
   976                           fsr2l	equ	0xFD9
   977                           status	equ	0xFD8
   978                           
   979 ;; *************** function _VerifySignal *****************
   980 ;; Defined at:
   981 ;;		line 56 in file "RFID_Reader.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  Signal          2   14[COMRAM] PTR unsigned char 
   984 ;;		 -> ReceivedString(16), 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  hexByte         2   23[COMRAM] unsigned int 
   987 ;;  i               1   25[COMRAM] unsigned char 
   988 ;;  checksum        1   22[COMRAM] unsigned char 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      unsigned char 
   991 ;; Registers used:
   992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   998 ;;      Params:         2       0       0       0
   999 ;;      Locals:         4       0       0       0
  1000 ;;      Temps:          6       0       0       0
  1001 ;;      Totals:        12       0       0       0
  1002 ;;Total ram usage:       12 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text4
  1013  00046A                     __ptext4:
  1014                           	opt stack 0
  1015  00046A                     _VerifySignal:
  1016                           	opt stack 29
  1017                           
  1018                           ;RFID_Reader.c: 57: unsigned char checksum=0;
  1019                           
  1020                           ;incstack = 0
  1021  00046A  0E00               	movlw	0
  1022  00046C  6E17               	movwf	VerifySignal@checksum,c
  1023                           
  1024                           ;RFID_Reader.c: 58: unsigned int hexByte=0;
  1025  00046E  0E00               	movlw	0
  1026  000470  6E19               	movwf	VerifySignal@hexByte+1,c
  1027  000472  0E00               	movlw	0
  1028  000474  6E18               	movwf	VerifySignal@hexByte,c
  1029                           
  1030                           ;RFID_Reader.c: 59: unsigned char i=0;
  1031  000476  0E00               	movlw	0
  1032  000478  6E1A               	movwf	VerifySignal@i,c
  1033                           
  1034                           ;RFID_Reader.c: 62: hexByte = (Signal[3]<<8) + Signal[4];
  1035  00047A  EE20 F004          	lfsr	2,4
  1036  00047E  500F               	movf	VerifySignal@Signal,w,c
  1037  000480  26D9               	addwf	fsr2l,f,c
  1038  000482  5010               	movf	VerifySignal@Signal+1,w,c
  1039  000484  22DA               	addwfc	fsr2h,f,c
  1040  000486  50DF               	movf	indf2,w,c
  1041  000488  6E11               	movwf	??_VerifySignal& (0+255),c
  1042  00048A  EE20 F003          	lfsr	2,3
  1043  00048E  500F               	movf	VerifySignal@Signal,w,c
  1044  000490  26D9               	addwf	fsr2l,f,c
  1045  000492  5010               	movf	VerifySignal@Signal+1,w,c
  1046  000494  22DA               	addwfc	fsr2h,f,c
  1047  000496  50DF               	movf	indf2,w,c
  1048  000498  6E12               	movwf	(??_VerifySignal+1)& (0+255),c
  1049  00049A  5012               	movf	??_VerifySignal+1,w,c
  1050  00049C  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1051  00049E  6A13               	clrf	(??_VerifySignal+2)& (0+255),c
  1052  0004A0  5011               	movf	??_VerifySignal,w,c
  1053  0004A2  2413               	addwf	??_VerifySignal+2,w,c
  1054  0004A4  6E18               	movwf	VerifySignal@hexByte,c
  1055  0004A6  0E00               	movlw	0
  1056  0004A8  2014               	addwfc	??_VerifySignal+3,w,c
  1057  0004AA  6E19               	movwf	VerifySignal@hexByte+1,c
  1058                           
  1059                           ;RFID_Reader.c: 63: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  1060  0004AC  EE20 F002          	lfsr	2,2
  1061  0004B0  500F               	movf	VerifySignal@Signal,w,c
  1062  0004B2  26D9               	addwf	fsr2l,f,c
  1063  0004B4  5010               	movf	VerifySignal@Signal+1,w,c
  1064  0004B6  22DA               	addwfc	fsr2h,f,c
  1065  0004B8  50DF               	movf	indf2,w,c
  1066  0004BA  1818               	xorwf	VerifySignal@hexByte,w,c
  1067  0004BC  6E17               	movwf	VerifySignal@checksum,c
  1068                           
  1069                           ;RFID_Reader.c: 66: for (i=5; i<10; i+=2){
  1070  0004BE  0E05               	movlw	5
  1071  0004C0  6E1A               	movwf	VerifySignal@i,c
  1072  0004C2                     l1497:
  1073  0004C2  0E09               	movlw	9
  1074  0004C4  641A               	cpfsgt	VerifySignal@i,c
  1075  0004C6  D001               	goto	l1501
  1076  0004C8  D028               	goto	l1509
  1077  0004CA                     l1501:
  1078                           
  1079                           ;RFID_Reader.c: 67: hexByte = (Signal[i]<<8) + Signal[i+1];
  1080  0004CA  501A               	movf	VerifySignal@i,w,c
  1081  0004CC  6E11               	movwf	??_VerifySignal& (0+255),c
  1082  0004CE  6A12               	clrf	(??_VerifySignal+1)& (0+255),c
  1083  0004D0  0E01               	movlw	1
  1084  0004D2  2611               	addwf	??_VerifySignal,f,c
  1085  0004D4  0E00               	movlw	0
  1086  0004D6  2212               	addwfc	??_VerifySignal+1,f,c
  1087  0004D8  5011               	movf	??_VerifySignal,w,c
  1088  0004DA  240F               	addwf	VerifySignal@Signal,w,c
  1089  0004DC  6ED9               	movwf	fsr2l,c
  1090  0004DE  5012               	movf	??_VerifySignal+1,w,c
  1091  0004E0  2010               	addwfc	VerifySignal@Signal+1,w,c
  1092  0004E2  6EDA               	movwf	fsr2h,c
  1093  0004E4  50DF               	movf	indf2,w,c
  1094  0004E6  6E13               	movwf	(??_VerifySignal+2)& (0+255),c
  1095  0004E8  501A               	movf	VerifySignal@i,w,c
  1096  0004EA  0D01               	mullw	1
  1097  0004EC  50F3               	movf	prodl,w,c
  1098  0004EE  240F               	addwf	VerifySignal@Signal,w,c
  1099  0004F0  6ED9               	movwf	fsr2l,c
  1100  0004F2  50F4               	movf	prodh,w,c
  1101  0004F4  2010               	addwfc	VerifySignal@Signal+1,w,c
  1102  0004F6  6EDA               	movwf	fsr2h,c
  1103  0004F8  50DF               	movf	indf2,w,c
  1104  0004FA  6E14               	movwf	(??_VerifySignal+3)& (0+255),c
  1105  0004FC  5014               	movf	??_VerifySignal+3,w,c
  1106  0004FE  6E16               	movwf	(??_VerifySignal+5)& (0+255),c
  1107  000500  6A15               	clrf	(??_VerifySignal+4)& (0+255),c
  1108  000502  5013               	movf	??_VerifySignal+2,w,c
  1109  000504  2415               	addwf	??_VerifySignal+4,w,c
  1110  000506  6E18               	movwf	VerifySignal@hexByte,c
  1111  000508  0E00               	movlw	0
  1112  00050A  2016               	addwfc	??_VerifySignal+5,w,c
  1113  00050C  6E19               	movwf	VerifySignal@hexByte+1,c
  1114                           
  1115                           ;RFID_Reader.c: 68: checksum = checksum ^ hexByte;
  1116  00050E  5017               	movf	VerifySignal@checksum,w,c
  1117  000510  1818               	xorwf	VerifySignal@hexByte,w,c
  1118  000512  6E17               	movwf	VerifySignal@checksum,c
  1119  000514  0E02               	movlw	2
  1120  000516  261A               	addwf	VerifySignal@i,f,c
  1121  000518  D7D4               	goto	l1497
  1122  00051A                     l1509:
  1123                           
  1124                           ;RFID_Reader.c: 69: }
  1125                           ;RFID_Reader.c: 72: return 1;
  1126  00051A  0E01               	movlw	1
  1127  00051C  0012               	return	
  1128  00051E                     __end_of_VerifySignal:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           prodh	equ	0xFF4
  1132                           prodl	equ	0xFF3
  1133                           intcon	equ	0xFF2
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           indf1	equ	0xFE7
  1137                           fsr1h	equ	0xFE2
  1138                           fsr1l	equ	0xFE1
  1139                           indf2	equ	0xFDF
  1140                           fsr2h	equ	0xFDA
  1141                           fsr2l	equ	0xFD9
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _ScanIR *****************
  1145 ;; Defined at:
  1146 ;;		line 20 in file "Movement.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1149 ;;		 -> main@motorL(9), 
  1150 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1151 ;;		 -> main@motorR(9), 
  1152 ;;  buf             2   50[COMRAM] PTR unsigned char 
  1153 ;;		 -> RAM(767), 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;		None               void
  1158 ;; Registers used:
  1159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1165 ;;      Params:         6       0       0       0
  1166 ;;      Locals:         0       0       0       0
  1167 ;;      Temps:          1       0       0       0
  1168 ;;      Totals:         7       0       0       0
  1169 ;;Total ram usage:        7 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    5
  1172 ;; This function calls:
  1173 ;;		_delay_s
  1174 ;;		_grabIR
  1175 ;;		_stop
  1176 ;;		_turnLeft
  1177 ;;		_turnRight
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text5
  1184  000384                     __ptext5:
  1185                           	opt stack 0
  1186  000384                     _ScanIR:
  1187                           	opt stack 25
  1188                           
  1189                           ;Movement.c: 23: stop(mL,mR);
  1190                           
  1191                           ;incstack = 0
  1192  000384  C02F  F026         	movff	ScanIR@mL,stop@mL
  1193  000388  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1194  00038C  C031  F028         	movff	ScanIR@mR,stop@mR
  1195  000390  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1196  000394  EC8F  F002         	call	_stop	;wreg free
  1197                           
  1198                           ;Movement.c: 24: _delay((unsigned long)((50)*(8000000/4000.0)));
  1199  000398  0E82               	movlw	130
  1200  00039A  6E35               	movwf	??_ScanIR& (0+255),c
  1201  00039C  0EDE               	movlw	222
  1202  00039E                     u917:
  1203  00039E  2EE8               	decfsz	wreg,f,c
  1204  0003A0  D7FE               	goto	u917
  1205  0003A2  2E35               	decfsz	??_ScanIR& (0+255),f,c
  1206  0003A4  D7FC               	goto	u917
  1207                           
  1208                           ;Movement.c: 27: buf[1] = grabIR();
  1209  0003A6  EE20 F001          	lfsr	2,1
  1210  0003AA  5033               	movf	ScanIR@buf,w,c
  1211  0003AC  26D9               	addwf	fsr2l,f,c
  1212  0003AE  5034               	movf	ScanIR@buf+1,w,c
  1213  0003B0  22DA               	addwfc	fsr2h,f,c
  1214  0003B2  EC51  F003         	call	_grabIR	;wreg free
  1215  0003B6  500F               	movf	?_grabIR,w,c
  1216  0003B8  6EDF               	movwf	indf2,c
  1217                           
  1218                           ;Movement.c: 30: turnLeft(mL,mR);
  1219  0003BA  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1220  0003BE  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1221  0003C2  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1222  0003C6  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1223  0003CA  ECCC  F003         	call	_turnLeft	;wreg free
  1224                           
  1225                           ;Movement.c: 31: delay_s(1);
  1226  0003CE  0E01               	movlw	1
  1227  0003D0  EC83  F003         	call	_delay_s
  1228                           
  1229                           ;Movement.c: 32: stop(mL,mR);
  1230  0003D4  C02F  F026         	movff	ScanIR@mL,stop@mL
  1231  0003D8  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1232  0003DC  C031  F028         	movff	ScanIR@mR,stop@mR
  1233  0003E0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1234  0003E4  EC8F  F002         	call	_stop	;wreg free
  1235                           
  1236                           ;Movement.c: 33: buf[0] = grabIR();
  1237  0003E8  EC51  F003         	call	_grabIR	;wreg free
  1238  0003EC  500F               	movf	?_grabIR,w,c
  1239  0003EE  C033  FFD9         	movff	ScanIR@buf,fsr2l
  1240  0003F2  C034  FFDA         	movff	ScanIR@buf+1,fsr2h
  1241  0003F6  6EDF               	movwf	indf2,c
  1242                           
  1243                           ;Movement.c: 36: turnRight(mL,mR);
  1244  0003F8  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  1245  0003FC  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  1246  000400  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  1247  000404  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  1248  000408  ECB1  F003         	call	_turnRight	;wreg free
  1249                           
  1250                           ;Movement.c: 37: delay_s(2);
  1251  00040C  0E02               	movlw	2
  1252  00040E  EC83  F003         	call	_delay_s
  1253                           
  1254                           ;Movement.c: 38: stop(mL,mR);
  1255  000412  C02F  F026         	movff	ScanIR@mL,stop@mL
  1256  000416  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1257  00041A  C031  F028         	movff	ScanIR@mR,stop@mR
  1258  00041E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1259  000422  EC8F  F002         	call	_stop	;wreg free
  1260                           
  1261                           ;Movement.c: 39: buf[2] = grabIR();
  1262  000426  EE20 F002          	lfsr	2,2
  1263  00042A  5033               	movf	ScanIR@buf,w,c
  1264  00042C  26D9               	addwf	fsr2l,f,c
  1265  00042E  5034               	movf	ScanIR@buf+1,w,c
  1266  000430  22DA               	addwfc	fsr2h,f,c
  1267  000432  EC51  F003         	call	_grabIR	;wreg free
  1268  000436  500F               	movf	?_grabIR,w,c
  1269  000438  6EDF               	movwf	indf2,c
  1270                           
  1271                           ;Movement.c: 42: turnLeft(mL,mR);
  1272  00043A  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  1273  00043E  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  1274  000442  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  1275  000446  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  1276  00044A  ECCC  F003         	call	_turnLeft	;wreg free
  1277                           
  1278                           ;Movement.c: 43: delay_s(1);
  1279  00044E  0E01               	movlw	1
  1280  000450  EC83  F003         	call	_delay_s
  1281                           
  1282                           ;Movement.c: 44: stop(mL,mR);
  1283  000454  C02F  F026         	movff	ScanIR@mL,stop@mL
  1284  000458  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  1285  00045C  C031  F028         	movff	ScanIR@mR,stop@mR
  1286  000460  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  1287  000464  EC8F  F002         	call	_stop	;wreg free
  1288  000468  0012               	return		;funcret
  1289  00046A                     __end_of_ScanIR:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           prodh	equ	0xFF4
  1293                           prodl	equ	0xFF3
  1294                           intcon	equ	0xFF2
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           indf1	equ	0xFE7
  1298                           fsr1h	equ	0xFE2
  1299                           fsr1l	equ	0xFE1
  1300                           indf2	equ	0xFDF
  1301                           fsr2h	equ	0xFDA
  1302                           fsr2l	equ	0xFD9
  1303                           status	equ	0xFD8
  1304                           
  1305 ;; *************** function _turnRight *****************
  1306 ;; Defined at:
  1307 ;;		line 95 in file "dc_motor.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1310 ;;		 -> main@motorL(9), 
  1311 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1312 ;;		 -> main@motorR(9), 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;		None
  1315 ;; Return value:  Size  Location     Type
  1316 ;;		None               void
  1317 ;; Registers used:
  1318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1324 ;;      Params:         4       0       0       0
  1325 ;;      Locals:         0       0       0       0
  1326 ;;      Temps:          0       0       0       0
  1327 ;;      Totals:         4       0       0       0
  1328 ;;Total ram usage:        4 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    4
  1331 ;; This function calls:
  1332 ;;		_fullSpeedAhead
  1333 ;; This function is called by:
  1334 ;;		_ScanIR
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text6
  1339  000762                     __ptext6:
  1340                           	opt stack 0
  1341  000762                     _turnRight:
  1342                           	opt stack 25
  1343                           
  1344                           ;dc_motor.c: 98: mL->direction=1;
  1345                           
  1346                           ;incstack = 0
  1347  000762  EE20 F001          	lfsr	2,1
  1348  000766  502B               	movf	turnRight@mL,w,c
  1349  000768  26D9               	addwf	fsr2l,f,c
  1350  00076A  502C               	movf	turnRight@mL+1,w,c
  1351  00076C  22DA               	addwfc	fsr2h,f,c
  1352  00076E  0E01               	movlw	1
  1353  000770  6EDF               	movwf	indf2,c
  1354                           
  1355                           ;dc_motor.c: 99: mR->direction=0;
  1356  000772  EE20 F001          	lfsr	2,1
  1357  000776  502D               	movf	turnRight@mR,w,c
  1358  000778  26D9               	addwf	fsr2l,f,c
  1359  00077A  502E               	movf	turnRight@mR+1,w,c
  1360  00077C  22DA               	addwfc	fsr2h,f,c
  1361  00077E  0E00               	movlw	0
  1362  000780  6EDF               	movwf	indf2,c
  1363                           
  1364                           ;dc_motor.c: 100: fullSpeedAhead(mL, mR);
  1365  000782  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  1366  000786  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  1367  00078A  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  1368  00078E  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  1369  000792  EC19  F003         	call	_fullSpeedAhead	;wreg free
  1370  000796  0012               	return		;funcret
  1371  000798                     __end_of_turnRight:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           prodh	equ	0xFF4
  1375                           prodl	equ	0xFF3
  1376                           intcon	equ	0xFF2
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           indf1	equ	0xFE7
  1380                           fsr1h	equ	0xFE2
  1381                           fsr1l	equ	0xFE1
  1382                           indf2	equ	0xFDF
  1383                           fsr2h	equ	0xFDA
  1384                           fsr2l	equ	0xFD9
  1385                           status	equ	0xFD8
  1386                           
  1387 ;; *************** function _turnLeft *****************
  1388 ;; Defined at:
  1389 ;;		line 86 in file "dc_motor.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1392 ;;		 -> main@motorL(9), 
  1393 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1394 ;;		 -> main@motorR(9), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;		None               void
  1399 ;; Registers used:
  1400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1406 ;;      Params:         4       0       0       0
  1407 ;;      Locals:         0       0       0       0
  1408 ;;      Temps:          0       0       0       0
  1409 ;;      Totals:         4       0       0       0
  1410 ;;Total ram usage:        4 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    4
  1413 ;; This function calls:
  1414 ;;		_fullSpeedAhead
  1415 ;; This function is called by:
  1416 ;;		_ScanIR
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text7
  1421  000798                     __ptext7:
  1422                           	opt stack 0
  1423  000798                     _turnLeft:
  1424                           	opt stack 25
  1425                           
  1426                           ;dc_motor.c: 89: mL->direction=0;
  1427                           
  1428                           ;incstack = 0
  1429  000798  EE20 F001          	lfsr	2,1
  1430  00079C  502B               	movf	turnLeft@mL,w,c
  1431  00079E  26D9               	addwf	fsr2l,f,c
  1432  0007A0  502C               	movf	turnLeft@mL+1,w,c
  1433  0007A2  22DA               	addwfc	fsr2h,f,c
  1434  0007A4  0E00               	movlw	0
  1435  0007A6  6EDF               	movwf	indf2,c
  1436                           
  1437                           ;dc_motor.c: 90: mR->direction=1;
  1438  0007A8  EE20 F001          	lfsr	2,1
  1439  0007AC  502D               	movf	turnLeft@mR,w,c
  1440  0007AE  26D9               	addwf	fsr2l,f,c
  1441  0007B0  502E               	movf	turnLeft@mR+1,w,c
  1442  0007B2  22DA               	addwfc	fsr2h,f,c
  1443  0007B4  0E01               	movlw	1
  1444  0007B6  6EDF               	movwf	indf2,c
  1445                           
  1446                           ;dc_motor.c: 91: fullSpeedAhead(mL, mR);
  1447  0007B8  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  1448  0007BC  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  1449  0007C0  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  1450  0007C4  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  1451  0007C8  EC19  F003         	call	_fullSpeedAhead	;wreg free
  1452  0007CC  0012               	return		;funcret
  1453  0007CE                     __end_of_turnLeft:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           prodh	equ	0xFF4
  1457                           prodl	equ	0xFF3
  1458                           intcon	equ	0xFF2
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           indf1	equ	0xFE7
  1462                           fsr1h	equ	0xFE2
  1463                           fsr1l	equ	0xFE1
  1464                           indf2	equ	0xFDF
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _fullSpeedAhead *****************
  1470 ;; Defined at:
  1471 ;;		line 104 in file "dc_motor.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1474 ;;		 -> main@motorL(9), 
  1475 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1476 ;;		 -> main@motorR(9), 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;		None               void
  1481 ;; Registers used:
  1482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1488 ;;      Params:         4       0       0       0
  1489 ;;      Locals:         0       0       0       0
  1490 ;;      Temps:          1       0       0       0
  1491 ;;      Totals:         5       0       0       0
  1492 ;;Total ram usage:        5 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    3
  1495 ;; This function calls:
  1496 ;;		_setMotorPWM
  1497 ;; This function is called by:
  1498 ;;		_turnLeft
  1499 ;;		_turnRight
  1500 ;;		_fullSpeedBack
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text8
  1505  000632                     __ptext8:
  1506                           	opt stack 0
  1507  000632                     _fullSpeedAhead:
  1508                           	opt stack 25
  1509                           
  1510                           ;dc_motor.c: 107: while(mL->power<100 || mR->power<100){
  1511                           
  1512                           ;incstack = 0
  1513  000632  D028               	goto	l132
  1514  000634                     l1351:
  1515                           
  1516                           ;dc_motor.c: 108: if(mL->power<100){
  1517  000634  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1518  000638  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1519  00063C  0E64               	movlw	100
  1520  00063E  60DF               	cpfslt	indf2,c
  1521  000640  D005               	goto	l1355
  1522                           
  1523                           ;dc_motor.c: 109: mL->power++;
  1524  000642  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1525  000646  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1526  00064A  2ADF               	incf	indf2,f,c
  1527  00064C                     l1355:
  1528                           
  1529                           ;dc_motor.c: 110: }
  1530                           ;dc_motor.c: 111: if(mR->power<100){
  1531  00064C  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1532  000650  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1533  000654  0E64               	movlw	100
  1534  000656  60DF               	cpfslt	indf2,c
  1535  000658  D005               	goto	l1359
  1536                           
  1537                           ;dc_motor.c: 112: mR->power++;
  1538  00065A  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1539  00065E  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1540  000662  2ADF               	incf	indf2,f,c
  1541  000664                     l1359:
  1542                           
  1543                           ;dc_motor.c: 113: }
  1544                           ;dc_motor.c: 114: setMotorPWM(mL);
  1545  000664  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1546  000668  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1547  00066C  EC28  F001         	call	_setMotorPWM	;wreg free
  1548                           
  1549                           ;dc_motor.c: 115: setMotorPWM(mR);
  1550  000670  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1551  000674  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1552  000678  EC28  F001         	call	_setMotorPWM	;wreg free
  1553                           
  1554                           ;dc_motor.c: 116: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1555  00067C  0E21               	movlw	33
  1556  00067E                     u927:
  1557  00067E  2EE8               	decfsz	wreg,f,c
  1558  000680  D7FE               	goto	u927
  1559  000682  F000               	nop	
  1560  000684                     l132:
  1561  000684  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1562  000688  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1563  00068C  0E63               	movlw	99
  1564  00068E  64DF               	cpfsgt	indf2,c
  1565  000690  D7D1               	goto	l1351
  1566  000692  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1567  000696  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1568  00069A  0E63               	movlw	99
  1569  00069C  64DF               	cpfsgt	indf2,c
  1570  00069E  D7CA               	goto	l1351
  1571  0006A0  0012               	return	
  1572  0006A2                     __end_of_fullSpeedAhead:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           intcon	equ	0xFF2
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           indf1	equ	0xFE7
  1581                           fsr1h	equ	0xFE2
  1582                           fsr1l	equ	0xFE1
  1583                           indf2	equ	0xFDF
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _stop *****************
  1589 ;; Defined at:
  1590 ;;		line 67 in file "dc_motor.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1593 ;;		 -> main@motorL(9), 
  1594 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1595 ;;		 -> main@motorR(9), 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;		None               void
  1600 ;; Registers used:
  1601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1607 ;;      Params:         4       0       0       0
  1608 ;;      Locals:         0       0       0       0
  1609 ;;      Temps:          0       0       0       0
  1610 ;;      Totals:         4       0       0       0
  1611 ;;Total ram usage:        4 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    3
  1614 ;; This function calls:
  1615 ;;		_setMotorPWM
  1616 ;; This function is called by:
  1617 ;;		_ScanIR
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text9
  1622  00051E                     __ptext9:
  1623                           	opt stack 0
  1624  00051E                     _stop:
  1625                           	opt stack 26
  1626                           
  1627                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  1628                           
  1629                           ;incstack = 0
  1630  00051E  D028               	goto	l1399
  1631  000520                     l1385:
  1632                           
  1633                           ;dc_motor.c: 71: if(mL->power>0){
  1634  000520  C026  FFD9         	movff	stop@mL,fsr2l
  1635  000524  C027  FFDA         	movff	stop@mL+1,fsr2h
  1636  000528  50DF               	movf	indf2,w,c
  1637  00052A  B4D8               	btfsc	status,2,c
  1638  00052C  D005               	goto	l1389
  1639                           
  1640                           ;dc_motor.c: 72: mL->power--;
  1641  00052E  C026  FFD9         	movff	stop@mL,fsr2l
  1642  000532  C027  FFDA         	movff	stop@mL+1,fsr2h
  1643  000536  06DF               	decf	indf2,f,c
  1644  000538                     l1389:
  1645                           
  1646                           ;dc_motor.c: 73: }
  1647                           ;dc_motor.c: 74: if(mR->power>0){
  1648  000538  C028  FFD9         	movff	stop@mR,fsr2l
  1649  00053C  C029  FFDA         	movff	stop@mR+1,fsr2h
  1650  000540  50DF               	movf	indf2,w,c
  1651  000542  B4D8               	btfsc	status,2,c
  1652  000544  D005               	goto	l1393
  1653                           
  1654                           ;dc_motor.c: 75: mR->power--;
  1655  000546  C028  FFD9         	movff	stop@mR,fsr2l
  1656  00054A  C029  FFDA         	movff	stop@mR+1,fsr2h
  1657  00054E  06DF               	decf	indf2,f,c
  1658  000550                     l1393:
  1659                           
  1660                           ;dc_motor.c: 76: }
  1661                           ;dc_motor.c: 77: setMotorPWM(mL);
  1662  000550  C026  F01D         	movff	stop@mL,setMotorPWM@m
  1663  000554  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  1664  000558  EC28  F001         	call	_setMotorPWM	;wreg free
  1665                           
  1666                           ;dc_motor.c: 78: setMotorPWM(mR);
  1667  00055C  C028  F01D         	movff	stop@mR,setMotorPWM@m
  1668  000560  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  1669  000564  EC28  F001         	call	_setMotorPWM	;wreg free
  1670                           
  1671                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1672  000568  0E21               	movlw	33
  1673  00056A                     u937:
  1674  00056A  2EE8               	decfsz	wreg,f,c
  1675  00056C  D7FE               	goto	u937
  1676  00056E  F000               	nop	
  1677  000570                     l1399:
  1678  000570  C026  FFD9         	movff	stop@mL,fsr2l
  1679  000574  C027  FFDA         	movff	stop@mL+1,fsr2h
  1680  000578  50DF               	movf	indf2,w,c
  1681  00057A  A4D8               	btfss	status,2,c
  1682  00057C  D7D1               	goto	l1385
  1683  00057E  C028  FFD9         	movff	stop@mR,fsr2l
  1684  000582  C029  FFDA         	movff	stop@mR+1,fsr2h
  1685  000586  50DF               	movf	indf2,w,c
  1686  000588  A4D8               	btfss	status,2,c
  1687  00058A  D7CA               	goto	l1385
  1688                           
  1689                           ;dc_motor.c: 80: }
  1690                           ;dc_motor.c: 81: mL->direction=1;
  1691  00058C  EE20 F001          	lfsr	2,1
  1692  000590  5026               	movf	stop@mL,w,c
  1693  000592  26D9               	addwf	fsr2l,f,c
  1694  000594  5027               	movf	stop@mL+1,w,c
  1695  000596  22DA               	addwfc	fsr2h,f,c
  1696  000598  0E01               	movlw	1
  1697  00059A  6EDF               	movwf	indf2,c
  1698                           
  1699                           ;dc_motor.c: 82: mR->direction=1;
  1700  00059C  EE20 F001          	lfsr	2,1
  1701  0005A0  5028               	movf	stop@mR,w,c
  1702  0005A2  26D9               	addwf	fsr2l,f,c
  1703  0005A4  5029               	movf	stop@mR+1,w,c
  1704  0005A6  22DA               	addwfc	fsr2h,f,c
  1705  0005A8  0E01               	movlw	1
  1706  0005AA  6EDF               	movwf	indf2,c
  1707  0005AC  0012               	return		;funcret
  1708  0005AE                     __end_of_stop:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           intcon	equ	0xFF2
  1714                           postinc0	equ	0xFEE
  1715                           wreg	equ	0xFE8
  1716                           indf1	equ	0xFE7
  1717                           fsr1h	equ	0xFE2
  1718                           fsr1l	equ	0xFE1
  1719                           indf2	equ	0xFDF
  1720                           fsr2h	equ	0xFDA
  1721                           fsr2l	equ	0xFD9
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _setMotorPWM *****************
  1725 ;; Defined at:
  1726 ;;		line 26 in file "dc_motor.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  m               2   28[COMRAM] PTR struct DC_motor
  1729 ;;		 -> main@motorR(9), main@motorL(9), 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  PWMduty         2   35[COMRAM] int 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;		None               void
  1734 ;; Registers used:
  1735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1741 ;;      Params:         2       0       0       0
  1742 ;;      Locals:         2       0       0       0
  1743 ;;      Temps:          5       0       0       0
  1744 ;;      Totals:         9       0       0       0
  1745 ;;Total ram usage:        9 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		___awdiv
  1750 ;;		___wmul
  1751 ;; This function is called by:
  1752 ;;		_stop
  1753 ;;		_fullSpeedAhead
  1754 ;;		_setMotorFullSpeed
  1755 ;;		_stopMotor
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text10
  1760  000250                     __ptext10:
  1761                           	opt stack 0
  1762  000250                     _setMotorPWM:
  1763                           	opt stack 25
  1764                           
  1765                           ;dc_motor.c: 28: int PWMduty;
  1766                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  1767                           
  1768                           ;incstack = 0
  1769  000250  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  1770  000254  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1771  000258  50DF               	movf	indf2,w,c
  1772  00025A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1773  00025C  501F               	movf	??_setMotorPWM,w,c
  1774  00025E  6E0F               	movwf	___wmul@multiplier,c
  1775  000260  6A10               	clrf	___wmul@multiplier+1,c
  1776  000262  EE20 F007          	lfsr	2,7
  1777  000266  501D               	movf	setMotorPWM@m,w,c
  1778  000268  26D9               	addwf	fsr2l,f,c
  1779  00026A  501E               	movf	setMotorPWM@m+1,w,c
  1780  00026C  22DA               	addwfc	fsr2h,f,c
  1781  00026E  CFDE F011          	movff	postinc2,___wmul@multiplicand
  1782  000272  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  1783  000276  EC00  F004         	call	___wmul	;wreg free
  1784  00027A  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1785  00027E  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1786  000282  0E00               	movlw	0
  1787  000284  6E18               	movwf	___awdiv@divisor+1,c
  1788  000286  0E64               	movlw	100
  1789  000288  6E17               	movwf	___awdiv@divisor,c
  1790  00028A  ECD7  F002         	call	___awdiv	;wreg free
  1791  00028E  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  1792  000292  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1793                           
  1794                           ;dc_motor.c: 32: if (m->direction)
  1795  000296  EE20 F001          	lfsr	2,1
  1796  00029A  501D               	movf	setMotorPWM@m,w,c
  1797  00029C  26D9               	addwf	fsr2l,f,c
  1798  00029E  501E               	movf	setMotorPWM@m+1,w,c
  1799  0002A0  22DA               	addwfc	fsr2h,f,c
  1800  0002A2  50DF               	movf	indf2,w,c
  1801  0002A4  B4D8               	btfsc	status,2,c
  1802  0002A6  D02C               	goto	l1347
  1803                           
  1804                           ;dc_motor.c: 33: {
  1805                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  1806  0002A8  EE20 F006          	lfsr	2,6
  1807  0002AC  501D               	movf	setMotorPWM@m,w,c
  1808  0002AE  26D9               	addwf	fsr2l,f,c
  1809  0002B0  501E               	movf	setMotorPWM@m+1,w,c
  1810  0002B2  22DA               	addwfc	fsr2h,f,c
  1811  0002B4  50DF               	movf	indf2,w,c
  1812  0002B6  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1813  0002B8  0E01               	movlw	1
  1814  0002BA  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1815  0002BC  2A1F               	incf	??_setMotorPWM,f,c
  1816  0002BE  D002               	goto	u604
  1817  0002C0                     u605:
  1818  0002C0  90D8               	bcf	status,0,c
  1819  0002C2  3620               	rlcf	??_setMotorPWM+1,f,c
  1820  0002C4                     u604:
  1821  0002C4  2E1F               	decfsz	??_setMotorPWM,f,c
  1822  0002C6  D7FC               	goto	u605
  1823  0002C8  5020               	movf	??_setMotorPWM+1,w,c
  1824  0002CA  108A               	iorwf	3978,w,c	;volatile
  1825  0002CC  6E8A               	movwf	3978,c	;volatile
  1826                           
  1827                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  1828  0002CE  EE20 F007          	lfsr	2,7
  1829  0002D2  501D               	movf	setMotorPWM@m,w,c
  1830  0002D4  26D9               	addwf	fsr2l,f,c
  1831  0002D6  501E               	movf	setMotorPWM@m+1,w,c
  1832  0002D8  22DA               	addwfc	fsr2h,f,c
  1833  0002DA  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1834  0002DE  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1835  0002E2  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1836  0002E6  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1837  0002EA  1E21               	comf	??_setMotorPWM+2,f,c
  1838  0002EC  1E22               	comf	??_setMotorPWM+3,f,c
  1839  0002EE  4A21               	infsnz	??_setMotorPWM+2,f,c
  1840  0002F0  2A22               	incf	??_setMotorPWM+3,f,c
  1841  0002F2  501F               	movf	??_setMotorPWM,w,c
  1842  0002F4  2421               	addwf	??_setMotorPWM+2,w,c
  1843  0002F6  6E24               	movwf	setMotorPWM@PWMduty,c
  1844  0002F8  5020               	movf	??_setMotorPWM+1,w,c
  1845  0002FA  2022               	addwfc	??_setMotorPWM+3,w,c
  1846  0002FC  6E25               	movwf	setMotorPWM@PWMduty+1,c
  1847                           
  1848                           ;dc_motor.c: 36: }
  1849  0002FE  D014               	goto	l102
  1850  000300                     l1347:
  1851                           
  1852                           ;dc_motor.c: 37: else
  1853                           ;dc_motor.c: 38: {
  1854                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  1855  000300  EE20 F006          	lfsr	2,6
  1856  000304  501D               	movf	setMotorPWM@m,w,c
  1857  000306  26D9               	addwf	fsr2l,f,c
  1858  000308  501E               	movf	setMotorPWM@m+1,w,c
  1859  00030A  22DA               	addwfc	fsr2h,f,c
  1860  00030C  50DF               	movf	indf2,w,c
  1861  00030E  6E1F               	movwf	??_setMotorPWM& (0+255),c
  1862  000310  0E01               	movlw	1
  1863  000312  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  1864  000314  2A1F               	incf	??_setMotorPWM,f,c
  1865  000316  D002               	goto	u614
  1866  000318                     u615:
  1867  000318  90D8               	bcf	status,0,c
  1868  00031A  3620               	rlcf	??_setMotorPWM+1,f,c
  1869  00031C                     u614:
  1870  00031C  2E1F               	decfsz	??_setMotorPWM,f,c
  1871  00031E  D7FC               	goto	u615
  1872  000320  5020               	movf	??_setMotorPWM+1,w,c
  1873  000322  0AFF               	xorlw	255
  1874  000324  148A               	andwf	3978,w,c	;volatile
  1875  000326  6E8A               	movwf	3978,c	;volatile
  1876  000328                     l102:
  1877                           
  1878                           ;dc_motor.c: 40: }
  1879                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  1880  000328  EE20 F002          	lfsr	2,2
  1881  00032C  501D               	movf	setMotorPWM@m,w,c
  1882  00032E  26D9               	addwf	fsr2l,f,c
  1883  000330  501E               	movf	setMotorPWM@m+1,w,c
  1884  000332  22DA               	addwfc	fsr2h,f,c
  1885  000334  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1886  000338  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1887  00033C  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1888  000340  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1889  000344  4424               	rlncf	setMotorPWM@PWMduty,w,c
  1890  000346  46E8               	rlncf	wreg,f,c
  1891  000348  0BFC               	andlw	252
  1892  00034A  6EDF               	movwf	indf2,c
  1893                           
  1894                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  1895  00034C  EE20 F004          	lfsr	2,4
  1896  000350  501D               	movf	setMotorPWM@m,w,c
  1897  000352  26D9               	addwf	fsr2l,f,c
  1898  000354  501E               	movf	setMotorPWM@m+1,w,c
  1899  000356  22DA               	addwfc	fsr2h,f,c
  1900  000358  CFDE F01F          	movff	postinc2,??_setMotorPWM
  1901  00035C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  1902  000360  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  1903  000364  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1904  000368  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  1905  00036C  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  1906  000370  0E06               	movlw	6
  1907  000372  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  1908  000374                     u625:
  1909  000374  3422               	rlcf	??_setMotorPWM+3,w,c
  1910  000376  3222               	rrcf	??_setMotorPWM+3,f,c
  1911  000378  3221               	rrcf	??_setMotorPWM+2,f,c
  1912  00037A  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  1913  00037C  D7FB               	goto	u625
  1914  00037E  5021               	movf	??_setMotorPWM+2,w,c
  1915  000380  6EDF               	movwf	indf2,c
  1916  000382  0012               	return		;funcret
  1917  000384                     __end_of_setMotorPWM:
  1918                           	opt stack 0
  1919                           tblptru	equ	0xFF8
  1920                           prodh	equ	0xFF4
  1921                           prodl	equ	0xFF3
  1922                           intcon	equ	0xFF2
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           indf1	equ	0xFE7
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function ___wmul *****************
  1936 ;; Defined at:
  1937 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  multiplier      2   14[COMRAM] unsigned int 
  1940 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  product         2   18[COMRAM] unsigned int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  2   14[COMRAM] unsigned int 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0, prodl, prodh
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1952 ;;      Params:         4       0       0       0
  1953 ;;      Locals:         2       0       0       0
  1954 ;;      Temps:          0       0       0       0
  1955 ;;      Totals:         6       0       0       0
  1956 ;;Total ram usage:        6 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    1
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_setMotorPWM
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text11
  1967  000800                     __ptext11:
  1968                           	opt stack 0
  1969  000800                     ___wmul:
  1970                           	opt stack 25
  1971                           
  1972                           ;incstack = 0
  1973  000800  500F               	movf	___wmul@multiplier,w,c
  1974  000802  0211               	mulwf	___wmul@multiplicand,c
  1975  000804  CFF3 F013          	movff	prodl,___wmul@product
  1976  000808  CFF4 F014          	movff	prodh,___wmul@product+1
  1977  00080C  500F               	movf	___wmul@multiplier,w,c
  1978  00080E  0212               	mulwf	___wmul@multiplicand+1,c
  1979  000810  50F3               	movf	prodl,w,c
  1980  000812  2614               	addwf	___wmul@product+1,f,c
  1981  000814  5010               	movf	___wmul@multiplier+1,w,c
  1982  000816  0211               	mulwf	___wmul@multiplicand,c
  1983  000818  50F3               	movf	prodl,w,c
  1984  00081A  2614               	addwf	___wmul@product+1,f,c
  1985  00081C  C013  F00F         	movff	___wmul@product,?___wmul
  1986  000820  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1987  000824  0012               	return	
  1988  000826                     __end_of___wmul:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           prodh	equ	0xFF4
  1992                           prodl	equ	0xFF3
  1993                           intcon	equ	0xFF2
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           indf1	equ	0xFE7
  1997                           fsr1h	equ	0xFE2
  1998                           fsr1l	equ	0xFE1
  1999                           indf2	equ	0xFDF
  2000                           postinc2	equ	0xFDE
  2001                           postdec2	equ	0xFDD
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function ___awdiv *****************
  2007 ;; Defined at:
  2008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  dividend        2   20[COMRAM] int 
  2011 ;;  divisor         2   22[COMRAM] int 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  quotient        2   26[COMRAM] int 
  2014 ;;  sign            1   25[COMRAM] unsigned char 
  2015 ;;  counter         1   24[COMRAM] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  2   20[COMRAM] int 
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, status,0
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2025 ;;      Params:         4       0       0       0
  2026 ;;      Locals:         4       0       0       0
  2027 ;;      Temps:          0       0       0       0
  2028 ;;      Totals:         8       0       0       0
  2029 ;;Total ram usage:        8 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    1
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_setMotorPWM
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text12
  2040  0005AE                     __ptext12:
  2041                           	opt stack 0
  2042  0005AE                     ___awdiv:
  2043                           	opt stack 25
  2044                           
  2045                           ;incstack = 0
  2046  0005AE  0E00               	movlw	0
  2047  0005B0  6E1A               	movwf	___awdiv@sign,c
  2048  0005B2  AE18               	btfss	___awdiv@divisor+1,7,c
  2049  0005B4  D006               	goto	l1305
  2050  0005B6  6C17               	negf	___awdiv@divisor,c
  2051  0005B8  1E18               	comf	___awdiv@divisor+1,f,c
  2052  0005BA  B0D8               	btfsc	status,0,c
  2053  0005BC  2A18               	incf	___awdiv@divisor+1,f,c
  2054  0005BE  0E01               	movlw	1
  2055  0005C0  6E1A               	movwf	___awdiv@sign,c
  2056  0005C2                     l1305:
  2057  0005C2  AE16               	btfss	___awdiv@dividend+1,7,c
  2058  0005C4  D006               	goto	l1311
  2059  0005C6  6C15               	negf	___awdiv@dividend,c
  2060  0005C8  1E16               	comf	___awdiv@dividend+1,f,c
  2061  0005CA  B0D8               	btfsc	status,0,c
  2062  0005CC  2A16               	incf	___awdiv@dividend+1,f,c
  2063  0005CE  0E01               	movlw	1
  2064  0005D0  1A1A               	xorwf	___awdiv@sign,f,c
  2065  0005D2                     l1311:
  2066  0005D2  0E00               	movlw	0
  2067  0005D4  6E1C               	movwf	___awdiv@quotient+1,c
  2068  0005D6  0E00               	movlw	0
  2069  0005D8  6E1B               	movwf	___awdiv@quotient,c
  2070  0005DA  5017               	movf	___awdiv@divisor,w,c
  2071  0005DC  1018               	iorwf	___awdiv@divisor+1,w,c
  2072  0005DE  B4D8               	btfsc	status,2,c
  2073  0005E0  D01C               	goto	l1333
  2074  0005E2  0E01               	movlw	1
  2075  0005E4  6E19               	movwf	___awdiv@counter,c
  2076  0005E6  D004               	goto	l1319
  2077  0005E8                     l1317:
  2078  0005E8  90D8               	bcf	status,0,c
  2079  0005EA  3617               	rlcf	___awdiv@divisor,f,c
  2080  0005EC  3618               	rlcf	___awdiv@divisor+1,f,c
  2081  0005EE  2A19               	incf	___awdiv@counter,f,c
  2082  0005F0                     l1319:
  2083  0005F0  AE18               	btfss	___awdiv@divisor+1,7,c
  2084  0005F2  D7FA               	goto	l1317
  2085  0005F4                     l1321:
  2086  0005F4  90D8               	bcf	status,0,c
  2087  0005F6  361B               	rlcf	___awdiv@quotient,f,c
  2088  0005F8  361C               	rlcf	___awdiv@quotient+1,f,c
  2089  0005FA  5017               	movf	___awdiv@divisor,w,c
  2090  0005FC  5C15               	subwf	___awdiv@dividend,w,c
  2091  0005FE  5018               	movf	___awdiv@divisor+1,w,c
  2092  000600  5816               	subwfb	___awdiv@dividend+1,w,c
  2093  000602  A0D8               	btfss	status,0,c
  2094  000604  D005               	goto	l1329
  2095  000606  5017               	movf	___awdiv@divisor,w,c
  2096  000608  5E15               	subwf	___awdiv@dividend,f,c
  2097  00060A  5018               	movf	___awdiv@divisor+1,w,c
  2098  00060C  5A16               	subwfb	___awdiv@dividend+1,f,c
  2099  00060E  801B               	bsf	___awdiv@quotient,0,c
  2100  000610                     l1329:
  2101  000610  90D8               	bcf	status,0,c
  2102  000612  3218               	rrcf	___awdiv@divisor+1,f,c
  2103  000614  3217               	rrcf	___awdiv@divisor,f,c
  2104  000616  2E19               	decfsz	___awdiv@counter,f,c
  2105  000618  D7ED               	goto	l1321
  2106  00061A                     l1333:
  2107  00061A  501A               	movf	___awdiv@sign,w,c
  2108  00061C  B4D8               	btfsc	status,2,c
  2109  00061E  D004               	goto	l1337
  2110  000620  6C1B               	negf	___awdiv@quotient,c
  2111  000622  1E1C               	comf	___awdiv@quotient+1,f,c
  2112  000624  B0D8               	btfsc	status,0,c
  2113  000626  2A1C               	incf	___awdiv@quotient+1,f,c
  2114  000628                     l1337:
  2115  000628  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  2116  00062C  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  2117  000630  0012               	return	
  2118  000632                     __end_of___awdiv:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136 ;; *************** function _grabIR *****************
  2137 ;; Defined at:
  2138 ;;		line 53 in file "IR_Reading.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  IR_signal       2   18[COMRAM] unsigned int 
  2143 ;;  i               1   20[COMRAM] unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  2   14[COMRAM] unsigned int 
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, status,0
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2153 ;;      Params:         2       0       0       0
  2154 ;;      Locals:         3       0       0       0
  2155 ;;      Temps:          2       0       0       0
  2156 ;;      Totals:         7       0       0       0
  2157 ;;Total ram usage:        7 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    1
  2160 ;; This function calls:
  2161 ;;		Nothing
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;;		_ScanIR
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text13
  2169  0006A2                     __ptext13:
  2170                           	opt stack 0
  2171  0006A2                     _grabIR:
  2172                           	opt stack 29
  2173                           
  2174                           ;IR_Reading.c: 55: unsigned int IR_signal=0;
  2175                           
  2176                           ;incstack = 0
  2177  0006A2  0E00               	movlw	0
  2178  0006A4  6E14               	movwf	grabIR@IR_signal+1,c
  2179  0006A6  0E00               	movlw	0
  2180  0006A8  6E13               	movwf	grabIR@IR_signal,c
  2181                           
  2182                           ;IR_Reading.c: 56: unsigned char i=0;
  2183  0006AA  0E00               	movlw	0
  2184  0006AC  6E15               	movwf	grabIR@i,c
  2185                           
  2186                           ;IR_Reading.c: 58: for (i=0; i<4; i++) {
  2187  0006AE  0E00               	movlw	0
  2188  0006B0  6E15               	movwf	grabIR@i,c
  2189  0006B2                     l1369:
  2190  0006B2  0E03               	movlw	3
  2191  0006B4  6415               	cpfsgt	grabIR@i,c
  2192  0006B6  D001               	goto	l1373
  2193  0006B8  D017               	goto	l1379
  2194  0006BA                     l1373:
  2195                           
  2196                           ;IR_Reading.c: 60: IR_signal+=((CAP1BUFH << 8) | CAP1BUFL);
  2197  0006BA  5068               	movf	3944,w,c	;volatile
  2198  0006BC  CF69 F011          	movff	3945,??_grabIR	;volatile
  2199  0006C0  6A12               	clrf	(??_grabIR+1)& (0+255),c
  2200  0006C2  C011  F012         	movff	??_grabIR,??_grabIR+1
  2201  0006C6  6A11               	clrf	??_grabIR,c
  2202  0006C8  1211               	iorwf	??_grabIR,f,c
  2203  0006CA  0E00               	movlw	0
  2204  0006CC  1212               	iorwf	??_grabIR+1,f,c
  2205  0006CE  5011               	movf	??_grabIR,w,c
  2206  0006D0  2613               	addwf	grabIR@IR_signal,f,c
  2207  0006D2  5012               	movf	??_grabIR+1,w,c
  2208  0006D4  2214               	addwfc	grabIR@IR_signal+1,f,c
  2209                           
  2210                           ;IR_Reading.c: 61: _delay((unsigned long)((50)*(8000000/4000.0)));
  2211  0006D6  0E82               	movlw	130
  2212  0006D8  6E11               	movwf	??_grabIR& (0+255),c
  2213  0006DA  0EDE               	movlw	222
  2214  0006DC                     u947:
  2215  0006DC  2EE8               	decfsz	wreg,f,c
  2216  0006DE  D7FE               	goto	u947
  2217  0006E0  2E11               	decfsz	??_grabIR& (0+255),f,c
  2218  0006E2  D7FC               	goto	u947
  2219  0006E4  2A15               	incf	grabIR@i,f,c
  2220  0006E6  D7E5               	goto	l1369
  2221  0006E8                     l1379:
  2222                           
  2223                           ;IR_Reading.c: 62: }
  2224                           ;IR_Reading.c: 64: return IR_signal<<2;
  2225  0006E8  C013  F011         	movff	grabIR@IR_signal,??_grabIR
  2226  0006EC  C014  F012         	movff	grabIR@IR_signal+1,??_grabIR+1
  2227  0006F0  90D8               	bcf	status,0,c
  2228  0006F2  3611               	rlcf	??_grabIR,f,c
  2229  0006F4  3612               	rlcf	??_grabIR+1,f,c
  2230  0006F6  90D8               	bcf	status,0,c
  2231  0006F8  3611               	rlcf	??_grabIR,f,c
  2232  0006FA  3612               	rlcf	??_grabIR+1,f,c
  2233  0006FC  C011  F00F         	movff	??_grabIR,?_grabIR
  2234  000700  C012  F010         	movff	??_grabIR+1,?_grabIR+1
  2235  000704  0012               	return	
  2236  000706                     __end_of_grabIR:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           prodh	equ	0xFF4
  2240                           prodl	equ	0xFF3
  2241                           intcon	equ	0xFF2
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           indf1	equ	0xFE7
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _delay_s *****************
  2255 ;; Defined at:
  2256 ;;		line 10 in file "Movement.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  seconds         1    wreg     unsigned char 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  seconds         1   16[COMRAM] unsigned char 
  2261 ;;  j               2   19[COMRAM] unsigned int 
  2262 ;;  i               2   17[COMRAM] unsigned int 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;		None               void
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2272 ;;      Params:         0       0       0       0
  2273 ;;      Locals:         5       0       0       0
  2274 ;;      Temps:          2       0       0       0
  2275 ;;      Totals:         7       0       0       0
  2276 ;;Total ram usage:        7 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    1
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_ScanIR
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text14
  2287  000706                     __ptext14:
  2288                           	opt stack 0
  2289  000706                     _delay_s:
  2290                           	opt stack 28
  2291                           
  2292                           ;incstack = 0
  2293                           ;delay_s@seconds stored from wreg
  2294  000706  6E11               	movwf	delay_s@seconds,c
  2295                           
  2296                           ;Movement.c: 11: unsigned int i=0;
  2297  000708  0E00               	movlw	0
  2298  00070A  6E13               	movwf	delay_s@i+1,c
  2299  00070C  0E00               	movlw	0
  2300  00070E  6E12               	movwf	delay_s@i,c
  2301                           
  2302                           ;Movement.c: 12: unsigned int j=0;
  2303  000710  0E00               	movlw	0
  2304  000712  6E15               	movwf	delay_s@j+1,c
  2305  000714  0E00               	movlw	0
  2306  000716  6E14               	movwf	delay_s@j,c
  2307                           
  2308                           ;Movement.c: 13: for (i=1; i<=seconds; i++) {
  2309  000718  0E00               	movlw	0
  2310  00071A  6E13               	movwf	delay_s@i+1,c
  2311  00071C  0E01               	movlw	1
  2312  00071E  6E12               	movwf	delay_s@i,c
  2313  000720  D016               	goto	l1427
  2314  000722                     l1415:
  2315                           
  2316                           ;Movement.c: 14: for (j=1; j<=20; j++) {
  2317  000722  0E00               	movlw	0
  2318  000724  6E15               	movwf	delay_s@j+1,c
  2319  000726  0E01               	movlw	1
  2320  000728  6E14               	movwf	delay_s@j,c
  2321  00072A                     l1417:
  2322  00072A  5015               	movf	delay_s@j+1,w,c
  2323  00072C  E10E               	bnz	l1425
  2324  00072E  0E15               	movlw	21
  2325  000730  5C14               	subwf	delay_s@j,w,c
  2326  000732  B0D8               	btfsc	status,0,c
  2327  000734  D00A               	goto	l1425
  2328                           
  2329                           ;Movement.c: 15: _delay((unsigned long)((50)*(8000000/4000.0)));
  2330  000736  0E82               	movlw	130
  2331  000738  6E0F               	movwf	??_delay_s& (0+255),c
  2332  00073A  0EDE               	movlw	222
  2333  00073C                     u957:
  2334  00073C  2EE8               	decfsz	wreg,f,c
  2335  00073E  D7FE               	goto	u957
  2336  000740  2E0F               	decfsz	??_delay_s& (0+255),f,c
  2337  000742  D7FC               	goto	u957
  2338  000744  4A14               	infsnz	delay_s@j,f,c
  2339  000746  2A15               	incf	delay_s@j+1,f,c
  2340  000748  D7F0               	goto	l1417
  2341  00074A                     l1425:
  2342  00074A  4A12               	infsnz	delay_s@i,f,c
  2343  00074C  2A13               	incf	delay_s@i+1,f,c
  2344  00074E                     l1427:
  2345  00074E  5011               	movf	delay_s@seconds,w,c
  2346  000750  6E0F               	movwf	??_delay_s& (0+255),c
  2347  000752  6A10               	clrf	(??_delay_s+1)& (0+255),c
  2348  000754  5012               	movf	delay_s@i,w,c
  2349  000756  5C0F               	subwf	??_delay_s,w,c
  2350  000758  5013               	movf	delay_s@i+1,w,c
  2351  00075A  5810               	subwfb	??_delay_s+1,w,c
  2352  00075C  A0D8               	btfss	status,0,c
  2353  00075E  0012               	return	
  2354  000760  D7E0               	goto	l1415
  2355  000762                     __end_of_delay_s:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           prodh	equ	0xFF4
  2359                           prodl	equ	0xFF3
  2360                           intcon	equ	0xFF2
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           indf1	equ	0xFE7
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _InterruptHandlerHigh *****************
  2374 ;; Defined at:
  2375 ;;		line 16 in file "main.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2389 ;;      Params:         0       0       0       0
  2390 ;;      Locals:         0       0       0       0
  2391 ;;      Temps:         14       0       0       0
  2392 ;;      Totals:        14       0       0       0
  2393 ;;Total ram usage:       14 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		Interrupt level 2
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	intcode
  2403  000008                     __pintcode:
  2404                           	opt stack 0
  2405  000008                     _InterruptHandlerHigh:
  2406                           	opt stack 25
  2407                           
  2408                           ;incstack = 0
  2409  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2410  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  2411  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  2412  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  2413  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  2414  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  2415  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  2416  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  2417  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  2418  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  2419  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  2420  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  2421  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  2422  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  2423  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  2424                           
  2425                           ;main.c: 18: if (PIR1bits.RCIF) {
  2426  000042  AA9E               	btfss	3998,5,c	;volatile
  2427  000044  D013               	goto	i2l46
  2428                           
  2429                           ;main.c: 19: ReceivedString[i]=RCREG;
  2430  000046  5038               	movf	_i,w,c	;volatile
  2431  000048  0D01               	mullw	1
  2432  00004A  0E83               	movlw	low _ReceivedString
  2433  00004C  24F3               	addwf	prodl,w,c
  2434  00004E  6ED9               	movwf	fsr2l,c
  2435  000050  0E00               	movlw	high _ReceivedString
  2436  000052  20F4               	addwfc	prodh,w,c
  2437  000054  6EDA               	movwf	fsr2h,c
  2438  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  2439                           
  2440                           ;main.c: 20: if (i==15){
  2441  00005A  0E0F               	movlw	15
  2442  00005C  1838               	xorwf	_i,w,c	;volatile
  2443  00005E  A4D8               	btfss	status,2,c
  2444  000060  D003               	goto	i2l1521
  2445                           
  2446                           ;main.c: 21: i=0;
  2447  000062  0E00               	movlw	0
  2448  000064  6E38               	movwf	_i,c	;volatile
  2449                           
  2450                           ;main.c: 22: }else{
  2451  000066  D001               	goto	i2l1523
  2452  000068                     i2l1521:
  2453                           
  2454                           ;main.c: 23: i++;
  2455  000068  2A38               	incf	_i,f,c	;volatile
  2456  00006A                     i2l1523:
  2457                           
  2458                           ;main.c: 24: }
  2459                           ;main.c: 25: PIR1bits.RCIF=0;
  2460  00006A  9A9E               	bcf	3998,5,c	;volatile
  2461  00006C                     i2l46:
  2462  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  2463  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  2464  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  2465  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  2466  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  2467  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  2468  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  2469  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  2470  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  2471  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  2472  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  2473  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  2474  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  2475  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  2476  0000A4  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2477  0000A6  0011               	retfie		f
  2478  0000A8                     __end_of_InterruptHandlerHigh:
  2479                           	opt stack 0
  2480  0000                     pclatu	equ	0xFFB
  2481                           pclath	equ	0xFFA
  2482                           tblptru	equ	0xFF8
  2483                           tblptrh	equ	0xFF7
  2484                           tblptrl	equ	0xFF6
  2485                           tablat	equ	0xFF5
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           intcon	equ	0xFF2
  2489                           postinc0	equ	0xFEE
  2490                           fsr0h	equ	0xFEA
  2491                           fsr0l	equ	0xFE9
  2492                           wreg	equ	0xFE8
  2493                           indf1	equ	0xFE7
  2494                           fsr1h	equ	0xFE2
  2495                           fsr1l	equ	0xFE1
  2496                           indf2	equ	0xFDF
  2497                           postinc2	equ	0xFDE
  2498                           postdec2	equ	0xFDD
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           pclatu	equ	0xFFB
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           postinc0	equ	0xFEE
  2512                           fsr0h	equ	0xFEA
  2513                           fsr0l	equ	0xFE9
  2514                           wreg	equ	0xFE8
  2515                           indf1	equ	0xFE7
  2516                           fsr1h	equ	0xFE2
  2517                           fsr1l	equ	0xFE1
  2518                           indf2	equ	0xFDF
  2519                           postinc2	equ	0xFDE
  2520                           postdec2	equ	0xFDD
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525                           	psect	rparam
  2526  0000                     pclatu	equ	0xFFB
  2527                           pclath	equ	0xFFA
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           postinc0	equ	0xFEE
  2536                           fsr0h	equ	0xFEA
  2537                           fsr0l	equ	0xFE9
  2538                           wreg	equ	0xFE8
  2539                           indf1	equ	0xFE7
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549                           	psect	temp
  2550  000039                     btemp:
  2551                           	opt stack 0
  2552  000039                     	ds	1
  2553  0000                     int$flags	set	btemp
  2554                           pclatu	equ	0xFFB
  2555                           pclath	equ	0xFFA
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           fsr0h	equ	0xFEA
  2565                           fsr0l	equ	0xFE9
  2566                           wreg	equ	0xFE8
  2567                           indf1	equ	0xFE7
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      56
    BANK0           160     35      51
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanIR@buf	PTR unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0    7961
                                             53 COMRAM     2     2      0
                                              0 BANK0     35    35      0
                             _ScanIR
                       _VerifySignal
                             _grabIR
                             _initIR
                       _initMotorPWM
                           _initRFID
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             14 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                               7     1      6    6968
                                             46 COMRAM     7     1      6
                            _delay_s
                             _grabIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    2051
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    2179
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead                                       5     1      4    1835
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    2007
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                          9     7      2    1275
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     253
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     394
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _grabIR                                               7     5      2      71
                                             14 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              7     7      0      94
                                             14 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_s
     _grabIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _VerifySignal
   _grabIR
   _initIR
   _initMotorPWM
   _initRFID

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      33       4       31.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      38       1       59.6%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6B       5        0.0%
DATA                 0      0      6B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 13 16:48:49 2018

                            _i 0038                             l49 013C                   ___awdiv@sign 001A  
          ___wmul@multiplicand 0011                    main@Message 0060                            l102 0328  
                          l132 0684                            u604 02C4                            u605 02C0  
                          u614 031C                            u615 0318                            u625 0374  
                          u810 0196                            u820 01A8                            u812 0198  
                          u822 01AA                            u917 039E                            u927 067E  
                          u937 056A                            u947 06DC                            u957 073C  
                          prod 000FF3                            wreg 000FE8                           l1311 05D2  
                         l1321 05F4                           l1305 05C2                           l1317 05E8  
                         l1333 061A                           l1501 04CA                           l1415 0722  
                         l1319 05F0                           l1351 0634                           l1425 074A  
                         l1417 072A                           l1337 0628                           l1329 0610  
                         l1427 074E                           l1347 0300                           l1355 064C  
                         l1373 06BA                           l1509 051A                           l1359 0664  
                         l1369 06B2                           l1393 0550                           l1385 0520  
                         l1553 0152                           l1379 06E8                           l1389 0538  
                         l1581 021A                           l1565 01C8                           l1549 0142  
                         l1399 0570                           l1575 020A                           l1559 0188  
                         l1497 04C2                           l1577 0210                           l1569 01D2  
                         l1589 0236                           _LATB 000F8A                           i2l46 006C  
                         _main 00AC                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 0039                           _stop 051E                           pclat 000FFA  
                         prodh 000FF4                           prodl 000FF3                           start 00A8  
               delay_s@seconds 0011                   ___param_bank 000010                          ?_main 0001  
              __end_of___awdiv 0632                          ?_stop 0026                ___awdiv@divisor 0017  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                  _initRFID$1272 000F  
              ___awdiv@counter 0019                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISC 000F94                          _TXREG 000FAD                __end_of_delay_s 0762  
                        main@i 0070                          tablat 000FF5                          status 000FD8  
              __initialization 0846                   __end_of_main 0250                   __end_of_stop 05AE  
               __CFG_OSC$IRCIO 000000            VerifySignal@hexByte 0018                         ??_main 0036  
                       ??_stop 002A                  __activetblptr 000002                  ?_initMotorPWM 0001  
                 ?_setMotorPWM 001D               ___awdiv@dividend 0015                         i2l1521 0068  
                       i2l1523 006A                 __CFG_WDTEN$OFF 000000                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                         _ScanIR 0384  
                       ___wmul 0800                      ??___awdiv 0019               __end_of_initRFID 0846  
                       _grabIR 06A2                         _initIR 0862                         clear_0 084C  
             ___awdiv@quotient 001B                      ??_delay_s 000F                 ??_initMotorPWM 000F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0026                         stop@mR 0028               __end_of_turnLeft 07CE  
                   __accesstop 0060        __end_of__initialization 0854                  ___rparam_used 000001  
               __pcstackCOMRAM 0001           VerifySignal@checksum 0017  __size_of_InterruptHandlerHigh 00A0  
                   __pbssBANK0 0083                        ?_ScanIR 002F                        ?___wmul 000F  
                      ?_grabIR 000F                        _CAP1CON 000F63                        ?_initIR 0001  
      __size_of_fullSpeedAhead 0070                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_initRFID 0001           __size_of_setMotorPWM 0134             __size_of_turnRight 0036  
         __end_of_initMotorPWM 0800                        __Hparam 0000                        __Lparam 0000  
              __size_of_ScanIR 00E6                        ___awdiv 05AE                __size_of___wmul 0026  
              __size_of_grabIR 0064                __size_of_initIR 0010                        __pcinit 0846  
                      _delay_s 0706                        __ramtop 0300                      ?_turnLeft 002B  
                      __ptext0 00AC                        __ptext1 0826                        __ptext2 07CE  
                      __ptext3 0862                        __ptext4 046A                        __ptext5 0384  
                      __ptext6 0762                        __ptext7 0798                        __ptext8 0632  
                      __ptext9 051E                        grabIR@i 0015                  ?_VerifySignal 000F  
         end_of_initialization 0854             setMotorPWM@PWMduty 0024                     ??_initRFID 000F  
                __Lmediumconst 0000                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     ??_turnLeft 002F  
            __end_of_turnRight 0798                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                 ??_VerifySignal 0011  
             fullSpeedAhead@mL 0026               fullSpeedAhead@mR 0028                      _TXSTAbits 000FAC  
                    ScanIR@buf 0033                     main@motorL 0071                     main@motorR 007A  
               __end_of_ScanIR 046A                grabIR@IR_signal 0013                 _fullSpeedAhead 0632  
               _ReceivedString 0083                 __end_of___wmul 0826                    _BAUDCONbits 000FAA  
               __end_of_grabIR 0706                 __end_of_initIR 0872            start_initialization 0846  
           VerifySignal@Signal 000F          __size_of_initMotorPWM 0032             main@SignalStrength 006A  
 __end_of_InterruptHandlerHigh 00A8                       ??_ScanIR 0035         __end_of_fullSpeedAhead 06A2  
                     ??___wmul 0013                       ??_grabIR 0011                       ??_initIR 000F  
                 _initMotorPWM 07CE                    __pbssCOMRAM 0038                  __pcstackBANK0 0060  
            __size_of_initRFID 0020                ?_fullSpeedAhead 0026                      __pintcode 0008  
         __end_of_VerifySignal 051E                       ?___awdiv 0015                       ?_delay_s 0001  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68              __size_of_turnLeft 0036  
                ??_setMotorPWM 001F                 ___wmul@product 0013                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                    turnRight@mL 002B                    turnRight@mR 002D  
                     _PIR1bits 000F9E                       _RCONbits 000FD0              ___wmul@multiplier 000F  
                 setMotorPWM@m 001D           _InterruptHandlerHigh 0008                       ScanIR@mL 002F  
                     ScanIR@mR 0031                      _turnRight 0762            __end_of_setMotorPWM 0384  
                     __Hrparam 0000                       __Lrparam 0000               __size_of___awdiv 0084  
                   _ANSEL0bits 000FB8               __size_of_delay_s 005C          ?_InterruptHandlerHigh 0001  
                   ?_turnRight 002B                       __ptext10 0250                       __ptext11 0800  
                     __ptext12 05AE                       __ptext13 06A2                       __ptext14 0706  
                     _initRFID 0826                  __size_of_main 01A4                  __size_of_stop 0090  
                   turnLeft@mL 002B                     turnLeft@mR 002D          __size_of_VerifySignal 00B4  
                     delay_s@i 0012                       delay_s@j 0014                       int$flags 0039  
                     main@mode 006F                       main@test 006D                       _turnLeft 0798  
                VerifySignal@i 001A                     _INTCONbits 000FF2                    _setMotorPWM 0250  
                 _VerifySignal 046A                       intlevel2 0000               ??_fullSpeedAhead 002A  
                   _OSCCONbits 000FD3         ??_InterruptHandlerHigh 0001                    ??_turnRight 002F  
