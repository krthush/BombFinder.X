

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Mar 17 19:49:01 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           	psect	smallconst
    50  000300                     __psmallconst:
    51                           	opt stack 0
    52  000300  00                 	db	0
    53  000301                     _dpowers:
    54                           	opt stack 0
    55  000301  0001               	dw	1
    56  000303  000A               	dw	10
    57  000305  0064               	dw	100
    58  000307  03E8               	dw	1000
    59  000309  2710               	dw	10000
    60  00030B                     __end_of_dpowers:
    61                           	opt stack 0
    62  00030B                     _ClearSignalThreshold:
    63                           	opt stack 0
    64  00030B  01F4               	dw	500
    65  00030D                     __end_of_ClearSignalThreshold:
    66                           	opt stack 0
    67  00030D                     _DirectionFoundThreshold:
    68                           	opt stack 0
    69  00030D  07D0               	dw	2000
    70  00030F                     __end_of_DirectionFoundThreshold:
    71                           	opt stack 0
    72  00030F                     _DirectionFoundTolerance:
    73                           	opt stack 0
    74  00030F  03E8               	dw	1000
    75  000311                     __end_of_DirectionFoundTolerance:
    76                           	opt stack 0
    77  0000                     _CAP1BUFH	set	3945
    78  0000                     _CAP1BUFL	set	3944
    79  0000                     _CAP1CON	set	3939
    80  0000                     _CAP2BUFH	set	3943
    81  0000                     _CAP2BUFL	set	3942
    82  0000                     _CAP2CON	set	3938
    83  0000                     _LATAbits	set	3977
    84  0000                     _LATB	set	3978
    85  0000                     _LATCbits	set	3979
    86  0000                     _LATDbits	set	3980
    87  0000                     _LATEbits	set	3981
    88  0000                     _PTCON0	set	3967
    89  0000                     _PTCON1	set	3966
    90  0000                     _PTPERH	set	3962
    91  0000                     _PTPERL	set	3963
    92  0000                     _PWMCON0	set	3951
    93  0000                     _PWMCON1	set	3950
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISBbits	set	3987
    96  0000                     _TRISC	set	3988
    97  0000                     _TRISCbits	set	3988
    98  0000                     _TRISDbits	set	3989
    99  0000                     _TRISEbits	set	3990
   100  0000                     _PDC0H	set	3960
   101  0000                     _PDC0L	set	3961
   102  0000                     _PDC1H	set	3958
   103  0000                     _PDC1L	set	3959
   104  0000                     _ANSEL0bits	set	4024
   105  0000                     _BAUDCONbits	set	4010
   106  0000                     _IPR1bits	set	3999
   107  0000                     _OSCCON	set	4051
   108  0000                     _OSCCONbits	set	4051
   109  0000                     _PIE1bits	set	3997
   110  0000                     _PIR1bits	set	3998
   111  0000                     _RCONbits	set	4048
   112  0000                     _RCREG	set	4014
   113  0000                     _RCSTAbits	set	4011
   114  0000                     _SPBRG	set	4015
   115  0000                     _SPBRGH	set	4016
   116  0000                     _T5CON	set	4023
   117  0000                     _TXREG	set	4013
   118  0000                     _TXSTAbits	set	4012
   119  0000                     _INTCONbits	set	4082
   120  000311                     STR_3:
   121  000311  20                 	db	32
   122  000312  20                 	db	32
   123  000313  20                 	db	32
   124  000314  20                 	db	32
   125  000315  20                 	db	32
   126  000316  20                 	db	32
   127  000317  46                 	db	70	;'F'
   128  000318  6F                 	db	111	;'o'
   129  000319  75                 	db	117	;'u'
   130  00031A  6E                 	db	110	;'n'
   131  00031B  64                 	db	100	;'d'
   132  00031C  20                 	db	32
   133  00031D  42                 	db	66	;'B'
   134  00031E  6F                 	db	111	;'o'
   135  00031F  6D                 	db	109	;'m'
   136  000320  62                 	db	98	;'b'
   137  000321  21                 	db	33
   138  000322  00                 	db	0
   139  000323                     STR_5:
   140  000323  20                 	db	32
   141  000324  20                 	db	32
   142  000325  20                 	db	32
   143  000326  20                 	db	32
   144  000327  20                 	db	32
   145  000328  20                 	db	32
   146  000329  20                 	db	32
   147  00032A  53                 	db	83	;'S'
   148  00032B  65                 	db	101	;'e'
   149  00032C  61                 	db	97	;'a'
   150  00032D  72                 	db	114	;'r'
   151  00032E  63                 	db	99	;'c'
   152  00032F  68                 	db	104	;'h'
   153  000330  69                 	db	105	;'i'
   154  000331  6E                 	db	110	;'n'
   155  000332  67                 	db	103	;'g'
   156  000333  00                 	db	0
   157  000334                     STR_4:
   158  000334  20                 	db	32
   159  000335  20                 	db	32
   160  000336  20                 	db	32
   161  000337  20                 	db	32
   162  000338  20                 	db	32
   163  000339  20                 	db	32
   164  00033A  47                 	db	71	;'G'
   165  00033B  6F                 	db	111	;'o'
   166  00033C  69                 	db	105	;'i'
   167  00033D  6E                 	db	110	;'n'
   168  00033E  67                 	db	103	;'g'
   169  00033F  20                 	db	32
   170  000340  48                 	db	72	;'H'
   171  000341  6F                 	db	111	;'o'
   172  000342  6D                 	db	109	;'m'
   173  000343  65                 	db	101	;'e'
   174  000344  00                 	db	0
   175  000345                     STR_2:
   176  000345  20                 	db	32
   177  000346  20                 	db	32
   178  000347  20                 	db	32
   179  000348  20                 	db	32
   180  000349  20                 	db	32
   181  00034A  20                 	db	32
   182  00034B  20                 	db	32
   183  00034C  20                 	db	32
   184  00034D  54                 	db	84	;'T'
   185  00034E  6F                 	db	111	;'o'
   186  00034F  20                 	db	32
   187  000350  47                 	db	71	;'G'
   188  000351  6F                 	db	111	;'o'
   189  000352  21                 	db	33
   190  000353  00                 	db	0
   191  000354                     STR_1:
   192  000354  20                 	db	32
   193  000355  20                 	db	32
   194  000356  20                 	db	32
   195  000357  20                 	db	32
   196  000358  20                 	db	32
   197  000359  20                 	db	32
   198  00035A  20                 	db	32
   199  00035B  20                 	db	32
   200  00035C  52                 	db	82	;'R'
   201  00035D  65                 	db	101	;'e'
   202  00035E  61                 	db	97	;'a'
   203  00035F  64                 	db	100	;'d'
   204  000360  79                 	db	121	;'y'
   205  000361  00                 	db	0
   206  000362                     STR_6:
   207  000362  20                 	db	32
   208  000363  20                 	db	32
   209  000364  20                 	db	32
   210  000365  20                 	db	32
   211  000366  20                 	db	32
   212  000367  25                 	db	37
   213  000368  64                 	db	100	;'d'
   214  000369  2C                 	db	44
   215  00036A  20                 	db	32
   216  00036B  25                 	db	37
   217  00036C  64                 	db	100	;'d'
   218  00036D  00                 	db	0
   219                           
   220                           ; #config settings
   221  00036E  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  0001A2                     __pcinit:
   225                           	opt stack 0
   226  0001A2                     start_initialization:
   227                           	opt stack 0
   228  0001A2                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Clear objects allocated to BANK1 (17 bytes)
   232  0001A2  EE01  F0E8         	lfsr	0,__pbssBANK1
   233  0001A6  0E11               	movlw	17
   234  0001A8                     clear_0:
   235  0001A8  6AEE               	clrf	postinc0,c
   236  0001AA  06E8               	decf	wreg,f,c
   237  0001AC  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to BANK0 (16 bytes)
   240  0001AE  EE00  F0A4         	lfsr	0,__pbssBANK0
   241  0001B2  0E10               	movlw	16
   242  0001B4                     clear_1:
   243  0001B4  6AEE               	clrf	postinc0,c
   244  0001B6  06E8               	decf	wreg,f,c
   245  0001B8  E1FD               	bnz	clear_1
   246                           
   247                           ; Clear objects allocated to COMRAM (2 bytes)
   248  0001BA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   249  0001BC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   250  0001BE                     end_of_initialization:
   251                           	opt stack 0
   252  0001BE                     __end_of__initialization:
   253                           	opt stack 0
   254  0001BE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   255  0001C0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   256  0001C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   257  0001C4  6EF8               	movwf	tblptru,c
   258  0001C6  0100               	movlb	0
   259  0001C8  EF62  F005         	goto	_main	;jump to C main() function
   260                           tblptru	equ	0xFF8
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           
   264                           	psect	bssCOMRAM
   265  00003A                     __pbssCOMRAM:
   266                           	opt stack 0
   267  00003A                     _i:
   268                           	opt stack 0
   269  00003A                     	ds	1
   270  00003B                     _mode:
   271                           	opt stack 0
   272  00003B                     	ds	1
   273                           tblptru	equ	0xFF8
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	bssBANK0
   278  0000A4                     __pbssBANK0:
   279                           	opt stack 0
   280  0000A4                     ScanIR@F3878:
   281                           	opt stack 0
   282  0000A4                     	ds	4
   283  0000A8                     ScanWithRange@F3888:
   284                           	opt stack 0
   285  0000A8                     	ds	4
   286  0000AC                     ScanWithRange@F3890:
   287                           	opt stack 0
   288  0000AC                     	ds	4
   289  0000B0                     ScanWithRange@F3892:
   290                           	opt stack 0
   291  0000B0                     	ds	4
   292                           tblptru	equ	0xFF8
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	bssBANK1
   297  0001E8                     __pbssBANK1:
   298                           	opt stack 0
   299  0001E8                     _RFID_Read:
   300                           	opt stack 0
   301  0001E8                     	ds	1
   302  0001E9                     _ReceivedString:
   303                           	opt stack 0
   304  0001E9                     	ds	16
   305                           tblptru	equ	0xFF8
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	cstackBANK1
   310  000100                     __pcstackBANK1:
   311                           	opt stack 0
   312  000100                     main@MoveType:
   313                           	opt stack 0
   314                           
   315                           ; 100 bytes @ 0x0
   316  000100                     	ds	100
   317  000164                     main@MoveTime:
   318                           	opt stack 0
   319                           
   320                           ; 100 bytes @ 0x64
   321  000164                     	ds	100
   322  0001C8                     main@Message:
   323                           	opt stack 0
   324                           
   325                           ; 10 bytes @ 0xC8
   326  0001C8                     	ds	10
   327  0001D2                     main@ScanAngle:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0xD2
   331  0001D2                     	ds	1
   332  0001D3                     main@DirectionFound:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0xD3
   336  0001D3                     	ds	1
   337  0001D4                     main@i:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0xD4
   341  0001D4                     	ds	1
   342  0001D5                     main@Move:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0xD5
   346  0001D5                     	ds	1
   347  0001D6                     main@mL:
   348                           	opt stack 0
   349                           
   350                           ; 9 bytes @ 0xD6
   351  0001D6                     	ds	9
   352  0001DF                     main@mR:
   353                           	opt stack 0
   354                           
   355                           ; 9 bytes @ 0xDF
   356  0001DF                     	ds	9
   357                           tblptru	equ	0xFF8
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           	psect	cstackBANK0
   362  000060                     __pcstackBANK0:
   363                           	opt stack 0
   364  000060                     setMotorPWM@PWMduty:
   365                           	opt stack 0
   366  000060                     sprintf@ap:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x0
   370  000060                     	ds	2
   371  000062                     sprintf@flag:
   372                           	opt stack 0
   373  000062                     stop@mL:
   374                           	opt stack 0
   375  000062                     fullSpeedAhead@mL:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x2
   379  000062                     	ds	1
   380  000063                     sprintf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x3
   384  000063                     	ds	1
   385  000064                     stop@mR:
   386                           	opt stack 0
   387  000064                     fullSpeedAhead@mR:
   388                           	opt stack 0
   389  000064                     sprintf@val:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x4
   393  000064                     	ds	2
   394  000066                     sprintf@c:
   395                           	opt stack 0
   396  000066                     turnLeft@mL:
   397                           	opt stack 0
   398  000066                     turnRight@mL:
   399                           	opt stack 0
   400  000066                     fullSpeedBack@mL:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x6
   404  000066                     	ds	2
   405  000068                     turnLeft@mR:
   406                           	opt stack 0
   407  000068                     turnRight@mR:
   408                           	opt stack 0
   409  000068                     fullSpeedBack@mR:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x8
   413  000068                     	ds	2
   414  00006A                     ScanIR@mL:
   415                           	opt stack 0
   416  00006A                     ScanWithRange@mL:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0xA
   420  00006A                     	ds	2
   421  00006C                     ScanIR@mR:
   422                           	opt stack 0
   423  00006C                     ScanWithRange@mR:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0xC
   427  00006C                     	ds	2
   428  00006E                     ScanWithRange@tenth_seconds:
   429                           	opt stack 0
   430  00006E                     ScanIR@Move:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0xE
   434  00006E                     	ds	1
   435  00006F                     ScanWithRange@MoveTimeEntry:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xF
   439  00006F                     	ds	1
   440  000070                     ScanIR@MoveTime:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x10
   444  000070                     	ds	1
   445  000071                     ??_ScanWithRange:
   446                           
   447                           ; 0 bytes @ 0x11
   448  000071                     	ds	1
   449  000072                     ScanIR@MoveType:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x12
   453  000072                     	ds	1
   454  000073                     ScanWithRange@ResultFalseL:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x13
   458  000073                     	ds	1
   459  000074                     ??_ScanIR:
   460  000074                     ScanWithRange@ResultFalseC:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x14
   464  000074                     	ds	1
   465  000075                     ScanWithRange@ResultFalseR:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x15
   469  000075                     	ds	1
   470  000076                     ScanWithRange@SensorResultL:
   471                           	opt stack 0
   472  000076                     ScanIR@buf:
   473                           	opt stack 0
   474                           
   475                           ; 40 bytes @ 0x16
   476  000076                     	ds	4
   477  00007A                     ScanWithRange@SensorResultC:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x1A
   481  00007A                     	ds	4
   482  00007E                     ScanWithRange@SensorResultR:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x1E
   486  00007E                     	ds	32
   487  00009E                     ScanIR@SensorResult:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x3E
   491  00009E                     	ds	4
   492  0000A2                     ??_main:
   493                           
   494                           ; 0 bytes @ 0x42
   495  0000A2                     	ds	2
   496                           tblptru	equ	0xFF8
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           
   500                           	psect	cstackCOMRAM
   501  000001                     __pcstackCOMRAM:
   502                           	opt stack 0
   503  000001                     ??i2_delay_tenth_s:
   504                           
   505                           ; 0 bytes @ 0x0
   506  000001                     	ds	1
   507  000002                     i2delay_tenth_s@tenth_seconds:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x1
   511  000002                     	ds	1
   512  000003                     i2delay_tenth_s@i:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x2
   516  000003                     	ds	2
   517  000005                     ??_InterruptHandlerHigh:
   518                           
   519                           ; 0 bytes @ 0x4
   520  000005                     	ds	14
   521  000013                     ??_InterruptHandlerLow:
   522                           
   523                           ; 0 bytes @ 0x12
   524  000013                     	ds	17
   525  000024                     ??_delay_tenth_s:
   526  000024                     ??_LCDout:
   527  000024                     ?_grabLeftIR:
   528                           	opt stack 0
   529  000024                     ?_grabRightIR:
   530                           	opt stack 0
   531  000024                     ?___wmul:
   532                           	opt stack 0
   533  000024                     ?___lwdiv:
   534                           	opt stack 0
   535  000024                     enableSensor@status:
   536                           	opt stack 0
   537  000024                     VerifySignal@Signal:
   538                           	opt stack 0
   539  000024                     ___wmul@multiplier:
   540                           	opt stack 0
   541  000024                     ___lwdiv@dividend:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x23
   545  000024                     	ds	1
   546  000025                     delay_tenth_s@tenth_seconds:
   547                           	opt stack 0
   548  000025                     enableSensor@sensor:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x24
   552  000025                     	ds	1
   553  000026                     ??_VerifySignal:
   554  000026                     ??_grabLeftIR:
   555  000026                     ??_grabRightIR:
   556  000026                     delay_tenth_s@i:
   557                           	opt stack 0
   558  000026                     ___wmul@multiplicand:
   559                           	opt stack 0
   560  000026                     ___lwdiv@divisor:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x25
   564  000026                     	ds	1
   565  000027                     LCDout@number:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x26
   569  000027                     	ds	1
   570  000028                     SendLCD@type:
   571                           	opt stack 0
   572  000028                     ___wmul@product:
   573                           	opt stack 0
   574  000028                     ___lwdiv@quotient:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x27
   578  000028                     	ds	1
   579  000029                     SendLCD@Byte:
   580                           	opt stack 0
   581  000029                     grabRightIR@IR_signal:
   582                           	opt stack 0
   583  000029                     grabLeftIR@IR_signal:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x28
   587  000029                     	ds	1
   588  00002A                     ??_initLCD:
   589  00002A                     ?___awdiv:
   590                           	opt stack 0
   591  00002A                     SetLine@line:
   592                           	opt stack 0
   593  00002A                     ___lwdiv@counter:
   594                           	opt stack 0
   595  00002A                     LCD_String@string:
   596                           	opt stack 0
   597  00002A                     ___awdiv@dividend:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x29
   601  00002A                     	ds	1
   602  00002B                     ?___lwmod:
   603                           	opt stack 0
   604  00002B                     grabRightIR@i:
   605                           	opt stack 0
   606  00002B                     grabLeftIR@i:
   607                           	opt stack 0
   608  00002B                     ___lwmod@dividend:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x2A
   612  00002B                     	ds	1
   613  00002C                     VerifySignal@checksum:
   614                           	opt stack 0
   615  00002C                     ___awdiv@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2B
   619  00002C                     	ds	1
   620  00002D                     VerifySignal@hexByte:
   621                           	opt stack 0
   622  00002D                     ___lwmod@divisor:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x2C
   626  00002D                     	ds	1
   627  00002E                     ___awdiv@counter:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x2D
   631  00002E                     	ds	1
   632  00002F                     VerifySignal@i:
   633                           	opt stack 0
   634  00002F                     ___awdiv@sign:
   635                           	opt stack 0
   636  00002F                     ___lwmod@counter:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x2E
   640  00002F                     	ds	1
   641  000030                     ?_sprintf:
   642                           	opt stack 0
   643  000030                     sprintf@sp:
   644                           	opt stack 0
   645  000030                     ___awdiv@quotient:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x2F
   649  000030                     	ds	2
   650  000032                     setMotorPWM@m:
   651                           	opt stack 0
   652  000032                     sprintf@f:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x31
   656  000032                     	ds	2
   657  000034                     ??_setMotorPWM:
   658                           
   659                           ; 0 bytes @ 0x33
   660  000034                     	ds	4
   661  000038                     ??_sprintf:
   662                           
   663                           ; 0 bytes @ 0x37
   664  000038                     	ds	1
   665  000039                     
   666                           ; 0 bytes @ 0x38
   667  000039                     	ds	1
   668  00003A                     tblptru	equ	0xFF8
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           
   672                           ; 0 bytes @ 0x39
   673 ;;
   674 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   675 ;;
   676 ;; *************** function _main *****************
   677 ;; Defined at:
   678 ;;		line 51 in file "main.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;		None
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  MoveTime      100  100[BANK1 ] unsigned char [100]
   683 ;;  MoveType      100    0[BANK1 ] unsigned char [100]
   684 ;;  Message        10  200[BANK1 ] unsigned char [10]
   685 ;;  mR              9  223[BANK1 ] struct DC_motor
   686 ;;  mL              9  214[BANK1 ] struct DC_motor
   687 ;;  Move            1  213[BANK1 ] unsigned char 
   688 ;;  i               1  212[BANK1 ] unsigned char 
   689 ;;  DirectionFou    1  211[BANK1 ] char 
   690 ;;  ScanAngle       1  210[BANK1 ] unsigned char 
   691 ;; Return value:  Size  Location     Type
   692 ;;		None               void
   693 ;; Registers used:
   694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   700 ;;      Params:         0       0       0       0
   701 ;;      Locals:         0       0     232       0
   702 ;;      Temps:          0       2       0       0
   703 ;;      Totals:         0       2     232       0
   704 ;;Total ram usage:      234 bytes
   705 ;; Hardware stack levels required when called:    8
   706 ;; This function calls:
   707 ;;		_LCD_String
   708 ;;		_ScanIR
   709 ;;		_ScanWithRange
   710 ;;		_SendLCD
   711 ;;		_SetLine
   712 ;;		_VerifySignal
   713 ;;		_delay_tenth_s
   714 ;;		_enableSensor
   715 ;;		_fullSpeedAhead
   716 ;;		_fullSpeedBack
   717 ;;		_initIR
   718 ;;		_initLCD
   719 ;;		_initMotorPWM
   720 ;;		_initRFID
   721 ;;		_stop
   722 ;; This function is called by:
   723 ;;		Startup code after reset
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text0
   728  000AC4                     __ptext0:
   729                           	opt stack 0
   730  000AC4                     _main:
   731                           	opt stack 23
   732                           
   733                           ;main.c: 54: unsigned char Message[10];
   734                           ;main.c: 55: unsigned char i=0;
   735                           
   736                           ;incstack = 0
   737  000AC4  0E00               	movlw	0
   738  000AC6  0101               	movlb	1	; () banked
   739  000AC8  6FD4               	movwf	main@i& (0+255),b
   740                           
   741                           ;main.c: 56: signed char DirectionFound=0;
   742  000ACA  0E00               	movlw	0
   743  000ACC  0101               	movlb	1	; () banked
   744  000ACE  6FD3               	movwf	main@DirectionFound& (0+255),b
   745                           
   746                           ;main.c: 57: char MoveTime[100];
   747                           ;main.c: 58: char MoveType[100];
   748                           ;main.c: 59: char Move=0;
   749  000AD0  0E00               	movlw	0
   750  000AD2  0101               	movlb	1	; () banked
   751  000AD4  6FD5               	movwf	main@Move& (0+255),b
   752                           
   753                           ;main.c: 61: unsigned char ScanAngle=6;
   754  000AD6  0E06               	movlw	6
   755  000AD8  0101               	movlb	1	; () banked
   756  000ADA  6FD2               	movwf	main@ScanAngle& (0+255),b
   757                           
   758                           ; BSR set to: 1
   759                           ;main.c: 64: INTCONbits.GIEH=1;
   760  000ADC  8EF2               	bsf	intcon,7,c	;volatile
   761                           
   762                           ; BSR set to: 1
   763                           ;main.c: 65: INTCONbits.GIEL=1;
   764  000ADE  8CF2               	bsf	intcon,6,c	;volatile
   765                           
   766                           ; BSR set to: 1
   767                           ;main.c: 66: INTCONbits.PEIE=1;
   768  000AE0  8CF2               	bsf	intcon,6,c	;volatile
   769                           
   770                           ; BSR set to: 1
   771                           ;main.c: 67: RCONbits.IPEN=1;
   772  000AE2  8ED0               	bsf	4048,7,c	;volatile
   773                           
   774                           ; BSR set to: 1
   775                           ;main.c: 70: IPR1bits.RCIP=0;
   776  000AE4  9A9F               	bcf	3999,5,c	;volatile
   777                           
   778                           ; BSR set to: 1
   779                           ;main.c: 71: PIE1bits.RCIE=1;
   780  000AE6  8A9D               	bsf	3997,5,c	;volatile
   781                           
   782                           ; BSR set to: 1
   783                           ;main.c: 74: TRISCbits.RC3=1;
   784  000AE8  8694               	bsf	3988,3,c	;volatile
   785                           
   786                           ; BSR set to: 1
   787                           ;main.c: 75: INTCONbits.INT0IE=1;
   788  000AEA  88F2               	bsf	intcon,4,c	;volatile
   789                           
   790                           ; BSR set to: 1
   791                           ;main.c: 78: PIR1bits.RC1IF=0;
   792  000AEC  9A9E               	bcf	3998,5,c	;volatile
   793                           
   794                           ; BSR set to: 1
   795                           ;main.c: 79: INTCONbits.INT0IF=0;
   796  000AEE  92F2               	bcf	intcon,1,c	;volatile
   797                           
   798                           ;main.c: 82: struct DC_motor mL, mR;
   799                           ;main.c: 83: mL.power=0;
   800  000AF0  0E00               	movlw	0
   801  000AF2  0101               	movlb	1	; () banked
   802  000AF4  6FD6               	movwf	main@mL& (0+255),b
   803                           
   804                           ;main.c: 84: mL.direction=1;
   805  000AF6  0E01               	movlw	1
   806  000AF8  0101               	movlb	1	; () banked
   807  000AFA  6FD7               	movwf	(main@mL+1)& (0+255),b
   808                           
   809                           ; BSR set to: 1
   810                           ;main.c: 85: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   811  000AFC  0E79               	movlw	121
   812  000AFE  0101               	movlb	1	; () banked
   813  000B00  6FD8               	movwf	(main@mL+2)& (0+255),b
   814  000B02  0E0F               	movlw	15
   815  000B04  0101               	movlb	1	; () banked
   816  000B06  6FD9               	movwf	(main@mL+3)& (0+255),b
   817                           
   818                           ; BSR set to: 1
   819                           ;main.c: 86: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   820  000B08  0E78               	movlw	120
   821  000B0A  0101               	movlb	1	; () banked
   822  000B0C  6FDA               	movwf	(main@mL+4)& (0+255),b
   823  000B0E  0E0F               	movlw	15
   824  000B10  0101               	movlb	1	; () banked
   825  000B12  6FDB               	movwf	(main@mL+5)& (0+255),b
   826                           
   827                           ;main.c: 87: mL.dir_pin=0;
   828  000B14  0E00               	movlw	0
   829  000B16  0101               	movlb	1	; () banked
   830  000B18  6FDC               	movwf	(main@mL+6)& (0+255),b
   831                           
   832                           ;main.c: 88: mL.PWMperiod=199;
   833  000B1A  0E00               	movlw	0
   834  000B1C  0101               	movlb	1	; () banked
   835  000B1E  6FDE               	movwf	(main@mL+8)& (0+255),b
   836  000B20  0EC7               	movlw	199
   837  000B22  6FDD               	movwf	(main@mL+7)& (0+255),b
   838                           
   839                           ;main.c: 90: mR.power=0;
   840  000B24  0E00               	movlw	0
   841  000B26  0101               	movlb	1	; () banked
   842  000B28  6FDF               	movwf	main@mR& (0+255),b
   843                           
   844                           ;main.c: 91: mR.direction=1;
   845  000B2A  0E01               	movlw	1
   846  000B2C  0101               	movlb	1	; () banked
   847  000B2E  6FE0               	movwf	(main@mR+1)& (0+255),b
   848                           
   849                           ; BSR set to: 1
   850                           ;main.c: 92: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   851  000B30  0E77               	movlw	119
   852  000B32  0101               	movlb	1	; () banked
   853  000B34  6FE1               	movwf	(main@mR+2)& (0+255),b
   854  000B36  0E0F               	movlw	15
   855  000B38  0101               	movlb	1	; () banked
   856  000B3A  6FE2               	movwf	(main@mR+3)& (0+255),b
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 93: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   860  000B3C  0E76               	movlw	118
   861  000B3E  0101               	movlb	1	; () banked
   862  000B40  6FE3               	movwf	(main@mR+4)& (0+255),b
   863  000B42  0E0F               	movlw	15
   864  000B44  0101               	movlb	1	; () banked
   865  000B46  6FE4               	movwf	(main@mR+5)& (0+255),b
   866                           
   867                           ;main.c: 94: mR.dir_pin=2;
   868  000B48  0E02               	movlw	2
   869  000B4A  0101               	movlb	1	; () banked
   870  000B4C  6FE5               	movwf	(main@mR+6)& (0+255),b
   871                           
   872                           ;main.c: 95: mR.PWMperiod=199;
   873  000B4E  0E00               	movlw	0
   874  000B50  0101               	movlb	1	; () banked
   875  000B52  6FE7               	movwf	(main@mR+8)& (0+255),b
   876  000B54  0EC7               	movlw	199
   877  000B56  6FE6               	movwf	(main@mR+7)& (0+255),b
   878                           
   879                           ;main.c: 97: OSCCON = 0x72;
   880  000B58  0E72               	movlw	114
   881  000B5A  6ED3               	movwf	4051,c	;volatile
   882  000B5C                     l83:
   883  000B5C  B4D3               	btfsc	4051,2,c	;volatile
   884  000B5E  D1F2               	goto	l3592
   885  000B60  D7FD               	goto	l83
   886  000B62                     l3454:
   887                           
   888                           ;main.c: 109: stop(&mL, &mR);
   889  000B62  0ED6               	movlw	low main@mL
   890  000B64  0100               	movlb	0	; () banked
   891  000B66  6F62               	movwf	stop@mL& (0+255),b
   892  000B68  0E01               	movlw	high main@mL
   893  000B6A  0100               	movlb	0	; () banked
   894  000B6C  6F63               	movwf	(stop@mL+1)& (0+255),b
   895  000B6E  0EDF               	movlw	low main@mR
   896  000B70  0100               	movlb	0	; () banked
   897  000B72  6F64               	movwf	stop@mR& (0+255),b
   898  000B74  0E01               	movlw	high main@mR
   899  000B76  0100               	movlb	0	; () banked
   900  000B78  6F65               	movwf	(stop@mR+1)& (0+255),b
   901  000B7A  EC18  F00C         	call	_stop	;wreg free
   902                           
   903                           ;main.c: 111: SendLCD(0b00000001,0);
   904  000B7E  0E00               	movlw	0
   905  000B80  6E28               	movwf	SendLCD@type,c
   906  000B82  0E01               	movlw	1
   907  000B84  ECB9  F000         	call	_SendLCD
   908                           
   909                           ;main.c: 112: _delay((unsigned long)((50)*(8000000/4000000.0)));
   910  000B88  0E21               	movlw	33
   911  000B8A                     u2887:
   912  000B8A  2EE8               	decfsz	wreg,f,c
   913  000B8C  D7FE               	goto	u2887
   914  000B8E  F000               	nop	
   915                           
   916                           ;main.c: 113: SendLCD(0b00000010,0);
   917  000B90  0E00               	movlw	0
   918  000B92  6E28               	movwf	SendLCD@type,c
   919  000B94  0E02               	movlw	2
   920  000B96  ECB9  F000         	call	_SendLCD
   921                           
   922                           ;main.c: 114: _delay((unsigned long)((2)*(8000000/4000.0)));
   923  000B9A  0E06               	movlw	6
   924  000B9C  0100               	movlb	0	; () banked
   925  000B9E  6FA2               	movwf	??_main& (0+255),b
   926  000BA0  0E30               	movlw	48
   927  000BA2                     u2897:
   928  000BA2  2EE8               	decfsz	wreg,f,c
   929  000BA4  D7FE               	goto	u2897
   930  000BA6  2FA2               	decfsz	??_main& (0+255),f,b
   931  000BA8  D7FC               	goto	u2897
   932  000BAA  D000               	nop2	
   933                           
   934                           ;main.c: 115: SetLine(1);
   935  000BAC  0E01               	movlw	1
   936  000BAE  ECA1  F000         	call	_SetLine
   937                           
   938                           ;main.c: 116: LCD_String("        Ready");
   939  000BB2  0E54               	movlw	low STR_1
   940  000BB4  6E2A               	movwf	LCD_String@string,c
   941  000BB6  0E03               	movlw	high STR_1
   942  000BB8  6E2B               	movwf	LCD_String@string+1,c
   943  000BBA  EC6D  F000         	call	_LCD_String	;wreg free
   944                           
   945                           ;main.c: 117: SetLine(2);
   946  000BBE  0E02               	movlw	2
   947  000BC0  ECA1  F000         	call	_SetLine
   948                           
   949                           ;main.c: 118: LCD_String("        To Go!");
   950  000BC4  0E45               	movlw	low STR_2
   951  000BC6  6E2A               	movwf	LCD_String@string,c
   952  000BC8  0E03               	movlw	high STR_2
   953  000BCA  6E2B               	movwf	LCD_String@string+1,c
   954  000BCC  EC6D  F000         	call	_LCD_String	;wreg free
   955                           
   956                           ;main.c: 120: break;
   957  000BD0  D1B9               	goto	l3592
   958  000BD2                     l3472:
   959                           
   960                           ;main.c: 125: initMotorPWM();
   961  000BD2  EC88  F000         	call	_initMotorPWM	;wreg free
   962                           
   963                           ;main.c: 126: initRFID();
   964  000BD6  EC1D  F001         	call	_initRFID	;wreg free
   965                           
   966                           ;main.c: 127: initLCD();
   967  000BDA  EC60  F00B         	call	_initLCD	;wreg free
   968                           
   969                           ;main.c: 128: initIR();
   970  000BDE  EC0C  F001         	call	_initIR	;wreg free
   971                           
   972                           ;main.c: 130: enableSensor(0, 1);
   973  000BE2  0E01               	movlw	1
   974  000BE4  6E24               	movwf	enableSensor@status,c
   975  000BE6  0E00               	movlw	0
   976  000BE8  ECE6  F000         	call	_enableSensor
   977                           
   978                           ;main.c: 131: enableSensor(1, 1);
   979  000BEC  0E01               	movlw	1
   980  000BEE  6E24               	movwf	enableSensor@status,c
   981  000BF0  0E01               	movlw	1
   982  000BF2  ECE6  F000         	call	_enableSensor
   983                           
   984                           ;main.c: 134: fullSpeedAhead(&mL, &mR);
   985  000BF6  0ED6               	movlw	low main@mL
   986  000BF8  0100               	movlb	0	; () banked
   987  000BFA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
   988  000BFC  0E01               	movlw	high main@mL
   989  000BFE  0100               	movlb	0	; () banked
   990  000C00  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
   991  000C02  0EDF               	movlw	low main@mR
   992  000C04  0100               	movlb	0	; () banked
   993  000C06  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
   994  000C08  0E01               	movlw	high main@mR
   995  000C0A  0100               	movlb	0	; () banked
   996  000C0C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
   997  000C0E  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
   998                           
   999                           ;main.c: 135: delay_tenth_s(1);
  1000  000C12  0E01               	movlw	1
  1001  000C14  EC48  F00E         	call	_delay_tenth_s
  1002  000C18  D194               	goto	l3588
  1003  000C1A                     l3488:
  1004                           
  1005                           ;main.c: 147: if (DirectionFound==-1) {
  1006  000C1A  0101               	movlb	1	; () banked
  1007  000C1C  29D3               	incf	main@DirectionFound& (0+255),w,b
  1008  000C1E  A4D8               	btfss	status,2,c
  1009  000C20  D02E               	goto	l3500
  1010                           
  1011                           ; BSR set to: 1
  1012                           ;main.c: 152: fullSpeedAhead(&mL, &mR);
  1013  000C22  0ED6               	movlw	low main@mL
  1014  000C24  0100               	movlb	0	; () banked
  1015  000C26  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1016  000C28  0E01               	movlw	high main@mL
  1017  000C2A  0100               	movlb	0	; () banked
  1018  000C2C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1019  000C2E  0EDF               	movlw	low main@mR
  1020  000C30  0100               	movlb	0	; () banked
  1021  000C32  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1022  000C34  0E01               	movlw	high main@mR
  1023  000C36  0100               	movlb	0	; () banked
  1024  000C38  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1025  000C3A  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  1026                           
  1027                           ;main.c: 153: delay_tenth_s(ScanAngle);
  1028  000C3E  0101               	movlb	1	; () banked
  1029  000C40  51D2               	movf	main@ScanAngle& (0+255),w,b
  1030  000C42  EC48  F00E         	call	_delay_tenth_s
  1031                           
  1032                           ;main.c: 154: stop(&mL,&mR);
  1033  000C46  0ED6               	movlw	low main@mL
  1034  000C48  0100               	movlb	0	; () banked
  1035  000C4A  6F62               	movwf	stop@mL& (0+255),b
  1036  000C4C  0E01               	movlw	high main@mL
  1037  000C4E  0100               	movlb	0	; () banked
  1038  000C50  6F63               	movwf	(stop@mL+1)& (0+255),b
  1039  000C52  0EDF               	movlw	low main@mR
  1040  000C54  0100               	movlb	0	; () banked
  1041  000C56  6F64               	movwf	stop@mR& (0+255),b
  1042  000C58  0E01               	movlw	high main@mR
  1043  000C5A  0100               	movlb	0	; () banked
  1044  000C5C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1045  000C5E  EC18  F00C         	call	_stop	;wreg free
  1046                           
  1047                           ;main.c: 155: DirectionFound=0;
  1048  000C62  0E00               	movlw	0
  1049  000C64  0101               	movlb	1	; () banked
  1050  000C66  6FD3               	movwf	main@DirectionFound& (0+255),b
  1051                           
  1052                           ; BSR set to: 1
  1053                           ;main.c: 156: MoveType[Move]=0;
  1054  000C68  0101               	movlb	1	; () banked
  1055  000C6A  51D5               	movf	main@Move& (0+255),w,b
  1056  000C6C  0D01               	mullw	1
  1057  000C6E  0E00               	movlw	low main@MoveType
  1058  000C70  24F3               	addwf	prodl,w,c
  1059  000C72  6ED9               	movwf	fsr2l,c
  1060  000C74  0E01               	movlw	high main@MoveType
  1061  000C76  20F4               	addwfc	prodh,w,c
  1062  000C78  6EDA               	movwf	fsr2h,c
  1063  000C7A  0E00               	movlw	0
  1064  000C7C  D127               	goto	L2
  1065  000C7E                     l3500:
  1066                           
  1067                           ; BSR set to: 1
  1068  000C7E  0101               	movlb	1	; () banked
  1069  000C80  51D3               	movf	main@DirectionFound& (0+255),w,b
  1070  000C82  0101               	movlb	1	; () banked
  1071  000C84  A4D8               	btfss	status,2,c
  1072  000C86  D01E               	goto	l3506
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;main.c: 159: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1076  000C88  0ED6               	movlw	low main@mL
  1077  000C8A  0100               	movlb	0	; () banked
  1078  000C8C  6F6A               	movwf	ScanWithRange@mL& (0+255),b
  1079  000C8E  0E01               	movlw	high main@mL
  1080  000C90  0100               	movlb	0	; () banked
  1081  000C92  6F6B               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1082  000C94  0EDF               	movlw	low main@mR
  1083  000C96  0100               	movlb	0	; () banked
  1084  000C98  6F6C               	movwf	ScanWithRange@mR& (0+255),b
  1085  000C9A  0E01               	movlw	high main@mR
  1086  000C9C  0100               	movlb	0	; () banked
  1087  000C9E  6F6D               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1088  000CA0  C1D2  F06E         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
  1089  000CA4  0101               	movlb	1	; () banked
  1090  000CA6  51D5               	movf	main@Move& (0+255),w,b
  1091  000CA8  0D01               	mullw	1
  1092  000CAA  0E64               	movlw	low main@MoveTime
  1093  000CAC  24F3               	addwf	prodl,w,c
  1094  000CAE  0100               	movlb	0	; () banked
  1095  000CB0  6F6F               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1096  000CB2  0E01               	movlw	high main@MoveTime
  1097  000CB4  20F4               	addwfc	prodh,w,c
  1098  000CB6  0100               	movlb	0	; () banked
  1099  000CB8  6F70               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1100  000CBA  ECB8  F001         	call	_ScanWithRange	;wreg free
  1101  000CBE  0101               	movlb	1	; () banked
  1102  000CC0  6FD3               	movwf	main@DirectionFound& (0+255),b
  1103  000CC2  D02E               	goto	l3514
  1104  000CC4                     l3506:
  1105                           
  1106                           ; BSR set to: 1
  1107  000CC4  0101               	movlb	1	; () banked
  1108  000CC6  05D3               	decf	main@DirectionFound& (0+255),w,b
  1109  000CC8  A4D8               	btfss	status,2,c
  1110  000CCA  D023               	goto	l3510
  1111                           
  1112                           ; BSR set to: 1
  1113                           ;main.c: 163: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1114  000CCC  0ED6               	movlw	low main@mL
  1115  000CCE  0100               	movlb	0	; () banked
  1116  000CD0  6F6A               	movwf	ScanIR@mL& (0+255),b
  1117  000CD2  0E01               	movlw	high main@mL
  1118  000CD4  0100               	movlb	0	; () banked
  1119  000CD6  6F6B               	movwf	(ScanIR@mL+1)& (0+255),b
  1120  000CD8  0EDF               	movlw	low main@mR
  1121  000CDA  0100               	movlb	0	; () banked
  1122  000CDC  6F6C               	movwf	ScanIR@mR& (0+255),b
  1123  000CDE  0E01               	movlw	high main@mR
  1124  000CE0  0100               	movlb	0	; () banked
  1125  000CE2  6F6D               	movwf	(ScanIR@mR+1)& (0+255),b
  1126  000CE4  0ED5               	movlw	low main@Move
  1127  000CE6  0100               	movlb	0	; () banked
  1128  000CE8  6F6E               	movwf	ScanIR@Move& (0+255),b
  1129  000CEA  0E01               	movlw	high main@Move
  1130  000CEC  0100               	movlb	0	; () banked
  1131  000CEE  6F6F               	movwf	(ScanIR@Move+1)& (0+255),b
  1132  000CF0  0E64               	movlw	low main@MoveTime
  1133  000CF2  0100               	movlb	0	; () banked
  1134  000CF4  6F70               	movwf	ScanIR@MoveTime& (0+255),b
  1135  000CF6  0E01               	movlw	high main@MoveTime
  1136  000CF8  0100               	movlb	0	; () banked
  1137  000CFA  6F71               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1138  000CFC  0E00               	movlw	low main@MoveType
  1139  000CFE  0100               	movlb	0	; () banked
  1140  000D00  6F72               	movwf	ScanIR@MoveType& (0+255),b
  1141  000D02  0E01               	movlw	high main@MoveType
  1142  000D04  0100               	movlb	0	; () banked
  1143  000D06  6F73               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1144  000D08  ECB3  F007         	call	_ScanIR	;wreg free
  1145  000D0C  0101               	movlb	1	; () banked
  1146  000D0E  6FD3               	movwf	main@DirectionFound& (0+255),b
  1147                           
  1148                           ;main.c: 164: } else if (DirectionFound==2) {
  1149  000D10  D0DE               	goto	l3570
  1150  000D12                     l3510:
  1151                           
  1152                           ; BSR set to: 1
  1153  000D12  0E02               	movlw	2
  1154  000D14  0101               	movlb	1	; () banked
  1155  000D16  19D3               	xorwf	main@DirectionFound& (0+255),w,b
  1156  000D18  A4D8               	btfss	status,2,c
  1157  000D1A  D0D9               	goto	l3570
  1158                           
  1159                           ; BSR set to: 1
  1160                           ;main.c: 166: mode=2;
  1161  000D1C  0E02               	movlw	2
  1162  000D1E  6E3B               	movwf	_mode,c	;volatile
  1163  000D20                     l3514:
  1164                           
  1165                           ; BSR set to: 1
  1166                           ;main.c: 167: MoveType[Move]=1;
  1167  000D20  0101               	movlb	1	; () banked
  1168  000D22  51D5               	movf	main@Move& (0+255),w,b
  1169  000D24  0D01               	mullw	1
  1170  000D26  0E00               	movlw	low main@MoveType
  1171  000D28  24F3               	addwf	prodl,w,c
  1172  000D2A  6ED9               	movwf	fsr2l,c
  1173  000D2C  0E01               	movlw	high main@MoveType
  1174  000D2E  20F4               	addwfc	prodh,w,c
  1175  000D30  6EDA               	movwf	fsr2h,c
  1176  000D32  0E01               	movlw	1
  1177  000D34  D0CB               	goto	L2
  1178  000D36                     l3518:
  1179                           
  1180                           ;main.c: 178: if (RFID_Read) {
  1181  000D36  0101               	movlb	1	; () banked
  1182  000D38  51E8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1183  000D3A  B4D8               	btfsc	status,2,c
  1184  000D3C  D09C               	goto	l3560
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;main.c: 179: stop(&mL, &mR);
  1188  000D3E  0ED6               	movlw	low main@mL
  1189  000D40  0100               	movlb	0	; () banked
  1190  000D42  6F62               	movwf	stop@mL& (0+255),b
  1191  000D44  0E01               	movlw	high main@mL
  1192  000D46  0100               	movlb	0	; () banked
  1193  000D48  6F63               	movwf	(stop@mL+1)& (0+255),b
  1194  000D4A  0EDF               	movlw	low main@mR
  1195  000D4C  0100               	movlb	0	; () banked
  1196  000D4E  6F64               	movwf	stop@mR& (0+255),b
  1197  000D50  0E01               	movlw	high main@mR
  1198  000D52  0100               	movlb	0	; () banked
  1199  000D54  6F65               	movwf	(stop@mR+1)& (0+255),b
  1200  000D56  EC18  F00C         	call	_stop	;wreg free
  1201                           
  1202                           ;main.c: 180: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1203  000D5A  0E03               	movlw	3
  1204  000D5C  0101               	movlb	1	; () banked
  1205  000D5E  19F8               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1206  000D60  A4D8               	btfss	status,2,c
  1207  000D62  D002               	goto	u2780
  1208  000D64  0E01               	movlw	1
  1209  000D66  D001               	goto	u2782
  1210  000D68                     u2780:
  1211  000D68  0E00               	movlw	0
  1212  000D6A                     u2782:
  1213  000D6A  0100               	movlb	0	; () banked
  1214  000D6C  6FA2               	movwf	??_main& (0+255),b
  1215  000D6E  0E02               	movlw	2
  1216  000D70  0101               	movlb	1	; () banked
  1217  000D72  19E9               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1218  000D74  A4D8               	btfss	status,2,c
  1219  000D76  D002               	goto	u2790
  1220  000D78  0E01               	movlw	1
  1221  000D7A  D001               	goto	u2792
  1222  000D7C                     u2790:
  1223  000D7C  0E00               	movlw	0
  1224  000D7E                     u2792:
  1225  000D7E  0100               	movlb	0	; () banked
  1226  000D80  15A2               	andwf	??_main& (0+255),w,b
  1227  000D82  A0E8               	btfss	wreg,0,c
  1228  000D84  D0DF               	goto	l3592
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 181: if (VerifySignal(ReceivedString)){
  1232  000D86  0EE9               	movlw	low _ReceivedString
  1233  000D88  6E24               	movwf	VerifySignal@Signal,c
  1234  000D8A  0E01               	movlw	high _ReceivedString
  1235  000D8C  6E25               	movwf	VerifySignal@Signal+1,c
  1236  000D8E  ECBE  F00B         	call	_VerifySignal	;wreg free
  1237  000D92  0900               	iorlw	0
  1238  000D94  B4D8               	btfsc	status,2,c
  1239  000D96  D041               	goto	l3552
  1240                           
  1241                           ;main.c: 183: for (i=0; i<10; i++){
  1242  000D98  0E00               	movlw	0
  1243  000D9A  0101               	movlb	1	; () banked
  1244  000D9C  6FD4               	movwf	main@i& (0+255),b
  1245  000D9E                     l3528:
  1246                           
  1247                           ; BSR set to: 1
  1248  000D9E  0E09               	movlw	9
  1249  000DA0  0101               	movlb	1	; () banked
  1250  000DA2  65D4               	cpfsgt	main@i& (0+255),b
  1251  000DA4  D001               	goto	l3532
  1252  000DA6  D020               	goto	l3538
  1253  000DA8                     l3532:
  1254                           
  1255                           ; BSR set to: 1
  1256                           ;main.c: 184: Message[i] = ReceivedString[i+1];
  1257  000DA8  0101               	movlb	1	; () banked
  1258  000DAA  51D4               	movf	main@i& (0+255),w,b
  1259  000DAC  0100               	movlb	0	; () banked
  1260  000DAE  6FA2               	movwf	??_main& (0+255),b
  1261  000DB0  6BA3               	clrf	(??_main+1)& (0+255),b
  1262  000DB2  0E01               	movlw	1
  1263  000DB4  0100               	movlb	0	; () banked
  1264  000DB6  27A2               	addwf	??_main& (0+255),f,b
  1265  000DB8  0E00               	movlw	0
  1266  000DBA  23A3               	addwfc	(??_main+1)& (0+255),f,b
  1267  000DBC  0EE9               	movlw	low _ReceivedString
  1268  000DBE  0100               	movlb	0	; () banked
  1269  000DC0  25A2               	addwf	??_main& (0+255),w,b
  1270  000DC2  6ED9               	movwf	fsr2l,c
  1271  000DC4  0E01               	movlw	high _ReceivedString
  1272  000DC6  0100               	movlb	0	; () banked
  1273  000DC8  21A3               	addwfc	(??_main+1)& (0+255),w,b
  1274  000DCA  6EDA               	movwf	fsr2h,c
  1275  000DCC  0101               	movlb	1	; () banked
  1276  000DCE  51D4               	movf	main@i& (0+255),w,b
  1277  000DD0  0D01               	mullw	1
  1278  000DD2  0EC8               	movlw	low main@Message
  1279  000DD4  24F3               	addwf	prodl,w,c
  1280  000DD6  6EE1               	movwf	fsr1l,c
  1281  000DD8  0E01               	movlw	high main@Message
  1282  000DDA  20F4               	addwfc	prodh,w,c
  1283  000DDC  6EE2               	movwf	fsr1h,c
  1284  000DDE  CFDF FFE7          	movff	indf2,indf1
  1285                           
  1286                           ; BSR set to: 1
  1287  000DE2  0101               	movlb	1	; () banked
  1288  000DE4  2BD4               	incf	main@i& (0+255),f,b
  1289  000DE6  D7DB               	goto	l3528
  1290  000DE8                     l3538:
  1291                           
  1292                           ; BSR set to: 1
  1293                           ;main.c: 185: }
  1294                           ;main.c: 188: for (i=0; i<16; i++) {
  1295  000DE8  0E00               	movlw	0
  1296  000DEA  0101               	movlb	1	; () banked
  1297  000DEC  6FD4               	movwf	main@i& (0+255),b
  1298  000DEE                     l3540:
  1299                           
  1300                           ; BSR set to: 1
  1301  000DEE  0E0F               	movlw	15
  1302  000DF0  0101               	movlb	1	; () banked
  1303  000DF2  65D4               	cpfsgt	main@i& (0+255),b
  1304  000DF4  D001               	goto	l3544
  1305  000DF6  D00E               	goto	l3550
  1306  000DF8                     l3544:
  1307                           
  1308                           ; BSR set to: 1
  1309                           ;main.c: 189: ReceivedString[i]=0;
  1310  000DF8  0101               	movlb	1	; () banked
  1311  000DFA  51D4               	movf	main@i& (0+255),w,b
  1312  000DFC  0D01               	mullw	1
  1313  000DFE  0EE9               	movlw	low _ReceivedString
  1314  000E00  24F3               	addwf	prodl,w,c
  1315  000E02  6ED9               	movwf	fsr2l,c
  1316  000E04  0E01               	movlw	high _ReceivedString
  1317  000E06  20F4               	addwfc	prodh,w,c
  1318  000E08  6EDA               	movwf	fsr2h,c
  1319  000E0A  0E00               	movlw	0
  1320  000E0C  6EDF               	movwf	indf2,c
  1321                           
  1322                           ; BSR set to: 1
  1323  000E0E  0101               	movlb	1	; () banked
  1324  000E10  2BD4               	incf	main@i& (0+255),f,b
  1325  000E12  D7ED               	goto	l3540
  1326  000E14                     l3550:
  1327                           
  1328                           ; BSR set to: 1
  1329                           ;main.c: 190: }
  1330                           ;main.c: 191: mode=3;
  1331  000E14  0E03               	movlw	3
  1332  000E16  6E3B               	movwf	_mode,c	;volatile
  1333                           
  1334                           ;main.c: 193: } else {
  1335  000E18  D095               	goto	l3592
  1336  000E1A                     l3552:
  1337                           
  1338                           ;main.c: 194: fullSpeedBack(&mL,&mR);
  1339  000E1A  0ED6               	movlw	low main@mL
  1340  000E1C  0100               	movlb	0	; () banked
  1341  000E1E  6F66               	movwf	fullSpeedBack@mL& (0+255),b
  1342  000E20  0E01               	movlw	high main@mL
  1343  000E22  0100               	movlb	0	; () banked
  1344  000E24  6F67               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1345  000E26  0EDF               	movlw	low main@mR
  1346  000E28  0100               	movlb	0	; () banked
  1347  000E2A  6F68               	movwf	fullSpeedBack@mR& (0+255),b
  1348  000E2C  0E01               	movlw	high main@mR
  1349  000E2E  0100               	movlb	0	; () banked
  1350  000E30  6F69               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1351  000E32  EC2B  F00E         	call	_fullSpeedBack	;wreg free
  1352                           
  1353                           ;main.c: 195: delay_tenth_s(5);
  1354  000E36  0E05               	movlw	5
  1355  000E38  EC48  F00E         	call	_delay_tenth_s
  1356                           
  1357                           ;main.c: 196: stop(&mL,&mR);
  1358  000E3C  0ED6               	movlw	low main@mL
  1359  000E3E  0100               	movlb	0	; () banked
  1360  000E40  6F62               	movwf	stop@mL& (0+255),b
  1361  000E42  0E01               	movlw	high main@mL
  1362  000E44  0100               	movlb	0	; () banked
  1363  000E46  6F63               	movwf	(stop@mL+1)& (0+255),b
  1364  000E48  0EDF               	movlw	low main@mR
  1365  000E4A  0100               	movlb	0	; () banked
  1366  000E4C  6F64               	movwf	stop@mR& (0+255),b
  1367  000E4E  0E01               	movlw	high main@mR
  1368  000E50  0100               	movlb	0	; () banked
  1369  000E52  6F65               	movwf	(stop@mR+1)& (0+255),b
  1370  000E54  EC18  F00C         	call	_stop	;wreg free
  1371                           
  1372                           ;main.c: 197: fullSpeedAhead(&mL,&mR);
  1373  000E58  0ED6               	movlw	low main@mL
  1374  000E5A  0100               	movlb	0	; () banked
  1375  000E5C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1376  000E5E  0E01               	movlw	high main@mL
  1377  000E60  0100               	movlb	0	; () banked
  1378  000E62  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1379  000E64  0EDF               	movlw	low main@mR
  1380  000E66  0100               	movlb	0	; () banked
  1381  000E68  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1382  000E6A  0E01               	movlw	high main@mR
  1383  000E6C  0100               	movlb	0	; () banked
  1384  000E6E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1385  000E70  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  1386                           
  1387                           ;main.c: 198: }
  1388                           ;main.c: 199: }
  1389                           ;main.c: 200: } else {
  1390  000E74  D067               	goto	l3592
  1391  000E76                     l3560:
  1392                           
  1393                           ;main.c: 201: DirectionFound=1;
  1394  000E76  0E01               	movlw	1
  1395  000E78  0101               	movlb	1	; () banked
  1396  000E7A  6FD3               	movwf	main@DirectionFound& (0+255),b
  1397                           
  1398                           ;main.c: 202: mode=1;
  1399  000E7C  0E01               	movlw	1
  1400  000E7E  6E3B               	movwf	_mode,c	;volatile
  1401                           
  1402                           ; BSR set to: 1
  1403                           ;main.c: 203: fullSpeedAhead(&mL,&mR);
  1404  000E80  0ED6               	movlw	low main@mL
  1405  000E82  0100               	movlb	0	; () banked
  1406  000E84  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1407  000E86  0E01               	movlw	high main@mL
  1408  000E88  0100               	movlb	0	; () banked
  1409  000E8A  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1410  000E8C  0EDF               	movlw	low main@mR
  1411  000E8E  0100               	movlb	0	; () banked
  1412  000E90  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1413  000E92  0E01               	movlw	high main@mR
  1414  000E94  0100               	movlb	0	; () banked
  1415  000E96  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1416  000E98  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  1417                           
  1418                           ;main.c: 204: delay_tenth_s(5);
  1419  000E9C  0E05               	movlw	5
  1420  000E9E  EC48  F00E         	call	_delay_tenth_s
  1421                           
  1422                           ;main.c: 205: MoveType[Move] = 0;
  1423  000EA2  0101               	movlb	1	; () banked
  1424  000EA4  51D5               	movf	main@Move& (0+255),w,b
  1425  000EA6  0D01               	mullw	1
  1426  000EA8  0E00               	movlw	low main@MoveType
  1427  000EAA  24F3               	addwf	prodl,w,c
  1428  000EAC  6ED9               	movwf	fsr2l,c
  1429  000EAE  0E01               	movlw	high main@MoveType
  1430  000EB0  20F4               	addwfc	prodh,w,c
  1431  000EB2  6EDA               	movwf	fsr2h,c
  1432  000EB4  0E00               	movlw	0
  1433  000EB6  6EDF               	movwf	indf2,c
  1434                           
  1435                           ; BSR set to: 1
  1436                           ;main.c: 206: MoveTime[Move] = 5;
  1437  000EB8  0101               	movlb	1	; () banked
  1438  000EBA  51D5               	movf	main@Move& (0+255),w,b
  1439  000EBC  0D01               	mullw	1
  1440  000EBE  0E64               	movlw	low main@MoveTime
  1441  000EC0  24F3               	addwf	prodl,w,c
  1442  000EC2  6ED9               	movwf	fsr2l,c
  1443  000EC4  0E01               	movlw	high main@MoveTime
  1444  000EC6  20F4               	addwfc	prodh,w,c
  1445  000EC8  6EDA               	movwf	fsr2h,c
  1446  000ECA  0E05               	movlw	5
  1447  000ECC                     L2:
  1448  000ECC  6EDF               	movwf	indf2,c
  1449  000ECE                     l3570:
  1450                           
  1451                           ; BSR set to: 1
  1452                           ;main.c: 207: Move++;
  1453  000ECE  0101               	movlb	1	; () banked
  1454  000ED0  2BD5               	incf	main@Move& (0+255),f,b
  1455                           
  1456                           ; BSR set to: 1
  1457                           ;main.c: 208: }
  1458                           ;main.c: 210: break;
  1459  000ED2  D038               	goto	l3592
  1460  000ED4                     l3572:
  1461                           
  1462                           ;main.c: 215: SendLCD(0b00000001,0);
  1463  000ED4  0E00               	movlw	0
  1464  000ED6  6E28               	movwf	SendLCD@type,c
  1465  000ED8  0E01               	movlw	1
  1466  000EDA  ECB9  F000         	call	_SendLCD
  1467                           
  1468                           ;main.c: 216: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1469  000EDE  0E21               	movlw	33
  1470  000EE0                     u2907:
  1471  000EE0  2EE8               	decfsz	wreg,f,c
  1472  000EE2  D7FE               	goto	u2907
  1473  000EE4  F000               	nop	
  1474                           
  1475                           ;main.c: 217: SendLCD(0b00000010,0);
  1476  000EE6  0E00               	movlw	0
  1477  000EE8  6E28               	movwf	SendLCD@type,c
  1478  000EEA  0E02               	movlw	2
  1479  000EEC  ECB9  F000         	call	_SendLCD
  1480                           
  1481                           ;main.c: 218: _delay((unsigned long)((2)*(8000000/4000.0)));
  1482  000EF0  0E06               	movlw	6
  1483  000EF2  0100               	movlb	0	; () banked
  1484  000EF4  6FA2               	movwf	??_main& (0+255),b
  1485  000EF6  0E30               	movlw	48
  1486  000EF8                     u2917:
  1487  000EF8  2EE8               	decfsz	wreg,f,c
  1488  000EFA  D7FE               	goto	u2917
  1489  000EFC  2FA2               	decfsz	??_main& (0+255),f,b
  1490  000EFE  D7FC               	goto	u2917
  1491  000F00  D000               	nop2	
  1492                           
  1493                           ;main.c: 219: SetLine(1);
  1494  000F02  0E01               	movlw	1
  1495  000F04  ECA1  F000         	call	_SetLine
  1496                           
  1497                           ;main.c: 220: LCD_String("      Found Bomb!");
  1498  000F08  0E11               	movlw	low STR_3
  1499  000F0A  6E2A               	movwf	LCD_String@string,c
  1500  000F0C  0E03               	movlw	high STR_3
  1501  000F0E  6E2B               	movwf	LCD_String@string+1,c
  1502  000F10  EC6D  F000         	call	_LCD_String	;wreg free
  1503                           
  1504                           ;main.c: 221: SetLine(2);
  1505  000F14  0E02               	movlw	2
  1506  000F16  ECA1  F000         	call	_SetLine
  1507                           
  1508                           ;main.c: 222: LCD_String("      Going Home");
  1509  000F1A  0E34               	movlw	low STR_4
  1510  000F1C  6E2A               	movwf	LCD_String@string,c
  1511  000F1E  0E03               	movlw	high STR_4
  1512  000F20  6E2B               	movwf	LCD_String@string+1,c
  1513  000F22  EC6D  F000         	call	_LCD_String	;wreg free
  1514                           
  1515                           ;main.c: 223: stop(&mL,&mR);
  1516  000F26  0ED6               	movlw	low main@mL
  1517  000F28  0100               	movlb	0	; () banked
  1518  000F2A  6F62               	movwf	stop@mL& (0+255),b
  1519  000F2C  0E01               	movlw	high main@mL
  1520  000F2E  0100               	movlb	0	; () banked
  1521  000F30  6F63               	movwf	(stop@mL+1)& (0+255),b
  1522  000F32  0EDF               	movlw	low main@mR
  1523  000F34  0100               	movlb	0	; () banked
  1524  000F36  6F64               	movwf	stop@mR& (0+255),b
  1525  000F38  0E01               	movlw	high main@mR
  1526  000F3A  0100               	movlb	0	; () banked
  1527  000F3C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1528  000F3E  EC18  F00C         	call	_stop	;wreg free
  1529  000F42                     l3588:
  1530                           
  1531                           ;main.c: 239: mode=-1;
  1532  000F42  683B               	setf	_mode,c	;volatile
  1533  000F44                     l3592:
  1534  000F44  503B               	movf	_mode,w,c	;volatile
  1535                           
  1536                           ; Switch size 1, requested type "space"
  1537                           ; Number of cases is 5, Range of values is 0 to 255
  1538                           ; switch strategies available:
  1539                           ; Name         Instructions Cycles
  1540                           ; simple_byte           16     9 (average)
  1541                           ;	Chosen strategy is simple_byte
  1542  000F46  0A00               	xorlw	0	; case 0
  1543  000F48  B4D8               	btfsc	status,2,c
  1544  000F4A  D643               	goto	l3472
  1545  000F4C  0A01               	xorlw	1	; case 1
  1546  000F4E  B4D8               	btfsc	status,2,c
  1547  000F50  D664               	goto	l3488
  1548  000F52  0A03               	xorlw	3	; case 2
  1549  000F54  B4D8               	btfsc	status,2,c
  1550  000F56  D6EF               	goto	l3518
  1551  000F58  0A01               	xorlw	1	; case 3
  1552  000F5A  B4D8               	btfsc	status,2,c
  1553  000F5C  D7BB               	goto	l3572
  1554  000F5E  0AFC               	xorlw	252	; case 255
  1555  000F60  B4D8               	btfsc	status,2,c
  1556  000F62  D5FF               	goto	l3454
  1557  000F64  D7EF               	goto	l3592
  1558  000F66                     __end_of_main:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           prodh	equ	0xFF4
  1562                           prodl	equ	0xFF3
  1563                           intcon	equ	0xFF2
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           indf1	equ	0xFE7
  1567                           fsr1h	equ	0xFE2
  1568                           fsr1l	equ	0xFE1
  1569                           indf2	equ	0xFDF
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _initRFID *****************
  1575 ;; Defined at:
  1576 ;;		line 5 in file "RFID_Reader.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;		None               void
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1590 ;;      Params:         0       0       0       0
  1591 ;;      Locals:         0       0       0       0
  1592 ;;      Temps:          0       0       0       0
  1593 ;;      Totals:         0       0       0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    3
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text1
  1605  00023A                     __ptext1:
  1606                           	opt stack 0
  1607  00023A                     _initRFID:
  1608                           	opt stack 27
  1609                           
  1610                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1611                           
  1612                           ;incstack = 0
  1613  00023A  5094               	movf	3988,w,c	;volatile
  1614  00023C  09C0               	iorlw	192
  1615  00023E  6E94               	movwf	3988,c	;volatile
  1616                           
  1617                           ;RFID_Reader.c: 10: SPBRG=205;
  1618  000240  0ECD               	movlw	205
  1619  000242  6EAF               	movwf	4015,c	;volatile
  1620                           
  1621                           ;RFID_Reader.c: 11: SPBRGH=0;
  1622  000244  0E00               	movlw	0
  1623  000246  6EB0               	movwf	4016,c	;volatile
  1624                           
  1625                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1626  000248  86AA               	bsf	4010,3,c	;volatile
  1627                           
  1628                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1629  00024A  84AC               	bsf	4012,2,c	;volatile
  1630                           
  1631                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1632  00024C  88AB               	bsf	4011,4,c	;volatile
  1633                           
  1634                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1635  00024E  8EAB               	bsf	4011,7,c	;volatile
  1636                           
  1637                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1638  000250  98AC               	bcf	4012,4,c	;volatile
  1639                           
  1640                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1641  000252  9CAB               	bcf	4011,6,c	;volatile
  1642  000254  0012               	return		;funcret
  1643  000256                     __end_of_initRFID:
  1644                           	opt stack 0
  1645                           tblptru	equ	0xFF8
  1646                           prodh	equ	0xFF4
  1647                           prodl	equ	0xFF3
  1648                           intcon	equ	0xFF2
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           indf1	equ	0xFE7
  1652                           fsr1h	equ	0xFE2
  1653                           fsr1l	equ	0xFE1
  1654                           indf2	equ	0xFDF
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _initMotorPWM *****************
  1660 ;; Defined at:
  1661 ;;		line 4 in file "dc_motor.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;		None               void
  1668 ;; Registers used:
  1669 ;;		wreg, status,2
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1675 ;;      Params:         0       0       0       0
  1676 ;;      Locals:         0       0       0       0
  1677 ;;      Temps:          0       0       0       0
  1678 ;;      Totals:         0       0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    3
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text2
  1690  000110                     __ptext2:
  1691                           	opt stack 0
  1692  000110                     _initMotorPWM:
  1693                           	opt stack 27
  1694                           
  1695                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1696                           
  1697                           ;incstack = 0
  1698  000110  0E00               	movlw	0
  1699  000112  6E7F               	movwf	3967,c	;volatile
  1700                           
  1701                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1702  000114  0E80               	movlw	128
  1703  000116  6E7E               	movwf	3966,c	;volatile
  1704                           
  1705                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1706  000118  0E6F               	movlw	111
  1707  00011A  6E6F               	movwf	3951,c	;volatile
  1708                           
  1709                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1710  00011C  0E00               	movlw	0
  1711  00011E  6E6E               	movwf	3950,c	;volatile
  1712                           
  1713                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1714  000120  0EC7               	movlw	199
  1715  000122  6E7B               	movwf	3963,c	;volatile
  1716                           
  1717                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1718  000124  0E00               	movlw	0
  1719  000126  6E7A               	movwf	3962,c	;volatile
  1720                           
  1721                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1722  000128  0E00               	movlw	0
  1723  00012A  6E79               	movwf	3961,c	;volatile
  1724                           
  1725                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1726  00012C  0E00               	movlw	0
  1727  00012E  6E78               	movwf	3960,c	;volatile
  1728                           
  1729                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1730  000130  0E00               	movlw	0
  1731  000132  6E77               	movwf	3959,c	;volatile
  1732                           
  1733                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1734  000134  0E00               	movlw	0
  1735  000136  6E76               	movwf	3958,c	;volatile
  1736                           
  1737                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1738  000138  9093               	bcf	3987,0,c	;volatile
  1739                           
  1740                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1741  00013A  9293               	bcf	3987,1,c	;volatile
  1742                           
  1743                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1744  00013C  9493               	bcf	3987,2,c	;volatile
  1745                           
  1746                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1747  00013E  9693               	bcf	3987,3,c	;volatile
  1748  000140  0012               	return		;funcret
  1749  000142                     __end_of_initMotorPWM:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           prodh	equ	0xFF4
  1753                           prodl	equ	0xFF3
  1754                           intcon	equ	0xFF2
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           indf1	equ	0xFE7
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _initLCD *****************
  1766 ;; Defined at:
  1767 ;;		line 38 in file "LCD.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;		None               void
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1781 ;;      Params:         0       0       0       0
  1782 ;;      Locals:         0       0       0       0
  1783 ;;      Temps:          1       0       0       0
  1784 ;;      Totals:         1       0       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    6
  1788 ;; This function calls:
  1789 ;;		_LCDout
  1790 ;;		_SendLCD
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text3
  1797  0016C0                     __ptext3:
  1798                           	opt stack 0
  1799  0016C0                     _initLCD:
  1800                           	opt stack 24
  1801                           
  1802                           ;LCD.c: 44: TRISAbits.RA6=0;
  1803                           
  1804                           ;incstack = 0
  1805  0016C0  9C92               	bcf	3986,6,c	;volatile
  1806                           
  1807                           ;LCD.c: 45: TRISCbits.RC0=0;
  1808  0016C2  9094               	bcf	3988,0,c	;volatile
  1809                           
  1810                           ;LCD.c: 46: TRISCbits.RC1=0;
  1811  0016C4  9294               	bcf	3988,1,c	;volatile
  1812                           
  1813                           ;LCD.c: 47: TRISCbits.RC2=0;
  1814  0016C6  9494               	bcf	3988,2,c	;volatile
  1815                           
  1816                           ;LCD.c: 48: TRISDbits.RD0=0;
  1817  0016C8  9095               	bcf	3989,0,c	;volatile
  1818                           
  1819                           ;LCD.c: 49: TRISDbits.RD1=0;
  1820  0016CA  9295               	bcf	3989,1,c	;volatile
  1821                           
  1822                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1823  0016CC  0E27               	movlw	39
  1824  0016CE  6E2A               	movwf	??_initLCD& (0+255),c
  1825  0016D0  0EF5               	movlw	245
  1826  0016D2                     u2927:
  1827  0016D2  2EE8               	decfsz	wreg,f,c
  1828  0016D4  D7FE               	goto	u2927
  1829  0016D6  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1830  0016D8  D7FC               	goto	u2927
  1831  0016DA  F000               	nop	
  1832                           
  1833                           ;LCD.c: 52: LCDout(0b0011);
  1834  0016DC  0E03               	movlw	3
  1835  0016DE  ECFD  F00A         	call	_LCDout
  1836                           
  1837                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1838  0016E2  0E0D               	movlw	13
  1839  0016E4  6E2A               	movwf	??_initLCD& (0+255),c
  1840  0016E6  0EFC               	movlw	252
  1841  0016E8                     u2937:
  1842  0016E8  2EE8               	decfsz	wreg,f,c
  1843  0016EA  D7FE               	goto	u2937
  1844  0016EC  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1845  0016EE  D7FC               	goto	u2937
  1846                           
  1847                           ;LCD.c: 54: LCDout(0b0011);
  1848  0016F0  0E03               	movlw	3
  1849  0016F2  ECFD  F00A         	call	_LCDout
  1850                           
  1851                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1852  0016F6  0E85               	movlw	133
  1853  0016F8                     u2947:
  1854  0016F8  2EE8               	decfsz	wreg,f,c
  1855  0016FA  D7FE               	goto	u2947
  1856  0016FC  F000               	nop	
  1857                           
  1858                           ;LCD.c: 56: LCDout(0b0011);
  1859  0016FE  0E03               	movlw	3
  1860  001700  ECFD  F00A         	call	_LCDout
  1861                           
  1862                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1863  001704  0E21               	movlw	33
  1864  001706                     u2957:
  1865  001706  2EE8               	decfsz	wreg,f,c
  1866  001708  D7FE               	goto	u2957
  1867  00170A  F000               	nop	
  1868                           
  1869                           ;LCD.c: 58: LCDout(0b0010);
  1870  00170C  0E02               	movlw	2
  1871  00170E  ECFD  F00A         	call	_LCDout
  1872                           
  1873                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1874  001712  0E21               	movlw	33
  1875  001714                     u2967:
  1876  001714  2EE8               	decfsz	wreg,f,c
  1877  001716  D7FE               	goto	u2967
  1878  001718  F000               	nop	
  1879                           
  1880                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1881  00171A  0E00               	movlw	0
  1882  00171C  6E28               	movwf	SendLCD@type,c
  1883  00171E  0E28               	movlw	40
  1884  001720  ECB9  F000         	call	_SendLCD
  1885                           
  1886                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1887  001724  0E21               	movlw	33
  1888  001726                     u2977:
  1889  001726  2EE8               	decfsz	wreg,f,c
  1890  001728  D7FE               	goto	u2977
  1891  00172A  F000               	nop	
  1892                           
  1893                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1894  00172C  0E00               	movlw	0
  1895  00172E  6E28               	movwf	SendLCD@type,c
  1896  001730  0E08               	movlw	8
  1897  001732  ECB9  F000         	call	_SendLCD
  1898                           
  1899                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1900  001736  0E21               	movlw	33
  1901  001738                     u2987:
  1902  001738  2EE8               	decfsz	wreg,f,c
  1903  00173A  D7FE               	goto	u2987
  1904  00173C  F000               	nop	
  1905                           
  1906                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1907  00173E  0E00               	movlw	0
  1908  001740  6E28               	movwf	SendLCD@type,c
  1909  001742  0E01               	movlw	1
  1910  001744  ECB9  F000         	call	_SendLCD
  1911                           
  1912                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1913  001748  0E0D               	movlw	13
  1914  00174A  6E2A               	movwf	??_initLCD& (0+255),c
  1915  00174C  0EFC               	movlw	252
  1916  00174E                     u2997:
  1917  00174E  2EE8               	decfsz	wreg,f,c
  1918  001750  D7FE               	goto	u2997
  1919  001752  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1920  001754  D7FC               	goto	u2997
  1921                           
  1922                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1923  001756  0E00               	movlw	0
  1924  001758  6E28               	movwf	SendLCD@type,c
  1925  00175A  0E06               	movlw	6
  1926  00175C  ECB9  F000         	call	_SendLCD
  1927                           
  1928                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1929  001760  0E21               	movlw	33
  1930  001762                     u3007:
  1931  001762  2EE8               	decfsz	wreg,f,c
  1932  001764  D7FE               	goto	u3007
  1933  001766  F000               	nop	
  1934                           
  1935                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1936  001768  0E00               	movlw	0
  1937  00176A  6E28               	movwf	SendLCD@type,c
  1938  00176C  0E0C               	movlw	12
  1939  00176E  ECB9  F000         	call	_SendLCD
  1940                           
  1941                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1942  001772  0E21               	movlw	33
  1943  001774                     u3017:
  1944  001774  2EE8               	decfsz	wreg,f,c
  1945  001776  D7FE               	goto	u3017
  1946  001778  F000               	nop	
  1947  00177A  0012               	return		;funcret
  1948  00177C                     __end_of_initLCD:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           prodh	equ	0xFF4
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           indf1	equ	0xFE7
  1957                           fsr1h	equ	0xFE2
  1958                           fsr1l	equ	0xFE1
  1959                           indf2	equ	0xFDF
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _initIR *****************
  1965 ;; Defined at:
  1966 ;;		line 30 in file "IR_Reading.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1980 ;;      Params:         0       0       0       0
  1981 ;;      Locals:         0       0       0       0
  1982 ;;      Temps:          0       0       0       0
  1983 ;;      Totals:         0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    3
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text4
  1995  000218                     __ptext4:
  1996                           	opt stack 0
  1997  000218                     _initIR:
  1998                           	opt stack 27
  1999                           
  2000                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2001                           
  2002                           ;incstack = 0
  2003  000218  9489               	bcf	3977,2,c	;volatile
  2004                           
  2005                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2006  00021A  9689               	bcf	3977,3,c	;volatile
  2007                           
  2008                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2009  00021C  8492               	bsf	3986,2,c	;volatile
  2010                           
  2011                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2012  00021E  8692               	bsf	3986,3,c	;volatile
  2013                           
  2014                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2015  000220  94B8               	bcf	4024,2,c	;volatile
  2016                           
  2017                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2018  000222  96B8               	bcf	4024,3,c	;volatile
  2019                           
  2020                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2021  000224  9CB8               	bcf	4024,6,c	;volatile
  2022                           
  2023                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2024  000226  9EB8               	bcf	4024,7,c	;volatile
  2025                           
  2026                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2027  000228  0E06               	movlw	6
  2028  00022A  6E63               	movwf	3939,c	;volatile
  2029                           
  2030                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2031  00022C  0E06               	movlw	6
  2032  00022E  6E62               	movwf	3938,c	;volatile
  2033                           
  2034                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2035  000230  9096               	bcf	3990,0,c	;volatile
  2036                           
  2037                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2038  000232  9296               	bcf	3990,1,c	;volatile
  2039                           
  2040                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2041  000234  0E59               	movlw	89
  2042  000236  6EB7               	movwf	4023,c	;volatile
  2043  000238  0012               	return		;funcret
  2044  00023A                     __end_of_initIR:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           prodh	equ	0xFF4
  2048                           prodl	equ	0xFF3
  2049                           intcon	equ	0xFF2
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           indf1	equ	0xFE7
  2053                           fsr1h	equ	0xFE2
  2054                           fsr1l	equ	0xFE1
  2055                           indf2	equ	0xFDF
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _fullSpeedBack *****************
  2061 ;; Defined at:
  2062 ;;		line 125 in file "dc_motor.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  2065 ;;		 -> main@mL(9), 
  2066 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  2067 ;;		 -> main@mR(9), 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2079 ;;      Params:         0       4       0       0
  2080 ;;      Locals:         0       0       0       0
  2081 ;;      Temps:          0       0       0       0
  2082 ;;      Totals:         0       4       0       0
  2083 ;;Total ram usage:        4 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    6
  2086 ;; This function calls:
  2087 ;;		_fullSpeedAhead
  2088 ;; This function is called by:
  2089 ;;		_main
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text5
  2094  001C56                     __ptext5:
  2095                           	opt stack 0
  2096  001C56                     _fullSpeedBack:
  2097                           	opt stack 24
  2098                           
  2099                           ;dc_motor.c: 128: mL->direction=0;
  2100                           
  2101                           ;incstack = 0
  2102  001C56  0100               	movlb	0	; () banked
  2103  001C58  EE20 F001          	lfsr	2,1
  2104  001C5C  5166               	movf	fullSpeedBack@mL& (0+255),w,b
  2105  001C5E  26D9               	addwf	fsr2l,f,c
  2106  001C60  5167               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2107  001C62  22DA               	addwfc	fsr2h,f,c
  2108  001C64  0E00               	movlw	0
  2109  001C66  6EDF               	movwf	indf2,c
  2110                           
  2111                           ;dc_motor.c: 129: mR->direction=0;
  2112  001C68  0100               	movlb	0	; () banked
  2113  001C6A  EE20 F001          	lfsr	2,1
  2114  001C6E  5168               	movf	fullSpeedBack@mR& (0+255),w,b
  2115  001C70  26D9               	addwf	fsr2l,f,c
  2116  001C72  5169               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2117  001C74  22DA               	addwfc	fsr2h,f,c
  2118  001C76  0E00               	movlw	0
  2119  001C78  6EDF               	movwf	indf2,c
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2123  001C7A  C066  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2124  001C7E  C067  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2125  001C82  C068  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2126  001C86  C069  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2127  001C8A  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  2128  001C8E  0012               	return		;funcret
  2129  001C90                     __end_of_fullSpeedBack:
  2130                           	opt stack 0
  2131                           tblptru	equ	0xFF8
  2132                           prodh	equ	0xFF4
  2133                           prodl	equ	0xFF3
  2134                           intcon	equ	0xFF2
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           indf1	equ	0xFE7
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145 ;; *************** function _enableSensor *****************
  2146 ;; Defined at:
  2147 ;;		line 106 in file "IR_Reading.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  sensor          1    wreg     unsigned char 
  2150 ;;  status          1   35[COMRAM] unsigned char 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  sensor          1   36[COMRAM] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2162 ;;      Params:         1       0       0       0
  2163 ;;      Locals:         1       0       0       0
  2164 ;;      Temps:          0       0       0       0
  2165 ;;      Totals:         2       0       0       0
  2166 ;;Total ram usage:        2 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text6
  2177  0001CC                     __ptext6:
  2178                           	opt stack 0
  2179  0001CC                     _enableSensor:
  2180                           	opt stack 27
  2181                           
  2182                           ;incstack = 0
  2183                           ;enableSensor@sensor stored from wreg
  2184  0001CC  6E25               	movwf	enableSensor@sensor,c
  2185                           
  2186                           ;IR_Reading.c: 108: if (sensor==0){
  2187  0001CE  5025               	movf	enableSensor@sensor,w,c
  2188  0001D0  A4D8               	btfss	status,2,c
  2189  0001D2  D006               	goto	l2382
  2190                           
  2191                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2192  0001D4  B024               	btfsc	enableSensor@status,0,c
  2193  0001D6  D002               	bra	u1655
  2194  0001D8  908D               	bcf	3981,0,c	;volatile
  2195  0001DA  D001               	bra	u1656
  2196  0001DC                     u1655:
  2197  0001DC  808D               	bsf	3981,0,c	;volatile
  2198  0001DE                     u1656:
  2199                           
  2200                           ;IR_Reading.c: 110: } else if (sensor==1){
  2201  0001DE  0012               	return	
  2202  0001E0                     l2382:
  2203  0001E0  0425               	decf	enableSensor@sensor,w,c
  2204  0001E2  A4D8               	btfss	status,2,c
  2205  0001E4  0012               	return	
  2206                           
  2207                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2208  0001E6  B024               	btfsc	enableSensor@status,0,c
  2209  0001E8  D002               	bra	u1675
  2210  0001EA  928D               	bcf	3981,1,c	;volatile
  2211  0001EC  D001               	bra	u1676
  2212  0001EE                     u1675:
  2213  0001EE  828D               	bsf	3981,1,c	;volatile
  2214  0001F0                     u1676:
  2215  0001F0  0012               	return	
  2216  0001F2                     __end_of_enableSensor:
  2217                           	opt stack 0
  2218                           tblptru	equ	0xFF8
  2219                           prodh	equ	0xFF4
  2220                           prodl	equ	0xFF3
  2221                           intcon	equ	0xFF2
  2222                           postinc0	equ	0xFEE
  2223                           wreg	equ	0xFE8
  2224                           indf1	equ	0xFE7
  2225                           fsr1h	equ	0xFE2
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _VerifySignal *****************
  2233 ;; Defined at:
  2234 ;;		line 55 in file "RFID_Reader.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2237 ;;		 -> ReceivedString(16), 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  hexByte         2   44[COMRAM] unsigned int 
  2240 ;;  i               1   46[COMRAM] unsigned char 
  2241 ;;  checksum        1   43[COMRAM] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      unsigned char 
  2244 ;; Registers used:
  2245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2251 ;;      Params:         2       0       0       0
  2252 ;;      Locals:         4       0       0       0
  2253 ;;      Temps:          6       0       0       0
  2254 ;;      Totals:        12       0       0       0
  2255 ;;Total ram usage:       12 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    3
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text7
  2266  00177C                     __ptext7:
  2267                           	opt stack 0
  2268  00177C                     _VerifySignal:
  2269                           	opt stack 27
  2270                           
  2271                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2272                           
  2273                           ;incstack = 0
  2274  00177C  0E00               	movlw	0
  2275  00177E  6E2C               	movwf	VerifySignal@checksum,c
  2276                           
  2277                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2278  001780  0E00               	movlw	0
  2279  001782  6E2E               	movwf	VerifySignal@hexByte+1,c
  2280  001784  0E00               	movlw	0
  2281  001786  6E2D               	movwf	VerifySignal@hexByte,c
  2282                           
  2283                           ;RFID_Reader.c: 58: unsigned char i=0;
  2284  001788  0E00               	movlw	0
  2285  00178A  6E2F               	movwf	VerifySignal@i,c
  2286                           
  2287                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2288  00178C  EE20 F004          	lfsr	2,4
  2289  001790  5024               	movf	VerifySignal@Signal,w,c
  2290  001792  26D9               	addwf	fsr2l,f,c
  2291  001794  5025               	movf	VerifySignal@Signal+1,w,c
  2292  001796  22DA               	addwfc	fsr2h,f,c
  2293  001798  50DF               	movf	indf2,w,c
  2294  00179A  6E26               	movwf	??_VerifySignal& (0+255),c
  2295  00179C  EE20 F003          	lfsr	2,3
  2296  0017A0  5024               	movf	VerifySignal@Signal,w,c
  2297  0017A2  26D9               	addwf	fsr2l,f,c
  2298  0017A4  5025               	movf	VerifySignal@Signal+1,w,c
  2299  0017A6  22DA               	addwfc	fsr2h,f,c
  2300  0017A8  50DF               	movf	indf2,w,c
  2301  0017AA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2302  0017AC  5027               	movf	??_VerifySignal+1,w,c
  2303  0017AE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2304  0017B0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2305  0017B2  5026               	movf	??_VerifySignal,w,c
  2306  0017B4  2428               	addwf	??_VerifySignal+2,w,c
  2307  0017B6  6E2D               	movwf	VerifySignal@hexByte,c
  2308  0017B8  0E00               	movlw	0
  2309  0017BA  2029               	addwfc	??_VerifySignal+3,w,c
  2310  0017BC  6E2E               	movwf	VerifySignal@hexByte+1,c
  2311                           
  2312                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2313  0017BE  EE20 F002          	lfsr	2,2
  2314  0017C2  5024               	movf	VerifySignal@Signal,w,c
  2315  0017C4  26D9               	addwf	fsr2l,f,c
  2316  0017C6  5025               	movf	VerifySignal@Signal+1,w,c
  2317  0017C8  22DA               	addwfc	fsr2h,f,c
  2318  0017CA  50DF               	movf	indf2,w,c
  2319  0017CC  182D               	xorwf	VerifySignal@hexByte,w,c
  2320  0017CE  6E2C               	movwf	VerifySignal@checksum,c
  2321                           
  2322                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2323  0017D0  0E05               	movlw	5
  2324  0017D2  6E2F               	movwf	VerifySignal@i,c
  2325  0017D4                     l2730:
  2326  0017D4  0E09               	movlw	9
  2327  0017D6  642F               	cpfsgt	VerifySignal@i,c
  2328  0017D8  D001               	goto	l2734
  2329  0017DA  D028               	goto	l2742
  2330  0017DC                     l2734:
  2331                           
  2332                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2333  0017DC  502F               	movf	VerifySignal@i,w,c
  2334  0017DE  6E26               	movwf	??_VerifySignal& (0+255),c
  2335  0017E0  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2336  0017E2  0E01               	movlw	1
  2337  0017E4  2626               	addwf	??_VerifySignal,f,c
  2338  0017E6  0E00               	movlw	0
  2339  0017E8  2227               	addwfc	??_VerifySignal+1,f,c
  2340  0017EA  5026               	movf	??_VerifySignal,w,c
  2341  0017EC  2424               	addwf	VerifySignal@Signal,w,c
  2342  0017EE  6ED9               	movwf	fsr2l,c
  2343  0017F0  5027               	movf	??_VerifySignal+1,w,c
  2344  0017F2  2025               	addwfc	VerifySignal@Signal+1,w,c
  2345  0017F4  6EDA               	movwf	fsr2h,c
  2346  0017F6  50DF               	movf	indf2,w,c
  2347  0017F8  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2348  0017FA  502F               	movf	VerifySignal@i,w,c
  2349  0017FC  0D01               	mullw	1
  2350  0017FE  50F3               	movf	prodl,w,c
  2351  001800  2424               	addwf	VerifySignal@Signal,w,c
  2352  001802  6ED9               	movwf	fsr2l,c
  2353  001804  50F4               	movf	prodh,w,c
  2354  001806  2025               	addwfc	VerifySignal@Signal+1,w,c
  2355  001808  6EDA               	movwf	fsr2h,c
  2356  00180A  50DF               	movf	indf2,w,c
  2357  00180C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2358  00180E  5029               	movf	??_VerifySignal+3,w,c
  2359  001810  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2360  001812  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2361  001814  5028               	movf	??_VerifySignal+2,w,c
  2362  001816  242A               	addwf	??_VerifySignal+4,w,c
  2363  001818  6E2D               	movwf	VerifySignal@hexByte,c
  2364  00181A  0E00               	movlw	0
  2365  00181C  202B               	addwfc	??_VerifySignal+5,w,c
  2366  00181E  6E2E               	movwf	VerifySignal@hexByte+1,c
  2367                           
  2368                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2369  001820  502C               	movf	VerifySignal@checksum,w,c
  2370  001822  182D               	xorwf	VerifySignal@hexByte,w,c
  2371  001824  6E2C               	movwf	VerifySignal@checksum,c
  2372  001826  0E02               	movlw	2
  2373  001828  262F               	addwf	VerifySignal@i,f,c
  2374  00182A  D7D4               	goto	l2730
  2375  00182C                     l2742:
  2376                           
  2377                           ;RFID_Reader.c: 68: }
  2378                           ;RFID_Reader.c: 71: return 1;
  2379  00182C  0E01               	movlw	1
  2380  00182E  0012               	return	
  2381  001830                     __end_of_VerifySignal:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           indf1	equ	0xFE7
  2390                           fsr1h	equ	0xFE2
  2391                           fsr1l	equ	0xFE1
  2392                           indf2	equ	0xFDF
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _ScanWithRange *****************
  2398 ;; Defined at:
  2399 ;;		line 130 in file "Movement.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  2402 ;;		 -> main@mL(9), 
  2403 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  2404 ;;		 -> main@mR(9), 
  2405 ;;  tenth_second    1   14[BANK0 ] unsigned char 
  2406 ;;  MoveTimeEntr    2   15[BANK0 ] PTR unsigned char 
  2407 ;;		 -> main@MoveTime(100), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  SensorResult    4   30[BANK0 ] unsigned int [2]
  2410 ;;  SensorResult    4   26[BANK0 ] unsigned int [2]
  2411 ;;  SensorResult    4   22[BANK0 ] unsigned int [2]
  2412 ;;  ResultFalseR    1   21[BANK0 ] unsigned char 
  2413 ;;  ResultFalseC    1   20[BANK0 ] unsigned char 
  2414 ;;  ResultFalseL    1   19[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      unsigned char 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2424 ;;      Params:         0       7       0       0
  2425 ;;      Locals:         0      15       0       0
  2426 ;;      Temps:          0       2       0       0
  2427 ;;      Totals:         0      24       0       0
  2428 ;;Total ram usage:       24 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    7
  2431 ;; This function calls:
  2432 ;;		___awdiv
  2433 ;;		_delay_tenth_s
  2434 ;;		_grabLeftIR
  2435 ;;		_grabRightIR
  2436 ;;		_stop
  2437 ;;		_turnLeft
  2438 ;;		_turnRight
  2439 ;; This function is called by:
  2440 ;;		_main
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text8
  2445  000370                     __ptext8:
  2446                           	opt stack 0
  2447  000370                     _ScanWithRange:
  2448                           	opt stack 23
  2449                           
  2450                           ;Movement.c: 133: unsigned int SensorResultL[2]={0,0};
  2451                           
  2452                           ;incstack = 0
  2453  000370  C0A8  F076         	movff	ScanWithRange@F3888,ScanWithRange@SensorResultL
  2454  000374  C0A9  F077         	movff	ScanWithRange@F3888+1,ScanWithRange@SensorResultL+1
  2455  000378  C0AA  F078         	movff	ScanWithRange@F3888+2,ScanWithRange@SensorResultL+2
  2456  00037C  C0AB  F079         	movff	ScanWithRange@F3888+3,ScanWithRange@SensorResultL+3
  2457                           
  2458                           ;Movement.c: 134: unsigned int SensorResultC[2]={0,0};
  2459  000380  C0AC  F07A         	movff	ScanWithRange@F3890,ScanWithRange@SensorResultC
  2460  000384  C0AD  F07B         	movff	ScanWithRange@F3890+1,ScanWithRange@SensorResultC+1
  2461  000388  C0AE  F07C         	movff	ScanWithRange@F3890+2,ScanWithRange@SensorResultC+2
  2462  00038C  C0AF  F07D         	movff	ScanWithRange@F3890+3,ScanWithRange@SensorResultC+3
  2463                           
  2464                           ;Movement.c: 135: unsigned int SensorResultR[2]={0,0};
  2465  000390  C0B0  F07E         	movff	ScanWithRange@F3892,ScanWithRange@SensorResultR
  2466  000394  C0B1  F07F         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResultR+1
  2467  000398  C0B2  F080         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResultR+2
  2468  00039C  C0B3  F081         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResultR+3
  2469                           
  2470                           ;Movement.c: 136: unsigned char ResultFalseL=0;
  2471  0003A0  0E00               	movlw	0
  2472  0003A2  0100               	movlb	0	; () banked
  2473  0003A4  6F73               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2474                           
  2475                           ;Movement.c: 137: unsigned char ResultFalseC=0;
  2476  0003A6  0E00               	movlw	0
  2477  0003A8  0100               	movlb	0	; () banked
  2478  0003AA  6F74               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2479                           
  2480                           ;Movement.c: 138: unsigned char ResultFalseR=0;
  2481  0003AC  0E00               	movlw	0
  2482  0003AE  0100               	movlb	0	; () banked
  2483  0003B0  6F75               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;Movement.c: 145: stop(mL,mR);
  2487  0003B2  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2488  0003B6  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2489  0003BA  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2490  0003BE  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2491  0003C2  EC18  F00C         	call	_stop	;wreg free
  2492                           
  2493                           ;Movement.c: 146: SensorResultC[0]=grabLeftIR();
  2494  0003C6  EC22  F00D         	call	_grabLeftIR	;wreg free
  2495  0003CA  C024  F07A         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  2496  0003CE  C025  F07B         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  2497                           
  2498                           ;Movement.c: 147: SensorResultC[1]=grabRightIR();
  2499  0003D2  ECE9  F00C         	call	_grabRightIR	;wreg free
  2500  0003D6  C024  F07C         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  2501  0003DA  C025  F07D         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  2502                           
  2503                           ;Movement.c: 151: CAP1BUFH=0;
  2504  0003DE  0E00               	movlw	0
  2505  0003E0  6E69               	movwf	3945,c	;volatile
  2506                           
  2507                           ;Movement.c: 152: CAP1BUFL=0;
  2508  0003E2  0E00               	movlw	0
  2509  0003E4  6E68               	movwf	3944,c	;volatile
  2510                           
  2511                           ;Movement.c: 153: CAP2BUFH=0;
  2512  0003E6  0E00               	movlw	0
  2513  0003E8  6E67               	movwf	3943,c	;volatile
  2514                           
  2515                           ;Movement.c: 154: CAP2BUFL=0;
  2516  0003EA  0E00               	movlw	0
  2517  0003EC  6E66               	movwf	3942,c	;volatile
  2518                           
  2519                           ;Movement.c: 157: turnLeft(mL,mR);
  2520  0003EE  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2521  0003F2  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2522  0003F6  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2523  0003FA  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2524  0003FE  ECE3  F00D         	call	_turnLeft	;wreg free
  2525                           
  2526                           ;Movement.c: 158: delay_tenth_s(tenth_seconds);
  2527  000402  0100               	movlb	0	; () banked
  2528  000404  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2529  000406  EC48  F00E         	call	_delay_tenth_s
  2530                           
  2531                           ;Movement.c: 159: (*MoveTimeEntry) += tenth_seconds;
  2532  00040A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2533  00040E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2534  000412  0100               	movlb	0	; () banked
  2535  000414  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2536  000416  26DF               	addwf	indf2,f,c
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;Movement.c: 161: stop(mL,mR);
  2540  000418  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2541  00041C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2542  000420  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2543  000424  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2544  000428  EC18  F00C         	call	_stop	;wreg free
  2545                           
  2546                           ;Movement.c: 162: SensorResultL[0]=grabLeftIR();
  2547  00042C  EC22  F00D         	call	_grabLeftIR	;wreg free
  2548  000430  C024  F076         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  2549  000434  C025  F077         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  2550                           
  2551                           ;Movement.c: 163: SensorResultL[1]=grabRightIR();
  2552  000438  ECE9  F00C         	call	_grabRightIR	;wreg free
  2553  00043C  C024  F078         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  2554  000440  C025  F079         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  2555                           
  2556                           ;Movement.c: 167: CAP1BUFH=0;
  2557  000444  0E00               	movlw	0
  2558  000446  6E69               	movwf	3945,c	;volatile
  2559                           
  2560                           ;Movement.c: 168: CAP1BUFL=0;
  2561  000448  0E00               	movlw	0
  2562  00044A  6E68               	movwf	3944,c	;volatile
  2563                           
  2564                           ;Movement.c: 169: CAP2BUFH=0;
  2565  00044C  0E00               	movlw	0
  2566  00044E  6E67               	movwf	3943,c	;volatile
  2567                           
  2568                           ;Movement.c: 170: CAP2BUFL=0;
  2569  000450  0E00               	movlw	0
  2570  000452  6E66               	movwf	3942,c	;volatile
  2571                           
  2572                           ;Movement.c: 173: turnRight(mL,mR);
  2573  000454  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  2574  000458  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2575  00045C  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  2576  000460  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2577  000464  ECBC  F00D         	call	_turnRight	;wreg free
  2578                           
  2579                           ;Movement.c: 174: delay_tenth_s(2*tenth_seconds);
  2580  000468  0100               	movlb	0	; () banked
  2581  00046A  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2582  00046C  0D02               	mullw	2
  2583  00046E  50F3               	movf	prodl,w,c
  2584  000470  EC48  F00E         	call	_delay_tenth_s
  2585                           
  2586                           ;Movement.c: 175: (*MoveTimeEntry) -= 2*tenth_seconds;
  2587  000474  0100               	movlb	0	; () banked
  2588  000476  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2589  000478  0D02               	mullw	2
  2590  00047A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2591  00047E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2592  000482  50F3               	movf	prodl,w,c
  2593  000484  5EDF               	subwf	indf2,f,c
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;Movement.c: 177: stop(mL,mR);
  2597  000486  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2598  00048A  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2599  00048E  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2600  000492  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2601  000496  EC18  F00C         	call	_stop	;wreg free
  2602                           
  2603                           ;Movement.c: 178: SensorResultR[0]=grabLeftIR();
  2604  00049A  EC22  F00D         	call	_grabLeftIR	;wreg free
  2605  00049E  C024  F07E         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  2606  0004A2  C025  F07F         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  2607                           
  2608                           ;Movement.c: 179: SensorResultR[1]=grabRightIR();
  2609  0004A6  ECE9  F00C         	call	_grabRightIR	;wreg free
  2610  0004AA  C024  F080         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  2611  0004AE  C025  F081         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  2612                           
  2613                           ;Movement.c: 183: CAP1BUFH=0;
  2614  0004B2  0E00               	movlw	0
  2615  0004B4  6E69               	movwf	3945,c	;volatile
  2616                           
  2617                           ;Movement.c: 184: CAP1BUFL=0;
  2618  0004B6  0E00               	movlw	0
  2619  0004B8  6E68               	movwf	3944,c	;volatile
  2620                           
  2621                           ;Movement.c: 185: CAP2BUFH=0;
  2622  0004BA  0E00               	movlw	0
  2623  0004BC  6E67               	movwf	3943,c	;volatile
  2624                           
  2625                           ;Movement.c: 186: CAP2BUFL=0;
  2626  0004BE  0E00               	movlw	0
  2627  0004C0  6E66               	movwf	3942,c	;volatile
  2628                           
  2629                           ;Movement.c: 197: if((SensorResultL[0]+SensorResultL[1])<ClearSignalThreshold){
  2630  0004C2  0E0B               	movlw	low _ClearSignalThreshold
  2631  0004C4  6EF6               	movwf	tblptrl,c
  2632  0004C6                     	if	1	;There is more than 1 active tblptr byte
  2633  0004C6  0E03               	movlw	high _ClearSignalThreshold
  2634  0004C8  6EF7               	movwf	tblptrh,c
  2635  0004CA                     	endif
  2636  0004CA                     	if	0	;There are less than 3 active tblptr bytes
  2637  0004CA                     	endif
  2638  0004CA  0100               	movlb	0	; () banked
  2639  0004CC  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2640  0004CE  0100               	movlb	0	; () banked
  2641  0004D0  2578               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2642  0004D2  0100               	movlb	0	; () banked
  2643  0004D4  6F71               	movwf	??_ScanWithRange& (0+255),b
  2644  0004D6  0100               	movlb	0	; () banked
  2645  0004D8  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2646  0004DA  0100               	movlb	0	; () banked
  2647  0004DC  2179               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2648  0004DE  0100               	movlb	0	; () banked
  2649  0004E0  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2650  0004E2  0009               	tblrd		*+
  2651  0004E4  50F5               	movf	tablat,w,c
  2652  0004E6  0100               	movlb	0	; () banked
  2653  0004E8  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2654  0004EA  0009               	tblrd		*+
  2655  0004EC  50F5               	movf	tablat,w,c
  2656  0004EE  0100               	movlb	0	; () banked
  2657  0004F0  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2658  0004F2  B0D8               	btfsc	status,0,c
  2659  0004F4  D00D               	goto	l3144
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;Movement.c: 198: SensorResultL[0]=0;
  2663  0004F6  0E00               	movlw	0
  2664  0004F8  0100               	movlb	0	; () banked
  2665  0004FA  6F77               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  2666  0004FC  0E00               	movlw	0
  2667  0004FE  6F76               	movwf	ScanWithRange@SensorResultL& (0+255),b
  2668                           
  2669                           ;Movement.c: 199: SensorResultL[1]=0;
  2670  000500  0E00               	movlw	0
  2671  000502  0100               	movlb	0	; () banked
  2672  000504  6F79               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  2673  000506  0E00               	movlw	0
  2674  000508  6F78               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  2675                           
  2676                           ;Movement.c: 200: ResultFalseL=1;
  2677  00050A  0E01               	movlw	1
  2678  00050C  0100               	movlb	0	; () banked
  2679  00050E  6F73               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  2680  000510                     l3144:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;Movement.c: 201: }
  2684                           ;Movement.c: 202: if((SensorResultC[0]+SensorResultC[1])<ClearSignalThreshold){
  2685  000510  0E0B               	movlw	low _ClearSignalThreshold
  2686  000512  6EF6               	movwf	tblptrl,c
  2687  000514                     	if	1	;There is more than 1 active tblptr byte
  2688  000514  0E03               	movlw	high _ClearSignalThreshold
  2689  000516  6EF7               	movwf	tblptrh,c
  2690  000518                     	endif
  2691  000518                     	if	0	;There are less than 3 active tblptr bytes
  2692  000518                     	endif
  2693  000518  0100               	movlb	0	; () banked
  2694  00051A  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  2695  00051C  0100               	movlb	0	; () banked
  2696  00051E  257C               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  2697  000520  0100               	movlb	0	; () banked
  2698  000522  6F71               	movwf	??_ScanWithRange& (0+255),b
  2699  000524  0100               	movlb	0	; () banked
  2700  000526  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  2701  000528  0100               	movlb	0	; () banked
  2702  00052A  217D               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  2703  00052C  0100               	movlb	0	; () banked
  2704  00052E  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2705  000530  0009               	tblrd		*+
  2706  000532  50F5               	movf	tablat,w,c
  2707  000534  0100               	movlb	0	; () banked
  2708  000536  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2709  000538  0009               	tblrd		*+
  2710  00053A  50F5               	movf	tablat,w,c
  2711  00053C  0100               	movlb	0	; () banked
  2712  00053E  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2713  000540  B0D8               	btfsc	status,0,c
  2714  000542  D00D               	goto	l3148
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;Movement.c: 203: SensorResultC[0]=0;
  2718  000544  0E00               	movlw	0
  2719  000546  0100               	movlb	0	; () banked
  2720  000548  6F7B               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  2721  00054A  0E00               	movlw	0
  2722  00054C  6F7A               	movwf	ScanWithRange@SensorResultC& (0+255),b
  2723                           
  2724                           ;Movement.c: 204: SensorResultC[1]=0;
  2725  00054E  0E00               	movlw	0
  2726  000550  0100               	movlb	0	; () banked
  2727  000552  6F7D               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  2728  000554  0E00               	movlw	0
  2729  000556  6F7C               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  2730                           
  2731                           ;Movement.c: 205: ResultFalseC=1;
  2732  000558  0E01               	movlw	1
  2733  00055A  0100               	movlb	0	; () banked
  2734  00055C  6F74               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  2735  00055E                     l3148:
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;Movement.c: 206: }
  2739                           ;Movement.c: 207: if((SensorResultR[0]+SensorResultR[1])<ClearSignalThreshold){
  2740  00055E  0E0B               	movlw	low _ClearSignalThreshold
  2741  000560  6EF6               	movwf	tblptrl,c
  2742  000562                     	if	1	;There is more than 1 active tblptr byte
  2743  000562  0E03               	movlw	high _ClearSignalThreshold
  2744  000564  6EF7               	movwf	tblptrh,c
  2745  000566                     	endif
  2746  000566                     	if	0	;There are less than 3 active tblptr bytes
  2747  000566                     	endif
  2748  000566  0100               	movlb	0	; () banked
  2749  000568  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  2750  00056A  0100               	movlb	0	; () banked
  2751  00056C  2580               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  2752  00056E  0100               	movlb	0	; () banked
  2753  000570  6F71               	movwf	??_ScanWithRange& (0+255),b
  2754  000572  0100               	movlb	0	; () banked
  2755  000574  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  2756  000576  0100               	movlb	0	; () banked
  2757  000578  2181               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  2758  00057A  0100               	movlb	0	; () banked
  2759  00057C  6F72               	movwf	(??_ScanWithRange+1)& (0+255),b
  2760  00057E  0009               	tblrd		*+
  2761  000580  50F5               	movf	tablat,w,c
  2762  000582  0100               	movlb	0	; () banked
  2763  000584  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2764  000586  0009               	tblrd		*+
  2765  000588  50F5               	movf	tablat,w,c
  2766  00058A  0100               	movlb	0	; () banked
  2767  00058C  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2768  00058E  B0D8               	btfsc	status,0,c
  2769  000590  D00D               	goto	l3152
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;Movement.c: 208: SensorResultR[0]=0;
  2773  000592  0E00               	movlw	0
  2774  000594  0100               	movlb	0	; () banked
  2775  000596  6F7F               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  2776  000598  0E00               	movlw	0
  2777  00059A  6F7E               	movwf	ScanWithRange@SensorResultR& (0+255),b
  2778                           
  2779                           ;Movement.c: 209: SensorResultR[1]=0;
  2780  00059C  0E00               	movlw	0
  2781  00059E  0100               	movlb	0	; () banked
  2782  0005A0  6F81               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  2783  0005A2  0E00               	movlw	0
  2784  0005A4  6F80               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  2785                           
  2786                           ;Movement.c: 210: ResultFalseR=1;
  2787  0005A6  0E01               	movlw	1
  2788  0005A8  0100               	movlb	0	; () banked
  2789  0005AA  6F75               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  2790  0005AC                     l3152:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;Movement.c: 211: }
  2794                           ;Movement.c: 213: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  2795  0005AC  0100               	movlb	0	; () banked
  2796  0005AE  5174               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  2797  0005B0  C073  F071         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  2798  0005B4  0100               	movlb	0	; () banked
  2799  0005B6  6B72               	clrf	(??_ScanWithRange+1)& (0+255),b
  2800  0005B8  0100               	movlb	0	; () banked
  2801  0005BA  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2802  0005BC  0E00               	movlw	0
  2803  0005BE  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2804  0005C0  0100               	movlb	0	; () banked
  2805  0005C2  5175               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  2806  0005C4  0100               	movlb	0	; () banked
  2807  0005C6  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2808  0005C8  0E00               	movlw	0
  2809  0005CA  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2810  0005CC  0E03               	movlw	3
  2811  0005CE  0100               	movlb	0	; () banked
  2812  0005D0  1971               	xorwf	??_ScanWithRange& (0+255),w,b
  2813  0005D2  0100               	movlb	0	; () banked
  2814  0005D4  1172               	iorwf	(??_ScanWithRange+1)& (0+255),w,b
  2815  0005D6  A4D8               	btfss	status,2,c
  2816  0005D8  D025               	goto	l3168
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;Movement.c: 215: turnLeft(mL,mR);
  2820  0005DA  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2821  0005DE  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2822  0005E2  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2823  0005E6  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2824  0005EA  ECE3  F00D         	call	_turnLeft	;wreg free
  2825                           
  2826                           ;Movement.c: 216: delay_tenth_s(5*tenth_seconds);
  2827  0005EE  0100               	movlb	0	; () banked
  2828  0005F0  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2829  0005F2  0D05               	mullw	5
  2830  0005F4  50F3               	movf	prodl,w,c
  2831  0005F6  EC48  F00E         	call	_delay_tenth_s
  2832                           
  2833                           ;Movement.c: 217: (*MoveTimeEntry) += 5*tenth_seconds;
  2834  0005FA  0100               	movlb	0	; () banked
  2835  0005FC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2836  0005FE  0D05               	mullw	5
  2837  000600  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2838  000604  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2839  000608  50F3               	movf	prodl,w,c
  2840  00060A  26DF               	addwf	indf2,f,c
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;Movement.c: 218: stop(mL,mR);
  2844  00060C  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2845  000610  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2846  000614  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2847  000618  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2848  00061C  EC18  F00C         	call	_stop	;wreg free
  2849                           
  2850                           ;Movement.c: 220: return -1;
  2851  000620  0EFF               	movlw	255
  2852  000622  0012               	return	
  2853  000624                     l3168:
  2854                           
  2855                           ;Movement.c: 223: if (((SensorResultL[0]>DirectionFoundThreshold)&&(SensorResultL[1]>Dir
      +                          ectionFoundThreshold)
  2856                           ;Movement.c: 224: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  2857                           ;Movement.c: 225: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  2858  000624  0E0D               	movlw	low _DirectionFoundThreshold
  2859  000626  6EF6               	movwf	tblptrl,c
  2860  000628                     	if	1	;There is more than 1 active tblptr byte
  2861  000628  0E03               	movlw	high _DirectionFoundThreshold
  2862  00062A  6EF7               	movwf	tblptrh,c
  2863  00062C                     	endif
  2864  00062C                     	if	0	;There are less than 3 active tblptr bytes
  2865  00062C                     	endif
  2866  00062C  0100               	movlb	0	; () banked
  2867  00062E  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2868  000630  0009               	tblrd		*+
  2869  000632  5CF5               	subwf	tablat,w,c
  2870  000634  0100               	movlb	0	; () banked
  2871  000636  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2872  000638  0009               	tblrd		*+
  2873  00063A  58F5               	subwfb	tablat,w,c
  2874  00063C  B0D8               	btfsc	status,0,c
  2875  00063E  D073               	goto	l3190
  2876                           
  2877                           ; BSR set to: 0
  2878  000640  0E0D               	movlw	low _DirectionFoundThreshold
  2879  000642  6EF6               	movwf	tblptrl,c
  2880  000644                     	if	1	;There is more than 1 active tblptr byte
  2881  000644  0E03               	movlw	high _DirectionFoundThreshold
  2882  000646  6EF7               	movwf	tblptrh,c
  2883  000648                     	endif
  2884  000648                     	if	0	;There are less than 3 active tblptr bytes
  2885  000648                     	endif
  2886  000648  0100               	movlb	0	; () banked
  2887  00064A  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2888  00064C  0009               	tblrd		*+
  2889  00064E  5CF5               	subwf	tablat,w,c
  2890  000650  0100               	movlb	0	; () banked
  2891  000652  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2892  000654  0009               	tblrd		*+
  2893  000656  58F5               	subwfb	tablat,w,c
  2894  000658  B0D8               	btfsc	status,0,c
  2895  00065A  D065               	goto	l3190
  2896                           
  2897                           ; BSR set to: 0
  2898  00065C  0E0F               	movlw	low _DirectionFoundTolerance
  2899  00065E  6EF6               	movwf	tblptrl,c
  2900  000660                     	if	1	;There is more than 1 active tblptr byte
  2901  000660  0E03               	movlw	high _DirectionFoundTolerance
  2902  000662  6EF7               	movwf	tblptrh,c
  2903  000664                     	endif
  2904  000664                     	if	0	;There are less than 3 active tblptr bytes
  2905  000664                     	endif
  2906  000664  EE20  F078         	lfsr	2,ScanWithRange@SensorResultL+2
  2907  000668  CFDE F071          	movff	postinc2,??_ScanWithRange
  2908  00066C  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  2909  000670  0100               	movlb	0	; () banked
  2910  000672  1F71               	comf	??_ScanWithRange& (0+255),f,b
  2911  000674  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  2912  000676  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  2913  000678  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  2914  00067A  0100               	movlb	0	; () banked
  2915  00067C  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  2916  00067E  0100               	movlb	0	; () banked
  2917  000680  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2918  000682  0100               	movlb	0	; () banked
  2919  000684  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  2920  000686  0100               	movlb	0	; () banked
  2921  000688  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2922  00068A  0009               	tblrd		*+
  2923  00068C  50F5               	movf	tablat,w,c
  2924  00068E  0100               	movlb	0	; () banked
  2925  000690  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2926  000692  0009               	tblrd		*+
  2927  000694  50F5               	movf	tablat,w,c
  2928  000696  0100               	movlb	0	; () banked
  2929  000698  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2930  00069A  A0D8               	btfss	status,0,c
  2931  00069C  D01F               	goto	l3176
  2932                           
  2933                           ; BSR set to: 0
  2934  00069E  0E0F               	movlw	low _DirectionFoundTolerance
  2935  0006A0  6EF6               	movwf	tblptrl,c
  2936  0006A2                     	if	1	;There is more than 1 active tblptr byte
  2937  0006A2  0E03               	movlw	high _DirectionFoundTolerance
  2938  0006A4  6EF7               	movwf	tblptrh,c
  2939  0006A6                     	endif
  2940  0006A6                     	if	0	;There are less than 3 active tblptr bytes
  2941  0006A6                     	endif
  2942  0006A6  C076  F071         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  2943  0006AA  C077  F072         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  2944  0006AE  0100               	movlb	0	; () banked
  2945  0006B0  1F71               	comf	??_ScanWithRange& (0+255),f,b
  2946  0006B2  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  2947  0006B4  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  2948  0006B6  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  2949  0006B8  0100               	movlb	0	; () banked
  2950  0006BA  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  2951  0006BC  0100               	movlb	0	; () banked
  2952  0006BE  2771               	addwf	??_ScanWithRange& (0+255),f,b
  2953  0006C0  0100               	movlb	0	; () banked
  2954  0006C2  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  2955  0006C4  0100               	movlb	0	; () banked
  2956  0006C6  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  2957  0006C8  0009               	tblrd		*+
  2958  0006CA  50F5               	movf	tablat,w,c
  2959  0006CC  0100               	movlb	0	; () banked
  2960  0006CE  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  2961  0006D0  0009               	tblrd		*+
  2962  0006D2  50F5               	movf	tablat,w,c
  2963  0006D4  0100               	movlb	0	; () banked
  2964  0006D6  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2965  0006D8  B0D8               	btfsc	status,0,c
  2966  0006DA  D025               	goto	l3190
  2967  0006DC                     l3176:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;Movement.c: 227: turnLeft(mL,mR);
  2971  0006DC  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2972  0006E0  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2973  0006E4  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2974  0006E8  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2975  0006EC  ECE3  F00D         	call	_turnLeft	;wreg free
  2976                           
  2977                           ;Movement.c: 228: delay_tenth_s(2*(tenth_seconds));
  2978  0006F0  0100               	movlb	0	; () banked
  2979  0006F2  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2980  0006F4  0D02               	mullw	2
  2981  0006F6  50F3               	movf	prodl,w,c
  2982  0006F8  EC48  F00E         	call	_delay_tenth_s
  2983                           
  2984                           ;Movement.c: 229: (*MoveTimeEntry) += 2*tenth_seconds;
  2985  0006FC  0100               	movlb	0	; () banked
  2986  0006FE  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  2987  000700  0D02               	mullw	2
  2988  000702  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  2989  000706  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  2990  00070A  50F3               	movf	prodl,w,c
  2991  00070C  26DF               	addwf	indf2,f,c
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;Movement.c: 230: stop(mL,mR);
  2995  00070E  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  2996  000712  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2997  000716  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  2998  00071A  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2999  00071E  EC18  F00C         	call	_stop	;wreg free
  3000  000722                     l3184:
  3001                           
  3002                           ;Movement.c: 231: return 2;
  3003  000722  0E02               	movlw	2
  3004  000724  0012               	return	
  3005  000726                     l3190:
  3006                           
  3007                           ;Movement.c: 233: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  3008                           ;Movement.c: 234: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  3009  000726  0E0D               	movlw	low _DirectionFoundThreshold
  3010  000728  6EF6               	movwf	tblptrl,c
  3011  00072A                     	if	1	;There is more than 1 active tblptr byte
  3012  00072A  0E03               	movlw	high _DirectionFoundThreshold
  3013  00072C  6EF7               	movwf	tblptrh,c
  3014  00072E                     	endif
  3015  00072E                     	if	0	;There are less than 3 active tblptr bytes
  3016  00072E                     	endif
  3017  00072E  0100               	movlb	0	; () banked
  3018  000730  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3019  000732  0009               	tblrd		*+
  3020  000734  5CF5               	subwf	tablat,w,c
  3021  000736  0100               	movlb	0	; () banked
  3022  000738  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3023  00073A  0009               	tblrd		*+
  3024  00073C  58F5               	subwfb	tablat,w,c
  3025  00073E  B0D8               	btfsc	status,0,c
  3026  000740  D06E               	goto	l3212
  3027                           
  3028                           ; BSR set to: 0
  3029  000742  0E0D               	movlw	low _DirectionFoundThreshold
  3030  000744  6EF6               	movwf	tblptrl,c
  3031  000746                     	if	1	;There is more than 1 active tblptr byte
  3032  000746  0E03               	movlw	high _DirectionFoundThreshold
  3033  000748  6EF7               	movwf	tblptrh,c
  3034  00074A                     	endif
  3035  00074A                     	if	0	;There are less than 3 active tblptr bytes
  3036  00074A                     	endif
  3037  00074A  0100               	movlb	0	; () banked
  3038  00074C  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3039  00074E  0009               	tblrd		*+
  3040  000750  5CF5               	subwf	tablat,w,c
  3041  000752  0100               	movlb	0	; () banked
  3042  000754  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3043  000756  0009               	tblrd		*+
  3044  000758  58F5               	subwfb	tablat,w,c
  3045  00075A  B0D8               	btfsc	status,0,c
  3046  00075C  D060               	goto	l3212
  3047                           
  3048                           ; BSR set to: 0
  3049  00075E  0E0F               	movlw	low _DirectionFoundTolerance
  3050  000760  6EF6               	movwf	tblptrl,c
  3051  000762                     	if	1	;There is more than 1 active tblptr byte
  3052  000762  0E03               	movlw	high _DirectionFoundTolerance
  3053  000764  6EF7               	movwf	tblptrh,c
  3054  000766                     	endif
  3055  000766                     	if	0	;There are less than 3 active tblptr bytes
  3056  000766                     	endif
  3057  000766  EE20  F07C         	lfsr	2,ScanWithRange@SensorResultC+2
  3058  00076A  CFDE F071          	movff	postinc2,??_ScanWithRange
  3059  00076E  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3060  000772  0100               	movlb	0	; () banked
  3061  000774  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3062  000776  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3063  000778  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3064  00077A  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3065  00077C  0100               	movlb	0	; () banked
  3066  00077E  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3067  000780  0100               	movlb	0	; () banked
  3068  000782  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3069  000784  0100               	movlb	0	; () banked
  3070  000786  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3071  000788  0100               	movlb	0	; () banked
  3072  00078A  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3073  00078C  0009               	tblrd		*+
  3074  00078E  50F5               	movf	tablat,w,c
  3075  000790  0100               	movlb	0	; () banked
  3076  000792  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3077  000794  0009               	tblrd		*+
  3078  000796  50F5               	movf	tablat,w,c
  3079  000798  0100               	movlb	0	; () banked
  3080  00079A  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3081  00079C  A0D8               	btfss	status,0,c
  3082  00079E  D01F               	goto	l3198
  3083                           
  3084                           ; BSR set to: 0
  3085  0007A0  0E0F               	movlw	low _DirectionFoundTolerance
  3086  0007A2  6EF6               	movwf	tblptrl,c
  3087  0007A4                     	if	1	;There is more than 1 active tblptr byte
  3088  0007A4  0E03               	movlw	high _DirectionFoundTolerance
  3089  0007A6  6EF7               	movwf	tblptrh,c
  3090  0007A8                     	endif
  3091  0007A8                     	if	0	;There are less than 3 active tblptr bytes
  3092  0007A8                     	endif
  3093  0007A8  C07A  F071         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  3094  0007AC  C07B  F072         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  3095  0007B0  0100               	movlb	0	; () banked
  3096  0007B2  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3097  0007B4  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3098  0007B6  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3099  0007B8  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3100  0007BA  0100               	movlb	0	; () banked
  3101  0007BC  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3102  0007BE  0100               	movlb	0	; () banked
  3103  0007C0  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3104  0007C2  0100               	movlb	0	; () banked
  3105  0007C4  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3106  0007C6  0100               	movlb	0	; () banked
  3107  0007C8  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3108  0007CA  0009               	tblrd		*+
  3109  0007CC  50F5               	movf	tablat,w,c
  3110  0007CE  0100               	movlb	0	; () banked
  3111  0007D0  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3112  0007D2  0009               	tblrd		*+
  3113  0007D4  50F5               	movf	tablat,w,c
  3114  0007D6  0100               	movlb	0	; () banked
  3115  0007D8  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3116  0007DA  B0D8               	btfsc	status,0,c
  3117  0007DC  D020               	goto	l3212
  3118  0007DE                     l3198:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;Movement.c: 236: turnLeft(mL,mR);
  3122  0007DE  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3123  0007E2  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3124  0007E6  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3125  0007EA  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3126  0007EE  ECE3  F00D         	call	_turnLeft	;wreg free
  3127                           
  3128                           ;Movement.c: 237: delay_tenth_s(tenth_seconds);
  3129  0007F2  0100               	movlb	0	; () banked
  3130  0007F4  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3131  0007F6  EC48  F00E         	call	_delay_tenth_s
  3132                           
  3133                           ;Movement.c: 238: (*MoveTimeEntry) += tenth_seconds;
  3134  0007FA  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3135  0007FE  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3136  000802  0100               	movlb	0	; () banked
  3137  000804  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3138  000806  26DF               	addwf	indf2,f,c
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;Movement.c: 239: stop(mL,mR);
  3142  000808  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3143  00080C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3144  000810  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3145  000814  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3146  000818  EC18  F00C         	call	_stop	;wreg free
  3147  00081C  D782               	goto	l3184
  3148  00081E                     l3212:
  3149                           
  3150                           ;Movement.c: 242: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  3151                           ;Movement.c: 243: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  3152  00081E  0E0D               	movlw	low _DirectionFoundThreshold
  3153  000820  6EF6               	movwf	tblptrl,c
  3154  000822                     	if	1	;There is more than 1 active tblptr byte
  3155  000822  0E03               	movlw	high _DirectionFoundThreshold
  3156  000824  6EF7               	movwf	tblptrh,c
  3157  000826                     	endif
  3158  000826                     	if	0	;There are less than 3 active tblptr bytes
  3159  000826                     	endif
  3160  000826  0100               	movlb	0	; () banked
  3161  000828  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3162  00082A  0009               	tblrd		*+
  3163  00082C  5CF5               	subwf	tablat,w,c
  3164  00082E  0100               	movlb	0	; () banked
  3165  000830  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3166  000832  0009               	tblrd		*+
  3167  000834  58F5               	subwfb	tablat,w,c
  3168  000836  B0D8               	btfsc	status,0,c
  3169  000838  D059               	goto	l3228
  3170                           
  3171                           ; BSR set to: 0
  3172  00083A  0E0D               	movlw	low _DirectionFoundThreshold
  3173  00083C  6EF6               	movwf	tblptrl,c
  3174  00083E                     	if	1	;There is more than 1 active tblptr byte
  3175  00083E  0E03               	movlw	high _DirectionFoundThreshold
  3176  000840  6EF7               	movwf	tblptrh,c
  3177  000842                     	endif
  3178  000842                     	if	0	;There are less than 3 active tblptr bytes
  3179  000842                     	endif
  3180  000842  0100               	movlb	0	; () banked
  3181  000844  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3182  000846  0009               	tblrd		*+
  3183  000848  5CF5               	subwf	tablat,w,c
  3184  00084A  0100               	movlb	0	; () banked
  3185  00084C  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3186  00084E  0009               	tblrd		*+
  3187  000850  58F5               	subwfb	tablat,w,c
  3188  000852  B0D8               	btfsc	status,0,c
  3189  000854  D04B               	goto	l3228
  3190                           
  3191                           ; BSR set to: 0
  3192  000856  0E0F               	movlw	low _DirectionFoundTolerance
  3193  000858  6EF6               	movwf	tblptrl,c
  3194  00085A                     	if	1	;There is more than 1 active tblptr byte
  3195  00085A  0E03               	movlw	high _DirectionFoundTolerance
  3196  00085C  6EF7               	movwf	tblptrh,c
  3197  00085E                     	endif
  3198  00085E                     	if	0	;There are less than 3 active tblptr bytes
  3199  00085E                     	endif
  3200  00085E  EE20  F080         	lfsr	2,ScanWithRange@SensorResultR+2
  3201  000862  CFDE F071          	movff	postinc2,??_ScanWithRange
  3202  000866  CFDD F072          	movff	postdec2,??_ScanWithRange+1
  3203  00086A  0100               	movlb	0	; () banked
  3204  00086C  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3205  00086E  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3206  000870  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3207  000872  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3208  000874  0100               	movlb	0	; () banked
  3209  000876  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3210  000878  0100               	movlb	0	; () banked
  3211  00087A  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3212  00087C  0100               	movlb	0	; () banked
  3213  00087E  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3214  000880  0100               	movlb	0	; () banked
  3215  000882  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3216  000884  0009               	tblrd		*+
  3217  000886  50F5               	movf	tablat,w,c
  3218  000888  0100               	movlb	0	; () banked
  3219  00088A  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3220  00088C  0009               	tblrd		*+
  3221  00088E  50F5               	movf	tablat,w,c
  3222  000890  0100               	movlb	0	; () banked
  3223  000892  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3224  000894  A0D8               	btfss	status,0,c
  3225  000896  D01F               	goto	l3220
  3226                           
  3227                           ; BSR set to: 0
  3228  000898  0E0F               	movlw	low _DirectionFoundTolerance
  3229  00089A  6EF6               	movwf	tblptrl,c
  3230  00089C                     	if	1	;There is more than 1 active tblptr byte
  3231  00089C  0E03               	movlw	high _DirectionFoundTolerance
  3232  00089E  6EF7               	movwf	tblptrh,c
  3233  0008A0                     	endif
  3234  0008A0                     	if	0	;There are less than 3 active tblptr bytes
  3235  0008A0                     	endif
  3236  0008A0  C07E  F071         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  3237  0008A4  C07F  F072         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  3238  0008A8  0100               	movlb	0	; () banked
  3239  0008AA  1F71               	comf	??_ScanWithRange& (0+255),f,b
  3240  0008AC  1F72               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3241  0008AE  4B71               	infsnz	??_ScanWithRange& (0+255),f,b
  3242  0008B0  2B72               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3243  0008B2  0100               	movlb	0	; () banked
  3244  0008B4  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3245  0008B6  0100               	movlb	0	; () banked
  3246  0008B8  2771               	addwf	??_ScanWithRange& (0+255),f,b
  3247  0008BA  0100               	movlb	0	; () banked
  3248  0008BC  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3249  0008BE  0100               	movlb	0	; () banked
  3250  0008C0  2372               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3251  0008C2  0009               	tblrd		*+
  3252  0008C4  50F5               	movf	tablat,w,c
  3253  0008C6  0100               	movlb	0	; () banked
  3254  0008C8  5D71               	subwf	??_ScanWithRange& (0+255),w,b
  3255  0008CA  0009               	tblrd		*+
  3256  0008CC  50F5               	movf	tablat,w,c
  3257  0008CE  0100               	movlb	0	; () banked
  3258  0008D0  5972               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  3259  0008D2  B0D8               	btfsc	status,0,c
  3260  0008D4  D00B               	goto	l3228
  3261  0008D6                     l3220:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;Movement.c: 245: stop(mL,mR);
  3265  0008D6  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3266  0008DA  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3267  0008DE  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3268  0008E2  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3269  0008E6  EC18  F00C         	call	_stop	;wreg free
  3270  0008EA  D71B               	goto	l3184
  3271  0008EC                     l3228:
  3272  0008EC  0100               	movlb	0	; () banked
  3273  0008EE  5176               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  3274  0008F0  0100               	movlb	0	; () banked
  3275  0008F2  5D78               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3276  0008F4  0100               	movlb	0	; () banked
  3277  0008F6  5177               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3278  0008F8  0100               	movlb	0	; () banked
  3279  0008FA  5979               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3280  0008FC  B0D8               	btfsc	status,0,c
  3281  0008FE  D025               	goto	l3244
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;Movement.c: 251: turnLeft(mL,mR);
  3285  000900  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3286  000904  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3287  000908  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3288  00090C  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3289  000910  ECE3  F00D         	call	_turnLeft	;wreg free
  3290                           
  3291                           ;Movement.c: 252: delay_tenth_s(3*tenth_seconds);
  3292  000914  0100               	movlb	0	; () banked
  3293  000916  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3294  000918  0D03               	mullw	3
  3295  00091A  50F3               	movf	prodl,w,c
  3296  00091C  EC48  F00E         	call	_delay_tenth_s
  3297                           
  3298                           ;Movement.c: 253: (*MoveTimeEntry) += 3*tenth_seconds;
  3299  000920  0100               	movlb	0	; () banked
  3300  000922  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3301  000924  0D03               	mullw	3
  3302  000926  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3303  00092A  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3304  00092E  50F3               	movf	prodl,w,c
  3305  000930  26DF               	addwf	indf2,f,c
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;Movement.c: 254: stop(mL,mR);
  3309  000932  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3310  000936  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3311  00093A  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3312  00093E  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3313  000942  EC18  F00C         	call	_stop	;wreg free
  3314  000946                     l3238:
  3315                           
  3316                           ;Movement.c: 255: return 0;
  3317  000946  0E00               	movlw	0
  3318  000948  0012               	return	
  3319  00094A                     l3244:
  3320  00094A  0100               	movlb	0	; () banked
  3321  00094C  5180               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3322  00094E  0100               	movlb	0	; () banked
  3323  000950  5D7E               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  3324  000952  0100               	movlb	0	; () banked
  3325  000954  5181               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3326  000956  0100               	movlb	0	; () banked
  3327  000958  597F               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3328  00095A  B0D8               	btfsc	status,0,c
  3329  00095C  D020               	goto	l3260
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;Movement.c: 258: turnRight(mL,mR);
  3333  00095E  C06A  F066         	movff	ScanWithRange@mL,turnRight@mL
  3334  000962  C06B  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3335  000966  C06C  F068         	movff	ScanWithRange@mR,turnRight@mR
  3336  00096A  C06D  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3337  00096E  ECBC  F00D         	call	_turnRight	;wreg free
  3338                           
  3339                           ;Movement.c: 259: delay_tenth_s(tenth_seconds);
  3340  000972  0100               	movlb	0	; () banked
  3341  000974  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3342  000976  EC48  F00E         	call	_delay_tenth_s
  3343                           
  3344                           ;Movement.c: 260: (*MoveTimeEntry) -= tenth_seconds;
  3345  00097A  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3346  00097E  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3347  000982  0100               	movlb	0	; () banked
  3348  000984  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3349  000986  5EDF               	subwf	indf2,f,c
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;Movement.c: 261: stop(mL,mR);
  3353  000988  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3354  00098C  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3355  000990  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3356  000994  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3357  000998  EC18  F00C         	call	_stop	;wreg free
  3358  00099C  D7D4               	goto	l3238
  3359  00099E                     l3260:
  3360  00099E  0100               	movlb	0	; () banked
  3361  0009A0  5178               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  3362  0009A2  0100               	movlb	0	; () banked
  3363  0009A4  5D76               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  3364  0009A6  0100               	movlb	0	; () banked
  3365  0009A8  5179               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  3366  0009AA  0100               	movlb	0	; () banked
  3367  0009AC  5977               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  3368  0009AE  B0D8               	btfsc	status,0,c
  3369  0009B0  D043               	goto	l3278
  3370                           
  3371                           ; BSR set to: 0
  3372  0009B2  0100               	movlb	0	; () banked
  3373  0009B4  517A               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  3374  0009B6  0100               	movlb	0	; () banked
  3375  0009B8  5D7C               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3376  0009BA  0100               	movlb	0	; () banked
  3377  0009BC  517B               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3378  0009BE  0100               	movlb	0	; () banked
  3379  0009C0  597D               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3380  0009C2  B0D8               	btfsc	status,0,c
  3381  0009C4  D039               	goto	l3278
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;Movement.c: 267: turnLeft(mL,mR);
  3385  0009C6  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3386  0009CA  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3387  0009CE  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3388  0009D2  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3389  0009D6  ECE3  F00D         	call	_turnLeft	;wreg free
  3390                           
  3391                           ;Movement.c: 268: delay_tenth_s((3*tenth_seconds)/2);
  3392  0009DA  0100               	movlb	0	; () banked
  3393  0009DC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3394  0009DE  0D03               	mullw	3
  3395  0009E0  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3396  0009E4  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3397  0009E8  0E00               	movlw	0
  3398  0009EA  6E2D               	movwf	___awdiv@divisor+1,c
  3399  0009EC  0E02               	movlw	2
  3400  0009EE  6E2C               	movwf	___awdiv@divisor,c
  3401  0009F0  ECA7  F00C         	call	___awdiv	;wreg free
  3402  0009F4  502A               	movf	?___awdiv,w,c
  3403  0009F6  EC48  F00E         	call	_delay_tenth_s
  3404                           
  3405                           ;Movement.c: 269: (*MoveTimeEntry) += 3*tenth_seconds/2;
  3406  0009FA  0100               	movlb	0	; () banked
  3407  0009FC  516E               	movf	ScanWithRange@tenth_seconds& (0+255),w,b
  3408  0009FE  0D03               	mullw	3
  3409  000A00  CFF3 F02A          	movff	prodl,___awdiv@dividend
  3410  000A04  CFF4 F02B          	movff	prodh,___awdiv@dividend+1
  3411  000A08  0E00               	movlw	0
  3412  000A0A  6E2D               	movwf	___awdiv@divisor+1,c
  3413  000A0C  0E02               	movlw	2
  3414  000A0E  6E2C               	movwf	___awdiv@divisor,c
  3415  000A10  ECA7  F00C         	call	___awdiv	;wreg free
  3416  000A14  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3417  000A18  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3418  000A1C  502A               	movf	?___awdiv,w,c
  3419  000A1E  26DF               	addwf	indf2,f,c
  3420                           
  3421                           ;Movement.c: 270: stop(mL,mR);
  3422  000A20  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3423  000A24  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3424  000A28  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3425  000A2C  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3426  000A30  EC18  F00C         	call	_stop	;wreg free
  3427  000A34                     l3272:
  3428                           
  3429                           ;Movement.c: 271: return 1;
  3430  000A34  0E01               	movlw	1
  3431  000A36  0012               	return	
  3432  000A38                     l3278:
  3433  000A38  0100               	movlb	0	; () banked
  3434  000A3A  517E               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  3435  000A3C  0100               	movlb	0	; () banked
  3436  000A3E  5D80               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  3437  000A40  0100               	movlb	0	; () banked
  3438  000A42  517F               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  3439  000A44  0100               	movlb	0	; () banked
  3440  000A46  5981               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  3441  000A48  B0D8               	btfsc	status,0,c
  3442  000A4A  D03A               	goto	l3294
  3443                           
  3444                           ; BSR set to: 0
  3445  000A4C  0100               	movlb	0	; () banked
  3446  000A4E  517C               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  3447  000A50  0100               	movlb	0	; () banked
  3448  000A52  5D7A               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  3449  000A54  0100               	movlb	0	; () banked
  3450  000A56  517D               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  3451  000A58  0100               	movlb	0	; () banked
  3452  000A5A  597B               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  3453  000A5C  B0D8               	btfsc	status,0,c
  3454  000A5E  D030               	goto	l3294
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Movement.c: 274: turnLeft(mL,mR);
  3458  000A60  C06A  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3459  000A64  C06B  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3460  000A68  C06C  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3461  000A6C  C06D  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3462  000A70  ECE3  F00D         	call	_turnLeft	;wreg free
  3463                           
  3464                           ;Movement.c: 275: delay_tenth_s((tenth_seconds)/2);
  3465  000A74  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3466  000A78  6A2B               	clrf	___awdiv@dividend+1,c
  3467  000A7A  0E00               	movlw	0
  3468  000A7C  6E2D               	movwf	___awdiv@divisor+1,c
  3469  000A7E  0E02               	movlw	2
  3470  000A80  6E2C               	movwf	___awdiv@divisor,c
  3471  000A82  ECA7  F00C         	call	___awdiv	;wreg free
  3472  000A86  502A               	movf	?___awdiv,w,c
  3473  000A88  EC48  F00E         	call	_delay_tenth_s
  3474                           
  3475                           ;Movement.c: 276: (*MoveTimeEntry) += tenth_seconds/2;
  3476  000A8C  C06E  F02A         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  3477  000A90  6A2B               	clrf	___awdiv@dividend+1,c
  3478  000A92  0E00               	movlw	0
  3479  000A94  6E2D               	movwf	___awdiv@divisor+1,c
  3480  000A96  0E02               	movlw	2
  3481  000A98  6E2C               	movwf	___awdiv@divisor,c
  3482  000A9A  ECA7  F00C         	call	___awdiv	;wreg free
  3483  000A9E  C06F  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3484  000AA2  C070  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3485  000AA6  502A               	movf	?___awdiv,w,c
  3486  000AA8  26DF               	addwf	indf2,f,c
  3487                           
  3488                           ;Movement.c: 277: stop(mL,mR);
  3489  000AAA  C06A  F062         	movff	ScanWithRange@mL,stop@mL
  3490  000AAE  C06B  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3491  000AB2  C06C  F064         	movff	ScanWithRange@mR,stop@mR
  3492  000AB6  C06D  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3493  000ABA  EC18  F00C         	call	_stop	;wreg free
  3494  000ABE  D7BA               	goto	l3272
  3495  000AC0                     l3294:
  3496                           
  3497                           ;Movement.c: 279: }
  3498                           ;Movement.c: 280: }
  3499                           ;Movement.c: 281: return 0;
  3500  000AC0  0E00               	movlw	0
  3501  000AC2  0012               	return	
  3502  000AC4                     __end_of_ScanWithRange:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           postinc0	equ	0xFEE
  3512                           wreg	equ	0xFE8
  3513                           indf1	equ	0xFE7
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           postinc2	equ	0xFDE
  3518                           postdec2	equ	0xFDD
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _ScanIR *****************
  3524 ;; Defined at:
  3525 ;;		line 42 in file "Movement.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  3528 ;;		 -> main@mL(9), 
  3529 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  3530 ;;		 -> main@mR(9), 
  3531 ;;  Move            2   14[BANK0 ] PTR unsigned char 
  3532 ;;		 -> main@Move(1), 
  3533 ;;  MoveTime        2   16[BANK0 ] PTR unsigned char 
  3534 ;;		 -> main@MoveTime(100), 
  3535 ;;  MoveType        2   18[BANK0 ] PTR unsigned char 
  3536 ;;		 -> main@MoveType(100), 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  buf            40   22[BANK0 ] unsigned char [40]
  3539 ;;  SensorResult    4   62[BANK0 ] unsigned int [2]
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3549 ;;      Params:         0      10       0       0
  3550 ;;      Locals:         0      44       0       0
  3551 ;;      Temps:          0       2       0       0
  3552 ;;      Totals:         0      56       0       0
  3553 ;;Total ram usage:       56 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    7
  3556 ;; This function calls:
  3557 ;;		_LCD_String
  3558 ;;		_SendLCD
  3559 ;;		_SetLine
  3560 ;;		_delay_tenth_s
  3561 ;;		_grabLeftIR
  3562 ;;		_grabRightIR
  3563 ;;		_sprintf
  3564 ;;		_stop
  3565 ;;		_turnLeft
  3566 ;;		_turnRight
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text9
  3573  000F66                     __ptext9:
  3574                           	opt stack 0
  3575  000F66                     _ScanIR:
  3576                           	opt stack 23
  3577                           
  3578                           ;Movement.c: 44: unsigned int SensorResult[2]={0,0};
  3579                           
  3580                           ;incstack = 0
  3581  000F66  C0A4  F09E         	movff	ScanIR@F3878,ScanIR@SensorResult
  3582  000F6A  C0A5  F09F         	movff	ScanIR@F3878+1,ScanIR@SensorResult+1
  3583  000F6E  C0A6  F0A0         	movff	ScanIR@F3878+2,ScanIR@SensorResult+2
  3584  000F72  C0A7  F0A1         	movff	ScanIR@F3878+3,ScanIR@SensorResult+3
  3585                           
  3586                           ;Movement.c: 45: char buf[40];
  3587                           ;Movement.c: 49: SensorResult[0]=grabLeftIR();
  3588  000F76  EC22  F00D         	call	_grabLeftIR	;wreg free
  3589  000F7A  C024  F09E         	movff	?_grabLeftIR,ScanIR@SensorResult
  3590  000F7E  C025  F09F         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3591                           
  3592                           ;Movement.c: 50: SensorResult[1]=grabRightIR();
  3593  000F82  ECE9  F00C         	call	_grabRightIR	;wreg free
  3594  000F86  C024  F0A0         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3595  000F8A  C025  F0A1         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3596                           
  3597                           ;Movement.c: 54: CAP1BUFH=0;
  3598  000F8E  0E00               	movlw	0
  3599  000F90  6E69               	movwf	3945,c	;volatile
  3600                           
  3601                           ;Movement.c: 55: CAP1BUFL=0;
  3602  000F92  0E00               	movlw	0
  3603  000F94  6E68               	movwf	3944,c	;volatile
  3604                           
  3605                           ;Movement.c: 56: CAP2BUFH=0;
  3606  000F96  0E00               	movlw	0
  3607  000F98  6E67               	movwf	3943,c	;volatile
  3608                           
  3609                           ;Movement.c: 57: CAP2BUFL=0;
  3610  000F9A  0E00               	movlw	0
  3611  000F9C  6E66               	movwf	3942,c	;volatile
  3612                           
  3613                           ;Movement.c: 60: SendLCD(0b00000001,0);
  3614  000F9E  0E00               	movlw	0
  3615  000FA0  6E28               	movwf	SendLCD@type,c
  3616  000FA2  0E01               	movlw	1
  3617  000FA4  ECB9  F000         	call	_SendLCD
  3618                           
  3619                           ;Movement.c: 61: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3620  000FA8  0E21               	movlw	33
  3621  000FAA                     u3027:
  3622  000FAA  2EE8               	decfsz	wreg,f,c
  3623  000FAC  D7FE               	goto	u3027
  3624  000FAE  F000               	nop	
  3625                           
  3626                           ;Movement.c: 62: SendLCD(0b00000010,0);
  3627  000FB0  0E00               	movlw	0
  3628  000FB2  6E28               	movwf	SendLCD@type,c
  3629  000FB4  0E02               	movlw	2
  3630  000FB6  ECB9  F000         	call	_SendLCD
  3631                           
  3632                           ;Movement.c: 63: _delay((unsigned long)((2)*(8000000/4000.0)));
  3633  000FBA  0E06               	movlw	6
  3634  000FBC  0100               	movlb	0	; () banked
  3635  000FBE  6F74               	movwf	??_ScanIR& (0+255),b
  3636  000FC0  0E30               	movlw	48
  3637  000FC2                     u3037:
  3638  000FC2  2EE8               	decfsz	wreg,f,c
  3639  000FC4  D7FE               	goto	u3037
  3640  000FC6  2F74               	decfsz	??_ScanIR& (0+255),f,b
  3641  000FC8  D7FC               	goto	u3037
  3642  000FCA  D000               	nop2	
  3643                           
  3644                           ;Movement.c: 64: SetLine(1);
  3645  000FCC  0E01               	movlw	1
  3646  000FCE  ECA1  F000         	call	_SetLine
  3647                           
  3648                           ;Movement.c: 65: LCD_String("       Searching");
  3649  000FD2  0E23               	movlw	low STR_5
  3650  000FD4  6E2A               	movwf	LCD_String@string,c
  3651  000FD6  0E03               	movlw	high STR_5
  3652  000FD8  6E2B               	movwf	LCD_String@string+1,c
  3653  000FDA  EC6D  F000         	call	_LCD_String	;wreg free
  3654                           
  3655                           ;Movement.c: 66: SetLine(2);
  3656  000FDE  0E02               	movlw	2
  3657  000FE0  ECA1  F000         	call	_SetLine
  3658                           
  3659                           ;Movement.c: 67: sprintf(buf,"     %d, %d",SensorResult[0],SensorResult[1]);
  3660  000FE4  0E76               	movlw	low ScanIR@buf
  3661  000FE6  6E30               	movwf	sprintf@sp,c
  3662  000FE8  0E00               	movlw	high ScanIR@buf
  3663  000FEA  6E31               	movwf	sprintf@sp+1,c
  3664  000FEC  0E62               	movlw	low STR_6
  3665  000FEE  6E32               	movwf	sprintf@f,c
  3666  000FF0  0E03               	movlw	high STR_6
  3667  000FF2  6E33               	movwf	sprintf@f+1,c
  3668  000FF4  C09E  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3669  000FF8  C09F  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3670  000FFC  C0A0  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3671  001000  C0A1  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3672  001004  ECA8  F009         	call	_sprintf	;wreg free
  3673                           
  3674                           ;Movement.c: 71: if ((SensorResult[0]+SensorResult[1])>ClearSignalThreshold) {
  3675  001008  0100               	movlb	0	; () banked
  3676  00100A  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3677  00100C  0100               	movlb	0	; () banked
  3678  00100E  25A0               	addwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3679  001010  0100               	movlb	0	; () banked
  3680  001012  6F74               	movwf	??_ScanIR& (0+255),b
  3681  001014  0100               	movlb	0	; () banked
  3682  001016  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3683  001018  0100               	movlb	0	; () banked
  3684  00101A  21A1               	addwfc	(ScanIR@SensorResult+3)& (0+255),w,b
  3685  00101C  0100               	movlb	0	; () banked
  3686  00101E  6F75               	movwf	(??_ScanIR+1)& (0+255),b
  3687  001020  0E0B               	movlw	low _ClearSignalThreshold
  3688  001022  6EF6               	movwf	tblptrl,c
  3689  001024                     	if	1	;There is more than 1 active tblptr byte
  3690  001024  0E03               	movlw	high _ClearSignalThreshold
  3691  001026  6EF7               	movwf	tblptrh,c
  3692  001028                     	endif
  3693  001028                     	if	0	;There are less than 3 active tblptr bytes
  3694  001028                     	endif
  3695  001028  0100               	movlb	0	; () banked
  3696  00102A  5174               	movf	??_ScanIR& (0+255),w,b
  3697  00102C  0009               	tblrd		*+
  3698  00102E  5CF5               	subwf	tablat,w,c
  3699  001030  0100               	movlb	0	; () banked
  3700  001032  5175               	movf	(??_ScanIR+1)& (0+255),w,b
  3701  001034  0009               	tblrd		*+
  3702  001036  58F5               	subwfb	tablat,w,c
  3703  001038  B0D8               	btfsc	status,0,c
  3704  00103A  D0F8               	goto	l3376
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Movement.c: 74: if (((SensorResult[0]>DirectionFoundThreshold)&&(SensorResult[1]>Direct
      +                          ionFoundThreshold)
  3708                           ;Movement.c: 75: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  3709                           ;Movement.c: 76: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  3710  00103C  0E0D               	movlw	low _DirectionFoundThreshold
  3711  00103E  6EF6               	movwf	tblptrl,c
  3712  001040                     	if	1	;There is more than 1 active tblptr byte
  3713  001040  0E03               	movlw	high _DirectionFoundThreshold
  3714  001042  6EF7               	movwf	tblptrh,c
  3715  001044                     	endif
  3716  001044                     	if	0	;There are less than 3 active tblptr bytes
  3717  001044                     	endif
  3718  001044  0100               	movlb	0	; () banked
  3719  001046  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3720  001048  0009               	tblrd		*+
  3721  00104A  5CF5               	subwf	tablat,w,c
  3722  00104C  0100               	movlb	0	; () banked
  3723  00104E  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3724  001050  0009               	tblrd		*+
  3725  001052  58F5               	subwfb	tablat,w,c
  3726  001054  B0D8               	btfsc	status,0,c
  3727  001056  D050               	goto	l3338
  3728                           
  3729                           ; BSR set to: 0
  3730  001058  0E0D               	movlw	low _DirectionFoundThreshold
  3731  00105A  6EF6               	movwf	tblptrl,c
  3732  00105C                     	if	1	;There is more than 1 active tblptr byte
  3733  00105C  0E03               	movlw	high _DirectionFoundThreshold
  3734  00105E  6EF7               	movwf	tblptrh,c
  3735  001060                     	endif
  3736  001060                     	if	0	;There are less than 3 active tblptr bytes
  3737  001060                     	endif
  3738  001060  0100               	movlb	0	; () banked
  3739  001062  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3740  001064  0009               	tblrd		*+
  3741  001066  5CF5               	subwf	tablat,w,c
  3742  001068  0100               	movlb	0	; () banked
  3743  00106A  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3744  00106C  0009               	tblrd		*+
  3745  00106E  58F5               	subwfb	tablat,w,c
  3746  001070  B0D8               	btfsc	status,0,c
  3747  001072  D042               	goto	l3338
  3748                           
  3749                           ; BSR set to: 0
  3750  001074  0E0F               	movlw	low _DirectionFoundTolerance
  3751  001076  6EF6               	movwf	tblptrl,c
  3752  001078                     	if	1	;There is more than 1 active tblptr byte
  3753  001078  0E03               	movlw	high _DirectionFoundTolerance
  3754  00107A  6EF7               	movwf	tblptrh,c
  3755  00107C                     	endif
  3756  00107C                     	if	0	;There are less than 3 active tblptr bytes
  3757  00107C                     	endif
  3758  00107C  EE20  F0A0         	lfsr	2,ScanIR@SensorResult+2
  3759  001080  CFDE F074          	movff	postinc2,??_ScanIR
  3760  001084  CFDD F075          	movff	postdec2,??_ScanIR+1
  3761  001088  0100               	movlb	0	; () banked
  3762  00108A  1F74               	comf	??_ScanIR& (0+255),f,b
  3763  00108C  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  3764  00108E  4B74               	infsnz	??_ScanIR& (0+255),f,b
  3765  001090  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  3766  001092  0100               	movlb	0	; () banked
  3767  001094  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3768  001096  0100               	movlb	0	; () banked
  3769  001098  2774               	addwf	??_ScanIR& (0+255),f,b
  3770  00109A  0100               	movlb	0	; () banked
  3771  00109C  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3772  00109E  0100               	movlb	0	; () banked
  3773  0010A0  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  3774  0010A2  0009               	tblrd		*+
  3775  0010A4  50F5               	movf	tablat,w,c
  3776  0010A6  0100               	movlb	0	; () banked
  3777  0010A8  5D74               	subwf	??_ScanIR& (0+255),w,b
  3778  0010AA  0009               	tblrd		*+
  3779  0010AC  50F5               	movf	tablat,w,c
  3780  0010AE  0100               	movlb	0	; () banked
  3781  0010B0  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  3782  0010B2  A0D8               	btfss	status,0,c
  3783  0010B4  D01F               	goto	l3332
  3784                           
  3785                           ; BSR set to: 0
  3786  0010B6  0E0F               	movlw	low _DirectionFoundTolerance
  3787  0010B8  6EF6               	movwf	tblptrl,c
  3788  0010BA                     	if	1	;There is more than 1 active tblptr byte
  3789  0010BA  0E03               	movlw	high _DirectionFoundTolerance
  3790  0010BC  6EF7               	movwf	tblptrh,c
  3791  0010BE                     	endif
  3792  0010BE                     	if	0	;There are less than 3 active tblptr bytes
  3793  0010BE                     	endif
  3794  0010BE  C09E  F074         	movff	ScanIR@SensorResult,??_ScanIR
  3795  0010C2  C09F  F075         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  3796  0010C6  0100               	movlb	0	; () banked
  3797  0010C8  1F74               	comf	??_ScanIR& (0+255),f,b
  3798  0010CA  1F75               	comf	(??_ScanIR+1)& (0+255),f,b
  3799  0010CC  4B74               	infsnz	??_ScanIR& (0+255),f,b
  3800  0010CE  2B75               	incf	(??_ScanIR+1)& (0+255),f,b
  3801  0010D0  0100               	movlb	0	; () banked
  3802  0010D2  51A0               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3803  0010D4  0100               	movlb	0	; () banked
  3804  0010D6  2774               	addwf	??_ScanIR& (0+255),f,b
  3805  0010D8  0100               	movlb	0	; () banked
  3806  0010DA  51A1               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3807  0010DC  0100               	movlb	0	; () banked
  3808  0010DE  2375               	addwfc	(??_ScanIR+1)& (0+255),f,b
  3809  0010E0  0009               	tblrd		*+
  3810  0010E2  50F5               	movf	tablat,w,c
  3811  0010E4  0100               	movlb	0	; () banked
  3812  0010E6  5D74               	subwf	??_ScanIR& (0+255),w,b
  3813  0010E8  0009               	tblrd		*+
  3814  0010EA  50F5               	movf	tablat,w,c
  3815  0010EC  0100               	movlb	0	; () banked
  3816  0010EE  5975               	subwfb	(??_ScanIR+1)& (0+255),w,b
  3817  0010F0  B0D8               	btfsc	status,0,c
  3818  0010F2  D002               	goto	l3338
  3819  0010F4                     l3332:
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;Movement.c: 77: return 2;
  3823  0010F4  0E02               	movlw	2
  3824                           
  3825                           ; BSR set to: 0
  3826  0010F6  0012               	return	
  3827  0010F8                     l3338:
  3828                           
  3829                           ; BSR set to: 0
  3830  0010F8  0100               	movlb	0	; () banked
  3831  0010FA  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3832  0010FC  0100               	movlb	0	; () banked
  3833  0010FE  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3834  001100  0100               	movlb	0	; () banked
  3835  001102  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3836  001104  0100               	movlb	0	; () banked
  3837  001106  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3838  001108  A0D8               	btfss	status,0,c
  3839  00110A  D03A               	goto	l3358
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;Movement.c: 80: stop(mL,mR);
  3843  00110C  C06A  F062         	movff	ScanIR@mL,stop@mL
  3844  001110  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3845  001114  C06C  F064         	movff	ScanIR@mR,stop@mR
  3846  001118  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3847  00111C  EC18  F00C         	call	_stop	;wreg free
  3848                           
  3849                           ;Movement.c: 81: turnLeft(mL,mR);
  3850  001120  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  3851  001124  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  3852  001128  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  3853  00112C  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  3854  001130  ECE3  F00D         	call	_turnLeft	;wreg free
  3855                           
  3856                           ;Movement.c: 82: delay_tenth_s(3);
  3857  001134  0E03               	movlw	3
  3858  001136  EC48  F00E         	call	_delay_tenth_s
  3859                           
  3860                           ;Movement.c: 83: stop(mL,mR);
  3861  00113A  C06A  F062         	movff	ScanIR@mL,stop@mL
  3862  00113E  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3863  001142  C06C  F064         	movff	ScanIR@mR,stop@mR
  3864  001146  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3865  00114A  EC18  F00C         	call	_stop	;wreg free
  3866                           
  3867                           ;Movement.c: 84: MoveTime[*Move]=3;
  3868  00114E  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3869  001152  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3870  001156  50DF               	movf	indf2,w,c
  3871  001158  0100               	movlb	0	; () banked
  3872  00115A  6F74               	movwf	??_ScanIR& (0+255),b
  3873  00115C  0100               	movlb	0	; () banked
  3874  00115E  5174               	movf	??_ScanIR& (0+255),w,b
  3875  001160  0D01               	mullw	1
  3876  001162  50F3               	movf	prodl,w,c
  3877  001164  0100               	movlb	0	; () banked
  3878  001166  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  3879  001168  6ED9               	movwf	fsr2l,c
  3880  00116A  50F4               	movf	prodh,w,c
  3881  00116C  0100               	movlb	0	; () banked
  3882  00116E  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  3883  001170  6EDA               	movwf	fsr2h,c
  3884  001172  0E03               	movlw	3
  3885  001174  6EDF               	movwf	indf2,c
  3886  001176  D043               	goto	l3368
  3887  001178                     l3350:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;Movement.c: 86: Move++;
  3891  001178  0100               	movlb	0	; () banked
  3892  00117A  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  3893  00117C  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  3894  00117E  D054               	goto	l3372
  3895  001180                     l3358:
  3896                           
  3897                           ; BSR set to: 0
  3898  001180  0100               	movlb	0	; () banked
  3899  001182  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3900  001184  0100               	movlb	0	; () banked
  3901  001186  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  3902  001188  0100               	movlb	0	; () banked
  3903  00118A  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3904  00118C  0100               	movlb	0	; () banked
  3905  00118E  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  3906  001190  B0D8               	btfsc	status,0,c
  3907  001192  D0DC               	goto	l3416
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;Movement.c: 90: stop(mL,mR);
  3911  001194  C06A  F062         	movff	ScanIR@mL,stop@mL
  3912  001198  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3913  00119C  C06C  F064         	movff	ScanIR@mR,stop@mR
  3914  0011A0  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3915  0011A4  EC18  F00C         	call	_stop	;wreg free
  3916                           
  3917                           ;Movement.c: 91: turnRight(mL,mR);
  3918  0011A8  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  3919  0011AC  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  3920  0011B0  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  3921  0011B4  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  3922  0011B8  ECBC  F00D         	call	_turnRight	;wreg free
  3923                           
  3924                           ;Movement.c: 92: delay_tenth_s(3);
  3925  0011BC  0E03               	movlw	3
  3926  0011BE  EC48  F00E         	call	_delay_tenth_s
  3927                           
  3928                           ;Movement.c: 93: stop(mL,mR);
  3929  0011C2  C06A  F062         	movff	ScanIR@mL,stop@mL
  3930  0011C6  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3931  0011CA  C06C  F064         	movff	ScanIR@mR,stop@mR
  3932  0011CE  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3933  0011D2  EC18  F00C         	call	_stop	;wreg free
  3934                           
  3935                           ;Movement.c: 94: MoveTime[*Move]=-3;
  3936  0011D6  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3937  0011DA  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3938  0011DE  50DF               	movf	indf2,w,c
  3939  0011E0  0100               	movlb	0	; () banked
  3940  0011E2  6F74               	movwf	??_ScanIR& (0+255),b
  3941  0011E4  0100               	movlb	0	; () banked
  3942  0011E6  5174               	movf	??_ScanIR& (0+255),w,b
  3943  0011E8  0D01               	mullw	1
  3944  0011EA  50F3               	movf	prodl,w,c
  3945  0011EC  0100               	movlb	0	; () banked
  3946  0011EE  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  3947  0011F0  6ED9               	movwf	fsr2l,c
  3948  0011F2  50F4               	movf	prodh,w,c
  3949  0011F4  0100               	movlb	0	; () banked
  3950  0011F6  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  3951  0011F8  6EDA               	movwf	fsr2h,c
  3952  0011FA  0EFD               	movlw	253
  3953  0011FC  D7BB               	goto	L3
  3954  0011FE                     l3368:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;Movement.c: 95: MoveType[*Move]=1;
  3958  0011FE  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  3959  001202  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  3960  001206  50DF               	movf	indf2,w,c
  3961  001208  0100               	movlb	0	; () banked
  3962  00120A  6F74               	movwf	??_ScanIR& (0+255),b
  3963  00120C  0100               	movlb	0	; () banked
  3964  00120E  5174               	movf	??_ScanIR& (0+255),w,b
  3965  001210  0D01               	mullw	1
  3966  001212  50F3               	movf	prodl,w,c
  3967  001214  0100               	movlb	0	; () banked
  3968  001216  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  3969  001218  6ED9               	movwf	fsr2l,c
  3970  00121A  50F4               	movf	prodh,w,c
  3971  00121C  0100               	movlb	0	; () banked
  3972  00121E  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  3973  001220  6EDA               	movwf	fsr2h,c
  3974  001222  0E01               	movlw	1
  3975  001224  6EDF               	movwf	indf2,c
  3976  001226  D7A8               	goto	l3350
  3977  001228                     l3372:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Movement.c: 97: return 1;
  3981  001228  0E01               	movlw	1
  3982                           
  3983                           ; BSR set to: 0
  3984  00122A  0012               	return	
  3985  00122C                     l3376:
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;Movement.c: 101: stop(mL,mR);
  3989  00122C  C06A  F062         	movff	ScanIR@mL,stop@mL
  3990  001230  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  3991  001234  C06C  F064         	movff	ScanIR@mR,stop@mR
  3992  001238  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  3993  00123C  EC18  F00C         	call	_stop	;wreg free
  3994                           
  3995                           ;Movement.c: 104: if (SensorResult[0]<=SensorResult[1]) {
  3996  001240  0100               	movlb	0	; () banked
  3997  001242  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  3998  001244  0100               	movlb	0	; () banked
  3999  001246  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4000  001248  0100               	movlb	0	; () banked
  4001  00124A  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4002  00124C  0100               	movlb	0	; () banked
  4003  00124E  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4004  001250  A0D8               	btfss	status,0,c
  4005  001252  D030               	goto	l3398
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;Movement.c: 105: turnLeft(mL,mR);
  4009  001254  C06A  F066         	movff	ScanIR@mL,turnLeft@mL
  4010  001258  C06B  F067         	movff	ScanIR@mL+1,turnLeft@mL+1
  4011  00125C  C06C  F068         	movff	ScanIR@mR,turnLeft@mR
  4012  001260  C06D  F069         	movff	ScanIR@mR+1,turnLeft@mR+1
  4013  001264  ECE3  F00D         	call	_turnLeft	;wreg free
  4014                           
  4015                           ;Movement.c: 106: delay_tenth_s(5);
  4016  001268  0E05               	movlw	5
  4017  00126A  EC48  F00E         	call	_delay_tenth_s
  4018                           
  4019                           ;Movement.c: 107: stop(mL,mR);
  4020  00126E  C06A  F062         	movff	ScanIR@mL,stop@mL
  4021  001272  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4022  001276  C06C  F064         	movff	ScanIR@mR,stop@mR
  4023  00127A  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4024  00127E  EC18  F00C         	call	_stop	;wreg free
  4025                           
  4026                           ;Movement.c: 108: MoveTime[*Move]=5;
  4027  001282  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4028  001286  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4029  00128A  50DF               	movf	indf2,w,c
  4030  00128C  0100               	movlb	0	; () banked
  4031  00128E  6F74               	movwf	??_ScanIR& (0+255),b
  4032  001290  0100               	movlb	0	; () banked
  4033  001292  5174               	movf	??_ScanIR& (0+255),w,b
  4034  001294  0D01               	mullw	1
  4035  001296  50F3               	movf	prodl,w,c
  4036  001298  0100               	movlb	0	; () banked
  4037  00129A  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4038  00129C  6ED9               	movwf	fsr2l,c
  4039  00129E  50F4               	movf	prodh,w,c
  4040  0012A0  0100               	movlb	0	; () banked
  4041  0012A2  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4042  0012A4  6EDA               	movwf	fsr2h,c
  4043  0012A6  0E05               	movlw	5
  4044  0012A8  6EDF               	movwf	indf2,c
  4045  0012AA  D039               	goto	l3408
  4046  0012AC                     l3390:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;Movement.c: 110: Move++;
  4050  0012AC  0100               	movlb	0	; () banked
  4051  0012AE  4B6E               	infsnz	ScanIR@Move& (0+255),f,b
  4052  0012B0  2B6F               	incf	(ScanIR@Move+1)& (0+255),f,b
  4053  0012B2  D04A               	goto	l3412
  4054  0012B4                     l3398:
  4055                           
  4056                           ; BSR set to: 0
  4057  0012B4  0100               	movlb	0	; () banked
  4058  0012B6  519E               	movf	ScanIR@SensorResult& (0+255),w,b
  4059  0012B8  0100               	movlb	0	; () banked
  4060  0012BA  5DA0               	subwf	(ScanIR@SensorResult+2)& (0+255),w,b
  4061  0012BC  0100               	movlb	0	; () banked
  4062  0012BE  519F               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4063  0012C0  0100               	movlb	0	; () banked
  4064  0012C2  59A1               	subwfb	(ScanIR@SensorResult+3)& (0+255),w,b
  4065  0012C4  B0D8               	btfsc	status,0,c
  4066  0012C6  D042               	goto	l3416
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;Movement.c: 114: turnRight(mL,mR);
  4070  0012C8  C06A  F066         	movff	ScanIR@mL,turnRight@mL
  4071  0012CC  C06B  F067         	movff	ScanIR@mL+1,turnRight@mL+1
  4072  0012D0  C06C  F068         	movff	ScanIR@mR,turnRight@mR
  4073  0012D4  C06D  F069         	movff	ScanIR@mR+1,turnRight@mR+1
  4074  0012D8  ECBC  F00D         	call	_turnRight	;wreg free
  4075                           
  4076                           ;Movement.c: 115: delay_tenth_s(5);
  4077  0012DC  0E05               	movlw	5
  4078  0012DE  EC48  F00E         	call	_delay_tenth_s
  4079                           
  4080                           ;Movement.c: 116: stop(mL,mR);
  4081  0012E2  C06A  F062         	movff	ScanIR@mL,stop@mL
  4082  0012E6  C06B  F063         	movff	ScanIR@mL+1,stop@mL+1
  4083  0012EA  C06C  F064         	movff	ScanIR@mR,stop@mR
  4084  0012EE  C06D  F065         	movff	ScanIR@mR+1,stop@mR+1
  4085  0012F2  EC18  F00C         	call	_stop	;wreg free
  4086                           
  4087                           ;Movement.c: 117: MoveTime[*Move]=-5;
  4088  0012F6  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4089  0012FA  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4090  0012FE  50DF               	movf	indf2,w,c
  4091  001300  0100               	movlb	0	; () banked
  4092  001302  6F74               	movwf	??_ScanIR& (0+255),b
  4093  001304  0100               	movlb	0	; () banked
  4094  001306  5174               	movf	??_ScanIR& (0+255),w,b
  4095  001308  0D01               	mullw	1
  4096  00130A  50F3               	movf	prodl,w,c
  4097  00130C  0100               	movlb	0	; () banked
  4098  00130E  2570               	addwf	ScanIR@MoveTime& (0+255),w,b
  4099  001310  6ED9               	movwf	fsr2l,c
  4100  001312  50F4               	movf	prodh,w,c
  4101  001314  0100               	movlb	0	; () banked
  4102  001316  2171               	addwfc	(ScanIR@MoveTime+1)& (0+255),w,b
  4103  001318  6EDA               	movwf	fsr2h,c
  4104  00131A  0EFB               	movlw	251
  4105  00131C  D7C5               	goto	L4
  4106  00131E                     l3408:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;Movement.c: 118: MoveType[*Move]=1;
  4110  00131E  C06E  FFD9         	movff	ScanIR@Move,fsr2l
  4111  001322  C06F  FFDA         	movff	ScanIR@Move+1,fsr2h
  4112  001326  50DF               	movf	indf2,w,c
  4113  001328  0100               	movlb	0	; () banked
  4114  00132A  6F74               	movwf	??_ScanIR& (0+255),b
  4115  00132C  0100               	movlb	0	; () banked
  4116  00132E  5174               	movf	??_ScanIR& (0+255),w,b
  4117  001330  0D01               	mullw	1
  4118  001332  50F3               	movf	prodl,w,c
  4119  001334  0100               	movlb	0	; () banked
  4120  001336  2572               	addwf	ScanIR@MoveType& (0+255),w,b
  4121  001338  6ED9               	movwf	fsr2l,c
  4122  00133A  50F4               	movf	prodh,w,c
  4123  00133C  0100               	movlb	0	; () banked
  4124  00133E  2173               	addwfc	(ScanIR@MoveType+1)& (0+255),w,b
  4125  001340  6EDA               	movwf	fsr2h,c
  4126  001342  0E01               	movlw	1
  4127  001344  6EDF               	movwf	indf2,c
  4128  001346  D7B2               	goto	l3390
  4129  001348                     l3412:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;Movement.c: 120: return 0;
  4133  001348  0E00               	movlw	0
  4134                           
  4135                           ; BSR set to: 0
  4136  00134A  0012               	return	
  4137  00134C                     l3416:
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;Movement.c: 121: }
  4141                           ;Movement.c: 122: }
  4142                           ;Movement.c: 123: return 0;
  4143  00134C  0E00               	movlw	0
  4144  00134E  0012               	return	
  4145  001350                     __end_of_ScanIR:
  4146                           	opt stack 0
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           postinc0	equ	0xFEE
  4155                           wreg	equ	0xFE8
  4156                           indf1	equ	0xFE7
  4157                           fsr1h	equ	0xFE2
  4158                           fsr1l	equ	0xFE1
  4159                           indf2	equ	0xFDF
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function _turnRight *****************
  4167 ;; Defined at:
  4168 ;;		line 98 in file "dc_motor.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4171 ;;		 -> main@mL(9), 
  4172 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4173 ;;		 -> main@mR(9), 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4185 ;;      Params:         0       4       0       0
  4186 ;;      Locals:         0       0       0       0
  4187 ;;      Temps:          0       0       0       0
  4188 ;;      Totals:         0       4       0       0
  4189 ;;Total ram usage:        4 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    6
  4192 ;; This function calls:
  4193 ;;		_fullSpeedAhead
  4194 ;;		_stop
  4195 ;; This function is called by:
  4196 ;;		_ScanIR
  4197 ;;		_ScanWithRange
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text10
  4202  001B78                     __ptext10:
  4203                           	opt stack 0
  4204  001B78                     _turnRight:
  4205                           	opt stack 23
  4206                           
  4207                           ;dc_motor.c: 100: stop(mL, mR);
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;incstack = 0
  4211  001B78  C066  F062         	movff	turnRight@mL,stop@mL
  4212  001B7C  C067  F063         	movff	turnRight@mL+1,stop@mL+1
  4213  001B80  C068  F064         	movff	turnRight@mR,stop@mR
  4214  001B84  C069  F065         	movff	turnRight@mR+1,stop@mR+1
  4215  001B88  EC18  F00C         	call	_stop	;wreg free
  4216                           
  4217                           ;dc_motor.c: 102: mL->direction=1;
  4218  001B8C  0100               	movlb	0	; () banked
  4219  001B8E  EE20 F001          	lfsr	2,1
  4220  001B92  5166               	movf	turnRight@mL& (0+255),w,b
  4221  001B94  26D9               	addwf	fsr2l,f,c
  4222  001B96  5167               	movf	(turnRight@mL+1)& (0+255),w,b
  4223  001B98  22DA               	addwfc	fsr2h,f,c
  4224  001B9A  0E01               	movlw	1
  4225  001B9C  6EDF               	movwf	indf2,c
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;dc_motor.c: 103: mR->direction=0;
  4229  001B9E  0100               	movlb	0	; () banked
  4230  001BA0  EE20 F001          	lfsr	2,1
  4231  001BA4  5168               	movf	turnRight@mR& (0+255),w,b
  4232  001BA6  26D9               	addwf	fsr2l,f,c
  4233  001BA8  5169               	movf	(turnRight@mR+1)& (0+255),w,b
  4234  001BAA  22DA               	addwfc	fsr2h,f,c
  4235  001BAC  0E00               	movlw	0
  4236  001BAE  6EDF               	movwf	indf2,c
  4237                           
  4238                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  4239  001BB0  C066  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  4240  001BB4  C067  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  4241  001BB8  C068  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  4242  001BBC  C069  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  4243  001BC0  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  4244  001BC4  0012               	return		;funcret
  4245  001BC6                     __end_of_turnRight:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           indf1	equ	0xFE7
  4257                           fsr1h	equ	0xFE2
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           postdec2	equ	0xFDD
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _turnLeft *****************
  4267 ;; Defined at:
  4268 ;;		line 87 in file "dc_motor.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  4271 ;;		 -> main@mL(9), 
  4272 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  4273 ;;		 -> main@mR(9), 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;		None               void
  4278 ;; Registers used:
  4279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4285 ;;      Params:         0       4       0       0
  4286 ;;      Locals:         0       0       0       0
  4287 ;;      Temps:          0       0       0       0
  4288 ;;      Totals:         0       4       0       0
  4289 ;;Total ram usage:        4 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    6
  4292 ;; This function calls:
  4293 ;;		_fullSpeedAhead
  4294 ;;		_stop
  4295 ;; This function is called by:
  4296 ;;		_ScanIR
  4297 ;;		_ScanWithRange
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text11
  4302  001BC6                     __ptext11:
  4303                           	opt stack 0
  4304  001BC6                     _turnLeft:
  4305                           	opt stack 23
  4306                           
  4307                           ;dc_motor.c: 89: stop(mL, mR);
  4308                           
  4309                           ;incstack = 0
  4310  001BC6  C066  F062         	movff	turnLeft@mL,stop@mL
  4311  001BCA  C067  F063         	movff	turnLeft@mL+1,stop@mL+1
  4312  001BCE  C068  F064         	movff	turnLeft@mR,stop@mR
  4313  001BD2  C069  F065         	movff	turnLeft@mR+1,stop@mR+1
  4314  001BD6  EC18  F00C         	call	_stop	;wreg free
  4315                           
  4316                           ;dc_motor.c: 91: mL->direction=0;
  4317  001BDA  0100               	movlb	0	; () banked
  4318  001BDC  EE20 F001          	lfsr	2,1
  4319  001BE0  5166               	movf	turnLeft@mL& (0+255),w,b
  4320  001BE2  26D9               	addwf	fsr2l,f,c
  4321  001BE4  5167               	movf	(turnLeft@mL+1)& (0+255),w,b
  4322  001BE6  22DA               	addwfc	fsr2h,f,c
  4323  001BE8  0E00               	movlw	0
  4324  001BEA  6EDF               	movwf	indf2,c
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;dc_motor.c: 92: mR->direction=1;
  4328  001BEC  0100               	movlb	0	; () banked
  4329  001BEE  EE20 F001          	lfsr	2,1
  4330  001BF2  5168               	movf	turnLeft@mR& (0+255),w,b
  4331  001BF4  26D9               	addwf	fsr2l,f,c
  4332  001BF6  5169               	movf	(turnLeft@mR+1)& (0+255),w,b
  4333  001BF8  22DA               	addwfc	fsr2h,f,c
  4334  001BFA  0E01               	movlw	1
  4335  001BFC  6EDF               	movwf	indf2,c
  4336                           
  4337                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  4338  001BFE  C066  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  4339  001C02  C067  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4340  001C06  C068  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  4341  001C0A  C069  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4342  001C0E  EC5B  F00D         	call	_fullSpeedAhead	;wreg free
  4343  001C12  0012               	return		;funcret
  4344  001C14                     __end_of_turnLeft:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           indf1	equ	0xFE7
  4356                           fsr1h	equ	0xFE2
  4357                           fsr1l	equ	0xFE1
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _stop *****************
  4366 ;; Defined at:
  4367 ;;		line 67 in file "dc_motor.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4370 ;;		 -> main@mL(9), 
  4371 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4372 ;;		 -> main@mR(9), 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4384 ;;      Params:         0       4       0       0
  4385 ;;      Locals:         0       0       0       0
  4386 ;;      Temps:          0       0       0       0
  4387 ;;      Totals:         0       4       0       0
  4388 ;;Total ram usage:        4 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    5
  4391 ;; This function calls:
  4392 ;;		_setMotorPWM
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;;		_turnLeft
  4396 ;;		_turnRight
  4397 ;;		_ScanIR
  4398 ;;		_ScanWithRange
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text12
  4403  001830                     __ptext12:
  4404                           	opt stack 0
  4405  001830                     _stop:
  4406                           	opt stack 25
  4407                           
  4408                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4409                           
  4410                           ;incstack = 0
  4411  001830  D028               	goto	l3046
  4412  001832                     l3032:
  4413                           
  4414                           ;dc_motor.c: 71: if(mL->power>0){
  4415  001832  C062  FFD9         	movff	stop@mL,fsr2l
  4416  001836  C063  FFDA         	movff	stop@mL+1,fsr2h
  4417  00183A  50DF               	movf	indf2,w,c
  4418  00183C  B4D8               	btfsc	status,2,c
  4419  00183E  D005               	goto	l3036
  4420                           
  4421                           ;dc_motor.c: 72: mL->power--;
  4422  001840  C062  FFD9         	movff	stop@mL,fsr2l
  4423  001844  C063  FFDA         	movff	stop@mL+1,fsr2h
  4424  001848  06DF               	decf	indf2,f,c
  4425  00184A                     l3036:
  4426                           
  4427                           ;dc_motor.c: 73: }
  4428                           ;dc_motor.c: 74: if(mR->power>0){
  4429  00184A  C064  FFD9         	movff	stop@mR,fsr2l
  4430  00184E  C065  FFDA         	movff	stop@mR+1,fsr2h
  4431  001852  50DF               	movf	indf2,w,c
  4432  001854  B4D8               	btfsc	status,2,c
  4433  001856  D005               	goto	l3040
  4434                           
  4435                           ;dc_motor.c: 75: mR->power--;
  4436  001858  C064  FFD9         	movff	stop@mR,fsr2l
  4437  00185C  C065  FFDA         	movff	stop@mR+1,fsr2h
  4438  001860  06DF               	decf	indf2,f,c
  4439  001862                     l3040:
  4440                           
  4441                           ;dc_motor.c: 76: }
  4442                           ;dc_motor.c: 77: setMotorPWM(mL);
  4443  001862  C062  F032         	movff	stop@mL,setMotorPWM@m
  4444  001866  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4445  00186A  EC60  F00A         	call	_setMotorPWM	;wreg free
  4446                           
  4447                           ;dc_motor.c: 78: setMotorPWM(mR);
  4448  00186E  C064  F032         	movff	stop@mR,setMotorPWM@m
  4449  001872  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4450  001876  EC60  F00A         	call	_setMotorPWM	;wreg free
  4451                           
  4452                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4453  00187A  0E21               	movlw	33
  4454  00187C                     u3047:
  4455  00187C  2EE8               	decfsz	wreg,f,c
  4456  00187E  D7FE               	goto	u3047
  4457  001880  F000               	nop	
  4458  001882                     l3046:
  4459  001882  C062  FFD9         	movff	stop@mL,fsr2l
  4460  001886  C063  FFDA         	movff	stop@mL+1,fsr2h
  4461  00188A  50DF               	movf	indf2,w,c
  4462  00188C  A4D8               	btfss	status,2,c
  4463  00188E  D7D1               	goto	l3032
  4464  001890  C064  FFD9         	movff	stop@mR,fsr2l
  4465  001894  C065  FFDA         	movff	stop@mR+1,fsr2h
  4466  001898  50DF               	movf	indf2,w,c
  4467  00189A  A4D8               	btfss	status,2,c
  4468  00189C  D7CA               	goto	l3032
  4469                           
  4470                           ;dc_motor.c: 80: }
  4471                           ;dc_motor.c: 81: mL->direction=1;
  4472  00189E  0100               	movlb	0	; () banked
  4473  0018A0  EE20 F001          	lfsr	2,1
  4474  0018A4  5162               	movf	stop@mL& (0+255),w,b
  4475  0018A6  26D9               	addwf	fsr2l,f,c
  4476  0018A8  5163               	movf	(stop@mL+1)& (0+255),w,b
  4477  0018AA  22DA               	addwfc	fsr2h,f,c
  4478  0018AC  0E01               	movlw	1
  4479  0018AE  6EDF               	movwf	indf2,c
  4480                           
  4481                           ;dc_motor.c: 82: mR->direction=1;
  4482  0018B0  0100               	movlb	0	; () banked
  4483  0018B2  EE20 F001          	lfsr	2,1
  4484  0018B6  5164               	movf	stop@mR& (0+255),w,b
  4485  0018B8  26D9               	addwf	fsr2l,f,c
  4486  0018BA  5165               	movf	(stop@mR+1)& (0+255),w,b
  4487  0018BC  22DA               	addwfc	fsr2h,f,c
  4488  0018BE  0E01               	movlw	1
  4489  0018C0  6EDF               	movwf	indf2,c
  4490                           
  4491                           ; BSR set to: 0
  4492  0018C2  0012               	return		;funcret
  4493  0018C4                     __end_of_stop:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           intcon	equ	0xFF2
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           indf1	equ	0xFE7
  4505                           fsr1h	equ	0xFE2
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _fullSpeedAhead *****************
  4515 ;; Defined at:
  4516 ;;		line 108 in file "dc_motor.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4519 ;;		 -> main@mL(9), 
  4520 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4521 ;;		 -> main@mR(9), 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;		None
  4524 ;; Return value:  Size  Location     Type
  4525 ;;		None               void
  4526 ;; Registers used:
  4527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4533 ;;      Params:         0       4       0       0
  4534 ;;      Locals:         0       0       0       0
  4535 ;;      Temps:          1       0       0       0
  4536 ;;      Totals:         1       4       0       0
  4537 ;;Total ram usage:        5 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    5
  4540 ;; This function calls:
  4541 ;;		_setMotorPWM
  4542 ;; This function is called by:
  4543 ;;		_main
  4544 ;;		_turnLeft
  4545 ;;		_turnRight
  4546 ;;		_fullSpeedBack
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text13
  4551  001AB6                     __ptext13:
  4552                           	opt stack 0
  4553  001AB6                     _fullSpeedAhead:
  4554                           	opt stack 24
  4555                           
  4556                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;incstack = 0
  4560  001AB6  D028               	goto	l177
  4561  001AB8                     l3054:
  4562                           
  4563                           ;dc_motor.c: 112: if(mL->power<100){
  4564  001AB8  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4565  001ABC  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4566  001AC0  0E64               	movlw	100
  4567  001AC2  60DF               	cpfslt	indf2,c
  4568  001AC4  D005               	goto	l3058
  4569                           
  4570                           ;dc_motor.c: 113: mL->power++;
  4571  001AC6  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4572  001ACA  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4573  001ACE  2ADF               	incf	indf2,f,c
  4574  001AD0                     l3058:
  4575                           
  4576                           ;dc_motor.c: 114: }
  4577                           ;dc_motor.c: 115: if(mR->power<100){
  4578  001AD0  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4579  001AD4  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4580  001AD8  0E64               	movlw	100
  4581  001ADA  60DF               	cpfslt	indf2,c
  4582  001ADC  D005               	goto	l3062
  4583                           
  4584                           ;dc_motor.c: 116: mR->power++;
  4585  001ADE  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4586  001AE2  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4587  001AE6  2ADF               	incf	indf2,f,c
  4588  001AE8                     l3062:
  4589                           
  4590                           ;dc_motor.c: 117: }
  4591                           ;dc_motor.c: 118: setMotorPWM(mL);
  4592  001AE8  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4593  001AEC  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4594  001AF0  EC60  F00A         	call	_setMotorPWM	;wreg free
  4595                           
  4596                           ;dc_motor.c: 119: setMotorPWM(mR);
  4597  001AF4  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4598  001AF8  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4599  001AFC  EC60  F00A         	call	_setMotorPWM	;wreg free
  4600                           
  4601                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4602  001B00  0E21               	movlw	33
  4603  001B02                     u3057:
  4604  001B02  2EE8               	decfsz	wreg,f,c
  4605  001B04  D7FE               	goto	u3057
  4606  001B06  F000               	nop	
  4607  001B08                     l177:
  4608  001B08  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4609  001B0C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4610  001B10  0E63               	movlw	99
  4611  001B12  64DF               	cpfsgt	indf2,c
  4612  001B14  D7D1               	goto	l3054
  4613  001B16  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4614  001B1A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4615  001B1E  0E63               	movlw	99
  4616  001B20  64DF               	cpfsgt	indf2,c
  4617  001B22  D7CA               	goto	l3054
  4618  001B24  0012               	return	
  4619  001B26                     __end_of_fullSpeedAhead:
  4620                           	opt stack 0
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           indf1	equ	0xFE7
  4631                           fsr1h	equ	0xFE2
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           postinc2	equ	0xFDE
  4635                           postdec2	equ	0xFDD
  4636                           fsr2h	equ	0xFDA
  4637                           fsr2l	equ	0xFD9
  4638                           status	equ	0xFD8
  4639                           
  4640 ;; *************** function _setMotorPWM *****************
  4641 ;; Defined at:
  4642 ;;		line 26 in file "dc_motor.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4645 ;;		 -> main@mR(9), main@mL(9), 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  PWMduty         2    0[BANK0 ] int 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;		None               void
  4650 ;; Registers used:
  4651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4657 ;;      Params:         2       0       0       0
  4658 ;;      Locals:         0       2       0       0
  4659 ;;      Temps:          5       0       0       0
  4660 ;;      Totals:         7       2       0       0
  4661 ;;Total ram usage:        9 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    4
  4664 ;; This function calls:
  4665 ;;		___awdiv
  4666 ;;		___wmul
  4667 ;; This function is called by:
  4668 ;;		_stop
  4669 ;;		_fullSpeedAhead
  4670 ;;		_setMotorFullSpeed
  4671 ;;		_stopMotor
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text14
  4676  0014C0                     __ptext14:
  4677                           	opt stack 0
  4678  0014C0                     _setMotorPWM:
  4679                           	opt stack 25
  4680                           
  4681                           ;dc_motor.c: 28: int PWMduty;
  4682                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4683                           
  4684                           ;incstack = 0
  4685  0014C0  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4686  0014C4  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4687  0014C8  50DF               	movf	indf2,w,c
  4688  0014CA  6E34               	movwf	??_setMotorPWM& (0+255),c
  4689  0014CC  5034               	movf	??_setMotorPWM,w,c
  4690  0014CE  6E24               	movwf	___wmul@multiplier,c
  4691  0014D0  6A25               	clrf	___wmul@multiplier+1,c
  4692  0014D2  EE20 F007          	lfsr	2,7
  4693  0014D6  5032               	movf	setMotorPWM@m,w,c
  4694  0014D8  26D9               	addwf	fsr2l,f,c
  4695  0014DA  5033               	movf	setMotorPWM@m+1,w,c
  4696  0014DC  22DA               	addwfc	fsr2h,f,c
  4697  0014DE  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4698  0014E2  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4699  0014E6  ECF9  F000         	call	___wmul	;wreg free
  4700  0014EA  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4701  0014EE  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4702  0014F2  0E00               	movlw	0
  4703  0014F4  6E2D               	movwf	___awdiv@divisor+1,c
  4704  0014F6  0E64               	movlw	100
  4705  0014F8  6E2C               	movwf	___awdiv@divisor,c
  4706  0014FA  ECA7  F00C         	call	___awdiv	;wreg free
  4707  0014FE  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4708  001502  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4709                           
  4710                           ;dc_motor.c: 32: if (m->direction)
  4711  001506  EE20 F001          	lfsr	2,1
  4712  00150A  5032               	movf	setMotorPWM@m,w,c
  4713  00150C  26D9               	addwf	fsr2l,f,c
  4714  00150E  5033               	movf	setMotorPWM@m+1,w,c
  4715  001510  22DA               	addwfc	fsr2h,f,c
  4716  001512  50DF               	movf	indf2,w,c
  4717  001514  B4D8               	btfsc	status,2,c
  4718  001516  D02E               	goto	l3028
  4719                           
  4720                           ;dc_motor.c: 33: {
  4721                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4722  001518  EE20 F006          	lfsr	2,6
  4723  00151C  5032               	movf	setMotorPWM@m,w,c
  4724  00151E  26D9               	addwf	fsr2l,f,c
  4725  001520  5033               	movf	setMotorPWM@m+1,w,c
  4726  001522  22DA               	addwfc	fsr2h,f,c
  4727  001524  50DF               	movf	indf2,w,c
  4728  001526  6E34               	movwf	??_setMotorPWM& (0+255),c
  4729  001528  0E01               	movlw	1
  4730  00152A  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4731  00152C  2A34               	incf	??_setMotorPWM,f,c
  4732  00152E  D002               	goto	u2304
  4733  001530                     u2305:
  4734  001530  90D8               	bcf	status,0,c
  4735  001532  3635               	rlcf	??_setMotorPWM+1,f,c
  4736  001534                     u2304:
  4737  001534  2E34               	decfsz	??_setMotorPWM,f,c
  4738  001536  D7FC               	goto	u2305
  4739  001538  5035               	movf	??_setMotorPWM+1,w,c
  4740  00153A  108A               	iorwf	3978,w,c	;volatile
  4741  00153C  6E8A               	movwf	3978,c	;volatile
  4742                           
  4743                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4744  00153E  EE20 F007          	lfsr	2,7
  4745  001542  5032               	movf	setMotorPWM@m,w,c
  4746  001544  26D9               	addwf	fsr2l,f,c
  4747  001546  5033               	movf	setMotorPWM@m+1,w,c
  4748  001548  22DA               	addwfc	fsr2h,f,c
  4749  00154A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4750  00154E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4751  001552  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4752  001556  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4753  00155A  1E36               	comf	??_setMotorPWM+2,f,c
  4754  00155C  1E37               	comf	??_setMotorPWM+3,f,c
  4755  00155E  4A36               	infsnz	??_setMotorPWM+2,f,c
  4756  001560  2A37               	incf	??_setMotorPWM+3,f,c
  4757  001562  5034               	movf	??_setMotorPWM,w,c
  4758  001564  2436               	addwf	??_setMotorPWM+2,w,c
  4759  001566  0100               	movlb	0	; () banked
  4760  001568  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4761  00156A  5035               	movf	??_setMotorPWM+1,w,c
  4762  00156C  2037               	addwfc	??_setMotorPWM+3,w,c
  4763  00156E  0100               	movlb	0	; () banked
  4764  001570  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4765                           
  4766                           ;dc_motor.c: 36: }
  4767  001572  D014               	goto	l147
  4768  001574                     l3028:
  4769                           
  4770                           ;dc_motor.c: 37: else
  4771                           ;dc_motor.c: 38: {
  4772                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4773  001574  EE20 F006          	lfsr	2,6
  4774  001578  5032               	movf	setMotorPWM@m,w,c
  4775  00157A  26D9               	addwf	fsr2l,f,c
  4776  00157C  5033               	movf	setMotorPWM@m+1,w,c
  4777  00157E  22DA               	addwfc	fsr2h,f,c
  4778  001580  50DF               	movf	indf2,w,c
  4779  001582  6E34               	movwf	??_setMotorPWM& (0+255),c
  4780  001584  0E01               	movlw	1
  4781  001586  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4782  001588  2A34               	incf	??_setMotorPWM,f,c
  4783  00158A  D002               	goto	u2314
  4784  00158C                     u2315:
  4785  00158C  90D8               	bcf	status,0,c
  4786  00158E  3635               	rlcf	??_setMotorPWM+1,f,c
  4787  001590                     u2314:
  4788  001590  2E34               	decfsz	??_setMotorPWM,f,c
  4789  001592  D7FC               	goto	u2315
  4790  001594  5035               	movf	??_setMotorPWM+1,w,c
  4791  001596  0AFF               	xorlw	255
  4792  001598  148A               	andwf	3978,w,c	;volatile
  4793  00159A  6E8A               	movwf	3978,c	;volatile
  4794  00159C                     l147:
  4795                           
  4796                           ;dc_motor.c: 40: }
  4797                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4798  00159C  EE20 F002          	lfsr	2,2
  4799  0015A0  5032               	movf	setMotorPWM@m,w,c
  4800  0015A2  26D9               	addwf	fsr2l,f,c
  4801  0015A4  5033               	movf	setMotorPWM@m+1,w,c
  4802  0015A6  22DA               	addwfc	fsr2h,f,c
  4803  0015A8  CFDE F034          	movff	postinc2,??_setMotorPWM
  4804  0015AC  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4805  0015B0  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4806  0015B4  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4807  0015B8  0100               	movlb	0	; () banked
  4808  0015BA  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4809  0015BC  46E8               	rlncf	wreg,f,c
  4810  0015BE  0BFC               	andlw	252
  4811  0015C0  6EDF               	movwf	indf2,c
  4812                           
  4813                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4814  0015C2  EE20 F004          	lfsr	2,4
  4815  0015C6  5032               	movf	setMotorPWM@m,w,c
  4816  0015C8  26D9               	addwf	fsr2l,f,c
  4817  0015CA  5033               	movf	setMotorPWM@m+1,w,c
  4818  0015CC  22DA               	addwfc	fsr2h,f,c
  4819  0015CE  CFDE F034          	movff	postinc2,??_setMotorPWM
  4820  0015D2  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4821  0015D6  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4822  0015DA  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4823  0015DE  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4824  0015E2  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4825  0015E6  0E06               	movlw	6
  4826  0015E8  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4827  0015EA                     u2325:
  4828  0015EA  3437               	rlcf	??_setMotorPWM+3,w,c
  4829  0015EC  3237               	rrcf	??_setMotorPWM+3,f,c
  4830  0015EE  3236               	rrcf	??_setMotorPWM+2,f,c
  4831  0015F0  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4832  0015F2  D7FB               	goto	u2325
  4833  0015F4  5036               	movf	??_setMotorPWM+2,w,c
  4834  0015F6  6EDF               	movwf	indf2,c
  4835                           
  4836                           ; BSR set to: 0
  4837  0015F8  0012               	return		;funcret
  4838  0015FA                     __end_of_setMotorPWM:
  4839                           	opt stack 0
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function ___wmul *****************
  4860 ;; Defined at:
  4861 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  multiplier      2   35[COMRAM] unsigned int 
  4864 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  product         2   39[COMRAM] unsigned int 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  2   35[COMRAM] unsigned int 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, prodl, prodh
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4876 ;;      Params:         4       0       0       0
  4877 ;;      Locals:         2       0       0       0
  4878 ;;      Temps:          0       0       0       0
  4879 ;;      Totals:         6       0       0       0
  4880 ;;Total ram usage:        6 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    3
  4883 ;; This function calls:
  4884 ;;		Nothing
  4885 ;; This function is called by:
  4886 ;;		_setMotorPWM
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text15
  4891  0001F2                     __ptext15:
  4892                           	opt stack 0
  4893  0001F2                     ___wmul:
  4894                           	opt stack 25
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;incstack = 0
  4898  0001F2  5024               	movf	___wmul@multiplier,w,c
  4899  0001F4  0226               	mulwf	___wmul@multiplicand,c
  4900  0001F6  CFF3 F028          	movff	prodl,___wmul@product
  4901  0001FA  CFF4 F029          	movff	prodh,___wmul@product+1
  4902  0001FE  5024               	movf	___wmul@multiplier,w,c
  4903  000200  0227               	mulwf	___wmul@multiplicand+1,c
  4904  000202  50F3               	movf	prodl,w,c
  4905  000204  2629               	addwf	___wmul@product+1,f,c
  4906  000206  5025               	movf	___wmul@multiplier+1,w,c
  4907  000208  0226               	mulwf	___wmul@multiplicand,c
  4908  00020A  50F3               	movf	prodl,w,c
  4909  00020C  2629               	addwf	___wmul@product+1,f,c
  4910  00020E  C028  F024         	movff	___wmul@product,?___wmul
  4911  000212  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4912  000216  0012               	return	
  4913  000218                     __end_of___wmul:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function ___awdiv *****************
  4935 ;; Defined at:
  4936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  dividend        2   41[COMRAM] int 
  4939 ;;  divisor         2   43[COMRAM] int 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  quotient        2   47[COMRAM] int 
  4942 ;;  sign            1   46[COMRAM] unsigned char 
  4943 ;;  counter         1   45[COMRAM] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  2   41[COMRAM] int 
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4953 ;;      Params:         4       0       0       0
  4954 ;;      Locals:         4       0       0       0
  4955 ;;      Temps:          0       0       0       0
  4956 ;;      Totals:         8       0       0       0
  4957 ;;Total ram usage:        8 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    3
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_setMotorPWM
  4964 ;;		_ScanWithRange
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text16
  4969  00194E                     __ptext16:
  4970                           	opt stack 0
  4971  00194E                     ___awdiv:
  4972                           	opt stack 25
  4973                           
  4974                           ;incstack = 0
  4975  00194E  0E00               	movlw	0
  4976  001950  6E2F               	movwf	___awdiv@sign,c
  4977  001952  AE2D               	btfss	___awdiv@divisor+1,7,c
  4978  001954  D006               	goto	l2986
  4979  001956  6C2C               	negf	___awdiv@divisor,c
  4980  001958  1E2D               	comf	___awdiv@divisor+1,f,c
  4981  00195A  B0D8               	btfsc	status,0,c
  4982  00195C  2A2D               	incf	___awdiv@divisor+1,f,c
  4983  00195E  0E01               	movlw	1
  4984  001960  6E2F               	movwf	___awdiv@sign,c
  4985  001962                     l2986:
  4986  001962  AE2B               	btfss	___awdiv@dividend+1,7,c
  4987  001964  D006               	goto	l2992
  4988  001966  6C2A               	negf	___awdiv@dividend,c
  4989  001968  1E2B               	comf	___awdiv@dividend+1,f,c
  4990  00196A  B0D8               	btfsc	status,0,c
  4991  00196C  2A2B               	incf	___awdiv@dividend+1,f,c
  4992  00196E  0E01               	movlw	1
  4993  001970  1A2F               	xorwf	___awdiv@sign,f,c
  4994  001972                     l2992:
  4995  001972  0E00               	movlw	0
  4996  001974  6E31               	movwf	___awdiv@quotient+1,c
  4997  001976  0E00               	movlw	0
  4998  001978  6E30               	movwf	___awdiv@quotient,c
  4999  00197A  502C               	movf	___awdiv@divisor,w,c
  5000  00197C  102D               	iorwf	___awdiv@divisor+1,w,c
  5001  00197E  B4D8               	btfsc	status,2,c
  5002  001980  D01C               	goto	l3014
  5003  001982  0E01               	movlw	1
  5004  001984  6E2E               	movwf	___awdiv@counter,c
  5005  001986  D004               	goto	l3000
  5006  001988                     l2998:
  5007  001988  90D8               	bcf	status,0,c
  5008  00198A  362C               	rlcf	___awdiv@divisor,f,c
  5009  00198C  362D               	rlcf	___awdiv@divisor+1,f,c
  5010  00198E  2A2E               	incf	___awdiv@counter,f,c
  5011  001990                     l3000:
  5012  001990  AE2D               	btfss	___awdiv@divisor+1,7,c
  5013  001992  D7FA               	goto	l2998
  5014  001994                     l3002:
  5015  001994  90D8               	bcf	status,0,c
  5016  001996  3630               	rlcf	___awdiv@quotient,f,c
  5017  001998  3631               	rlcf	___awdiv@quotient+1,f,c
  5018  00199A  502C               	movf	___awdiv@divisor,w,c
  5019  00199C  5C2A               	subwf	___awdiv@dividend,w,c
  5020  00199E  502D               	movf	___awdiv@divisor+1,w,c
  5021  0019A0  582B               	subwfb	___awdiv@dividend+1,w,c
  5022  0019A2  A0D8               	btfss	status,0,c
  5023  0019A4  D005               	goto	l3010
  5024  0019A6  502C               	movf	___awdiv@divisor,w,c
  5025  0019A8  5E2A               	subwf	___awdiv@dividend,f,c
  5026  0019AA  502D               	movf	___awdiv@divisor+1,w,c
  5027  0019AC  5A2B               	subwfb	___awdiv@dividend+1,f,c
  5028  0019AE  8030               	bsf	___awdiv@quotient,0,c
  5029  0019B0                     l3010:
  5030  0019B0  90D8               	bcf	status,0,c
  5031  0019B2  322D               	rrcf	___awdiv@divisor+1,f,c
  5032  0019B4  322C               	rrcf	___awdiv@divisor,f,c
  5033  0019B6  2E2E               	decfsz	___awdiv@counter,f,c
  5034  0019B8  D7ED               	goto	l3002
  5035  0019BA                     l3014:
  5036  0019BA  502F               	movf	___awdiv@sign,w,c
  5037  0019BC  B4D8               	btfsc	status,2,c
  5038  0019BE  D004               	goto	l3018
  5039  0019C0  6C30               	negf	___awdiv@quotient,c
  5040  0019C2  1E31               	comf	___awdiv@quotient+1,f,c
  5041  0019C4  B0D8               	btfsc	status,0,c
  5042  0019C6  2A31               	incf	___awdiv@quotient+1,f,c
  5043  0019C8                     l3018:
  5044  0019C8  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5045  0019CC  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5046  0019D0  0012               	return	
  5047  0019D2                     __end_of___awdiv:
  5048                           	opt stack 0
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           intcon	equ	0xFF2
  5056                           postinc0	equ	0xFEE
  5057                           wreg	equ	0xFE8
  5058                           indf1	equ	0xFE7
  5059                           fsr1h	equ	0xFE2
  5060                           fsr1l	equ	0xFE1
  5061                           indf2	equ	0xFDF
  5062                           postinc2	equ	0xFDE
  5063                           postdec2	equ	0xFDD
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           
  5068 ;; *************** function _sprintf *****************
  5069 ;; Defined at:
  5070 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5073 ;;		 -> ScanIR@buf(40), 
  5074 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5075 ;;		 -> STR_6(12), 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  tmpval          4    0        struct .
  5078 ;;  cp              3    0        PTR const unsigned char 
  5079 ;;  val             2    4[BANK0 ] unsigned int 
  5080 ;;  ap              2    0[BANK0 ] PTR void [1]
  5081 ;;		 -> ?_sprintf(2), 
  5082 ;;  len             2    0        unsigned int 
  5083 ;;  c               1    6[BANK0 ] char 
  5084 ;;  prec            1    3[BANK0 ] char 
  5085 ;;  flag            1    2[BANK0 ] unsigned char 
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  2   47[COMRAM] int 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5095 ;;      Params:         8       0       0       0
  5096 ;;      Locals:         0       7       0       0
  5097 ;;      Temps:          1       0       0       0
  5098 ;;      Totals:         9       7       0       0
  5099 ;;Total ram usage:       16 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    4
  5102 ;; This function calls:
  5103 ;;		___lwdiv
  5104 ;;		___lwmod
  5105 ;; This function is called by:
  5106 ;;		_ScanIR
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text17
  5111  001350                     __ptext17:
  5112                           	opt stack 0
  5113  001350                     _sprintf:
  5114                           	opt stack 25
  5115                           
  5116                           ;doprnt.c: 494: va_list ap;
  5117                           ;doprnt.c: 499: signed char c;
  5118                           ;doprnt.c: 506: signed char prec;
  5119                           ;doprnt.c: 508: unsigned char flag;
  5120                           ;doprnt.c: 523: union {
  5121                           ;doprnt.c: 524: unsigned long vd;
  5122                           ;doprnt.c: 525: double integ;
  5123                           ;doprnt.c: 526: } tmpval;
  5124                           ;doprnt.c: 528: unsigned int val;
  5125                           ;doprnt.c: 529: unsigned len;
  5126                           ;doprnt.c: 530: const char * cp;
  5127                           ;doprnt.c: 533: *ap = __va_start();
  5128                           
  5129                           ;incstack = 0
  5130  001350  0E34               	movlw	low (?_sprintf+4)
  5131  001352  0100               	movlb	0	; () banked
  5132  001354  6F60               	movwf	sprintf@ap& (0+255),b
  5133  001356  0E00               	movlw	high (?_sprintf+4)
  5134  001358  0100               	movlb	0	; () banked
  5135  00135A  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  5136                           
  5137                           ;doprnt.c: 536: while(c = *f++) {
  5138  00135C  D09D               	goto	l2308
  5139  00135E                     l2256:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 538: if(c != '%')
  5143  00135E  0E25               	movlw	37
  5144  001360  0100               	movlb	0	; () banked
  5145  001362  1966               	xorwf	sprintf@c& (0+255),w,b
  5146  001364  B4D8               	btfsc	status,2,c
  5147  001366  D009               	goto	l2262
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;doprnt.c: 540: {
  5151                           ;doprnt.c: 541: ((*sp++ = (c)));
  5152  001368  C030  FFD9         	movff	sprintf@sp,fsr2l
  5153  00136C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5154  001370  C066  FFDF         	movff	sprintf@c,indf2
  5155                           
  5156                           ; BSR set to: 0
  5157  001374  4A30               	infsnz	sprintf@sp,f,c
  5158  001376  2A31               	incf	sprintf@sp+1,f,c
  5159                           
  5160                           ;doprnt.c: 542: continue;
  5161  001378  D08F               	goto	l2308
  5162  00137A                     l2262:
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;doprnt.c: 543: }
  5166                           ;doprnt.c: 548: flag = 0;
  5167  00137A  0E00               	movlw	0
  5168  00137C  0100               	movlb	0	; () banked
  5169  00137E  6F62               	movwf	sprintf@flag& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172                           
  5173                           ; BSR set to: 0
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;doprnt.c: 822: }
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;doprnt.c: 813: continue;
  5180                           
  5181                           ;doprnt.c: 802: default:
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;doprnt.c: 698: case 'i':
  5185                           ;doprnt.c: 699: break;
  5186                           
  5187                           ; BSR set to: 0
  5188                           
  5189                           ;doprnt.c: 697: case 'd':
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 638: goto alldone;
  5193                           
  5194                           ;doprnt.c: 637: case 0:
  5195                           
  5196                           ;doprnt.c: 635: switch(c = *f++) {
  5197  001380  C032  FFF6         	movff	sprintf@f,tblptrl
  5198  001384  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5199  001388  4A32               	infsnz	sprintf@f,f,c
  5200  00138A  2A33               	incf	sprintf@f+1,f,c
  5201  00138C                     	if	0	;tblptru may be non-zero
  5202  00138C                     	endif
  5203  00138C                     	if	0	;tblptru may be non-zero
  5204  00138C                     	endif
  5205  00138C  0008               	tblrd		*
  5206  00138E  CFF5 F066          	movff	tablat,sprintf@c
  5207  001392  0100               	movlb	0	; () banked
  5208  001394  5166               	movf	sprintf@c& (0+255),w,b
  5209                           
  5210                           ; Switch size 1, requested type "space"
  5211                           ; Number of cases is 3, Range of values is 0 to 105
  5212                           ; switch strategies available:
  5213                           ; Name         Instructions Cycles
  5214                           ; simple_byte           10     6 (average)
  5215                           ;	Chosen strategy is simple_byte
  5216  001396  0A00               	xorlw	0	; case 0
  5217  001398  B4D8               	btfsc	status,2,c
  5218  00139A  D08B               	goto	l2310
  5219  00139C  0A64               	xorlw	100	; case 100
  5220  00139E  B4D8               	btfsc	status,2,c
  5221  0013A0  D003               	goto	l2268
  5222  0013A2  0A0D               	xorlw	13	; case 105
  5223  0013A4  A4D8               	btfss	status,2,c
  5224  0013A6  D078               	goto	l2308
  5225  0013A8                     l2268:
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;doprnt.c: 1253: {
  5229                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5230  0013A8  C060  FFD9         	movff	sprintf@ap,fsr2l
  5231  0013AC  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  5232  0013B0  CFDE F064          	movff	postinc2,sprintf@val
  5233  0013B4  CFDD F065          	movff	postdec2,sprintf@val+1
  5234                           
  5235                           ; BSR set to: 0
  5236  0013B8  0E02               	movlw	2
  5237  0013BA  0100               	movlb	0	; () banked
  5238  0013BC  2760               	addwf	sprintf@ap& (0+255),f,b
  5239  0013BE  0E00               	movlw	0
  5240  0013C0  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;doprnt.c: 1261: if((int)val < 0) {
  5244  0013C2  0100               	movlb	0	; () banked
  5245  0013C4  AF65               	btfss	(sprintf@val+1)& (0+255),7,b
  5246  0013C6  D008               	goto	l2278
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1262: flag |= 0x03;
  5250  0013C8  0E03               	movlw	3
  5251  0013CA  0100               	movlb	0	; () banked
  5252  0013CC  1362               	iorwf	sprintf@flag& (0+255),f,b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;doprnt.c: 1263: val = -val;
  5256  0013CE  0100               	movlb	0	; () banked
  5257  0013D0  6D64               	negf	sprintf@val& (0+255),b
  5258  0013D2  1F65               	comf	(sprintf@val+1)& (0+255),f,b
  5259  0013D4  B0D8               	btfsc	status,0,c
  5260  0013D6  2B65               	incf	(sprintf@val+1)& (0+255),f,b
  5261  0013D8                     l2278:
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;doprnt.c: 1264: }
  5265                           ;doprnt.c: 1266: }
  5266                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5267  0013D8  0E01               	movlw	1
  5268  0013DA  0100               	movlb	0	; () banked
  5269  0013DC  6F66               	movwf	sprintf@c& (0+255),b
  5270  0013DE                     l2280:
  5271                           
  5272                           ; BSR set to: 0
  5273  0013DE  0E05               	movlw	5
  5274  0013E0  0100               	movlb	0	; () banked
  5275  0013E2  1966               	xorwf	sprintf@c& (0+255),w,b
  5276  0013E4  B4D8               	btfsc	status,2,c
  5277  0013E6  D016               	goto	l2292
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;doprnt.c: 1306: if(val < dpowers[c])
  5281                           
  5282                           ; BSR set to: 0
  5283                           
  5284                           ; BSR set to: 0
  5285  0013E8  0100               	movlb	0	; () banked
  5286  0013EA  5166               	movf	sprintf@c& (0+255),w,b
  5287  0013EC  0D02               	mullw	2
  5288  0013EE  0E01               	movlw	low _dpowers
  5289  0013F0  24F3               	addwf	prodl,w,c
  5290  0013F2  6EF6               	movwf	tblptrl,c
  5291  0013F4  0E03               	movlw	high _dpowers
  5292  0013F6  20F4               	addwfc	prodh,w,c
  5293  0013F8  6EF7               	movwf	tblptrh,c
  5294  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  5295  0013FA                     	endif
  5296  0013FA  0009               	tblrd		*+
  5297  0013FC  50F5               	movf	tablat,w,c
  5298  0013FE  0100               	movlb	0	; () banked
  5299  001400  5D64               	subwf	sprintf@val& (0+255),w,b
  5300  001402  0009               	tblrd		*+
  5301  001404  50F5               	movf	tablat,w,c
  5302  001406  0100               	movlb	0	; () banked
  5303  001408  5965               	subwfb	(sprintf@val+1)& (0+255),w,b
  5304  00140A  A0D8               	btfss	status,0,c
  5305  00140C  D003               	goto	l2292
  5306                           
  5307                           ; BSR set to: 0
  5308                           
  5309                           ; BSR set to: 0
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 1307: break;
  5313  00140E  0100               	movlb	0	; () banked
  5314  001410  2B66               	incf	sprintf@c& (0+255),f,b
  5315  001412  D7E5               	goto	l2280
  5316  001414                     l2292:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;doprnt.c: 1422: {
  5320                           ;doprnt.c: 1438: if(flag & 0x03)
  5321  001414  C062  F038         	movff	sprintf@flag,??_sprintf
  5322  001418  0E03               	movlw	3
  5323  00141A  1638               	andwf	??_sprintf,f,c
  5324  00141C  B4D8               	btfsc	status,2,c
  5325  00141E  D008               	goto	l2298
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5329  001420  C030  FFD9         	movff	sprintf@sp,fsr2l
  5330  001424  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5331  001428  0E2D               	movlw	45
  5332  00142A  6EDF               	movwf	indf2,c
  5333                           
  5334                           ; BSR set to: 0
  5335  00142C  4A30               	infsnz	sprintf@sp,f,c
  5336  00142E  2A31               	incf	sprintf@sp+1,f,c
  5337  001430                     l2298:
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;doprnt.c: 1469: }
  5341                           ;doprnt.c: 1472: prec = c;
  5342  001430  C066  F063         	movff	sprintf@c,sprintf@prec
  5343                           
  5344                           ;doprnt.c: 1474: while(prec--) {
  5345  001434  D02B               	goto	l2306
  5346  001436                     l2300:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;doprnt.c: 1478: {
  5350                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5351  001436  0100               	movlb	0	; () banked
  5352  001438  5163               	movf	sprintf@prec& (0+255),w,b
  5353  00143A  0D02               	mullw	2
  5354  00143C  0E01               	movlw	low _dpowers
  5355  00143E  24F3               	addwf	prodl,w,c
  5356  001440  6EF6               	movwf	tblptrl,c
  5357  001442  0E03               	movlw	high _dpowers
  5358  001444  20F4               	addwfc	prodh,w,c
  5359  001446  6EF7               	movwf	tblptrh,c
  5360  001448                     	if	0	;There are less than 3 active tblptr bytes
  5361  001448                     	endif
  5362  001448  0009               	tblrd		*+
  5363  00144A  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5364  00144E  000A               	tblrd		*-
  5365  001450  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5366  001454  C064  F024         	movff	sprintf@val,___lwdiv@dividend
  5367  001458  C065  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5368  00145C  EC93  F00D         	call	___lwdiv	;wreg free
  5369  001460  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5370  001464  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5371  001468  0E00               	movlw	0
  5372  00146A  6E2E               	movwf	___lwmod@divisor+1,c
  5373  00146C  0E0A               	movlw	10
  5374  00146E  6E2D               	movwf	___lwmod@divisor,c
  5375  001470  EC0A  F00E         	call	___lwmod	;wreg free
  5376  001474  502B               	movf	?___lwmod,w,c
  5377  001476  0F30               	addlw	48
  5378  001478  0100               	movlb	0	; () banked
  5379  00147A  6F66               	movwf	sprintf@c& (0+255),b
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;doprnt.c: 1523: }
  5383                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5384  00147C  C030  FFD9         	movff	sprintf@sp,fsr2l
  5385  001480  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5386  001484  C066  FFDF         	movff	sprintf@c,indf2
  5387                           
  5388                           ; BSR set to: 0
  5389  001488  4A30               	infsnz	sprintf@sp,f,c
  5390  00148A  2A31               	incf	sprintf@sp+1,f,c
  5391  00148C                     l2306:
  5392                           
  5393                           ; BSR set to: 0
  5394  00148C  0100               	movlb	0	; () banked
  5395  00148E  0763               	decf	sprintf@prec& (0+255),f,b
  5396  001490  0100               	movlb	0	; () banked
  5397  001492  2963               	incf	sprintf@prec& (0+255),w,b
  5398  001494  A4D8               	btfss	status,2,c
  5399  001496  D7CF               	goto	l2300
  5400  001498                     l2308:
  5401                           
  5402                           ; BSR set to: 0
  5403  001498  C032  FFF6         	movff	sprintf@f,tblptrl
  5404  00149C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5405  0014A0  4A32               	infsnz	sprintf@f,f,c
  5406  0014A2  2A33               	incf	sprintf@f+1,f,c
  5407  0014A4                     	if	0	;tblptru may be non-zero
  5408  0014A4                     	endif
  5409  0014A4                     	if	0	;tblptru may be non-zero
  5410  0014A4                     	endif
  5411  0014A4  0008               	tblrd		*
  5412  0014A6  CFF5 F066          	movff	tablat,sprintf@c
  5413  0014AA  0100               	movlb	0	; () banked
  5414  0014AC  5166               	movf	sprintf@c& (0+255),w,b
  5415  0014AE  A4D8               	btfss	status,2,c
  5416  0014B0  D756               	goto	l2256
  5417  0014B2                     l2310:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;doprnt.c: 1538: *sp = 0;
  5421  0014B2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5422  0014B6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5423  0014BA  0E00               	movlw	0
  5424  0014BC  6EDF               	movwf	indf2,c
  5425  0014BE  0012               	return	
  5426  0014C0                     __end_of_sprintf:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           fsr1h	equ	0xFE2
  5439                           fsr1l	equ	0xFE1
  5440                           indf2	equ	0xFDF
  5441                           postinc2	equ	0xFDE
  5442                           postdec2	equ	0xFDD
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function ___lwmod *****************
  5448 ;; Defined at:
  5449 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  dividend        2   42[COMRAM] unsigned int 
  5452 ;;  divisor         2   44[COMRAM] unsigned int 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  counter         1   46[COMRAM] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  2   42[COMRAM] unsigned int 
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5464 ;;      Params:         4       0       0       0
  5465 ;;      Locals:         1       0       0       0
  5466 ;;      Temps:          0       0       0       0
  5467 ;;      Totals:         5       0       0       0
  5468 ;;Total ram usage:        5 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    3
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_sprintf
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text18
  5479  001C14                     __ptext18:
  5480                           	opt stack 0
  5481  001C14                     ___lwmod:
  5482                           	opt stack 25
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;incstack = 0
  5486  001C14  502D               	movf	___lwmod@divisor,w,c
  5487  001C16  102E               	iorwf	___lwmod@divisor+1,w,c
  5488  001C18  B4D8               	btfsc	status,2,c
  5489  001C1A  D018               	goto	l851
  5490  001C1C  0E01               	movlw	1
  5491  001C1E  6E2F               	movwf	___lwmod@counter,c
  5492  001C20  D004               	goto	l2172
  5493  001C22                     l2170:
  5494  001C22  90D8               	bcf	status,0,c
  5495  001C24  362D               	rlcf	___lwmod@divisor,f,c
  5496  001C26  362E               	rlcf	___lwmod@divisor+1,f,c
  5497  001C28  2A2F               	incf	___lwmod@counter,f,c
  5498  001C2A                     l2172:
  5499  001C2A  AE2E               	btfss	___lwmod@divisor+1,7,c
  5500  001C2C  D7FA               	goto	l2170
  5501  001C2E                     l2174:
  5502  001C2E  502D               	movf	___lwmod@divisor,w,c
  5503  001C30  5C2B               	subwf	___lwmod@dividend,w,c
  5504  001C32  502E               	movf	___lwmod@divisor+1,w,c
  5505  001C34  582C               	subwfb	___lwmod@dividend+1,w,c
  5506  001C36  A0D8               	btfss	status,0,c
  5507  001C38  D004               	goto	l2178
  5508  001C3A  502D               	movf	___lwmod@divisor,w,c
  5509  001C3C  5E2B               	subwf	___lwmod@dividend,f,c
  5510  001C3E  502E               	movf	___lwmod@divisor+1,w,c
  5511  001C40  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5512  001C42                     l2178:
  5513  001C42  90D8               	bcf	status,0,c
  5514  001C44  322E               	rrcf	___lwmod@divisor+1,f,c
  5515  001C46  322D               	rrcf	___lwmod@divisor,f,c
  5516  001C48  2E2F               	decfsz	___lwmod@counter,f,c
  5517  001C4A  D7F1               	goto	l2174
  5518  001C4C                     l851:
  5519  001C4C  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5520  001C50  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5521  001C54  0012               	return		;funcret
  5522  001C56                     __end_of___lwmod:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon	equ	0xFF2
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           indf1	equ	0xFE7
  5534                           fsr1h	equ	0xFE2
  5535                           fsr1l	equ	0xFE1
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function ___lwdiv *****************
  5544 ;; Defined at:
  5545 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  dividend        2   35[COMRAM] unsigned int 
  5548 ;;  divisor         2   37[COMRAM] unsigned int 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;  quotient        2   39[COMRAM] unsigned int 
  5551 ;;  counter         1   41[COMRAM] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  2   35[COMRAM] unsigned int 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5561 ;;      Params:         4       0       0       0
  5562 ;;      Locals:         3       0       0       0
  5563 ;;      Temps:          0       0       0       0
  5564 ;;      Totals:         7       0       0       0
  5565 ;;Total ram usage:        7 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    3
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_sprintf
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text19
  5576  001B26                     __ptext19:
  5577                           	opt stack 0
  5578  001B26                     ___lwdiv:
  5579                           	opt stack 25
  5580                           
  5581                           ;incstack = 0
  5582  001B26  0E00               	movlw	0
  5583  001B28  6E29               	movwf	___lwdiv@quotient+1,c
  5584  001B2A  0E00               	movlw	0
  5585  001B2C  6E28               	movwf	___lwdiv@quotient,c
  5586  001B2E  5026               	movf	___lwdiv@divisor,w,c
  5587  001B30  1027               	iorwf	___lwdiv@divisor+1,w,c
  5588  001B32  B4D8               	btfsc	status,2,c
  5589  001B34  D01C               	goto	l841
  5590  001B36  0E01               	movlw	1
  5591  001B38  6E2A               	movwf	___lwdiv@counter,c
  5592  001B3A  D004               	goto	l2152
  5593  001B3C                     l2150:
  5594  001B3C  90D8               	bcf	status,0,c
  5595  001B3E  3626               	rlcf	___lwdiv@divisor,f,c
  5596  001B40  3627               	rlcf	___lwdiv@divisor+1,f,c
  5597  001B42  2A2A               	incf	___lwdiv@counter,f,c
  5598  001B44                     l2152:
  5599  001B44  AE27               	btfss	___lwdiv@divisor+1,7,c
  5600  001B46  D7FA               	goto	l2150
  5601  001B48                     l2154:
  5602  001B48  90D8               	bcf	status,0,c
  5603  001B4A  3628               	rlcf	___lwdiv@quotient,f,c
  5604  001B4C  3629               	rlcf	___lwdiv@quotient+1,f,c
  5605  001B4E  5026               	movf	___lwdiv@divisor,w,c
  5606  001B50  5C24               	subwf	___lwdiv@dividend,w,c
  5607  001B52  5027               	movf	___lwdiv@divisor+1,w,c
  5608  001B54  5825               	subwfb	___lwdiv@dividend+1,w,c
  5609  001B56  A0D8               	btfss	status,0,c
  5610  001B58  D005               	goto	l2162
  5611  001B5A  5026               	movf	___lwdiv@divisor,w,c
  5612  001B5C  5E24               	subwf	___lwdiv@dividend,f,c
  5613  001B5E  5027               	movf	___lwdiv@divisor+1,w,c
  5614  001B60  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5615  001B62  8028               	bsf	___lwdiv@quotient,0,c
  5616  001B64                     l2162:
  5617  001B64  90D8               	bcf	status,0,c
  5618  001B66  3227               	rrcf	___lwdiv@divisor+1,f,c
  5619  001B68  3226               	rrcf	___lwdiv@divisor,f,c
  5620  001B6A  2E2A               	decfsz	___lwdiv@counter,f,c
  5621  001B6C  D7ED               	goto	l2154
  5622  001B6E                     l841:
  5623  001B6E  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5624  001B72  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5625  001B76  0012               	return		;funcret
  5626  001B78                     __end_of___lwdiv:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           tblptrh	equ	0xFF7
  5630                           tblptrl	equ	0xFF6
  5631                           tablat	equ	0xFF5
  5632                           prodh	equ	0xFF4
  5633                           prodl	equ	0xFF3
  5634                           intcon	equ	0xFF2
  5635                           postinc0	equ	0xFEE
  5636                           wreg	equ	0xFE8
  5637                           indf1	equ	0xFE7
  5638                           fsr1h	equ	0xFE2
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _grabRightIR *****************
  5648 ;; Defined at:
  5649 ;;		line 74 in file "IR_Reading.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;		None
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5654 ;;  i               1   42[COMRAM] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  2   35[COMRAM] unsigned int 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5664 ;;      Params:         2       0       0       0
  5665 ;;      Locals:         3       0       0       0
  5666 ;;      Temps:          3       0       0       0
  5667 ;;      Totals:         8       0       0       0
  5668 ;;Total ram usage:        8 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    3
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_ScanIR
  5675 ;;		_ScanWithRange
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text20
  5680  0019D2                     __ptext20:
  5681                           	opt stack 0
  5682  0019D2                     _grabRightIR:
  5683                           	opt stack 26
  5684                           
  5685                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5686                           
  5687                           ;incstack = 0
  5688  0019D2  0E00               	movlw	0
  5689  0019D4  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5690  0019D6  0E00               	movlw	0
  5691  0019D8  6E29               	movwf	grabRightIR@IR_signal,c
  5692                           
  5693                           ;IR_Reading.c: 77: unsigned char i=0;
  5694  0019DA  0E00               	movlw	0
  5695  0019DC  6E2B               	movwf	grabRightIR@i,c
  5696                           
  5697                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5698  0019DE  0E00               	movlw	0
  5699  0019E0  6E2B               	movwf	grabRightIR@i,c
  5700  0019E2                     l2240:
  5701  0019E2  0E03               	movlw	3
  5702  0019E4  642B               	cpfsgt	grabRightIR@i,c
  5703  0019E6  D001               	goto	l2244
  5704  0019E8  D01E               	goto	l2250
  5705  0019EA                     l2244:
  5706                           
  5707                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5708  0019EA  5069               	movf	3945,w,c	;volatile
  5709  0019EC  6E26               	movwf	??_grabRightIR& (0+255),c
  5710  0019EE  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5711  0019F0  0E07               	movlw	7
  5712  0019F2                     u1545:
  5713  0019F2  90D8               	bcf	status,0,c
  5714  0019F4  3626               	rlcf	??_grabRightIR,f,c
  5715  0019F6  3627               	rlcf	??_grabRightIR+1,f,c
  5716  0019F8  2EE8               	decfsz	wreg,f,c
  5717  0019FA  D7FB               	goto	u1545
  5718  0019FC  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5719  001A00  90D8               	bcf	status,0,c
  5720  001A02  3228               	rrcf	??_grabRightIR+2,f,c
  5721  001A04  5028               	movf	??_grabRightIR+2,w,c
  5722  001A06  1226               	iorwf	??_grabRightIR,f,c
  5723  001A08  0E00               	movlw	0
  5724  001A0A  1227               	iorwf	??_grabRightIR+1,f,c
  5725  001A0C  5026               	movf	??_grabRightIR,w,c
  5726  001A0E  2629               	addwf	grabRightIR@IR_signal,f,c
  5727  001A10  5027               	movf	??_grabRightIR+1,w,c
  5728  001A12  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5729                           
  5730                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5731  001A14  0E82               	movlw	130
  5732  001A16  6E26               	movwf	??_grabRightIR& (0+255),c
  5733  001A18  0EDE               	movlw	222
  5734  001A1A                     u3067:
  5735  001A1A  2EE8               	decfsz	wreg,f,c
  5736  001A1C  D7FE               	goto	u3067
  5737  001A1E  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5738  001A20  D7FC               	goto	u3067
  5739  001A22  2A2B               	incf	grabRightIR@i,f,c
  5740  001A24  D7DE               	goto	l2240
  5741  001A26                     l2250:
  5742                           
  5743                           ;IR_Reading.c: 83: }
  5744                           ;IR_Reading.c: 85: return IR_signal>>2;
  5745  001A26  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5746  001A2A  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5747  001A2E  90D8               	bcf	status,0,c
  5748  001A30  3227               	rrcf	??_grabRightIR+1,f,c
  5749  001A32  3226               	rrcf	??_grabRightIR,f,c
  5750  001A34  90D8               	bcf	status,0,c
  5751  001A36  3227               	rrcf	??_grabRightIR+1,f,c
  5752  001A38  3226               	rrcf	??_grabRightIR,f,c
  5753  001A3A  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5754  001A3E  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5755  001A42  0012               	return	
  5756  001A44                     __end_of_grabRightIR:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           indf1	equ	0xFE7
  5768                           fsr1h	equ	0xFE2
  5769                           fsr1l	equ	0xFE1
  5770                           indf2	equ	0xFDF
  5771                           postinc2	equ	0xFDE
  5772                           postdec2	equ	0xFDD
  5773                           fsr2h	equ	0xFDA
  5774                           fsr2l	equ	0xFD9
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function _grabLeftIR *****************
  5778 ;; Defined at:
  5779 ;;		line 90 in file "IR_Reading.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5784 ;;  i               1   42[COMRAM] unsigned char 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  2   35[COMRAM] unsigned int 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 0/0
  5791 ;;		On exit  : 0/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5794 ;;      Params:         2       0       0       0
  5795 ;;      Locals:         3       0       0       0
  5796 ;;      Temps:          3       0       0       0
  5797 ;;      Totals:         8       0       0       0
  5798 ;;Total ram usage:        8 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    3
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_ScanIR
  5805 ;;		_ScanWithRange
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text21
  5810  001A44                     __ptext21:
  5811                           	opt stack 0
  5812  001A44                     _grabLeftIR:
  5813                           	opt stack 26
  5814                           
  5815                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5816                           
  5817                           ;incstack = 0
  5818  001A44  0E00               	movlw	0
  5819  001A46  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5820  001A48  0E00               	movlw	0
  5821  001A4A  6E29               	movwf	grabLeftIR@IR_signal,c
  5822                           
  5823                           ;IR_Reading.c: 93: unsigned char i=0;
  5824  001A4C  0E00               	movlw	0
  5825  001A4E  6E2B               	movwf	grabLeftIR@i,c
  5826                           
  5827                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5828  001A50  0E00               	movlw	0
  5829  001A52  6E2B               	movwf	grabLeftIR@i,c
  5830  001A54                     l2224:
  5831  001A54  0E03               	movlw	3
  5832  001A56  642B               	cpfsgt	grabLeftIR@i,c
  5833  001A58  D001               	goto	l2228
  5834  001A5A  D01E               	goto	l2234
  5835  001A5C                     l2228:
  5836                           
  5837                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5838  001A5C  5067               	movf	3943,w,c	;volatile
  5839  001A5E  6E26               	movwf	??_grabLeftIR& (0+255),c
  5840  001A60  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5841  001A62  0E07               	movlw	7
  5842  001A64                     u1515:
  5843  001A64  90D8               	bcf	status,0,c
  5844  001A66  3626               	rlcf	??_grabLeftIR,f,c
  5845  001A68  3627               	rlcf	??_grabLeftIR+1,f,c
  5846  001A6A  2EE8               	decfsz	wreg,f,c
  5847  001A6C  D7FB               	goto	u1515
  5848  001A6E  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5849  001A72  90D8               	bcf	status,0,c
  5850  001A74  3228               	rrcf	??_grabLeftIR+2,f,c
  5851  001A76  5028               	movf	??_grabLeftIR+2,w,c
  5852  001A78  1226               	iorwf	??_grabLeftIR,f,c
  5853  001A7A  0E00               	movlw	0
  5854  001A7C  1227               	iorwf	??_grabLeftIR+1,f,c
  5855  001A7E  5026               	movf	??_grabLeftIR,w,c
  5856  001A80  2629               	addwf	grabLeftIR@IR_signal,f,c
  5857  001A82  5027               	movf	??_grabLeftIR+1,w,c
  5858  001A84  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5859                           
  5860                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5861  001A86  0E82               	movlw	130
  5862  001A88  6E26               	movwf	??_grabLeftIR& (0+255),c
  5863  001A8A  0EDE               	movlw	222
  5864  001A8C                     u3077:
  5865  001A8C  2EE8               	decfsz	wreg,f,c
  5866  001A8E  D7FE               	goto	u3077
  5867  001A90  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5868  001A92  D7FC               	goto	u3077
  5869  001A94  2A2B               	incf	grabLeftIR@i,f,c
  5870  001A96  D7DE               	goto	l2224
  5871  001A98                     l2234:
  5872                           
  5873                           ;IR_Reading.c: 99: }
  5874                           ;IR_Reading.c: 101: return IR_signal>>2;
  5875  001A98  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5876  001A9C  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5877  001AA0  90D8               	bcf	status,0,c
  5878  001AA2  3227               	rrcf	??_grabLeftIR+1,f,c
  5879  001AA4  3226               	rrcf	??_grabLeftIR,f,c
  5880  001AA6  90D8               	bcf	status,0,c
  5881  001AA8  3227               	rrcf	??_grabLeftIR+1,f,c
  5882  001AAA  3226               	rrcf	??_grabLeftIR,f,c
  5883  001AAC  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5884  001AB0  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5885  001AB4  0012               	return	
  5886  001AB6                     __end_of_grabLeftIR:
  5887                           	opt stack 0
  5888                           tblptru	equ	0xFF8
  5889                           tblptrh	equ	0xFF7
  5890                           tblptrl	equ	0xFF6
  5891                           tablat	equ	0xFF5
  5892                           prodh	equ	0xFF4
  5893                           prodl	equ	0xFF3
  5894                           intcon	equ	0xFF2
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           indf1	equ	0xFE7
  5898                           fsr1h	equ	0xFE2
  5899                           fsr1l	equ	0xFE1
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _delay_tenth_s *****************
  5908 ;; Defined at:
  5909 ;;		line 29 in file "Movement.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  tenth_second    1    wreg     unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  tenth_second    1   36[COMRAM] unsigned char 
  5914 ;;  i               2   37[COMRAM] unsigned int 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;		None               void
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5924 ;;      Params:         0       0       0       0
  5925 ;;      Locals:         3       0       0       0
  5926 ;;      Temps:          1       0       0       0
  5927 ;;      Totals:         4       0       0       0
  5928 ;;Total ram usage:        4 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    3
  5931 ;; This function calls:
  5932 ;;		Nothing
  5933 ;; This function is called by:
  5934 ;;		_main
  5935 ;;		_ScanIR
  5936 ;;		_ScanWithRange
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text22
  5941  001C90                     __ptext22:
  5942                           	opt stack 0
  5943  001C90                     _delay_tenth_s:
  5944                           	opt stack 27
  5945                           
  5946                           ;incstack = 0
  5947                           ;delay_tenth_s@tenth_seconds stored from wreg
  5948  001C90  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  5949                           
  5950                           ;Movement.c: 30: unsigned int i=0;
  5951  001C92  0E00               	movlw	0
  5952  001C94  6E27               	movwf	delay_tenth_s@i+1,c
  5953  001C96  0E00               	movlw	0
  5954  001C98  6E26               	movwf	delay_tenth_s@i,c
  5955                           
  5956                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  5957  001C9A  0E00               	movlw	0
  5958  001C9C  6E27               	movwf	delay_tenth_s@i+1,c
  5959  001C9E  0E01               	movlw	1
  5960  001CA0  6E26               	movwf	delay_tenth_s@i,c
  5961  001CA2  D009               	goto	l2188
  5962  001CA4                     l2184:
  5963                           
  5964                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  5965  001CA4  0E82               	movlw	130
  5966  001CA6  6E24               	movwf	??_delay_tenth_s& (0+255),c
  5967  001CA8  0EDE               	movlw	222
  5968  001CAA                     u3087:
  5969  001CAA  2EE8               	decfsz	wreg,f,c
  5970  001CAC  D7FE               	goto	u3087
  5971  001CAE  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  5972  001CB0  D7FC               	goto	u3087
  5973  001CB2  4A26               	infsnz	delay_tenth_s@i,f,c
  5974  001CB4  2A27               	incf	delay_tenth_s@i+1,f,c
  5975  001CB6                     l2188:
  5976  001CB6  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  5977  001CB8  0D02               	mullw	2
  5978  001CBA  5026               	movf	delay_tenth_s@i,w,c
  5979  001CBC  5CF3               	subwf	prodl,w,c
  5980  001CBE  5027               	movf	delay_tenth_s@i+1,w,c
  5981  001CC0  58F4               	subwfb	prodh,w,c
  5982  001CC2  A0D8               	btfss	status,0,c
  5983  001CC4  0012               	return	
  5984  001CC6  D7EE               	goto	l2184
  5985  001CC8                     __end_of_delay_tenth_s:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           indf1	equ	0xFE7
  5997                           fsr1h	equ	0xFE2
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _SetLine *****************
  6007 ;; Defined at:
  6008 ;;		line 74 in file "LCD.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  line            1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  line            1   41[COMRAM] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6022 ;;      Params:         0       0       0       0
  6023 ;;      Locals:         1       0       0       0
  6024 ;;      Temps:          0       0       0       0
  6025 ;;      Totals:         1       0       0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    6
  6029 ;; This function calls:
  6030 ;;		_SendLCD
  6031 ;; This function is called by:
  6032 ;;		_main
  6033 ;;		_ScanIR
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text23
  6038  000142                     __ptext23:
  6039                           	opt stack 0
  6040  000142                     _SetLine:
  6041                           	opt stack 24
  6042                           
  6043                           ;incstack = 0
  6044                           ;SetLine@line stored from wreg
  6045  000142  6E2A               	movwf	SetLine@line,c
  6046                           
  6047                           ;LCD.c: 75: if (line==1) {
  6048  000144  042A               	decf	SetLine@line,w,c
  6049  000146  A4D8               	btfss	status,2,c
  6050  000148  D006               	goto	l2194
  6051                           
  6052                           ;LCD.c: 76: SendLCD(0x80,0);
  6053  00014A  0E00               	movlw	0
  6054  00014C  6E28               	movwf	SendLCD@type,c
  6055  00014E  0E80               	movlw	128
  6056  000150  ECB9  F000         	call	_SendLCD
  6057                           
  6058                           ;LCD.c: 77: } else if (line==2) {
  6059  000154  D009               	goto	l2198
  6060  000156                     l2194:
  6061  000156  0E02               	movlw	2
  6062  000158  182A               	xorwf	SetLine@line,w,c
  6063  00015A  A4D8               	btfss	status,2,c
  6064  00015C  D005               	goto	l2198
  6065                           
  6066                           ;LCD.c: 78: SendLCD(0xC0,0);
  6067  00015E  0E00               	movlw	0
  6068  000160  6E28               	movwf	SendLCD@type,c
  6069  000162  0EC0               	movlw	192
  6070  000164  ECB9  F000         	call	_SendLCD
  6071  000168                     l2198:
  6072                           
  6073                           ;LCD.c: 79: }
  6074                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6075  000168  0E21               	movlw	33
  6076  00016A                     u3097:
  6077  00016A  2EE8               	decfsz	wreg,f,c
  6078  00016C  D7FE               	goto	u3097
  6079  00016E  F000               	nop	
  6080  000170  0012               	return		;funcret
  6081  000172                     __end_of_SetLine:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           indf1	equ	0xFE7
  6093                           fsr1h	equ	0xFE2
  6094                           fsr1l	equ	0xFE1
  6095                           indf2	equ	0xFDF
  6096                           postinc2	equ	0xFDE
  6097                           postdec2	equ	0xFDD
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _LCD_String *****************
  6103 ;; Defined at:
  6104 ;;		line 83 in file "LCD.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  string          2   41[COMRAM] PTR unsigned char 
  6107 ;;		 -> STR_5(17), STR_4(17), STR_3(18), STR_2(15), 
  6108 ;;		 -> STR_1(14), 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6120 ;;      Params:         2       0       0       0
  6121 ;;      Locals:         0       0       0       0
  6122 ;;      Temps:          0       0       0       0
  6123 ;;      Totals:         2       0       0       0
  6124 ;;Total ram usage:        2 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    6
  6127 ;; This function calls:
  6128 ;;		_SendLCD
  6129 ;; This function is called by:
  6130 ;;		_main
  6131 ;;		_ScanIR
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text24
  6136  0000DA                     __ptext24:
  6137                           	opt stack 0
  6138  0000DA                     _LCD_String:
  6139                           	opt stack 23
  6140                           
  6141                           ;LCD.c: 85: while(*string != 0){
  6142                           
  6143                           ;incstack = 0
  6144  0000DA  D010               	goto	l2208
  6145  0000DC                     l2202:
  6146                           
  6147                           ;LCD.c: 88: SendLCD(*string++,1);
  6148  0000DC  0E01               	movlw	1
  6149  0000DE  6E28               	movwf	SendLCD@type,c
  6150  0000E0  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6151  0000E4  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6152  0000E8                     	if	0	;tblptru may be non-zero
  6153  0000E8                     	endif
  6154  0000E8                     	if	0	;tblptru may be non-zero
  6155  0000E8                     	endif
  6156  0000E8  0008               	tblrd		*
  6157  0000EA  50F5               	movf	tablat,w,c
  6158  0000EC  ECB9  F000         	call	_SendLCD
  6159  0000F0  4A2A               	infsnz	LCD_String@string,f,c
  6160  0000F2  2A2B               	incf	LCD_String@string+1,f,c
  6161                           
  6162                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6163  0000F4  0E21               	movlw	33
  6164  0000F6                     u3107:
  6165  0000F6  2EE8               	decfsz	wreg,f,c
  6166  0000F8  D7FE               	goto	u3107
  6167  0000FA  F000               	nop	
  6168  0000FC                     l2208:
  6169  0000FC  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6170  000100  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6171  000104                     	if	0	;tblptru may be non-zero
  6172  000104                     	endif
  6173  000104                     	if	0	;tblptru may be non-zero
  6174  000104                     	endif
  6175  000104  0008               	tblrd		*
  6176  000106  50F5               	movf	tablat,w,c
  6177  000108  0900               	iorlw	0
  6178  00010A  B4D8               	btfsc	status,2,c
  6179  00010C  0012               	return	
  6180  00010E  D7E6               	goto	l2202
  6181  000110                     __end_of_LCD_String:
  6182                           	opt stack 0
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           intcon	equ	0xFF2
  6190                           postinc0	equ	0xFEE
  6191                           wreg	equ	0xFE8
  6192                           indf1	equ	0xFE7
  6193                           fsr1h	equ	0xFE2
  6194                           fsr1l	equ	0xFE1
  6195                           indf2	equ	0xFDF
  6196                           postinc2	equ	0xFDE
  6197                           postdec2	equ	0xFDD
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _SendLCD *****************
  6203 ;; Defined at:
  6204 ;;		line 27 in file "LCD.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  Byte            1    wreg     unsigned char 
  6207 ;;  type            1   39[COMRAM] unsigned char 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  Byte            1   40[COMRAM] unsigned char 
  6210 ;; Return value:  Size  Location     Type
  6211 ;;		None               void
  6212 ;; Registers used:
  6213 ;;		wreg, status,2, status,0, cstack
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6219 ;;      Params:         1       0       0       0
  6220 ;;      Locals:         1       0       0       0
  6221 ;;      Temps:          0       0       0       0
  6222 ;;      Totals:         2       0       0       0
  6223 ;;Total ram usage:        2 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    5
  6226 ;; This function calls:
  6227 ;;		_LCDout
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;;		_initLCD
  6231 ;;		_SetLine
  6232 ;;		_LCD_String
  6233 ;;		_ScanIR
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           	psect	text25
  6238  000172                     __ptext25:
  6239                           	opt stack 0
  6240  000172                     _SendLCD:
  6241                           	opt stack 24
  6242                           
  6243                           ;incstack = 0
  6244                           ;SendLCD@Byte stored from wreg
  6245  000172  6E29               	movwf	SendLCD@Byte,c
  6246                           
  6247                           ;LCD.c: 30: LATAbits.LATA6=type;
  6248  000174  B028               	btfsc	SendLCD@type,0,c
  6249  000176  D002               	bra	u1355
  6250  000178  9C89               	bcf	3977,6,c	;volatile
  6251  00017A  D001               	bra	u1356
  6252  00017C                     u1355:
  6253  00017C  8C89               	bsf	3977,6,c	;volatile
  6254  00017E                     u1356:
  6255                           
  6256                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6257  00017E  3829               	swapf	SendLCD@Byte,w,c
  6258  000180  0B0F               	andlw	15
  6259  000182  0B0F               	andlw	15
  6260  000184  ECFD  F00A         	call	_LCDout
  6261                           
  6262                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6263  000188  0E06               	movlw	6
  6264  00018A                     u3117:
  6265  00018A  2EE8               	decfsz	wreg,f,c
  6266  00018C  D7FE               	goto	u3117
  6267  00018E  D000               	nop2		;nop
  6268                           
  6269                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6270  000190  5029               	movf	SendLCD@Byte,w,c
  6271  000192  0B0F               	andlw	15
  6272  000194  ECFD  F00A         	call	_LCDout
  6273                           
  6274                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6275  000198  0E21               	movlw	33
  6276  00019A                     u3127:
  6277  00019A  2EE8               	decfsz	wreg,f,c
  6278  00019C  D7FE               	goto	u3127
  6279  00019E  F000               	nop	
  6280  0001A0  0012               	return		;funcret
  6281  0001A2                     __end_of_SendLCD:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           indf1	equ	0xFE7
  6293                           fsr1h	equ	0xFE2
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function _LCDout *****************
  6303 ;; Defined at:
  6304 ;;		line 14 in file "LCD.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  number          1    wreg     unsigned char 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  number          1   38[COMRAM] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6318 ;;      Params:         0       0       0       0
  6319 ;;      Locals:         1       0       0       0
  6320 ;;      Temps:          3       0       0       0
  6321 ;;      Totals:         4       0       0       0
  6322 ;;Total ram usage:        4 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    4
  6325 ;; This function calls:
  6326 ;;		_E_TOG
  6327 ;; This function is called by:
  6328 ;;		_SendLCD
  6329 ;;		_initLCD
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text26
  6334  0015FA                     __ptext26:
  6335                           	opt stack 0
  6336  0015FA                     _LCDout:
  6337                           	opt stack 24
  6338                           
  6339                           ;incstack = 0
  6340                           ;LCDout@number stored from wreg
  6341  0015FA  6E27               	movwf	LCDout@number,c
  6342                           
  6343                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6344  0015FC  5027               	movf	LCDout@number,w,c
  6345  0015FE  6E24               	movwf	??_LCDout& (0+255),c
  6346  001600  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6347  001602  0E07               	movlw	7
  6348  001604                     u1245:
  6349  001604  90D8               	bcf	status,0,c
  6350  001606  3624               	rlcf	??_LCDout,f,c
  6351  001608  3625               	rlcf	??_LCDout+1,f,c
  6352  00160A  2EE8               	decfsz	wreg,f,c
  6353  00160C  D7FB               	goto	u1245
  6354  00160E  0E07               	movlw	7
  6355  001610  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6356  001612                     u1255:
  6357  001612  3425               	rlcf	??_LCDout+1,w,c
  6358  001614  3225               	rrcf	??_LCDout+1,f,c
  6359  001616  3224               	rrcf	??_LCDout,f,c
  6360  001618  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6361  00161A  D7FB               	goto	u1255
  6362  00161C  4624               	rlncf	??_LCDout,f,c
  6363  00161E  508B               	movf	3979,w,c	;volatile
  6364  001620  1824               	xorwf	??_LCDout,w,c
  6365  001622  0BFD               	andlw	-3
  6366  001624  1824               	xorwf	??_LCDout,w,c
  6367  001626  6E8B               	movwf	3979,c	;volatile
  6368                           
  6369                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6370  001628  5027               	movf	LCDout@number,w,c
  6371  00162A  6E24               	movwf	??_LCDout& (0+255),c
  6372  00162C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6373  00162E  0E06               	movlw	6
  6374  001630                     u1265:
  6375  001630  90D8               	bcf	status,0,c
  6376  001632  3624               	rlcf	??_LCDout,f,c
  6377  001634  3625               	rlcf	??_LCDout+1,f,c
  6378  001636  2EE8               	decfsz	wreg,f,c
  6379  001638  D7FB               	goto	u1265
  6380  00163A  0E07               	movlw	7
  6381  00163C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6382  00163E                     u1275:
  6383  00163E  3425               	rlcf	??_LCDout+1,w,c
  6384  001640  3225               	rrcf	??_LCDout+1,f,c
  6385  001642  3224               	rrcf	??_LCDout,f,c
  6386  001644  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6387  001646  D7FB               	goto	u1275
  6388  001648  4624               	rlncf	??_LCDout,f,c
  6389  00164A  4624               	rlncf	??_LCDout,f,c
  6390  00164C  508B               	movf	3979,w,c	;volatile
  6391  00164E  1824               	xorwf	??_LCDout,w,c
  6392  001650  0BFB               	andlw	-5
  6393  001652  1824               	xorwf	??_LCDout,w,c
  6394  001654  6E8B               	movwf	3979,c	;volatile
  6395                           
  6396                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6397  001656  5027               	movf	LCDout@number,w,c
  6398  001658  6E24               	movwf	??_LCDout& (0+255),c
  6399  00165A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6400  00165C  0E05               	movlw	5
  6401  00165E                     u1285:
  6402  00165E  90D8               	bcf	status,0,c
  6403  001660  3624               	rlcf	??_LCDout,f,c
  6404  001662  3625               	rlcf	??_LCDout+1,f,c
  6405  001664  2EE8               	decfsz	wreg,f,c
  6406  001666  D7FB               	goto	u1285
  6407  001668  0E07               	movlw	7
  6408  00166A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6409  00166C                     u1295:
  6410  00166C  3425               	rlcf	??_LCDout+1,w,c
  6411  00166E  3225               	rrcf	??_LCDout+1,f,c
  6412  001670  3224               	rrcf	??_LCDout,f,c
  6413  001672  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6414  001674  D7FB               	goto	u1295
  6415  001676  508C               	movf	3980,w,c	;volatile
  6416  001678  1824               	xorwf	??_LCDout,w,c
  6417  00167A  0BFE               	andlw	-2
  6418  00167C  1824               	xorwf	??_LCDout,w,c
  6419  00167E  6E8C               	movwf	3980,c	;volatile
  6420                           
  6421                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6422  001680  5027               	movf	LCDout@number,w,c
  6423  001682  6E24               	movwf	??_LCDout& (0+255),c
  6424  001684  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6425  001686  3A24               	swapf	??_LCDout,f,c
  6426  001688  3A25               	swapf	??_LCDout+1,f,c
  6427  00168A  0EF0               	movlw	240
  6428  00168C  1625               	andwf	??_LCDout+1,f,c
  6429  00168E  5024               	movf	??_LCDout,w,c
  6430  001690  0B0F               	andlw	15
  6431  001692  1225               	iorwf	??_LCDout+1,f,c
  6432  001694  0EF0               	movlw	240
  6433  001696  1624               	andwf	??_LCDout,f,c
  6434  001698  0E07               	movlw	7
  6435  00169A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6436  00169C                     u1305:
  6437  00169C  3425               	rlcf	??_LCDout+1,w,c
  6438  00169E  3225               	rrcf	??_LCDout+1,f,c
  6439  0016A0  3224               	rrcf	??_LCDout,f,c
  6440  0016A2  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6441  0016A4  D7FB               	goto	u1305
  6442  0016A6  4624               	rlncf	??_LCDout,f,c
  6443  0016A8  508C               	movf	3980,w,c	;volatile
  6444  0016AA  1824               	xorwf	??_LCDout,w,c
  6445  0016AC  0BFD               	andlw	-3
  6446  0016AE  1824               	xorwf	??_LCDout,w,c
  6447  0016B0  6E8C               	movwf	3980,c	;volatile
  6448                           
  6449                           ;LCD.c: 21: E_TOG();
  6450  0016B2  EC2B  F001         	call	_E_TOG	;wreg free
  6451                           
  6452                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6453  0016B6  0E03               	movlw	3
  6454  0016B8                     u3137:
  6455  0016B8  2EE8               	decfsz	wreg,f,c
  6456  0016BA  D7FE               	goto	u3137
  6457  0016BC  F000               	nop	
  6458  0016BE  0012               	return		;funcret
  6459  0016C0                     __end_of_LCDout:
  6460                           	opt stack 0
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           intcon	equ	0xFF2
  6468                           postinc0	equ	0xFEE
  6469                           wreg	equ	0xFE8
  6470                           indf1	equ	0xFE7
  6471                           fsr1h	equ	0xFE2
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _E_TOG *****************
  6481 ;; Defined at:
  6482 ;;		line 5 in file "LCD.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		wreg
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6496 ;;      Params:         0       0       0       0
  6497 ;;      Locals:         0       0       0       0
  6498 ;;      Temps:          0       0       0       0
  6499 ;;      Totals:         0       0       0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    3
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_LCDout
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text27
  6511  000256                     __ptext27:
  6512                           	opt stack 0
  6513  000256                     _E_TOG:
  6514                           	opt stack 24
  6515                           
  6516                           ;LCD.c: 8: LATCbits.LATC0=1;
  6517                           
  6518                           ;incstack = 0
  6519  000256  808B               	bsf	3979,0,c	;volatile
  6520                           
  6521                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6522  000258  0E03               	movlw	3
  6523  00025A                     u3147:
  6524  00025A  2EE8               	decfsz	wreg,f,c
  6525  00025C  D7FE               	goto	u3147
  6526  00025E  F000               	nop	
  6527                           
  6528                           ;LCD.c: 10: LATCbits.LATC0=0;
  6529  000260  908B               	bcf	3979,0,c	;volatile
  6530  000262  0012               	return		;funcret
  6531  000264                     __end_of_E_TOG:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           indf1	equ	0xFE7
  6543                           fsr1h	equ	0xFE2
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           postdec2	equ	0xFDD
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function _InterruptHandlerLow *****************
  6553 ;; Defined at:
  6554 ;;		line 18 in file "main.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6568 ;;      Params:         0       0       0       0
  6569 ;;      Locals:         0       0       0       0
  6570 ;;      Temps:         17       0       0       0
  6571 ;;      Totals:        17       0       0       0
  6572 ;;Total ram usage:       17 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    2
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		Interrupt level 1
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	intcodelo
  6583  000018                     __pintcodelo:
  6584                           	opt stack 0
  6585  000018                     _InterruptHandlerLow:
  6586                           	opt stack 23
  6587                           
  6588                           ;incstack = 0
  6589  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6590  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6591  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6592  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6593  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6594  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6595  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6596  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6597  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6598  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6599  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6600  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6601  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6602  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6603  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6604  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6605  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6606  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6607                           
  6608                           ;main.c: 20: if (PIR1bits.RCIF) {
  6609  00005E  AA9E               	btfss	3998,5,c	;volatile
  6610  000060  D016               	goto	i1l72
  6611                           
  6612                           ;main.c: 21: ReceivedString[i]=RCREG;
  6613  000062  503A               	movf	_i,w,c	;volatile
  6614  000064  0D01               	mullw	1
  6615  000066  0EE9               	movlw	low _ReceivedString
  6616  000068  24F3               	addwf	prodl,w,c
  6617  00006A  6ED9               	movwf	fsr2l,c
  6618  00006C  0E01               	movlw	high _ReceivedString
  6619  00006E  20F4               	addwfc	prodh,w,c
  6620  000070  6EDA               	movwf	fsr2h,c
  6621  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6622                           
  6623                           ;main.c: 22: RFID_Read=1;
  6624  000076  0E01               	movlw	1
  6625  000078  0101               	movlb	1	; () banked
  6626  00007A  6FE8               	movwf	_RFID_Read& (0+255),b	;volatile
  6627                           
  6628                           ; BSR set to: 1
  6629                           ;main.c: 23: if (i==15){
  6630  00007C  0E0F               	movlw	15
  6631  00007E  183A               	xorwf	_i,w,c	;volatile
  6632  000080  A4D8               	btfss	status,2,c
  6633  000082  D003               	goto	i1l2768
  6634                           
  6635                           ; BSR set to: 1
  6636                           ;main.c: 24: i=0;
  6637  000084  0E00               	movlw	0
  6638  000086  6E3A               	movwf	_i,c	;volatile
  6639                           
  6640                           ;main.c: 25: }else{
  6641  000088  D001               	goto	i1l2770
  6642  00008A                     i1l2768:
  6643                           
  6644                           ; BSR set to: 1
  6645                           ;main.c: 26: i++;
  6646  00008A  2A3A               	incf	_i,f,c	;volatile
  6647  00008C                     i1l2770:
  6648                           
  6649                           ; BSR set to: 1
  6650                           ;main.c: 27: }
  6651                           ;main.c: 28: PIR1bits.RCIF=0;
  6652  00008C  9A9E               	bcf	3998,5,c	;volatile
  6653  00008E                     i1l72:
  6654  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6655  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6656  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6657  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6658  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6659  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6660  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6661  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6662  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6663  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6664  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6665  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6666  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6667  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6668  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6669  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6670  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6671  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6672  0000D4  0010               	retfie	
  6673  0000D6                     __end_of_InterruptHandlerLow:
  6674                           	opt stack 0
  6675                           pclatu	equ	0xFFB
  6676                           pclath	equ	0xFFA
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon	equ	0xFF2
  6684                           postinc0	equ	0xFEE
  6685                           fsr0h	equ	0xFEA
  6686                           fsr0l	equ	0xFE9
  6687                           wreg	equ	0xFE8
  6688                           indf1	equ	0xFE7
  6689                           fsr1h	equ	0xFE2
  6690                           fsr1l	equ	0xFE1
  6691                           bsr	equ	0xFE0
  6692                           indf2	equ	0xFDF
  6693                           postinc2	equ	0xFDE
  6694                           postdec2	equ	0xFDD
  6695                           fsr2h	equ	0xFDA
  6696                           fsr2l	equ	0xFD9
  6697                           status	equ	0xFD8
  6698                           
  6699 ;; *************** function _InterruptHandlerHigh *****************
  6700 ;; Defined at:
  6701 ;;		line 34 in file "main.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6715 ;;      Params:         0       0       0       0
  6716 ;;      Locals:         0       0       0       0
  6717 ;;      Temps:         14       0       0       0
  6718 ;;      Totals:        14       0       0       0
  6719 ;;Total ram usage:       14 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    1
  6722 ;; This function calls:
  6723 ;;		i2_delay_tenth_s
  6724 ;; This function is called by:
  6725 ;;		Interrupt level 2
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	intcode
  6730  000008                     __pintcode:
  6731                           	opt stack 0
  6732  000008                     _InterruptHandlerHigh:
  6733                           	opt stack 23
  6734                           
  6735                           ;incstack = 0
  6736  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6737  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6738  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6739  000012  EF62  F00C         	goto	int_func
  6740                           pclatu	equ	0xFFB
  6741                           pclath	equ	0xFFA
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           postinc0	equ	0xFEE
  6750                           fsr0h	equ	0xFEA
  6751                           fsr0l	equ	0xFE9
  6752                           wreg	equ	0xFE8
  6753                           indf1	equ	0xFE7
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           bsr	equ	0xFE0
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764                           	psect	intcode_body
  6765  0018C4                     __pintcode_body:
  6766                           	opt stack 23
  6767  0018C4                     int_func:
  6768                           	opt stack 23
  6769  0018C4  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6770  0018C8  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6771  0018CC  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6772  0018D0  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6773  0018D4  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6774  0018D8  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6775  0018DC  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6776  0018E0  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6777  0018E4  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6778  0018E8  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6779  0018EC  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6780  0018F0  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6781                           
  6782                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6783  0018F4  A2F2               	btfss	intcon,1,c	;volatile
  6784  0018F6  D00D               	goto	i2l80
  6785                           
  6786                           ;main.c: 36: if (mode==-1) {
  6787  0018F8  283B               	incf	_mode,w,c	;volatile
  6788  0018FA  A4D8               	btfss	status,2,c
  6789  0018FC  D003               	goto	i2l2778
  6790                           
  6791                           ;main.c: 38: mode=1;
  6792  0018FE  0E01               	movlw	1
  6793  001900  6E3B               	movwf	_mode,c	;volatile
  6794                           
  6795                           ;main.c: 39: } else if (mode==0) {
  6796  001902  D003               	goto	i2l2782
  6797  001904                     i2l2778:
  6798  001904  503B               	movf	_mode,w,c	;volatile
  6799  001906  A4D8               	btfss	status,2,c
  6800                           
  6801                           ;main.c: 43: mode=-1;
  6802                           
  6803                           ;main.c: 41: } else {
  6804  001908  683B               	setf	_mode,c	;volatile
  6805  00190A                     i2l2782:
  6806                           
  6807                           ;main.c: 44: }
  6808                           ;main.c: 46: delay_tenth_s(2);
  6809  00190A  0E02               	movlw	2
  6810  00190C  EC64  F00E         	call	i2_delay_tenth_s
  6811                           
  6812                           ;main.c: 47: INTCONbits.INT0IF=0;
  6813  001910  92F2               	bcf	intcon,1,c	;volatile
  6814  001912                     i2l80:
  6815  001912  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6816  001916  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6817  00191A  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6818  00191E  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6819  001922  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6820  001926  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6821  00192A  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6822  00192E  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6823  001932  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6824  001936  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6825  00193A  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6826  00193E  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6827  001942  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6828  001946  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6829  00194A  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6830  00194C  0011               	retfie		f
  6831  00194E                     __end_of_InterruptHandlerHigh:
  6832                           	opt stack 0
  6833                           pclatu	equ	0xFFB
  6834                           pclath	equ	0xFFA
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           postinc0	equ	0xFEE
  6843                           fsr0h	equ	0xFEA
  6844                           fsr0l	equ	0xFE9
  6845                           wreg	equ	0xFE8
  6846                           indf1	equ	0xFE7
  6847                           fsr1h	equ	0xFE2
  6848                           fsr1l	equ	0xFE1
  6849                           bsr	equ	0xFE0
  6850                           indf2	equ	0xFDF
  6851                           postinc2	equ	0xFDE
  6852                           postdec2	equ	0xFDD
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function i2_delay_tenth_s *****************
  6858 ;; Defined at:
  6859 ;;		line 29 in file "Movement.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  tenth_second    1    wreg     unsigned char 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6864 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6865 ;; Return value:  Size  Location     Type
  6866 ;;		None               void
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6874 ;;      Params:         0       0       0       0
  6875 ;;      Locals:         3       0       0       0
  6876 ;;      Temps:          1       0       0       0
  6877 ;;      Totals:         4       0       0       0
  6878 ;;Total ram usage:        4 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_InterruptHandlerHigh
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           	psect	text30
  6888  001CC8                     __ptext30:
  6889                           	opt stack 0
  6890  001CC8                     i2_delay_tenth_s:
  6891                           	opt stack 23
  6892                           
  6893                           ;incstack = 0
  6894                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6895  001CC8  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6896                           
  6897                           ;Movement.c: 30: unsigned int i=0;
  6898  001CCA  0E00               	movlw	0
  6899  001CCC  6E04               	movwf	i2delay_tenth_s@i+1,c
  6900  001CCE  0E00               	movlw	0
  6901  001CD0  6E03               	movwf	i2delay_tenth_s@i,c
  6902                           
  6903                           ;Movement.c: 31: for (i=1; i<=tenth_seconds*2; i++) {
  6904  001CD2  0E00               	movlw	0
  6905  001CD4  6E04               	movwf	i2delay_tenth_s@i+1,c
  6906  001CD6  0E01               	movlw	1
  6907  001CD8  6E03               	movwf	i2delay_tenth_s@i,c
  6908  001CDA  D009               	goto	i2l2756
  6909  001CDC                     i2l2752:
  6910                           
  6911                           ;Movement.c: 33: _delay((unsigned long)((50)*(8000000/4000.0)));
  6912  001CDC  0E82               	movlw	130
  6913  001CDE  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6914  001CE0  0EDE               	movlw	222
  6915  001CE2                     i2u315_47:
  6916  001CE2  2EE8               	decfsz	wreg,f,c
  6917  001CE4  D7FE               	goto	i2u315_47
  6918  001CE6  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6919  001CE8  D7FC               	goto	i2u315_47
  6920  001CEA  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6921  001CEC  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6922  001CEE                     i2l2756:
  6923  001CEE  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6924  001CF0  0D02               	mullw	2
  6925  001CF2  5003               	movf	i2delay_tenth_s@i,w,c
  6926  001CF4  5CF3               	subwf	prodl,w,c
  6927  001CF6  5004               	movf	i2delay_tenth_s@i+1,w,c
  6928  001CF8  58F4               	subwfb	prodh,w,c
  6929  001CFA  A0D8               	btfss	status,0,c
  6930  001CFC  0012               	return	
  6931  001CFE  D7EE               	goto	i2l2752
  6932  001D00                     __end_ofi2_delay_tenth_s:
  6933                           	opt stack 0
  6934                           pclatu	equ	0xFFB
  6935                           pclath	equ	0xFFA
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           postinc0	equ	0xFEE
  6944                           fsr0h	equ	0xFEA
  6945                           fsr0l	equ	0xFE9
  6946                           wreg	equ	0xFE8
  6947                           indf1	equ	0xFE7
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           bsr	equ	0xFE0
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           pclatu	equ	0xFFB
  6958                           pclath	equ	0xFFA
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           postinc0	equ	0xFEE
  6967                           fsr0h	equ	0xFEA
  6968                           fsr0l	equ	0xFE9
  6969                           wreg	equ	0xFE8
  6970                           indf1	equ	0xFE7
  6971                           fsr1h	equ	0xFE2
  6972                           fsr1l	equ	0xFE1
  6973                           bsr	equ	0xFE0
  6974                           indf2	equ	0xFDF
  6975                           postinc2	equ	0xFDE
  6976                           postdec2	equ	0xFDD
  6977                           fsr2h	equ	0xFDA
  6978                           fsr2l	equ	0xFD9
  6979                           status	equ	0xFD8
  6980                           
  6981                           	psect	rparam
  6982  0000                     pclatu	equ	0xFFB
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           postinc0	equ	0xFEE
  6992                           fsr0h	equ	0xFEA
  6993                           fsr0l	equ	0xFE9
  6994                           wreg	equ	0xFE8
  6995                           indf1	equ	0xFE7
  6996                           fsr1h	equ	0xFE2
  6997                           fsr1l	equ	0xFE1
  6998                           bsr	equ	0xFE0
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006                           	psect	temp
  7007  00003C                     btemp:
  7008                           	opt stack 0
  7009  00003C                     	ds	1
  7010  0000                     int$flags	set	btemp
  7011                           pclatu	equ	0xFFB
  7012                           pclath	equ	0xFFA
  7013                           tblptru	equ	0xFF8
  7014                           tblptrh	equ	0xFF7
  7015                           tblptrl	equ	0xFF6
  7016                           tablat	equ	0xFF5
  7017                           prodh	equ	0xFF4
  7018                           prodl	equ	0xFF3
  7019                           intcon	equ	0xFF2
  7020                           postinc0	equ	0xFEE
  7021                           fsr0h	equ	0xFEA
  7022                           fsr0l	equ	0xFE9
  7023                           wreg	equ	0xFE8
  7024                           indf1	equ	0xFE7
  7025                           fsr1h	equ	0xFE2
  7026                           fsr1l	equ	0xFE1
  7027                           bsr	equ	0xFE0
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8


Data Sizes:
    Strings     93
    Constant    16
    Data        0
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     68      84
    BANK1           256    232     249
    BANK2           239      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 18
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[18]), STR_2(CODE[15]), 
		 -> STR_1(CODE[14]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S350DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S350DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnRight->_stop
    _turnLeft->_fullSpeedAhead
    _turnLeft->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               234   234      0   92577
                                             66 BANK0      2     2      0
                                              0 BANK1    232   232      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3938
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       24    17      7   34457
                                             10 BANK0     24    17      7
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              56    46     10   36364
                                             10 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4   10956
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   11726
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6494
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3660
                                             56 COMRAM     1     1      0
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2334
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1177
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    17      8    1182
                                             47 COMRAM     9     1      8
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1415
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E8      F9       7       97.3%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     44      54       4       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     188       5        0.0%
DATA                 0      0     188      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Mar 17 19:49:01 2018

                   ?_grabRightIR 0024                                _i 003A  
                             l83 0B5C                     ___awdiv@sign 002F  
                             bsr 000FE0              ___wmul@multiplicand 0026  
                    main@Message 01C8                      ?_LCD_String 002A  
                            l147 159C                              l177 1B08  
                            l841 1B6E                              l851 1C4C  
                    grabLeftIR@i 002B                              prod 000FF3  
                            wreg 000FE8                     main@MoveTime 0164  
                   main@MoveType 0100                             l3000 1990  
                           l2202 00DC                             l3010 19B0  
                           l3002 1994                             l2300 1436  
                           l2150 1B3C                             l2310 14B2  
                           l3014 19BA                             l2208 00FC  
                           l2224 1A54                             l2240 19E2  
                           l2152 1B44                             l3040 1862  
                           l3032 1832                             l2234 1A98  
                           l2250 1A26                             l2162 1B64  
                           l2154 1B48                             l2170 1C22  
                           l2306 148C                             l3018 19C8  
                           l2228 1A5C                             l2244 19EA  
                           l2172 1C2A                             l2308 1498  
                           l3028 1574                             l3036 184A  
                           l3220 08D6                             l3212 081E  
                           l2174 1C2E                             l2262 137A  
                           l3062 1AE8                             l3054 1AB8  
                           l3046 1882                             l2184 1CA4  
                           l2280 13DE                             l2256 135E  
                           l3152 05AC                             l3144 0510  
                           l2194 0156                             l2178 1C42  
                           l3058 1AD0                             l2188 1CB6  
                           l2292 1414                             l2268 13A8  
                           l3412 1348                             l3332 10F4  
                           l3260 099E                             l3244 094A  
                           l3228 08EC                             l3148 055E  
                           l3500 0C7E                             l2198 0168  
                           l2278 13D8                             l3350 1178  
                           l3238 0946                             l3190 0726  
                           l2382 01E0                             l3510 0D12  
                           l3408 131E                             l3416 134C  
                           l3272 0A34                             l3184 0722  
                           l3176 06DC                             l3168 0624  
                           l2298 1430                             l3338 10F8  
                           l2730 17D4                             l3514 0D20  
                           l3506 0CC4                             l3372 1228  
                           l3540 0DEE                             l3532 0DA8  
                           l3390 12AC                             l3358 1180  
                           l3278 0A38                             l3198 07DE  
                           l3294 0AC0                             l2742 182C  
                           l2734 17DC                             l3550 0E14  
                           l3518 0D36                             l3454 0B62  
                           l3368 11FE                             l3376 122C  
                           l3544 0DF8                             l3528 0D9E  
                           l3552 0E1A                             l3560 0E76  
                           l3472 0BD2                             l3570 0ECE  
                           l3538 0DE8                             l3572 0ED4  
                           l3398 12B4                             l3488 0C1A  
                           l3592 0F44                             l3588 0F42  
                           l2992 1972                             l2986 1962  
                           l2998 1988                             STR_1 0354  
                           STR_2 0345                             STR_3 0311  
                           STR_4 0334                             STR_5 0323  
                           STR_6 0362                             u1305 169C  
                           u1245 1604                             _LATB 000F8A  
                           u1255 1612                             u3007 1762  
                           u2304 1534                             u1265 1630  
                           u2305 1530                             u3017 1774  
                           u2314 1590                             u1275 163E  
                           u1355 017C                             u3107 00F6  
                           u1515 1A64                             u2315 158C  
                           u3027 0FAA                             u1356 017E  
                           u1285 165E                             u3117 018A  
                           u2325 15EA                             u3037 0FC2  
                           u1295 166C                             u3127 019A  
                           u3047 187C                             u3137 16B8  
                           u1545 19F2                             u3057 1B02  
                           u3147 025A                             u3067 1A1A  
                           u3077 1A8C                             u3087 1CAA  
                           u1655 01DC                             u1656 01DE  
                           u3097 016A                             u1675 01EE  
                           u1676 01F0                             u2907 0EE0  
                           u2780 0D68                             u2917 0EF8  
                           u2790 0D7C                             u2782 0D6A  
                           u2927 16D2                             u2792 0D7E  
                           u2937 16E8                             u2947 16F8  
                           u2957 1706                             u2967 1714  
                           u2887 0B8A                             i1l72 008E  
                           u2977 1726                             u2897 0BA2  
                           u2987 1738                             u2997 174E  
                           i2l80 1912                       ScanIR@Move 006E  
                           _main 0AC4                             _mode 003B  
                  main@ScanAngle 01D2                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             indf1 000FE7  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 003C  
                           _stop 1830                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 00D6                     ___param_bank 000010  
                i2_delay_tenth_s 1CC8                  __end_of_SendLCD 01A2  
                __end_of_SetLine 0172               ScanWithRange@F3890 00AC  
             ScanWithRange@F3892 00B0               ScanWithRange@F3888 00A8  
                    ScanIR@F3878 00A4                            ?_main 0001  
                __end_of___awdiv 19D2                            ?_stop 0062  
                ___awdiv@divisor 002C                            _PDC0H 000F78  
                          _PDC1H 000F76                            _PDC0L 000F79  
                          _PDC1L 000F77                            _T5CON 000FB7  
                   grabRightIR@i 002B                  __end_of___lwdiv 1B78  
                __end_of___lwmod 1C56                  ___awdiv@counter 002E  
                          _RCREG 000FAE                            _E_TOG 0256  
                          _SPBRG 000FAF                            _TRISC 000F94  
                          _TXREG 000FAD                  __end_of_initLCD 177C  
                __end_of_dpowers 030B                            main@i 01D4  
                          tablat 000FF5                            status 000FD8  
            __size_of_LCD_String 0036                  __end_of_sprintf 14C0  
         __size_of_ScanWithRange 0754                  __initialization 01A2  
                   __end_of_main 0F66                     __end_of_stop 18C4  
                 delay_tenth_s@i 0026                   __CFG_OSC$IRCIO 000000  
               LCD_String@string 002A             __end_of_enableSensor 01F2  
            VerifySignal@hexByte 002D                           ??_main 00A2  
                         ??_stop 0039                    __activetblptr 000002  
                  ?_initMotorPWM 0001                           ?_E_TOG 0001  
                   ?_setMotorPWM 0032           __size_of_fullSpeedBack 003A  
               ___awdiv@dividend 002A  __end_of_DirectionFoundThreshold 030F  
                         i1l2770 008C                           i1l2768 008A  
                 __CFG_WDTEN$OFF 000000                           i2l2752 1CDC  
                         i2l2756 1CEE                           i2l2782 190A  
                         i2l2778 1904            __end_of_delay_tenth_s 1CC8  
                         _LCDout 15FA                      SendLCD@Byte 0029  
__end_of_DirectionFoundTolerance 0311                           _OSCCON 000FD3  
                         _PTCON0 000F7F                           _PTCON1 000F7E  
                         _SPBRGH 000FB0                           _PTPERH 000F7A  
                         _PTPERL 000F7B          __end_ofi2_delay_tenth_s 1D00  
                    SendLCD@type 0028                        ??_SendLCD 0029  
                         _ScanIR 0F66                        ??_SetLine 002A  
                         ___wmul 01F2                        ??___awdiv 002E  
               __end_of_initRFID 0256                        ??___lwdiv 0028  
                      ??___lwmod 002F                           _initIR 0218  
           __size_of_grabRightIR 0072                           clear_0 01A8  
                         clear_1 01B4                 ___awdiv@quotient 0030  
                         main@mL 01D6                           main@mR 01DF  
                 ??_initMotorPWM 0024                        ??_initLCD 002A  
                  _ScanWithRange 0370     i2delay_tenth_s@tenth_seconds 0002  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         stop@mL 0062                           stop@mR 0064  
                      ??_sprintf 0038                 __end_of_turnLeft 1C14  
                fullSpeedBack@mL 0066                  fullSpeedBack@mR 0068  
                     __accesstop 0060          __end_of__initialization 01BE  
                  ___rparam_used 000001                      SetLine@line 002A  
                  __end_of_E_TOG 0264                   __pcstackCOMRAM 0001  
                  _fullSpeedBack 1C56                     ??_LCD_String 002C  
                 ?_ScanWithRange 006A             VerifySignal@checksum 002C  
                        ??_E_TOG 0024    __size_of_InterruptHandlerHigh 1946  
    __end_of_InterruptHandlerLow 00D6       delay_tenth_s@tenth_seconds 0025  
                     __pbssBANK0 00A4                       __pbssBANK1 01E8  
                        ?_LCDout 0001                 ?i2_delay_tenth_s 0001  
             __end_of_LCD_String 0110                          ?_ScanIR 006A  
                 ?_fullSpeedBack 0066            __size_of_enableSensor 0026  
                        ?___wmul 0024              grabLeftIR@IR_signal 0029  
                        _CAP1CON 000F63                          _CAP2CON 000F62  
                        ?_initIR 0001          __size_of_fullSpeedAhead 0070  
                     _grabLeftIR 1A44                          _PWMCON0 000F6F  
                        _PWMCON1 000F6E                        ?_initRFID 0001  
           __size_of_setMotorPWM 013A                  __size_of_LCDout 00C6  
                   _enableSensor 01CC               __size_of_turnRight 004E  
           __end_of_initMotorPWM 0142                          _SendLCD 0172  
                        __Hparam 0000                          _SetLine 0142  
                        __Lparam 0000                  __size_of_ScanIR 03EA  
                        ___awdiv 194E                  __size_of___wmul 0026  
                        ___lwdiv 1B26                          ___lwmod 1C14  
                   __psmallconst 0300                  __size_of_initIR 0022  
                        __pcinit 01A2                  ??_ScanWithRange 0071  
                        __ramtop 0300                        ?_turnLeft 0066  
                        __ptext0 0AC4                          __ptext1 023A  
                        __ptext2 0110                          __ptext3 16C0  
                        __ptext4 0218                          __ptext5 1C56  
                        __ptext6 01CC                          __ptext7 177C  
                        __ptext8 0370                          __ptext9 0F66  
                        _initLCD 16C0                          _dpowers 0301  
                   LCDout@number 0027                    ?_VerifySignal 0024  
                        _sprintf 1350                   __pintcode_body 18C4  
           end_of_initialization 01BE               setMotorPWM@PWMduty 0060  
                     ??_initRFID 0024                    __Lmediumconst 0000  
                        int_func 18C4               ScanIR@SensorResult 009E  
                ??_fullSpeedBack 003A                        _RFID_Read 01E8  
                      _RCSTAbits 000FAB                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     ??_turnLeft 003A                __end_of_turnRight 1BC6  
                    ?_grabLeftIR 0024                        _TRISAbits 000F92  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
                 ??_VerifySignal 0026                 fullSpeedAhead@mL 0062  
               fullSpeedAhead@mR 0064                   __end_of_LCDout 16C0  
                      _TXSTAbits 000FAC                        ScanIR@buf 0076  
     ScanWithRange@MoveTimeEntry 006F                    ??_grabRightIR 0026  
                 __end_of_ScanIR 1350                   _fullSpeedAhead 1AB6  
        _DirectionFoundThreshold 030D                   _ReceivedString 01E9  
                 __end_of___wmul 0218                      _BAUDCONbits 000FAA  
        _DirectionFoundTolerance 030F                   __end_of_initIR 023A  
         __size_of_delay_tenth_s 0038              start_initialization 01A2  
             VerifySignal@Signal 0024            __size_of_initMotorPWM 0032  
                       ??_LCDout 0024     __end_of_InterruptHandlerHigh 194E  
                       ??_ScanIR 0074           __end_of_fullSpeedAhead 1B26  
            __size_of_grabLeftIR 0072                         ??___wmul 0028  
                       ??_initIR 0024              __end_of_grabRightIR 1A44  
                   _initMotorPWM 0110                      __pbssCOMRAM 003A  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
   __size_of_InterruptHandlerLow 00BE                    _delay_tenth_s 1C90  
                    sprintf@flag 0062                      sprintf@prec 0063  
              __size_of_initRFID 001C                         ?_SendLCD 0028  
                       ?_SetLine 0001                 ___lwdiv@dividend 0024  
                ?_fullSpeedAhead 0062                        __pintcode 0008  
           __end_of_VerifySignal 1830                         ?___awdiv 002A  
       __size_ofi2_delay_tenth_s 0038                         ?___lwdiv 0024  
                       ?___lwmod 002B     __end_of_ClearSignalThreshold 030D  
                    __pintcodelo 0018                         _CAP1BUFH 000F69  
                       _CAP1BUFL 000F68                         _CAP2BUFH 000F67  
                       _CAP2BUFL 000F66                         ?_initLCD 0001  
                    __smallconst 0300                   __size_of_E_TOG 000E  
              __size_of_turnLeft 004E       ScanWithRange@SensorResultC 007A  
     ScanWithRange@SensorResultL 0076       ScanWithRange@SensorResultR 007E  
                  ??_setMotorPWM 0034                 ___lwdiv@quotient 0028  
                       ?_sprintf 0030                   ?_delay_tenth_s 0001  
                 ___wmul@product 0028                         _LATAbits 000F89  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                       _LATEbits 000F8D                         _IPR1bits 000F9F  
                       _PIE1bits 000F9D                      turnRight@mL 0066  
                    turnRight@mR 0068                         i2u315_47 1CE2  
                       _PIR1bits 000F9E                         _RCONbits 000FD0  
                    _grabRightIR 19D2             grabRightIR@IR_signal 0029  
              ___wmul@multiplier 0024            __end_of_ScanWithRange 0AC4  
                   setMotorPWM@m 0032             _InterruptHandlerHigh 0008  
                       ScanIR@mL 006A                         ScanIR@mR 006C  
                   ??_grabLeftIR 0026                        _turnRight 1B78  
                 ScanIR@MoveTime 0070                   ScanIR@MoveType 0072  
            __end_of_setMotorPWM 15FA                         __Hrparam 0000  
               __size_of_SendLCD 0030                         __Lrparam 0000  
          __end_of_fullSpeedBack 1C90                 __size_of_SetLine 0030  
             __end_of_grabLeftIR 1AB6                 __size_of___awdiv 0084  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                     _ANSEL0bits 000FB8            ?_InterruptHandlerHigh 0001  
              ??i2_delay_tenth_s 0001                       sprintf@val 0064  
               __size_of_initLCD 00BC                  ___lwdiv@divisor 0026  
                ___lwdiv@counter 002A                       ?_turnRight 0066  
                       __ptext10 1B78                         __ptext11 1BC6  
                       __ptext20 19D2                         __ptext12 1830  
                       __ptext21 1A44                         __ptext13 1AB6  
                       __ptext30 1CC8                         __ptext22 1C90  
                       __ptext14 14C0                         __ptext23 0142  
                       __ptext15 01F2                         __ptext24 00DA  
                       __ptext16 194E                         __ptext25 0172  
                       __ptext17 1350                         __ptext26 15FA  
                       __ptext18 1C14                         __ptext27 0256  
                       __ptext19 1B26                  ??_delay_tenth_s 0024  
               __size_of_sprintf 0170                         _initRFID 023A  
           _ClearSignalThreshold 030B                    __size_of_main 04A2  
      ScanWithRange@ResultFalseC 0074               main@DirectionFound 01D3  
      ScanWithRange@ResultFalseL 0073        ScanWithRange@ResultFalseR 0075  
                  __size_of_stop 0094                       turnLeft@mL 0066  
                     turnLeft@mR 0068            __size_of_VerifySignal 00B4  
                       int$flags 003C                         main@Move 01D5  
            _InterruptHandlerLow 0018                       _LCD_String 00DA  
                       _turnLeft 1BC6                  ScanWithRange@mL 006A  
                ScanWithRange@mR 006C               enableSensor@sensor 0025  
             enableSensor@status 0024                    VerifySignal@i 002F  
                     _INTCONbits 000FF2       ScanWithRange@tenth_seconds 006E  
                    _setMotorPWM 14C0                     _VerifySignal 177C  
                       intlevel1 0000                         intlevel2 0000  
                      sprintf@ap 0060                        sprintf@sp 0030  
           ?_InterruptHandlerLow 0001                    ?_enableSensor 0024  
               ___lwmod@dividend 002B                 ??_fullSpeedAhead 0039  
                     _OSCCONbits 000FD3           ??_InterruptHandlerHigh 0005  
                       sprintf@c 0066                         sprintf@f 0032  
                ___lwmod@divisor 002D                  ___lwmod@counter 002F  
                    ??_turnRight 003A            ??_InterruptHandlerLow 0013  
                 ??_enableSensor 0025                 i2delay_tenth_s@i 0003  
