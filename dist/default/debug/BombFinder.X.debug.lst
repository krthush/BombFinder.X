

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Mar 16 19:54:03 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     _CAP1BUFH	set	3945
    32  0000                     _CAP1BUFL	set	3944
    33  0000                     _CAP1CON	set	3939
    34  0000                     _CAP2BUFH	set	3943
    35  0000                     _CAP2BUFL	set	3942
    36  0000                     _CAP2CON	set	3938
    37  0000                     _LATAbits	set	3977
    38  0000                     _LATB	set	3978
    39  0000                     _LATCbits	set	3979
    40  0000                     _LATDbits	set	3980
    41  0000                     _LATEbits	set	3981
    42  0000                     _PTCON0	set	3967
    43  0000                     _PTCON1	set	3966
    44  0000                     _PTPERH	set	3962
    45  0000                     _PTPERL	set	3963
    46  0000                     _PWMCON0	set	3951
    47  0000                     _PWMCON1	set	3950
    48  0000                     _TRISAbits	set	3986
    49  0000                     _TRISBbits	set	3987
    50  0000                     _TRISC	set	3988
    51  0000                     _TRISCbits	set	3988
    52  0000                     _TRISDbits	set	3989
    53  0000                     _TRISEbits	set	3990
    54  0000                     _PDC0H	set	3960
    55  0000                     _PDC0L	set	3961
    56  0000                     _PDC1H	set	3958
    57  0000                     _PDC1L	set	3959
    58  0000                     _ANSEL0bits	set	4024
    59  0000                     _BAUDCONbits	set	4010
    60  0000                     _IPR1bits	set	3999
    61  0000                     _OSCCON	set	4051
    62  0000                     _OSCCONbits	set	4051
    63  0000                     _PIE1bits	set	3997
    64  0000                     _PIR1bits	set	3998
    65  0000                     _RCONbits	set	4048
    66  0000                     _RCREG	set	4014
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _SPBRG	set	4015
    69  0000                     _SPBRGH	set	4016
    70  0000                     _T5CON	set	4023
    71  0000                     _TXREG	set	4013
    72  0000                     _TXSTAbits	set	4012
    73  0000                     _INTCONbits	set	4082
    74                           
    75                           ; #config settings
    76  0000                     
    77                           	psect	cinit
    78  000F5A                     __pcinit:
    79                           	opt stack 0
    80  000F5A                     start_initialization:
    81                           	opt stack 0
    82  000F5A                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (17 bytes)
    86  000F5A  EE00  F03F         	lfsr	0,__pbssCOMRAM
    87  000F5E  0E11               	movlw	17
    88  000F60                     clear_0:
    89  000F60  6AEE               	clrf	postinc0,c
    90  000F62  06E8               	decf	wreg,f,c
    91  000F64  E1FD               	bnz	clear_0
    92  000F66                     end_of_initialization:
    93                           	opt stack 0
    94  000F66                     __end_of__initialization:
    95                           	opt stack 0
    96  000F66  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    97  000F68  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    98  000F6A  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  000F6C  6EF8               	movwf	tblptru,c
   100  000F6E  0100               	movlb	0
   101  000F70  EF16  F004         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssCOMRAM
   107  00003F                     __pbssCOMRAM:
   108                           	opt stack 0
   109  00003F                     _ReceivedString:
   110                           	opt stack 0
   111  00003F                     	ds	16
   112  00004F                     _i:
   113                           	opt stack 0
   114  00004F                     	ds	1
   115                           tblptru	equ	0xFF8
   116                           postinc0	equ	0xFEE
   117                           wreg	equ	0xFE8
   118                           
   119                           	psect	cstackBANK0
   120  000060                     __pcstackBANK0:
   121                           	opt stack 0
   122  000060                     ScanWithRange@ResultFalseL:
   123                           	opt stack 0
   124                           
   125                           ; 1 bytes @ 0x0
   126  000060                     	ds	1
   127  000061                     ScanWithRange@ResultFalseC:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x1
   131  000061                     	ds	1
   132  000062                     ScanWithRange@ResultFalseR:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x2
   136  000062                     	ds	1
   137  000063                     ScanWithRange@ClearSignalTolerance:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x3
   141  000063                     	ds	2
   142  000065                     ScanWithRange@DirectionFoundLimit:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x5
   146  000065                     	ds	2
   147  000067                     ScanWithRange@DirectionFoundTolerance:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x7
   151  000067                     	ds	2
   152  000069                     ScanWithRange@SensorResultL:
   153                           	opt stack 0
   154                           
   155                           ; 4 bytes @ 0x9
   156  000069                     	ds	4
   157  00006D                     ScanWithRange@SensorResultC:
   158                           	opt stack 0
   159                           
   160                           ; 4 bytes @ 0xD
   161  00006D                     	ds	4
   162  000071                     ScanWithRange@SensorResultR:
   163                           	opt stack 0
   164                           
   165                           ; 4 bytes @ 0x11
   166  000071                     	ds	4
   167  000075                     main@test:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x15
   171  000075                     	ds	2
   172  000077                     main@i:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x17
   176  000077                     	ds	1
   177  000078                     main@ScanAngle:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x18
   181  000078                     	ds	1
   182  000079                     main@mode:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x19
   186  000079                     	ds	1
   187  00007A                     main@DirectionFound:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x1A
   191  00007A                     	ds	1
   192  00007B                     main@mL:
   193                           	opt stack 0
   194                           
   195                           ; 9 bytes @ 0x1B
   196  00007B                     	ds	9
   197  000084                     main@mR:
   198                           	opt stack 0
   199                           
   200                           ; 9 bytes @ 0x24
   201  000084                     	ds	9
   202                           tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ??_InterruptHandlerHigh:
   210  000001                     
   211                           ; 0 bytes @ 0x0
   212  000001                     	ds	14
   213  00000F                     ??_delay_s:
   214  00000F                     ??_delay_tenth_s:
   215  00000F                     ?_grabLeftIR:
   216                           	opt stack 0
   217  00000F                     ?_grabRightIR:
   218                           	opt stack 0
   219  00000F                     ?___wmul:
   220                           	opt stack 0
   221  00000F                     enableSensor@status:
   222                           	opt stack 0
   223  00000F                     ___wmul@multiplier:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0xE
   227  00000F                     	ds	1
   228  000010                     delay_s@seconds:
   229                           	opt stack 0
   230  000010                     delay_tenth_s@tenth_seconds:
   231                           	opt stack 0
   232  000010                     enableSensor@sensor:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xF
   236  000010                     	ds	1
   237  000011                     ??_grabLeftIR:
   238  000011                     ??_grabRightIR:
   239  000011                     delay_s@i:
   240                           	opt stack 0
   241  000011                     delay_tenth_s@i:
   242                           	opt stack 0
   243  000011                     ___wmul@multiplicand:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x10
   247  000011                     	ds	2
   248  000013                     ___wmul@product:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x12
   252  000013                     	ds	1
   253  000014                     grabRightIR@IR_signal:
   254                           	opt stack 0
   255  000014                     grabLeftIR@IR_signal:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x13
   259  000014                     	ds	1
   260  000015                     ?___awdiv:
   261                           	opt stack 0
   262  000015                     ___awdiv@dividend:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x14
   266  000015                     	ds	1
   267  000016                     grabRightIR@i:
   268                           	opt stack 0
   269  000016                     grabLeftIR@i:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x15
   273  000016                     	ds	1
   274  000017                     ___awdiv@divisor:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x16
   278  000017                     	ds	2
   279  000019                     ___awdiv@counter:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x18
   283  000019                     	ds	1
   284  00001A                     ___awdiv@sign:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x19
   288  00001A                     	ds	1
   289  00001B                     ___awdiv@quotient:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x1A
   293  00001B                     	ds	2
   294  00001D                     setMotorPWM@m:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x1C
   298  00001D                     	ds	2
   299  00001F                     ??_setMotorPWM:
   300                           
   301                           ; 0 bytes @ 0x1E
   302  00001F                     	ds	5
   303  000024                     setMotorPWM@PWMduty:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x23
   307  000024                     	ds	2
   308  000026                     stop@mL:
   309                           	opt stack 0
   310  000026                     fullSpeedAhead@mL:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x25
   314  000026                     	ds	2
   315  000028                     stop@mR:
   316                           	opt stack 0
   317  000028                     fullSpeedAhead@mR:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x27
   321  000028                     	ds	2
   322  00002A                     
   323                           ; 0 bytes @ 0x29
   324  00002A                     	ds	1
   325  00002B                     turnLeft@mL:
   326                           	opt stack 0
   327  00002B                     turnRight@mL:
   328                           	opt stack 0
   329  00002B                     fullSpeedBack@mL:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x2A
   333  00002B                     	ds	2
   334  00002D                     turnLeft@mR:
   335                           	opt stack 0
   336  00002D                     turnRight@mR:
   337                           	opt stack 0
   338  00002D                     fullSpeedBack@mR:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x2C
   342  00002D                     	ds	2
   343  00002F                     ScanIR@mL:
   344                           	opt stack 0
   345  00002F                     ScanWithRange@mL:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x2E
   349  00002F                     	ds	2
   350  000031                     ScanIR@mR:
   351                           	opt stack 0
   352  000031                     ScanWithRange@mR:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x30
   356  000031                     	ds	2
   357  000033                     ??_ScanIR:
   358  000033                     ScanWithRange@tenth_seconds:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x32
   362  000033                     	ds	1
   363  000034                     ??_ScanWithRange:
   364                           
   365                           ; 0 bytes @ 0x33
   366  000034                     	ds	1
   367  000035                     ScanIR@ClearSignalTolerance:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x34
   371  000035                     	ds	2
   372  000037                     ScanIR@DirectionFoundLimit:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x36
   376  000037                     	ds	2
   377  000039                     ScanIR@DirectionFoundTolerance:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x38
   381  000039                     	ds	2
   382  00003B                     ScanIR@SensorResult:
   383                           	opt stack 0
   384                           
   385                           ; 4 bytes @ 0x3A
   386  00003B                     	ds	4
   387  00003F                     tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           ; 0 bytes @ 0x3E
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 29 in file "main.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  PathTaken     100    0        unsigned char [100]
   402 ;;  Message        10    0        unsigned char [10]
   403 ;;  mR              9   36[BANK0 ] struct DC_motor
   404 ;;  mL              9   27[BANK0 ] struct DC_motor
   405 ;;  SignalStreng    3    0        unsigned char [3]
   406 ;;  test            2   21[BANK0 ] unsigned int 
   407 ;;  DirectionFou    1   26[BANK0 ] unsigned char 
   408 ;;  mode            1   25[BANK0 ] unsigned char 
   409 ;;  ScanAngle       1   24[BANK0 ] unsigned char 
   410 ;;  i               1   23[BANK0 ] unsigned char 
   411 ;; Return value:  Size  Location     Type
   412 ;;		None               void
   413 ;; Registers used:
   414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : 0/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   420 ;;      Params:         0       0       0       0
   421 ;;      Locals:         0      24       0       0
   422 ;;      Temps:          0       0       0       0
   423 ;;      Totals:         0      24       0       0
   424 ;;Total ram usage:       24 bytes
   425 ;; Hardware stack levels required when called:    6
   426 ;; This function calls:
   427 ;;		_ScanIR
   428 ;;		_ScanWithRange
   429 ;;		_delay_s
   430 ;;		_enableSensor
   431 ;;		_fullSpeedAhead
   432 ;;		_fullSpeedBack
   433 ;;		_initIR
   434 ;;		_initMotorPWM
   435 ;;		_stop
   436 ;; This function is called by:
   437 ;;		Startup code after reset
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           	psect	text0
   442  00082C                     __ptext0:
   443                           	opt stack 0
   444  00082C                     _main:
   445                           	opt stack 25
   446                           
   447                           ;main.c: 32: unsigned char Message[10];
   448                           ;main.c: 33: unsigned char i=0;
   449                           
   450                           ;incstack = 0
   451  00082C  0E00               	movlw	0
   452  00082E  0100               	movlb	0	; () banked
   453  000830  6F77               	movwf	main@i& (0+255),b
   454                           
   455                           ;main.c: 34: unsigned char mode=0;
   456  000832  0E00               	movlw	0
   457  000834  0100               	movlb	0	; () banked
   458  000836  6F79               	movwf	main@mode& (0+255),b
   459                           
   460                           ;main.c: 35: char DirectionFound=0;
   461  000838  0E00               	movlw	0
   462  00083A  0100               	movlb	0	; () banked
   463  00083C  6F7A               	movwf	main@DirectionFound& (0+255),b
   464                           
   465                           ;main.c: 36: unsigned char SignalStrength[3];
   466                           ;main.c: 37: char PathTaken[100];
   467                           ;main.c: 38: unsigned int test=0;
   468  00083E  0E00               	movlw	0
   469  000840  0100               	movlb	0	; () banked
   470  000842  6F76               	movwf	(main@test+1)& (0+255),b
   471  000844  0E00               	movlw	0
   472  000846  6F75               	movwf	main@test& (0+255),b
   473                           
   474                           ;main.c: 40: unsigned char ScanAngle=6;
   475  000848  0E06               	movlw	6
   476  00084A  0100               	movlb	0	; () banked
   477  00084C  6F78               	movwf	main@ScanAngle& (0+255),b
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 43: INTCONbits.GIEH = 1;
   481  00084E  8EF2               	bsf	intcon,7,c	;volatile
   482                           
   483                           ; BSR set to: 0
   484                           ;main.c: 44: RCONbits.IPEN = 1;
   485  000850  8ED0               	bsf	4048,7,c	;volatile
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 45: INTCONbits.GIEL = 1;
   489  000852  8CF2               	bsf	intcon,6,c	;volatile
   490                           
   491                           ; BSR set to: 0
   492                           ;main.c: 46: INTCONbits.INT0IE = 1;
   493  000854  88F2               	bsf	intcon,4,c	;volatile
   494                           
   495                           ; BSR set to: 0
   496                           ;main.c: 47: INTCONbits.PEIE = 1;
   497  000856  8CF2               	bsf	intcon,6,c	;volatile
   498                           
   499                           ; BSR set to: 0
   500                           ;main.c: 49: IPR1bits.RCIP=1;
   501  000858  8A9F               	bsf	3999,5,c	;volatile
   502                           
   503                           ; BSR set to: 0
   504                           ;main.c: 50: PIE1bits.RCIE=1;
   505  00085A  8A9D               	bsf	3997,5,c	;volatile
   506                           
   507                           ;main.c: 53: struct DC_motor mL, mR;
   508                           ;main.c: 54: mL.power=0;
   509  00085C  0E00               	movlw	0
   510  00085E  0100               	movlb	0	; () banked
   511  000860  6F7B               	movwf	main@mL& (0+255),b
   512                           
   513                           ;main.c: 55: mL.direction=1;
   514  000862  0E01               	movlw	1
   515  000864  0100               	movlb	0	; () banked
   516  000866  6F7C               	movwf	(main@mL+1)& (0+255),b
   517                           
   518                           ; BSR set to: 0
   519                           ;main.c: 56: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   520  000868  0E79               	movlw	121
   521  00086A  0100               	movlb	0	; () banked
   522  00086C  6F7D               	movwf	(main@mL+2)& (0+255),b
   523  00086E  0E0F               	movlw	15
   524  000870  0100               	movlb	0	; () banked
   525  000872  6F7E               	movwf	(main@mL+3)& (0+255),b
   526                           
   527                           ; BSR set to: 0
   528                           ;main.c: 57: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   529  000874  0E78               	movlw	120
   530  000876  0100               	movlb	0	; () banked
   531  000878  6F7F               	movwf	(main@mL+4)& (0+255),b
   532  00087A  0E0F               	movlw	15
   533  00087C  0100               	movlb	0	; () banked
   534  00087E  6F80               	movwf	(main@mL+5)& (0+255),b
   535                           
   536                           ;main.c: 58: mL.dir_pin=0;
   537  000880  0E00               	movlw	0
   538  000882  0100               	movlb	0	; () banked
   539  000884  6F81               	movwf	(main@mL+6)& (0+255),b
   540                           
   541                           ;main.c: 59: mL.PWMperiod=199;
   542  000886  0E00               	movlw	0
   543  000888  0100               	movlb	0	; () banked
   544  00088A  6F83               	movwf	(main@mL+8)& (0+255),b
   545  00088C  0EC7               	movlw	199
   546  00088E  6F82               	movwf	(main@mL+7)& (0+255),b
   547                           
   548                           ;main.c: 61: mR.power=0;
   549  000890  0E00               	movlw	0
   550  000892  0100               	movlb	0	; () banked
   551  000894  6F84               	movwf	main@mR& (0+255),b
   552                           
   553                           ;main.c: 62: mR.direction=1;
   554  000896  0E01               	movlw	1
   555  000898  0100               	movlb	0	; () banked
   556  00089A  6F85               	movwf	(main@mR+1)& (0+255),b
   557                           
   558                           ; BSR set to: 0
   559                           ;main.c: 63: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   560  00089C  0E77               	movlw	119
   561  00089E  0100               	movlb	0	; () banked
   562  0008A0  6F86               	movwf	(main@mR+2)& (0+255),b
   563  0008A2  0E0F               	movlw	15
   564  0008A4  0100               	movlb	0	; () banked
   565  0008A6  6F87               	movwf	(main@mR+3)& (0+255),b
   566                           
   567                           ; BSR set to: 0
   568                           ;main.c: 64: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   569  0008A8  0E76               	movlw	118
   570  0008AA  0100               	movlb	0	; () banked
   571  0008AC  6F88               	movwf	(main@mR+4)& (0+255),b
   572  0008AE  0E0F               	movlw	15
   573  0008B0  0100               	movlb	0	; () banked
   574  0008B2  6F89               	movwf	(main@mR+5)& (0+255),b
   575                           
   576                           ;main.c: 65: mR.dir_pin=2;
   577  0008B4  0E02               	movlw	2
   578  0008B6  0100               	movlb	0	; () banked
   579  0008B8  6F8A               	movwf	(main@mR+6)& (0+255),b
   580                           
   581                           ;main.c: 66: mR.PWMperiod=199;
   582  0008BA  0E00               	movlw	0
   583  0008BC  0100               	movlb	0	; () banked
   584  0008BE  6F8C               	movwf	(main@mR+8)& (0+255),b
   585  0008C0  0EC7               	movlw	199
   586  0008C2  6F8B               	movwf	(main@mR+7)& (0+255),b
   587                           
   588                           ;main.c: 68: OSCCON = 0x72;
   589  0008C4  0E72               	movlw	114
   590  0008C6  6ED3               	movwf	4051,c	;volatile
   591  0008C8                     l55:
   592  0008C8  B4D3               	btfsc	4051,2,c	;volatile
   593  0008CA  D07B               	goto	l2663
   594  0008CC  D7FD               	goto	l55
   595  0008CE                     l2621:
   596                           
   597                           ;main.c: 76: initMotorPWM();
   598  0008CE  EC5D  F007         	call	_initMotorPWM	;wreg free
   599                           
   600                           ;main.c: 78: initIR();
   601  0008D2  EC9C  F007         	call	_initIR	;wreg free
   602                           
   603                           ;main.c: 82: fullSpeedAhead(&mL, &mR);
   604  0008D6  0E7B               	movlw	low main@mL
   605  0008D8  6E26               	movwf	fullSpeedAhead@mL,c
   606  0008DA  0E00               	movlw	high main@mL
   607  0008DC  6E27               	movwf	fullSpeedAhead@mL+1,c
   608  0008DE  0E84               	movlw	low main@mR
   609  0008E0  6E28               	movwf	fullSpeedAhead@mR,c
   610  0008E2  0E00               	movlw	high main@mR
   611  0008E4  6E29               	movwf	fullSpeedAhead@mR+1,c
   612  0008E6  EC88  F006         	call	_fullSpeedAhead	;wreg free
   613                           
   614                           ;main.c: 83: delay_s(1);
   615  0008EA  0E01               	movlw	1
   616  0008EC  EC0A  F007         	call	_delay_s
   617                           
   618                           ;main.c: 84: stop(&mL, &mR);
   619  0008F0  0E7B               	movlw	low main@mL
   620  0008F2  6E26               	movwf	stop@mL,c
   621  0008F4  0E00               	movlw	high main@mL
   622  0008F6  6E27               	movwf	stop@mL+1,c
   623  0008F8  0E84               	movlw	low main@mR
   624  0008FA  6E28               	movwf	stop@mR,c
   625  0008FC  0E00               	movlw	high main@mR
   626  0008FE  6E29               	movwf	stop@mR+1,c
   627  000900  EC88  F005         	call	_stop	;wreg free
   628                           
   629                           ;main.c: 85: fullSpeedBack(&mL, &mR);
   630  000904  0E7B               	movlw	low main@mL
   631  000906  6E2B               	movwf	fullSpeedBack@mL,c
   632  000908  0E00               	movlw	high main@mL
   633  00090A  6E2C               	movwf	fullSpeedBack@mL+1,c
   634  00090C  0E84               	movlw	low main@mR
   635  00090E  6E2D               	movwf	fullSpeedBack@mR,c
   636  000910  0E00               	movlw	high main@mR
   637  000912  6E2E               	movwf	fullSpeedBack@mR+1,c
   638  000914  EC42  F007         	call	_fullSpeedBack	;wreg free
   639                           
   640                           ;main.c: 86: delay_s(1);
   641  000918  0E01               	movlw	1
   642  00091A  EC0A  F007         	call	_delay_s
   643                           
   644                           ;main.c: 87: stop(&mL, &mR);
   645  00091E  0E7B               	movlw	low main@mL
   646  000920  6E26               	movwf	stop@mL,c
   647  000922  0E00               	movlw	high main@mL
   648  000924  6E27               	movwf	stop@mL+1,c
   649  000926  0E84               	movlw	low main@mR
   650  000928  6E28               	movwf	stop@mR,c
   651  00092A  0E00               	movlw	high main@mR
   652  00092C  6E29               	movwf	stop@mR+1,c
   653  00092E  EC88  F005         	call	_stop	;wreg free
   654                           
   655                           ;main.c: 89: enableSensor(0, 1);
   656  000932  0E01               	movlw	1
   657  000934  6E0F               	movwf	enableSensor@status,c
   658  000936  0E00               	movlw	0
   659  000938  EC76  F007         	call	_enableSensor
   660                           
   661                           ;main.c: 90: enableSensor(1, 1);
   662  00093C  0E01               	movlw	1
   663  00093E  6E0F               	movwf	enableSensor@status,c
   664  000940  0E01               	movlw	1
   665  000942  EC76  F007         	call	_enableSensor
   666  000946  D03A               	goto	l2659
   667  000948                     l2641:
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 97: if (DirectionFound==0) {
   671  000948  0100               	movlb	0	; () banked
   672  00094A  517A               	movf	main@DirectionFound& (0+255),w,b
   673  00094C  0100               	movlb	0	; () banked
   674  00094E  A4D8               	btfss	status,2,c
   675  000950  D00D               	goto	l2645
   676                           
   677                           ; BSR set to: 0
   678                           ;main.c: 99: DirectionFound = ScanWithRange(&mL, &mR, ScanAngle);
   679  000952  0E7B               	movlw	low main@mL
   680  000954  6E2F               	movwf	ScanWithRange@mL,c
   681  000956  0E00               	movlw	high main@mL
   682  000958  6E30               	movwf	ScanWithRange@mL+1,c
   683  00095A  0E84               	movlw	low main@mR
   684  00095C  6E31               	movwf	ScanWithRange@mR,c
   685  00095E  0E00               	movlw	high main@mR
   686  000960  6E32               	movwf	ScanWithRange@mR+1,c
   687  000962  C078  F033         	movff	main@ScanAngle,ScanWithRange@tenth_seconds
   688  000966  EC56  F000         	call	_ScanWithRange	;wreg free
   689  00096A  D00E               	goto	L2
   690  00096C                     l2645:
   691                           
   692                           ; BSR set to: 0
   693  00096C  0100               	movlb	0	; () banked
   694  00096E  057A               	decf	main@DirectionFound& (0+255),w,b
   695  000970  A4D8               	btfss	status,2,c
   696  000972  D00D               	goto	l2649
   697                           
   698                           ; BSR set to: 0
   699                           ;main.c: 102: DirectionFound = ScanIR(&mL, &mR);
   700  000974  0E7B               	movlw	low main@mL
   701  000976  6E2F               	movwf	ScanIR@mL,c
   702  000978  0E00               	movlw	high main@mL
   703  00097A  6E30               	movwf	ScanIR@mL+1,c
   704  00097C  0E84               	movlw	low main@mR
   705  00097E  6E31               	movwf	ScanIR@mR,c
   706  000980  0E00               	movlw	high main@mR
   707  000982  6E32               	movwf	ScanIR@mR+1,c
   708  000984  EC1A  F003         	call	_ScanIR	;wreg free
   709  000988                     L2:
   710  000988  0100               	movlb	0	; () banked
   711  00098A  6F7A               	movwf	main@DirectionFound& (0+255),b
   712                           
   713                           ;main.c: 103: } else if (DirectionFound==2) {
   714  00098C  D01A               	goto	l2663
   715  00098E                     l2649:
   716                           
   717                           ; BSR set to: 0
   718  00098E  0E02               	movlw	2
   719  000990  0100               	movlb	0	; () banked
   720  000992  197A               	xorwf	main@DirectionFound& (0+255),w,b
   721  000994  A4D8               	btfss	status,2,c
   722  000996  D015               	goto	l2663
   723                           
   724                           ; BSR set to: 0
   725                           ;main.c: 104: mode=2;
   726  000998  0E02               	movlw	2
   727  00099A  D011               	goto	L3
   728  00099C                     l2653:
   729                           
   730                           ; BSR set to: 0
   731                           ;main.c: 123: fullSpeedAhead(&mL, &mR);
   732  00099C  0E7B               	movlw	low main@mL
   733  00099E  6E26               	movwf	fullSpeedAhead@mL,c
   734  0009A0  0E00               	movlw	high main@mL
   735  0009A2  6E27               	movwf	fullSpeedAhead@mL+1,c
   736  0009A4  0E84               	movlw	low main@mR
   737  0009A6  6E28               	movwf	fullSpeedAhead@mR,c
   738  0009A8  0E00               	movlw	high main@mR
   739  0009AA  6E29               	movwf	fullSpeedAhead@mR+1,c
   740  0009AC  EC88  F006         	call	_fullSpeedAhead	;wreg free
   741                           
   742                           ;main.c: 124: delay_s(1);
   743  0009B0  0E01               	movlw	1
   744  0009B2  EC0A  F007         	call	_delay_s
   745                           
   746                           ;main.c: 125: DirectionFound=1;
   747  0009B6  0E01               	movlw	1
   748  0009B8  0100               	movlb	0	; () banked
   749  0009BA  6F7A               	movwf	main@DirectionFound& (0+255),b
   750  0009BC                     l2659:
   751                           
   752                           ; BSR set to: 0
   753                           ;main.c: 126: mode = 1;
   754  0009BC  0E01               	movlw	1
   755  0009BE                     L3:
   756  0009BE  0100               	movlb	0	; () banked
   757  0009C0  6F79               	movwf	main@mode& (0+255),b
   758  0009C2                     l2663:
   759  0009C2  0100               	movlb	0	; () banked
   760  0009C4  5179               	movf	main@mode& (0+255),w,b
   761                           
   762                           ; Switch size 1, requested type "space"
   763                           ; Number of cases is 4, Range of values is 0 to 3
   764                           ; switch strategies available:
   765                           ; Name         Instructions Cycles
   766                           ; simple_byte           13     7 (average)
   767                           ;	Chosen strategy is simple_byte
   768  0009C6  0A00               	xorlw	0	; case 0
   769  0009C8  B4D8               	btfsc	status,2,c
   770  0009CA  D781               	goto	l2621
   771  0009CC  0A01               	xorlw	1	; case 1
   772  0009CE  B4D8               	btfsc	status,2,c
   773  0009D0  D7BB               	goto	l2641
   774  0009D2  0A03               	xorlw	3	; case 2
   775  0009D4  B4D8               	btfsc	status,2,c
   776  0009D6  D7E2               	goto	l2653
   777  0009D8  0A01               	xorlw	1	; case 3
   778                           
   779                           ; BSR set to: 0
   780                           
   781                           ; BSR set to: 0
   782  0009DA  D7F3               	goto	l2663
   783  0009DC                     __end_of_main:
   784                           	opt stack 0
   785                           tblptru	equ	0xFF8
   786                           intcon	equ	0xFF2
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _initMotorPWM *****************
   792 ;; Defined at:
   793 ;;		line 4 in file "dc_motor.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;		None               void
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   807 ;;      Params:         0       0       0       0
   808 ;;      Locals:         0       0       0       0
   809 ;;      Temps:          0       0       0       0
   810 ;;      Totals:         0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text1
   822  000EBA                     __ptext1:
   823                           	opt stack 0
   824  000EBA                     _initMotorPWM:
   825                           	opt stack 29
   826                           
   827                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
   828                           
   829                           ; BSR set to: 0
   830                           ;incstack = 0
   831  000EBA  0E00               	movlw	0
   832  000EBC  6E7F               	movwf	3967,c	;volatile
   833                           
   834                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
   835  000EBE  0E80               	movlw	128
   836  000EC0  6E7E               	movwf	3966,c	;volatile
   837                           
   838                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
   839  000EC2  0E6F               	movlw	111
   840  000EC4  6E6F               	movwf	3951,c	;volatile
   841                           
   842                           ;dc_motor.c: 9: PWMCON1 = 0x00;
   843  000EC6  0E00               	movlw	0
   844  000EC8  6E6E               	movwf	3950,c	;volatile
   845                           
   846                           ;dc_motor.c: 11: PTPERL = 0b11000111;
   847  000ECA  0EC7               	movlw	199
   848  000ECC  6E7B               	movwf	3963,c	;volatile
   849                           
   850                           ;dc_motor.c: 12: PTPERH = 0b00000000;
   851  000ECE  0E00               	movlw	0
   852  000ED0  6E7A               	movwf	3962,c	;volatile
   853                           
   854                           ;dc_motor.c: 13: PDC0L = 0<<2;
   855  000ED2  0E00               	movlw	0
   856  000ED4  6E79               	movwf	3961,c	;volatile
   857                           
   858                           ;dc_motor.c: 14: PDC0H = 0>>6;
   859  000ED6  0E00               	movlw	0
   860  000ED8  6E78               	movwf	3960,c	;volatile
   861                           
   862                           ;dc_motor.c: 15: PDC1L = 0<<2;
   863  000EDA  0E00               	movlw	0
   864  000EDC  6E77               	movwf	3959,c	;volatile
   865                           
   866                           ;dc_motor.c: 16: PDC1H = 0>>6;
   867  000EDE  0E00               	movlw	0
   868  000EE0  6E76               	movwf	3958,c	;volatile
   869                           
   870                           ;dc_motor.c: 19: TRISBbits.RB0=0;
   871  000EE2  9093               	bcf	3987,0,c	;volatile
   872                           
   873                           ;dc_motor.c: 20: TRISBbits.RB1=0;
   874  000EE4  9293               	bcf	3987,1,c	;volatile
   875                           
   876                           ;dc_motor.c: 21: TRISBbits.RB2=0;
   877  000EE6  9493               	bcf	3987,2,c	;volatile
   878                           
   879                           ;dc_motor.c: 22: TRISBbits.RB3=0;
   880  000EE8  9693               	bcf	3987,3,c	;volatile
   881  000EEA  0012               	return		;funcret
   882  000EEC                     __end_of_initMotorPWM:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           intcon	equ	0xFF2
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           status	equ	0xFD8
   889                           
   890 ;; *************** function _initIR *****************
   891 ;; Defined at:
   892 ;;		line 30 in file "IR_Reading.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;		None               void
   899 ;; Registers used:
   900 ;;		wreg, status,2
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   906 ;;      Params:         0       0       0       0
   907 ;;      Locals:         0       0       0       0
   908 ;;      Temps:          0       0       0       0
   909 ;;      Totals:         0       0       0       0
   910 ;;Total ram usage:        0 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    1
   913 ;; This function calls:
   914 ;;		Nothing
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text2
   921  000F38                     __ptext2:
   922                           	opt stack 0
   923  000F38                     _initIR:
   924                           	opt stack 29
   925                           
   926                           ;IR_Reading.c: 36: LATAbits.LA2=0;
   927                           
   928                           ;incstack = 0
   929  000F38  9489               	bcf	3977,2,c	;volatile
   930                           
   931                           ;IR_Reading.c: 37: LATAbits.LA3=0;
   932  000F3A  9689               	bcf	3977,3,c	;volatile
   933                           
   934                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
   935  000F3C  8492               	bsf	3986,2,c	;volatile
   936                           
   937                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
   938  000F3E  8692               	bsf	3986,3,c	;volatile
   939                           
   940                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
   941  000F40  94B8               	bcf	4024,2,c	;volatile
   942                           
   943                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
   944  000F42  96B8               	bcf	4024,3,c	;volatile
   945                           
   946                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
   947  000F44  9CB8               	bcf	4024,6,c	;volatile
   948                           
   949                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
   950  000F46  9EB8               	bcf	4024,7,c	;volatile
   951                           
   952                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
   953  000F48  0E06               	movlw	6
   954  000F4A  6E63               	movwf	3939,c	;volatile
   955                           
   956                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
   957  000F4C  0E06               	movlw	6
   958  000F4E  6E62               	movwf	3938,c	;volatile
   959                           
   960                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
   961  000F50  9096               	bcf	3990,0,c	;volatile
   962                           
   963                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
   964  000F52  9296               	bcf	3990,1,c	;volatile
   965                           
   966                           ;IR_Reading.c: 69: T5CON=0b01011001;
   967  000F54  0E59               	movlw	89
   968  000F56  6EB7               	movwf	4023,c	;volatile
   969  000F58  0012               	return		;funcret
   970  000F5A                     __end_of_initIR:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           intcon	equ	0xFF2
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _fullSpeedBack *****************
   979 ;; Defined at:
   980 ;;		line 125 in file "dc_motor.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   983 ;;		 -> main@mL(9), 
   984 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   985 ;;		 -> main@mR(9), 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;		None               void
   990 ;; Registers used:
   991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   997 ;;      Params:         4       0       0       0
   998 ;;      Locals:         0       0       0       0
   999 ;;      Temps:          0       0       0       0
  1000 ;;      Totals:         4       0       0       0
  1001 ;;Total ram usage:        4 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; Hardware stack levels required when called:    4
  1004 ;; This function calls:
  1005 ;;		_fullSpeedAhead
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text3
  1012  000E84                     __ptext3:
  1013                           	opt stack 0
  1014  000E84                     _fullSpeedBack:
  1015                           	opt stack 26
  1016                           
  1017                           ;dc_motor.c: 128: mL->direction=0;
  1018                           
  1019                           ;incstack = 0
  1020  000E84  EE20 F001          	lfsr	2,1
  1021  000E88  502B               	movf	fullSpeedBack@mL,w,c
  1022  000E8A  26D9               	addwf	fsr2l,f,c
  1023  000E8C  502C               	movf	fullSpeedBack@mL+1,w,c
  1024  000E8E  22DA               	addwfc	fsr2h,f,c
  1025  000E90  0E00               	movlw	0
  1026  000E92  6EDF               	movwf	indf2,c
  1027                           
  1028                           ;dc_motor.c: 129: mR->direction=0;
  1029  000E94  EE20 F001          	lfsr	2,1
  1030  000E98  502D               	movf	fullSpeedBack@mR,w,c
  1031  000E9A  26D9               	addwf	fsr2l,f,c
  1032  000E9C  502E               	movf	fullSpeedBack@mR+1,w,c
  1033  000E9E  22DA               	addwfc	fsr2h,f,c
  1034  000EA0  0E00               	movlw	0
  1035  000EA2  6EDF               	movwf	indf2,c
  1036                           
  1037                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  1038  000EA4  C02B  F026         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  1039  000EA8  C02C  F027         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  1040  000EAC  C02D  F028         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  1041  000EB0  C02E  F029         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  1042  000EB4  EC88  F006         	call	_fullSpeedAhead	;wreg free
  1043  000EB8  0012               	return		;funcret
  1044  000EBA                     __end_of_fullSpeedBack:
  1045                           	opt stack 0
  1046                           tblptru	equ	0xFF8
  1047                           intcon	equ	0xFF2
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           indf2	equ	0xFDF
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055 ;; *************** function _enableSensor *****************
  1056 ;; Defined at:
  1057 ;;		line 106 in file "IR_Reading.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  sensor          1    wreg     unsigned char 
  1060 ;;  status          1   14[COMRAM] unsigned char 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  sensor          1   15[COMRAM] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;		None               void
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1072 ;;      Params:         1       0       0       0
  1073 ;;      Locals:         1       0       0       0
  1074 ;;      Temps:          0       0       0       0
  1075 ;;      Totals:         2       0       0       0
  1076 ;;Total ram usage:        2 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text4
  1087  000EEC                     __ptext4:
  1088                           	opt stack 0
  1089  000EEC                     _enableSensor:
  1090                           	opt stack 29
  1091                           
  1092                           ;incstack = 0
  1093                           ;enableSensor@sensor stored from wreg
  1094  000EEC  6E10               	movwf	enableSensor@sensor,c
  1095                           
  1096                           ;IR_Reading.c: 108: if (sensor==0){
  1097  000EEE  5010               	movf	enableSensor@sensor,w,c
  1098  000EF0  A4D8               	btfss	status,2,c
  1099  000EF2  D006               	goto	l1843
  1100                           
  1101                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  1102  000EF4  B00F               	btfsc	enableSensor@status,0,c
  1103  000EF6  D002               	bra	u1175
  1104  000EF8  908D               	bcf	3981,0,c	;volatile
  1105  000EFA  D001               	bra	u1176
  1106  000EFC                     u1175:
  1107  000EFC  808D               	bsf	3981,0,c	;volatile
  1108  000EFE                     u1176:
  1109                           
  1110                           ;IR_Reading.c: 110: } else if (sensor==1){
  1111  000EFE  0012               	return	
  1112  000F00                     l1843:
  1113  000F00  0410               	decf	enableSensor@sensor,w,c
  1114  000F02  A4D8               	btfss	status,2,c
  1115  000F04  0012               	return	
  1116                           
  1117                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  1118  000F06  B00F               	btfsc	enableSensor@status,0,c
  1119  000F08  D002               	bra	u1195
  1120  000F0A  928D               	bcf	3981,1,c	;volatile
  1121  000F0C  D001               	bra	u1196
  1122  000F0E                     u1195:
  1123  000F0E  828D               	bsf	3981,1,c	;volatile
  1124  000F10                     u1196:
  1125  000F10  0012               	return	
  1126  000F12                     __end_of_enableSensor:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           indf2	equ	0xFDF
  1133                           fsr2h	equ	0xFDA
  1134                           fsr2l	equ	0xFD9
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _delay_s *****************
  1138 ;; Defined at:
  1139 ;;		line 10 in file "Movement.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  seconds         1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  seconds         1   15[COMRAM] unsigned char 
  1144 ;;  i               2   16[COMRAM] unsigned int 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;		None               void
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1154 ;;      Params:         0       0       0       0
  1155 ;;      Locals:         3       0       0       0
  1156 ;;      Temps:          1       0       0       0
  1157 ;;      Totals:         4       0       0       0
  1158 ;;Total ram usage:        4 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text5
  1169  000E14                     __ptext5:
  1170                           	opt stack 0
  1171  000E14                     _delay_s:
  1172                           	opt stack 29
  1173                           
  1174                           ;incstack = 0
  1175                           ;delay_s@seconds stored from wreg
  1176  000E14  6E10               	movwf	delay_s@seconds,c
  1177                           
  1178                           ;Movement.c: 11: unsigned int i=0;
  1179  000E16  0E00               	movlw	0
  1180  000E18  6E12               	movwf	delay_s@i+1,c
  1181  000E1A  0E00               	movlw	0
  1182  000E1C  6E11               	movwf	delay_s@i,c
  1183                           
  1184                           ;Movement.c: 12: for (i=1; i<=seconds*20; i++) {
  1185  000E1E  0E00               	movlw	0
  1186  000E20  6E12               	movwf	delay_s@i+1,c
  1187  000E22  0E01               	movlw	1
  1188  000E24  6E11               	movwf	delay_s@i,c
  1189  000E26  D009               	goto	l1833
  1190  000E28                     l1829:
  1191                           
  1192                           ;Movement.c: 14: _delay((unsigned long)((50)*(8000000/4000.0)));
  1193  000E28  0E82               	movlw	130
  1194  000E2A  6E0F               	movwf	??_delay_s& (0+255),c
  1195  000E2C  0EDE               	movlw	222
  1196  000E2E                     u2197:
  1197  000E2E  2EE8               	decfsz	wreg,f,c
  1198  000E30  D7FE               	goto	u2197
  1199  000E32  2E0F               	decfsz	??_delay_s& (0+255),f,c
  1200  000E34  D7FC               	goto	u2197
  1201  000E36  4A11               	infsnz	delay_s@i,f,c
  1202  000E38  2A12               	incf	delay_s@i+1,f,c
  1203  000E3A                     l1833:
  1204  000E3A  5010               	movf	delay_s@seconds,w,c
  1205  000E3C  0D14               	mullw	20
  1206  000E3E  5011               	movf	delay_s@i,w,c
  1207  000E40  5CF3               	subwf	prodl,w,c
  1208  000E42  5012               	movf	delay_s@i+1,w,c
  1209  000E44  58F4               	subwfb	prodh,w,c
  1210  000E46  A0D8               	btfss	status,0,c
  1211  000E48  0012               	return	
  1212  000E4A  D7EE               	goto	l1829
  1213  000E4C                     __end_of_delay_s:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf2	equ	0xFDF
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function _ScanWithRange *****************
  1227 ;; Defined at:
  1228 ;;		line 94 in file "Movement.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1231 ;;		 -> main@mL(9), 
  1232 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1233 ;;		 -> main@mR(9), 
  1234 ;;  tenth_second    1   50[COMRAM] unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  SensorResult    4   17[BANK0 ] unsigned int [2]
  1237 ;;  SensorResult    4   13[BANK0 ] unsigned int [2]
  1238 ;;  SensorResult    4    9[BANK0 ] unsigned int [2]
  1239 ;;  DirectionFou    2    7[BANK0 ] const unsigned int 
  1240 ;;  DirectionFou    2    5[BANK0 ] const unsigned int 
  1241 ;;  ClearSignalT    2    3[BANK0 ] const unsigned int 
  1242 ;;  ResultFalseR    1    2[BANK0 ] unsigned char 
  1243 ;;  ResultFalseC    1    1[BANK0 ] unsigned char 
  1244 ;;  ResultFalseL    1    0[BANK0 ] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      unsigned char 
  1247 ;; Registers used:
  1248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1254 ;;      Params:         5       0       0       0
  1255 ;;      Locals:         0      21       0       0
  1256 ;;      Temps:          2       0       0       0
  1257 ;;      Totals:         7      21       0       0
  1258 ;;Total ram usage:       28 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    5
  1261 ;; This function calls:
  1262 ;;		___awdiv
  1263 ;;		_delay_tenth_s
  1264 ;;		_grabLeftIR
  1265 ;;		_grabRightIR
  1266 ;;		_stop
  1267 ;;		_turnLeft
  1268 ;;		_turnRight
  1269 ;; This function is called by:
  1270 ;;		_main
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text6
  1275  0000AC                     __ptext6:
  1276                           	opt stack 0
  1277  0000AC                     _ScanWithRange:
  1278                           	opt stack 25
  1279                           
  1280                           ;Movement.c: 97: unsigned int SensorResultL[2];
  1281                           ;Movement.c: 98: unsigned int SensorResultC[2];
  1282                           ;Movement.c: 99: unsigned int SensorResultR[2];
  1283                           ;Movement.c: 100: unsigned char ResultFalseL=0;
  1284                           
  1285                           ;incstack = 0
  1286  0000AC  0E00               	movlw	0
  1287  0000AE  0100               	movlb	0	; () banked
  1288  0000B0  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1289                           
  1290                           ;Movement.c: 101: unsigned char ResultFalseC=0;
  1291  0000B2  0E00               	movlw	0
  1292  0000B4  0100               	movlb	0	; () banked
  1293  0000B6  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1294                           
  1295                           ;Movement.c: 102: unsigned char ResultFalseR=0;
  1296  0000B8  0E00               	movlw	0
  1297  0000BA  0100               	movlb	0	; () banked
  1298  0000BC  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1299                           
  1300                           ;Movement.c: 105: const unsigned int ClearSignalTolerance=1000;
  1301  0000BE  0E03               	movlw	3
  1302  0000C0  0100               	movlb	0	; () banked
  1303  0000C2  6F64               	movwf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),b
  1304  0000C4  0EE8               	movlw	232
  1305  0000C6  6F63               	movwf	ScanWithRange@ClearSignalTolerance& (0+255),b
  1306                           
  1307                           ;Movement.c: 106: const unsigned int DirectionFoundLimit=2000;
  1308  0000C8  0E07               	movlw	7
  1309  0000CA  0100               	movlb	0	; () banked
  1310  0000CC  6F66               	movwf	(ScanWithRange@DirectionFoundLimit+1)& (0+255),b
  1311  0000CE  0ED0               	movlw	208
  1312  0000D0  6F65               	movwf	ScanWithRange@DirectionFoundLimit& (0+255),b
  1313                           
  1314                           ;Movement.c: 107: const unsigned int DirectionFoundTolerance=500;
  1315  0000D2  0E01               	movlw	1
  1316  0000D4  0100               	movlb	0	; () banked
  1317  0000D6  6F68               	movwf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),b
  1318  0000D8  0EF4               	movlw	244
  1319  0000DA  6F67               	movwf	ScanWithRange@DirectionFoundTolerance& (0+255),b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;Movement.c: 114: stop(mL,mR);
  1323  0000DC  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1324  0000E0  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1325  0000E4  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1326  0000E8  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1327  0000EC  EC88  F005         	call	_stop	;wreg free
  1328                           
  1329                           ;Movement.c: 115: SensorResultC[0]=grabLeftIR();
  1330  0000F0  EC4D  F006         	call	_grabLeftIR	;wreg free
  1331  0000F4  C00F  F06D         	movff	?_grabLeftIR,ScanWithRange@SensorResultC
  1332  0000F8  C010  F06E         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultC+1
  1333                           
  1334                           ;Movement.c: 116: SensorResultC[1]=grabRightIR();
  1335  0000FC  EC12  F006         	call	_grabRightIR	;wreg free
  1336  000100  C00F  F06F         	movff	?_grabRightIR,ScanWithRange@SensorResultC+2
  1337  000104  C010  F070         	movff	?_grabRightIR+1,ScanWithRange@SensorResultC+3
  1338                           
  1339                           ;Movement.c: 119: turnLeft(mL,mR);
  1340  000108  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1341  00010C  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1342  000110  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1343  000114  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1344  000118  ECE5  F006         	call	_turnLeft	;wreg free
  1345                           
  1346                           ;Movement.c: 120: delay_tenth_s(tenth_seconds);
  1347  00011C  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1348  00011E  EC26  F007         	call	_delay_tenth_s
  1349                           
  1350                           ;Movement.c: 122: stop(mL,mR);
  1351  000122  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1352  000126  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1353  00012A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1354  00012E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1355  000132  EC88  F005         	call	_stop	;wreg free
  1356                           
  1357                           ;Movement.c: 123: SensorResultL[0]=grabLeftIR();
  1358  000136  EC4D  F006         	call	_grabLeftIR	;wreg free
  1359  00013A  C00F  F069         	movff	?_grabLeftIR,ScanWithRange@SensorResultL
  1360  00013E  C010  F06A         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultL+1
  1361                           
  1362                           ;Movement.c: 124: SensorResultL[1]=grabRightIR();
  1363  000142  EC12  F006         	call	_grabRightIR	;wreg free
  1364  000146  C00F  F06B         	movff	?_grabRightIR,ScanWithRange@SensorResultL+2
  1365  00014A  C010  F06C         	movff	?_grabRightIR+1,ScanWithRange@SensorResultL+3
  1366                           
  1367                           ;Movement.c: 127: turnRight(mL,mR);
  1368  00014E  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1369  000152  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1370  000156  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1371  00015A  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1372  00015E  ECC0  F006         	call	_turnRight	;wreg free
  1373                           
  1374                           ;Movement.c: 128: delay_tenth_s(2*tenth_seconds);
  1375  000162  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1376  000164  0D02               	mullw	2
  1377  000166  50F3               	movf	prodl,w,c
  1378  000168  EC26  F007         	call	_delay_tenth_s
  1379                           
  1380                           ;Movement.c: 130: stop(mL,mR);
  1381  00016C  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1382  000170  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1383  000174  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1384  000178  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1385  00017C  EC88  F005         	call	_stop	;wreg free
  1386                           
  1387                           ;Movement.c: 131: SensorResultR[0]=grabLeftIR();
  1388  000180  EC4D  F006         	call	_grabLeftIR	;wreg free
  1389  000184  C00F  F071         	movff	?_grabLeftIR,ScanWithRange@SensorResultR
  1390  000188  C010  F072         	movff	?_grabLeftIR+1,ScanWithRange@SensorResultR+1
  1391                           
  1392                           ;Movement.c: 132: SensorResultR[1]=grabRightIR();
  1393  00018C  EC12  F006         	call	_grabRightIR	;wreg free
  1394  000190  C00F  F073         	movff	?_grabRightIR,ScanWithRange@SensorResultR+2
  1395  000194  C010  F074         	movff	?_grabRightIR+1,ScanWithRange@SensorResultR+3
  1396                           
  1397                           ;Movement.c: 143: if((SensorResultL[0]+SensorResultL[1])<ClearSignalTolerance){
  1398  000198  0100               	movlb	0	; () banked
  1399  00019A  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1400  00019C  0100               	movlb	0	; () banked
  1401  00019E  256B               	addwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1402  0001A0  6E34               	movwf	??_ScanWithRange& (0+255),c
  1403  0001A2  0100               	movlb	0	; () banked
  1404  0001A4  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1405  0001A6  0100               	movlb	0	; () banked
  1406  0001A8  216C               	addwfc	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1407  0001AA  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1408  0001AC  0100               	movlb	0	; () banked
  1409  0001AE  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1410  0001B0  5C34               	subwf	??_ScanWithRange,w,c
  1411  0001B2  0100               	movlb	0	; () banked
  1412  0001B4  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1413  0001B6  5835               	subwfb	??_ScanWithRange+1,w,c
  1414  0001B8  B0D8               	btfsc	status,0,c
  1415  0001BA  D00D               	goto	l2373
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;Movement.c: 144: SensorResultL[0]=0;
  1419  0001BC  0E00               	movlw	0
  1420  0001BE  0100               	movlb	0	; () banked
  1421  0001C0  6F6A               	movwf	(ScanWithRange@SensorResultL+1)& (0+255),b
  1422  0001C2  0E00               	movlw	0
  1423  0001C4  6F69               	movwf	ScanWithRange@SensorResultL& (0+255),b
  1424                           
  1425                           ;Movement.c: 145: SensorResultL[1]=0;
  1426  0001C6  0E00               	movlw	0
  1427  0001C8  0100               	movlb	0	; () banked
  1428  0001CA  6F6C               	movwf	(ScanWithRange@SensorResultL+3)& (0+255),b
  1429  0001CC  0E00               	movlw	0
  1430  0001CE  6F6B               	movwf	(ScanWithRange@SensorResultL+2)& (0+255),b
  1431                           
  1432                           ;Movement.c: 146: ResultFalseL=1;
  1433  0001D0  0E01               	movlw	1
  1434  0001D2  0100               	movlb	0	; () banked
  1435  0001D4  6F60               	movwf	ScanWithRange@ResultFalseL& (0+255),b
  1436  0001D6                     l2373:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;Movement.c: 147: }
  1440                           ;Movement.c: 148: if((SensorResultC[0]+SensorResultC[1])<ClearSignalTolerance){
  1441  0001D6  0100               	movlb	0	; () banked
  1442  0001D8  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1443  0001DA  0100               	movlb	0	; () banked
  1444  0001DC  256F               	addwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1445  0001DE  6E34               	movwf	??_ScanWithRange& (0+255),c
  1446  0001E0  0100               	movlb	0	; () banked
  1447  0001E2  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1448  0001E4  0100               	movlb	0	; () banked
  1449  0001E6  2170               	addwfc	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1450  0001E8  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1451  0001EA  0100               	movlb	0	; () banked
  1452  0001EC  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1453  0001EE  5C34               	subwf	??_ScanWithRange,w,c
  1454  0001F0  0100               	movlb	0	; () banked
  1455  0001F2  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1456  0001F4  5835               	subwfb	??_ScanWithRange+1,w,c
  1457  0001F6  B0D8               	btfsc	status,0,c
  1458  0001F8  D00D               	goto	l2377
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;Movement.c: 149: SensorResultC[0]=0;
  1462  0001FA  0E00               	movlw	0
  1463  0001FC  0100               	movlb	0	; () banked
  1464  0001FE  6F6E               	movwf	(ScanWithRange@SensorResultC+1)& (0+255),b
  1465  000200  0E00               	movlw	0
  1466  000202  6F6D               	movwf	ScanWithRange@SensorResultC& (0+255),b
  1467                           
  1468                           ;Movement.c: 150: SensorResultC[1]=0;
  1469  000204  0E00               	movlw	0
  1470  000206  0100               	movlb	0	; () banked
  1471  000208  6F70               	movwf	(ScanWithRange@SensorResultC+3)& (0+255),b
  1472  00020A  0E00               	movlw	0
  1473  00020C  6F6F               	movwf	(ScanWithRange@SensorResultC+2)& (0+255),b
  1474                           
  1475                           ;Movement.c: 151: ResultFalseC=1;
  1476  00020E  0E01               	movlw	1
  1477  000210  0100               	movlb	0	; () banked
  1478  000212  6F61               	movwf	ScanWithRange@ResultFalseC& (0+255),b
  1479  000214                     l2377:
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;Movement.c: 152: }
  1483                           ;Movement.c: 153: if((SensorResultR[0]+SensorResultR[1])<ClearSignalTolerance){
  1484  000214  0100               	movlb	0	; () banked
  1485  000216  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1486  000218  0100               	movlb	0	; () banked
  1487  00021A  2573               	addwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1488  00021C  6E34               	movwf	??_ScanWithRange& (0+255),c
  1489  00021E  0100               	movlb	0	; () banked
  1490  000220  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1491  000222  0100               	movlb	0	; () banked
  1492  000224  2174               	addwfc	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1493  000226  6E35               	movwf	(??_ScanWithRange+1)& (0+255),c
  1494  000228  0100               	movlb	0	; () banked
  1495  00022A  5163               	movf	ScanWithRange@ClearSignalTolerance& (0+255),w,b
  1496  00022C  5C34               	subwf	??_ScanWithRange,w,c
  1497  00022E  0100               	movlb	0	; () banked
  1498  000230  5164               	movf	(ScanWithRange@ClearSignalTolerance+1)& (0+255),w,b
  1499  000232  5835               	subwfb	??_ScanWithRange+1,w,c
  1500  000234  B0D8               	btfsc	status,0,c
  1501  000236  D00D               	goto	l2381
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;Movement.c: 154: SensorResultR[0]=0;
  1505  000238  0E00               	movlw	0
  1506  00023A  0100               	movlb	0	; () banked
  1507  00023C  6F72               	movwf	(ScanWithRange@SensorResultR+1)& (0+255),b
  1508  00023E  0E00               	movlw	0
  1509  000240  6F71               	movwf	ScanWithRange@SensorResultR& (0+255),b
  1510                           
  1511                           ;Movement.c: 155: SensorResultR[1]=0;
  1512  000242  0E00               	movlw	0
  1513  000244  0100               	movlb	0	; () banked
  1514  000246  6F74               	movwf	(ScanWithRange@SensorResultR+3)& (0+255),b
  1515  000248  0E00               	movlw	0
  1516  00024A  6F73               	movwf	(ScanWithRange@SensorResultR+2)& (0+255),b
  1517                           
  1518                           ;Movement.c: 156: ResultFalseR=1;
  1519  00024C  0E01               	movlw	1
  1520  00024E  0100               	movlb	0	; () banked
  1521  000250  6F62               	movwf	ScanWithRange@ResultFalseR& (0+255),b
  1522  000252                     l2381:
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;Movement.c: 157: }
  1526                           ;Movement.c: 159: stop(mL,mR);
  1527  000252  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1528  000256  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1529  00025A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1530  00025E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1531  000262  EC88  F005         	call	_stop	;wreg free
  1532                           
  1533                           ;Movement.c: 162: if ((ResultFalseL+ResultFalseC+ResultFalseR)==3) {
  1534  000266  0100               	movlb	0	; () banked
  1535  000268  5161               	movf	ScanWithRange@ResultFalseC& (0+255),w,b
  1536  00026A  C060  F034         	movff	ScanWithRange@ResultFalseL,??_ScanWithRange
  1537  00026E  6A35               	clrf	(??_ScanWithRange+1)& (0+255),c
  1538  000270  2634               	addwf	??_ScanWithRange,f,c
  1539  000272  0E00               	movlw	0
  1540  000274  2235               	addwfc	??_ScanWithRange+1,f,c
  1541  000276  0100               	movlb	0	; () banked
  1542  000278  5162               	movf	ScanWithRange@ResultFalseR& (0+255),w,b
  1543  00027A  2634               	addwf	??_ScanWithRange,f,c
  1544  00027C  0E00               	movlw	0
  1545  00027E  2235               	addwfc	??_ScanWithRange+1,f,c
  1546  000280  0E03               	movlw	3
  1547  000282  1834               	xorwf	??_ScanWithRange,w,c
  1548  000284  1035               	iorwf	??_ScanWithRange+1,w,c
  1549  000286  A4D8               	btfss	status,2,c
  1550  000288  D01B               	goto	l2397
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;Movement.c: 164: turnLeft(mL,mR);
  1554  00028A  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1555  00028E  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1556  000292  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1557  000296  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1558  00029A  ECE5  F006         	call	_turnLeft	;wreg free
  1559                           
  1560                           ;Movement.c: 165: delay_tenth_s(5*tenth_seconds);
  1561  00029E  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1562  0002A0  0D05               	mullw	5
  1563  0002A2  50F3               	movf	prodl,w,c
  1564  0002A4  EC26  F007         	call	_delay_tenth_s
  1565                           
  1566                           ;Movement.c: 166: stop(mL,mR);
  1567  0002A8  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1568  0002AC  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1569  0002B0  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1570  0002B4  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1571  0002B8  EC88  F005         	call	_stop	;wreg free
  1572  0002BC                     l2391:
  1573                           
  1574                           ;Movement.c: 167: return 0;
  1575  0002BC  0E00               	movlw	0
  1576  0002BE  0012               	return	
  1577  0002C0                     l2397:
  1578                           
  1579                           ;Movement.c: 170: if (((SensorResultL[0]>DirectionFoundLimit)&&(SensorResultL[1]>Directi
      +                          onFoundLimit)
  1580                           ;Movement.c: 171: &&(((SensorResultL[0]-SensorResultL[1])<DirectionFoundTolerance)
  1581                           ;Movement.c: 172: ||((SensorResultL[1]-SensorResultL[0])<DirectionFoundTolerance)))) {
  1582  0002C0  0100               	movlb	0	; () banked
  1583  0002C2  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1584  0002C4  0100               	movlb	0	; () banked
  1585  0002C6  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1586  0002C8  0100               	movlb	0	; () banked
  1587  0002CA  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1588  0002CC  0100               	movlb	0	; () banked
  1589  0002CE  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1590  0002D0  B0D8               	btfsc	status,0,c
  1591  0002D2  D053               	goto	l2417
  1592                           
  1593                           ; BSR set to: 0
  1594  0002D4  0100               	movlb	0	; () banked
  1595  0002D6  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1596  0002D8  0100               	movlb	0	; () banked
  1597  0002DA  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1598  0002DC  0100               	movlb	0	; () banked
  1599  0002DE  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1600  0002E0  0100               	movlb	0	; () banked
  1601  0002E2  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1602  0002E4  B0D8               	btfsc	status,0,c
  1603  0002E6  D049               	goto	l2417
  1604                           
  1605                           ; BSR set to: 0
  1606  0002E8  EE20  F06B         	lfsr	2,ScanWithRange@SensorResultL+2
  1607  0002EC  CFDE F034          	movff	postinc2,??_ScanWithRange
  1608  0002F0  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1609  0002F4  1E34               	comf	??_ScanWithRange,f,c
  1610  0002F6  1E35               	comf	??_ScanWithRange+1,f,c
  1611  0002F8  4A34               	infsnz	??_ScanWithRange,f,c
  1612  0002FA  2A35               	incf	??_ScanWithRange+1,f,c
  1613  0002FC  0100               	movlb	0	; () banked
  1614  0002FE  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1615  000300  2634               	addwf	??_ScanWithRange,f,c
  1616  000302  0100               	movlb	0	; () banked
  1617  000304  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1618  000306  2235               	addwfc	??_ScanWithRange+1,f,c
  1619  000308  0100               	movlb	0	; () banked
  1620  00030A  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1621  00030C  5C34               	subwf	??_ScanWithRange,w,c
  1622  00030E  0100               	movlb	0	; () banked
  1623  000310  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1624  000312  5835               	subwfb	??_ScanWithRange+1,w,c
  1625  000314  A0D8               	btfss	status,0,c
  1626  000316  D016               	goto	l2405
  1627                           
  1628                           ; BSR set to: 0
  1629  000318  C069  F034         	movff	ScanWithRange@SensorResultL,??_ScanWithRange
  1630  00031C  C06A  F035         	movff	ScanWithRange@SensorResultL+1,??_ScanWithRange+1
  1631  000320  1E34               	comf	??_ScanWithRange,f,c
  1632  000322  1E35               	comf	??_ScanWithRange+1,f,c
  1633  000324  4A34               	infsnz	??_ScanWithRange,f,c
  1634  000326  2A35               	incf	??_ScanWithRange+1,f,c
  1635  000328  0100               	movlb	0	; () banked
  1636  00032A  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1637  00032C  2634               	addwf	??_ScanWithRange,f,c
  1638  00032E  0100               	movlb	0	; () banked
  1639  000330  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1640  000332  2235               	addwfc	??_ScanWithRange+1,f,c
  1641  000334  0100               	movlb	0	; () banked
  1642  000336  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1643  000338  5C34               	subwf	??_ScanWithRange,w,c
  1644  00033A  0100               	movlb	0	; () banked
  1645  00033C  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1646  00033E  5835               	subwfb	??_ScanWithRange+1,w,c
  1647  000340  B0D8               	btfsc	status,0,c
  1648  000342  D01B               	goto	l2417
  1649  000344                     l2405:
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;Movement.c: 174: turnLeft(mL,mR);
  1653  000344  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1654  000348  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1655  00034C  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1656  000350  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1657  000354  ECE5  F006         	call	_turnLeft	;wreg free
  1658                           
  1659                           ;Movement.c: 175: delay_tenth_s(2*(tenth_seconds));
  1660  000358  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1661  00035A  0D02               	mullw	2
  1662  00035C  50F3               	movf	prodl,w,c
  1663  00035E  EC26  F007         	call	_delay_tenth_s
  1664                           
  1665                           ;Movement.c: 176: stop(mL,mR);
  1666  000362  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1667  000366  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1668  00036A  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1669  00036E  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1670  000372  EC88  F005         	call	_stop	;wreg free
  1671  000376                     l2411:
  1672                           
  1673                           ;Movement.c: 177: return 2;
  1674  000376  0E02               	movlw	2
  1675  000378  0012               	return	
  1676  00037A                     l2417:
  1677                           
  1678                           ;Movement.c: 179: &&(((SensorResultC[0]-SensorResultC[1])<DirectionFoundTolerance)
  1679                           ;Movement.c: 180: ||((SensorResultC[1]-SensorResultC[0])<DirectionFoundTolerance)))) {
  1680  00037A  0100               	movlb	0	; () banked
  1681  00037C  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1682  00037E  0100               	movlb	0	; () banked
  1683  000380  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1684  000382  0100               	movlb	0	; () banked
  1685  000384  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1686  000386  0100               	movlb	0	; () banked
  1687  000388  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1688  00038A  B0D8               	btfsc	status,0,c
  1689  00038C  D050               	goto	l2437
  1690                           
  1691                           ; BSR set to: 0
  1692  00038E  0100               	movlb	0	; () banked
  1693  000390  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1694  000392  0100               	movlb	0	; () banked
  1695  000394  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1696  000396  0100               	movlb	0	; () banked
  1697  000398  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1698  00039A  0100               	movlb	0	; () banked
  1699  00039C  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1700  00039E  B0D8               	btfsc	status,0,c
  1701  0003A0  D046               	goto	l2437
  1702                           
  1703                           ; BSR set to: 0
  1704  0003A2  EE20  F06F         	lfsr	2,ScanWithRange@SensorResultC+2
  1705  0003A6  CFDE F034          	movff	postinc2,??_ScanWithRange
  1706  0003AA  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1707  0003AE  1E34               	comf	??_ScanWithRange,f,c
  1708  0003B0  1E35               	comf	??_ScanWithRange+1,f,c
  1709  0003B2  4A34               	infsnz	??_ScanWithRange,f,c
  1710  0003B4  2A35               	incf	??_ScanWithRange+1,f,c
  1711  0003B6  0100               	movlb	0	; () banked
  1712  0003B8  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1713  0003BA  2634               	addwf	??_ScanWithRange,f,c
  1714  0003BC  0100               	movlb	0	; () banked
  1715  0003BE  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1716  0003C0  2235               	addwfc	??_ScanWithRange+1,f,c
  1717  0003C2  0100               	movlb	0	; () banked
  1718  0003C4  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1719  0003C6  5C34               	subwf	??_ScanWithRange,w,c
  1720  0003C8  0100               	movlb	0	; () banked
  1721  0003CA  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1722  0003CC  5835               	subwfb	??_ScanWithRange+1,w,c
  1723  0003CE  A0D8               	btfss	status,0,c
  1724  0003D0  D016               	goto	l2425
  1725                           
  1726                           ; BSR set to: 0
  1727  0003D2  C06D  F034         	movff	ScanWithRange@SensorResultC,??_ScanWithRange
  1728  0003D6  C06E  F035         	movff	ScanWithRange@SensorResultC+1,??_ScanWithRange+1
  1729  0003DA  1E34               	comf	??_ScanWithRange,f,c
  1730  0003DC  1E35               	comf	??_ScanWithRange+1,f,c
  1731  0003DE  4A34               	infsnz	??_ScanWithRange,f,c
  1732  0003E0  2A35               	incf	??_ScanWithRange+1,f,c
  1733  0003E2  0100               	movlb	0	; () banked
  1734  0003E4  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1735  0003E6  2634               	addwf	??_ScanWithRange,f,c
  1736  0003E8  0100               	movlb	0	; () banked
  1737  0003EA  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1738  0003EC  2235               	addwfc	??_ScanWithRange+1,f,c
  1739  0003EE  0100               	movlb	0	; () banked
  1740  0003F0  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1741  0003F2  5C34               	subwf	??_ScanWithRange,w,c
  1742  0003F4  0100               	movlb	0	; () banked
  1743  0003F6  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1744  0003F8  5835               	subwfb	??_ScanWithRange+1,w,c
  1745  0003FA  B0D8               	btfsc	status,0,c
  1746  0003FC  D018               	goto	l2437
  1747  0003FE                     l2425:
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;Movement.c: 182: turnLeft(mL,mR);
  1751  0003FE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1752  000402  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1753  000406  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1754  00040A  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1755  00040E  ECE5  F006         	call	_turnLeft	;wreg free
  1756                           
  1757                           ;Movement.c: 183: delay_tenth_s(tenth_seconds);
  1758  000412  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1759  000414  EC26  F007         	call	_delay_tenth_s
  1760                           
  1761                           ;Movement.c: 184: stop(mL,mR);
  1762  000418  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1763  00041C  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1764  000420  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1765  000424  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1766  000428  EC88  F005         	call	_stop	;wreg free
  1767  00042C  D7A4               	goto	l2411
  1768  00042E                     l2437:
  1769                           
  1770                           ;Movement.c: 187: &&(((SensorResultR[0]-SensorResultR[1])<DirectionFoundTolerance)
  1771                           ;Movement.c: 188: ||((SensorResultR[1]-SensorResultR[0])<DirectionFoundTolerance)))) {
  1772  00042E  0100               	movlb	0	; () banked
  1773  000430  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1774  000432  0100               	movlb	0	; () banked
  1775  000434  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1776  000436  0100               	movlb	0	; () banked
  1777  000438  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1778  00043A  0100               	movlb	0	; () banked
  1779  00043C  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1780  00043E  B0D8               	btfsc	status,0,c
  1781  000440  D043               	goto	l2453
  1782                           
  1783                           ; BSR set to: 0
  1784  000442  0100               	movlb	0	; () banked
  1785  000444  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1786  000446  0100               	movlb	0	; () banked
  1787  000448  5D65               	subwf	ScanWithRange@DirectionFoundLimit& (0+255),w,b
  1788  00044A  0100               	movlb	0	; () banked
  1789  00044C  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1790  00044E  0100               	movlb	0	; () banked
  1791  000450  5966               	subwfb	(ScanWithRange@DirectionFoundLimit+1)& (0+255),w,b
  1792  000452  B0D8               	btfsc	status,0,c
  1793  000454  D039               	goto	l2453
  1794                           
  1795                           ; BSR set to: 0
  1796  000456  EE20  F073         	lfsr	2,ScanWithRange@SensorResultR+2
  1797  00045A  CFDE F034          	movff	postinc2,??_ScanWithRange
  1798  00045E  CFDD F035          	movff	postdec2,??_ScanWithRange+1
  1799  000462  1E34               	comf	??_ScanWithRange,f,c
  1800  000464  1E35               	comf	??_ScanWithRange+1,f,c
  1801  000466  4A34               	infsnz	??_ScanWithRange,f,c
  1802  000468  2A35               	incf	??_ScanWithRange+1,f,c
  1803  00046A  0100               	movlb	0	; () banked
  1804  00046C  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1805  00046E  2634               	addwf	??_ScanWithRange,f,c
  1806  000470  0100               	movlb	0	; () banked
  1807  000472  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1808  000474  2235               	addwfc	??_ScanWithRange+1,f,c
  1809  000476  0100               	movlb	0	; () banked
  1810  000478  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1811  00047A  5C34               	subwf	??_ScanWithRange,w,c
  1812  00047C  0100               	movlb	0	; () banked
  1813  00047E  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1814  000480  5835               	subwfb	??_ScanWithRange+1,w,c
  1815  000482  A0D8               	btfss	status,0,c
  1816  000484  D016               	goto	l2445
  1817                           
  1818                           ; BSR set to: 0
  1819  000486  C071  F034         	movff	ScanWithRange@SensorResultR,??_ScanWithRange
  1820  00048A  C072  F035         	movff	ScanWithRange@SensorResultR+1,??_ScanWithRange+1
  1821  00048E  1E34               	comf	??_ScanWithRange,f,c
  1822  000490  1E35               	comf	??_ScanWithRange+1,f,c
  1823  000492  4A34               	infsnz	??_ScanWithRange,f,c
  1824  000494  2A35               	incf	??_ScanWithRange+1,f,c
  1825  000496  0100               	movlb	0	; () banked
  1826  000498  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1827  00049A  2634               	addwf	??_ScanWithRange,f,c
  1828  00049C  0100               	movlb	0	; () banked
  1829  00049E  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1830  0004A0  2235               	addwfc	??_ScanWithRange+1,f,c
  1831  0004A2  0100               	movlb	0	; () banked
  1832  0004A4  5167               	movf	ScanWithRange@DirectionFoundTolerance& (0+255),w,b
  1833  0004A6  5C34               	subwf	??_ScanWithRange,w,c
  1834  0004A8  0100               	movlb	0	; () banked
  1835  0004AA  5168               	movf	(ScanWithRange@DirectionFoundTolerance+1)& (0+255),w,b
  1836  0004AC  5835               	subwfb	??_ScanWithRange+1,w,c
  1837  0004AE  B0D8               	btfsc	status,0,c
  1838  0004B0  D00B               	goto	l2453
  1839  0004B2                     l2445:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;Movement.c: 190: stop(mL,mR);
  1843  0004B2  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1844  0004B6  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1845  0004BA  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1846  0004BE  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1847  0004C2  EC88  F005         	call	_stop	;wreg free
  1848  0004C6  D757               	goto	l2411
  1849  0004C8                     l2453:
  1850  0004C8  0100               	movlb	0	; () banked
  1851  0004CA  5169               	movf	ScanWithRange@SensorResultL& (0+255),w,b
  1852  0004CC  0100               	movlb	0	; () banked
  1853  0004CE  5D6B               	subwf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1854  0004D0  0100               	movlb	0	; () banked
  1855  0004D2  516A               	movf	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1856  0004D4  0100               	movlb	0	; () banked
  1857  0004D6  596C               	subwfb	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1858  0004D8  B0D8               	btfsc	status,0,c
  1859  0004DA  D01A               	goto	l2467
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;Movement.c: 196: turnLeft(mL,mR);
  1863  0004DC  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1864  0004E0  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1865  0004E4  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1866  0004E8  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1867  0004EC  ECE5  F006         	call	_turnLeft	;wreg free
  1868                           
  1869                           ;Movement.c: 197: delay_tenth_s(3*tenth_seconds);
  1870  0004F0  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1871  0004F2  0D03               	mullw	3
  1872  0004F4  50F3               	movf	prodl,w,c
  1873  0004F6  EC26  F007         	call	_delay_tenth_s
  1874                           
  1875                           ;Movement.c: 198: stop(mL,mR);
  1876  0004FA  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1877  0004FE  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1878  000502  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1879  000506  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1880  00050A  EC88  F005         	call	_stop	;wreg free
  1881  00050E  D6D6               	goto	l2391
  1882  000510                     l2467:
  1883  000510  0100               	movlb	0	; () banked
  1884  000512  5173               	movf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1885  000514  0100               	movlb	0	; () banked
  1886  000516  5D71               	subwf	ScanWithRange@SensorResultR& (0+255),w,b
  1887  000518  0100               	movlb	0	; () banked
  1888  00051A  5174               	movf	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1889  00051C  0100               	movlb	0	; () banked
  1890  00051E  5972               	subwfb	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1891  000520  B0D8               	btfsc	status,0,c
  1892  000522  D018               	goto	l2481
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;Movement.c: 202: turnRight(mL,mR);
  1896  000524  C02F  F02B         	movff	ScanWithRange@mL,turnRight@mL
  1897  000528  C030  F02C         	movff	ScanWithRange@mL+1,turnRight@mL+1
  1898  00052C  C031  F02D         	movff	ScanWithRange@mR,turnRight@mR
  1899  000530  C032  F02E         	movff	ScanWithRange@mR+1,turnRight@mR+1
  1900  000534  ECC0  F006         	call	_turnRight	;wreg free
  1901                           
  1902                           ;Movement.c: 203: delay_tenth_s(tenth_seconds);
  1903  000538  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1904  00053A  EC26  F007         	call	_delay_tenth_s
  1905                           
  1906                           ;Movement.c: 204: stop(mL,mR);
  1907  00053E  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1908  000542  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1909  000546  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1910  00054A  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1911  00054E  EC88  F005         	call	_stop	;wreg free
  1912  000552  D6B4               	goto	l2391
  1913  000554                     l2481:
  1914  000554  0100               	movlb	0	; () banked
  1915  000556  516B               	movf	(ScanWithRange@SensorResultL+2)& (0+255),w,b
  1916  000558  0100               	movlb	0	; () banked
  1917  00055A  5D69               	subwf	ScanWithRange@SensorResultL& (0+255),w,b
  1918  00055C  0100               	movlb	0	; () banked
  1919  00055E  516C               	movf	(ScanWithRange@SensorResultL+3)& (0+255),w,b
  1920  000560  0100               	movlb	0	; () banked
  1921  000562  596A               	subwfb	(ScanWithRange@SensorResultL+1)& (0+255),w,b
  1922  000564  B0D8               	btfsc	status,0,c
  1923  000566  D02F               	goto	l2497
  1924                           
  1925                           ; BSR set to: 0
  1926  000568  0100               	movlb	0	; () banked
  1927  00056A  516D               	movf	ScanWithRange@SensorResultC& (0+255),w,b
  1928  00056C  0100               	movlb	0	; () banked
  1929  00056E  5D6F               	subwf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1930  000570  0100               	movlb	0	; () banked
  1931  000572  516E               	movf	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1932  000574  0100               	movlb	0	; () banked
  1933  000576  5970               	subwfb	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1934  000578  B0D8               	btfsc	status,0,c
  1935  00057A  D025               	goto	l2497
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;Movement.c: 210: turnLeft(mL,mR);
  1939  00057C  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1940  000580  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1941  000584  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1942  000588  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1943  00058C  ECE5  F006         	call	_turnLeft	;wreg free
  1944                           
  1945                           ;Movement.c: 211: delay_tenth_s((3*tenth_seconds)/2);
  1946  000590  5033               	movf	ScanWithRange@tenth_seconds,w,c
  1947  000592  0D03               	mullw	3
  1948  000594  CFF3 F015          	movff	prodl,___awdiv@dividend
  1949  000598  CFF4 F016          	movff	prodh,___awdiv@dividend+1
  1950  00059C  0E00               	movlw	0
  1951  00059E  6E18               	movwf	___awdiv@divisor+1,c
  1952  0005A0  0E02               	movlw	2
  1953  0005A2  6E17               	movwf	___awdiv@divisor,c
  1954  0005A4  ECD0  F005         	call	___awdiv	;wreg free
  1955  0005A8  5015               	movf	?___awdiv,w,c
  1956  0005AA  EC26  F007         	call	_delay_tenth_s
  1957                           
  1958                           ;Movement.c: 212: stop(mL,mR);
  1959  0005AE  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  1960  0005B2  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  1961  0005B6  C031  F028         	movff	ScanWithRange@mR,stop@mR
  1962  0005BA  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  1963  0005BE  EC88  F005         	call	_stop	;wreg free
  1964  0005C2                     l2491:
  1965                           
  1966                           ;Movement.c: 213: return 1;
  1967  0005C2  0E01               	movlw	1
  1968  0005C4  0012               	return	
  1969  0005C6                     l2497:
  1970  0005C6  0100               	movlb	0	; () banked
  1971  0005C8  5171               	movf	ScanWithRange@SensorResultR& (0+255),w,b
  1972  0005CA  0100               	movlb	0	; () banked
  1973  0005CC  5D73               	subwf	(ScanWithRange@SensorResultR+2)& (0+255),w,b
  1974  0005CE  0100               	movlb	0	; () banked
  1975  0005D0  5172               	movf	(ScanWithRange@SensorResultR+1)& (0+255),w,b
  1976  0005D2  0100               	movlb	0	; () banked
  1977  0005D4  5974               	subwfb	(ScanWithRange@SensorResultR+3)& (0+255),w,b
  1978  0005D6  B0D8               	btfsc	status,0,c
  1979  0005D8  D02B               	goto	l2511
  1980                           
  1981                           ; BSR set to: 0
  1982  0005DA  0100               	movlb	0	; () banked
  1983  0005DC  516F               	movf	(ScanWithRange@SensorResultC+2)& (0+255),w,b
  1984  0005DE  0100               	movlb	0	; () banked
  1985  0005E0  5D6D               	subwf	ScanWithRange@SensorResultC& (0+255),w,b
  1986  0005E2  0100               	movlb	0	; () banked
  1987  0005E4  5170               	movf	(ScanWithRange@SensorResultC+3)& (0+255),w,b
  1988  0005E6  0100               	movlb	0	; () banked
  1989  0005E8  596E               	subwfb	(ScanWithRange@SensorResultC+1)& (0+255),w,b
  1990  0005EA  B0D8               	btfsc	status,0,c
  1991  0005EC  D021               	goto	l2511
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;Movement.c: 216: turnLeft(mL,mR);
  1995  0005EE  C02F  F02B         	movff	ScanWithRange@mL,turnLeft@mL
  1996  0005F2  C030  F02C         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  1997  0005F6  C031  F02D         	movff	ScanWithRange@mR,turnLeft@mR
  1998  0005FA  C032  F02E         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  1999  0005FE  ECE5  F006         	call	_turnLeft	;wreg free
  2000                           
  2001                           ;Movement.c: 217: delay_tenth_s((tenth_seconds)/2);
  2002  000602  C033  F015         	movff	ScanWithRange@tenth_seconds,___awdiv@dividend
  2003  000606  6A16               	clrf	___awdiv@dividend+1,c
  2004  000608  0E00               	movlw	0
  2005  00060A  6E18               	movwf	___awdiv@divisor+1,c
  2006  00060C  0E02               	movlw	2
  2007  00060E  6E17               	movwf	___awdiv@divisor,c
  2008  000610  ECD0  F005         	call	___awdiv	;wreg free
  2009  000614  5015               	movf	?___awdiv,w,c
  2010  000616  EC26  F007         	call	_delay_tenth_s
  2011                           
  2012                           ;Movement.c: 218: stop(mL,mR);
  2013  00061A  C02F  F026         	movff	ScanWithRange@mL,stop@mL
  2014  00061E  C030  F027         	movff	ScanWithRange@mL+1,stop@mL+1
  2015  000622  C031  F028         	movff	ScanWithRange@mR,stop@mR
  2016  000626  C032  F029         	movff	ScanWithRange@mR+1,stop@mR+1
  2017  00062A  EC88  F005         	call	_stop	;wreg free
  2018  00062E  D7C9               	goto	l2491
  2019  000630                     l2511:
  2020                           
  2021                           ;Movement.c: 220: }
  2022                           ;Movement.c: 221: }
  2023                           ;Movement.c: 222: return 0;
  2024  000630  0E00               	movlw	0
  2025  000632  0012               	return	
  2026  000634                     __end_of_ScanWithRange:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           indf2	equ	0xFDF
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _ScanIR *****************
  2042 ;; Defined at:
  2043 ;;		line 32 in file "Movement.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2046 ;;		 -> main@mL(9), 
  2047 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2048 ;;		 -> main@mR(9), 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  SensorResult    4   58[COMRAM] unsigned int [2]
  2051 ;;  DirectionFou    2   56[COMRAM] const unsigned int 
  2052 ;;  DirectionFou    2   54[COMRAM] const unsigned int 
  2053 ;;  ClearSignalT    2   52[COMRAM] const unsigned int 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      unsigned char 
  2056 ;; Registers used:
  2057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2063 ;;      Params:         4       0       0       0
  2064 ;;      Locals:        10       0       0       0
  2065 ;;      Temps:          2       0       0       0
  2066 ;;      Totals:        16       0       0       0
  2067 ;;Total ram usage:       16 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    5
  2070 ;; This function calls:
  2071 ;;		_delay_tenth_s
  2072 ;;		_grabLeftIR
  2073 ;;		_grabRightIR
  2074 ;;		_stop
  2075 ;;		_turnLeft
  2076 ;;		_turnRight
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text7
  2083  000634                     __ptext7:
  2084                           	opt stack 0
  2085  000634                     _ScanIR:
  2086                           	opt stack 25
  2087                           
  2088                           ;Movement.c: 34: unsigned int SensorResult[2];
  2089                           ;Movement.c: 36: const unsigned int ClearSignalTolerance=1000;
  2090                           
  2091                           ;incstack = 0
  2092  000634  0E03               	movlw	3
  2093  000636  6E36               	movwf	ScanIR@ClearSignalTolerance+1,c
  2094  000638  0EE8               	movlw	232
  2095  00063A  6E35               	movwf	ScanIR@ClearSignalTolerance,c
  2096                           
  2097                           ;Movement.c: 37: const unsigned int DirectionFoundLimit=2000;
  2098  00063C  0E07               	movlw	7
  2099  00063E  6E38               	movwf	ScanIR@DirectionFoundLimit+1,c
  2100  000640  0ED0               	movlw	208
  2101  000642  6E37               	movwf	ScanIR@DirectionFoundLimit,c
  2102                           
  2103                           ;Movement.c: 38: const unsigned int DirectionFoundTolerance=500;
  2104  000644  0E01               	movlw	1
  2105  000646  6E3A               	movwf	ScanIR@DirectionFoundTolerance+1,c
  2106  000648  0EF4               	movlw	244
  2107  00064A  6E39               	movwf	ScanIR@DirectionFoundTolerance,c
  2108                           
  2109                           ;Movement.c: 42: SensorResult[0]=grabLeftIR();
  2110  00064C  EC4D  F006         	call	_grabLeftIR	;wreg free
  2111  000650  C00F  F03B         	movff	?_grabLeftIR,ScanIR@SensorResult
  2112  000654  C010  F03C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  2113                           
  2114                           ;Movement.c: 43: SensorResult[1]=grabRightIR();
  2115  000658  EC12  F006         	call	_grabRightIR	;wreg free
  2116  00065C  C00F  F03D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  2117  000660  C010  F03E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  2118                           
  2119                           ;Movement.c: 44: stop(mL,mR);
  2120  000664  C02F  F026         	movff	ScanIR@mL,stop@mL
  2121  000668  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2122  00066C  C031  F028         	movff	ScanIR@mR,stop@mR
  2123  000670  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2124  000674  EC88  F005         	call	_stop	;wreg free
  2125                           
  2126                           ;Movement.c: 47: if ((SensorResult[0]+SensorResult[1])>ClearSignalTolerance) {
  2127  000678  503B               	movf	ScanIR@SensorResult,w,c
  2128  00067A  243D               	addwf	ScanIR@SensorResult+2,w,c
  2129  00067C  6E33               	movwf	??_ScanIR& (0+255),c
  2130  00067E  503C               	movf	ScanIR@SensorResult+1,w,c
  2131  000680  203E               	addwfc	ScanIR@SensorResult+3,w,c
  2132  000682  6E34               	movwf	(??_ScanIR+1)& (0+255),c
  2133  000684  5033               	movf	??_ScanIR,w,c
  2134  000686  5C35               	subwf	ScanIR@ClearSignalTolerance,w,c
  2135  000688  5034               	movf	??_ScanIR+1,w,c
  2136  00068A  5836               	subwfb	ScanIR@ClearSignalTolerance+1,w,c
  2137  00068C  B0D8               	btfsc	status,0,c
  2138  00068E  D085               	goto	l2565
  2139                           
  2140                           ;Movement.c: 50: if (((SensorResult[0]>DirectionFoundLimit)&&(SensorResult[1]>DirectionF
      +                          oundLimit)
  2141                           ;Movement.c: 51: &&(((SensorResult[0]-SensorResult[1])<DirectionFoundTolerance)
  2142                           ;Movement.c: 52: ||((SensorResult[1]-SensorResult[0])<DirectionFoundTolerance)))) {
  2143  000690  503B               	movf	ScanIR@SensorResult,w,c
  2144  000692  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2145  000694  503C               	movf	ScanIR@SensorResult+1,w,c
  2146  000696  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2147  000698  B0D8               	btfsc	status,0,c
  2148  00069A  D02E               	goto	l2539
  2149  00069C  503D               	movf	ScanIR@SensorResult+2,w,c
  2150  00069E  5C37               	subwf	ScanIR@DirectionFoundLimit,w,c
  2151  0006A0  503E               	movf	ScanIR@SensorResult+3,w,c
  2152  0006A2  5838               	subwfb	ScanIR@DirectionFoundLimit+1,w,c
  2153  0006A4  B0D8               	btfsc	status,0,c
  2154  0006A6  D028               	goto	l2539
  2155  0006A8  EE20  F03D         	lfsr	2,ScanIR@SensorResult+2
  2156  0006AC  CFDE F033          	movff	postinc2,??_ScanIR
  2157  0006B0  CFDD F034          	movff	postdec2,??_ScanIR+1
  2158  0006B4  1E33               	comf	??_ScanIR,f,c
  2159  0006B6  1E34               	comf	??_ScanIR+1,f,c
  2160  0006B8  4A33               	infsnz	??_ScanIR,f,c
  2161  0006BA  2A34               	incf	??_ScanIR+1,f,c
  2162  0006BC  503B               	movf	ScanIR@SensorResult,w,c
  2163  0006BE  2633               	addwf	??_ScanIR,f,c
  2164  0006C0  503C               	movf	ScanIR@SensorResult+1,w,c
  2165  0006C2  2234               	addwfc	??_ScanIR+1,f,c
  2166  0006C4  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2167  0006C6  5C33               	subwf	??_ScanIR,w,c
  2168  0006C8  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2169  0006CA  5834               	subwfb	??_ScanIR+1,w,c
  2170  0006CC  A0D8               	btfss	status,0,c
  2171  0006CE  D012               	goto	l2533
  2172  0006D0  C03B  F033         	movff	ScanIR@SensorResult,??_ScanIR
  2173  0006D4  C03C  F034         	movff	ScanIR@SensorResult+1,??_ScanIR+1
  2174  0006D8  1E33               	comf	??_ScanIR,f,c
  2175  0006DA  1E34               	comf	??_ScanIR+1,f,c
  2176  0006DC  4A33               	infsnz	??_ScanIR,f,c
  2177  0006DE  2A34               	incf	??_ScanIR+1,f,c
  2178  0006E0  503D               	movf	ScanIR@SensorResult+2,w,c
  2179  0006E2  2633               	addwf	??_ScanIR,f,c
  2180  0006E4  503E               	movf	ScanIR@SensorResult+3,w,c
  2181  0006E6  2234               	addwfc	??_ScanIR+1,f,c
  2182  0006E8  5039               	movf	ScanIR@DirectionFoundTolerance,w,c
  2183  0006EA  5C33               	subwf	??_ScanIR,w,c
  2184  0006EC  503A               	movf	ScanIR@DirectionFoundTolerance+1,w,c
  2185  0006EE  5834               	subwfb	??_ScanIR+1,w,c
  2186  0006F0  B0D8               	btfsc	status,0,c
  2187  0006F2  D002               	goto	l2539
  2188  0006F4                     l2533:
  2189                           
  2190                           ;Movement.c: 53: return 2;
  2191  0006F4  0E02               	movlw	2
  2192  0006F6  0012               	return	
  2193  0006F8                     l2539:
  2194  0006F8  503B               	movf	ScanIR@SensorResult,w,c
  2195  0006FA  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2196  0006FC  503C               	movf	ScanIR@SensorResult+1,w,c
  2197  0006FE  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2198  000700  A0D8               	btfss	status,0,c
  2199  000702  D023               	goto	l2553
  2200                           
  2201                           ;Movement.c: 56: stop(mL,mR);
  2202  000704  C02F  F026         	movff	ScanIR@mL,stop@mL
  2203  000708  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2204  00070C  C031  F028         	movff	ScanIR@mR,stop@mR
  2205  000710  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2206  000714  EC88  F005         	call	_stop	;wreg free
  2207                           
  2208                           ;Movement.c: 57: turnLeft(mL,mR);
  2209  000718  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2210  00071C  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2211  000720  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2212  000724  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2213  000728  ECE5  F006         	call	_turnLeft	;wreg free
  2214                           
  2215                           ;Movement.c: 58: delay_tenth_s(3);
  2216  00072C  0E03               	movlw	3
  2217  00072E  EC26  F007         	call	_delay_tenth_s
  2218                           
  2219                           ;Movement.c: 59: stop(mL,mR);
  2220  000732  C02F  F026         	movff	ScanIR@mL,stop@mL
  2221  000736  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2222  00073A  C031  F028         	movff	ScanIR@mR,stop@mR
  2223  00073E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2224  000742  EC88  F005         	call	_stop	;wreg free
  2225  000746                     l2547:
  2226                           
  2227                           ;Movement.c: 60: return 1;
  2228  000746  0E01               	movlw	1
  2229  000748  0012               	return	
  2230  00074A                     l2553:
  2231  00074A  503B               	movf	ScanIR@SensorResult,w,c
  2232  00074C  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2233  00074E  503C               	movf	ScanIR@SensorResult+1,w,c
  2234  000750  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2235  000752  B0D8               	btfsc	status,0,c
  2236  000754  D069               	goto	l2593
  2237                           
  2238                           ;Movement.c: 63: stop(mL,mR);
  2239  000756  C02F  F026         	movff	ScanIR@mL,stop@mL
  2240  00075A  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2241  00075E  C031  F028         	movff	ScanIR@mR,stop@mR
  2242  000762  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2243  000766  EC88  F005         	call	_stop	;wreg free
  2244                           
  2245                           ;Movement.c: 64: turnRight(mL,mR);
  2246  00076A  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2247  00076E  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2248  000772  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2249  000776  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2250  00077A  ECC0  F006         	call	_turnRight	;wreg free
  2251                           
  2252                           ;Movement.c: 65: delay_tenth_s(3);
  2253  00077E  0E03               	movlw	3
  2254  000780  EC26  F007         	call	_delay_tenth_s
  2255                           
  2256                           ;Movement.c: 66: stop(mL,mR);
  2257  000784  C02F  F026         	movff	ScanIR@mL,stop@mL
  2258  000788  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2259  00078C  C031  F028         	movff	ScanIR@mR,stop@mR
  2260  000790  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2261  000794  EC88  F005         	call	_stop	;wreg free
  2262  000798  D7D6               	goto	l2547
  2263  00079A                     l2565:
  2264                           
  2265                           ;Movement.c: 71: stop(mL,mR);
  2266  00079A  C02F  F026         	movff	ScanIR@mL,stop@mL
  2267  00079E  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2268  0007A2  C031  F028         	movff	ScanIR@mR,stop@mR
  2269  0007A6  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2270  0007AA  EC88  F005         	call	_stop	;wreg free
  2271                           
  2272                           ;Movement.c: 74: if (SensorResult[0]<=SensorResult[1]) {
  2273  0007AE  503B               	movf	ScanIR@SensorResult,w,c
  2274  0007B0  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2275  0007B2  503C               	movf	ScanIR@SensorResult+1,w,c
  2276  0007B4  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2277  0007B6  A0D8               	btfss	status,0,c
  2278  0007B8  D019               	goto	l2581
  2279                           
  2280                           ;Movement.c: 75: turnLeft(mL,mR);
  2281  0007BA  C02F  F02B         	movff	ScanIR@mL,turnLeft@mL
  2282  0007BE  C030  F02C         	movff	ScanIR@mL+1,turnLeft@mL+1
  2283  0007C2  C031  F02D         	movff	ScanIR@mR,turnLeft@mR
  2284  0007C6  C032  F02E         	movff	ScanIR@mR+1,turnLeft@mR+1
  2285  0007CA  ECE5  F006         	call	_turnLeft	;wreg free
  2286                           
  2287                           ;Movement.c: 76: delay_tenth_s(5);
  2288  0007CE  0E05               	movlw	5
  2289  0007D0  EC26  F007         	call	_delay_tenth_s
  2290                           
  2291                           ;Movement.c: 77: stop(mL,mR);
  2292  0007D4  C02F  F026         	movff	ScanIR@mL,stop@mL
  2293  0007D8  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2294  0007DC  C031  F028         	movff	ScanIR@mR,stop@mR
  2295  0007E0  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2296  0007E4  EC88  F005         	call	_stop	;wreg free
  2297  0007E8                     l2575:
  2298                           
  2299                           ;Movement.c: 78: return 0;
  2300  0007E8  0E00               	movlw	0
  2301  0007EA  0012               	return	
  2302  0007EC                     l2581:
  2303  0007EC  503B               	movf	ScanIR@SensorResult,w,c
  2304  0007EE  5C3D               	subwf	ScanIR@SensorResult+2,w,c
  2305  0007F0  503C               	movf	ScanIR@SensorResult+1,w,c
  2306  0007F2  583E               	subwfb	ScanIR@SensorResult+3,w,c
  2307  0007F4  B0D8               	btfsc	status,0,c
  2308  0007F6  D018               	goto	l2593
  2309                           
  2310                           ;Movement.c: 81: turnRight(mL,mR);
  2311  0007F8  C02F  F02B         	movff	ScanIR@mL,turnRight@mL
  2312  0007FC  C030  F02C         	movff	ScanIR@mL+1,turnRight@mL+1
  2313  000800  C031  F02D         	movff	ScanIR@mR,turnRight@mR
  2314  000804  C032  F02E         	movff	ScanIR@mR+1,turnRight@mR+1
  2315  000808  ECC0  F006         	call	_turnRight	;wreg free
  2316                           
  2317                           ;Movement.c: 82: delay_tenth_s(5);
  2318  00080C  0E05               	movlw	5
  2319  00080E  EC26  F007         	call	_delay_tenth_s
  2320                           
  2321                           ;Movement.c: 83: stop(mL,mR);
  2322  000812  C02F  F026         	movff	ScanIR@mL,stop@mL
  2323  000816  C030  F027         	movff	ScanIR@mL+1,stop@mL+1
  2324  00081A  C031  F028         	movff	ScanIR@mR,stop@mR
  2325  00081E  C032  F029         	movff	ScanIR@mR+1,stop@mR+1
  2326  000822  EC88  F005         	call	_stop	;wreg free
  2327  000826  D7E0               	goto	l2575
  2328  000828                     l2593:
  2329                           
  2330                           ;Movement.c: 85: }
  2331                           ;Movement.c: 86: }
  2332                           ;Movement.c: 87: return 0;
  2333  000828  0E00               	movlw	0
  2334  00082A  0012               	return	
  2335  00082C                     __end_of_ScanIR:
  2336                           	opt stack 0
  2337                           tblptru	equ	0xFF8
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon	equ	0xFF2
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           indf2	equ	0xFDF
  2344                           postinc2	equ	0xFDE
  2345                           postdec2	equ	0xFDD
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _turnRight *****************
  2351 ;; Defined at:
  2352 ;;		line 98 in file "dc_motor.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2355 ;;		 -> main@mL(9), 
  2356 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2357 ;;		 -> main@mR(9), 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;		None
  2360 ;; Return value:  Size  Location     Type
  2361 ;;		None               void
  2362 ;; Registers used:
  2363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2369 ;;      Params:         4       0       0       0
  2370 ;;      Locals:         0       0       0       0
  2371 ;;      Temps:          0       0       0       0
  2372 ;;      Totals:         4       0       0       0
  2373 ;;Total ram usage:        4 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    4
  2376 ;; This function calls:
  2377 ;;		_fullSpeedAhead
  2378 ;;		_stop
  2379 ;; This function is called by:
  2380 ;;		_ScanIR
  2381 ;;		_ScanWithRange
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text8
  2386  000D80                     __ptext8:
  2387                           	opt stack 0
  2388  000D80                     _turnRight:
  2389                           	opt stack 25
  2390                           
  2391                           ;dc_motor.c: 100: stop(mL, mR);
  2392                           
  2393                           ;incstack = 0
  2394  000D80  C02B  F026         	movff	turnRight@mL,stop@mL
  2395  000D84  C02C  F027         	movff	turnRight@mL+1,stop@mL+1
  2396  000D88  C02D  F028         	movff	turnRight@mR,stop@mR
  2397  000D8C  C02E  F029         	movff	turnRight@mR+1,stop@mR+1
  2398  000D90  EC88  F005         	call	_stop	;wreg free
  2399                           
  2400                           ;dc_motor.c: 102: mL->direction=1;
  2401  000D94  EE20 F001          	lfsr	2,1
  2402  000D98  502B               	movf	turnRight@mL,w,c
  2403  000D9A  26D9               	addwf	fsr2l,f,c
  2404  000D9C  502C               	movf	turnRight@mL+1,w,c
  2405  000D9E  22DA               	addwfc	fsr2h,f,c
  2406  000DA0  0E01               	movlw	1
  2407  000DA2  6EDF               	movwf	indf2,c
  2408                           
  2409                           ;dc_motor.c: 103: mR->direction=0;
  2410  000DA4  EE20 F001          	lfsr	2,1
  2411  000DA8  502D               	movf	turnRight@mR,w,c
  2412  000DAA  26D9               	addwf	fsr2l,f,c
  2413  000DAC  502E               	movf	turnRight@mR+1,w,c
  2414  000DAE  22DA               	addwfc	fsr2h,f,c
  2415  000DB0  0E00               	movlw	0
  2416  000DB2  6EDF               	movwf	indf2,c
  2417                           
  2418                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  2419  000DB4  C02B  F026         	movff	turnRight@mL,fullSpeedAhead@mL
  2420  000DB8  C02C  F027         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  2421  000DBC  C02D  F028         	movff	turnRight@mR,fullSpeedAhead@mR
  2422  000DC0  C02E  F029         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  2423  000DC4  EC88  F006         	call	_fullSpeedAhead	;wreg free
  2424  000DC8  0012               	return		;funcret
  2425  000DCA                     __end_of_turnRight:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           intcon	equ	0xFF2
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           indf2	equ	0xFDF
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _turnLeft *****************
  2441 ;; Defined at:
  2442 ;;		line 87 in file "dc_motor.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2445 ;;		 -> main@mL(9), 
  2446 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2447 ;;		 -> main@mR(9), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2459 ;;      Params:         4       0       0       0
  2460 ;;      Locals:         0       0       0       0
  2461 ;;      Temps:          0       0       0       0
  2462 ;;      Totals:         4       0       0       0
  2463 ;;Total ram usage:        4 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    4
  2466 ;; This function calls:
  2467 ;;		_fullSpeedAhead
  2468 ;;		_stop
  2469 ;; This function is called by:
  2470 ;;		_ScanIR
  2471 ;;		_ScanWithRange
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           	psect	text9
  2476  000DCA                     __ptext9:
  2477                           	opt stack 0
  2478  000DCA                     _turnLeft:
  2479                           	opt stack 25
  2480                           
  2481                           ;dc_motor.c: 89: stop(mL, mR);
  2482                           
  2483                           ;incstack = 0
  2484  000DCA  C02B  F026         	movff	turnLeft@mL,stop@mL
  2485  000DCE  C02C  F027         	movff	turnLeft@mL+1,stop@mL+1
  2486  000DD2  C02D  F028         	movff	turnLeft@mR,stop@mR
  2487  000DD6  C02E  F029         	movff	turnLeft@mR+1,stop@mR+1
  2488  000DDA  EC88  F005         	call	_stop	;wreg free
  2489                           
  2490                           ;dc_motor.c: 91: mL->direction=0;
  2491  000DDE  EE20 F001          	lfsr	2,1
  2492  000DE2  502B               	movf	turnLeft@mL,w,c
  2493  000DE4  26D9               	addwf	fsr2l,f,c
  2494  000DE6  502C               	movf	turnLeft@mL+1,w,c
  2495  000DE8  22DA               	addwfc	fsr2h,f,c
  2496  000DEA  0E00               	movlw	0
  2497  000DEC  6EDF               	movwf	indf2,c
  2498                           
  2499                           ;dc_motor.c: 92: mR->direction=1;
  2500  000DEE  EE20 F001          	lfsr	2,1
  2501  000DF2  502D               	movf	turnLeft@mR,w,c
  2502  000DF4  26D9               	addwf	fsr2l,f,c
  2503  000DF6  502E               	movf	turnLeft@mR+1,w,c
  2504  000DF8  22DA               	addwfc	fsr2h,f,c
  2505  000DFA  0E01               	movlw	1
  2506  000DFC  6EDF               	movwf	indf2,c
  2507                           
  2508                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  2509  000DFE  C02B  F026         	movff	turnLeft@mL,fullSpeedAhead@mL
  2510  000E02  C02C  F027         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  2511  000E06  C02D  F028         	movff	turnLeft@mR,fullSpeedAhead@mR
  2512  000E0A  C02E  F029         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  2513  000E0E  EC88  F006         	call	_fullSpeedAhead	;wreg free
  2514  000E12  0012               	return		;funcret
  2515  000E14                     __end_of_turnLeft:
  2516                           	opt stack 0
  2517                           tblptru	equ	0xFF8
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _stop *****************
  2531 ;; Defined at:
  2532 ;;		line 67 in file "dc_motor.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2535 ;;		 -> main@mL(9), 
  2536 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2537 ;;		 -> main@mR(9), 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;		None               void
  2542 ;; Registers used:
  2543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2549 ;;      Params:         4       0       0       0
  2550 ;;      Locals:         0       0       0       0
  2551 ;;      Temps:          0       0       0       0
  2552 ;;      Totals:         4       0       0       0
  2553 ;;Total ram usage:        4 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    3
  2556 ;; This function calls:
  2557 ;;		_setMotorPWM
  2558 ;; This function is called by:
  2559 ;;		_main
  2560 ;;		_turnLeft
  2561 ;;		_turnRight
  2562 ;;		_ScanIR
  2563 ;;		_ScanWithRange
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text10
  2568  000B10                     __ptext10:
  2569                           	opt stack 0
  2570  000B10                     _stop:
  2571                           	opt stack 27
  2572                           
  2573                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  2574                           
  2575                           ;incstack = 0
  2576  000B10  D028               	goto	l2279
  2577  000B12                     l2265:
  2578                           
  2579                           ;dc_motor.c: 71: if(mL->power>0){
  2580  000B12  C026  FFD9         	movff	stop@mL,fsr2l
  2581  000B16  C027  FFDA         	movff	stop@mL+1,fsr2h
  2582  000B1A  50DF               	movf	indf2,w,c
  2583  000B1C  B4D8               	btfsc	status,2,c
  2584  000B1E  D005               	goto	l2269
  2585                           
  2586                           ;dc_motor.c: 72: mL->power--;
  2587  000B20  C026  FFD9         	movff	stop@mL,fsr2l
  2588  000B24  C027  FFDA         	movff	stop@mL+1,fsr2h
  2589  000B28  06DF               	decf	indf2,f,c
  2590  000B2A                     l2269:
  2591                           
  2592                           ;dc_motor.c: 73: }
  2593                           ;dc_motor.c: 74: if(mR->power>0){
  2594  000B2A  C028  FFD9         	movff	stop@mR,fsr2l
  2595  000B2E  C029  FFDA         	movff	stop@mR+1,fsr2h
  2596  000B32  50DF               	movf	indf2,w,c
  2597  000B34  B4D8               	btfsc	status,2,c
  2598  000B36  D005               	goto	l2273
  2599                           
  2600                           ;dc_motor.c: 75: mR->power--;
  2601  000B38  C028  FFD9         	movff	stop@mR,fsr2l
  2602  000B3C  C029  FFDA         	movff	stop@mR+1,fsr2h
  2603  000B40  06DF               	decf	indf2,f,c
  2604  000B42                     l2273:
  2605                           
  2606                           ;dc_motor.c: 76: }
  2607                           ;dc_motor.c: 77: setMotorPWM(mL);
  2608  000B42  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2609  000B46  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2610  000B4A  ECEE  F004         	call	_setMotorPWM	;wreg free
  2611                           
  2612                           ;dc_motor.c: 78: setMotorPWM(mR);
  2613  000B4E  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2614  000B52  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2615  000B56  ECEE  F004         	call	_setMotorPWM	;wreg free
  2616                           
  2617                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2618  000B5A  0E21               	movlw	33
  2619  000B5C                     u2207:
  2620  000B5C  2EE8               	decfsz	wreg,f,c
  2621  000B5E  D7FE               	goto	u2207
  2622  000B60  F000               	nop	
  2623  000B62                     l2279:
  2624  000B62  C026  FFD9         	movff	stop@mL,fsr2l
  2625  000B66  C027  FFDA         	movff	stop@mL+1,fsr2h
  2626  000B6A  50DF               	movf	indf2,w,c
  2627  000B6C  A4D8               	btfss	status,2,c
  2628  000B6E  D7D1               	goto	l2265
  2629  000B70  C028  FFD9         	movff	stop@mR,fsr2l
  2630  000B74  C029  FFDA         	movff	stop@mR+1,fsr2h
  2631  000B78  50DF               	movf	indf2,w,c
  2632  000B7A  A4D8               	btfss	status,2,c
  2633  000B7C  D7CA               	goto	l2265
  2634                           
  2635                           ;dc_motor.c: 80: }
  2636                           ;dc_motor.c: 81: mL->direction=1;
  2637  000B7E  EE20 F001          	lfsr	2,1
  2638  000B82  5026               	movf	stop@mL,w,c
  2639  000B84  26D9               	addwf	fsr2l,f,c
  2640  000B86  5027               	movf	stop@mL+1,w,c
  2641  000B88  22DA               	addwfc	fsr2h,f,c
  2642  000B8A  0E01               	movlw	1
  2643  000B8C  6EDF               	movwf	indf2,c
  2644                           
  2645                           ;dc_motor.c: 82: mR->direction=1;
  2646  000B8E  EE20 F001          	lfsr	2,1
  2647  000B92  5028               	movf	stop@mR,w,c
  2648  000B94  26D9               	addwf	fsr2l,f,c
  2649  000B96  5029               	movf	stop@mR+1,w,c
  2650  000B98  22DA               	addwfc	fsr2h,f,c
  2651  000B9A  0E01               	movlw	1
  2652  000B9C  6EDF               	movwf	indf2,c
  2653  000B9E  0012               	return		;funcret
  2654  000BA0                     __end_of_stop:
  2655                           	opt stack 0
  2656                           tblptru	equ	0xFF8
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf2	equ	0xFDF
  2663                           postinc2	equ	0xFDE
  2664                           postdec2	equ	0xFDD
  2665                           fsr2h	equ	0xFDA
  2666                           fsr2l	equ	0xFD9
  2667                           status	equ	0xFD8
  2668                           
  2669 ;; *************** function _fullSpeedAhead *****************
  2670 ;; Defined at:
  2671 ;;		line 108 in file "dc_motor.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2674 ;;		 -> main@mL(9), 
  2675 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2676 ;;		 -> main@mR(9), 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;		None               void
  2681 ;; Registers used:
  2682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2688 ;;      Params:         4       0       0       0
  2689 ;;      Locals:         0       0       0       0
  2690 ;;      Temps:          1       0       0       0
  2691 ;;      Totals:         5       0       0       0
  2692 ;;Total ram usage:        5 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		_setMotorPWM
  2697 ;; This function is called by:
  2698 ;;		_main
  2699 ;;		_turnLeft
  2700 ;;		_turnRight
  2701 ;;		_fullSpeedBack
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           	psect	text11
  2706  000D10                     __ptext11:
  2707                           	opt stack 0
  2708  000D10                     _fullSpeedAhead:
  2709                           	opt stack 26
  2710                           
  2711                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  2712                           
  2713                           ;incstack = 0
  2714  000D10  D028               	goto	l137
  2715  000D12                     l2247:
  2716                           
  2717                           ;dc_motor.c: 112: if(mL->power<100){
  2718  000D12  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2719  000D16  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2720  000D1A  0E64               	movlw	100
  2721  000D1C  60DF               	cpfslt	indf2,c
  2722  000D1E  D005               	goto	l2251
  2723                           
  2724                           ;dc_motor.c: 113: mL->power++;
  2725  000D20  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2726  000D24  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2727  000D28  2ADF               	incf	indf2,f,c
  2728  000D2A                     l2251:
  2729                           
  2730                           ;dc_motor.c: 114: }
  2731                           ;dc_motor.c: 115: if(mR->power<100){
  2732  000D2A  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2733  000D2E  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2734  000D32  0E64               	movlw	100
  2735  000D34  60DF               	cpfslt	indf2,c
  2736  000D36  D005               	goto	l2255
  2737                           
  2738                           ;dc_motor.c: 116: mR->power++;
  2739  000D38  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2740  000D3C  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2741  000D40  2ADF               	incf	indf2,f,c
  2742  000D42                     l2255:
  2743                           
  2744                           ;dc_motor.c: 117: }
  2745                           ;dc_motor.c: 118: setMotorPWM(mL);
  2746  000D42  C026  F01D         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2747  000D46  C027  F01E         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2748  000D4A  ECEE  F004         	call	_setMotorPWM	;wreg free
  2749                           
  2750                           ;dc_motor.c: 119: setMotorPWM(mR);
  2751  000D4E  C028  F01D         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2752  000D52  C029  F01E         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2753  000D56  ECEE  F004         	call	_setMotorPWM	;wreg free
  2754                           
  2755                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2756  000D5A  0E21               	movlw	33
  2757  000D5C                     u2217:
  2758  000D5C  2EE8               	decfsz	wreg,f,c
  2759  000D5E  D7FE               	goto	u2217
  2760  000D60  F000               	nop	
  2761  000D62                     l137:
  2762  000D62  C026  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2763  000D66  C027  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2764  000D6A  0E63               	movlw	99
  2765  000D6C  64DF               	cpfsgt	indf2,c
  2766  000D6E  D7D1               	goto	l2247
  2767  000D70  C028  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2768  000D74  C029  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2769  000D78  0E63               	movlw	99
  2770  000D7A  64DF               	cpfsgt	indf2,c
  2771  000D7C  D7CA               	goto	l2247
  2772  000D7E  0012               	return	
  2773  000D80                     __end_of_fullSpeedAhead:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _setMotorPWM *****************
  2789 ;; Defined at:
  2790 ;;		line 26 in file "dc_motor.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  m               2   28[COMRAM] PTR struct DC_motor
  2793 ;;		 -> main@mR(9), main@mL(9), 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  PWMduty         2   35[COMRAM] int 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;		None               void
  2798 ;; Registers used:
  2799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2805 ;;      Params:         2       0       0       0
  2806 ;;      Locals:         2       0       0       0
  2807 ;;      Temps:          5       0       0       0
  2808 ;;      Totals:         9       0       0       0
  2809 ;;Total ram usage:        9 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    2
  2812 ;; This function calls:
  2813 ;;		___awdiv
  2814 ;;		___wmul
  2815 ;; This function is called by:
  2816 ;;		_stop
  2817 ;;		_fullSpeedAhead
  2818 ;;		_setMotorFullSpeed
  2819 ;;		_stopMotor
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text12
  2824  0009DC                     __ptext12:
  2825                           	opt stack 0
  2826  0009DC                     _setMotorPWM:
  2827                           	opt stack 27
  2828                           
  2829                           ;dc_motor.c: 28: int PWMduty;
  2830                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  2831                           
  2832                           ;incstack = 0
  2833  0009DC  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  2834  0009E0  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2835  0009E4  50DF               	movf	indf2,w,c
  2836  0009E6  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2837  0009E8  501F               	movf	??_setMotorPWM,w,c
  2838  0009EA  6E0F               	movwf	___wmul@multiplier,c
  2839  0009EC  6A10               	clrf	___wmul@multiplier+1,c
  2840  0009EE  EE20 F007          	lfsr	2,7
  2841  0009F2  501D               	movf	setMotorPWM@m,w,c
  2842  0009F4  26D9               	addwf	fsr2l,f,c
  2843  0009F6  501E               	movf	setMotorPWM@m+1,w,c
  2844  0009F8  22DA               	addwfc	fsr2h,f,c
  2845  0009FA  CFDE F011          	movff	postinc2,___wmul@multiplicand
  2846  0009FE  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  2847  000A02  EC89  F007         	call	___wmul	;wreg free
  2848  000A06  C00F  F015         	movff	?___wmul,___awdiv@dividend
  2849  000A0A  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  2850  000A0E  0E00               	movlw	0
  2851  000A10  6E18               	movwf	___awdiv@divisor+1,c
  2852  000A12  0E64               	movlw	100
  2853  000A14  6E17               	movwf	___awdiv@divisor,c
  2854  000A16  ECD0  F005         	call	___awdiv	;wreg free
  2855  000A1A  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  2856  000A1E  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2857                           
  2858                           ;dc_motor.c: 32: if (m->direction)
  2859  000A22  EE20 F001          	lfsr	2,1
  2860  000A26  501D               	movf	setMotorPWM@m,w,c
  2861  000A28  26D9               	addwf	fsr2l,f,c
  2862  000A2A  501E               	movf	setMotorPWM@m+1,w,c
  2863  000A2C  22DA               	addwfc	fsr2h,f,c
  2864  000A2E  50DF               	movf	indf2,w,c
  2865  000A30  B4D8               	btfsc	status,2,c
  2866  000A32  D02C               	goto	l2243
  2867                           
  2868                           ;dc_motor.c: 33: {
  2869                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  2870  000A34  EE20 F006          	lfsr	2,6
  2871  000A38  501D               	movf	setMotorPWM@m,w,c
  2872  000A3A  26D9               	addwf	fsr2l,f,c
  2873  000A3C  501E               	movf	setMotorPWM@m+1,w,c
  2874  000A3E  22DA               	addwfc	fsr2h,f,c
  2875  000A40  50DF               	movf	indf2,w,c
  2876  000A42  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2877  000A44  0E01               	movlw	1
  2878  000A46  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2879  000A48  2A1F               	incf	??_setMotorPWM,f,c
  2880  000A4A  D002               	goto	u1644
  2881  000A4C                     u1645:
  2882  000A4C  90D8               	bcf	status,0,c
  2883  000A4E  3620               	rlcf	??_setMotorPWM+1,f,c
  2884  000A50                     u1644:
  2885  000A50  2E1F               	decfsz	??_setMotorPWM,f,c
  2886  000A52  D7FC               	goto	u1645
  2887  000A54  5020               	movf	??_setMotorPWM+1,w,c
  2888  000A56  108A               	iorwf	3978,w,c	;volatile
  2889  000A58  6E8A               	movwf	3978,c	;volatile
  2890                           
  2891                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  2892  000A5A  EE20 F007          	lfsr	2,7
  2893  000A5E  501D               	movf	setMotorPWM@m,w,c
  2894  000A60  26D9               	addwf	fsr2l,f,c
  2895  000A62  501E               	movf	setMotorPWM@m+1,w,c
  2896  000A64  22DA               	addwfc	fsr2h,f,c
  2897  000A66  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2898  000A6A  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2899  000A6E  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2900  000A72  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2901  000A76  1E21               	comf	??_setMotorPWM+2,f,c
  2902  000A78  1E22               	comf	??_setMotorPWM+3,f,c
  2903  000A7A  4A21               	infsnz	??_setMotorPWM+2,f,c
  2904  000A7C  2A22               	incf	??_setMotorPWM+3,f,c
  2905  000A7E  501F               	movf	??_setMotorPWM,w,c
  2906  000A80  2421               	addwf	??_setMotorPWM+2,w,c
  2907  000A82  6E24               	movwf	setMotorPWM@PWMduty,c
  2908  000A84  5020               	movf	??_setMotorPWM+1,w,c
  2909  000A86  2022               	addwfc	??_setMotorPWM+3,w,c
  2910  000A88  6E25               	movwf	setMotorPWM@PWMduty+1,c
  2911                           
  2912                           ;dc_motor.c: 36: }
  2913  000A8A  D014               	goto	l107
  2914  000A8C                     l2243:
  2915                           
  2916                           ;dc_motor.c: 37: else
  2917                           ;dc_motor.c: 38: {
  2918                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  2919  000A8C  EE20 F006          	lfsr	2,6
  2920  000A90  501D               	movf	setMotorPWM@m,w,c
  2921  000A92  26D9               	addwf	fsr2l,f,c
  2922  000A94  501E               	movf	setMotorPWM@m+1,w,c
  2923  000A96  22DA               	addwfc	fsr2h,f,c
  2924  000A98  50DF               	movf	indf2,w,c
  2925  000A9A  6E1F               	movwf	??_setMotorPWM& (0+255),c
  2926  000A9C  0E01               	movlw	1
  2927  000A9E  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  2928  000AA0  2A1F               	incf	??_setMotorPWM,f,c
  2929  000AA2  D002               	goto	u1654
  2930  000AA4                     u1655:
  2931  000AA4  90D8               	bcf	status,0,c
  2932  000AA6  3620               	rlcf	??_setMotorPWM+1,f,c
  2933  000AA8                     u1654:
  2934  000AA8  2E1F               	decfsz	??_setMotorPWM,f,c
  2935  000AAA  D7FC               	goto	u1655
  2936  000AAC  5020               	movf	??_setMotorPWM+1,w,c
  2937  000AAE  0AFF               	xorlw	255
  2938  000AB0  148A               	andwf	3978,w,c	;volatile
  2939  000AB2  6E8A               	movwf	3978,c	;volatile
  2940  000AB4                     l107:
  2941                           
  2942                           ;dc_motor.c: 40: }
  2943                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  2944  000AB4  EE20 F002          	lfsr	2,2
  2945  000AB8  501D               	movf	setMotorPWM@m,w,c
  2946  000ABA  26D9               	addwf	fsr2l,f,c
  2947  000ABC  501E               	movf	setMotorPWM@m+1,w,c
  2948  000ABE  22DA               	addwfc	fsr2h,f,c
  2949  000AC0  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2950  000AC4  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2951  000AC8  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2952  000ACC  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2953  000AD0  4424               	rlncf	setMotorPWM@PWMduty,w,c
  2954  000AD2  46E8               	rlncf	wreg,f,c
  2955  000AD4  0BFC               	andlw	252
  2956  000AD6  6EDF               	movwf	indf2,c
  2957                           
  2958                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  2959  000AD8  EE20 F004          	lfsr	2,4
  2960  000ADC  501D               	movf	setMotorPWM@m,w,c
  2961  000ADE  26D9               	addwf	fsr2l,f,c
  2962  000AE0  501E               	movf	setMotorPWM@m+1,w,c
  2963  000AE2  22DA               	addwfc	fsr2h,f,c
  2964  000AE4  CFDE F01F          	movff	postinc2,??_setMotorPWM
  2965  000AE8  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  2966  000AEC  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  2967  000AF0  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2968  000AF4  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2969  000AF8  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2970  000AFC  0E06               	movlw	6
  2971  000AFE  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  2972  000B00                     u1665:
  2973  000B00  3422               	rlcf	??_setMotorPWM+3,w,c
  2974  000B02  3222               	rrcf	??_setMotorPWM+3,f,c
  2975  000B04  3221               	rrcf	??_setMotorPWM+2,f,c
  2976  000B06  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2977  000B08  D7FB               	goto	u1665
  2978  000B0A  5021               	movf	??_setMotorPWM+2,w,c
  2979  000B0C  6EDF               	movwf	indf2,c
  2980  000B0E  0012               	return		;funcret
  2981  000B10                     __end_of_setMotorPWM:
  2982                           	opt stack 0
  2983                           tblptru	equ	0xFF8
  2984                           prodh	equ	0xFF4
  2985                           prodl	equ	0xFF3
  2986                           intcon	equ	0xFF2
  2987                           postinc0	equ	0xFEE
  2988                           wreg	equ	0xFE8
  2989                           indf2	equ	0xFDF
  2990                           postinc2	equ	0xFDE
  2991                           postdec2	equ	0xFDD
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function ___wmul *****************
  2997 ;; Defined at:
  2998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  multiplier      2   14[COMRAM] unsigned int 
  3001 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  product         2   18[COMRAM] unsigned int 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2   14[COMRAM] unsigned int 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, prodl, prodh
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3013 ;;      Params:         4       0       0       0
  3014 ;;      Locals:         2       0       0       0
  3015 ;;      Temps:          0       0       0       0
  3016 ;;      Totals:         6       0       0       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_setMotorPWM
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text13
  3028  000F12                     __ptext13:
  3029                           	opt stack 0
  3030  000F12                     ___wmul:
  3031                           	opt stack 27
  3032                           
  3033                           ;incstack = 0
  3034  000F12  500F               	movf	___wmul@multiplier,w,c
  3035  000F14  0211               	mulwf	___wmul@multiplicand,c
  3036  000F16  CFF3 F013          	movff	prodl,___wmul@product
  3037  000F1A  CFF4 F014          	movff	prodh,___wmul@product+1
  3038  000F1E  500F               	movf	___wmul@multiplier,w,c
  3039  000F20  0212               	mulwf	___wmul@multiplicand+1,c
  3040  000F22  50F3               	movf	prodl,w,c
  3041  000F24  2614               	addwf	___wmul@product+1,f,c
  3042  000F26  5010               	movf	___wmul@multiplier+1,w,c
  3043  000F28  0211               	mulwf	___wmul@multiplicand,c
  3044  000F2A  50F3               	movf	prodl,w,c
  3045  000F2C  2614               	addwf	___wmul@product+1,f,c
  3046  000F2E  C013  F00F         	movff	___wmul@product,?___wmul
  3047  000F32  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3048  000F36  0012               	return	
  3049  000F38                     __end_of___wmul:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function ___awdiv *****************
  3065 ;; Defined at:
  3066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  dividend        2   20[COMRAM] int 
  3069 ;;  divisor         2   22[COMRAM] int 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  quotient        2   26[COMRAM] int 
  3072 ;;  sign            1   25[COMRAM] unsigned char 
  3073 ;;  counter         1   24[COMRAM] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  2   20[COMRAM] int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3083 ;;      Params:         4       0       0       0
  3084 ;;      Locals:         4       0       0       0
  3085 ;;      Temps:          0       0       0       0
  3086 ;;      Totals:         8       0       0       0
  3087 ;;Total ram usage:        8 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_setMotorPWM
  3094 ;;		_ScanWithRange
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text14
  3099  000BA0                     __ptext14:
  3100                           	opt stack 0
  3101  000BA0                     ___awdiv:
  3102                           	opt stack 27
  3103                           
  3104                           ;incstack = 0
  3105  000BA0  0E00               	movlw	0
  3106  000BA2  6E1A               	movwf	___awdiv@sign,c
  3107  000BA4  AE18               	btfss	___awdiv@divisor+1,7,c
  3108  000BA6  D006               	goto	l2201
  3109  000BA8  6C17               	negf	___awdiv@divisor,c
  3110  000BAA  1E18               	comf	___awdiv@divisor+1,f,c
  3111  000BAC  B0D8               	btfsc	status,0,c
  3112  000BAE  2A18               	incf	___awdiv@divisor+1,f,c
  3113  000BB0  0E01               	movlw	1
  3114  000BB2  6E1A               	movwf	___awdiv@sign,c
  3115  000BB4                     l2201:
  3116  000BB4  AE16               	btfss	___awdiv@dividend+1,7,c
  3117  000BB6  D006               	goto	l2207
  3118  000BB8  6C15               	negf	___awdiv@dividend,c
  3119  000BBA  1E16               	comf	___awdiv@dividend+1,f,c
  3120  000BBC  B0D8               	btfsc	status,0,c
  3121  000BBE  2A16               	incf	___awdiv@dividend+1,f,c
  3122  000BC0  0E01               	movlw	1
  3123  000BC2  1A1A               	xorwf	___awdiv@sign,f,c
  3124  000BC4                     l2207:
  3125  000BC4  0E00               	movlw	0
  3126  000BC6  6E1C               	movwf	___awdiv@quotient+1,c
  3127  000BC8  0E00               	movlw	0
  3128  000BCA  6E1B               	movwf	___awdiv@quotient,c
  3129  000BCC  5017               	movf	___awdiv@divisor,w,c
  3130  000BCE  1018               	iorwf	___awdiv@divisor+1,w,c
  3131  000BD0  B4D8               	btfsc	status,2,c
  3132  000BD2  D01C               	goto	l2229
  3133  000BD4  0E01               	movlw	1
  3134  000BD6  6E19               	movwf	___awdiv@counter,c
  3135  000BD8  D004               	goto	l2215
  3136  000BDA                     l2213:
  3137  000BDA  90D8               	bcf	status,0,c
  3138  000BDC  3617               	rlcf	___awdiv@divisor,f,c
  3139  000BDE  3618               	rlcf	___awdiv@divisor+1,f,c
  3140  000BE0  2A19               	incf	___awdiv@counter,f,c
  3141  000BE2                     l2215:
  3142  000BE2  AE18               	btfss	___awdiv@divisor+1,7,c
  3143  000BE4  D7FA               	goto	l2213
  3144  000BE6                     l2217:
  3145  000BE6  90D8               	bcf	status,0,c
  3146  000BE8  361B               	rlcf	___awdiv@quotient,f,c
  3147  000BEA  361C               	rlcf	___awdiv@quotient+1,f,c
  3148  000BEC  5017               	movf	___awdiv@divisor,w,c
  3149  000BEE  5C15               	subwf	___awdiv@dividend,w,c
  3150  000BF0  5018               	movf	___awdiv@divisor+1,w,c
  3151  000BF2  5816               	subwfb	___awdiv@dividend+1,w,c
  3152  000BF4  A0D8               	btfss	status,0,c
  3153  000BF6  D005               	goto	l2225
  3154  000BF8  5017               	movf	___awdiv@divisor,w,c
  3155  000BFA  5E15               	subwf	___awdiv@dividend,f,c
  3156  000BFC  5018               	movf	___awdiv@divisor+1,w,c
  3157  000BFE  5A16               	subwfb	___awdiv@dividend+1,f,c
  3158  000C00  801B               	bsf	___awdiv@quotient,0,c
  3159  000C02                     l2225:
  3160  000C02  90D8               	bcf	status,0,c
  3161  000C04  3218               	rrcf	___awdiv@divisor+1,f,c
  3162  000C06  3217               	rrcf	___awdiv@divisor,f,c
  3163  000C08  2E19               	decfsz	___awdiv@counter,f,c
  3164  000C0A  D7ED               	goto	l2217
  3165  000C0C                     l2229:
  3166  000C0C  501A               	movf	___awdiv@sign,w,c
  3167  000C0E  B4D8               	btfsc	status,2,c
  3168  000C10  D004               	goto	l2233
  3169  000C12  6C1B               	negf	___awdiv@quotient,c
  3170  000C14  1E1C               	comf	___awdiv@quotient+1,f,c
  3171  000C16  B0D8               	btfsc	status,0,c
  3172  000C18  2A1C               	incf	___awdiv@quotient+1,f,c
  3173  000C1A                     l2233:
  3174  000C1A  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  3175  000C1E  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  3176  000C22  0012               	return	
  3177  000C24                     __end_of___awdiv:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           intcon	equ	0xFF2
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           indf2	equ	0xFDF
  3186                           postinc2	equ	0xFDE
  3187                           postdec2	equ	0xFDD
  3188                           fsr2h	equ	0xFDA
  3189                           fsr2l	equ	0xFD9
  3190                           status	equ	0xFD8
  3191                           
  3192 ;; *************** function _grabRightIR *****************
  3193 ;; Defined at:
  3194 ;;		line 74 in file "IR_Reading.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3199 ;;  i               1   21[COMRAM] unsigned char 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  2   14[COMRAM] unsigned int 
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3209 ;;      Params:         2       0       0       0
  3210 ;;      Locals:         3       0       0       0
  3211 ;;      Temps:          3       0       0       0
  3212 ;;      Totals:         8       0       0       0
  3213 ;;Total ram usage:        8 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_ScanIR
  3220 ;;		_ScanWithRange
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text15
  3225  000C24                     __ptext15:
  3226                           	opt stack 0
  3227  000C24                     _grabRightIR:
  3228                           	opt stack 28
  3229                           
  3230                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  3231                           
  3232                           ;incstack = 0
  3233  000C24  0E00               	movlw	0
  3234  000C26  6E15               	movwf	grabRightIR@IR_signal+1,c
  3235  000C28  0E00               	movlw	0
  3236  000C2A  6E14               	movwf	grabRightIR@IR_signal,c
  3237                           
  3238                           ;IR_Reading.c: 77: unsigned char i=0;
  3239  000C2C  0E00               	movlw	0
  3240  000C2E  6E16               	movwf	grabRightIR@i,c
  3241                           
  3242                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  3243  000C30  0E00               	movlw	0
  3244  000C32  6E16               	movwf	grabRightIR@i,c
  3245  000C34                     l2323:
  3246  000C34  0E03               	movlw	3
  3247  000C36  6416               	cpfsgt	grabRightIR@i,c
  3248  000C38  D001               	goto	l2327
  3249  000C3A  D020               	goto	l2333
  3250  000C3C                     l2327:
  3251                           
  3252                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 6) | (CAP1BUFL>>2));
  3253  000C3C  5069               	movf	3945,w,c	;volatile
  3254  000C3E  6E11               	movwf	??_grabRightIR& (0+255),c
  3255  000C40  6A12               	clrf	(??_grabRightIR+1)& (0+255),c
  3256  000C42  0E06               	movlw	6
  3257  000C44                     u1805:
  3258  000C44  90D8               	bcf	status,0,c
  3259  000C46  3611               	rlcf	??_grabRightIR,f,c
  3260  000C48  3612               	rlcf	??_grabRightIR+1,f,c
  3261  000C4A  2EE8               	decfsz	wreg,f,c
  3262  000C4C  D7FB               	goto	u1805
  3263  000C4E  CF68 F013          	movff	3944,??_grabRightIR+2	;volatile
  3264  000C52  90D8               	bcf	status,0,c
  3265  000C54  3213               	rrcf	??_grabRightIR+2,f,c
  3266  000C56  90D8               	bcf	status,0,c
  3267  000C58  3213               	rrcf	??_grabRightIR+2,f,c
  3268  000C5A  5013               	movf	??_grabRightIR+2,w,c
  3269  000C5C  1211               	iorwf	??_grabRightIR,f,c
  3270  000C5E  0E00               	movlw	0
  3271  000C60  1212               	iorwf	??_grabRightIR+1,f,c
  3272  000C62  5011               	movf	??_grabRightIR,w,c
  3273  000C64  2614               	addwf	grabRightIR@IR_signal,f,c
  3274  000C66  5012               	movf	??_grabRightIR+1,w,c
  3275  000C68  2215               	addwfc	grabRightIR@IR_signal+1,f,c
  3276                           
  3277                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  3278  000C6A  0E82               	movlw	130
  3279  000C6C  6E11               	movwf	??_grabRightIR& (0+255),c
  3280  000C6E  0EDE               	movlw	222
  3281  000C70                     u2227:
  3282  000C70  2EE8               	decfsz	wreg,f,c
  3283  000C72  D7FE               	goto	u2227
  3284  000C74  2E11               	decfsz	??_grabRightIR& (0+255),f,c
  3285  000C76  D7FC               	goto	u2227
  3286  000C78  2A16               	incf	grabRightIR@i,f,c
  3287  000C7A  D7DC               	goto	l2323
  3288  000C7C                     l2333:
  3289                           
  3290                           ;IR_Reading.c: 83: }
  3291                           ;IR_Reading.c: 85: return IR_signal>>2;
  3292  000C7C  C014  F011         	movff	grabRightIR@IR_signal,??_grabRightIR
  3293  000C80  C015  F012         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  3294  000C84  90D8               	bcf	status,0,c
  3295  000C86  3212               	rrcf	??_grabRightIR+1,f,c
  3296  000C88  3211               	rrcf	??_grabRightIR,f,c
  3297  000C8A  90D8               	bcf	status,0,c
  3298  000C8C  3212               	rrcf	??_grabRightIR+1,f,c
  3299  000C8E  3211               	rrcf	??_grabRightIR,f,c
  3300  000C90  C011  F00F         	movff	??_grabRightIR,?_grabRightIR
  3301  000C94  C012  F010         	movff	??_grabRightIR+1,?_grabRightIR+1
  3302  000C98  0012               	return	
  3303  000C9A                     __end_of_grabRightIR:
  3304                           	opt stack 0
  3305                           tblptru	equ	0xFF8
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function _grabLeftIR *****************
  3319 ;; Defined at:
  3320 ;;		line 90 in file "IR_Reading.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;		None
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  IR_signal       2   19[COMRAM] unsigned int 
  3325 ;;  i               1   21[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2   14[COMRAM] unsigned int 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3335 ;;      Params:         2       0       0       0
  3336 ;;      Locals:         3       0       0       0
  3337 ;;      Temps:          3       0       0       0
  3338 ;;      Totals:         8       0       0       0
  3339 ;;Total ram usage:        8 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    1
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_ScanIR
  3346 ;;		_ScanWithRange
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text16
  3351  000C9A                     __ptext16:
  3352                           	opt stack 0
  3353  000C9A                     _grabLeftIR:
  3354                           	opt stack 28
  3355                           
  3356                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  3357                           
  3358                           ;incstack = 0
  3359  000C9A  0E00               	movlw	0
  3360  000C9C  6E15               	movwf	grabLeftIR@IR_signal+1,c
  3361  000C9E  0E00               	movlw	0
  3362  000CA0  6E14               	movwf	grabLeftIR@IR_signal,c
  3363                           
  3364                           ;IR_Reading.c: 93: unsigned char i=0;
  3365  000CA2  0E00               	movlw	0
  3366  000CA4  6E16               	movwf	grabLeftIR@i,c
  3367                           
  3368                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  3369  000CA6  0E00               	movlw	0
  3370  000CA8  6E16               	movwf	grabLeftIR@i,c
  3371  000CAA                     l2307:
  3372  000CAA  0E03               	movlw	3
  3373  000CAC  6416               	cpfsgt	grabLeftIR@i,c
  3374  000CAE  D001               	goto	l2311
  3375  000CB0  D020               	goto	l2317
  3376  000CB2                     l2311:
  3377                           
  3378                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 6) | (CAP2BUFL>>2));
  3379  000CB2  5067               	movf	3943,w,c	;volatile
  3380  000CB4  6E11               	movwf	??_grabLeftIR& (0+255),c
  3381  000CB6  6A12               	clrf	(??_grabLeftIR+1)& (0+255),c
  3382  000CB8  0E06               	movlw	6
  3383  000CBA                     u1775:
  3384  000CBA  90D8               	bcf	status,0,c
  3385  000CBC  3611               	rlcf	??_grabLeftIR,f,c
  3386  000CBE  3612               	rlcf	??_grabLeftIR+1,f,c
  3387  000CC0  2EE8               	decfsz	wreg,f,c
  3388  000CC2  D7FB               	goto	u1775
  3389  000CC4  CF66 F013          	movff	3942,??_grabLeftIR+2	;volatile
  3390  000CC8  90D8               	bcf	status,0,c
  3391  000CCA  3213               	rrcf	??_grabLeftIR+2,f,c
  3392  000CCC  90D8               	bcf	status,0,c
  3393  000CCE  3213               	rrcf	??_grabLeftIR+2,f,c
  3394  000CD0  5013               	movf	??_grabLeftIR+2,w,c
  3395  000CD2  1211               	iorwf	??_grabLeftIR,f,c
  3396  000CD4  0E00               	movlw	0
  3397  000CD6  1212               	iorwf	??_grabLeftIR+1,f,c
  3398  000CD8  5011               	movf	??_grabLeftIR,w,c
  3399  000CDA  2614               	addwf	grabLeftIR@IR_signal,f,c
  3400  000CDC  5012               	movf	??_grabLeftIR+1,w,c
  3401  000CDE  2215               	addwfc	grabLeftIR@IR_signal+1,f,c
  3402                           
  3403                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  3404  000CE0  0E82               	movlw	130
  3405  000CE2  6E11               	movwf	??_grabLeftIR& (0+255),c
  3406  000CE4  0EDE               	movlw	222
  3407  000CE6                     u2237:
  3408  000CE6  2EE8               	decfsz	wreg,f,c
  3409  000CE8  D7FE               	goto	u2237
  3410  000CEA  2E11               	decfsz	??_grabLeftIR& (0+255),f,c
  3411  000CEC  D7FC               	goto	u2237
  3412  000CEE  2A16               	incf	grabLeftIR@i,f,c
  3413  000CF0  D7DC               	goto	l2307
  3414  000CF2                     l2317:
  3415                           
  3416                           ;IR_Reading.c: 99: }
  3417                           ;IR_Reading.c: 101: return IR_signal>>2;
  3418  000CF2  C014  F011         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  3419  000CF6  C015  F012         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  3420  000CFA  90D8               	bcf	status,0,c
  3421  000CFC  3212               	rrcf	??_grabLeftIR+1,f,c
  3422  000CFE  3211               	rrcf	??_grabLeftIR,f,c
  3423  000D00  90D8               	bcf	status,0,c
  3424  000D02  3212               	rrcf	??_grabLeftIR+1,f,c
  3425  000D04  3211               	rrcf	??_grabLeftIR,f,c
  3426  000D06  C011  F00F         	movff	??_grabLeftIR,?_grabLeftIR
  3427  000D0A  C012  F010         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  3428  000D0E  0012               	return	
  3429  000D10                     __end_of_grabLeftIR:
  3430                           	opt stack 0
  3431                           tblptru	equ	0xFF8
  3432                           prodh	equ	0xFF4
  3433                           prodl	equ	0xFF3
  3434                           intcon	equ	0xFF2
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           fsr2h	equ	0xFDA
  3441                           fsr2l	equ	0xFD9
  3442                           status	equ	0xFD8
  3443                           
  3444 ;; *************** function _delay_tenth_s *****************
  3445 ;; Defined at:
  3446 ;;		line 19 in file "Movement.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  tenth_second    1    wreg     unsigned char 
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  tenth_second    1   15[COMRAM] unsigned char 
  3451 ;;  i               2   16[COMRAM] unsigned int 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;		None               void
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3461 ;;      Params:         0       0       0       0
  3462 ;;      Locals:         3       0       0       0
  3463 ;;      Temps:          1       0       0       0
  3464 ;;      Totals:         4       0       0       0
  3465 ;;Total ram usage:        4 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    1
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_ScanIR
  3472 ;;		_ScanWithRange
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text17
  3477  000E4C                     __ptext17:
  3478                           	opt stack 0
  3479  000E4C                     _delay_tenth_s:
  3480                           	opt stack 28
  3481                           
  3482                           ;incstack = 0
  3483                           ;delay_tenth_s@tenth_seconds stored from wreg
  3484  000E4C  6E10               	movwf	delay_tenth_s@tenth_seconds,c
  3485                           
  3486                           ;Movement.c: 20: unsigned int i=0;
  3487  000E4E  0E00               	movlw	0
  3488  000E50  6E12               	movwf	delay_tenth_s@i+1,c
  3489  000E52  0E00               	movlw	0
  3490  000E54  6E11               	movwf	delay_tenth_s@i,c
  3491                           
  3492                           ;Movement.c: 21: for (i=1; i<=tenth_seconds*2; i++) {
  3493  000E56  0E00               	movlw	0
  3494  000E58  6E12               	movwf	delay_tenth_s@i+1,c
  3495  000E5A  0E01               	movlw	1
  3496  000E5C  6E11               	movwf	delay_tenth_s@i,c
  3497  000E5E  D009               	goto	l2303
  3498  000E60                     l2299:
  3499                           
  3500                           ;Movement.c: 23: _delay((unsigned long)((50)*(8000000/4000.0)));
  3501  000E60  0E82               	movlw	130
  3502  000E62  6E0F               	movwf	??_delay_tenth_s& (0+255),c
  3503  000E64  0EDE               	movlw	222
  3504  000E66                     u2247:
  3505  000E66  2EE8               	decfsz	wreg,f,c
  3506  000E68  D7FE               	goto	u2247
  3507  000E6A  2E0F               	decfsz	??_delay_tenth_s& (0+255),f,c
  3508  000E6C  D7FC               	goto	u2247
  3509  000E6E  4A11               	infsnz	delay_tenth_s@i,f,c
  3510  000E70  2A12               	incf	delay_tenth_s@i+1,f,c
  3511  000E72                     l2303:
  3512  000E72  5010               	movf	delay_tenth_s@tenth_seconds,w,c
  3513  000E74  0D02               	mullw	2
  3514  000E76  5011               	movf	delay_tenth_s@i,w,c
  3515  000E78  5CF3               	subwf	prodl,w,c
  3516  000E7A  5012               	movf	delay_tenth_s@i+1,w,c
  3517  000E7C  58F4               	subwfb	prodh,w,c
  3518  000E7E  A0D8               	btfss	status,0,c
  3519  000E80  0012               	return	
  3520  000E82  D7EE               	goto	l2299
  3521  000E84                     __end_of_delay_tenth_s:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           intcon	equ	0xFF2
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _InterruptHandlerHigh *****************
  3537 ;; Defined at:
  3538 ;;		line 16 in file "main.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;		None               void
  3545 ;; Registers used:
  3546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3552 ;;      Params:         0       0       0       0
  3553 ;;      Locals:         0       0       0       0
  3554 ;;      Temps:         14       0       0       0
  3555 ;;      Totals:        14       0       0       0
  3556 ;;Total ram usage:       14 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		Interrupt level 2
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	intcode
  3566  000008                     __pintcode:
  3567                           	opt stack 0
  3568  000008                     _InterruptHandlerHigh:
  3569                           	opt stack 25
  3570                           
  3571                           ;incstack = 0
  3572  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3573  00000A  CFFA F001          	movff	pclath,??_InterruptHandlerHigh
  3574  00000E  CFFB F002          	movff	pclatu,??_InterruptHandlerHigh+1
  3575  000012  CFE9 F003          	movff	fsr0l,??_InterruptHandlerHigh+2
  3576  000016  CFEA F004          	movff	fsr0h,??_InterruptHandlerHigh+3
  3577  00001A  CFE1 F005          	movff	fsr1l,??_InterruptHandlerHigh+4
  3578  00001E  CFE2 F006          	movff	fsr1h,??_InterruptHandlerHigh+5
  3579  000022  CFD9 F007          	movff	fsr2l,??_InterruptHandlerHigh+6
  3580  000026  CFDA F008          	movff	fsr2h,??_InterruptHandlerHigh+7
  3581  00002A  CFF3 F009          	movff	prodl,??_InterruptHandlerHigh+8
  3582  00002E  CFF4 F00A          	movff	prodh,??_InterruptHandlerHigh+9
  3583  000032  CFF6 F00B          	movff	tblptrl,??_InterruptHandlerHigh+10
  3584  000036  CFF7 F00C          	movff	tblptrh,??_InterruptHandlerHigh+11
  3585  00003A  CFF8 F00D          	movff	tblptru,??_InterruptHandlerHigh+12
  3586  00003E  CFF5 F00E          	movff	tablat,??_InterruptHandlerHigh+13
  3587                           
  3588                           ;main.c: 18: if (PIR1bits.RCIF) {
  3589  000042  AA9E               	btfss	3998,5,c	;volatile
  3590  000044  D013               	goto	i2l52
  3591                           
  3592                           ;main.c: 19: ReceivedString[i]=RCREG;
  3593  000046  504F               	movf	_i,w,c	;volatile
  3594  000048  0D01               	mullw	1
  3595  00004A  0E3F               	movlw	low _ReceivedString
  3596  00004C  24F3               	addwf	prodl,w,c
  3597  00004E  6ED9               	movwf	fsr2l,c
  3598  000050  0E00               	movlw	high _ReceivedString
  3599  000052  20F4               	addwfc	prodh,w,c
  3600  000054  6EDA               	movwf	fsr2h,c
  3601  000056  CFAE FFDF          	movff	4014,indf2	;volatile
  3602                           
  3603                           ;main.c: 20: if (i==15){
  3604  00005A  0E0F               	movlw	15
  3605  00005C  184F               	xorwf	_i,w,c	;volatile
  3606  00005E  A4D8               	btfss	status,2,c
  3607  000060  D003               	goto	i2l1455
  3608                           
  3609                           ;main.c: 21: i=0;
  3610  000062  0E00               	movlw	0
  3611  000064  6E4F               	movwf	_i,c	;volatile
  3612                           
  3613                           ;main.c: 22: }else{
  3614  000066  D001               	goto	i2l1457
  3615  000068                     i2l1455:
  3616                           
  3617                           ;main.c: 23: i++;
  3618  000068  2A4F               	incf	_i,f,c	;volatile
  3619  00006A                     i2l1457:
  3620                           
  3621                           ;main.c: 24: }
  3622                           ;main.c: 25: PIR1bits.RCIF=0;
  3623  00006A  9A9E               	bcf	3998,5,c	;volatile
  3624  00006C                     i2l52:
  3625  00006C  C00E  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  3626  000070  C00D  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  3627  000074  C00C  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  3628  000078  C00B  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  3629  00007C  C00A  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  3630  000080  C009  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  3631  000084  C008  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  3632  000088  C007  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  3633  00008C  C006  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  3634  000090  C005  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  3635  000094  C004  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  3636  000098  C003  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  3637  00009C  C002  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  3638  0000A0  C001  FFFA         	movff	??_InterruptHandlerHigh,pclath
  3639  0000A4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3640  0000A6  0011               	retfie		f
  3641  0000A8                     __end_of_InterruptHandlerHigh:
  3642                           	opt stack 0
  3643  0000                     pclatu	equ	0xFFB
  3644                           pclath	equ	0xFFA
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           postinc0	equ	0xFEE
  3653                           fsr0h	equ	0xFEA
  3654                           fsr0l	equ	0xFE9
  3655                           wreg	equ	0xFE8
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           pclatu	equ	0xFFB
  3665                           pclath	equ	0xFFA
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           postinc0	equ	0xFEE
  3674                           fsr0h	equ	0xFEA
  3675                           fsr0l	equ	0xFE9
  3676                           wreg	equ	0xFE8
  3677                           fsr1h	equ	0xFE2
  3678                           fsr1l	equ	0xFE1
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686                           	psect	rparam
  3687  0000                     pclatu	equ	0xFFB
  3688                           pclath	equ	0xFFA
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           intcon	equ	0xFF2
  3696                           postinc0	equ	0xFEE
  3697                           fsr0h	equ	0xFEA
  3698                           fsr0l	equ	0xFE9
  3699                           wreg	equ	0xFE8
  3700                           fsr1h	equ	0xFE2
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           postdec2	equ	0xFDD
  3705                           fsr2h	equ	0xFDA
  3706                           fsr2l	equ	0xFD9
  3707                           status	equ	0xFD8
  3708                           
  3709                           	psect	temp
  3710  000050                     btemp:
  3711                           	opt stack 0
  3712  000050                     	ds	1
  3713  0000                     int$flags	set	btemp
  3714                           pclatu	equ	0xFFB
  3715                           pclath	equ	0xFFA
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           postinc0	equ	0xFEE
  3724                           fsr0h	equ	0xFEA
  3725                           fsr0l	equ	0xFE9
  3726                           wreg	equ	0xFE8
  3727                           fsr1h	equ	0xFE2
  3728                           fsr1l	equ	0xFE1
  3729                           indf2	equ	0xFDF
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      79
    BANK0           160     45      45
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK0[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK0[9]), main@mL(BANK0[9]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S305DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S305DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _ScanIR->_turnLeft
    _ScanIR->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ScanWithRange

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               137   137      0   73791
                                             21 BANK0     24    24      0
                             _ScanIR
                      _ScanWithRange
                            _delay_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                             _initIR
                       _initMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3322
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       28    23      5   31521
                                             46 COMRAM     7     2      5
                                              0 BANK0     21    21      0
                            ___awdiv
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              16    12      4   28467
                                             46 COMRAM    16    12      4
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    9878
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4   10648
                                             42 COMRAM     4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    6032
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3044
                                             37 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2026
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     348
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     869
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _grabRightIR                                          8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _grabLeftIR                                           8     6      2     108
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _delay_tenth_s                                        4     4      0      71
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ScanIR
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _ScanWithRange
     ___awdiv
       ___wmul (ARG)
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _delay_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initIR
   _initMotorPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2D      2D       4       28.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      4F       1       84.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C       5        0.0%
DATA                 0      0      7C      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Mar 16 19:54:03 2018

                        ?_grabRightIR 000F                                     _i 004F  
                                  l55 08C8                          ___awdiv@sign 001A  
                 ___wmul@multiplicand 0011                                   l107 0AB4  
                                 l137 0D62                           grabLeftIR@i 0016  
                                 prod 000FF3                                   wreg 000FE8  
                                l2201 0BB4                                  l2213 0BDA  
                                l2303 0E72                                  l2311 0CB2  
                                l2215 0BE2                                  l2207 0BC4  
                                l2233 0C1A                                  l2225 0C02  
                                l2217 0BE6                                  l2307 0CAA  
                                l2323 0C34                                  l2243 0A8C  
                                l2251 0D2A                                  l2411 0376  
                                l2317 0CF2                                  l2333 0C7C  
                                l2229 0C0C                                  l2405 0344  
                                l2327 0C3C                                  l2255 0D42  
                                l2247 0D12                                  l2511 0630  
                                l2273 0B42                                  l2265 0B12  
                                l2425 03FE                                  l2417 037A  
                                l2269 0B2A                                  l2533 06F4  
                                l2445 04B2                                  l2453 04C8  
                                l2437 042E                                  l2381 0252  
                                l2373 01D6                                  l2621 08CE  
                                l2279 0B62                                  l2391 02BC  
                                l2553 074A                                  l2481 0554  
                                l2377 0214                                  l1833 0E3A  
                                l2641 0948                                  l2299 0E60  
                                l2547 0746                                  l2539 06F8  
                                l2491 05C2                                  l2467 0510  
                                l1843 0F00                                  l2581 07EC  
                                l2565 079A                                  l2397 02C0  
                                l1829 0E28                                  l2653 099C  
                                l2645 096C                                  l2575 07E8  
                                l2663 09C2                                  l2593 0828  
                                l2497 05C6                                  l2649 098E  
                                l2659 09BC                                  _LATB 000F8A  
                                u2207 0B5C                                  u1175 0EFC  
                                u1176 0EFE                                  u2217 0D5C  
                                u2227 0C70                                  u1195 0F0E  
                                u1196 0F10                                  u2237 0CE6  
                                u2247 0E66                                  u1644 0A50  
                                u1805 0C44                                  u1645 0A4C  
                                u2197 0E2E                                  u1654 0AA8  
                                u1655 0AA4                                  u1665 0B00  
                                u1775 0CBA                                  i2l52 006C  
                                _main 082C                         main@ScanAngle 0078  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 0050  
                                _stop 0B10                                  pclat 000FFA  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                        delay_s@seconds 0010  
                        ___param_bank 000010                                 ?_main 0001  
                     __end_of___awdiv 0C24                                 ?_stop 0026  
                     ___awdiv@divisor 0017                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0016                       ___awdiv@counter 0019  
                               _RCREG 000FAE                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 0E4C                                 main@i 0077  
                               tablat 000FF5                                 status 000FD8  
              __size_of_ScanWithRange 0588                       __initialization 0F5A  
                        __end_of_main 09DC                          __end_of_stop 0BA0  
                      delay_tenth_s@i 0011                        __CFG_OSC$IRCIO 000000  
                __end_of_enableSensor 0F12                                ??_main 003F  
                              ??_stop 002A                         __activetblptr 000002  
                       ?_initMotorPWM 0001                          ?_setMotorPWM 001D  
              __size_of_fullSpeedBack 0036                      ___awdiv@dividend 0015  
                              i2l1455 0068                                i2l1457 006A  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 0E84  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
                              _ScanIR 0634                                ___wmul 0F12  
                           ??___awdiv 0019                                _initIR 0F38  
                __size_of_grabRightIR 0076                                clear_0 0F60  
                    ___awdiv@quotient 001B                             ??_delay_s 000F  
                              main@mL 007B                                main@mR 0084  
                      ??_initMotorPWM 000F                         _ScanWithRange 00AC  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0026  
                              stop@mR 0028                      __end_of_turnLeft 0E14  
                     fullSpeedBack@mL 002B                       fullSpeedBack@mR 002D  
                          __accesstop 0060               __end_of__initialization 0F66  
                       ___rparam_used 000001                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 0E84                        ?_ScanWithRange 002F  
       __size_of_InterruptHandlerHigh 00A0            delay_tenth_s@tenth_seconds 0010  
                             ?_ScanIR 002F                        ?_fullSpeedBack 002B  
               __size_of_enableSensor 0026                               ?___wmul 000F  
                 grabLeftIR@IR_signal 0014                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 0C9A  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                __size_of_setMotorPWM 0134                          _enableSensor 0EEC  
                  __size_of_turnRight 004A                  __end_of_initMotorPWM 0EEC  
                             __Hparam 0000                               __Lparam 0000  
                     __size_of_ScanIR 01F8                               ___awdiv 0BA0  
                     __size_of___wmul 0026                       __size_of_initIR 0022  
                             __pcinit 0F5A                       ??_ScanWithRange 0034  
                             _delay_s 0E14                               __ramtop 0300  
                           ?_turnLeft 002B                               __ptext0 082C  
                             __ptext1 0EBA                               __ptext2 0F38  
                             __ptext3 0E84                               __ptext4 0EEC  
                             __ptext5 0E14                               __ptext6 00AC  
                             __ptext7 0634                               __ptext8 0D80  
                             __ptext9 0DCA                  end_of_initialization 0F66  
                  setMotorPWM@PWMduty 0024                         __Lmediumconst 0000  
                  ScanIR@SensorResult 003B                       ??_fullSpeedBack 002F  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 002F                     __end_of_turnRight 0DCA  
                         ?_grabLeftIR 000F                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                    fullSpeedAhead@mL 0026                      fullSpeedAhead@mR 0028  
       ScanIR@DirectionFoundTolerance 0039                             _TXSTAbits 000FAC  
                       ??_grabRightIR 0011                        __end_of_ScanIR 082C  
                      _fullSpeedAhead 0D10                        _ReceivedString 003F  
                      __end_of___wmul 0F38                           _BAUDCONbits 000FAA  
                      __end_of_initIR 0F5A                __size_of_delay_tenth_s 0038  
                 start_initialization 0F5A                 __size_of_initMotorPWM 0032  
        __end_of_InterruptHandlerHigh 00A8                              ??_ScanIR 0033  
              __end_of_fullSpeedAhead 0D80                   __size_of_grabLeftIR 0076  
                            ??___wmul 0013                              ??_initIR 000F  
                 __end_of_grabRightIR 0C9A                          _initMotorPWM 0EBA  
                         __pbssCOMRAM 003F                         __pcstackBANK0 0060  
    ScanWithRange@DirectionFoundLimit 0065                         _delay_tenth_s 0E4C  
   ScanWithRange@ClearSignalTolerance 0063                       ?_fullSpeedAhead 0026  
                           __pintcode 0008                              ?___awdiv 0015  
                            ?_delay_s 0001                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                     __size_of_turnLeft 004A  
          ScanWithRange@SensorResultC 006D            ScanWithRange@SensorResultL 0069  
          ScanWithRange@SensorResultR 0071                         ??_setMotorPWM 001F  
                      ?_delay_tenth_s 0001                        ___wmul@product 0013  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 002B                           turnRight@mR 002D  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                         _grabRightIR 0C24                  grabRightIR@IR_signal 0014  
                   ___wmul@multiplier 000F                 __end_of_ScanWithRange 0634  
                        setMotorPWM@m 001D                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 002F                              ScanIR@mR 0031  
                        ??_grabLeftIR 0011                             _turnRight 0D80  
          ScanIR@ClearSignalTolerance 0035                   __end_of_setMotorPWM 0B10  
                            __Hrparam 0000                              __Lrparam 0000  
               __end_of_fullSpeedBack 0EBA                    __end_of_grabLeftIR 0D10  
                    __size_of___awdiv 0084                            _ANSEL0bits 000FB8  
                    __size_of_delay_s 0038                 ?_InterruptHandlerHigh 0001  
                          ?_turnRight 002B                              __ptext10 0B10  
                            __ptext11 0D10                              __ptext12 09DC  
                            __ptext13 0F12                              __ptext14 0BA0  
                            __ptext15 0C24                              __ptext16 0C9A  
                            __ptext17 0E4C                       ??_delay_tenth_s 000F  
                       __size_of_main 01B0             ScanWithRange@ResultFalseC 0061  
                  main@DirectionFound 007A             ScanWithRange@ResultFalseL 0060  
           ScanWithRange@ResultFalseR 0062                         __size_of_stop 0090  
                          turnLeft@mL 002B                            turnLeft@mR 002D  
                            delay_s@i 0011                              int$flags 0050  
                            main@mode 0079                              main@test 0075  
                            _turnLeft 0DCA                       ScanWithRange@mL 002F  
                     ScanWithRange@mR 0031                    enableSensor@sensor 0010  
                  enableSensor@status 000F                            _INTCONbits 000FF2  
          ScanWithRange@tenth_seconds 0033                           _setMotorPWM 09DC  
                            intlevel2 0000                         ?_enableSensor 000F  
                    ??_fullSpeedAhead 002A                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundTolerance 0067                ??_InterruptHandlerHigh 0001  
                         ??_turnRight 002F                        ??_enableSensor 0010  
           ScanIR@DirectionFoundLimit 0037  
